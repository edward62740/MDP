
STM32_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012760  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010dc  080128f0  080128f0  000228f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080139cc  080139cc  0003023c  2**0
                  CONTENTS
  4 .ARM          00000008  080139cc  080139cc  000239cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080139d4  080139d4  0003023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080139d4  080139d4  000239d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080139dc  080139dc  000239dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000023c  20000000  080139e4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003023c  2**0
                  CONTENTS
 10 .bss          00005a1c  2000023c  2000023c  0003023c  2**2
                  ALLOC
 11 ._user_heap_stack 00000c00  20005c58  20005c58  0003023c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003023c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002c9b7  00000000  00000000  0003026c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000585f  00000000  00000000  0005cc23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d90  00000000  00000000  00062488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001bd8  00000000  00000000  00064218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bd55  00000000  00000000  00065df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002527c  00000000  00000000  00091b45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed934  00000000  00000000  000b6dc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a46f5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000093bc  00000000  00000000  001a4748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000023c 	.word	0x2000023c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080128d8 	.word	0x080128d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000240 	.word	0x20000240
 80001cc:	080128d8 	.word	0x080128d8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <IMU_Initialise>:
int16_t gyro_offset[3] = { 0 }; // gyro_offset value calibrated by Gyro_calibrate()

/*
 * INITIALISATION
 */
uint8_t* IMU_Initialise(ICM20948 *dev, I2C_HandleTypeDef *i2cHandle) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]

	char hex[2];
	uint8_t regData;

	dev->i2cHandle = i2cHandle;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	601a      	str	r2, [r3, #0]
	 buf[0] = REG_ADD_REG_BANK_SEL;  // bank select register
	 buf[1] = REG_VAL_REG_BANK_0;           // bank 0
	 ret = HAL_I2C_Master_Transmit(i2cHandle, IMU_ADDR, buf, I2C_MEMADD_SIZE_16BIT, 10);

	 */
	ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	217f      	movs	r1, #127	; 0x7f
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f000 f8ab 	bl	80010bc <IMU_WriteOneByte>
 8000f66:	4603      	mov	r3, r0
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b53      	ldr	r3, [pc, #332]	; (80010b8 <IMU_Initialise+0x16c>)
 8000f6c:	701a      	strb	r2, [r3, #0]


	//check ID
	/*	  buf[0] = REG_WHO_AM_I;  //(Should return ID =  0xEA)
	 ret = HAL_I2C_Mem_Read(i2cHandle, IMU_ADDR, REG_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, buf, I2C_MEMADD_SIZE_8BIT, 10);  */
	ret = IMU_ReadOneByte(dev, REG_WHO_AM_I, &regData);
 8000f6e:	2100      	movs	r1, #0
 8000f70:	f107 030b 	add.w	r3, r7, #11
 8000f74:	461a      	mov	r2, r3
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f000 f8bc 	bl	80010f4 <IMU_ReadOneByte>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	461a      	mov	r2, r3
 8000f80:	4b4d      	ldr	r3, [pc, #308]	; (80010b8 <IMU_Initialise+0x16c>)
 8000f82:	701a      	strb	r2, [r3, #0]

	//return &buf[0];

	// Initialize
	// Bank 0 - Reset the device and then auto selects the best available clock source
	ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 8000f84:	2200      	movs	r2, #0
 8000f86:	217f      	movs	r1, #127	; 0x7f
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f000 f897 	bl	80010bc <IMU_WriteOneByte>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	461a      	mov	r2, r3
 8000f92:	4b49      	ldr	r3, [pc, #292]	; (80010b8 <IMU_Initialise+0x16c>)
 8000f94:	701a      	strb	r2, [r3, #0]

	//ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_1, REG_VAL_ALL_RGE_RESET); // reset device - check hearder file value should be 0xF1

	osDelay(10);
 8000f96:	200a      	movs	r0, #10
 8000f98:	f00a fb14 	bl	800b5c4 <osDelay>
	ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_1, REG_VAL_RUN_MODE); // auto selects the best available clock source for device
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2106      	movs	r1, #6
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f000 f88b 	bl	80010bc <IMU_WriteOneByte>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b43      	ldr	r3, [pc, #268]	; (80010b8 <IMU_Initialise+0x16c>)
 8000fac:	701a      	strb	r2, [r3, #0]

	// Turn off and on Accelator and Gyro - page 28
	osDelay(10);
 8000fae:	200a      	movs	r0, #10
 8000fb0:	f00a fb08 	bl	800b5c4 <osDelay>
	ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_2, REG_VAL_ACCEL_GYROLL_OFF); // OFF
 8000fb4:	223f      	movs	r2, #63	; 0x3f
 8000fb6:	2107      	movs	r1, #7
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f000 f87f 	bl	80010bc <IMU_WriteOneByte>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b3d      	ldr	r3, [pc, #244]	; (80010b8 <IMU_Initialise+0x16c>)
 8000fc4:	701a      	strb	r2, [r3, #0]

	osDelay(10);
 8000fc6:	200a      	movs	r0, #10
 8000fc8:	f00a fafc 	bl	800b5c4 <osDelay>
	ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_2, REG_VAL_ACCEL_GYROLL_ON); // ON
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2107      	movs	r1, #7
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f000 f873 	bl	80010bc <IMU_WriteOneByte>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b37      	ldr	r3, [pc, #220]	; (80010b8 <IMU_Initialise+0x16c>)
 8000fdc:	701a      	strb	r2, [r3, #0]

	ret = IMU_WriteOneByte(dev, REG_ADD_INT_ENABLE_1, REG_VAL_INT_ENABLED); // Turn on inteerup on pin INT1
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2110      	movs	r1, #16
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 f86a 	bl	80010bc <IMU_WriteOneByte>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	461a      	mov	r2, r3
 8000fec:	4b32      	ldr	r3, [pc, #200]	; (80010b8 <IMU_Initialise+0x16c>)
 8000fee:	701a      	strb	r2, [r3, #0]

	uint8_t tmp = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	72bb      	strb	r3, [r7, #10]
	IMU_ReadOneByte(dev, REG_ADD_INT_PIN_CFG, &tmp);
 8000ff4:	f107 030a 	add.w	r3, r7, #10
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	210f      	movs	r1, #15
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f000 f879 	bl	80010f4 <IMU_ReadOneByte>
	IMU_WriteOneByte(dev, REG_ADD_INT_PIN_CFG, tmp | 0x02);
 8001002:	7abb      	ldrb	r3, [r7, #10]
 8001004:	f043 0302 	orr.w	r3, r3, #2
 8001008:	b2db      	uxtb	r3, r3
 800100a:	461a      	mov	r2, r3
 800100c:	210f      	movs	r1, #15
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 f854 	bl	80010bc <IMU_WriteOneByte>

	// Bank 2 - Gyro and Acce and start running
	/* user bank 2 register */
	ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_2);
 8001014:	2220      	movs	r2, #32
 8001016:	217f      	movs	r1, #127	; 0x7f
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f000 f84f 	bl	80010bc <IMU_WriteOneByte>
 800101e:	4603      	mov	r3, r0
 8001020:	461a      	mov	r2, r3
 8001022:	4b25      	ldr	r3, [pc, #148]	; (80010b8 <IMU_Initialise+0x16c>)
 8001024:	701a      	strb	r2, [r3, #0]

	ret = IMU_WriteOneByte(dev, REG_ADD_GYRO_SMPLRT_DIV, 0x16); //
 8001026:	2216      	movs	r2, #22
 8001028:	2100      	movs	r1, #0
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f000 f846 	bl	80010bc <IMU_WriteOneByte>
 8001030:	4603      	mov	r3, r0
 8001032:	461a      	mov	r2, r3
 8001034:	4b20      	ldr	r3, [pc, #128]	; (80010b8 <IMU_Initialise+0x16c>)
 8001036:	701a      	strb	r2, [r3, #0]

	ret = IMU_WriteOneByte(dev, REG_ADD_GYRO_CONFIG_1,
 8001038:	2237      	movs	r2, #55	; 0x37
 800103a:	2101      	movs	r1, #1
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f000 f83d 	bl	80010bc <IMU_WriteOneByte>
 8001042:	4603      	mov	r3, r0
 8001044:	461a      	mov	r2, r3
 8001046:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <IMU_Initialise+0x16c>)
 8001048:	701a      	strb	r2, [r3, #0]
			REG_VAL_BIT_GYRO_DLPCFG_6 | REG_VAL_BIT_GYRO_FS_2000DPS
					| REG_VAL_BIT_GYRO_DLPF); // enable low pass filter and set Gyro FS


	ret = IMU_WriteOneByte(dev, REG_ADD_ACCEL_SMPLRT_DIV_2, 0x10); //
 800104a:	2210      	movs	r2, #16
 800104c:	2111      	movs	r1, #17
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f000 f834 	bl	80010bc <IMU_WriteOneByte>
 8001054:	4603      	mov	r3, r0
 8001056:	461a      	mov	r2, r3
 8001058:	4b17      	ldr	r3, [pc, #92]	; (80010b8 <IMU_Initialise+0x16c>)
 800105a:	701a      	strb	r2, [r3, #0]
	ret = IMU_WriteOneByte(dev, REG_ADD_ACCEL_SMPLRT_DIV_1, 0x00); // upper 3 bit of sample rate = 0
 800105c:	2200      	movs	r2, #0
 800105e:	2110      	movs	r1, #16
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f000 f82b 	bl	80010bc <IMU_WriteOneByte>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <IMU_Initialise+0x16c>)
 800106c:	701a      	strb	r2, [r3, #0]

	// enable LPF and set accel full scale to +/-2G, sensitivity scale factor = 16384 LSB/g
	ret = IMU_WriteOneByte(dev, REG_ADD_ACCEL_CONFIG,
 800106e:	2231      	movs	r2, #49	; 0x31
 8001070:	2114      	movs	r1, #20
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 f822 	bl	80010bc <IMU_WriteOneByte>
 8001078:	4603      	mov	r3, r0
 800107a:	461a      	mov	r2, r3
 800107c:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <IMU_Initialise+0x16c>)
 800107e:	701a      	strb	r2, [r3, #0]
			REG_VAL_BIT_ACCEL_DLPCFG_6 | REG_VAL_BIT_ACCEL_FS_2g
					| REG_VAL_BIT_ACCEL_DLPF);

	IMU_WriteOneByte(dev, REG_ADD_TEMP_CONFIG, REG_VAL_TEMP_CONFIG); // Temp configuration pg 67
 8001080:	2200      	movs	r2, #0
 8001082:	2153      	movs	r1, #83	; 0x53
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 f819 	bl	80010bc <IMU_WriteOneByte>

	IMU_WriteOneByte(dev, 0x15, 0x03);
 800108a:	2203      	movs	r2, #3
 800108c:	2115      	movs	r1, #21
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f000 f814 	bl	80010bc <IMU_WriteOneByte>
	// back to bank 0
	ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 8001094:	2200      	movs	r2, #0
 8001096:	217f      	movs	r1, #127	; 0x7f
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f000 f80f 	bl	80010bc <IMU_WriteOneByte>
 800109e:	4603      	mov	r3, r0
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <IMU_Initialise+0x16c>)
 80010a4:	701a      	strb	r2, [r3, #0]

	osDelay(100);
 80010a6:	2064      	movs	r0, #100	; 0x64
 80010a8:	f00a fa8c 	bl	800b5c4 <osDelay>
	//Gyro_calibrate(dev);  // calibrate the offset of the gyroscope

	// everthing OK
	//strcpy((char*)buf, "Initialize OK\r\n");
	//return &buf;
	return 0; // 0 means 0 error
 80010ac:	2300      	movs	r3, #0

}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000258 	.word	0x20000258

080010bc <IMU_WriteOneByte>:

HAL_StatusTypeDef IMU_WriteOneByte(ICM20948 *dev, uint8_t reg, uint8_t data) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af04      	add	r7, sp, #16
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	70fb      	strb	r3, [r7, #3]
 80010c8:	4613      	mov	r3, r2
 80010ca:	70bb      	strb	r3, [r7, #2]

	return HAL_I2C_Mem_Write(dev->i2cHandle, IMU_ADDR, reg, 1, &data, 1, 100);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6818      	ldr	r0, [r3, #0]
 80010d0:	23d0      	movs	r3, #208	; 0xd0
 80010d2:	b299      	uxth	r1, r3
 80010d4:	78fb      	ldrb	r3, [r7, #3]
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	2364      	movs	r3, #100	; 0x64
 80010da:	9302      	str	r3, [sp, #8]
 80010dc:	2301      	movs	r3, #1
 80010de:	9301      	str	r3, [sp, #4]
 80010e0:	1cbb      	adds	r3, r7, #2
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	2301      	movs	r3, #1
 80010e6:	f005 ffd1 	bl	800708c <HAL_I2C_Mem_Write>
 80010ea:	4603      	mov	r3, r0

}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <IMU_ReadOneByte>:

HAL_StatusTypeDef IMU_ReadOneByte(ICM20948 *dev, uint8_t reg, uint8_t *data) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b088      	sub	sp, #32
 80010f8:	af04      	add	r7, sp, #16
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	460b      	mov	r3, r1
 80010fe:	607a      	str	r2, [r7, #4]
 8001100:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read(dev->i2cHandle, IMU_ADDR, reg, 1, data, 1, 100);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	6818      	ldr	r0, [r3, #0]
 8001106:	23d0      	movs	r3, #208	; 0xd0
 8001108:	b299      	uxth	r1, r3
 800110a:	7afb      	ldrb	r3, [r7, #11]
 800110c:	b29a      	uxth	r2, r3
 800110e:	2364      	movs	r3, #100	; 0x64
 8001110:	9302      	str	r3, [sp, #8]
 8001112:	2301      	movs	r3, #1
 8001114:	9301      	str	r3, [sp, #4]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	2301      	movs	r3, #1
 800111c:	f006 f8b0 	bl	8007280 <HAL_I2C_Mem_Read>
 8001120:	4603      	mov	r3, r0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <Mag_WriteOneByte>:

HAL_StatusTypeDef Mag_WriteOneByte(ICM20948 *dev, uint8_t reg, uint8_t data) {
 800112a:	b580      	push	{r7, lr}
 800112c:	b086      	sub	sp, #24
 800112e:	af04      	add	r7, sp, #16
 8001130:	6078      	str	r0, [r7, #4]
 8001132:	460b      	mov	r3, r1
 8001134:	70fb      	strb	r3, [r7, #3]
 8001136:	4613      	mov	r3, r2
 8001138:	70bb      	strb	r3, [r7, #2]

	return HAL_I2C_Mem_Write(dev->i2cHandle, MAG_ADDR, reg, 1, &data, 1, 100);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6818      	ldr	r0, [r3, #0]
 800113e:	2318      	movs	r3, #24
 8001140:	b299      	uxth	r1, r3
 8001142:	78fb      	ldrb	r3, [r7, #3]
 8001144:	b29a      	uxth	r2, r3
 8001146:	2364      	movs	r3, #100	; 0x64
 8001148:	9302      	str	r3, [sp, #8]
 800114a:	2301      	movs	r3, #1
 800114c:	9301      	str	r3, [sp, #4]
 800114e:	1cbb      	adds	r3, r7, #2
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	2301      	movs	r3, #1
 8001154:	f005 ff9a 	bl	800708c <HAL_I2C_Mem_Write>
 8001158:	4603      	mov	r3, r0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <IMU_AccelRead>:
	ret = IMU_ReadOneByte(dev, REG_ADD_TEMP_OUT_H, &u8Buf[1]);
	tempRaw = (u8Buf[1] << 8) | u8Buf[0];
	dev->temp_C = (tempRaw) / 333.81 + 21; // assuming no further offset apart from 21 dec C
}

HAL_StatusTypeDef IMU_AccelRead(ICM20948 *dev) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
	uint8_t u8Buf[2] = { 0 }; // reset to zero
 800116c:	2300      	movs	r3, #0
 800116e:	83bb      	strh	r3, [r7, #28]
	int16_t accRaw[3] = { 0 };  // reset to zero
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	809a      	strh	r2, [r3, #4]

	ret = IMU_ReadOneByte(dev, REG_ADD_ACCEL_XOUT_L, &u8Buf[0]);
 800117a:	f107 031c 	add.w	r3, r7, #28
 800117e:	461a      	mov	r2, r3
 8001180:	212e      	movs	r1, #46	; 0x2e
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff ffb6 	bl	80010f4 <IMU_ReadOneByte>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	4b5e      	ldr	r3, [pc, #376]	; (8001308 <IMU_AccelRead+0x1a4>)
 800118e:	701a      	strb	r2, [r3, #0]
	ret = IMU_ReadOneByte(dev, REG_ADD_ACCEL_XOUT_H, &u8Buf[1]);
 8001190:	f107 031c 	add.w	r3, r7, #28
 8001194:	3301      	adds	r3, #1
 8001196:	461a      	mov	r2, r3
 8001198:	212d      	movs	r1, #45	; 0x2d
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff ffaa 	bl	80010f4 <IMU_ReadOneByte>
 80011a0:	4603      	mov	r3, r0
 80011a2:	461a      	mov	r2, r3
 80011a4:	4b58      	ldr	r3, [pc, #352]	; (8001308 <IMU_AccelRead+0x1a4>)
 80011a6:	701a      	strb	r2, [r3, #0]
	accRaw[0] = (u8Buf[1] << 8) | u8Buf[0];
 80011a8:	7f7b      	ldrb	r3, [r7, #29]
 80011aa:	021b      	lsls	r3, r3, #8
 80011ac:	b21a      	sxth	r2, r3
 80011ae:	7f3b      	ldrb	r3, [r7, #28]
 80011b0:	b21b      	sxth	r3, r3
 80011b2:	4313      	orrs	r3, r2
 80011b4:	b21b      	sxth	r3, r3
 80011b6:	82bb      	strh	r3, [r7, #20]

	ret = IMU_ReadOneByte(dev, REG_ADD_ACCEL_YOUT_L, &u8Buf[0]);
 80011b8:	f107 031c 	add.w	r3, r7, #28
 80011bc:	461a      	mov	r2, r3
 80011be:	2130      	movs	r1, #48	; 0x30
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff ff97 	bl	80010f4 <IMU_ReadOneByte>
 80011c6:	4603      	mov	r3, r0
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b4f      	ldr	r3, [pc, #316]	; (8001308 <IMU_AccelRead+0x1a4>)
 80011cc:	701a      	strb	r2, [r3, #0]
	ret = IMU_ReadOneByte(dev, REG_ADD_ACCEL_YOUT_H, &u8Buf[1]);
 80011ce:	f107 031c 	add.w	r3, r7, #28
 80011d2:	3301      	adds	r3, #1
 80011d4:	461a      	mov	r2, r3
 80011d6:	212f      	movs	r1, #47	; 0x2f
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ff8b 	bl	80010f4 <IMU_ReadOneByte>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b49      	ldr	r3, [pc, #292]	; (8001308 <IMU_AccelRead+0x1a4>)
 80011e4:	701a      	strb	r2, [r3, #0]
	accRaw[1] = (u8Buf[1] << 8) | u8Buf[0];
 80011e6:	7f7b      	ldrb	r3, [r7, #29]
 80011e8:	021b      	lsls	r3, r3, #8
 80011ea:	b21a      	sxth	r2, r3
 80011ec:	7f3b      	ldrb	r3, [r7, #28]
 80011ee:	b21b      	sxth	r3, r3
 80011f0:	4313      	orrs	r3, r2
 80011f2:	b21b      	sxth	r3, r3
 80011f4:	82fb      	strh	r3, [r7, #22]

	ret = IMU_ReadOneByte(dev, REG_ADD_ACCEL_ZOUT_L, &u8Buf[0]);
 80011f6:	f107 031c 	add.w	r3, r7, #28
 80011fa:	461a      	mov	r2, r3
 80011fc:	2132      	movs	r1, #50	; 0x32
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff ff78 	bl	80010f4 <IMU_ReadOneByte>
 8001204:	4603      	mov	r3, r0
 8001206:	461a      	mov	r2, r3
 8001208:	4b3f      	ldr	r3, [pc, #252]	; (8001308 <IMU_AccelRead+0x1a4>)
 800120a:	701a      	strb	r2, [r3, #0]
	ret = IMU_ReadOneByte(dev, REG_ADD_ACCEL_ZOUT_H, &u8Buf[1]);
 800120c:	f107 031c 	add.w	r3, r7, #28
 8001210:	3301      	adds	r3, #1
 8001212:	461a      	mov	r2, r3
 8001214:	2131      	movs	r1, #49	; 0x31
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff ff6c 	bl	80010f4 <IMU_ReadOneByte>
 800121c:	4603      	mov	r3, r0
 800121e:	461a      	mov	r2, r3
 8001220:	4b39      	ldr	r3, [pc, #228]	; (8001308 <IMU_AccelRead+0x1a4>)
 8001222:	701a      	strb	r2, [r3, #0]
	accRaw[2] = (u8Buf[1] << 8) | u8Buf[0];
 8001224:	7f7b      	ldrb	r3, [r7, #29]
 8001226:	021b      	lsls	r3, r3, #8
 8001228:	b21a      	sxth	r2, r3
 800122a:	7f3b      	ldrb	r3, [r7, #28]
 800122c:	b21b      	sxth	r3, r3
 800122e:	4313      	orrs	r3, r2
 8001230:	b21b      	sxth	r3, r3
 8001232:	833b      	strh	r3, [r7, #24]

	/* Convert to SIGNED integers (two's complement) */
	int32_t accRawSigned[3];

	if ((accRaw[0] & 0x00080000) == 0x00080000)
 8001234:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001238:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d007      	beq.n	8001250 <IMU_AccelRead+0xec>
		accRawSigned[0] = accRaw[0] | 0xFFF00000;
 8001240:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001244:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 8001248:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	e002      	b.n	8001256 <IMU_AccelRead+0xf2>
	else
		accRawSigned[0] = accRaw[0];
 8001250:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001254:	60bb      	str	r3, [r7, #8]

	if ((accRaw[1] & 0x00080000) == 0x00080000)
 8001256:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800125a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d007      	beq.n	8001272 <IMU_AccelRead+0x10e>
		accRawSigned[1] = accRaw[1] | 0xFFF00000;
 8001262:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001266:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 800126a:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	e002      	b.n	8001278 <IMU_AccelRead+0x114>
	else
		accRawSigned[1] = accRaw[1];
 8001272:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001276:	60fb      	str	r3, [r7, #12]

	if ((accRaw[2] & 0x00080000) == 0x000080000)
 8001278:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800127c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d007      	beq.n	8001294 <IMU_AccelRead+0x130>
		accRawSigned[2] = accRaw[2] | 0xFFF00000;
 8001284:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001288:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 800128c:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	e002      	b.n	800129a <IMU_AccelRead+0x136>
	else
		accRawSigned[2] = accRaw[2];
 8001294:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001298:	613b      	str	r3, [r7, #16]

	// accel full scale set to +/-2G, sensitivity scale factor = 16384 LSB/g
	dev->acc[0] = 0.00006103515625f * accRawSigned[0] * 9.81f;
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	ee07 3a90 	vmov	s15, r3
 80012a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012a4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800130c <IMU_AccelRead+0x1a8>
 80012a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ac:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001310 <IMU_AccelRead+0x1ac>
 80012b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	edc3 7a01 	vstr	s15, [r3, #4]
	dev->acc[1] = 0.00006103515625f * accRawSigned[1] * 9.81f;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	ee07 3a90 	vmov	s15, r3
 80012c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c4:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800130c <IMU_AccelRead+0x1a8>
 80012c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012cc:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001310 <IMU_AccelRead+0x1ac>
 80012d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	edc3 7a02 	vstr	s15, [r3, #8]
	dev->acc[2] = 0.00006103515625f * accRawSigned[2] * 9.81f; // * 9.81f
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	ee07 3a90 	vmov	s15, r3
 80012e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012e4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800130c <IMU_AccelRead+0x1a8>
 80012e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ec:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001310 <IMU_AccelRead+0x1ac>
 80012f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	edc3 7a03 	vstr	s15, [r3, #12]

	return ret;
 80012fa:	4b03      	ldr	r3, [pc, #12]	; (8001308 <IMU_AccelRead+0x1a4>)
 80012fc:	781b      	ldrb	r3, [r3, #0]

}
 80012fe:	4618      	mov	r0, r3
 8001300:	3720      	adds	r7, #32
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000258 	.word	0x20000258
 800130c:	38800000 	.word	0x38800000
 8001310:	411cf5c3 	.word	0x411cf5c3

08001314 <Gyro_calibrate>:

HAL_StatusTypeDef Gyro_calibrate(ICM20948 *dev) // calibrate the offset of the gyro
// store the offset in int16_t gyro_offset[3]
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	uint8_t u8Buf[2] = { 0 }; // reset to zero upon entry
 800131c:	2300      	movs	r3, #0
 800131e:	823b      	strh	r3, [r7, #16]
	int16_t gyroRaw[3] = { 0 }; // reset to zero upon entry
 8001320:	f107 0308 	add.w	r3, r7, #8
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	809a      	strh	r2, [r3, #4]
	int8_t i;
	int16_t temp;

	for (i = 0; i < 32; i++) {
 800132a:	2300      	movs	r3, #0
 800132c:	75fb      	strb	r3, [r7, #23]
 800132e:	e06c      	b.n	800140a <Gyro_calibrate+0xf6>
		IMU_ReadOneByte(dev, REG_ADD_GYRO_XOUT_L, &u8Buf[0]);
 8001330:	f107 0310 	add.w	r3, r7, #16
 8001334:	461a      	mov	r2, r3
 8001336:	2134      	movs	r1, #52	; 0x34
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff fedb 	bl	80010f4 <IMU_ReadOneByte>
		IMU_ReadOneByte(dev, REG_ADD_GYRO_XOUT_H, &u8Buf[1]);
 800133e:	f107 0310 	add.w	r3, r7, #16
 8001342:	3301      	adds	r3, #1
 8001344:	461a      	mov	r2, r3
 8001346:	2133      	movs	r1, #51	; 0x33
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff fed3 	bl	80010f4 <IMU_ReadOneByte>
		temp = (u8Buf[1] << 8) | u8Buf[0]; // for debugging
 800134e:	7c7b      	ldrb	r3, [r7, #17]
 8001350:	021b      	lsls	r3, r3, #8
 8001352:	b21a      	sxth	r2, r3
 8001354:	7c3b      	ldrb	r3, [r7, #16]
 8001356:	b21b      	sxth	r3, r3
 8001358:	4313      	orrs	r3, r2
 800135a:	82bb      	strh	r3, [r7, #20]
		gyroRaw[0] = temp + gyroRaw[0];
 800135c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001360:	b29a      	uxth	r2, r3
 8001362:	8abb      	ldrh	r3, [r7, #20]
 8001364:	4413      	add	r3, r2
 8001366:	b29b      	uxth	r3, r3
 8001368:	b21b      	sxth	r3, r3
 800136a:	813b      	strh	r3, [r7, #8]
		//gyroRaw[0] = (u8Buf[1]<<8)|u8Buf[0] + gyroRaw[0];
osDelay(1);
 800136c:	2001      	movs	r0, #1
 800136e:	f00a f929 	bl	800b5c4 <osDelay>
		IMU_ReadOneByte(dev, REG_ADD_GYRO_YOUT_L, &u8Buf[0]);
 8001372:	f107 0310 	add.w	r3, r7, #16
 8001376:	461a      	mov	r2, r3
 8001378:	2136      	movs	r1, #54	; 0x36
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff feba 	bl	80010f4 <IMU_ReadOneByte>
		IMU_ReadOneByte(dev, REG_ADD_GYRO_YOUT_H, &u8Buf[1]);
 8001380:	f107 0310 	add.w	r3, r7, #16
 8001384:	3301      	adds	r3, #1
 8001386:	461a      	mov	r2, r3
 8001388:	2135      	movs	r1, #53	; 0x35
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff feb2 	bl	80010f4 <IMU_ReadOneByte>
		gyroRaw[1] = ((u8Buf[1] << 8) | u8Buf[0]) + gyroRaw[1];
 8001390:	7c7b      	ldrb	r3, [r7, #17]
 8001392:	021b      	lsls	r3, r3, #8
 8001394:	b21a      	sxth	r2, r3
 8001396:	7c3b      	ldrb	r3, [r7, #16]
 8001398:	b21b      	sxth	r3, r3
 800139a:	4313      	orrs	r3, r2
 800139c:	b21b      	sxth	r3, r3
 800139e:	b29a      	uxth	r2, r3
 80013a0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	4413      	add	r3, r2
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	b21b      	sxth	r3, r3
 80013ac:	817b      	strh	r3, [r7, #10]
		osDelay(1);
 80013ae:	2001      	movs	r0, #1
 80013b0:	f00a f908 	bl	800b5c4 <osDelay>
		IMU_ReadOneByte(dev, REG_ADD_GYRO_ZOUT_L, &u8Buf[0]);
 80013b4:	f107 0310 	add.w	r3, r7, #16
 80013b8:	461a      	mov	r2, r3
 80013ba:	2138      	movs	r1, #56	; 0x38
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff fe99 	bl	80010f4 <IMU_ReadOneByte>
		ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_ZOUT_H, &u8Buf[1]);
 80013c2:	f107 0310 	add.w	r3, r7, #16
 80013c6:	3301      	adds	r3, #1
 80013c8:	461a      	mov	r2, r3
 80013ca:	2137      	movs	r1, #55	; 0x37
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff fe91 	bl	80010f4 <IMU_ReadOneByte>
 80013d2:	4603      	mov	r3, r0
 80013d4:	461a      	mov	r2, r3
 80013d6:	4b22      	ldr	r3, [pc, #136]	; (8001460 <Gyro_calibrate+0x14c>)
 80013d8:	701a      	strb	r2, [r3, #0]
		gyroRaw[2] = ((u8Buf[1] << 8) | u8Buf[0]) + gyroRaw[2];
 80013da:	7c7b      	ldrb	r3, [r7, #17]
 80013dc:	021b      	lsls	r3, r3, #8
 80013de:	b21a      	sxth	r2, r3
 80013e0:	7c3b      	ldrb	r3, [r7, #16]
 80013e2:	b21b      	sxth	r3, r3
 80013e4:	4313      	orrs	r3, r2
 80013e6:	b21b      	sxth	r3, r3
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	4413      	add	r3, r2
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	b21b      	sxth	r3, r3
 80013f6:	81bb      	strh	r3, [r7, #12]

		osDelay(25); // wait for 100msec
 80013f8:	2019      	movs	r0, #25
 80013fa:	f00a f8e3 	bl	800b5c4 <osDelay>
	for (i = 0; i < 32; i++) {
 80013fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001402:	b2db      	uxtb	r3, r3
 8001404:	3301      	adds	r3, #1
 8001406:	b2db      	uxtb	r3, r3
 8001408:	75fb      	strb	r3, [r7, #23]
 800140a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800140e:	2b1f      	cmp	r3, #31
 8001410:	dd8e      	ble.n	8001330 <Gyro_calibrate+0x1c>
	}

	dev->gyro_bias[0] = (float)(gyroRaw[0] >> 5);  // average of 32 reads
 8001412:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001416:	115b      	asrs	r3, r3, #5
 8001418:	b21b      	sxth	r3, r3
 800141a:	ee07 3a90 	vmov	s15, r3
 800141e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	dev->gyro_bias[1] = (float)(gyroRaw[1] >> 5);
 8001428:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800142c:	115b      	asrs	r3, r3, #5
 800142e:	b21b      	sxth	r3, r3
 8001430:	ee07 3a90 	vmov	s15, r3
 8001434:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	dev->gyro_bias[2] = (float)(gyroRaw[2] >> 5);
 800143e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001442:	115b      	asrs	r3, r3, #5
 8001444:	b21b      	sxth	r3, r3
 8001446:	ee07 3a90 	vmov	s15, r3
 800144a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c


	return ret;
 8001454:	4b02      	ldr	r3, [pc, #8]	; (8001460 <Gyro_calibrate+0x14c>)
 8001456:	781b      	ldrb	r3, [r3, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3718      	adds	r7, #24
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000258 	.word	0x20000258

08001464 <IMU_GyroRead>:

HAL_StatusTypeDef IMU_GyroRead(ICM20948 *dev) { // return the change in value instead of current value
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	; 0x28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
	uint8_t u8Buf[2] = { 0 }; // reset to zero
 800146c:	2300      	movs	r3, #0
 800146e:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t gyroRaw[3] = { 0 };  // reset to zero
 8001470:	f107 031c 	add.w	r3, r7, #28
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	809a      	strh	r2, [r3, #4]
	int16_t gyroDiff[3];
	int16_t temp;

	ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_YOUT_L, &u8Buf[0]);
 800147a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147e:	461a      	mov	r2, r3
 8001480:	2136      	movs	r1, #54	; 0x36
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff fe36 	bl	80010f4 <IMU_ReadOneByte>
 8001488:	4603      	mov	r3, r0
 800148a:	461a      	mov	r2, r3
 800148c:	4b58      	ldr	r3, [pc, #352]	; (80015f0 <IMU_GyroRead+0x18c>)
 800148e:	701a      	strb	r2, [r3, #0]
	ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_YOUT_H, &u8Buf[1]);
 8001490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001494:	3301      	adds	r3, #1
 8001496:	461a      	mov	r2, r3
 8001498:	2135      	movs	r1, #53	; 0x35
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff fe2a 	bl	80010f4 <IMU_ReadOneByte>
 80014a0:	4603      	mov	r3, r0
 80014a2:	461a      	mov	r2, r3
 80014a4:	4b52      	ldr	r3, [pc, #328]	; (80015f0 <IMU_GyroRead+0x18c>)
 80014a6:	701a      	strb	r2, [r3, #0]
	gyroRaw[1] = (u8Buf[1] << 8) | u8Buf[0];
 80014a8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80014ac:	021b      	lsls	r3, r3, #8
 80014ae:	b21a      	sxth	r2, r3
 80014b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014b4:	b21b      	sxth	r3, r3
 80014b6:	4313      	orrs	r3, r2
 80014b8:	b21b      	sxth	r3, r3
 80014ba:	83fb      	strh	r3, [r7, #30]


	ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_ZOUT_L, &u8Buf[0]);
 80014bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c0:	461a      	mov	r2, r3
 80014c2:	2138      	movs	r1, #56	; 0x38
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff fe15 	bl	80010f4 <IMU_ReadOneByte>
 80014ca:	4603      	mov	r3, r0
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b48      	ldr	r3, [pc, #288]	; (80015f0 <IMU_GyroRead+0x18c>)
 80014d0:	701a      	strb	r2, [r3, #0]
	ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_ZOUT_H, &u8Buf[1]);
 80014d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d6:	3301      	adds	r3, #1
 80014d8:	461a      	mov	r2, r3
 80014da:	2137      	movs	r1, #55	; 0x37
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff fe09 	bl	80010f4 <IMU_ReadOneByte>
 80014e2:	4603      	mov	r3, r0
 80014e4:	461a      	mov	r2, r3
 80014e6:	4b42      	ldr	r3, [pc, #264]	; (80015f0 <IMU_GyroRead+0x18c>)
 80014e8:	701a      	strb	r2, [r3, #0]
	gyroRaw[2] = (u8Buf[1] << 8) | u8Buf[0];
 80014ea:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80014ee:	021b      	lsls	r3, r3, #8
 80014f0:	b21a      	sxth	r2, r3
 80014f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014f6:	b21b      	sxth	r3, r3
 80014f8:	4313      	orrs	r3, r2
 80014fa:	b21b      	sxth	r3, r3
 80014fc:	843b      	strh	r3, [r7, #32]


	ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_XOUT_L, &u8Buf[0]);
 80014fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001502:	461a      	mov	r2, r3
 8001504:	2134      	movs	r1, #52	; 0x34
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff fdf4 	bl	80010f4 <IMU_ReadOneByte>
 800150c:	4603      	mov	r3, r0
 800150e:	461a      	mov	r2, r3
 8001510:	4b37      	ldr	r3, [pc, #220]	; (80015f0 <IMU_GyroRead+0x18c>)
 8001512:	701a      	strb	r2, [r3, #0]
	ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_XOUT_H, &u8Buf[1]);
 8001514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001518:	3301      	adds	r3, #1
 800151a:	461a      	mov	r2, r3
 800151c:	2133      	movs	r1, #51	; 0x33
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff fde8 	bl	80010f4 <IMU_ReadOneByte>
 8001524:	4603      	mov	r3, r0
 8001526:	461a      	mov	r2, r3
 8001528:	4b31      	ldr	r3, [pc, #196]	; (80015f0 <IMU_GyroRead+0x18c>)
 800152a:	701a      	strb	r2, [r3, #0]
	temp = (u8Buf[1] << 8) | u8Buf[0]; // for debugging
 800152c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001530:	021b      	lsls	r3, r3, #8
 8001532:	b21a      	sxth	r2, r3
 8001534:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001538:	b21b      	sxth	r3, r3
 800153a:	4313      	orrs	r3, r2
 800153c:	84fb      	strh	r3, [r7, #38]	; 0x26
	gyroRaw[0] = (u8Buf[1] << 8) | u8Buf[0];
 800153e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001542:	021b      	lsls	r3, r3, #8
 8001544:	b21a      	sxth	r2, r3
 8001546:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800154a:	b21b      	sxth	r3, r3
 800154c:	4313      	orrs	r3, r2
 800154e:	b21b      	sxth	r3, r3
 8001550:	83bb      	strh	r3, [r7, #28]

	float gyroRawFloat[3] = {0};
 8001552:	f107 0308 	add.w	r3, r7, #8
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]
 800155c:	609a      	str	r2, [r3, #8]
	gyroRawFloat[0] = gyroRaw[0] - dev->gyro_bias[0];
 800155e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001562:	ee07 3a90 	vmov	s15, r3
 8001566:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001570:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001574:	edc7 7a02 	vstr	s15, [r7, #8]
	gyroRawFloat[1] = gyroRaw[1] - dev->gyro_bias[1];
 8001578:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800157c:	ee07 3a90 	vmov	s15, r3
 8001580:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800158a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800158e:	edc7 7a03 	vstr	s15, [r7, #12]
	gyroRawFloat[2] = gyroRaw[2] - dev->gyro_bias[2];
 8001592:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001596:	ee07 3a90 	vmov	s15, r3
 800159a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80015a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015a8:	edc7 7a04 	vstr	s15, [r7, #16]
	// gyro full scale set to +/-500 dps, sensitivity scale factor = 65.5 LSB/dps
	// degree per second = value/65.5



	dev->gyro[0] = 0.06106870229f * gyroRawFloat[0];
 80015ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80015b0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80015f4 <IMU_GyroRead+0x190>
 80015b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	edc3 7a04 	vstr	s15, [r3, #16]
	dev->gyro[1] = 0.06106870229f * gyroRawFloat[1];
 80015be:	edd7 7a03 	vldr	s15, [r7, #12]
 80015c2:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80015f4 <IMU_GyroRead+0x190>
 80015c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	edc3 7a05 	vstr	s15, [r3, #20]
	dev->gyro[2] = 0.06106870229f * gyroRawFloat[2];
 80015d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80015d4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80015f4 <IMU_GyroRead+0x190>
 80015d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	edc3 7a06 	vstr	s15, [r3, #24]

	return ret;
 80015e2:	4b03      	ldr	r3, [pc, #12]	; (80015f0 <IMU_GyroRead+0x18c>)
 80015e4:	781b      	ldrb	r3, [r3, #0]

}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3728      	adds	r7, #40	; 0x28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000258 	.word	0x20000258
 80015f4:	3d7a232d 	.word	0x3d7a232d

080015f8 <Mag_init>:

HAL_StatusTypeDef Mag_init(ICM20948 *dev) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	73fb      	strb	r3, [r7, #15]

	Mag_WriteOneByte(dev, AK09916__CNTL2__REGISTER, REG_VAL_MAG_MODE_10HZ);
 8001604:	2202      	movs	r2, #2
 8001606:	2131      	movs	r1, #49	; 0x31
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff fd8e 	bl	800112a <Mag_WriteOneByte>

}
 800160e:	bf00      	nop
 8001610:	4618      	mov	r0, r3
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <OLED_Refresh_Gram>:
#include "stdbool.h"
#include "oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800161e:	2300      	movs	r3, #0
 8001620:	71fb      	strb	r3, [r7, #7]
 8001622:	e026      	b.n	8001672 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	3b50      	subs	r3, #80	; 0x50
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2100      	movs	r1, #0
 800162c:	4618      	mov	r0, r3
 800162e:	f000 f82b 	bl	8001688 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8001632:	2100      	movs	r1, #0
 8001634:	2000      	movs	r0, #0
 8001636:	f000 f827 	bl	8001688 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800163a:	2100      	movs	r1, #0
 800163c:	2010      	movs	r0, #16
 800163e:	f000 f823 	bl	8001688 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8001642:	2300      	movs	r3, #0
 8001644:	71bb      	strb	r3, [r7, #6]
 8001646:	e00d      	b.n	8001664 <OLED_Refresh_Gram+0x4c>
 8001648:	79ba      	ldrb	r2, [r7, #6]
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	490d      	ldr	r1, [pc, #52]	; (8001684 <OLED_Refresh_Gram+0x6c>)
 800164e:	00d2      	lsls	r2, r2, #3
 8001650:	440a      	add	r2, r1
 8001652:	4413      	add	r3, r2
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2101      	movs	r1, #1
 8001658:	4618      	mov	r0, r3
 800165a:	f000 f815 	bl	8001688 <OLED_WR_Byte>
 800165e:	79bb      	ldrb	r3, [r7, #6]
 8001660:	3301      	adds	r3, #1
 8001662:	71bb      	strb	r3, [r7, #6]
 8001664:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001668:	2b00      	cmp	r3, #0
 800166a:	daed      	bge.n	8001648 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	3301      	adds	r3, #1
 8001670:	71fb      	strb	r3, [r7, #7]
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	2b07      	cmp	r3, #7
 8001676:	d9d5      	bls.n	8001624 <OLED_Refresh_Gram+0xc>
	}   
}
 8001678:	bf00      	nop
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	2000025c 	.word	0x2000025c

08001688 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	460a      	mov	r2, r1
 8001692:	71fb      	strb	r3, [r7, #7]
 8001694:	4613      	mov	r3, r2
 8001696:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8001698:	79bb      	ldrb	r3, [r7, #6]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d006      	beq.n	80016ac <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800169e:	2201      	movs	r2, #1
 80016a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016a4:	481c      	ldr	r0, [pc, #112]	; (8001718 <OLED_WR_Byte+0x90>)
 80016a6:	f005 fb61 	bl	8006d6c <HAL_GPIO_WritePin>
 80016aa:	e005      	b.n	80016b8 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 80016ac:	2200      	movs	r2, #0
 80016ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016b2:	4819      	ldr	r0, [pc, #100]	; (8001718 <OLED_WR_Byte+0x90>)
 80016b4:	f005 fb5a 	bl	8006d6c <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 80016b8:	2300      	movs	r3, #0
 80016ba:	73fb      	strb	r3, [r7, #15]
 80016bc:	e01e      	b.n	80016fc <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 80016be:	2200      	movs	r2, #0
 80016c0:	2120      	movs	r1, #32
 80016c2:	4815      	ldr	r0, [pc, #84]	; (8001718 <OLED_WR_Byte+0x90>)
 80016c4:	f005 fb52 	bl	8006d6c <HAL_GPIO_WritePin>
		if(dat&0x80)
 80016c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	da05      	bge.n	80016dc <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 80016d0:	2201      	movs	r2, #1
 80016d2:	2140      	movs	r1, #64	; 0x40
 80016d4:	4810      	ldr	r0, [pc, #64]	; (8001718 <OLED_WR_Byte+0x90>)
 80016d6:	f005 fb49 	bl	8006d6c <HAL_GPIO_WritePin>
 80016da:	e004      	b.n	80016e6 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 80016dc:	2200      	movs	r2, #0
 80016de:	2140      	movs	r1, #64	; 0x40
 80016e0:	480d      	ldr	r0, [pc, #52]	; (8001718 <OLED_WR_Byte+0x90>)
 80016e2:	f005 fb43 	bl	8006d6c <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 80016e6:	2201      	movs	r2, #1
 80016e8:	2120      	movs	r1, #32
 80016ea:	480b      	ldr	r0, [pc, #44]	; (8001718 <OLED_WR_Byte+0x90>)
 80016ec:	f005 fb3e 	bl	8006d6c <HAL_GPIO_WritePin>
		dat<<=1;   
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
 80016f8:	3301      	adds	r3, #1
 80016fa:	73fb      	strb	r3, [r7, #15]
 80016fc:	7bfb      	ldrb	r3, [r7, #15]
 80016fe:	2b07      	cmp	r3, #7
 8001700:	d9dd      	bls.n	80016be <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8001702:	2201      	movs	r2, #1
 8001704:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001708:	4803      	ldr	r0, [pc, #12]	; (8001718 <OLED_WR_Byte+0x90>)
 800170a:	f005 fb2f 	bl	8006d6c <HAL_GPIO_WritePin>
} 
 800170e:	bf00      	nop
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40021000 	.word	0x40021000

0800171c <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8001722:	2300      	movs	r3, #0
 8001724:	71fb      	strb	r3, [r7, #7]
 8001726:	e014      	b.n	8001752 <OLED_Clear+0x36>
 8001728:	2300      	movs	r3, #0
 800172a:	71bb      	strb	r3, [r7, #6]
 800172c:	e00a      	b.n	8001744 <OLED_Clear+0x28>
 800172e:	79ba      	ldrb	r2, [r7, #6]
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	490c      	ldr	r1, [pc, #48]	; (8001764 <OLED_Clear+0x48>)
 8001734:	00d2      	lsls	r2, r2, #3
 8001736:	440a      	add	r2, r1
 8001738:	4413      	add	r3, r2
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]
 800173e:	79bb      	ldrb	r3, [r7, #6]
 8001740:	3301      	adds	r3, #1
 8001742:	71bb      	strb	r3, [r7, #6]
 8001744:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001748:	2b00      	cmp	r3, #0
 800174a:	daf0      	bge.n	800172e <OLED_Clear+0x12>
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	3301      	adds	r3, #1
 8001750:	71fb      	strb	r3, [r7, #7]
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	2b07      	cmp	r3, #7
 8001756:	d9e7      	bls.n	8001728 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8001758:	f7ff ff5e 	bl	8001618 <OLED_Refresh_Gram>
}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	2000025c 	.word	0x2000025c

08001768 <OLED_Display_On>:

 /**************************************************************************
Turn On Display
**************************************************************************/  
void OLED_Display_On(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
	OLED_WR_Byte(0X8D,OLED_CMD);  //SET DCDC Command
 800176c:	2100      	movs	r1, #0
 800176e:	208d      	movs	r0, #141	; 0x8d
 8001770:	f7ff ff8a 	bl	8001688 <OLED_WR_Byte>
	OLED_WR_Byte(0X14,OLED_CMD);  //DCDC ON
 8001774:	2100      	movs	r1, #0
 8001776:	2014      	movs	r0, #20
 8001778:	f7ff ff86 	bl	8001688 <OLED_WR_Byte>
	OLED_WR_Byte(0XAF,OLED_CMD);  //DISPLAY ON
 800177c:	2100      	movs	r1, #0
 800177e:	20af      	movs	r0, #175	; 0xaf
 8001780:	f7ff ff82 	bl	8001688 <OLED_WR_Byte>
}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}

08001788 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	71fb      	strb	r3, [r7, #7]
 8001792:	460b      	mov	r3, r1
 8001794:	71bb      	strb	r3, [r7, #6]
 8001796:	4613      	mov	r3, r2
 8001798:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800179a:	2300      	movs	r3, #0
 800179c:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	db41      	blt.n	800182a <OLED_DrawPoint+0xa2>
 80017a6:	79bb      	ldrb	r3, [r7, #6]
 80017a8:	2b3f      	cmp	r3, #63	; 0x3f
 80017aa:	d83e      	bhi.n	800182a <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 80017ac:	79bb      	ldrb	r3, [r7, #6]
 80017ae:	08db      	lsrs	r3, r3, #3
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	f1c3 0307 	rsb	r3, r3, #7
 80017b6:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 80017b8:	79bb      	ldrb	r3, [r7, #6]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 80017c0:	7b7b      	ldrb	r3, [r7, #13]
 80017c2:	f1c3 0307 	rsb	r3, r3, #7
 80017c6:	2201      	movs	r2, #1
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 80017ce:	797b      	ldrb	r3, [r7, #5]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d012      	beq.n	80017fa <OLED_DrawPoint+0x72>
 80017d4:	79fa      	ldrb	r2, [r7, #7]
 80017d6:	7bbb      	ldrb	r3, [r7, #14]
 80017d8:	4917      	ldr	r1, [pc, #92]	; (8001838 <OLED_DrawPoint+0xb0>)
 80017da:	00d2      	lsls	r2, r2, #3
 80017dc:	440a      	add	r2, r1
 80017de:	4413      	add	r3, r2
 80017e0:	7818      	ldrb	r0, [r3, #0]
 80017e2:	79fa      	ldrb	r2, [r7, #7]
 80017e4:	7bbb      	ldrb	r3, [r7, #14]
 80017e6:	7bf9      	ldrb	r1, [r7, #15]
 80017e8:	4301      	orrs	r1, r0
 80017ea:	b2c8      	uxtb	r0, r1
 80017ec:	4912      	ldr	r1, [pc, #72]	; (8001838 <OLED_DrawPoint+0xb0>)
 80017ee:	00d2      	lsls	r2, r2, #3
 80017f0:	440a      	add	r2, r1
 80017f2:	4413      	add	r3, r2
 80017f4:	4602      	mov	r2, r0
 80017f6:	701a      	strb	r2, [r3, #0]
 80017f8:	e018      	b.n	800182c <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 80017fa:	79fa      	ldrb	r2, [r7, #7]
 80017fc:	7bbb      	ldrb	r3, [r7, #14]
 80017fe:	490e      	ldr	r1, [pc, #56]	; (8001838 <OLED_DrawPoint+0xb0>)
 8001800:	00d2      	lsls	r2, r2, #3
 8001802:	440a      	add	r2, r1
 8001804:	4413      	add	r3, r2
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	b25a      	sxtb	r2, r3
 800180a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800180e:	43db      	mvns	r3, r3
 8001810:	b25b      	sxtb	r3, r3
 8001812:	4013      	ands	r3, r2
 8001814:	b259      	sxtb	r1, r3
 8001816:	79fa      	ldrb	r2, [r7, #7]
 8001818:	7bbb      	ldrb	r3, [r7, #14]
 800181a:	b2c8      	uxtb	r0, r1
 800181c:	4906      	ldr	r1, [pc, #24]	; (8001838 <OLED_DrawPoint+0xb0>)
 800181e:	00d2      	lsls	r2, r2, #3
 8001820:	440a      	add	r2, r1
 8001822:	4413      	add	r3, r2
 8001824:	4602      	mov	r2, r0
 8001826:	701a      	strb	r2, [r3, #0]
 8001828:	e000      	b.n	800182c <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800182a:	bf00      	nop
}
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	2000025c 	.word	0x2000025c

0800183c <OLED_DrawRect>:


void OLED_DrawRect(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, bool color) {
 800183c:	b590      	push	{r4, r7, lr}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	4604      	mov	r4, r0
 8001844:	4608      	mov	r0, r1
 8001846:	4611      	mov	r1, r2
 8001848:	461a      	mov	r2, r3
 800184a:	4623      	mov	r3, r4
 800184c:	71fb      	strb	r3, [r7, #7]
 800184e:	4603      	mov	r3, r0
 8001850:	71bb      	strb	r3, [r7, #6]
 8001852:	460b      	mov	r3, r1
 8001854:	717b      	strb	r3, [r7, #5]
 8001856:	4613      	mov	r3, r2
 8001858:	713b      	strb	r3, [r7, #4]
    // Draw horizontal lines
    for (uint8_t x = x1; x <= x2; x++) {
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	73fb      	strb	r3, [r7, #15]
 800185e:	e010      	b.n	8001882 <OLED_DrawRect+0x46>
        OLED_DrawPoint(x, y1, color); // Draw top border
 8001860:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001864:	79b9      	ldrb	r1, [r7, #6]
 8001866:	7bfb      	ldrb	r3, [r7, #15]
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff ff8d 	bl	8001788 <OLED_DrawPoint>
        OLED_DrawPoint(x, y2, color); // Draw bottom border
 800186e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001872:	7939      	ldrb	r1, [r7, #4]
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff ff86 	bl	8001788 <OLED_DrawPoint>
    for (uint8_t x = x1; x <= x2; x++) {
 800187c:	7bfb      	ldrb	r3, [r7, #15]
 800187e:	3301      	adds	r3, #1
 8001880:	73fb      	strb	r3, [r7, #15]
 8001882:	7bfa      	ldrb	r2, [r7, #15]
 8001884:	797b      	ldrb	r3, [r7, #5]
 8001886:	429a      	cmp	r2, r3
 8001888:	d9ea      	bls.n	8001860 <OLED_DrawRect+0x24>
    }

    // Draw vertical lines
    for (uint8_t y = y1; y <= y2; y++) {
 800188a:	79bb      	ldrb	r3, [r7, #6]
 800188c:	73bb      	strb	r3, [r7, #14]
 800188e:	e010      	b.n	80018b2 <OLED_DrawRect+0x76>
        OLED_DrawPoint(x1, y, color); // Draw left border
 8001890:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001894:	7bb9      	ldrb	r1, [r7, #14]
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff ff75 	bl	8001788 <OLED_DrawPoint>
        OLED_DrawPoint(x2, y, color); // Draw right border
 800189e:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018a2:	7bb9      	ldrb	r1, [r7, #14]
 80018a4:	797b      	ldrb	r3, [r7, #5]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff ff6e 	bl	8001788 <OLED_DrawPoint>
    for (uint8_t y = y1; y <= y2; y++) {
 80018ac:	7bbb      	ldrb	r3, [r7, #14]
 80018ae:	3301      	adds	r3, #1
 80018b0:	73bb      	strb	r3, [r7, #14]
 80018b2:	7bba      	ldrb	r2, [r7, #14]
 80018b4:	793b      	ldrb	r3, [r7, #4]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d9ea      	bls.n	8001890 <OLED_DrawRect+0x54>
    }
}
 80018ba:	bf00      	nop
 80018bc:	bf00      	nop
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd90      	pop	{r4, r7, pc}

080018c4 <OLED_DrawRectWithFill>:

void OLED_DrawRectWithFill(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, bool color) {
 80018c4:	b590      	push	{r4, r7, lr}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4604      	mov	r4, r0
 80018cc:	4608      	mov	r0, r1
 80018ce:	4611      	mov	r1, r2
 80018d0:	461a      	mov	r2, r3
 80018d2:	4623      	mov	r3, r4
 80018d4:	71fb      	strb	r3, [r7, #7]
 80018d6:	4603      	mov	r3, r0
 80018d8:	71bb      	strb	r3, [r7, #6]
 80018da:	460b      	mov	r3, r1
 80018dc:	717b      	strb	r3, [r7, #5]
 80018de:	4613      	mov	r3, r2
 80018e0:	713b      	strb	r3, [r7, #4]
    // Draw borders
    for (uint8_t x = x1; x <= x2; x++) {
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	73fb      	strb	r3, [r7, #15]
 80018e6:	e010      	b.n	800190a <OLED_DrawRectWithFill+0x46>
        OLED_DrawPoint(x, y1, color); // Draw top border
 80018e8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018ec:	79b9      	ldrb	r1, [r7, #6]
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ff49 	bl	8001788 <OLED_DrawPoint>
        OLED_DrawPoint(x, y2, color); // Draw bottom border
 80018f6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018fa:	7939      	ldrb	r1, [r7, #4]
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff ff42 	bl	8001788 <OLED_DrawPoint>
    for (uint8_t x = x1; x <= x2; x++) {
 8001904:	7bfb      	ldrb	r3, [r7, #15]
 8001906:	3301      	adds	r3, #1
 8001908:	73fb      	strb	r3, [r7, #15]
 800190a:	7bfa      	ldrb	r2, [r7, #15]
 800190c:	797b      	ldrb	r3, [r7, #5]
 800190e:	429a      	cmp	r2, r3
 8001910:	d9ea      	bls.n	80018e8 <OLED_DrawRectWithFill+0x24>
    }

    for (uint8_t y = y1; y <= y2; y++) {
 8001912:	79bb      	ldrb	r3, [r7, #6]
 8001914:	73bb      	strb	r3, [r7, #14]
 8001916:	e010      	b.n	800193a <OLED_DrawRectWithFill+0x76>
        OLED_DrawPoint(x1, y, color); // Draw left border
 8001918:	f897 2020 	ldrb.w	r2, [r7, #32]
 800191c:	7bb9      	ldrb	r1, [r7, #14]
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff ff31 	bl	8001788 <OLED_DrawPoint>
        OLED_DrawPoint(x2, y, color); // Draw right border
 8001926:	f897 2020 	ldrb.w	r2, [r7, #32]
 800192a:	7bb9      	ldrb	r1, [r7, #14]
 800192c:	797b      	ldrb	r3, [r7, #5]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff ff2a 	bl	8001788 <OLED_DrawPoint>
    for (uint8_t y = y1; y <= y2; y++) {
 8001934:	7bbb      	ldrb	r3, [r7, #14]
 8001936:	3301      	adds	r3, #1
 8001938:	73bb      	strb	r3, [r7, #14]
 800193a:	7bba      	ldrb	r2, [r7, #14]
 800193c:	793b      	ldrb	r3, [r7, #4]
 800193e:	429a      	cmp	r2, r3
 8001940:	d9ea      	bls.n	8001918 <OLED_DrawRectWithFill+0x54>
    }

    // Fill the interior
    for (uint8_t y = y1 + 1; y < y2; y++) {
 8001942:	79bb      	ldrb	r3, [r7, #6]
 8001944:	3301      	adds	r3, #1
 8001946:	737b      	strb	r3, [r7, #13]
 8001948:	e014      	b.n	8001974 <OLED_DrawRectWithFill+0xb0>
        for (uint8_t x = x1 + 1; x < x2; x++) {
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	3301      	adds	r3, #1
 800194e:	733b      	strb	r3, [r7, #12]
 8001950:	e009      	b.n	8001966 <OLED_DrawRectWithFill+0xa2>
            OLED_DrawPoint(x, y, color); // Draw points within the rectangle
 8001952:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001956:	7b79      	ldrb	r1, [r7, #13]
 8001958:	7b3b      	ldrb	r3, [r7, #12]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff ff14 	bl	8001788 <OLED_DrawPoint>
        for (uint8_t x = x1 + 1; x < x2; x++) {
 8001960:	7b3b      	ldrb	r3, [r7, #12]
 8001962:	3301      	adds	r3, #1
 8001964:	733b      	strb	r3, [r7, #12]
 8001966:	7b3a      	ldrb	r2, [r7, #12]
 8001968:	797b      	ldrb	r3, [r7, #5]
 800196a:	429a      	cmp	r2, r3
 800196c:	d3f1      	bcc.n	8001952 <OLED_DrawRectWithFill+0x8e>
    for (uint8_t y = y1 + 1; y < y2; y++) {
 800196e:	7b7b      	ldrb	r3, [r7, #13]
 8001970:	3301      	adds	r3, #1
 8001972:	737b      	strb	r3, [r7, #13]
 8001974:	7b7a      	ldrb	r2, [r7, #13]
 8001976:	793b      	ldrb	r3, [r7, #4]
 8001978:	429a      	cmp	r2, r3
 800197a:	d3e6      	bcc.n	800194a <OLED_DrawRectWithFill+0x86>
        }
    }
}
 800197c:	bf00      	nop
 800197e:	bf00      	nop
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	bd90      	pop	{r4, r7, pc}

08001986 <OLED_DrawVerticalLine>:
    for (uint8_t i = x; i < x + length; i++) {
        OLED_DrawPoint(i, y, 1);
    }
}

void OLED_DrawVerticalLine(uint8_t x, uint8_t y, uint8_t length) {
 8001986:	b580      	push	{r7, lr}
 8001988:	b084      	sub	sp, #16
 800198a:	af00      	add	r7, sp, #0
 800198c:	4603      	mov	r3, r0
 800198e:	71fb      	strb	r3, [r7, #7]
 8001990:	460b      	mov	r3, r1
 8001992:	71bb      	strb	r3, [r7, #6]
 8001994:	4613      	mov	r3, r2
 8001996:	717b      	strb	r3, [r7, #5]
    for (uint8_t i = y; i < y + length; i++) {
 8001998:	79bb      	ldrb	r3, [r7, #6]
 800199a:	73fb      	strb	r3, [r7, #15]
 800199c:	e008      	b.n	80019b0 <OLED_DrawVerticalLine+0x2a>
        OLED_DrawPoint(x, i, 1);
 800199e:	7bf9      	ldrb	r1, [r7, #15]
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	2201      	movs	r2, #1
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff feef 	bl	8001788 <OLED_DrawPoint>
    for (uint8_t i = y; i < y + length; i++) {
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
 80019ac:	3301      	adds	r3, #1
 80019ae:	73fb      	strb	r3, [r7, #15]
 80019b0:	7bfa      	ldrb	r2, [r7, #15]
 80019b2:	79b9      	ldrb	r1, [r7, #6]
 80019b4:	797b      	ldrb	r3, [r7, #5]
 80019b6:	440b      	add	r3, r1
 80019b8:	429a      	cmp	r2, r3
 80019ba:	dbf0      	blt.n	800199e <OLED_DrawVerticalLine+0x18>
    }
}
 80019bc:	bf00      	nop
 80019be:	bf00      	nop
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 80019c8:	b590      	push	{r4, r7, lr}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4604      	mov	r4, r0
 80019d0:	4608      	mov	r0, r1
 80019d2:	4611      	mov	r1, r2
 80019d4:	461a      	mov	r2, r3
 80019d6:	4623      	mov	r3, r4
 80019d8:	71fb      	strb	r3, [r7, #7]
 80019da:	4603      	mov	r3, r0
 80019dc:	71bb      	strb	r3, [r7, #6]
 80019de:	460b      	mov	r3, r1
 80019e0:	717b      	strb	r3, [r7, #5]
 80019e2:	4613      	mov	r3, r2
 80019e4:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 80019e6:	79bb      	ldrb	r3, [r7, #6]
 80019e8:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 80019ea:	797b      	ldrb	r3, [r7, #5]
 80019ec:	3b20      	subs	r3, #32
 80019ee:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 80019f0:	2300      	movs	r3, #0
 80019f2:	73bb      	strb	r3, [r7, #14]
 80019f4:	e04d      	b.n	8001a92 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 80019f6:	793b      	ldrb	r3, [r7, #4]
 80019f8:	2b0c      	cmp	r3, #12
 80019fa:	d10b      	bne.n	8001a14 <OLED_ShowChar+0x4c>
 80019fc:	797a      	ldrb	r2, [r7, #5]
 80019fe:	7bb9      	ldrb	r1, [r7, #14]
 8001a00:	4828      	ldr	r0, [pc, #160]	; (8001aa4 <OLED_ShowChar+0xdc>)
 8001a02:	4613      	mov	r3, r2
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	4413      	add	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4403      	add	r3, r0
 8001a0c:	440b      	add	r3, r1
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	73fb      	strb	r3, [r7, #15]
 8001a12:	e007      	b.n	8001a24 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8001a14:	797a      	ldrb	r2, [r7, #5]
 8001a16:	7bbb      	ldrb	r3, [r7, #14]
 8001a18:	4923      	ldr	r1, [pc, #140]	; (8001aa8 <OLED_ShowChar+0xe0>)
 8001a1a:	0112      	lsls	r2, r2, #4
 8001a1c:	440a      	add	r2, r1
 8001a1e:	4413      	add	r3, r2
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8001a24:	2300      	movs	r3, #0
 8001a26:	737b      	strb	r3, [r7, #13]
 8001a28:	e02d      	b.n	8001a86 <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8001a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	da07      	bge.n	8001a42 <OLED_ShowChar+0x7a>
 8001a32:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a36:	79b9      	ldrb	r1, [r7, #6]
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff fea4 	bl	8001788 <OLED_DrawPoint>
 8001a40:	e00c      	b.n	8001a5c <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8001a42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	bf0c      	ite	eq
 8001a4a:	2301      	moveq	r3, #1
 8001a4c:	2300      	movne	r3, #0
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	461a      	mov	r2, r3
 8001a52:	79b9      	ldrb	r1, [r7, #6]
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff fe96 	bl	8001788 <OLED_DrawPoint>
			temp<<=1;
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	73fb      	strb	r3, [r7, #15]
			y++;
 8001a62:	79bb      	ldrb	r3, [r7, #6]
 8001a64:	3301      	adds	r3, #1
 8001a66:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8001a68:	79ba      	ldrb	r2, [r7, #6]
 8001a6a:	7b3b      	ldrb	r3, [r7, #12]
 8001a6c:	1ad2      	subs	r2, r2, r3
 8001a6e:	793b      	ldrb	r3, [r7, #4]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d105      	bne.n	8001a80 <OLED_ShowChar+0xb8>
			{
				y=y0;
 8001a74:	7b3b      	ldrb	r3, [r7, #12]
 8001a76:	71bb      	strb	r3, [r7, #6]
				x++;
 8001a78:	79fb      	ldrb	r3, [r7, #7]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	71fb      	strb	r3, [r7, #7]
				break;
 8001a7e:	e005      	b.n	8001a8c <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8001a80:	7b7b      	ldrb	r3, [r7, #13]
 8001a82:	3301      	adds	r3, #1
 8001a84:	737b      	strb	r3, [r7, #13]
 8001a86:	7b7b      	ldrb	r3, [r7, #13]
 8001a88:	2b07      	cmp	r3, #7
 8001a8a:	d9ce      	bls.n	8001a2a <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8001a8c:	7bbb      	ldrb	r3, [r7, #14]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	73bb      	strb	r3, [r7, #14]
 8001a92:	7bba      	ldrb	r2, [r7, #14]
 8001a94:	793b      	ldrb	r3, [r7, #4]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d3ad      	bcc.n	80019f6 <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8001a9a:	bf00      	nop
 8001a9c:	bf00      	nop
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd90      	pop	{r4, r7, pc}
 8001aa4:	08012a58 	.word	0x08012a58
 8001aa8:	08012ecc 	.word	0x08012ecc

08001aac <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af02      	add	r7, sp, #8
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	603a      	str	r2, [r7, #0]
 8001ab6:	71fb      	strb	r3, [r7, #7]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8001abc:	e01f      	b.n	8001afe <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	2b7a      	cmp	r3, #122	; 0x7a
 8001ac2:	d904      	bls.n	8001ace <OLED_ShowString+0x22>
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	71fb      	strb	r3, [r7, #7]
 8001ac8:	79bb      	ldrb	r3, [r7, #6]
 8001aca:	3310      	adds	r3, #16
 8001acc:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8001ace:	79bb      	ldrb	r3, [r7, #6]
 8001ad0:	2b3a      	cmp	r3, #58	; 0x3a
 8001ad2:	d905      	bls.n	8001ae0 <OLED_ShowString+0x34>
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	71fb      	strb	r3, [r7, #7]
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	71bb      	strb	r3, [r7, #6]
 8001adc:	f7ff fe1e 	bl	800171c <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	781a      	ldrb	r2, [r3, #0]
 8001ae4:	79b9      	ldrb	r1, [r7, #6]
 8001ae6:	79f8      	ldrb	r0, [r7, #7]
 8001ae8:	2301      	movs	r3, #1
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	230c      	movs	r3, #12
 8001aee:	f7ff ff6b 	bl	80019c8 <OLED_ShowChar>
        x+=8;
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	3308      	adds	r3, #8
 8001af6:	71fb      	strb	r3, [r7, #7]
        p++;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	3301      	adds	r3, #1
 8001afc:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1db      	bne.n	8001abe <OLED_ShowString+0x12>
    }  
}	 
 8001b06:	bf00      	nop
 8001b08:	bf00      	nop
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <OLED_Init>:

void OLED_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8001b14:	f006 fa64 	bl	8007fe0 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8001b18:	4b41      	ldr	r3, [pc, #260]	; (8001c20 <OLED_Init+0x110>)
 8001b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b1c:	4a40      	ldr	r2, [pc, #256]	; (8001c20 <OLED_Init+0x110>)
 8001b1e:	f023 0301 	bic.w	r3, r3, #1
 8001b22:	6713      	str	r3, [r2, #112]	; 0x70
 8001b24:	4b3e      	ldr	r3, [pc, #248]	; (8001c20 <OLED_Init+0x110>)
 8001b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b28:	4a3d      	ldr	r2, [pc, #244]	; (8001c20 <OLED_Init+0x110>)
 8001b2a:	f023 0304 	bic.w	r3, r3, #4
 8001b2e:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8001b30:	f006 fa6a 	bl	8008008 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8001b34:	2200      	movs	r2, #0
 8001b36:	2180      	movs	r1, #128	; 0x80
 8001b38:	483a      	ldr	r0, [pc, #232]	; (8001c24 <OLED_Init+0x114>)
 8001b3a:	f005 f917 	bl	8006d6c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001b3e:	2064      	movs	r0, #100	; 0x64
 8001b40:	f003 fe70 	bl	8005824 <HAL_Delay>
	OLED_RST_Set();
 8001b44:	2201      	movs	r2, #1
 8001b46:	2180      	movs	r1, #128	; 0x80
 8001b48:	4836      	ldr	r0, [pc, #216]	; (8001c24 <OLED_Init+0x114>)
 8001b4a:	f005 f90f 	bl	8006d6c <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8001b4e:	2100      	movs	r1, #0
 8001b50:	20ae      	movs	r0, #174	; 0xae
 8001b52:	f7ff fd99 	bl	8001688 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8001b56:	2100      	movs	r1, #0
 8001b58:	20d5      	movs	r0, #213	; 0xd5
 8001b5a:	f7ff fd95 	bl	8001688 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8001b5e:	2100      	movs	r1, #0
 8001b60:	2050      	movs	r0, #80	; 0x50
 8001b62:	f7ff fd91 	bl	8001688 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8001b66:	2100      	movs	r1, #0
 8001b68:	20a8      	movs	r0, #168	; 0xa8
 8001b6a:	f7ff fd8d 	bl	8001688 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8001b6e:	2100      	movs	r1, #0
 8001b70:	203f      	movs	r0, #63	; 0x3f
 8001b72:	f7ff fd89 	bl	8001688 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8001b76:	2100      	movs	r1, #0
 8001b78:	20d3      	movs	r0, #211	; 0xd3
 8001b7a:	f7ff fd85 	bl	8001688 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8001b7e:	2100      	movs	r1, #0
 8001b80:	2000      	movs	r0, #0
 8001b82:	f7ff fd81 	bl	8001688 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8001b86:	2100      	movs	r1, #0
 8001b88:	2040      	movs	r0, #64	; 0x40
 8001b8a:	f7ff fd7d 	bl	8001688 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8001b8e:	2100      	movs	r1, #0
 8001b90:	208d      	movs	r0, #141	; 0x8d
 8001b92:	f7ff fd79 	bl	8001688 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8001b96:	2100      	movs	r1, #0
 8001b98:	2014      	movs	r0, #20
 8001b9a:	f7ff fd75 	bl	8001688 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	2020      	movs	r0, #32
 8001ba2:	f7ff fd71 	bl	8001688 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	2002      	movs	r0, #2
 8001baa:	f7ff fd6d 	bl	8001688 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8001bae:	2100      	movs	r1, #0
 8001bb0:	20a1      	movs	r0, #161	; 0xa1
 8001bb2:	f7ff fd69 	bl	8001688 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	20c0      	movs	r0, #192	; 0xc0
 8001bba:	f7ff fd65 	bl	8001688 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	20da      	movs	r0, #218	; 0xda
 8001bc2:	f7ff fd61 	bl	8001688 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	2012      	movs	r0, #18
 8001bca:	f7ff fd5d 	bl	8001688 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8001bce:	2100      	movs	r1, #0
 8001bd0:	2081      	movs	r0, #129	; 0x81
 8001bd2:	f7ff fd59 	bl	8001688 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	20ef      	movs	r0, #239	; 0xef
 8001bda:	f7ff fd55 	bl	8001688 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8001bde:	2100      	movs	r1, #0
 8001be0:	20d9      	movs	r0, #217	; 0xd9
 8001be2:	f7ff fd51 	bl	8001688 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8001be6:	2100      	movs	r1, #0
 8001be8:	20f1      	movs	r0, #241	; 0xf1
 8001bea:	f7ff fd4d 	bl	8001688 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8001bee:	2100      	movs	r1, #0
 8001bf0:	20db      	movs	r0, #219	; 0xdb
 8001bf2:	f7ff fd49 	bl	8001688 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	2030      	movs	r0, #48	; 0x30
 8001bfa:	f7ff fd45 	bl	8001688 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8001bfe:	2100      	movs	r1, #0
 8001c00:	20a4      	movs	r0, #164	; 0xa4
 8001c02:	f7ff fd41 	bl	8001688 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8001c06:	2100      	movs	r1, #0
 8001c08:	20a6      	movs	r0, #166	; 0xa6
 8001c0a:	f7ff fd3d 	bl	8001688 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8001c0e:	2100      	movs	r1, #0
 8001c10:	20af      	movs	r0, #175	; 0xaf
 8001c12:	f7ff fd39 	bl	8001688 <OLED_WR_Byte>
	OLED_Clear(); 
 8001c16:	f7ff fd81 	bl	800171c <OLED_Clear>
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40021000 	.word	0x40021000

08001c28 <_ZN7Display8oledTaskEPv>:
#include "app_main.h"
#include <cstring>
#include <cstdio>
namespace Display {

void oledTask(void*) {
 8001c28:	b5b0      	push	{r4, r5, r7, lr}
 8001c2a:	b08a      	sub	sp, #40	; 0x28
 8001c2c:	af04      	add	r7, sp, #16
 8001c2e:	6078      	str	r0, [r7, #4]

	OLED_Init();
 8001c30:	f7ff ff6e 	bl	8001b10 <OLED_Init>
	OLED_Clear();
 8001c34:	f7ff fd72 	bl	800171c <OLED_Clear>

	OLED_ShowString(0, 0, (uint8_t*) "TRD|OK");
 8001c38:	4a86      	ldr	r2, [pc, #536]	; (8001e54 <_ZN7Display8oledTaskEPv+0x22c>)
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	f7ff ff35 	bl	8001aac <OLED_ShowString>
	OLED_Display_On();
 8001c42:	f7ff fd91 	bl	8001768 <OLED_Display_On>
	OLED_DrawRect(46, 16, 51, 21, 1);
 8001c46:	2301      	movs	r3, #1
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	2315      	movs	r3, #21
 8001c4c:	2233      	movs	r2, #51	; 0x33
 8001c4e:	2110      	movs	r1, #16
 8001c50:	202e      	movs	r0, #46	; 0x2e
 8001c52:	f7ff fdf3 	bl	800183c <OLED_DrawRect>
	OLED_DrawRect(46, 28, 51, 33, 1);
 8001c56:	2301      	movs	r3, #1
 8001c58:	9300      	str	r3, [sp, #0]
 8001c5a:	2321      	movs	r3, #33	; 0x21
 8001c5c:	2233      	movs	r2, #51	; 0x33
 8001c5e:	211c      	movs	r1, #28
 8001c60:	202e      	movs	r0, #46	; 0x2e
 8001c62:	f7ff fdeb 	bl	800183c <OLED_DrawRect>
	OLED_DrawRect(46, 40, 51, 45, 1);
 8001c66:	2301      	movs	r3, #1
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	232d      	movs	r3, #45	; 0x2d
 8001c6c:	2233      	movs	r2, #51	; 0x33
 8001c6e:	2128      	movs	r1, #40	; 0x28
 8001c70:	202e      	movs	r0, #46	; 0x2e
 8001c72:	f7ff fde3 	bl	800183c <OLED_DrawRect>
	OLED_DrawRect(46, 52, 51, 57, 1);
 8001c76:	2301      	movs	r3, #1
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	2339      	movs	r3, #57	; 0x39
 8001c7c:	2233      	movs	r2, #51	; 0x33
 8001c7e:	2134      	movs	r1, #52	; 0x34
 8001c80:	202e      	movs	r0, #46	; 0x2e
 8001c82:	f7ff fddb 	bl	800183c <OLED_DrawRect>
	OLED_DrawVerticalLine(55, 3, 58);
 8001c86:	223a      	movs	r2, #58	; 0x3a
 8001c88:	2103      	movs	r1, #3
 8001c8a:	2037      	movs	r0, #55	; 0x37
 8001c8c:	f7ff fe7b 	bl	8001986 <OLED_DrawVerticalLine>

	OLED_ShowString(1, 13, (uint8_t*) "SELF");
 8001c90:	4a71      	ldr	r2, [pc, #452]	; (8001e58 <_ZN7Display8oledTaskEPv+0x230>)
 8001c92:	210d      	movs	r1, #13
 8001c94:	2001      	movs	r0, #1
 8001c96:	f7ff ff09 	bl	8001aac <OLED_ShowString>
	OLED_ShowString(1, 25, (uint8_t*) "PROC");
 8001c9a:	4a70      	ldr	r2, [pc, #448]	; (8001e5c <_ZN7Display8oledTaskEPv+0x234>)
 8001c9c:	2119      	movs	r1, #25
 8001c9e:	2001      	movs	r0, #1
 8001ca0:	f7ff ff04 	bl	8001aac <OLED_ShowString>
	OLED_ShowString(1, 37, (uint8_t*) "SENR");
 8001ca4:	4a6e      	ldr	r2, [pc, #440]	; (8001e60 <_ZN7Display8oledTaskEPv+0x238>)
 8001ca6:	2125      	movs	r1, #37	; 0x25
 8001ca8:	2001      	movs	r0, #1
 8001caa:	f7ff feff 	bl	8001aac <OLED_ShowString>
	OLED_ShowString(1, 49, (uint8_t*) "MOTN");
 8001cae:	4a6d      	ldr	r2, [pc, #436]	; (8001e64 <_ZN7Display8oledTaskEPv+0x23c>)
 8001cb0:	2131      	movs	r1, #49	; 0x31
 8001cb2:	2001      	movs	r0, #1
 8001cb4:	f7ff fefa 	bl	8001aac <OLED_ShowString>
	OLED_ShowString(60, 0, (uint8_t*) "gZ");
 8001cb8:	4a6b      	ldr	r2, [pc, #428]	; (8001e68 <_ZN7Display8oledTaskEPv+0x240>)
 8001cba:	2100      	movs	r1, #0
 8001cbc:	203c      	movs	r0, #60	; 0x3c
 8001cbe:	f7ff fef5 	bl	8001aac <OLED_ShowString>
	OLED_ShowString(60, 12, (uint8_t*) "TRX QL");
 8001cc2:	4a6a      	ldr	r2, [pc, #424]	; (8001e6c <_ZN7Display8oledTaskEPv+0x244>)
 8001cc4:	210c      	movs	r1, #12
 8001cc6:	203c      	movs	r0, #60	; 0x3c
 8001cc8:	f7ff fef0 	bl	8001aac <OLED_ShowString>
	OLED_ShowString(60, 36, (uint8_t*) "YAW");
 8001ccc:	4a68      	ldr	r2, [pc, #416]	; (8001e70 <_ZN7Display8oledTaskEPv+0x248>)
 8001cce:	2124      	movs	r1, #36	; 0x24
 8001cd0:	203c      	movs	r0, #60	; 0x3c
 8001cd2:	f7ff feeb 	bl	8001aac <OLED_ShowString>
	OLED_Refresh_Gram();
 8001cd6:	f7ff fc9f 	bl	8001618 <OLED_Refresh_Gram>
	bool self = false;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	75fb      	strb	r3, [r7, #23]
	uint8_t buf[10] = { 0 };
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	f107 0310 	add.w	r3, r7, #16
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	809a      	strh	r2, [r3, #4]
	for (;;) {

		OLED_DrawRectWithFill(47, 17, 50, 20, self);
 8001cec:	7dfb      	ldrb	r3, [r7, #23]
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	2314      	movs	r3, #20
 8001cf2:	2232      	movs	r2, #50	; 0x32
 8001cf4:	2111      	movs	r1, #17
 8001cf6:	202f      	movs	r0, #47	; 0x2f
 8001cf8:	f7ff fde4 	bl	80018c4 <OLED_DrawRectWithFill>
		OLED_DrawRectWithFill(47, 29, 50, 32, is_task_alive_struct.proc);
 8001cfc:	4b5d      	ldr	r3, [pc, #372]	; (8001e74 <_ZN7Display8oledTaskEPv+0x24c>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	2320      	movs	r3, #32
 8001d04:	2232      	movs	r2, #50	; 0x32
 8001d06:	211d      	movs	r1, #29
 8001d08:	202f      	movs	r0, #47	; 0x2f
 8001d0a:	f7ff fddb 	bl	80018c4 <OLED_DrawRectWithFill>
		OLED_DrawRectWithFill(47, 41, 50, 44, is_task_alive_struct.senr);
 8001d0e:	4b59      	ldr	r3, [pc, #356]	; (8001e74 <_ZN7Display8oledTaskEPv+0x24c>)
 8001d10:	789b      	ldrb	r3, [r3, #2]
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	232c      	movs	r3, #44	; 0x2c
 8001d16:	2232      	movs	r2, #50	; 0x32
 8001d18:	2129      	movs	r1, #41	; 0x29
 8001d1a:	202f      	movs	r0, #47	; 0x2f
 8001d1c:	f7ff fdd2 	bl	80018c4 <OLED_DrawRectWithFill>
		OLED_DrawRectWithFill(47, 53, 50, 56, is_task_alive_struct.motn);
 8001d20:	4b54      	ldr	r3, [pc, #336]	; (8001e74 <_ZN7Display8oledTaskEPv+0x24c>)
 8001d22:	78db      	ldrb	r3, [r3, #3]
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	2338      	movs	r3, #56	; 0x38
 8001d28:	2232      	movs	r2, #50	; 0x32
 8001d2a:	2135      	movs	r1, #53	; 0x35
 8001d2c:	202f      	movs	r0, #47	; 0x2f
 8001d2e:	f7ff fdc9 	bl	80018c4 <OLED_DrawRectWithFill>

		memset(&buf, 0, sizeof(buf));
 8001d32:	f107 030c 	add.w	r3, r7, #12
 8001d36:	220a      	movs	r2, #10
 8001d38:	2100      	movs	r1, #0
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f00d fde0 	bl	800f900 <memset>
		snprintf((char*) buf, sizeof(buf), "%4.2f", sensor_data.imu->gyro[2]);
 8001d40:	4b4d      	ldr	r3, [pc, #308]	; (8001e78 <_ZN7Display8oledTaskEPv+0x250>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fbfe 	bl	8000548 <__aeabi_f2d>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	f107 000c 	add.w	r0, r7, #12
 8001d54:	e9cd 2300 	strd	r2, r3, [sp]
 8001d58:	4a48      	ldr	r2, [pc, #288]	; (8001e7c <_ZN7Display8oledTaskEPv+0x254>)
 8001d5a:	210a      	movs	r1, #10
 8001d5c:	f00e fc84 	bl	8010668 <sniprintf>
		if (is_task_alive_struct.senr) {
 8001d60:	4b44      	ldr	r3, [pc, #272]	; (8001e74 <_ZN7Display8oledTaskEPv+0x24c>)
 8001d62:	789b      	ldrb	r3, [r3, #2]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d007      	beq.n	8001d78 <_ZN7Display8oledTaskEPv+0x150>
			OLED_ShowString(80, 0, (uint8_t*) &buf);
 8001d68:	f107 030c 	add.w	r3, r7, #12
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	2100      	movs	r1, #0
 8001d70:	2050      	movs	r0, #80	; 0x50
 8001d72:	f7ff fe9b 	bl	8001aac <OLED_ShowString>
 8001d76:	e004      	b.n	8001d82 <_ZN7Display8oledTaskEPv+0x15a>

		} else {
			OLED_ShowString(80, 0, (uint8_t*) "NCAL");
 8001d78:	4a41      	ldr	r2, [pc, #260]	; (8001e80 <_ZN7Display8oledTaskEPv+0x258>)
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	2050      	movs	r0, #80	; 0x50
 8001d7e:	f7ff fe95 	bl	8001aac <OLED_ShowString>

		}

		memset(&buf, 0, sizeof(buf));
 8001d82:	f107 030c 	add.w	r3, r7, #12
 8001d86:	220a      	movs	r2, #10
 8001d88:	2100      	movs	r1, #0
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f00d fdb8 	bl	800f900 <memset>
		snprintf((char*) buf, sizeof(buf), "%d", sensor_data.ql);
 8001d90:	4b39      	ldr	r3, [pc, #228]	; (8001e78 <_ZN7Display8oledTaskEPv+0x250>)
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	f107 000c 	add.w	r0, r7, #12
 8001d98:	4a3a      	ldr	r2, [pc, #232]	; (8001e84 <_ZN7Display8oledTaskEPv+0x25c>)
 8001d9a:	210a      	movs	r1, #10
 8001d9c:	f00e fc64 	bl	8010668 <sniprintf>
		OLED_ShowString(115, 12, (uint8_t*) &buf);
 8001da0:	f107 030c 	add.w	r3, r7, #12
 8001da4:	461a      	mov	r2, r3
 8001da6:	210c      	movs	r1, #12
 8001da8:	2073      	movs	r0, #115	; 0x73
 8001daa:	f7ff fe7f 	bl	8001aac <OLED_ShowString>
		memset(&buf, 0, sizeof(buf));
 8001dae:	f107 030c 	add.w	r3, r7, #12
 8001db2:	220a      	movs	r2, #10
 8001db4:	2100      	movs	r1, #0
 8001db6:	4618      	mov	r0, r3
 8001db8:	f00d fda2 	bl	800f900 <memset>
		snprintf((char*) buf, sizeof(buf), "%3.0f::%3.0f", sensor_data.ir_distL, sensor_data.ir_distR);
 8001dbc:	4b2e      	ldr	r3, [pc, #184]	; (8001e78 <_ZN7Display8oledTaskEPv+0x250>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fbc1 	bl	8000548 <__aeabi_f2d>
 8001dc6:	4604      	mov	r4, r0
 8001dc8:	460d      	mov	r5, r1
 8001dca:	4b2b      	ldr	r3, [pc, #172]	; (8001e78 <_ZN7Display8oledTaskEPv+0x250>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7fe fbba 	bl	8000548 <__aeabi_f2d>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	f107 000c 	add.w	r0, r7, #12
 8001ddc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001de0:	e9cd 4500 	strd	r4, r5, [sp]
 8001de4:	4a28      	ldr	r2, [pc, #160]	; (8001e88 <_ZN7Display8oledTaskEPv+0x260>)
 8001de6:	210a      	movs	r1, #10
 8001de8:	f00e fc3e 	bl	8010668 <sniprintf>
		OLED_ShowString(65, 24, (uint8_t*) &buf);
 8001dec:	f107 030c 	add.w	r3, r7, #12
 8001df0:	461a      	mov	r2, r3
 8001df2:	2118      	movs	r1, #24
 8001df4:	2041      	movs	r0, #65	; 0x41
 8001df6:	f7ff fe59 	bl	8001aac <OLED_ShowString>
		memset(&buf, 0, sizeof(buf));
 8001dfa:	f107 030c 	add.w	r3, r7, #12
 8001dfe:	220a      	movs	r2, #10
 8001e00:	2100      	movs	r1, #0
 8001e02:	4618      	mov	r0, r3
 8001e04:	f00d fd7c 	bl	800f900 <memset>
		snprintf((char*) buf, sizeof(buf), "%4.1f", sensor_data.yaw_abs);
 8001e08:	4b1b      	ldr	r3, [pc, #108]	; (8001e78 <_ZN7Display8oledTaskEPv+0x250>)
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7fe fb9b 	bl	8000548 <__aeabi_f2d>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	f107 000c 	add.w	r0, r7, #12
 8001e1a:	e9cd 2300 	strd	r2, r3, [sp]
 8001e1e:	4a1b      	ldr	r2, [pc, #108]	; (8001e8c <_ZN7Display8oledTaskEPv+0x264>)
 8001e20:	210a      	movs	r1, #10
 8001e22:	f00e fc21 	bl	8010668 <sniprintf>
		OLED_ShowString(85, 36, (uint8_t*) &buf);
 8001e26:	f107 030c 	add.w	r3, r7, #12
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	2124      	movs	r1, #36	; 0x24
 8001e2e:	2055      	movs	r0, #85	; 0x55
 8001e30:	f7ff fe3c 	bl	8001aac <OLED_ShowString>
		OLED_Refresh_Gram();
 8001e34:	f7ff fbf0 	bl	8001618 <OLED_Refresh_Gram>

		self = !self;
 8001e38:	7dfb      	ldrb	r3, [r7, #23]
 8001e3a:	f083 0301 	eor.w	r3, r3, #1
 8001e3e:	75fb      	strb	r3, [r7, #23]
		memset((void*) &is_task_alive_struct, 0, sizeof(isTaskAlive_t));
 8001e40:	2204      	movs	r2, #4
 8001e42:	2100      	movs	r1, #0
 8001e44:	480b      	ldr	r0, [pc, #44]	; (8001e74 <_ZN7Display8oledTaskEPv+0x24c>)
 8001e46:	f00d fd5b 	bl	800f900 <memset>
		osDelay(250);
 8001e4a:	20fa      	movs	r0, #250	; 0xfa
 8001e4c:	f009 fbba 	bl	800b5c4 <osDelay>
		OLED_DrawRectWithFill(47, 17, 50, 20, self);
 8001e50:	e74c      	b.n	8001cec <_ZN7Display8oledTaskEPv+0xc4>
 8001e52:	bf00      	nop
 8001e54:	080128f0 	.word	0x080128f0
 8001e58:	080128f8 	.word	0x080128f8
 8001e5c:	08012900 	.word	0x08012900
 8001e60:	08012908 	.word	0x08012908
 8001e64:	08012910 	.word	0x08012910
 8001e68:	08012918 	.word	0x08012918
 8001e6c:	0801291c 	.word	0x0801291c
 8001e70:	08012924 	.word	0x08012924
 8001e74:	20000684 	.word	0x20000684
 8001e78:	2000065c 	.word	0x2000065c
 8001e7c:	08012928 	.word	0x08012928
 8001e80:	08012930 	.word	0x08012930
 8001e84:	08012938 	.word	0x08012938
 8001e88:	0801293c 	.word	0x0801293c
 8001e8c:	0801294c 	.word	0x0801294c

08001e90 <_ZN9AppParser9Processor17signalObstructionEv>:
	void start();
	~Processor( void );
	u_ctx *this_ctx; // context of this process
	u_ctx *o_ctx; // context of the other process, i.e. the motion controller.
	static void processorTask(void *pv);
	static void signalObstruction(void) { _signal_obstr = true; }
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	4b03      	ldr	r3, [pc, #12]	; (8001ea4 <_ZN9AppParser9Processor17signalObstructionEv+0x14>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	701a      	strb	r2, [r3, #0]
 8001e9a:	bf00      	nop
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	20000810 	.word	0x20000810

08001ea8 <_ZN9AppParser9Processor19signalNoObstructionEv>:
	static void signalNoObstruction(void) { _signal_obstr = false; _obstr_txed = false; }
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <_ZN9AppParser9Processor19signalNoObstructionEv+0x1c>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	701a      	strb	r2, [r3, #0]
 8001eb2:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <_ZN9AppParser9Processor19signalNoObstructionEv+0x20>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	701a      	strb	r2, [r3, #0]
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	20000810 	.word	0x20000810
 8001ec8:	20000811 	.word	0x20000811

08001ecc <_ZN9AppMotion16MotionControllerD1Ev>:
	void start();
	void turn(bool isRight, bool isFwd,
			uint32_t arg);
	void move(bool isFwd, uint32_t arg, uint32_t speed);
	void emergencyStop();
	~MotionController() {
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
	}
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
	...

08001ee4 <HAL_GPIO_EXTI_Callback>:

sensorData_t sensor_data; // public variables shared across all files.
isTaskAlive_t is_task_alive_struct = {0};
bool test_run = false;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	80fb      	strh	r3, [r7, #6]
	test_run = true;
 8001eee:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	701a      	strb	r2, [r3, #0]
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	20000688 	.word	0x20000688

08001f04 <HAL_UART_RxCpltCallback>:
AppParser::Processor processor(&procCtx, &ctrlCtx);
AppParser::Listener listener(&procCtx);
/*****************************************************************************************/


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	//__HAL_UART_CLEAR_OREFLAG(&huart3);
	if (huart == &huart3) {
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a05      	ldr	r2, [pc, #20]	; (8001f24 <HAL_UART_RxCpltCallback+0x20>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d102      	bne.n	8001f1a <HAL_UART_RxCpltCallback+0x16>
		listener.invoke();
 8001f14:	4804      	ldr	r0, [pc, #16]	; (8001f28 <HAL_UART_RxCpltCallback+0x24>)
 8001f16:	f001 fcf7 	bl	8003908 <_ZN9AppParser8Listener6invokeEv>
	}
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20000a8c 	.word	0x20000a8c
 8001f28:	20000800 	.word	0x20000800

08001f2c <initializeCPPconstructs>:


/*
 * This function initializes the C++ stuff, called from within main() context.
 */
void initializeCPPconstructs(void) {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0

	sensor_data.is_allow_motor_override = true;
 8001f30:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <initializeCPPconstructs+0x38>)
 8001f32:	2201      	movs	r2, #1
 8001f34:	771a      	strb	r2, [r3, #28]
	sensor_data.ir_dist_th_L = 10.0f;
 8001f36:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <initializeCPPconstructs+0x38>)
 8001f38:	4a0b      	ldr	r2, [pc, #44]	; (8001f68 <initializeCPPconstructs+0x3c>)
 8001f3a:	621a      	str	r2, [r3, #32]
	sensor_data.ir_dist_th_R = 10.0f;
 8001f3c:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <initializeCPPconstructs+0x38>)
 8001f3e:	4a0a      	ldr	r2, [pc, #40]	; (8001f68 <initializeCPPconstructs+0x3c>)
 8001f40:	625a      	str	r2, [r3, #36]	; 0x24
	//procTaskHandle = osThreadNew(processorTask, NULL, &procTask_attr);

	processor.start();
 8001f42:	480a      	ldr	r0, [pc, #40]	; (8001f6c <initializeCPPconstructs+0x40>)
 8001f44:	f001 fd2c 	bl	80039a0 <_ZN9AppParser9Processor5startEv>
	//osThreadNew((osThreadFunc_t)&controller.motionTask,
	    		//&ctrlCtx,
	                                   // &(ctrlCtx.attr));
	controller.start();
 8001f48:	4809      	ldr	r0, [pc, #36]	; (8001f70 <initializeCPPconstructs+0x44>)
 8001f4a:	f000 fddf 	bl	8002b0c <_ZN9AppMotion16MotionController5startEv>
	//htim1.Instance->CCR1 = 153;
	oledTaskHandle = osThreadNew(Display::oledTask, NULL, &oledTask_attr);
 8001f4e:	4a09      	ldr	r2, [pc, #36]	; (8001f74 <initializeCPPconstructs+0x48>)
 8001f50:	2100      	movs	r1, #0
 8001f52:	4809      	ldr	r0, [pc, #36]	; (8001f78 <initializeCPPconstructs+0x4c>)
 8001f54:	f009 fa82 	bl	800b45c <osThreadNew>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	4a08      	ldr	r2, [pc, #32]	; (8001f7c <initializeCPPconstructs+0x50>)
 8001f5c:	6013      	str	r3, [r2, #0]
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	2000065c 	.word	0x2000065c
 8001f68:	41200000 	.word	0x41200000
 8001f6c:	200007f8 	.word	0x200007f8
 8001f70:	2000069c 	.word	0x2000069c
 8001f74:	080134bc 	.word	0x080134bc
 8001f78:	08001c29 	.word	0x08001c29
 8001f7c:	20000694 	.word	0x20000694

08001f80 <sensorTask>:



float SEq_1 = 1.0f, SEq_2 = 0.0f, SEq_3 = 0.0f, SEq_4 = 0.0f;	// estimated orientation quaternion elements with initial conditions
void sensorTask(void *pv) {
 8001f80:	b5b0      	push	{r4, r5, r7, lr}
 8001f82:	ed2d 8b06 	vpush	{d8-d10}
 8001f86:	b0a2      	sub	sp, #136	; 0x88
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]

	IMU_Initialise(&imu, &hi2c1);
 8001f8c:	491f      	ldr	r1, [pc, #124]	; (800200c <sensorTask+0x8c>)
 8001f8e:	4820      	ldr	r0, [pc, #128]	; (8002010 <sensorTask+0x90>)
 8001f90:	f7fe ffdc 	bl	8000f4c <IMU_Initialise>

	osDelay(400);
 8001f94:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001f98:	f009 fb14 	bl	800b5c4 <osDelay>
	Gyro_calibrate(&imu);
 8001f9c:	481c      	ldr	r0, [pc, #112]	; (8002010 <sensorTask+0x90>)
 8001f9e:	f7ff f9b9 	bl	8001314 <Gyro_calibrate>
	Mag_init(&imu);
 8001fa2:	481b      	ldr	r0, [pc, #108]	; (8002010 <sensorTask+0x90>)
 8001fa4:	f7ff fb28 	bl	80015f8 <Mag_init>

	sensor_data.imu = &imu;
 8001fa8:	4b1a      	ldr	r3, [pc, #104]	; (8002014 <sensorTask+0x94>)
 8001faa:	4a19      	ldr	r2, [pc, #100]	; (8002010 <sensorTask+0x90>)
 8001fac:	601a      	str	r2, [r3, #0]


	/**I2C scanner for debug purposes **/
	printf("Scanning I2C bus:\r\n");
 8001fae:	481a      	ldr	r0, [pc, #104]	; (8002018 <sensorTask+0x98>)
 8001fb0:	f00e fa94 	bl	80104dc <puts>
	HAL_StatusTypeDef result;
	uint8_t i;
	for (i = 1; i < 128; i++) {
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8001fba:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	db2e      	blt.n	8002020 <sensorTask+0xa0>
		 * &hi2c1 is the handle
		 * (uint16_t)(i<<1) is the i2c address left aligned
		 * retries 2
		 * timeout 2
		 */
		result = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (i << 1), 2, 2);
 8001fc2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	b299      	uxth	r1, r3
 8001fcc:	2302      	movs	r3, #2
 8001fce:	2202      	movs	r2, #2
 8001fd0:	480e      	ldr	r0, [pc, #56]	; (800200c <sensorTask+0x8c>)
 8001fd2:	f005 fb7b 	bl	80076cc <HAL_I2C_IsDeviceReady>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (result != HAL_OK) // HAL_ERROR or HAL_BUSY or HAL_TIMEOUT
 8001fdc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d002      	beq.n	8001fea <sensorTask+0x6a>
				{
			printf("."); // No ACK received at that address
 8001fe4:	202e      	movs	r0, #46	; 0x2e
 8001fe6:	f00e f9f5 	bl	80103d4 <putchar>
		}
		if (result == HAL_OK) {
 8001fea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d105      	bne.n	8001ffe <sensorTask+0x7e>
			printf("0x%X", i); // Received an ACK at that address
 8001ff2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4808      	ldr	r0, [pc, #32]	; (800201c <sensorTask+0x9c>)
 8001ffa:	f00e f9d3 	bl	80103a4 <iprintf>
	for (i = 1; i < 128; i++) {
 8001ffe:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002002:	3301      	adds	r3, #1
 8002004:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8002008:	e7d7      	b.n	8001fba <sensorTask+0x3a>
 800200a:	bf00      	nop
 800200c:	20000918 	.word	0x20000918
 8002010:	20000820 	.word	0x20000820
 8002014:	2000065c 	.word	0x2000065c
 8002018:	0801298c 	.word	0x0801298c
 800201c:	080129a0 	.word	0x080129a0
		}
	}
	printf("\r\n");
 8002020:	48bb      	ldr	r0, [pc, #748]	; (8002310 <sensorTask+0x390>)
 8002022:	f00e fa5b 	bl	80104dc <puts>

	char sbuf[100] = { 0 };
 8002026:	2300      	movs	r3, #0
 8002028:	60bb      	str	r3, [r7, #8]
 800202a:	f107 030c 	add.w	r3, r7, #12
 800202e:	2260      	movs	r2, #96	; 0x60
 8002030:	2100      	movs	r1, #0
 8002032:	4618      	mov	r0, r3
 8002034:	f00d fc64 	bl	800f900 <memset>

	uint32_t timeNow = HAL_GetTick();
 8002038:	f003 fbe8 	bl	800580c <HAL_GetTick>
 800203c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80


	float DEG2RAD = 0.017453292519943295769236907684886f;
 8002040:	4bb4      	ldr	r3, [pc, #720]	; (8002314 <sensorTask+0x394>)
 8002042:	67bb      	str	r3, [r7, #120]	; 0x78


	for (;;) {
		osDelay(50); // 100hz gyro
 8002044:	2032      	movs	r0, #50	; 0x32
 8002046:	f009 fabd 	bl	800b5c4 <osDelay>

		IMU_AccelRead(&imu);
 800204a:	48b3      	ldr	r0, [pc, #716]	; (8002318 <sensorTask+0x398>)
 800204c:	f7ff f88a 	bl	8001164 <IMU_AccelRead>
		IMU_GyroRead(&imu);
 8002050:	48b1      	ldr	r0, [pc, #708]	; (8002318 <sensorTask+0x398>)
 8002052:	f7ff fa07 	bl	8001464 <IMU_GyroRead>
		//Mag_read(&imu);

		quaternionUpdate(imu.gyro[0] * DEG2RAD, imu.gyro[1] * DEG2RAD,
 8002056:	4bb0      	ldr	r3, [pc, #704]	; (8002318 <sensorTask+0x398>)
 8002058:	ed93 7a04 	vldr	s14, [r3, #16]
 800205c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002060:	ee27 8a27 	vmul.f32	s16, s14, s15
 8002064:	4bac      	ldr	r3, [pc, #688]	; (8002318 <sensorTask+0x398>)
 8002066:	ed93 7a05 	vldr	s14, [r3, #20]
 800206a:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800206e:	ee67 8a27 	vmul.f32	s17, s14, s15
				imu.gyro[2] * DEG2RAD,imu.acc[0], imu.acc[1], imu.acc[2], (HAL_GetTick() - timeNow) * 0.001f);
 8002072:	4ba9      	ldr	r3, [pc, #676]	; (8002318 <sensorTask+0x398>)
 8002074:	ed93 7a06 	vldr	s14, [r3, #24]
		quaternionUpdate(imu.gyro[0] * DEG2RAD, imu.gyro[1] * DEG2RAD,
 8002078:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800207c:	ee27 9a27 	vmul.f32	s18, s14, s15
 8002080:	4ba5      	ldr	r3, [pc, #660]	; (8002318 <sensorTask+0x398>)
 8002082:	edd3 9a01 	vldr	s19, [r3, #4]
 8002086:	4ba4      	ldr	r3, [pc, #656]	; (8002318 <sensorTask+0x398>)
 8002088:	ed93 aa02 	vldr	s20, [r3, #8]
 800208c:	4ba2      	ldr	r3, [pc, #648]	; (8002318 <sensorTask+0x398>)
 800208e:	edd3 aa03 	vldr	s21, [r3, #12]
				imu.gyro[2] * DEG2RAD,imu.acc[0], imu.acc[1], imu.acc[2], (HAL_GetTick() - timeNow) * 0.001f);
 8002092:	f003 fbbb 	bl	800580c <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800209c:	1ad3      	subs	r3, r2, r3
		quaternionUpdate(imu.gyro[0] * DEG2RAD, imu.gyro[1] * DEG2RAD,
 800209e:	ee07 3a90 	vmov	s15, r3
 80020a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020a6:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 800231c <sensorTask+0x39c>
 80020aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020ae:	eeb0 3a67 	vmov.f32	s6, s15
 80020b2:	eef0 2a6a 	vmov.f32	s5, s21
 80020b6:	eeb0 2a4a 	vmov.f32	s4, s20
 80020ba:	eef0 1a69 	vmov.f32	s3, s19
 80020be:	eeb0 1a49 	vmov.f32	s2, s18
 80020c2:	eef0 0a68 	vmov.f32	s1, s17
 80020c6:	eeb0 0a48 	vmov.f32	s0, s16
 80020ca:	f000 f93d 	bl	8002348 <quaternionUpdate>
		timeNow = HAL_GetTick();
 80020ce:	f003 fb9d 	bl	800580c <HAL_GetTick>
 80020d2:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80


		imu.q[0] = SEq_1;
 80020d6:	4b92      	ldr	r3, [pc, #584]	; (8002320 <sensorTask+0x3a0>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a8f      	ldr	r2, [pc, #572]	; (8002318 <sensorTask+0x398>)
 80020dc:	6593      	str	r3, [r2, #88]	; 0x58
		imu.q[1] = SEq_2;
 80020de:	4b91      	ldr	r3, [pc, #580]	; (8002324 <sensorTask+0x3a4>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a8d      	ldr	r2, [pc, #564]	; (8002318 <sensorTask+0x398>)
 80020e4:	65d3      	str	r3, [r2, #92]	; 0x5c
		imu.q[2] = SEq_3;
 80020e6:	4b90      	ldr	r3, [pc, #576]	; (8002328 <sensorTask+0x3a8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a8b      	ldr	r2, [pc, #556]	; (8002318 <sensorTask+0x398>)
 80020ec:	6613      	str	r3, [r2, #96]	; 0x60
		imu.q[3] = SEq_4;
 80020ee:	4b8f      	ldr	r3, [pc, #572]	; (800232c <sensorTask+0x3ac>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a89      	ldr	r2, [pc, #548]	; (8002318 <sensorTask+0x398>)
 80020f4:	6653      	str	r3, [r2, #100]	; 0x64


		sensor_data.yaw_abs = atan2(2.0f * (imu.q[1] * imu.q[2] + imu.q[0] * imu.q[3]),
 80020f6:	4b88      	ldr	r3, [pc, #544]	; (8002318 <sensorTask+0x398>)
 80020f8:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 80020fc:	4b86      	ldr	r3, [pc, #536]	; (8002318 <sensorTask+0x398>)
 80020fe:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002102:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002106:	4b84      	ldr	r3, [pc, #528]	; (8002318 <sensorTask+0x398>)
 8002108:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 800210c:	4b82      	ldr	r3, [pc, #520]	; (8002318 <sensorTask+0x398>)
 800210e:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002112:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002116:	ee77 7a27 	vadd.f32	s15, s14, s15
 800211a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800211e:	ee17 0a90 	vmov	r0, s15
 8002122:	f7fe fa11 	bl	8000548 <__aeabi_f2d>
 8002126:	4604      	mov	r4, r0
 8002128:	460d      	mov	r5, r1
				 imu.q[0] * imu.q[0] + imu.q[1] * imu.q[1] - imu.q[2] * imu.q[2]
 800212a:	4b7b      	ldr	r3, [pc, #492]	; (8002318 <sensorTask+0x398>)
 800212c:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8002130:	4b79      	ldr	r3, [pc, #484]	; (8002318 <sensorTask+0x398>)
 8002132:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002136:	ee27 7a27 	vmul.f32	s14, s14, s15
 800213a:	4b77      	ldr	r3, [pc, #476]	; (8002318 <sensorTask+0x398>)
 800213c:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
 8002140:	4b75      	ldr	r3, [pc, #468]	; (8002318 <sensorTask+0x398>)
 8002142:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002146:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800214a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800214e:	4b72      	ldr	r3, [pc, #456]	; (8002318 <sensorTask+0x398>)
 8002150:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8002154:	4b70      	ldr	r3, [pc, #448]	; (8002318 <sensorTask+0x398>)
 8002156:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800215a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800215e:	ee37 7a67 	vsub.f32	s14, s14, s15
				 - imu.q[3] * imu.q[3]) * 57.295779513082320876798154814105f;
 8002162:	4b6d      	ldr	r3, [pc, #436]	; (8002318 <sensorTask+0x398>)
 8002164:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8002168:	4b6b      	ldr	r3, [pc, #428]	; (8002318 <sensorTask+0x398>)
 800216a:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800216e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002172:	ee77 7a67 	vsub.f32	s15, s14, s15
		sensor_data.yaw_abs = atan2(2.0f * (imu.q[1] * imu.q[2] + imu.q[0] * imu.q[3]),
 8002176:	ee17 0a90 	vmov	r0, s15
 800217a:	f7fe f9e5 	bl	8000548 <__aeabi_f2d>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	ec43 2b11 	vmov	d1, r2, r3
 8002186:	ec45 4b10 	vmov	d0, r4, r5
 800218a:	f00c f8c5 	bl	800e318 <atan2>
 800218e:	ec51 0b10 	vmov	r0, r1, d0
				 - imu.q[3] * imu.q[3]) * 57.295779513082320876798154814105f;
 8002192:	a359      	add	r3, pc, #356	; (adr r3, 80022f8 <sensorTask+0x378>)
 8002194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002198:	f7fe fa2e 	bl	80005f8 <__aeabi_dmul>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4610      	mov	r0, r2
 80021a2:	4619      	mov	r1, r3
 80021a4:	f7fe fd00 	bl	8000ba8 <__aeabi_d2f>
 80021a8:	4603      	mov	r3, r0
		sensor_data.yaw_abs = atan2(2.0f * (imu.q[1] * imu.q[2] + imu.q[0] * imu.q[3]),
 80021aa:	4a61      	ldr	r2, [pc, #388]	; (8002330 <sensorTask+0x3b0>)
 80021ac:	6113      	str	r3, [r2, #16]

		//sensor_data.yaw_abs += imu.gyro[2] * (HAL_GetTick() - timeNow) * 0.001f;

		HAL_ADC_Start(&hadc1);
 80021ae:	4861      	ldr	r0, [pc, #388]	; (8002334 <sensorTask+0x3b4>)
 80021b0:	f003 fba0 	bl	80058f4 <HAL_ADC_Start>
		HAL_ADC_Start(&hadc2);
 80021b4:	4860      	ldr	r0, [pc, #384]	; (8002338 <sensorTask+0x3b8>)
 80021b6:	f003 fb9d 	bl	80058f4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1,1); // trivial waiting time, dont bother with dma or whatever
 80021ba:	2101      	movs	r1, #1
 80021bc:	485d      	ldr	r0, [pc, #372]	; (8002334 <sensorTask+0x3b4>)
 80021be:	f003 fc9e 	bl	8005afe <HAL_ADC_PollForConversion>
		uint32_t IR = HAL_ADC_GetValue(&hadc1);
 80021c2:	485c      	ldr	r0, [pc, #368]	; (8002334 <sensorTask+0x3b4>)
 80021c4:	f003 fd26 	bl	8005c14 <HAL_ADC_GetValue>
 80021c8:	6778      	str	r0, [r7, #116]	; 0x74
		HAL_ADC_PollForConversion(&hadc2,1); // trivial waiting time, dont bother with dma or whatever
 80021ca:	2101      	movs	r1, #1
 80021cc:	485a      	ldr	r0, [pc, #360]	; (8002338 <sensorTask+0x3b8>)
 80021ce:	f003 fc96 	bl	8005afe <HAL_ADC_PollForConversion>
				uint32_t IR2 = HAL_ADC_GetValue(&hadc2);
 80021d2:	4859      	ldr	r0, [pc, #356]	; (8002338 <sensorTask+0x3b8>)
 80021d4:	f003 fd1e 	bl	8005c14 <HAL_ADC_GetValue>
 80021d8:	6738      	str	r0, [r7, #112]	; 0x70
		HAL_ADC_Stop(&hadc1);
 80021da:	4856      	ldr	r0, [pc, #344]	; (8002334 <sensorTask+0x3b4>)
 80021dc:	f003 fc5c 	bl	8005a98 <HAL_ADC_Stop>
		HAL_ADC_Stop(&hadc2);
 80021e0:	4855      	ldr	r0, [pc, #340]	; (8002338 <sensorTask+0x3b8>)
 80021e2:	f003 fc59 	bl	8005a98 <HAL_ADC_Stop>
		float volt = (float) (IR *5)/4095;
 80021e6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80021e8:	4613      	mov	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	ee07 3a90 	vmov	s15, r3
 80021f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021f6:	eddf 6a51 	vldr	s13, [pc, #324]	; 800233c <sensorTask+0x3bc>
 80021fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021fe:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		sensor_data.ir_distL = roundf(29.988*pow(volt, -1.173));
 8002202:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002204:	f7fe f9a0 	bl	8000548 <__aeabi_f2d>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	ed9f 1b3c 	vldr	d1, [pc, #240]	; 8002300 <sensorTask+0x380>
 8002210:	ec43 2b10 	vmov	d0, r2, r3
 8002214:	f00c f882 	bl	800e31c <pow>
 8002218:	ec51 0b10 	vmov	r0, r1, d0
 800221c:	a33a      	add	r3, pc, #232	; (adr r3, 8002308 <sensorTask+0x388>)
 800221e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002222:	f7fe f9e9 	bl	80005f8 <__aeabi_dmul>
 8002226:	4602      	mov	r2, r0
 8002228:	460b      	mov	r3, r1
 800222a:	4610      	mov	r0, r2
 800222c:	4619      	mov	r1, r3
 800222e:	f7fe fcbb 	bl	8000ba8 <__aeabi_d2f>
 8002232:	4603      	mov	r3, r0
 8002234:	ee00 3a10 	vmov	s0, r3
 8002238:	f00c f84a 	bl	800e2d0 <roundf>
 800223c:	eef0 7a40 	vmov.f32	s15, s0
 8002240:	4b3b      	ldr	r3, [pc, #236]	; (8002330 <sensorTask+0x3b0>)
 8002242:	edc3 7a01 	vstr	s15, [r3, #4]
		 volt = (float) (IR2 *5)/4095;
 8002246:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002248:	4613      	mov	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	ee07 3a90 	vmov	s15, r3
 8002252:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002256:	eddf 6a39 	vldr	s13, [pc, #228]	; 800233c <sensorTask+0x3bc>
 800225a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800225e:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		sensor_data.ir_distR = roundf(29.988*pow(volt, -1.173));
 8002262:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002264:	f7fe f970 	bl	8000548 <__aeabi_f2d>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	ed9f 1b24 	vldr	d1, [pc, #144]	; 8002300 <sensorTask+0x380>
 8002270:	ec43 2b10 	vmov	d0, r2, r3
 8002274:	f00c f852 	bl	800e31c <pow>
 8002278:	ec51 0b10 	vmov	r0, r1, d0
 800227c:	a322      	add	r3, pc, #136	; (adr r3, 8002308 <sensorTask+0x388>)
 800227e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002282:	f7fe f9b9 	bl	80005f8 <__aeabi_dmul>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	4610      	mov	r0, r2
 800228c:	4619      	mov	r1, r3
 800228e:	f7fe fc8b 	bl	8000ba8 <__aeabi_d2f>
 8002292:	4603      	mov	r3, r0
 8002294:	ee00 3a10 	vmov	s0, r3
 8002298:	f00c f81a 	bl	800e2d0 <roundf>
 800229c:	eef0 7a40 	vmov.f32	s15, s0
 80022a0:	4b23      	ldr	r3, [pc, #140]	; (8002330 <sensorTask+0x3b0>)
 80022a2:	edc3 7a02 	vstr	s15, [r3, #8]
				imu.acc[0], imu.acc[1], imu.acc[2], imu.gyro[0], imu.gyro[1],
				imu.gyro[2], imu.q[0], sensor_data.yaw_abs, sensor_data.ir_distL);
*/
		//HAL_UART_Transmit(&huart3, (uint8_t*) sbuf, len, 10);
		//	HAL_UART_Receive_IT(&huart3, (uint8_t*) aRxBuffer, 5);
		is_task_alive_struct.senr = true;
 80022a6:	4b26      	ldr	r3, [pc, #152]	; (8002340 <sensorTask+0x3c0>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	709a      	strb	r2, [r3, #2]

		if(sensor_data.is_allow_motor_override)
 80022ac:	4b20      	ldr	r3, [pc, #128]	; (8002330 <sensorTask+0x3b0>)
 80022ae:	7f1b      	ldrb	r3, [r3, #28]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f43f aec7 	beq.w	8002044 <sensorTask+0xc4>
		{
			if(sensor_data.ir_distL < sensor_data.ir_dist_th_L || sensor_data.ir_distR < sensor_data.ir_dist_th_R)
 80022b6:	4b1e      	ldr	r3, [pc, #120]	; (8002330 <sensorTask+0x3b0>)
 80022b8:	ed93 7a01 	vldr	s14, [r3, #4]
 80022bc:	4b1c      	ldr	r3, [pc, #112]	; (8002330 <sensorTask+0x3b0>)
 80022be:	edd3 7a08 	vldr	s15, [r3, #32]
 80022c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ca:	d40a      	bmi.n	80022e2 <sensorTask+0x362>
 80022cc:	4b18      	ldr	r3, [pc, #96]	; (8002330 <sensorTask+0x3b0>)
 80022ce:	ed93 7a02 	vldr	s14, [r3, #8]
 80022d2:	4b17      	ldr	r3, [pc, #92]	; (8002330 <sensorTask+0x3b0>)
 80022d4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80022d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e0:	d505      	bpl.n	80022ee <sensorTask+0x36e>
			{
				controller.emergencyStop();
 80022e2:	4818      	ldr	r0, [pc, #96]	; (8002344 <sensorTask+0x3c4>)
 80022e4:	f001 f944 	bl	8003570 <_ZN9AppMotion16MotionController13emergencyStopEv>
				processor.signalObstruction();
 80022e8:	f7ff fdd2 	bl	8001e90 <_ZN9AppParser9Processor17signalObstructionEv>
 80022ec:	e001      	b.n	80022f2 <sensorTask+0x372>
			}
			else processor.signalNoObstruction(); // to prevent repeated tx
 80022ee:	f7ff fddb 	bl	8001ea8 <_ZN9AppParser9Processor19signalNoObstructionEv>
		}




	}
 80022f2:	e6a7      	b.n	8002044 <sensorTask+0xc4>
 80022f4:	f3af 8000 	nop.w
 80022f8:	20000000 	.word	0x20000000
 80022fc:	404ca5dc 	.word	0x404ca5dc
 8002300:	a5e353f8 	.word	0xa5e353f8
 8002304:	bff2c49b 	.word	0xbff2c49b
 8002308:	916872b0 	.word	0x916872b0
 800230c:	403dfced 	.word	0x403dfced
 8002310:	080129a8 	.word	0x080129a8
 8002314:	3c8efa35 	.word	0x3c8efa35
 8002318:	20000820 	.word	0x20000820
 800231c:	3a83126f 	.word	0x3a83126f
 8002320:	20000058 	.word	0x20000058
 8002324:	20000804 	.word	0x20000804
 8002328:	20000808 	.word	0x20000808
 800232c:	2000080c 	.word	0x2000080c
 8002330:	2000065c 	.word	0x2000065c
 8002334:	20000888 	.word	0x20000888
 8002338:	200008d0 	.word	0x200008d0
 800233c:	457ff000 	.word	0x457ff000
 8002340:	20000684 	.word	0x20000684
 8002344:	2000069c 	.word	0x2000069c

08002348 <quaternionUpdate>:
}


#define gyroMeasError 3.14159265358979f * (1.0f / 180.0f)
#define beta sqrt(3.0f / 4.0f) * gyroMeasError
void quaternionUpdate(float w_x, float w_y, float w_z, float a_x, float a_y, float a_z, float deltat) {
 8002348:	b5b0      	push	{r4, r5, r7, lr}
 800234a:	b0a2      	sub	sp, #136	; 0x88
 800234c:	af00      	add	r7, sp, #0
 800234e:	ed87 0a07 	vstr	s0, [r7, #28]
 8002352:	edc7 0a06 	vstr	s1, [r7, #24]
 8002356:	ed87 1a05 	vstr	s2, [r7, #20]
 800235a:	edc7 1a04 	vstr	s3, [r7, #16]
 800235e:	ed87 2a03 	vstr	s4, [r7, #12]
 8002362:	edc7 2a02 	vstr	s5, [r7, #8]
 8002366:	ed87 3a01 	vstr	s6, [r7, #4]
  float SEqDot_omega_1, SEqDot_omega_2, SEqDot_omega_3, SEqDot_omega_4; 	// quaternion derivative from gyroscopes elements
  float f_1, f_2, f_3;                                                    // objective function elements
  float J_11or24, J_12or23, J_13or22, J_14or21, J_32, J_33;               // objective function Jacobian elements
  float SEqHatDot_1, SEqHatDot_2, SEqHatDot_3, SEqHatDot_4;               // estimated direction of the gyro error

 	float halfSEq_1 = 0.5f * SEq_1;
 800236a:	4bf1      	ldr	r3, [pc, #964]	; (8002730 <quaternionUpdate+0x3e8>)
 800236c:	edd3 7a00 	vldr	s15, [r3]
 8002370:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002374:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002378:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
 	float halfSEq_2 = 0.5f * SEq_2;
 800237c:	4bed      	ldr	r3, [pc, #948]	; (8002734 <quaternionUpdate+0x3ec>)
 800237e:	edd3 7a00 	vldr	s15, [r3]
 8002382:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002386:	ee67 7a87 	vmul.f32	s15, s15, s14
 800238a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
 	float halfSEq_3 = 0.5f * SEq_3;
 800238e:	4bea      	ldr	r3, [pc, #936]	; (8002738 <quaternionUpdate+0x3f0>)
 8002390:	edd3 7a00 	vldr	s15, [r3]
 8002394:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002398:	ee67 7a87 	vmul.f32	s15, s15, s14
 800239c:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
 	float halfSEq_4 = 0.5f * SEq_4;
 80023a0:	4be6      	ldr	r3, [pc, #920]	; (800273c <quaternionUpdate+0x3f4>)
 80023a2:	edd3 7a00 	vldr	s15, [r3]
 80023a6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80023aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023ae:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
 	float twoSEq_1 = 2.0f * SEq_1;
 80023b2:	4bdf      	ldr	r3, [pc, #892]	; (8002730 <quaternionUpdate+0x3e8>)
 80023b4:	edd3 7a00 	vldr	s15, [r3]
 80023b8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023bc:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
 	float twoSEq_2 = 2.0f * SEq_2;
 80023c0:	4bdc      	ldr	r3, [pc, #880]	; (8002734 <quaternionUpdate+0x3ec>)
 80023c2:	edd3 7a00 	vldr	s15, [r3]
 80023c6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023ca:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
 	float twoSEq_3 = 2.0f * SEq_3;
 80023ce:	4bda      	ldr	r3, [pc, #872]	; (8002738 <quaternionUpdate+0x3f0>)
 80023d0:	edd3 7a00 	vldr	s15, [r3]
 80023d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023d8:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

  // Normalize the accelerometer measurement
  norm = sqrt(a_x * a_x + a_y * a_y + a_z * a_z);
 80023dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80023e0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80023e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80023e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80023ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80023f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80023f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023fc:	ee17 0a90 	vmov	r0, s15
 8002400:	f7fe f8a2 	bl	8000548 <__aeabi_f2d>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	ec43 2b10 	vmov	d0, r2, r3
 800240c:	f00b fff6 	bl	800e3fc <sqrt>
 8002410:	ec53 2b10 	vmov	r2, r3, d0
 8002414:	4610      	mov	r0, r2
 8002416:	4619      	mov	r1, r3
 8002418:	f7fe fbc6 	bl	8000ba8 <__aeabi_d2f>
 800241c:	4603      	mov	r3, r0
 800241e:	66bb      	str	r3, [r7, #104]	; 0x68
  a_x /= norm;
 8002420:	edd7 6a04 	vldr	s13, [r7, #16]
 8002424:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002428:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800242c:	edc7 7a04 	vstr	s15, [r7, #16]
  a_y /= norm;
 8002430:	edd7 6a03 	vldr	s13, [r7, #12]
 8002434:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002438:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800243c:	edc7 7a03 	vstr	s15, [r7, #12]
  a_z /= norm;
 8002440:	edd7 6a02 	vldr	s13, [r7, #8]
 8002444:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002448:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800244c:	edc7 7a02 	vstr	s15, [r7, #8]

  // Compute the objective function and Jacobian
  f_1 = twoSEq_2 * SEq_4 - twoSEq_1 * SEq_3 - a_x;
 8002450:	4bba      	ldr	r3, [pc, #744]	; (800273c <quaternionUpdate+0x3f4>)
 8002452:	ed93 7a00 	vldr	s14, [r3]
 8002456:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800245a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800245e:	4bb6      	ldr	r3, [pc, #728]	; (8002738 <quaternionUpdate+0x3f0>)
 8002460:	edd3 6a00 	vldr	s13, [r3]
 8002464:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002468:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800246c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002470:	edd7 7a04 	vldr	s15, [r7, #16]
 8002474:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002478:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
  f_2 = twoSEq_1 * SEq_2 + twoSEq_3 * SEq_4 - a_y;
 800247c:	4bad      	ldr	r3, [pc, #692]	; (8002734 <quaternionUpdate+0x3ec>)
 800247e:	ed93 7a00 	vldr	s14, [r3]
 8002482:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002486:	ee27 7a27 	vmul.f32	s14, s14, s15
 800248a:	4bac      	ldr	r3, [pc, #688]	; (800273c <quaternionUpdate+0x3f4>)
 800248c:	edd3 6a00 	vldr	s13, [r3]
 8002490:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002494:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002498:	ee37 7a27 	vadd.f32	s14, s14, s15
 800249c:	edd7 7a03 	vldr	s15, [r7, #12]
 80024a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024a4:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
  f_3 = 1.0f - twoSEq_2 * SEq_2 - twoSEq_3 * SEq_3 - a_z; J_11or24 = twoSEq_3;
 80024a8:	4ba2      	ldr	r3, [pc, #648]	; (8002734 <quaternionUpdate+0x3ec>)
 80024aa:	ed93 7a00 	vldr	s14, [r3]
 80024ae:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80024b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80024ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024be:	4b9e      	ldr	r3, [pc, #632]	; (8002738 <quaternionUpdate+0x3f0>)
 80024c0:	edd3 6a00 	vldr	s13, [r3]
 80024c4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80024c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80024d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024d8:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
 80024dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024de:	65bb      	str	r3, [r7, #88]	; 0x58
  J_12or23 = 2.0f * SEq_4;
 80024e0:	4b96      	ldr	r3, [pc, #600]	; (800273c <quaternionUpdate+0x3f4>)
 80024e2:	edd3 7a00 	vldr	s15, [r3]
 80024e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024ea:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
  J_13or22 = twoSEq_1;
 80024ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024f0:	653b      	str	r3, [r7, #80]	; 0x50
  J_14or21 = twoSEq_2;
 80024f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  J_32 = 2.0f * J_14or21;
 80024f6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80024fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024fe:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  J_33 = 2.0f * J_11or24;
 8002502:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002506:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800250a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

  // Compute the gradient (matrix multiplication)
  SEqHatDot_1 = J_14or21 * f_2 - J_11or24 * f_1;
 800250e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002512:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002516:	ee27 7a27 	vmul.f32	s14, s14, s15
 800251a:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800251e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002522:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002526:	ee77 7a67 	vsub.f32	s15, s14, s15
 800252a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
  SEqHatDot_2 = J_12or23 * f_1 + J_13or22 * f_2 - J_32 * f_3;
 800252e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002532:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002536:	ee27 7a27 	vmul.f32	s14, s14, s15
 800253a:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800253e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002542:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002546:	ee37 7a27 	vadd.f32	s14, s14, s15
 800254a:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800254e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002552:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002556:	ee77 7a67 	vsub.f32	s15, s14, s15
 800255a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
  SEqHatDot_3 = J_12or23 * f_2 - J_33 * f_3 - J_13or22 * f_1;
 800255e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002562:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002566:	ee27 7a27 	vmul.f32	s14, s14, s15
 800256a:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800256e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002572:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002576:	ee37 7a67 	vsub.f32	s14, s14, s15
 800257a:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800257e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002582:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002586:	ee77 7a67 	vsub.f32	s15, s14, s15
 800258a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
  SEqHatDot_4 = J_14or21 * f_1 + J_11or24 * f_2;
 800258e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002592:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002596:	ee27 7a27 	vmul.f32	s14, s14, s15
 800259a:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800259e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80025a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025aa:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

  // Normalize the gradient
  norm = sqrt(SEqHatDot_1 * SEqHatDot_1 + SEqHatDot_2 * SEqHatDot_2 + SEqHatDot_3 * SEqHatDot_3 + SEqHatDot_4 * SEqHatDot_4);
 80025ae:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80025b2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80025b6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80025ba:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80025be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025c2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80025c6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80025ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025ce:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80025d2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80025d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025da:	ee17 0a90 	vmov	r0, s15
 80025de:	f7fd ffb3 	bl	8000548 <__aeabi_f2d>
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	ec43 2b10 	vmov	d0, r2, r3
 80025ea:	f00b ff07 	bl	800e3fc <sqrt>
 80025ee:	ec53 2b10 	vmov	r2, r3, d0
 80025f2:	4610      	mov	r0, r2
 80025f4:	4619      	mov	r1, r3
 80025f6:	f7fe fad7 	bl	8000ba8 <__aeabi_d2f>
 80025fa:	4603      	mov	r3, r0
 80025fc:	66bb      	str	r3, [r7, #104]	; 0x68
  SEqHatDot_1 /= norm;
 80025fe:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002602:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800260a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
  SEqHatDot_2 /= norm;
 800260e:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8002612:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002616:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800261a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
  SEqHatDot_3 /= norm;
 800261e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8002622:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002626:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800262a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
  SEqHatDot_4 /= norm;
 800262e:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8002632:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002636:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800263a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

  // Compute the quaternion derivative measured by gyroscopes
  SEqDot_omega_1 = -halfSEq_2 * w_x - halfSEq_3 * w_y - halfSEq_4 * w_z;
 800263e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002642:	eeb1 7a67 	vneg.f32	s14, s15
 8002646:	edd7 7a07 	vldr	s15, [r7, #28]
 800264a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800264e:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8002652:	edd7 7a06 	vldr	s15, [r7, #24]
 8002656:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800265a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800265e:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8002662:	edd7 7a05 	vldr	s15, [r7, #20]
 8002666:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800266a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800266e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  SEqDot_omega_2 = halfSEq_1 * w_x + halfSEq_3 * w_z - halfSEq_4 * w_y;
 8002672:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8002676:	edd7 7a07 	vldr	s15, [r7, #28]
 800267a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800267e:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8002682:	edd7 7a05 	vldr	s15, [r7, #20]
 8002686:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800268a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800268e:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8002692:	edd7 7a06 	vldr	s15, [r7, #24]
 8002696:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800269a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800269e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  SEqDot_omega_3 = halfSEq_1 * w_y - halfSEq_2 * w_z + halfSEq_4 * w_x;
 80026a2:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80026a6:	edd7 7a06 	vldr	s15, [r7, #24]
 80026aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026ae:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 80026b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80026b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026be:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 80026c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80026c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ce:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  SEqDot_omega_4 = halfSEq_1 * w_z + halfSEq_2 * w_y - halfSEq_3 * w_x;
 80026d2:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80026d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80026da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026de:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 80026e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80026e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026ee:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 80026f2:	edd7 7a07 	vldr	s15, [r7, #28]
 80026f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026fe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  // Compute then integrate the estimated quaternion derivative
  SEq_1 += (SEqDot_omega_1 - (beta * SEqHatDot_1)) * deltat;
 8002702:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002704:	f7fd ff20 	bl	8000548 <__aeabi_f2d>
 8002708:	4604      	mov	r4, r0
 800270a:	460d      	mov	r5, r1
 800270c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800270e:	f7fd ff1b 	bl	8000548 <__aeabi_f2d>
 8002712:	a305      	add	r3, pc, #20	; (adr r3, 8002728 <quaternionUpdate+0x3e0>)
 8002714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002718:	f7fd ff6e 	bl	80005f8 <__aeabi_dmul>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	e00e      	b.n	8002740 <quaternionUpdate+0x3f8>
 8002722:	bf00      	nop
 8002724:	f3af 8000 	nop.w
 8002728:	5a6bac7d 	.word	0x5a6bac7d
 800272c:	3f8ef49c 	.word	0x3f8ef49c
 8002730:	20000058 	.word	0x20000058
 8002734:	20000804 	.word	0x20000804
 8002738:	20000808 	.word	0x20000808
 800273c:	2000080c 	.word	0x2000080c
 8002740:	4620      	mov	r0, r4
 8002742:	4629      	mov	r1, r5
 8002744:	f7fd fda0 	bl	8000288 <__aeabi_dsub>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4614      	mov	r4, r2
 800274e:	461d      	mov	r5, r3
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f7fd fef9 	bl	8000548 <__aeabi_f2d>
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	4620      	mov	r0, r4
 800275c:	4629      	mov	r1, r5
 800275e:	f7fd ff4b 	bl	80005f8 <__aeabi_dmul>
 8002762:	4602      	mov	r2, r0
 8002764:	460b      	mov	r3, r1
 8002766:	4614      	mov	r4, r2
 8002768:	461d      	mov	r5, r3
 800276a:	4b93      	ldr	r3, [pc, #588]	; (80029b8 <quaternionUpdate+0x670>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f7fd feea 	bl	8000548 <__aeabi_f2d>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	4620      	mov	r0, r4
 800277a:	4629      	mov	r1, r5
 800277c:	f7fd fd86 	bl	800028c <__adddf3>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4610      	mov	r0, r2
 8002786:	4619      	mov	r1, r3
 8002788:	f7fe fa0e 	bl	8000ba8 <__aeabi_d2f>
 800278c:	4603      	mov	r3, r0
 800278e:	4a8a      	ldr	r2, [pc, #552]	; (80029b8 <quaternionUpdate+0x670>)
 8002790:	6013      	str	r3, [r2, #0]
  SEq_2 += (SEqDot_omega_2 - (beta * SEqHatDot_2)) * deltat;
 8002792:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002794:	f7fd fed8 	bl	8000548 <__aeabi_f2d>
 8002798:	4604      	mov	r4, r0
 800279a:	460d      	mov	r5, r1
 800279c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800279e:	f7fd fed3 	bl	8000548 <__aeabi_f2d>
 80027a2:	a383      	add	r3, pc, #524	; (adr r3, 80029b0 <quaternionUpdate+0x668>)
 80027a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a8:	f7fd ff26 	bl	80005f8 <__aeabi_dmul>
 80027ac:	4602      	mov	r2, r0
 80027ae:	460b      	mov	r3, r1
 80027b0:	4620      	mov	r0, r4
 80027b2:	4629      	mov	r1, r5
 80027b4:	f7fd fd68 	bl	8000288 <__aeabi_dsub>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	4614      	mov	r4, r2
 80027be:	461d      	mov	r5, r3
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7fd fec1 	bl	8000548 <__aeabi_f2d>
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	4620      	mov	r0, r4
 80027cc:	4629      	mov	r1, r5
 80027ce:	f7fd ff13 	bl	80005f8 <__aeabi_dmul>
 80027d2:	4602      	mov	r2, r0
 80027d4:	460b      	mov	r3, r1
 80027d6:	4614      	mov	r4, r2
 80027d8:	461d      	mov	r5, r3
 80027da:	4b78      	ldr	r3, [pc, #480]	; (80029bc <quaternionUpdate+0x674>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fd feb2 	bl	8000548 <__aeabi_f2d>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4620      	mov	r0, r4
 80027ea:	4629      	mov	r1, r5
 80027ec:	f7fd fd4e 	bl	800028c <__adddf3>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	4610      	mov	r0, r2
 80027f6:	4619      	mov	r1, r3
 80027f8:	f7fe f9d6 	bl	8000ba8 <__aeabi_d2f>
 80027fc:	4603      	mov	r3, r0
 80027fe:	4a6f      	ldr	r2, [pc, #444]	; (80029bc <quaternionUpdate+0x674>)
 8002800:	6013      	str	r3, [r2, #0]
  SEq_3 += (SEqDot_omega_3 - (beta * SEqHatDot_3)) * deltat;
 8002802:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002804:	f7fd fea0 	bl	8000548 <__aeabi_f2d>
 8002808:	4604      	mov	r4, r0
 800280a:	460d      	mov	r5, r1
 800280c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800280e:	f7fd fe9b 	bl	8000548 <__aeabi_f2d>
 8002812:	a367      	add	r3, pc, #412	; (adr r3, 80029b0 <quaternionUpdate+0x668>)
 8002814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002818:	f7fd feee 	bl	80005f8 <__aeabi_dmul>
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	4620      	mov	r0, r4
 8002822:	4629      	mov	r1, r5
 8002824:	f7fd fd30 	bl	8000288 <__aeabi_dsub>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	4614      	mov	r4, r2
 800282e:	461d      	mov	r5, r3
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f7fd fe89 	bl	8000548 <__aeabi_f2d>
 8002836:	4602      	mov	r2, r0
 8002838:	460b      	mov	r3, r1
 800283a:	4620      	mov	r0, r4
 800283c:	4629      	mov	r1, r5
 800283e:	f7fd fedb 	bl	80005f8 <__aeabi_dmul>
 8002842:	4602      	mov	r2, r0
 8002844:	460b      	mov	r3, r1
 8002846:	4614      	mov	r4, r2
 8002848:	461d      	mov	r5, r3
 800284a:	4b5d      	ldr	r3, [pc, #372]	; (80029c0 <quaternionUpdate+0x678>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f7fd fe7a 	bl	8000548 <__aeabi_f2d>
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	4620      	mov	r0, r4
 800285a:	4629      	mov	r1, r5
 800285c:	f7fd fd16 	bl	800028c <__adddf3>
 8002860:	4602      	mov	r2, r0
 8002862:	460b      	mov	r3, r1
 8002864:	4610      	mov	r0, r2
 8002866:	4619      	mov	r1, r3
 8002868:	f7fe f99e 	bl	8000ba8 <__aeabi_d2f>
 800286c:	4603      	mov	r3, r0
 800286e:	4a54      	ldr	r2, [pc, #336]	; (80029c0 <quaternionUpdate+0x678>)
 8002870:	6013      	str	r3, [r2, #0]
  SEq_4 += (SEqDot_omega_4 - (beta * SEqHatDot_4)) * deltat;
 8002872:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002874:	f7fd fe68 	bl	8000548 <__aeabi_f2d>
 8002878:	4604      	mov	r4, r0
 800287a:	460d      	mov	r5, r1
 800287c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800287e:	f7fd fe63 	bl	8000548 <__aeabi_f2d>
 8002882:	a34b      	add	r3, pc, #300	; (adr r3, 80029b0 <quaternionUpdate+0x668>)
 8002884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002888:	f7fd feb6 	bl	80005f8 <__aeabi_dmul>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4620      	mov	r0, r4
 8002892:	4629      	mov	r1, r5
 8002894:	f7fd fcf8 	bl	8000288 <__aeabi_dsub>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	4614      	mov	r4, r2
 800289e:	461d      	mov	r5, r3
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f7fd fe51 	bl	8000548 <__aeabi_f2d>
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	4620      	mov	r0, r4
 80028ac:	4629      	mov	r1, r5
 80028ae:	f7fd fea3 	bl	80005f8 <__aeabi_dmul>
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	4614      	mov	r4, r2
 80028b8:	461d      	mov	r5, r3
 80028ba:	4b42      	ldr	r3, [pc, #264]	; (80029c4 <quaternionUpdate+0x67c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7fd fe42 	bl	8000548 <__aeabi_f2d>
 80028c4:	4602      	mov	r2, r0
 80028c6:	460b      	mov	r3, r1
 80028c8:	4620      	mov	r0, r4
 80028ca:	4629      	mov	r1, r5
 80028cc:	f7fd fcde 	bl	800028c <__adddf3>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	4610      	mov	r0, r2
 80028d6:	4619      	mov	r1, r3
 80028d8:	f7fe f966 	bl	8000ba8 <__aeabi_d2f>
 80028dc:	4603      	mov	r3, r0
 80028de:	4a39      	ldr	r2, [pc, #228]	; (80029c4 <quaternionUpdate+0x67c>)
 80028e0:	6013      	str	r3, [r2, #0]

  // Normalize quaternion
  norm = sqrt(SEq_1 * SEq_1 + SEq_2 * SEq_2 + SEq_3 * SEq_3 + SEq_4 * SEq_4);
 80028e2:	4b35      	ldr	r3, [pc, #212]	; (80029b8 <quaternionUpdate+0x670>)
 80028e4:	ed93 7a00 	vldr	s14, [r3]
 80028e8:	4b33      	ldr	r3, [pc, #204]	; (80029b8 <quaternionUpdate+0x670>)
 80028ea:	edd3 7a00 	vldr	s15, [r3]
 80028ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028f2:	4b32      	ldr	r3, [pc, #200]	; (80029bc <quaternionUpdate+0x674>)
 80028f4:	edd3 6a00 	vldr	s13, [r3]
 80028f8:	4b30      	ldr	r3, [pc, #192]	; (80029bc <quaternionUpdate+0x674>)
 80028fa:	edd3 7a00 	vldr	s15, [r3]
 80028fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002902:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002906:	4b2e      	ldr	r3, [pc, #184]	; (80029c0 <quaternionUpdate+0x678>)
 8002908:	edd3 6a00 	vldr	s13, [r3]
 800290c:	4b2c      	ldr	r3, [pc, #176]	; (80029c0 <quaternionUpdate+0x678>)
 800290e:	edd3 7a00 	vldr	s15, [r3]
 8002912:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002916:	ee37 7a27 	vadd.f32	s14, s14, s15
 800291a:	4b2a      	ldr	r3, [pc, #168]	; (80029c4 <quaternionUpdate+0x67c>)
 800291c:	edd3 6a00 	vldr	s13, [r3]
 8002920:	4b28      	ldr	r3, [pc, #160]	; (80029c4 <quaternionUpdate+0x67c>)
 8002922:	edd3 7a00 	vldr	s15, [r3]
 8002926:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800292a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800292e:	ee17 0a90 	vmov	r0, s15
 8002932:	f7fd fe09 	bl	8000548 <__aeabi_f2d>
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
 800293a:	ec43 2b10 	vmov	d0, r2, r3
 800293e:	f00b fd5d 	bl	800e3fc <sqrt>
 8002942:	ec53 2b10 	vmov	r2, r3, d0
 8002946:	4610      	mov	r0, r2
 8002948:	4619      	mov	r1, r3
 800294a:	f7fe f92d 	bl	8000ba8 <__aeabi_d2f>
 800294e:	4603      	mov	r3, r0
 8002950:	66bb      	str	r3, [r7, #104]	; 0x68
  SEq_1 /= norm;
 8002952:	4b19      	ldr	r3, [pc, #100]	; (80029b8 <quaternionUpdate+0x670>)
 8002954:	edd3 6a00 	vldr	s13, [r3]
 8002958:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 800295c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002960:	4b15      	ldr	r3, [pc, #84]	; (80029b8 <quaternionUpdate+0x670>)
 8002962:	edc3 7a00 	vstr	s15, [r3]
  SEq_2 /= norm;
 8002966:	4b15      	ldr	r3, [pc, #84]	; (80029bc <quaternionUpdate+0x674>)
 8002968:	edd3 6a00 	vldr	s13, [r3]
 800296c:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002970:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002974:	4b11      	ldr	r3, [pc, #68]	; (80029bc <quaternionUpdate+0x674>)
 8002976:	edc3 7a00 	vstr	s15, [r3]
  SEq_3 /= norm;
 800297a:	4b11      	ldr	r3, [pc, #68]	; (80029c0 <quaternionUpdate+0x678>)
 800297c:	edd3 6a00 	vldr	s13, [r3]
 8002980:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002984:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002988:	4b0d      	ldr	r3, [pc, #52]	; (80029c0 <quaternionUpdate+0x678>)
 800298a:	edc3 7a00 	vstr	s15, [r3]
  SEq_4 /= norm;
 800298e:	4b0d      	ldr	r3, [pc, #52]	; (80029c4 <quaternionUpdate+0x67c>)
 8002990:	edd3 6a00 	vldr	s13, [r3]
 8002994:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002998:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800299c:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <quaternionUpdate+0x67c>)
 800299e:	edc3 7a00 	vstr	s15, [r3]
}
 80029a2:	bf00      	nop
 80029a4:	3788      	adds	r7, #136	; 0x88
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bdb0      	pop	{r4, r5, r7, pc}
 80029aa:	bf00      	nop
 80029ac:	f3af 8000 	nop.w
 80029b0:	5a6bac7d 	.word	0x5a6bac7d
 80029b4:	3f8ef49c 	.word	0x3f8ef49c
 80029b8:	20000058 	.word	0x20000058
 80029bc:	20000804 	.word	0x20000804
 80029c0:	20000808 	.word	0x20000808
 80029c4:	2000080c 	.word	0x2000080c

080029c8 <_Z41__static_initialization_and_destruction_0ii>:
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d125      	bne.n	8002a24 <_Z41__static_initialization_and_destruction_0ii+0x5c>
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029de:	4293      	cmp	r3, r2
 80029e0:	d120      	bne.n	8002a24 <_Z41__static_initialization_and_destruction_0ii+0x5c>
		.mailbox = { .queue = NULL } };
 80029e2:	4b1b      	ldr	r3, [pc, #108]	; (8002a50 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a1b      	ldr	r2, [pc, #108]	; (8002a54 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80029e8:	6013      	str	r3, [r2, #0]
osMessageQueueId_t ctrlQueue = osMessageQueueNew(10, sizeof(AppParser::MOTION_PKT_t), NULL);
 80029ea:	2200      	movs	r2, #0
 80029ec:	210c      	movs	r1, #12
 80029ee:	200a      	movs	r0, #10
 80029f0:	f008 fe03 	bl	800b5fa <osMessageQueueNew>
 80029f4:	4603      	mov	r3, r0
 80029f6:	4a18      	ldr	r2, [pc, #96]	; (8002a58 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80029f8:	6013      	str	r3, [r2, #0]
		.mailbox = { .queue = ctrlQueue } };
 80029fa:	4b18      	ldr	r3, [pc, #96]	; (8002a5c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a18      	ldr	r2, [pc, #96]	; (8002a60 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	4b15      	ldr	r3, [pc, #84]	; (8002a58 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a16      	ldr	r2, [pc, #88]	; (8002a60 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8002a08:	6293      	str	r3, [r2, #40]	; 0x28
AppMotion::MotionController controller(&ctrlCtx);
 8002a0a:	4915      	ldr	r1, [pc, #84]	; (8002a60 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8002a0c:	4815      	ldr	r0, [pc, #84]	; (8002a64 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8002a0e:	f000 f86d 	bl	8002aec <_ZN9AppMotion16MotionControllerC1EP5u_ctx>
AppParser::Processor processor(&procCtx, &ctrlCtx);
 8002a12:	4a13      	ldr	r2, [pc, #76]	; (8002a60 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8002a14:	490f      	ldr	r1, [pc, #60]	; (8002a54 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8002a16:	4814      	ldr	r0, [pc, #80]	; (8002a68 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8002a18:	f000 ff9c 	bl	8003954 <_ZN9AppParser9ProcessorC1EP5u_ctxS2_>
AppParser::Listener listener(&procCtx);
 8002a1c:	490d      	ldr	r1, [pc, #52]	; (8002a54 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8002a1e:	4813      	ldr	r0, [pc, #76]	; (8002a6c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8002a20:	f000 ff58 	bl	80038d4 <_ZN9AppParser8ListenerC1EP5u_ctx>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10d      	bne.n	8002a46 <_Z41__static_initialization_and_destruction_0ii+0x7e>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d108      	bne.n	8002a46 <_Z41__static_initialization_and_destruction_0ii+0x7e>
 8002a34:	480d      	ldr	r0, [pc, #52]	; (8002a6c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8002a36:	f000 ff5c 	bl	80038f2 <_ZN9AppParser8ListenerD1Ev>
AppParser::Processor processor(&procCtx, &ctrlCtx);
 8002a3a:	480b      	ldr	r0, [pc, #44]	; (8002a68 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8002a3c:	f000 ffa4 	bl	8003988 <_ZN9AppParser9ProcessorD1Ev>
AppMotion::MotionController controller(&ctrlCtx);
 8002a40:	4808      	ldr	r0, [pc, #32]	; (8002a64 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8002a42:	f7ff fa43 	bl	8001ecc <_ZN9AppMotion16MotionControllerD1Ev>
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	2000068c 	.word	0x2000068c
 8002a54:	20000000 	.word	0x20000000
 8002a58:	20000698 	.word	0x20000698
 8002a5c:	20000690 	.word	0x20000690
 8002a60:	2000002c 	.word	0x2000002c
 8002a64:	2000069c 	.word	0x2000069c
 8002a68:	200007f8 	.word	0x200007f8
 8002a6c:	20000800 	.word	0x20000800

08002a70 <_GLOBAL__sub_I_sensor_data>:
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002a78:	2001      	movs	r0, #1
 8002a7a:	f7ff ffa5 	bl	80029c8 <_Z41__static_initialization_and_destruction_0ii>
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <_GLOBAL__sub_D_sensor_data>:
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002a88:	2000      	movs	r0, #0
 8002a8a:	f7ff ff9d 	bl	80029c8 <_Z41__static_initialization_and_destruction_0ii>
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <_ZN9AppMotion16MotionController3mapEfffff>:
	;
	u_ctx *ctx;
	static void motionTask(void *pv);
	static float map(float x, float in_min, float in_max, float out_min, float out_max) {
 8002a90:	b480      	push	{r7}
 8002a92:	b087      	sub	sp, #28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	ed87 0a05 	vstr	s0, [r7, #20]
 8002a9a:	edc7 0a04 	vstr	s1, [r7, #16]
 8002a9e:	ed87 1a03 	vstr	s2, [r7, #12]
 8002aa2:	edc7 1a02 	vstr	s3, [r7, #8]
 8002aa6:	ed87 2a01 	vstr	s4, [r7, #4]
	    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002aaa:	ed97 7a05 	vldr	s14, [r7, #20]
 8002aae:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ab2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ab6:	edd7 6a01 	vldr	s13, [r7, #4]
 8002aba:	edd7 7a02 	vldr	s15, [r7, #8]
 8002abe:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002ac2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002ac6:	ed97 7a03 	vldr	s14, [r7, #12]
 8002aca:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ace:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ad6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ada:	ee77 7a27 	vadd.f32	s15, s14, s15
	}
 8002ade:	eeb0 0a67 	vmov.f32	s0, s15
 8002ae2:	371c      	adds	r7, #28
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <_ZN9AppMotion16MotionControllerC1EP5u_ctx>:
#define REAR_WHEEL_RADIUS_CM 6.5/2
#define REAR_WHEEL_ROTATION_DISTANCE (2 * 3.142 * REAR_WHEEL_RADIUS_CM)
#define ENCODER_PULSES_PER_ROTATION 1560
#define DISTANCE_PER_ENCODER_PULSE (REAR_WHEEL_ROTATION_DISTANCE / ENCODER_PULSES_PER_ROTATION)

MotionController::MotionController(u_ctx *ctx) {
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
	this->ctx = ctx;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	601a      	str	r2, [r3, #0]
	/* Instantiate the physical devices */

}
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4618      	mov	r0, r3
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
	...

08002b0c <_ZN9AppMotion16MotionController5startEv>:

void MotionController::start(void) {
 8002b0c:	b590      	push	{r4, r7, lr}
 8002b0e:	b08f      	sub	sp, #60	; 0x3c
 8002b10:	af04      	add	r7, sp, #16
 8002b12:	6078      	str	r0, [r7, #4]
	this->servo = new Servo(&htim1, TIM_CHANNEL_1, CENTER_POS_PWM - LEFT_DELTA,
	CENTER_POS_PWM + RIGHT_DELTA, CENTER_POS_PWM);
 8002b14:	2018      	movs	r0, #24
 8002b16:	f00b fbc1 	bl	800e29c <_Znwj>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	461c      	mov	r4, r3
 8002b1e:	2393      	movs	r3, #147	; 0x93
 8002b20:	9301      	str	r3, [sp, #4]
 8002b22:	23f7      	movs	r3, #247	; 0xf7
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	2361      	movs	r3, #97	; 0x61
 8002b28:	2200      	movs	r2, #0
 8002b2a:	4955      	ldr	r1, [pc, #340]	; (8002c80 <_ZN9AppMotion16MotionController5startEv+0x174>)
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	f000 fd2d 	bl	800358c <_ZN9AppMotion5ServoC1EP17TIM_HandleTypeDefmmmm>
	this->servo = new Servo(&htim1, TIM_CHANNEL_1, CENTER_POS_PWM - LEFT_DELTA,
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	60dc      	str	r4, [r3, #12]
	this->lmotor = new Motor(&htim8, TIM_CHANNEL_1, GPIOA, GPIOA, GPIO_PIN_5,
	GPIO_PIN_4, 7199);
 8002b36:	2018      	movs	r0, #24
 8002b38:	f00b fbb0 	bl	800e29c <_Znwj>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	461c      	mov	r4, r3
 8002b40:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8002b44:	9303      	str	r3, [sp, #12]
 8002b46:	2310      	movs	r3, #16
 8002b48:	9302      	str	r3, [sp, #8]
 8002b4a:	2320      	movs	r3, #32
 8002b4c:	9301      	str	r3, [sp, #4]
 8002b4e:	4b4d      	ldr	r3, [pc, #308]	; (8002c84 <_ZN9AppMotion16MotionController5startEv+0x178>)
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	4b4c      	ldr	r3, [pc, #304]	; (8002c84 <_ZN9AppMotion16MotionController5startEv+0x178>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	494c      	ldr	r1, [pc, #304]	; (8002c88 <_ZN9AppMotion16MotionController5startEv+0x17c>)
 8002b58:	4620      	mov	r0, r4
 8002b5a:	f000 fd69 	bl	8003630 <_ZN9AppMotion5MotorC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefS4_ttm>
	this->lmotor = new Motor(&htim8, TIM_CHANNEL_1, GPIOA, GPIOA, GPIO_PIN_5,
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	605c      	str	r4, [r3, #4]
	this->rmotor = new Motor(&htim8, TIM_CHANNEL_2, GPIOA, GPIOA, GPIO_PIN_2,
	GPIO_PIN_3, 7199);
 8002b62:	2018      	movs	r0, #24
 8002b64:	f00b fb9a 	bl	800e29c <_Znwj>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	461c      	mov	r4, r3
 8002b6c:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8002b70:	9303      	str	r3, [sp, #12]
 8002b72:	2308      	movs	r3, #8
 8002b74:	9302      	str	r3, [sp, #8]
 8002b76:	2304      	movs	r3, #4
 8002b78:	9301      	str	r3, [sp, #4]
 8002b7a:	4b42      	ldr	r3, [pc, #264]	; (8002c84 <_ZN9AppMotion16MotionController5startEv+0x178>)
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	4b41      	ldr	r3, [pc, #260]	; (8002c84 <_ZN9AppMotion16MotionController5startEv+0x178>)
 8002b80:	2204      	movs	r2, #4
 8002b82:	4941      	ldr	r1, [pc, #260]	; (8002c88 <_ZN9AppMotion16MotionController5startEv+0x17c>)
 8002b84:	4620      	mov	r0, r4
 8002b86:	f000 fd53 	bl	8003630 <_ZN9AppMotion5MotorC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefS4_ttm>
	this->rmotor = new Motor(&htim8, TIM_CHANNEL_2, GPIOA, GPIOA, GPIO_PIN_2,
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	609c      	str	r4, [r3, #8]
	float pid_param_right[3] = { 3.1, 0.0, 0.1 };
 8002b8e:	4a3f      	ldr	r2, [pc, #252]	; (8002c8c <_ZN9AppMotion16MotionController5startEv+0x180>)
 8002b90:	f107 0318 	add.w	r3, r7, #24
 8002b94:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float pid_param_sync[3] = { 5, 0, 1 };
 8002b9a:	4a3d      	ldr	r2, [pc, #244]	; (8002c90 <_ZN9AppMotion16MotionController5startEv+0x184>)
 8002b9c:	f107 030c 	add.w	r3, r7, #12
 8002ba0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ba2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	PID_init(&this->left_pid, PID_POSITION, pid_param_right, 5000, 4000);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	3318      	adds	r3, #24
 8002baa:	f107 0218 	add.w	r2, r7, #24
 8002bae:	eddf 0a39 	vldr	s1, [pc, #228]	; 8002c94 <_ZN9AppMotion16MotionController5startEv+0x188>
 8002bb2:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8002c98 <_ZN9AppMotion16MotionController5startEv+0x18c>
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f001 feb2 	bl	8004922 <_Z8PID_initP12pid_type_defhPKfff>
	PID_init(&this->right_pid, PID_POSITION, pid_param_right, 5000, 4000);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	3368      	adds	r3, #104	; 0x68
 8002bc2:	f107 0218 	add.w	r2, r7, #24
 8002bc6:	eddf 0a33 	vldr	s1, [pc, #204]	; 8002c94 <_ZN9AppMotion16MotionController5startEv+0x188>
 8002bca:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8002c98 <_ZN9AppMotion16MotionController5startEv+0x18c>
 8002bce:	2100      	movs	r1, #0
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f001 fea6 	bl	8004922 <_Z8PID_initP12pid_type_defhPKfff>
	PID_init(&this->sync_left_pid, 0, pid_param_sync, 1000, 1000);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	33b8      	adds	r3, #184	; 0xb8
 8002bda:	f107 020c 	add.w	r2, r7, #12
 8002bde:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8002c9c <_ZN9AppMotion16MotionController5startEv+0x190>
 8002be2:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8002c9c <_ZN9AppMotion16MotionController5startEv+0x190>
 8002be6:	2100      	movs	r1, #0
 8002be8:	4618      	mov	r0, r3
 8002bea:	f001 fe9a 	bl	8004922 <_Z8PID_initP12pid_type_defhPKfff>
	PID_init(&this->sync_right_pid, 0, pid_param_sync, 1000, 1000);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002bf4:	f107 020c 	add.w	r2, r7, #12
 8002bf8:	eddf 0a28 	vldr	s1, [pc, #160]	; 8002c9c <_ZN9AppMotion16MotionController5startEv+0x190>
 8002bfc:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8002c9c <_ZN9AppMotion16MotionController5startEv+0x190>
 8002c00:	2100      	movs	r1, #0
 8002c02:	4618      	mov	r0, r3
 8002c04:	f001 fe8d 	bl	8004922 <_Z8PID_initP12pid_type_defhPKfff>

	this->lencoder = new Encoder(&htim2, TIM_CHANNEL_ALL);
 8002c08:	2008      	movs	r0, #8
 8002c0a:	f00b fb47 	bl	800e29c <_Znwj>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	461c      	mov	r4, r3
 8002c12:	223c      	movs	r2, #60	; 0x3c
 8002c14:	4922      	ldr	r1, [pc, #136]	; (8002ca0 <_ZN9AppMotion16MotionController5startEv+0x194>)
 8002c16:	4620      	mov	r0, r4
 8002c18:	f000 fe03 	bl	8003822 <_ZN9AppMotion7EncoderC1EP17TIM_HandleTypeDefm>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	611c      	str	r4, [r3, #16]
	this->rencoder = new Encoder(&htim3, TIM_CHANNEL_ALL);
 8002c20:	2008      	movs	r0, #8
 8002c22:	f00b fb3b 	bl	800e29c <_Znwj>
 8002c26:	4603      	mov	r3, r0
 8002c28:	461c      	mov	r4, r3
 8002c2a:	223c      	movs	r2, #60	; 0x3c
 8002c2c:	491d      	ldr	r1, [pc, #116]	; (8002ca4 <_ZN9AppMotion16MotionController5startEv+0x198>)
 8002c2e:	4620      	mov	r0, r4
 8002c30:	f000 fdf7 	bl	8003822 <_ZN9AppMotion7EncoderC1EP17TIM_HandleTypeDefm>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	615c      	str	r4, [r3, #20]
	emergency = false;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	instance_wrapper *wrapper_instance = new instance_wrapper();
 8002c40:	2008      	movs	r0, #8
 8002c42:	f00b fb2b 	bl	800e29c <_Znwj>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	605a      	str	r2, [r3, #4]
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24
	wrapper_instance->ctx = ctx;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	601a      	str	r2, [r3, #0]
	wrapper_instance->i = this;
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	605a      	str	r2, [r3, #4]
	this->ctx->runner = osThreadNew(
			(osThreadFunc_t) MotionController::motionTask, wrapper_instance,
			&(ctx->attr));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	1d1a      	adds	r2, r3, #4
	this->ctx->runner = osThreadNew(
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681c      	ldr	r4, [r3, #0]
 8002c6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c6c:	480e      	ldr	r0, [pc, #56]	; (8002ca8 <_ZN9AppMotion16MotionController5startEv+0x19c>)
 8002c6e:	f008 fbf5 	bl	800b45c <osThreadNew>
 8002c72:	4603      	mov	r3, r0
 8002c74:	6023      	str	r3, [r4, #0]
	return;
 8002c76:	bf00      	nop
}
 8002c78:	372c      	adds	r7, #44	; 0x2c
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd90      	pop	{r4, r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	2000096c 	.word	0x2000096c
 8002c84:	40020000 	.word	0x40020000
 8002c88:	20000a44 	.word	0x20000a44
 8002c8c:	080129c0 	.word	0x080129c0
 8002c90:	080129cc 	.word	0x080129cc
 8002c94:	457a0000 	.word	0x457a0000
 8002c98:	459c4000 	.word	0x459c4000
 8002c9c:	447a0000 	.word	0x447a0000
 8002ca0:	200009b4 	.word	0x200009b4
 8002ca4:	200009fc 	.word	0x200009fc
 8002ca8:	08002cad 	.word	0x08002cad

08002cac <_ZN9AppMotion16MotionController10motionTaskEPv>:

void MotionController::motionTask(void *pv) {
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b090      	sub	sp, #64	; 0x40
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]

	// workaround section START
	instance_wrapper *wrapper = static_cast<instance_wrapper*>(pv);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
	u_ctx *ctx = wrapper->ctx;
 8002cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	63bb      	str	r3, [r7, #56]	; 0x38
	MotionController *self = wrapper->i;
 8002cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	637b      	str	r3, [r7, #52]	; 0x34

	Motor *lmotor = self->lmotor;
 8002cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	633b      	str	r3, [r7, #48]	; 0x30
	Motor *rmotor = self->rmotor;
 8002cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	62fb      	str	r3, [r7, #44]	; 0x2c
	Servo *servo = self->servo;
 8002cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	62bb      	str	r3, [r7, #40]	; 0x28
	osDelay(4500);
 8002cd6:	f241 1094 	movw	r0, #4500	; 0x1194
 8002cda:	f008 fc73 	bl	800b5c4 <osDelay>
	servo->turnLeft();
 8002cde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ce0:	f000 fc73 	bl	80035ca <_ZN9AppMotion5Servo8turnLeftEv>
		servo->turnRight();
 8002ce4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ce6:	f000 fc81 	bl	80035ec <_ZN9AppMotion5Servo9turnRightEv>
		servo->turnFront();
 8002cea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cec:	f000 fc8f 	bl	800360e <_ZN9AppMotion5Servo9turnFrontEv>

	/* workaround section END. henceforth refer to any "this" as "self" */
	for (;;) {
		osDelay(50);
 8002cf0:	2032      	movs	r0, #50	; 0x32
 8002cf2:	f008 fc67 	bl	800b5c4 <osDelay>
		is_task_alive_struct.motn = true;
 8002cf6:	4b37      	ldr	r3, [pc, #220]	; (8002dd4 <_ZN9AppMotion16MotionController10motionTaskEPv+0x128>)
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	70da      	strb	r2, [r3, #3]

		//osThreadYield();
		if (osMessageQueueGetCount(ctx->mailbox.queue) > 0) {
 8002cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d00:	4618      	mov	r0, r3
 8002d02:	f008 fdab 	bl	800b85c <osMessageQueueGetCount>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	bf14      	ite	ne
 8002d0c:	2301      	movne	r3, #1
 8002d0e:	2300      	moveq	r3, #0
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d058      	beq.n	8002dc8 <_ZN9AppMotion16MotionController10motionTaskEPv+0x11c>
			AppParser::MOTION_PKT_t pkt;
			osMessageQueueGet(ctx->mailbox.queue, &pkt, 0, 5);
 8002d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d18:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002d1a:	f107 011c 	add.w	r1, r7, #28
 8002d1e:	2305      	movs	r3, #5
 8002d20:	2200      	movs	r2, #0
 8002d22:	f008 fd3d 	bl	800b7a0 <osMessageQueueGet>
			char buffer[20] = { 0 };
 8002d26:	2300      	movs	r3, #0
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	f107 030c 	add.w	r3, r7, #12
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	605a      	str	r2, [r3, #4]
 8002d34:	609a      	str	r2, [r3, #8]
 8002d36:	60da      	str	r2, [r3, #12]
			sprintf((char*) &buffer, "cmd:%ld, arg:%ld\r\n", (uint32_t) pkt.cmd,
 8002d38:	69fa      	ldr	r2, [r7, #28]
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	f107 0008 	add.w	r0, r7, #8
 8002d40:	4925      	ldr	r1, [pc, #148]	; (8002dd8 <_ZN9AppMotion16MotionController10motionTaskEPv+0x12c>)
 8002d42:	f00d fcc5 	bl	80106d0 <siprintf>
					pkt.arg);
			//HAL_UART_Transmit(&huart3, (uint8_t*) buffer, sizeof(buffer), 10);
			if (pkt.cmd == AppParser::MOTION_CMD::MOVE_FWD) {
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d109      	bne.n	8002d60 <_ZN9AppMotion16MotionController10motionTaskEPv+0xb4>
				servo->turnFront();
 8002d4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d4e:	f000 fc5e 	bl	800360e <_ZN9AppMotion5Servo9turnFrontEv>

				self->move(true, pkt.arg, 15);
 8002d52:	6a3a      	ldr	r2, [r7, #32]
 8002d54:	230f      	movs	r3, #15
 8002d56:	2101      	movs	r1, #1
 8002d58:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002d5a:	f000 f841 	bl	8002de0 <_ZN9AppMotion16MotionController4moveEbmm>
 8002d5e:	e033      	b.n	8002dc8 <_ZN9AppMotion16MotionController10motionTaskEPv+0x11c>

			} else if (pkt.cmd == AppParser::MOTION_CMD::MOVE_BWD) {
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d109      	bne.n	8002d7a <_ZN9AppMotion16MotionController10motionTaskEPv+0xce>
				servo->turnFront();
 8002d66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d68:	f000 fc51 	bl	800360e <_ZN9AppMotion5Servo9turnFrontEv>

				self->move(false, pkt.arg, 15);
 8002d6c:	6a3a      	ldr	r2, [r7, #32]
 8002d6e:	230f      	movs	r3, #15
 8002d70:	2100      	movs	r1, #0
 8002d72:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002d74:	f000 f834 	bl	8002de0 <_ZN9AppMotion16MotionController4moveEbmm>
 8002d78:	e026      	b.n	8002dc8 <_ZN9AppMotion16MotionController10motionTaskEPv+0x11c>

			} else if (pkt.cmd == AppParser::MOTION_CMD::MOVE_LEFT_FWD) {
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	2b03      	cmp	r3, #3
 8002d7e:	d106      	bne.n	8002d8e <_ZN9AppMotion16MotionController10motionTaskEPv+0xe2>
				self->turn(false, true, pkt.arg);
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	2201      	movs	r2, #1
 8002d84:	2100      	movs	r1, #0
 8002d86:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002d88:	f000 fa6a 	bl	8003260 <_ZN9AppMotion16MotionController4turnEbbm>
 8002d8c:	e01c      	b.n	8002dc8 <_ZN9AppMotion16MotionController10motionTaskEPv+0x11c>

			} else if (pkt.cmd == AppParser::MOTION_CMD::MOVE_RIGHT_FWD)
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d106      	bne.n	8002da2 <_ZN9AppMotion16MotionController10motionTaskEPv+0xf6>
				self->turn(true, true, pkt.arg);
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	2201      	movs	r2, #1
 8002d98:	2101      	movs	r1, #1
 8002d9a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002d9c:	f000 fa60 	bl	8003260 <_ZN9AppMotion16MotionController4turnEbbm>
 8002da0:	e012      	b.n	8002dc8 <_ZN9AppMotion16MotionController10motionTaskEPv+0x11c>

			else if (pkt.cmd == AppParser::MOTION_CMD::MOVE_LEFT_BWD) {
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	2b05      	cmp	r3, #5
 8002da6:	d106      	bne.n	8002db6 <_ZN9AppMotion16MotionController10motionTaskEPv+0x10a>
				self->turn(false, false, pkt.arg);
 8002da8:	6a3b      	ldr	r3, [r7, #32]
 8002daa:	2200      	movs	r2, #0
 8002dac:	2100      	movs	r1, #0
 8002dae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002db0:	f000 fa56 	bl	8003260 <_ZN9AppMotion16MotionController4turnEbbm>
 8002db4:	e008      	b.n	8002dc8 <_ZN9AppMotion16MotionController10motionTaskEPv+0x11c>

			} else if (pkt.cmd == AppParser::MOTION_CMD::MOVE_RIGHT_BWD)
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	2b04      	cmp	r3, #4
 8002dba:	d105      	bne.n	8002dc8 <_ZN9AppMotion16MotionController10motionTaskEPv+0x11c>
				self->turn(true, false, pkt.arg);
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002dc4:	f000 fa4c 	bl	8003260 <_ZN9AppMotion16MotionController4turnEbbm>
		}
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 8002dc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002dcc:	4803      	ldr	r0, [pc, #12]	; (8002ddc <_ZN9AppMotion16MotionController10motionTaskEPv+0x130>)
 8002dce:	f003 ffe6 	bl	8006d9e <HAL_GPIO_TogglePin>

	}
 8002dd2:	e78d      	b.n	8002cf0 <_ZN9AppMotion16MotionController10motionTaskEPv+0x44>
 8002dd4:	20000684 	.word	0x20000684
 8002dd8:	080129d8 	.word	0x080129d8
 8002ddc:	40021000 	.word	0x40021000

08002de0 <_ZN9AppMotion16MotionController4moveEbmm>:
}


void MotionController::move(bool isFwd, uint32_t arg, uint32_t speed) {
 8002de0:	b5b0      	push	{r4, r5, r7, lr}
 8002de2:	b09c      	sub	sp, #112	; 0x70
 8002de4:	af02      	add	r7, sp, #8
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	607a      	str	r2, [r7, #4]
 8002dea:	603b      	str	r3, [r7, #0]
 8002dec:	460b      	mov	r3, r1
 8002dee:	72fb      	strb	r3, [r7, #11]
	emergency = false;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	servo->turnFront();
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 fc06 	bl	800360e <_ZN9AppMotion5Servo9turnFrontEv>
	isFwd ? lmotor->setForward() : lmotor->setBackward();
 8002e02:	7afb      	ldrb	r3, [r7, #11]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d005      	beq.n	8002e14 <_ZN9AppMotion16MotionController4moveEbmm+0x34>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f000 fcd8 	bl	80037c2 <_ZN9AppMotion5Motor10setForwardEv>
 8002e12:	e004      	b.n	8002e1e <_ZN9AppMotion16MotionController4moveEbmm+0x3e>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f000 fcea 	bl	80037f2 <_ZN9AppMotion5Motor11setBackwardEv>
	isFwd ? rmotor->setForward() : rmotor->setBackward();
 8002e1e:	7afb      	ldrb	r3, [r7, #11]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d005      	beq.n	8002e30 <_ZN9AppMotion16MotionController4moveEbmm+0x50>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 fcca 	bl	80037c2 <_ZN9AppMotion5Motor10setForwardEv>
 8002e2e:	e004      	b.n	8002e3a <_ZN9AppMotion16MotionController4moveEbmm+0x5a>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f000 fcdc 	bl	80037f2 <_ZN9AppMotion5Motor11setBackwardEv>
	lmotor->setSpeed(speed);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	6839      	ldr	r1, [r7, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f000 fc1b 	bl	800367c <_ZN9AppMotion5Motor8setSpeedEm>
	rmotor->setSpeed(speed);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	6839      	ldr	r1, [r7, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 fc15 	bl	800367c <_ZN9AppMotion5Motor8setSpeedEm>
	uint32_t timeStart = HAL_GetTick();
 8002e52:	f002 fcdb 	bl	800580c <HAL_GetTick>
 8002e56:	6478      	str	r0, [r7, #68]	; 0x44
	uint32_t l_encoder_count = lencoder->getCount();
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f000 fcf5 	bl	800384c <_ZN9AppMotion7Encoder8getCountEv>
 8002e62:	6678      	str	r0, [r7, #100]	; 0x64
	uint32_t r_encoder_count = rencoder->getCount();
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 fcef 	bl	800384c <_ZN9AppMotion7Encoder8getCountEv>
 8002e6e:	6638      	str	r0, [r7, #96]	; 0x60
	double target = (double) arg / DISTANCE_PER_ENCODER_PULSE;
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f7fd fb47 	bl	8000504 <__aeabi_ui2d>
 8002e76:	a3f8      	add	r3, pc, #992	; (adr r3, 8003258 <_ZN9AppMotion16MotionController4moveEbmm+0x478>)
 8002e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7c:	f7fd fce6 	bl	800084c <__aeabi_ddiv>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	double cur_left = 0, cur_right = 0;
 8002e88:	f04f 0200 	mov.w	r2, #0
 8002e8c:	f04f 0300 	mov.w	r3, #0
 8002e90:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8002e94:	f04f 0200 	mov.w	r2, #0
 8002e98:	f04f 0300 	mov.w	r3, #0
 8002e9c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	float count_left = 0, count_right = 0;
 8002ea0:	f04f 0300 	mov.w	r3, #0
 8002ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ea6:	f04f 0300 	mov.w	r3, #0
 8002eaa:	633b      	str	r3, [r7, #48]	; 0x30
	double speed_error = 0;
 8002eac:	f04f 0200 	mov.w	r2, #0
 8002eb0:	f04f 0300 	mov.w	r3, #0
 8002eb4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	do {

		count_left = (double) lencoder->getDelta(l_encoder_count,
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	691c      	ldr	r4, [r3, #16]
				lencoder->getCount());
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	691b      	ldr	r3, [r3, #16]
		count_left = (double) lencoder->getDelta(l_encoder_count,
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f000 fcc3 	bl	800384c <_ZN9AppMotion7Encoder8getCountEv>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	461a      	mov	r2, r3
 8002eca:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002ecc:	4620      	mov	r0, r4
 8002ece:	f000 fccb 	bl	8003868 <_ZN9AppMotion7Encoder8getDeltaEmm>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7fd fb15 	bl	8000504 <__aeabi_ui2d>
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	4610      	mov	r0, r2
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	f7fd fe61 	bl	8000ba8 <__aeabi_d2f>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	637b      	str	r3, [r7, #52]	; 0x34
		count_right = (double) rencoder->getDelta(r_encoder_count,
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	695c      	ldr	r4, [r3, #20]
				rencoder->getCount());
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	695b      	ldr	r3, [r3, #20]
		count_right = (double) rencoder->getDelta(r_encoder_count,
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 fcaa 	bl	800384c <_ZN9AppMotion7Encoder8getCountEv>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	461a      	mov	r2, r3
 8002efc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002efe:	4620      	mov	r0, r4
 8002f00:	f000 fcb2 	bl	8003868 <_ZN9AppMotion7Encoder8getDeltaEmm>
 8002f04:	4603      	mov	r3, r0
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fd fafc 	bl	8000504 <__aeabi_ui2d>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	460b      	mov	r3, r1
 8002f10:	4610      	mov	r0, r2
 8002f12:	4619      	mov	r1, r3
 8002f14:	f7fd fe48 	bl	8000ba8 <__aeabi_d2f>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	633b      	str	r3, [r7, #48]	; 0x30

		cur_left += count_left;
 8002f1c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f1e:	f7fd fb13 	bl	8000548 <__aeabi_f2d>
 8002f22:	4602      	mov	r2, r0
 8002f24:	460b      	mov	r3, r1
 8002f26:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002f2a:	f7fd f9af 	bl	800028c <__adddf3>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	460b      	mov	r3, r1
 8002f32:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		cur_right += count_right;
 8002f36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f38:	f7fd fb06 	bl	8000548 <__aeabi_f2d>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002f44:	f7fd f9a2 	bl	800028c <__adddf3>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		speed_error += (count_left - count_right);
 8002f50:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002f54:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002f58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f5c:	ee17 0a90 	vmov	r0, s15
 8002f60:	f7fd faf2 	bl	8000548 <__aeabi_f2d>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002f6c:	f7fd f98e 	bl	800028c <__adddf3>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		if (cur_left > target - 2000 || cur_right > target - 2000) {
 8002f78:	f04f 0200 	mov.w	r2, #0
 8002f7c:	4bb0      	ldr	r3, [pc, #704]	; (8003240 <_ZN9AppMotion16MotionController4moveEbmm+0x460>)
 8002f7e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002f82:	f7fd f981 	bl	8000288 <__aeabi_dsub>
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002f8e:	f7fd fdc3 	bl	8000b18 <__aeabi_dcmpgt>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10f      	bne.n	8002fb8 <_ZN9AppMotion16MotionController4moveEbmm+0x1d8>
 8002f98:	f04f 0200 	mov.w	r2, #0
 8002f9c:	4ba8      	ldr	r3, [pc, #672]	; (8003240 <_ZN9AppMotion16MotionController4moveEbmm+0x460>)
 8002f9e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002fa2:	f7fd f971 	bl	8000288 <__aeabi_dsub>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	460b      	mov	r3, r1
 8002faa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002fae:	f7fd fdb3 	bl	8000b18 <__aeabi_dcmpgt>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d048      	beq.n	800304a <_ZN9AppMotion16MotionController4moveEbmm+0x26a>
			lmotor->setSpeed(map(target - cur_left, 2000, 330, 30, 12));
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	685c      	ldr	r4, [r3, #4]
 8002fbc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002fc0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002fc4:	f7fd f960 	bl	8000288 <__aeabi_dsub>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4610      	mov	r0, r2
 8002fce:	4619      	mov	r1, r3
 8002fd0:	f7fd fdea 	bl	8000ba8 <__aeabi_d2f>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	eeb2 2a08 	vmov.f32	s4, #40	; 0x41400000  12.0
 8002fda:	eef3 1a0e 	vmov.f32	s3, #62	; 0x41f00000  30.0
 8002fde:	ed9f 1a99 	vldr	s2, [pc, #612]	; 8003244 <_ZN9AppMotion16MotionController4moveEbmm+0x464>
 8002fe2:	eddf 0a99 	vldr	s1, [pc, #612]	; 8003248 <_ZN9AppMotion16MotionController4moveEbmm+0x468>
 8002fe6:	ee00 3a10 	vmov	s0, r3
 8002fea:	f7ff fd51 	bl	8002a90 <_ZN9AppMotion16MotionController3mapEfffff>
 8002fee:	eef0 7a40 	vmov.f32	s15, s0
 8002ff2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ff6:	ee17 1a90 	vmov	r1, s15
 8002ffa:	4620      	mov	r0, r4
 8002ffc:	f000 fb3e 	bl	800367c <_ZN9AppMotion5Motor8setSpeedEm>
			rmotor->setSpeed(map(target - cur_right, 2000, 330, 30, 12));
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	689c      	ldr	r4, [r3, #8]
 8003004:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003008:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800300c:	f7fd f93c 	bl	8000288 <__aeabi_dsub>
 8003010:	4602      	mov	r2, r0
 8003012:	460b      	mov	r3, r1
 8003014:	4610      	mov	r0, r2
 8003016:	4619      	mov	r1, r3
 8003018:	f7fd fdc6 	bl	8000ba8 <__aeabi_d2f>
 800301c:	4603      	mov	r3, r0
 800301e:	eeb2 2a08 	vmov.f32	s4, #40	; 0x41400000  12.0
 8003022:	eef3 1a0e 	vmov.f32	s3, #62	; 0x41f00000  30.0
 8003026:	ed9f 1a87 	vldr	s2, [pc, #540]	; 8003244 <_ZN9AppMotion16MotionController4moveEbmm+0x464>
 800302a:	eddf 0a87 	vldr	s1, [pc, #540]	; 8003248 <_ZN9AppMotion16MotionController4moveEbmm+0x468>
 800302e:	ee00 3a10 	vmov	s0, r3
 8003032:	f7ff fd2d 	bl	8002a90 <_ZN9AppMotion16MotionController3mapEfffff>
 8003036:	eef0 7a40 	vmov.f32	s15, s0
 800303a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800303e:	ee17 1a90 	vmov	r1, s15
 8003042:	4620      	mov	r0, r4
 8003044:	f000 fb1a 	bl	800367c <_ZN9AppMotion5Motor8setSpeedEm>
 8003048:	e0a1      	b.n	800318e <_ZN9AppMotion16MotionController4moveEbmm+0x3ae>
		} else {
			float pid_left = PID_calc(&this->left_pid, target - cur_left, target);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f103 0418 	add.w	r4, r3, #24
 8003050:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003054:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003058:	f7fd f916 	bl	8000288 <__aeabi_dsub>
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	4610      	mov	r0, r2
 8003062:	4619      	mov	r1, r3
 8003064:	f7fd fda0 	bl	8000ba8 <__aeabi_d2f>
 8003068:	4605      	mov	r5, r0
 800306a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800306e:	f7fd fd9b 	bl	8000ba8 <__aeabi_d2f>
 8003072:	4603      	mov	r3, r0
 8003074:	ee00 3a90 	vmov	s1, r3
 8003078:	ee00 5a10 	vmov	s0, r5
 800307c:	4620      	mov	r0, r4
 800307e:	f001 fca7 	bl	80049d0 <_Z8PID_calcP12pid_type_defff>
 8003082:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
			float pid_right = PID_calc(&this->right_pid, target - cur_right, target);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f103 0468 	add.w	r4, r3, #104	; 0x68
 800308c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003090:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003094:	f7fd f8f8 	bl	8000288 <__aeabi_dsub>
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	4610      	mov	r0, r2
 800309e:	4619      	mov	r1, r3
 80030a0:	f7fd fd82 	bl	8000ba8 <__aeabi_d2f>
 80030a4:	4605      	mov	r5, r0
 80030a6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80030aa:	f7fd fd7d 	bl	8000ba8 <__aeabi_d2f>
 80030ae:	4603      	mov	r3, r0
 80030b0:	ee00 3a90 	vmov	s1, r3
 80030b4:	ee00 5a10 	vmov	s0, r5
 80030b8:	4620      	mov	r0, r4
 80030ba:	f001 fc89 	bl	80049d0 <_Z8PID_calcP12pid_type_defff>
 80030be:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
			float pid_left_d = PID_calc(&this->sync_left_pid, speed_error, 0);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 80030c8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80030cc:	f7fd fd6c 	bl	8000ba8 <__aeabi_d2f>
 80030d0:	4603      	mov	r3, r0
 80030d2:	eddf 0a5e 	vldr	s1, [pc, #376]	; 800324c <_ZN9AppMotion16MotionController4moveEbmm+0x46c>
 80030d6:	ee00 3a10 	vmov	s0, r3
 80030da:	4620      	mov	r0, r4
 80030dc:	f001 fc78 	bl	80049d0 <_Z8PID_calcP12pid_type_defff>
 80030e0:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
			float pid_right_d = PID_calc(&this->sync_right_pid, -speed_error, 0);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f503 7484 	add.w	r4, r3, #264	; 0x108
 80030ea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80030ee:	f7fd fd5b 	bl	8000ba8 <__aeabi_d2f>
 80030f2:	4603      	mov	r3, r0
 80030f4:	ee07 3a90 	vmov	s15, r3
 80030f8:	eef1 7a67 	vneg.f32	s15, s15
 80030fc:	eddf 0a53 	vldr	s1, [pc, #332]	; 800324c <_ZN9AppMotion16MotionController4moveEbmm+0x46c>
 8003100:	eeb0 0a67 	vmov.f32	s0, s15
 8003104:	4620      	mov	r0, r4
 8003106:	f001 fc63 	bl	80049d0 <_Z8PID_calcP12pid_type_defff>
 800310a:	ed87 0a08 	vstr	s0, [r7, #32]
			lmotor->_setDutyCycleVal((uint32_t) ((pid_left + pid_left_d ) > 1000 ? (pid_left + pid_left_d ) : 1000)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003116:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800311a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800311e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8003250 <_ZN9AppMotion16MotionController4moveEbmm+0x470>
 8003122:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800312a:	dd0a      	ble.n	8003142 <_ZN9AppMotion16MotionController4moveEbmm+0x362>
 800312c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003130:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003134:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003138:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800313c:	ee17 2a90 	vmov	r2, s15
 8003140:	e001      	b.n	8003146 <_ZN9AppMotion16MotionController4moveEbmm+0x366>
 8003142:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003146:	4611      	mov	r1, r2
 8003148:	4618      	mov	r0, r3
 800314a:	f000 fad7 	bl	80036fc <_ZN9AppMotion5Motor16_setDutyCycleValEm>
					);
			rmotor->_setDutyCycleVal((uint32_t) ((pid_right + pid_right_d) > 1000 ? (pid_right + pid_right_d)  : 1000)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003156:	edd7 7a08 	vldr	s15, [r7, #32]
 800315a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800315e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003250 <_ZN9AppMotion16MotionController4moveEbmm+0x470>
 8003162:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800316a:	dd0a      	ble.n	8003182 <_ZN9AppMotion16MotionController4moveEbmm+0x3a2>
 800316c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003170:	edd7 7a08 	vldr	s15, [r7, #32]
 8003174:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003178:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800317c:	ee17 2a90 	vmov	r2, s15
 8003180:	e001      	b.n	8003186 <_ZN9AppMotion16MotionController4moveEbmm+0x3a6>
 8003182:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003186:	4611      	mov	r1, r2
 8003188:	4618      	mov	r0, r3
 800318a:	f000 fab7 	bl	80036fc <_ZN9AppMotion5Motor16_setDutyCycleValEm>
					);
		}

		l_encoder_count = lencoder->getCount();
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	4618      	mov	r0, r3
 8003194:	f000 fb5a 	bl	800384c <_ZN9AppMotion7Encoder8getCountEv>
 8003198:	6678      	str	r0, [r7, #100]	; 0x64
		r_encoder_count = rencoder->getCount();
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 fb54 	bl	800384c <_ZN9AppMotion7Encoder8getCountEv>
 80031a4:	6638      	str	r0, [r7, #96]	; 0x60

		if ((cur_left > target && cur_right > target) || emergency)
 80031a6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80031aa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80031ae:	f7fd fcb3 	bl	8000b18 <__aeabi_dcmpgt>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d008      	beq.n	80031ca <_ZN9AppMotion16MotionController4moveEbmm+0x3ea>
 80031b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80031bc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80031c0:	f7fd fcaa 	bl	8000b18 <__aeabi_dcmpgt>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d108      	bne.n	80031dc <_ZN9AppMotion16MotionController4moveEbmm+0x3fc>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d103      	bne.n	80031dc <_ZN9AppMotion16MotionController4moveEbmm+0x3fc>
			break;

		osDelay(10);
 80031d4:	200a      	movs	r0, #10
 80031d6:	f008 f9f5 	bl	800b5c4 <osDelay>
 80031da:	e66d      	b.n	8002eb8 <_ZN9AppMotion16MotionController4moveEbmm+0xd8>

		//osThreadYield();

	} while (1);
	uint8_t buf[10] = { 0 };
 80031dc:	2300      	movs	r3, #0
 80031de:	617b      	str	r3, [r7, #20]
 80031e0:	f107 0318 	add.w	r3, r7, #24
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	809a      	strh	r2, [r3, #4]
	snprintf((char*) buf, sizeof(buf), "%4.0f", cur_left - cur_right);
 80031ea:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80031ee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80031f2:	f7fd f849 	bl	8000288 <__aeabi_dsub>
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	f107 0014 	add.w	r0, r7, #20
 80031fe:	e9cd 2300 	strd	r2, r3, [sp]
 8003202:	4a14      	ldr	r2, [pc, #80]	; (8003254 <_ZN9AppMotion16MotionController4moveEbmm+0x474>)
 8003204:	210a      	movs	r1, #10
 8003206:	f00d fa2f 	bl	8010668 <sniprintf>
	OLED_ShowString(85, 48, (uint8_t*) &buf);
 800320a:	f107 0314 	add.w	r3, r7, #20
 800320e:	461a      	mov	r2, r3
 8003210:	2130      	movs	r1, #48	; 0x30
 8003212:	2055      	movs	r0, #85	; 0x55
 8003214:	f7fe fc4a 	bl	8001aac <OLED_ShowString>
	OLED_Refresh_Gram();
 8003218:	f7fe f9fe 	bl	8001618 <OLED_Refresh_Gram>
	emergency = false;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	lmotor->halt();
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	4618      	mov	r0, r3
 800322a:	f000 fa9d 	bl	8003768 <_ZN9AppMotion5Motor4haltEv>
	rmotor->halt();
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	4618      	mov	r0, r3
 8003234:	f000 fa98 	bl	8003768 <_ZN9AppMotion5Motor4haltEv>
}
 8003238:	bf00      	nop
 800323a:	3768      	adds	r7, #104	; 0x68
 800323c:	46bd      	mov	sp, r7
 800323e:	bdb0      	pop	{r4, r5, r7, pc}
 8003240:	409f4000 	.word	0x409f4000
 8003244:	43a50000 	.word	0x43a50000
 8003248:	44fa0000 	.word	0x44fa0000
 800324c:	00000000 	.word	0x00000000
 8003250:	447a0000 	.word	0x447a0000
 8003254:	080129ec 	.word	0x080129ec
 8003258:	c177bd5f 	.word	0xc177bd5f
 800325c:	3f8acfcd 	.word	0x3f8acfcd

08003260 <_ZN9AppMotion16MotionController4turnEbbm>:

void MotionController::turn(bool isRight, bool isFwd, uint32_t arg) {
 8003260:	b590      	push	{r4, r7, lr}
 8003262:	b093      	sub	sp, #76	; 0x4c
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	607b      	str	r3, [r7, #4]
 800326a:	460b      	mov	r3, r1
 800326c:	72fb      	strb	r3, [r7, #11]
 800326e:	4613      	mov	r3, r2
 8003270:	72bb      	strb	r3, [r7, #10]
	emergency = false;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	isRight ? servo->turnRight() : servo->turnLeft();
 800327a:	7afb      	ldrb	r3, [r7, #11]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d005      	beq.n	800328c <_ZN9AppMotion16MotionController4turnEbbm+0x2c>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	4618      	mov	r0, r3
 8003286:	f000 f9b1 	bl	80035ec <_ZN9AppMotion5Servo9turnRightEv>
 800328a:	e004      	b.n	8003296 <_ZN9AppMotion16MotionController4turnEbbm+0x36>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	4618      	mov	r0, r3
 8003292:	f000 f99a 	bl	80035ca <_ZN9AppMotion5Servo8turnLeftEv>

	isFwd ? lmotor->setForward() : lmotor->setBackward();
 8003296:	7abb      	ldrb	r3, [r7, #10]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d005      	beq.n	80032a8 <_ZN9AppMotion16MotionController4turnEbbm+0x48>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f000 fa8e 	bl	80037c2 <_ZN9AppMotion5Motor10setForwardEv>
 80032a6:	e004      	b.n	80032b2 <_ZN9AppMotion16MotionController4turnEbbm+0x52>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f000 faa0 	bl	80037f2 <_ZN9AppMotion5Motor11setBackwardEv>
	isFwd ? rmotor->setForward() : rmotor->setBackward();
 80032b2:	7abb      	ldrb	r3, [r7, #10]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d005      	beq.n	80032c4 <_ZN9AppMotion16MotionController4turnEbbm+0x64>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 fa80 	bl	80037c2 <_ZN9AppMotion5Motor10setForwardEv>
 80032c2:	e004      	b.n	80032ce <_ZN9AppMotion16MotionController4turnEbbm+0x6e>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 fa92 	bl	80037f2 <_ZN9AppMotion5Motor11setBackwardEv>
	isRight ? lmotor->setSpeed(25) : lmotor->setSpeed(0);
 80032ce:	7afb      	ldrb	r3, [r7, #11]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d006      	beq.n	80032e2 <_ZN9AppMotion16MotionController4turnEbbm+0x82>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2119      	movs	r1, #25
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 f9ce 	bl	800367c <_ZN9AppMotion5Motor8setSpeedEm>
 80032e0:	e005      	b.n	80032ee <_ZN9AppMotion16MotionController4turnEbbm+0x8e>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2100      	movs	r1, #0
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 f9c7 	bl	800367c <_ZN9AppMotion5Motor8setSpeedEm>
	isRight ? rmotor->setSpeed(0) : rmotor->setSpeed(25);
 80032ee:	7afb      	ldrb	r3, [r7, #11]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d006      	beq.n	8003302 <_ZN9AppMotion16MotionController4turnEbbm+0xa2>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	2100      	movs	r1, #0
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 f9be 	bl	800367c <_ZN9AppMotion5Motor8setSpeedEm>
 8003300:	e005      	b.n	800330e <_ZN9AppMotion16MotionController4turnEbbm+0xae>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	2119      	movs	r1, #25
 8003308:	4618      	mov	r0, r3
 800330a:	f000 f9b7 	bl	800367c <_ZN9AppMotion5Motor8setSpeedEm>
	uint32_t timeNow = HAL_GetTick();
 800330e:	f002 fa7d 	bl	800580c <HAL_GetTick>
 8003312:	63f8      	str	r0, [r7, #60]	; 0x3c
	uint32_t timeStart = timeNow;
 8003314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003316:	63bb      	str	r3, [r7, #56]	; 0x38
	uint8_t buf[30] = { 0 };
 8003318:	2300      	movs	r3, #0
 800331a:	613b      	str	r3, [r7, #16]
 800331c:	f107 0314 	add.w	r3, r7, #20
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	605a      	str	r2, [r3, #4]
 8003326:	609a      	str	r2, [r3, #8]
 8003328:	60da      	str	r2, [r3, #12]
 800332a:	611a      	str	r2, [r3, #16]
 800332c:	615a      	str	r2, [r3, #20]
 800332e:	831a      	strh	r2, [r3, #24]
	float target_yaw = 0;
 8003330:	f04f 0300 	mov.w	r3, #0
 8003334:	647b      	str	r3, [r7, #68]	; 0x44
	float req = ((float) arg);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	ee07 3a90 	vmov	s15, r3
 800333c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003340:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float cur = sensor_data.yaw_abs; //[-179,180]
 8003344:	4b84      	ldr	r3, [pc, #528]	; (8003558 <_ZN9AppMotion16MotionController4turnEbbm+0x2f8>)
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	643b      	str	r3, [r7, #64]	; 0x40
	float prev_yaw = cur;
 800334a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800334c:	633b      	str	r3, [r7, #48]	; 0x30


	if((!isRight && isFwd) || (isRight && !isFwd) ) //increase
 800334e:	7afb      	ldrb	r3, [r7, #11]
 8003350:	f083 0301 	eor.w	r3, r3, #1
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d002      	beq.n	8003360 <_ZN9AppMotion16MotionController4turnEbbm+0x100>
 800335a:	7abb      	ldrb	r3, [r7, #10]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d108      	bne.n	8003372 <_ZN9AppMotion16MotionController4turnEbbm+0x112>
 8003360:	7afb      	ldrb	r3, [r7, #11]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d02c      	beq.n	80033c0 <_ZN9AppMotion16MotionController4turnEbbm+0x160>
 8003366:	7abb      	ldrb	r3, [r7, #10]
 8003368:	f083 0301 	eor.w	r3, r3, #1
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d026      	beq.n	80033c0 <_ZN9AppMotion16MotionController4turnEbbm+0x160>
	{
		if((req + cur) > 179) target_yaw = -180 + (req - (180 - cur));
 8003372:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003376:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800337a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800337e:	ed9f 7a77 	vldr	s14, [pc, #476]	; 800355c <_ZN9AppMotion16MotionController4turnEbbm+0x2fc>
 8003382:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800338a:	dd10      	ble.n	80033ae <_ZN9AppMotion16MotionController4turnEbbm+0x14e>
 800338c:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8003560 <_ZN9AppMotion16MotionController4turnEbbm+0x300>
 8003390:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003394:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003398:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800339c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033a0:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8003560 <_ZN9AppMotion16MotionController4turnEbbm+0x300>
 80033a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80033a8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 80033ac:	e02e      	b.n	800340c <_ZN9AppMotion16MotionController4turnEbbm+0x1ac>
		else target_yaw = req + cur;
 80033ae:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80033b2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80033b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ba:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		if((req + cur) > 179) target_yaw = -180 + (req - (180 - cur));
 80033be:	e025      	b.n	800340c <_ZN9AppMotion16MotionController4turnEbbm+0x1ac>
	}
	else
	{
		if((cur - req) < -179) target_yaw = 180 - (req + (-180 - cur));
 80033c0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80033c4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80033c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033cc:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8003564 <_ZN9AppMotion16MotionController4turnEbbm+0x304>
 80033d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d8:	d510      	bpl.n	80033fc <_ZN9AppMotion16MotionController4turnEbbm+0x19c>
 80033da:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8003568 <_ZN9AppMotion16MotionController4turnEbbm+0x308>
 80033de:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80033e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033e6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80033ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ee:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8003560 <_ZN9AppMotion16MotionController4turnEbbm+0x300>
 80033f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033f6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 80033fa:	e007      	b.n	800340c <_ZN9AppMotion16MotionController4turnEbbm+0x1ac>
		else target_yaw = cur - req;
 80033fc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003400:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003404:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003408:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	}

	do{
		if (abs(target_yaw - cur) < 29) {
 800340c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003410:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003414:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003418:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800341c:	ee17 3a90 	vmov	r3, s15
 8003420:	2b00      	cmp	r3, #0
 8003422:	bfb8      	it	lt
 8003424:	425b      	neglt	r3, r3
 8003426:	2b1c      	cmp	r3, #28
 8003428:	dc53      	bgt.n	80034d2 <_ZN9AppMotion16MotionController4turnEbbm+0x272>
			if(isRight) lmotor->setSpeed((uint32_t)map(abs(target_yaw - cur), 29, 0, 25, 15));
 800342a:	7afb      	ldrb	r3, [r7, #11]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d028      	beq.n	8003482 <_ZN9AppMotion16MotionController4turnEbbm+0x222>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	685c      	ldr	r4, [r3, #4]
 8003434:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003438:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800343c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003440:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003444:	ee17 3a90 	vmov	r3, s15
 8003448:	2b00      	cmp	r3, #0
 800344a:	bfb8      	it	lt
 800344c:	425b      	neglt	r3, r3
 800344e:	ee07 3a90 	vmov	s15, r3
 8003452:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003456:	eeb2 2a0e 	vmov.f32	s4, #46	; 0x41700000  15.0
 800345a:	eef3 1a09 	vmov.f32	s3, #57	; 0x41c80000  25.0
 800345e:	ed9f 1a43 	vldr	s2, [pc, #268]	; 800356c <_ZN9AppMotion16MotionController4turnEbbm+0x30c>
 8003462:	eef3 0a0d 	vmov.f32	s1, #61	; 0x41e80000  29.0
 8003466:	eeb0 0a67 	vmov.f32	s0, s15
 800346a:	f7ff fb11 	bl	8002a90 <_ZN9AppMotion16MotionController3mapEfffff>
 800346e:	eef0 7a40 	vmov.f32	s15, s0
 8003472:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003476:	ee17 1a90 	vmov	r1, s15
 800347a:	4620      	mov	r0, r4
 800347c:	f000 f8fe 	bl	800367c <_ZN9AppMotion5Motor8setSpeedEm>
 8003480:	e027      	b.n	80034d2 <_ZN9AppMotion16MotionController4turnEbbm+0x272>

			else rmotor->setSpeed((uint32_t)map(abs(target_yaw - cur), 29, 0, 25, 15));
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	689c      	ldr	r4, [r3, #8]
 8003486:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800348a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800348e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003492:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003496:	ee17 3a90 	vmov	r3, s15
 800349a:	2b00      	cmp	r3, #0
 800349c:	bfb8      	it	lt
 800349e:	425b      	neglt	r3, r3
 80034a0:	ee07 3a90 	vmov	s15, r3
 80034a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034a8:	eeb2 2a0e 	vmov.f32	s4, #46	; 0x41700000  15.0
 80034ac:	eef3 1a09 	vmov.f32	s3, #57	; 0x41c80000  25.0
 80034b0:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 800356c <_ZN9AppMotion16MotionController4turnEbbm+0x30c>
 80034b4:	eef3 0a0d 	vmov.f32	s1, #61	; 0x41e80000  29.0
 80034b8:	eeb0 0a67 	vmov.f32	s0, s15
 80034bc:	f7ff fae8 	bl	8002a90 <_ZN9AppMotion16MotionController3mapEfffff>
 80034c0:	eef0 7a40 	vmov.f32	s15, s0
 80034c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034c8:	ee17 1a90 	vmov	r1, s15
 80034cc:	4620      	mov	r0, r4
 80034ce:	f000 f8d5 	bl	800367c <_ZN9AppMotion5Motor8setSpeedEm>
		}


		timeNow = HAL_GetTick();
 80034d2:	f002 f99b 	bl	800580c <HAL_GetTick>
 80034d6:	63f8      	str	r0, [r7, #60]	; 0x3c
		cur = sensor_data.yaw_abs; //filter
 80034d8:	4b1f      	ldr	r3, [pc, #124]	; (8003558 <_ZN9AppMotion16MotionController4turnEbbm+0x2f8>)
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	643b      	str	r3, [r7, #64]	; 0x40

		prev_yaw = cur;
 80034de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034e0:	633b      	str	r3, [r7, #48]	; 0x30

		if (abs(target_yaw - cur) <= 1
 80034e2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80034e6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80034ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034f2:	ee17 3a90 	vmov	r3, s15
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	bfb8      	it	lt
 80034fa:	425b      	neglt	r3, r3
				|| (HAL_GetTick() - timeStart) > 10000 || emergency)
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	dd0d      	ble.n	800351c <_ZN9AppMotion16MotionController4turnEbbm+0x2bc>
 8003500:	f002 f984 	bl	800580c <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	f242 7210 	movw	r2, #10000	; 0x2710
 800350e:	4293      	cmp	r3, r2
 8003510:	d804      	bhi.n	800351c <_ZN9AppMotion16MotionController4turnEbbm+0x2bc>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <_ZN9AppMotion16MotionController4turnEbbm+0x2c0>
 800351c:	2301      	movs	r3, #1
 800351e:	e000      	b.n	8003522 <_ZN9AppMotion16MotionController4turnEbbm+0x2c2>
 8003520:	2300      	movs	r3, #0
		if (abs(target_yaw - cur) <= 1
 8003522:	2b00      	cmp	r3, #0
 8003524:	d105      	bne.n	8003532 <_ZN9AppMotion16MotionController4turnEbbm+0x2d2>
			break;

		osDelay(10);
 8003526:	200a      	movs	r0, #10
 8003528:	f008 f84c 	bl	800b5c4 <osDelay>
		osThreadYield(); // need to ensure yield for the sensortask
 800352c:	f008 f82a 	bl	800b584 <osThreadYield>
		if (abs(target_yaw - cur) < 29) {
 8003530:	e76c      	b.n	800340c <_ZN9AppMotion16MotionController4turnEbbm+0x1ac>
			break;
 8003532:	bf00      	nop

	} while (1);

	emergency = false;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	lmotor->halt();
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	4618      	mov	r0, r3
 8003542:	f000 f911 	bl	8003768 <_ZN9AppMotion5Motor4haltEv>
	rmotor->halt();
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	4618      	mov	r0, r3
 800354c:	f000 f90c 	bl	8003768 <_ZN9AppMotion5Motor4haltEv>
}
 8003550:	bf00      	nop
 8003552:	374c      	adds	r7, #76	; 0x4c
 8003554:	46bd      	mov	sp, r7
 8003556:	bd90      	pop	{r4, r7, pc}
 8003558:	2000065c 	.word	0x2000065c
 800355c:	43330000 	.word	0x43330000
 8003560:	43340000 	.word	0x43340000
 8003564:	c3330000 	.word	0xc3330000
 8003568:	c3340000 	.word	0xc3340000
 800356c:	00000000 	.word	0x00000000

08003570 <_ZN9AppMotion16MotionController13emergencyStopEv>:

void MotionController::emergencyStop() {
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
	emergency = true;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <_ZN9AppMotion5ServoC1EP17TIM_HandleTypeDefmmmm>:

Servo::Servo(TIM_HandleTypeDef *ctrl, uint32_t channel, uint32_t min,
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
 8003598:	603b      	str	r3, [r7, #0]
		uint32_t max, uint32_t center) {
	this->htimer = ctrl;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	68ba      	ldr	r2, [r7, #8]
 800359e:	601a      	str	r2, [r3, #0]
	this->channel = channel;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	605a      	str	r2, [r3, #4]
	this->MIN_PWM = min;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	60da      	str	r2, [r3, #12]
	this->MAX_PWM = max;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	611a      	str	r2, [r3, #16]
	this->CTR_PWM = center;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	69fa      	ldr	r2, [r7, #28]
 80035b6:	615a      	str	r2, [r3, #20]
	HAL_TIM_PWM_Start(ctrl, channel);
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	68b8      	ldr	r0, [r7, #8]
 80035bc:	f005 fb1c 	bl	8008bf8 <HAL_TIM_PWM_Start>
}
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <_ZN9AppMotion5Servo8turnLeftEv>:

void Servo::turnLeft() {
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b082      	sub	sp, #8
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
	this->htimer->Instance->CCR1 = MIN_PWM;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	68d2      	ldr	r2, [r2, #12]
 80035dc:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(TURN_DELAY_MS);
 80035de:	20fa      	movs	r0, #250	; 0xfa
 80035e0:	f007 fff0 	bl	800b5c4 <osDelay>

}
 80035e4:	bf00      	nop
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <_ZN9AppMotion5Servo9turnRightEv>:
void Servo::turnRight() {
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
	this->htimer->Instance->CCR1 = MAX_PWM;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6912      	ldr	r2, [r2, #16]
 80035fe:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(TURN_DELAY_MS);
 8003600:	20fa      	movs	r0, #250	; 0xfa
 8003602:	f007 ffdf 	bl	800b5c4 <osDelay>
}
 8003606:	bf00      	nop
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <_ZN9AppMotion5Servo9turnFrontEv>:

void Servo::turnFront() {
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
	this->htimer->Instance->CCR1 = CTR_PWM;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	6952      	ldr	r2, [r2, #20]
 8003620:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(TURN_DELAY_MS);
 8003622:	20fa      	movs	r0, #250	; 0xfa
 8003624:	f007 ffce 	bl	800b5c4 <osDelay>
}
 8003628:	bf00      	nop
 800362a:	3708      	adds	r7, #8
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <_ZN9AppMotion5MotorC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefS4_ttm>:

Motor::Motor(TIM_HandleTypeDef *ctrl, uint32_t channel, GPIO_TypeDef *gpioAPort,
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
 800363c:	603b      	str	r3, [r7, #0]
		GPIO_TypeDef *gpioBPort, uint16_t gpioApin, uint16_t gpioBpin,
		uint32_t pwm_period) {

	this->htimer = ctrl;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	601a      	str	r2, [r3, #0]
	this->channel = channel;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	605a      	str	r2, [r3, #4]
	this->period = pwm_period;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800364e:	609a      	str	r2, [r3, #8]
	this->gpioAPort = gpioAPort;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	60da      	str	r2, [r3, #12]
	this->gpioBPort = gpioBPort;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	611a      	str	r2, [r3, #16]
	this->gpioAPin = gpioApin;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	8bba      	ldrh	r2, [r7, #28]
 8003660:	829a      	strh	r2, [r3, #20]
	this->gpioBpin = gpioBpin;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8c3a      	ldrh	r2, [r7, #32]
 8003666:	82da      	strh	r2, [r3, #22]
	HAL_TIM_PWM_Start(ctrl, channel);
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	68b8      	ldr	r0, [r7, #8]
 800366c:	f005 fac4 	bl	8008bf8 <HAL_TIM_PWM_Start>

}
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
	...

0800367c <_ZN9AppMotion5Motor8setSpeedEm>:

bool Motor::setSpeed(uint32_t percent) {
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
	if (percent > 100)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	2b64      	cmp	r3, #100	; 0x64
 800368a:	d901      	bls.n	8003690 <_ZN9AppMotion5Motor8setSpeedEm+0x14>
		return false;
 800368c:	2300      	movs	r3, #0
 800368e:	e02d      	b.n	80036ec <_ZN9AppMotion5Motor8setSpeedEm+0x70>
	uint32_t value = this->period / 100 * percent;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	4a18      	ldr	r2, [pc, #96]	; (80036f8 <_ZN9AppMotion5Motor8setSpeedEm+0x7c>)
 8003696:	fba2 2303 	umull	r2, r3, r2, r3
 800369a:	095a      	lsrs	r2, r3, #5
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	fb02 f303 	mul.w	r3, r2, r3
 80036a2:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(this->htimer, this->channel, value);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d105      	bne.n	80036b8 <_ZN9AppMotion5Motor8setSpeedEm+0x3c>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	635a      	str	r2, [r3, #52]	; 0x34
 80036b6:	e018      	b.n	80036ea <_ZN9AppMotion5Motor8setSpeedEm+0x6e>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	2b04      	cmp	r3, #4
 80036be:	d105      	bne.n	80036cc <_ZN9AppMotion5Motor8setSpeedEm+0x50>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	639a      	str	r2, [r3, #56]	; 0x38
 80036ca:	e00e      	b.n	80036ea <_ZN9AppMotion5Motor8setSpeedEm+0x6e>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d105      	bne.n	80036e0 <_ZN9AppMotion5Motor8setSpeedEm+0x64>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	63da      	str	r2, [r3, #60]	; 0x3c
 80036de:	e004      	b.n	80036ea <_ZN9AppMotion5Motor8setSpeedEm+0x6e>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	641a      	str	r2, [r3, #64]	; 0x40
	return true;
 80036ea:	2301      	movs	r3, #1
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3714      	adds	r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	51eb851f 	.word	0x51eb851f

080036fc <_ZN9AppMotion5Motor16_setDutyCycleValEm>:

bool Motor::_setDutyCycleVal(uint32_t dc) {
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
	if (dc > this->period)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	d901      	bls.n	8003714 <_ZN9AppMotion5Motor16_setDutyCycleValEm+0x18>
		return false;
 8003710:	2300      	movs	r3, #0
 8003712:	e023      	b.n	800375c <_ZN9AppMotion5Motor16_setDutyCycleValEm+0x60>
		__HAL_TIM_SET_COMPARE(this->htimer, this->channel, dc);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d105      	bne.n	8003728 <_ZN9AppMotion5Motor16_setDutyCycleValEm+0x2c>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	635a      	str	r2, [r3, #52]	; 0x34
 8003726:	e018      	b.n	800375a <_ZN9AppMotion5Motor16_setDutyCycleValEm+0x5e>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2b04      	cmp	r3, #4
 800372e:	d105      	bne.n	800373c <_ZN9AppMotion5Motor16_setDutyCycleValEm+0x40>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	639a      	str	r2, [r3, #56]	; 0x38
 800373a:	e00e      	b.n	800375a <_ZN9AppMotion5Motor16_setDutyCycleValEm+0x5e>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	2b08      	cmp	r3, #8
 8003742:	d105      	bne.n	8003750 <_ZN9AppMotion5Motor16_setDutyCycleValEm+0x54>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	63da      	str	r2, [r3, #60]	; 0x3c
 800374e:	e004      	b.n	800375a <_ZN9AppMotion5Motor16_setDutyCycleValEm+0x5e>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	641a      	str	r2, [r3, #64]	; 0x40
	return true;
 800375a:	2301      	movs	r3, #1
}
 800375c:	4618      	mov	r0, r3
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <_ZN9AppMotion5Motor4haltEv>:

void Motor::halt() {
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(this->htimer, this->channel, 0);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d105      	bne.n	8003784 <_ZN9AppMotion5Motor4haltEv+0x1c>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2200      	movs	r2, #0
 8003780:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003782:	e018      	b.n	80037b6 <_ZN9AppMotion5Motor4haltEv+0x4e>
	__HAL_TIM_SET_COMPARE(this->htimer, this->channel, 0);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	2b04      	cmp	r3, #4
 800378a:	d105      	bne.n	8003798 <_ZN9AppMotion5Motor4haltEv+0x30>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2200      	movs	r2, #0
 8003794:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003796:	e00e      	b.n	80037b6 <_ZN9AppMotion5Motor4haltEv+0x4e>
	__HAL_TIM_SET_COMPARE(this->htimer, this->channel, 0);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	2b08      	cmp	r3, #8
 800379e:	d105      	bne.n	80037ac <_ZN9AppMotion5Motor4haltEv+0x44>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2200      	movs	r2, #0
 80037a8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80037aa:	e004      	b.n	80037b6 <_ZN9AppMotion5Motor4haltEv+0x4e>
	__HAL_TIM_SET_COMPARE(this->htimer, this->channel, 0);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2200      	movs	r2, #0
 80037b4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <_ZN9AppMotion5Motor10setForwardEv>:

void Motor::setForward() {
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b082      	sub	sp, #8
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->gpioAPort, this->gpioAPin, GPIO_PIN_RESET);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68d8      	ldr	r0, [r3, #12]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	8a9b      	ldrh	r3, [r3, #20]
 80037d2:	2200      	movs	r2, #0
 80037d4:	4619      	mov	r1, r3
 80037d6:	f003 fac9 	bl	8006d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(this->gpioBPort, this->gpioBpin, GPIO_PIN_SET);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6918      	ldr	r0, [r3, #16]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	8adb      	ldrh	r3, [r3, #22]
 80037e2:	2201      	movs	r2, #1
 80037e4:	4619      	mov	r1, r3
 80037e6:	f003 fac1 	bl	8006d6c <HAL_GPIO_WritePin>
}
 80037ea:	bf00      	nop
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <_ZN9AppMotion5Motor11setBackwardEv>:

void Motor::setBackward() {
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b082      	sub	sp, #8
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->gpioAPort, this->gpioAPin, GPIO_PIN_SET);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68d8      	ldr	r0, [r3, #12]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	8a9b      	ldrh	r3, [r3, #20]
 8003802:	2201      	movs	r2, #1
 8003804:	4619      	mov	r1, r3
 8003806:	f003 fab1 	bl	8006d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(this->gpioBPort, this->gpioBpin, GPIO_PIN_RESET);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6918      	ldr	r0, [r3, #16]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	8adb      	ldrh	r3, [r3, #22]
 8003812:	2200      	movs	r2, #0
 8003814:	4619      	mov	r1, r3
 8003816:	f003 faa9 	bl	8006d6c <HAL_GPIO_WritePin>
}
 800381a:	bf00      	nop
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <_ZN9AppMotion7EncoderC1EP17TIM_HandleTypeDefm>:

Encoder::Encoder(TIM_HandleTypeDef *ctrl, uint32_t channel) {
 8003822:	b580      	push	{r7, lr}
 8003824:	b084      	sub	sp, #16
 8003826:	af00      	add	r7, sp, #0
 8003828:	60f8      	str	r0, [r7, #12]
 800382a:	60b9      	str	r1, [r7, #8]
 800382c:	607a      	str	r2, [r7, #4]

	this->htimer = ctrl;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	601a      	str	r2, [r3, #0]
	this->channel = channel;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	605a      	str	r2, [r3, #4]
	HAL_TIM_Encoder_Start(ctrl, channel);
 800383a:	6879      	ldr	r1, [r7, #4]
 800383c:	68b8      	ldr	r0, [r7, #8]
 800383e:	f005 fb49 	bl	8008ed4 <HAL_TIM_Encoder_Start>

}
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <_ZN9AppMotion7Encoder8getCountEv>:

uint32_t Encoder::getCount(void) {
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
	return (uint32_t) __HAL_TIM_GET_COUNTER(this->htimer);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800385c:	4618      	mov	r0, r3
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <_ZN9AppMotion7Encoder8getDeltaEmm>:

uint32_t Encoder::getDelta(uint32_t ct1, uint32_t ct2) {
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
	if (__HAL_TIM_IS_TIM_COUNTING_DOWN(this->htimer)) {
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0310 	and.w	r3, r3, #16
 8003880:	2b10      	cmp	r3, #16
 8003882:	bf0c      	ite	eq
 8003884:	2301      	moveq	r3, #1
 8003886:	2300      	movne	r3, #0
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00e      	beq.n	80038ac <_ZN9AppMotion7Encoder8getDeltaEmm+0x44>
		if (ct2 <= ct1) {
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	429a      	cmp	r2, r3
 8003894:	d803      	bhi.n	800389e <_ZN9AppMotion7Encoder8getDeltaEmm+0x36>
			return ct1 - ct2;
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	e014      	b.n	80038c8 <_ZN9AppMotion7Encoder8getDeltaEmm+0x60>
		} else {
			return (65535 - ct2) + ct1;
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80038a8:	33ff      	adds	r3, #255	; 0xff
 80038aa:	e00d      	b.n	80038c8 <_ZN9AppMotion7Encoder8getDeltaEmm+0x60>
		}
	} else {
		if (ct2 >= ct1) {
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d303      	bcc.n	80038bc <_ZN9AppMotion7Encoder8getDeltaEmm+0x54>
			return ct2 - ct1;
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	e005      	b.n	80038c8 <_ZN9AppMotion7Encoder8getDeltaEmm+0x60>
		} else {
			return (65535 - ct1) + ct2;
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80038c6:	33ff      	adds	r3, #255	; 0xff
		}
	}
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <_ZN9AppParser8ListenerC1EP5u_ctx>:
bool Processor::_signal_obstr = false;
bool Processor::_obstr_txed = false;

static volatile BUF_CMP_t uartRxBuf[10];
static volatile BUF_CMP_t uartOKBuf[10];
Listener::Listener(u_ctx *ctx) {
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
	this->ctx = ctx;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	601a      	str	r2, [r3, #0]
}
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4618      	mov	r0, r3
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <_ZN9AppParser8ListenerD1Ev>:

Listener::~Listener() {
 80038f2:	b480      	push	{r7}
 80038f4:	b083      	sub	sp, #12
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
}
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4618      	mov	r0, r3
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <_ZN9AppParser8Listener6invokeEv>:
;
// not needed

/*! called from ISR */
volatile void Listener::invoke() {
 8003908:	b580      	push	{r7, lr}
 800390a:	b088      	sub	sp, #32
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
	//osMutexRelease(this->ctx->mailbox.lock);
	AppMessage_t msg;
	memcpy(&msg.buffer, (const BUF_CMP_t*) &uartRxBuf, 10);
 8003910:	4a0e      	ldr	r2, [pc, #56]	; (800394c <_ZN9AppParser8Listener6invokeEv+0x44>)
 8003912:	f107 030c 	add.w	r3, r7, #12
 8003916:	ca07      	ldmia	r2, {r0, r1, r2}
 8003918:	c303      	stmia	r3!, {r0, r1}
 800391a:	801a      	strh	r2, [r3, #0]
	memset((BUF_CMP_t*) &uartRxBuf, 0, 10);
 800391c:	220a      	movs	r2, #10
 800391e:	2100      	movs	r1, #0
 8003920:	480a      	ldr	r0, [pc, #40]	; (800394c <_ZN9AppParser8Listener6invokeEv+0x44>)
 8003922:	f00b ffed 	bl	800f900 <memset>
	osStatus_t tmp = osMessageQueuePut(ctx->mailbox.queue, &msg, 0, 0);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800392c:	f107 010c 	add.w	r1, r7, #12
 8003930:	2300      	movs	r3, #0
 8003932:	2200      	movs	r2, #0
 8003934:	f007 fed4 	bl	800b6e0 <osMessageQueuePut>
 8003938:	61f8      	str	r0, [r7, #28]
	//HAL_UART_Transmit(&huart3, (uint8_t *)ibuf, sizeof(ibuf), 10);
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 800393a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800393e:	4804      	ldr	r0, [pc, #16]	; (8003950 <_ZN9AppParser8Listener6invokeEv+0x48>)
 8003940:	f003 fa2d 	bl	8006d9e <HAL_GPIO_TogglePin>

	//HAL_UART_Receive_DMA(&huart3, (uint8_t *) aRxBuffer, 5);
}
 8003944:	bf00      	nop
 8003946:	3720      	adds	r7, #32
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	20000814 	.word	0x20000814
 8003950:	40021000 	.word	0x40021000

08003954 <_ZN9AppParser9ProcessorC1EP5u_ctxS2_>:

Processor::Processor(u_ctx *rx_ctx, u_ctx *tx_ctx) {
 8003954:	b590      	push	{r4, r7, lr}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
	this->this_ctx = rx_ctx;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	601a      	str	r2, [r3, #0]
	this->o_ctx = tx_ctx;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	605a      	str	r2, [r3, #4]
	this->this_ctx->mailbox.queue = osMessageQueueNew(10, sizeof(AppMessage_t),
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681c      	ldr	r4, [r3, #0]
 8003970:	2200      	movs	r2, #0
 8003972:	2110      	movs	r1, #16
 8003974:	200a      	movs	r0, #10
 8003976:	f007 fe40 	bl	800b5fa <osMessageQueueNew>
 800397a:	4603      	mov	r3, r0
 800397c:	62a3      	str	r3, [r4, #40]	; 0x28
	NULL);
}
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	4618      	mov	r0, r3
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	bd90      	pop	{r4, r7, pc}

08003988 <_ZN9AppParser9ProcessorD1Ev>:

Processor::~Processor() {
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
}
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4618      	mov	r0, r3
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
	...

080039a0 <_ZN9AppParser9Processor5startEv>:
void Processor::startImpl(void *_this) // hardfaults on queue for some reason so made static
		{
	//static_cast<Processor *>(_this)->processorTask();
}

void Processor::start(void) {
 80039a0:	b590      	push	{r4, r7, lr}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
	ctx_wrapper *wrapper_instance = new ctx_wrapper();
 80039a8:	2008      	movs	r0, #8
 80039aa:	f00a fc77 	bl	800e29c <_Znwj>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2200      	movs	r2, #0
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	2200      	movs	r2, #0
 80039b6:	605a      	str	r2, [r3, #4]
 80039b8:	60fb      	str	r3, [r7, #12]
	wrapper_instance->rx_ctx = this_ctx;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	601a      	str	r2, [r3, #0]
	wrapper_instance->tx_ctx = o_ctx;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	605a      	str	r2, [r3, #4]
// pass context information to the thread fn since there is some issue with making the fn a class instance.
// note that this_ctx refers to this class and o_ctx refers to the (o)ther class, i.e. the destination, MotionController
	this->this_ctx->runner = osThreadNew(
			(osThreadFunc_t) Processor::processorTask, wrapper_instance,
			&(this_ctx->attr));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	1d1a      	adds	r2, r3, #4
	this->this_ctx->runner = osThreadNew(
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681c      	ldr	r4, [r3, #0]
 80039d4:	68f9      	ldr	r1, [r7, #12]
 80039d6:	4804      	ldr	r0, [pc, #16]	; (80039e8 <_ZN9AppParser9Processor5startEv+0x48>)
 80039d8:	f007 fd40 	bl	800b45c <osThreadNew>
 80039dc:	4603      	mov	r3, r0
 80039de:	6023      	str	r3, [r4, #0]

	return;
 80039e0:	bf00      	nop
}
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd90      	pop	{r4, r7, pc}
 80039e8:	080039ed 	.word	0x080039ed

080039ec <_ZN9AppParser9Processor13processorTaskEPv>:

void Processor::processorTask(void *pv) {
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b08e      	sub	sp, #56	; 0x38
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart3, (BUF_CMP_t*) uartRxBuf, 10);
 80039f4:	220a      	movs	r2, #10
 80039f6:	4994      	ldr	r1, [pc, #592]	; (8003c48 <_ZN9AppParser9Processor13processorTaskEPv+0x25c>)
 80039f8:	4894      	ldr	r0, [pc, #592]	; (8003c4c <_ZN9AppParser9Processor13processorTaskEPv+0x260>)
 80039fa:	f006 fa91 	bl	8009f20 <HAL_UART_Receive_DMA>

	ctx_wrapper *wrapper = static_cast<ctx_wrapper*>(pv);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	633b      	str	r3, [r7, #48]	; 0x30

	// Access rx_ctx and tx_ctx pointers from the wrapper
	u_ctx *rx_ctx = wrapper->rx_ctx;
 8003a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	62fb      	str	r3, [r7, #44]	; 0x2c
	u_ctx *tx_ctx = wrapper->tx_ctx;
 8003a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	62bb      	str	r3, [r7, #40]	; 0x28

	for (;;) {

		//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
		is_task_alive_struct.proc = true;
 8003a0e:	4b90      	ldr	r3, [pc, #576]	; (8003c50 <_ZN9AppParser9Processor13processorTaskEPv+0x264>)
 8003a10:	2201      	movs	r2, #1
 8003a12:	701a      	strb	r2, [r3, #0]

		osDelay(50);
 8003a14:	2032      	movs	r0, #50	; 0x32
 8003a16:	f007 fdd5 	bl	800b5c4 <osDelay>
		osThreadYield();
 8003a1a:	f007 fdb3 	bl	800b584 <osThreadYield>
		 * enough for this purpose..
		 *
		 * Any alternative to get per-byte interrupt etc., will require rewriting of the HAL funcs
		 * or polling mechanism.
		 */
		uint32_t buf_fill = 0;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	627b      	str	r3, [r7, #36]	; 0x24
		for (uint32_t i = 0; i < sizeof(uartRxBuf); i++) {
 8003a22:	2300      	movs	r3, #0
 8003a24:	637b      	str	r3, [r7, #52]	; 0x34
 8003a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a28:	2b09      	cmp	r3, #9
 8003a2a:	d81d      	bhi.n	8003a68 <_ZN9AppParser9Processor13processorTaskEPv+0x7c>
			if (uartRxBuf[i] != 0) {
 8003a2c:	4a86      	ldr	r2, [pc, #536]	; (8003c48 <_ZN9AppParser9Processor13processorTaskEPv+0x25c>)
 8003a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a30:	4413      	add	r3, r2
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	bf14      	ite	ne
 8003a3a:	2301      	movne	r3, #1
 8003a3c:	2300      	moveq	r3, #0
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00d      	beq.n	8003a60 <_ZN9AppParser9Processor13processorTaskEPv+0x74>
				HAL_UART_DMAStop(&huart3);
 8003a44:	4881      	ldr	r0, [pc, #516]	; (8003c4c <_ZN9AppParser9Processor13processorTaskEPv+0x260>)
 8003a46:	f006 fa9b 	bl	8009f80 <HAL_UART_DMAStop>
				HAL_UART_Receive_DMA(&huart3, (BUF_CMP_t*) uartRxBuf, 10);
 8003a4a:	220a      	movs	r2, #10
 8003a4c:	497e      	ldr	r1, [pc, #504]	; (8003c48 <_ZN9AppParser9Processor13processorTaskEPv+0x25c>)
 8003a4e:	487f      	ldr	r0, [pc, #508]	; (8003c4c <_ZN9AppParser9Processor13processorTaskEPv+0x260>)
 8003a50:	f006 fa66 	bl	8009f20 <HAL_UART_Receive_DMA>
				memset((BUF_CMP_t*) &uartRxBuf, 0, 10);
 8003a54:	220a      	movs	r2, #10
 8003a56:	2100      	movs	r1, #0
 8003a58:	487b      	ldr	r0, [pc, #492]	; (8003c48 <_ZN9AppParser9Processor13processorTaskEPv+0x25c>)
 8003a5a:	f00b ff51 	bl	800f900 <memset>
				break;
 8003a5e:	e003      	b.n	8003a68 <_ZN9AppParser9Processor13processorTaskEPv+0x7c>
		for (uint32_t i = 0; i < sizeof(uartRxBuf); i++) {
 8003a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a62:	3301      	adds	r3, #1
 8003a64:	637b      	str	r3, [r7, #52]	; 0x34
 8003a66:	e7de      	b.n	8003a26 <_ZN9AppParser9Processor13processorTaskEPv+0x3a>
			}
		}

		/* end buffer cleaning algorithm */

		sensor_data.ql = osMessageQueueGetCount(rx_ctx->mailbox.queue);
 8003a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f007 fef5 	bl	800b85c <osMessageQueueGetCount>
 8003a72:	4603      	mov	r3, r0
 8003a74:	4a77      	ldr	r2, [pc, #476]	; (8003c54 <_ZN9AppParser9Processor13processorTaskEPv+0x268>)
 8003a76:	6193      	str	r3, [r2, #24]
		if (uxQueueMessagesWaiting((QueueHandle_t) rx_ctx->mailbox.queue)) {
 8003a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f008 fbfb 	bl	800c278 <uxQueueMessagesWaiting>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	bf14      	ite	ne
 8003a88:	2301      	movne	r3, #1
 8003a8a:	2300      	moveq	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 80c4 	beq.w	8003c1c <_ZN9AppParser9Processor13processorTaskEPv+0x230>

			AppMessage_t msg;
			osMessageQueueGet(rx_ctx->mailbox.queue, &msg.buffer, 0, 5);
 8003a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a96:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003a98:	f107 010c 	add.w	r1, r7, #12
 8003a9c:	2305      	movs	r3, #5
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f007 fe7e 	bl	800b7a0 <osMessageQueueGet>
			// osMessageQueueReset(procCtx.mailbox.queue);

			/* DATA VALIDATION */
			if (!isEq<BUF_CMP_t>(START_CHAR, msg.buffer[0])) {
 8003aa4:	f107 030c 	add.w	r3, r7, #12
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	486b      	ldr	r0, [pc, #428]	; (8003c58 <_ZN9AppParser9Processor13processorTaskEPv+0x26c>)
 8003aac:	f000 fa8c 	bl	8003fc8 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	f083 0301 	eor.w	r3, r3, #1
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d005      	beq.n	8003ac8 <_ZN9AppParser9Processor13processorTaskEPv+0xdc>
				HAL_UART_Transmit(&huart3, (BUF_CMP_t*) nack, sizeof(nack), 10);
 8003abc:	230a      	movs	r3, #10
 8003abe:	2204      	movs	r2, #4
 8003ac0:	4966      	ldr	r1, [pc, #408]	; (8003c5c <_ZN9AppParser9Processor13processorTaskEPv+0x270>)
 8003ac2:	4862      	ldr	r0, [pc, #392]	; (8003c4c <_ZN9AppParser9Processor13processorTaskEPv+0x260>)
 8003ac4:	f006 f99a 	bl	8009dfc <HAL_UART_Transmit>
			}
			if (!isEq<BUF_CMP_t>(END_CHAR, msg.buffer[9])) {
 8003ac8:	f107 030c 	add.w	r3, r7, #12
 8003acc:	3309      	adds	r3, #9
 8003ace:	4619      	mov	r1, r3
 8003ad0:	4863      	ldr	r0, [pc, #396]	; (8003c60 <_ZN9AppParser9Processor13processorTaskEPv+0x274>)
 8003ad2:	f000 fa79 	bl	8003fc8 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	f083 0301 	eor.w	r3, r3, #1
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d005      	beq.n	8003aee <_ZN9AppParser9Processor13processorTaskEPv+0x102>
				HAL_UART_Transmit(&huart3, (BUF_CMP_t*) nack, sizeof(nack), 10);
 8003ae2:	230a      	movs	r3, #10
 8003ae4:	2204      	movs	r2, #4
 8003ae6:	495d      	ldr	r1, [pc, #372]	; (8003c5c <_ZN9AppParser9Processor13processorTaskEPv+0x270>)
 8003ae8:	4858      	ldr	r0, [pc, #352]	; (8003c4c <_ZN9AppParser9Processor13processorTaskEPv+0x260>)
 8003aea:	f006 f987 	bl	8009dfc <HAL_UART_Transmit>
			}
			/******************/

			// do request stuff
			if (isEq<BUF_CMP_t>(REQ_CHAR, msg.buffer[1])) {
 8003aee:	f107 030c 	add.w	r3, r7, #12
 8003af2:	3301      	adds	r3, #1
 8003af4:	4619      	mov	r1, r3
 8003af6:	485b      	ldr	r0, [pc, #364]	; (8003c64 <_ZN9AppParser9Processor13processorTaskEPv+0x278>)
 8003af8:	f000 fa66 	bl	8003fc8 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00e      	beq.n	8003b20 <_ZN9AppParser9Processor13processorTaskEPv+0x134>
				if (isEq(SENSOR_CHAR, msg.buffer[2])) {
 8003b02:	f107 030c 	add.w	r3, r7, #12
 8003b06:	3302      	adds	r3, #2
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4857      	ldr	r0, [pc, #348]	; (8003c68 <_ZN9AppParser9Processor13processorTaskEPv+0x27c>)
 8003b0c:	f000 fa5c 	bl	8003fc8 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d07c      	beq.n	8003c10 <_ZN9AppParser9Processor13processorTaskEPv+0x224>
					returnSensorRequestCmd(msg.buffer[3]);
 8003b16:	7bfb      	ldrb	r3, [r7, #15]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 f8b1 	bl	8003c80 <_ZN9AppParser9Processor22returnSensorRequestCmdEh>
 8003b1e:	e077      	b.n	8003c10 <_ZN9AppParser9Processor13processorTaskEPv+0x224>
				}

			} else if (isEq<BUF_CMP_t>(CMD_CHAR, msg.buffer[1])) {
 8003b20:	f107 030c 	add.w	r3, r7, #12
 8003b24:	3301      	adds	r3, #1
 8003b26:	4619      	mov	r1, r3
 8003b28:	4850      	ldr	r0, [pc, #320]	; (8003c6c <_ZN9AppParser9Processor13processorTaskEPv+0x280>)
 8003b2a:	f000 fa4d 	bl	8003fc8 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d065      	beq.n	8003c00 <_ZN9AppParser9Processor13processorTaskEPv+0x214>
				// do command stuff
				switch (msg.buffer[2]) {
 8003b34:	7bbb      	ldrb	r3, [r7, #14]
 8003b36:	2b6d      	cmp	r3, #109	; 0x6d
 8003b38:	d002      	beq.n	8003b40 <_ZN9AppParser9Processor13processorTaskEPv+0x154>
 8003b3a:	2b73      	cmp	r3, #115	; 0x73
 8003b3c:	d01e      	beq.n	8003b7c <_ZN9AppParser9Processor13processorTaskEPv+0x190>
 8003b3e:	e067      	b.n	8003c10 <_ZN9AppParser9Processor13processorTaskEPv+0x224>
				case MOTOR_CHAR: {
					MOTION_PKT_t *pkt = getMotionCmdFromBytes(
 8003b40:	f107 030c 	add.w	r3, r7, #12
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 f9c3 	bl	8003ed0 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh>
 8003b4a:	61f8      	str	r0, [r7, #28]
							(uint8_t*) &msg.buffer);
					if (pkt == NULL) {
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d106      	bne.n	8003b60 <_ZN9AppParser9Processor13processorTaskEPv+0x174>
						HAL_UART_Transmit(&huart3, (BUF_CMP_t*) nack,
 8003b52:	230a      	movs	r3, #10
 8003b54:	2204      	movs	r2, #4
 8003b56:	4941      	ldr	r1, [pc, #260]	; (8003c5c <_ZN9AppParser9Processor13processorTaskEPv+0x270>)
 8003b58:	483c      	ldr	r0, [pc, #240]	; (8003c4c <_ZN9AppParser9Processor13processorTaskEPv+0x260>)
 8003b5a:	f006 f94f 	bl	8009dfc <HAL_UART_Transmit>
								sizeof(nack), 10);
						break;
 8003b5e:	e057      	b.n	8003c10 <_ZN9AppParser9Processor13processorTaskEPv+0x224>
					}
					osMessageQueuePut(tx_ctx->mailbox.queue, pkt, 0, 0);
 8003b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b62:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003b64:	2300      	movs	r3, #0
 8003b66:	2200      	movs	r2, #0
 8003b68:	69f9      	ldr	r1, [r7, #28]
 8003b6a:	f007 fdb9 	bl	800b6e0 <osMessageQueuePut>
					HAL_UART_Transmit(&huart3, (BUF_CMP_t*) ack, sizeof(ack),
 8003b6e:	230a      	movs	r3, #10
 8003b70:	2204      	movs	r2, #4
 8003b72:	493f      	ldr	r1, [pc, #252]	; (8003c70 <_ZN9AppParser9Processor13processorTaskEPv+0x284>)
 8003b74:	4835      	ldr	r0, [pc, #212]	; (8003c4c <_ZN9AppParser9Processor13processorTaskEPv+0x260>)
 8003b76:	f006 f941 	bl	8009dfc <HAL_UART_Transmit>
							10);
					break;
 8003b7a:	e049      	b.n	8003c10 <_ZN9AppParser9Processor13processorTaskEPv+0x224>
				}
				case SENSOR_CHAR: {
					uint32_t val = strtol((const char*) &msg.buffer[4], NULL,
 8003b7c:	f107 030c 	add.w	r3, r7, #12
 8003b80:	3304      	adds	r3, #4
 8003b82:	220a      	movs	r2, #10
 8003b84:	2100      	movs	r1, #0
 8003b86:	4618      	mov	r0, r3
 8003b88:	f00c fe88 	bl	801089c <strtol>
 8003b8c:	4603      	mov	r3, r0
							10);
 8003b8e:	623b      	str	r3, [r7, #32]
					if (val == 0)
 8003b90:	6a3b      	ldr	r3, [r7, #32]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d03b      	beq.n	8003c0e <_ZN9AppParser9Processor13processorTaskEPv+0x222>
						break;

					switch (msg.buffer[3]) {
 8003b96:	7bfb      	ldrb	r3, [r7, #15]
 8003b98:	2b65      	cmp	r3, #101	; 0x65
 8003b9a:	d019      	beq.n	8003bd0 <_ZN9AppParser9Processor13processorTaskEPv+0x1e4>
 8003b9c:	2b77      	cmp	r3, #119	; 0x77
 8003b9e:	d137      	bne.n	8003c10 <_ZN9AppParser9Processor13processorTaskEPv+0x224>

					case IR_L_CHAR: {
						sensor_data.ir_dist_th_L = (float) val;
 8003ba0:	6a3b      	ldr	r3, [r7, #32]
 8003ba2:	ee07 3a90 	vmov	s15, r3
 8003ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003baa:	4b2a      	ldr	r3, [pc, #168]	; (8003c54 <_ZN9AppParser9Processor13processorTaskEPv+0x268>)
 8003bac:	edc3 7a08 	vstr	s15, [r3, #32]
						if (val == 999)
 8003bb0:	6a3b      	ldr	r3, [r7, #32]
 8003bb2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d103      	bne.n	8003bc2 <_ZN9AppParser9Processor13processorTaskEPv+0x1d6>
							sensor_data.ir_dist_th_L = 0;
 8003bba:	4b26      	ldr	r3, [pc, #152]	; (8003c54 <_ZN9AppParser9Processor13processorTaskEPv+0x268>)
 8003bbc:	f04f 0200 	mov.w	r2, #0
 8003bc0:	621a      	str	r2, [r3, #32]
						HAL_UART_Transmit(&huart3, (BUF_CMP_t*) ack,
 8003bc2:	230a      	movs	r3, #10
 8003bc4:	2204      	movs	r2, #4
 8003bc6:	492a      	ldr	r1, [pc, #168]	; (8003c70 <_ZN9AppParser9Processor13processorTaskEPv+0x284>)
 8003bc8:	4820      	ldr	r0, [pc, #128]	; (8003c4c <_ZN9AppParser9Processor13processorTaskEPv+0x260>)
 8003bca:	f006 f917 	bl	8009dfc <HAL_UART_Transmit>
								sizeof(ack), 10);
						break;
 8003bce:	e01f      	b.n	8003c10 <_ZN9AppParser9Processor13processorTaskEPv+0x224>
					}
					case IR_R_CHAR: {
						sensor_data.ir_dist_th_R = (float) val;
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	ee07 3a90 	vmov	s15, r3
 8003bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bda:	4b1e      	ldr	r3, [pc, #120]	; (8003c54 <_ZN9AppParser9Processor13processorTaskEPv+0x268>)
 8003bdc:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
						if (val == 999)
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d103      	bne.n	8003bf2 <_ZN9AppParser9Processor13processorTaskEPv+0x206>
							sensor_data.ir_dist_th_R = 0;
 8003bea:	4b1a      	ldr	r3, [pc, #104]	; (8003c54 <_ZN9AppParser9Processor13processorTaskEPv+0x268>)
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	625a      	str	r2, [r3, #36]	; 0x24
						HAL_UART_Transmit(&huart3, (BUF_CMP_t*) ack,
 8003bf2:	230a      	movs	r3, #10
 8003bf4:	2204      	movs	r2, #4
 8003bf6:	491e      	ldr	r1, [pc, #120]	; (8003c70 <_ZN9AppParser9Processor13processorTaskEPv+0x284>)
 8003bf8:	4814      	ldr	r0, [pc, #80]	; (8003c4c <_ZN9AppParser9Processor13processorTaskEPv+0x260>)
 8003bfa:	f006 f8ff 	bl	8009dfc <HAL_UART_Transmit>
								sizeof(ack), 10);
						break;
 8003bfe:	e007      	b.n	8003c10 <_ZN9AppParser9Processor13processorTaskEPv+0x224>
				default: {
					// something went wrong..
				}
				}
			} else {
				HAL_UART_Transmit(&huart3, (BUF_CMP_t*) nack,
 8003c00:	230a      	movs	r3, #10
 8003c02:	2204      	movs	r2, #4
 8003c04:	4915      	ldr	r1, [pc, #84]	; (8003c5c <_ZN9AppParser9Processor13processorTaskEPv+0x270>)
 8003c06:	4811      	ldr	r0, [pc, #68]	; (8003c4c <_ZN9AppParser9Processor13processorTaskEPv+0x260>)
 8003c08:	f006 f8f8 	bl	8009dfc <HAL_UART_Transmit>
 8003c0c:	e000      	b.n	8003c10 <_ZN9AppParser9Processor13processorTaskEPv+0x224>
						break;
 8003c0e:	bf00      	nop
						sizeof(nack), 10);
			}

			HAL_UART_Receive_DMA(&huart3, (BUF_CMP_t*) uartRxBuf, 10); // re-enable DMA buf for rx
 8003c10:	220a      	movs	r2, #10
 8003c12:	490d      	ldr	r1, [pc, #52]	; (8003c48 <_ZN9AppParser9Processor13processorTaskEPv+0x25c>)
 8003c14:	480d      	ldr	r0, [pc, #52]	; (8003c4c <_ZN9AppParser9Processor13processorTaskEPv+0x260>)
 8003c16:	f006 f983 	bl	8009f20 <HAL_UART_Receive_DMA>
 8003c1a:	e6f8      	b.n	8003a0e <_ZN9AppParser9Processor13processorTaskEPv+0x22>
		} else if (_signal_obstr) // specifically lower priority than RX
 8003c1c:	4b15      	ldr	r3, [pc, #84]	; (8003c74 <_ZN9AppParser9Processor13processorTaskEPv+0x288>)
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f43f aef4 	beq.w	8003a0e <_ZN9AppParser9Processor13processorTaskEPv+0x22>
		{
			if (!_obstr_txed)
 8003c26:	4b14      	ldr	r3, [pc, #80]	; (8003c78 <_ZN9AppParser9Processor13processorTaskEPv+0x28c>)
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	f083 0301 	eor.w	r3, r3, #1
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d005      	beq.n	8003c40 <_ZN9AppParser9Processor13processorTaskEPv+0x254>
				HAL_UART_Transmit(&huart3, (BUF_CMP_t*) obstr, sizeof(obstr),
 8003c34:	230a      	movs	r3, #10
 8003c36:	2204      	movs	r2, #4
 8003c38:	4910      	ldr	r1, [pc, #64]	; (8003c7c <_ZN9AppParser9Processor13processorTaskEPv+0x290>)
 8003c3a:	4804      	ldr	r0, [pc, #16]	; (8003c4c <_ZN9AppParser9Processor13processorTaskEPv+0x260>)
 8003c3c:	f006 f8de 	bl	8009dfc <HAL_UART_Transmit>
						10);
			_obstr_txed = true;
 8003c40:	4b0d      	ldr	r3, [pc, #52]	; (8003c78 <_ZN9AppParser9Processor13processorTaskEPv+0x28c>)
 8003c42:	2201      	movs	r2, #1
 8003c44:	701a      	strb	r2, [r3, #0]
		}

	}
 8003c46:	e6e2      	b.n	8003a0e <_ZN9AppParser9Processor13processorTaskEPv+0x22>
 8003c48:	20000814 	.word	0x20000814
 8003c4c:	20000a8c 	.word	0x20000a8c
 8003c50:	20000684 	.word	0x20000684
 8003c54:	2000065c 	.word	0x2000065c
 8003c58:	080134e0 	.word	0x080134e0
 8003c5c:	080129f8 	.word	0x080129f8
 8003c60:	080134e5 	.word	0x080134e5
 8003c64:	080134e2 	.word	0x080134e2
 8003c68:	080134e3 	.word	0x080134e3
 8003c6c:	080134e1 	.word	0x080134e1
 8003c70:	080129f4 	.word	0x080129f4
 8003c74:	20000810 	.word	0x20000810
 8003c78:	20000811 	.word	0x20000811
 8003c7c:	08012a00 	.word	0x08012a00

08003c80 <_ZN9AppParser9Processor22returnSensorRequestCmdEh>:

}

void Processor::returnSensorRequestCmd(BUF_CMP_t id) {
 8003c80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c84:	b092      	sub	sp, #72	; 0x48
 8003c86:	af08      	add	r7, sp, #32
 8003c88:	4603      	mov	r3, r0
 8003c8a:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buf[25] = { 0 };
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	60fb      	str	r3, [r7, #12]
 8003c90:	f107 0310 	add.w	r3, r7, #16
 8003c94:	2200      	movs	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	605a      	str	r2, [r3, #4]
 8003c9a:	609a      	str	r2, [r3, #8]
 8003c9c:	60da      	str	r2, [r3, #12]
 8003c9e:	611a      	str	r2, [r3, #16]
 8003ca0:	751a      	strb	r2, [r3, #20]

	switch (id) {
 8003ca2:	79fb      	ldrb	r3, [r7, #7]
 8003ca4:	3b65      	subs	r3, #101	; 0x65
 8003ca6:	2b14      	cmp	r3, #20
 8003ca8:	f200 80fc 	bhi.w	8003ea4 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x224>
 8003cac:	a201      	add	r2, pc, #4	; (adr r2, 8003cb4 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x34>)
 8003cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb2:	bf00      	nop
 8003cb4:	08003d43 	.word	0x08003d43
 8003cb8:	08003ea5 	.word	0x08003ea5
 8003cbc:	08003db7 	.word	0x08003db7
 8003cc0:	08003ea5 	.word	0x08003ea5
 8003cc4:	08003ea5 	.word	0x08003ea5
 8003cc8:	08003ea5 	.word	0x08003ea5
 8003ccc:	08003e2d 	.word	0x08003e2d
 8003cd0:	08003ea5 	.word	0x08003ea5
 8003cd4:	08003ea5 	.word	0x08003ea5
 8003cd8:	08003ea5 	.word	0x08003ea5
 8003cdc:	08003ea5 	.word	0x08003ea5
 8003ce0:	08003ea5 	.word	0x08003ea5
 8003ce4:	08003ea5 	.word	0x08003ea5
 8003ce8:	08003ea5 	.word	0x08003ea5
 8003cec:	08003ea5 	.word	0x08003ea5
 8003cf0:	08003ea5 	.word	0x08003ea5
 8003cf4:	08003d7d 	.word	0x08003d7d
 8003cf8:	08003ea5 	.word	0x08003ea5
 8003cfc:	08003d09 	.word	0x08003d09
 8003d00:	08003ea5 	.word	0x08003ea5
 8003d04:	08003df3 	.word	0x08003df3
	case IR_L_CHAR: {
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f",
				sensor_data.ir_distL);
 8003d08:	4b6c      	ldr	r3, [pc, #432]	; (8003ebc <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x23c>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f",
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7fc fc1b 	bl	8000548 <__aeabi_f2d>
 8003d12:	4602      	mov	r2, r0
 8003d14:	460b      	mov	r3, r1
 8003d16:	f107 000c 	add.w	r0, r7, #12
 8003d1a:	e9cd 2300 	strd	r2, r3, [sp]
 8003d1e:	4a68      	ldr	r2, [pc, #416]	; (8003ec0 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x240>)
 8003d20:	2119      	movs	r1, #25
 8003d22:	f00c fca1 	bl	8010668 <sniprintf>
		HAL_UART_Transmit(&huart3, (BUF_CMP_t*) tx_buf, strlen((char*) tx_buf),
 8003d26:	f107 030c 	add.w	r3, r7, #12
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7fc fa50 	bl	80001d0 <strlen>
 8003d30:	4603      	mov	r3, r0
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	f107 010c 	add.w	r1, r7, #12
 8003d38:	230a      	movs	r3, #10
 8003d3a:	4862      	ldr	r0, [pc, #392]	; (8003ec4 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x244>)
 8003d3c:	f006 f85e 	bl	8009dfc <HAL_UART_Transmit>
				10);
		break;
 8003d40:	e0b7      	b.n	8003eb2 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x232>
	}
	case IR_R_CHAR: {
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f",
				sensor_data.ir_distR);
 8003d42:	4b5e      	ldr	r3, [pc, #376]	; (8003ebc <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x23c>)
 8003d44:	689b      	ldr	r3, [r3, #8]
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f",
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fc fbfe 	bl	8000548 <__aeabi_f2d>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	460b      	mov	r3, r1
 8003d50:	f107 000c 	add.w	r0, r7, #12
 8003d54:	e9cd 2300 	strd	r2, r3, [sp]
 8003d58:	4a59      	ldr	r2, [pc, #356]	; (8003ec0 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x240>)
 8003d5a:	2119      	movs	r1, #25
 8003d5c:	f00c fc84 	bl	8010668 <sniprintf>
		HAL_UART_Transmit(&huart3, (BUF_CMP_t*) tx_buf, strlen((char*) tx_buf),
 8003d60:	f107 030c 	add.w	r3, r7, #12
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7fc fa33 	bl	80001d0 <strlen>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	f107 010c 	add.w	r1, r7, #12
 8003d72:	230a      	movs	r3, #10
 8003d74:	4853      	ldr	r0, [pc, #332]	; (8003ec4 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x244>)
 8003d76:	f006 f841 	bl	8009dfc <HAL_UART_Transmit>
				10);
		break;
 8003d7a:	e09a      	b.n	8003eb2 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x232>
	}
	case USOUND_CHAR: {
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f",
				sensor_data.usonic_dist);
 8003d7c:	4b4f      	ldr	r3, [pc, #316]	; (8003ebc <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x23c>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f",
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7fc fbe1 	bl	8000548 <__aeabi_f2d>
 8003d86:	4602      	mov	r2, r0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	f107 000c 	add.w	r0, r7, #12
 8003d8e:	e9cd 2300 	strd	r2, r3, [sp]
 8003d92:	4a4b      	ldr	r2, [pc, #300]	; (8003ec0 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x240>)
 8003d94:	2119      	movs	r1, #25
 8003d96:	f00c fc67 	bl	8010668 <sniprintf>
		HAL_UART_Transmit(&huart3, (BUF_CMP_t*) tx_buf, strlen((char*) tx_buf),
 8003d9a:	f107 030c 	add.w	r3, r7, #12
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7fc fa16 	bl	80001d0 <strlen>
 8003da4:	4603      	mov	r3, r0
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	f107 010c 	add.w	r1, r7, #12
 8003dac:	230a      	movs	r3, #10
 8003dae:	4845      	ldr	r0, [pc, #276]	; (8003ec4 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x244>)
 8003db0:	f006 f824 	bl	8009dfc <HAL_UART_Transmit>
				10);
		break;
 8003db4:	e07d      	b.n	8003eb2 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x232>
	}
	case GY_Z_CHAR: {
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f",
				sensor_data.imu->gyro[2]);
 8003db6:	4b41      	ldr	r3, [pc, #260]	; (8003ebc <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x23c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	699b      	ldr	r3, [r3, #24]
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f",
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7fc fbc3 	bl	8000548 <__aeabi_f2d>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	f107 000c 	add.w	r0, r7, #12
 8003dca:	e9cd 2300 	strd	r2, r3, [sp]
 8003dce:	4a3c      	ldr	r2, [pc, #240]	; (8003ec0 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x240>)
 8003dd0:	2119      	movs	r1, #25
 8003dd2:	f00c fc49 	bl	8010668 <sniprintf>
		HAL_UART_Transmit(&huart3, (BUF_CMP_t*) tx_buf, strlen((char*) tx_buf),
 8003dd6:	f107 030c 	add.w	r3, r7, #12
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7fc f9f8 	bl	80001d0 <strlen>
 8003de0:	4603      	mov	r3, r0
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	f107 010c 	add.w	r1, r7, #12
 8003de8:	230a      	movs	r3, #10
 8003dea:	4836      	ldr	r0, [pc, #216]	; (8003ec4 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x244>)
 8003dec:	f006 f806 	bl	8009dfc <HAL_UART_Transmit>
				10);
		break;
 8003df0:	e05f      	b.n	8003eb2 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x232>
	}
	case QTRN_YAW_CHAR: {
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f", sensor_data.yaw_abs);
 8003df2:	4b32      	ldr	r3, [pc, #200]	; (8003ebc <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x23c>)
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7fc fba6 	bl	8000548 <__aeabi_f2d>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	460b      	mov	r3, r1
 8003e00:	f107 000c 	add.w	r0, r7, #12
 8003e04:	e9cd 2300 	strd	r2, r3, [sp]
 8003e08:	4a2d      	ldr	r2, [pc, #180]	; (8003ec0 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x240>)
 8003e0a:	2119      	movs	r1, #25
 8003e0c:	f00c fc2c 	bl	8010668 <sniprintf>
		HAL_UART_Transmit(&huart3, (BUF_CMP_t*) tx_buf, strlen((char*) tx_buf),
 8003e10:	f107 030c 	add.w	r3, r7, #12
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7fc f9db 	bl	80001d0 <strlen>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	f107 010c 	add.w	r1, r7, #12
 8003e22:	230a      	movs	r3, #10
 8003e24:	4827      	ldr	r0, [pc, #156]	; (8003ec4 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x244>)
 8003e26:	f005 ffe9 	bl	8009dfc <HAL_UART_Transmit>
				10);
		break;
 8003e2a:	e042      	b.n	8003eb2 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x232>
	}
	case QTRN_ALL_CHAR: {
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.1f;%4.1f;%4.1f;%4.1f",
				sensor_data.imu->q[0], sensor_data.imu->q[1],
 8003e2c:	4b23      	ldr	r3, [pc, #140]	; (8003ebc <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x23c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.1f;%4.1f;%4.1f;%4.1f",
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7fc fb88 	bl	8000548 <__aeabi_f2d>
 8003e38:	4604      	mov	r4, r0
 8003e3a:	460d      	mov	r5, r1
				sensor_data.imu->q[0], sensor_data.imu->q[1],
 8003e3c:	4b1f      	ldr	r3, [pc, #124]	; (8003ebc <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x23c>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.1f;%4.1f;%4.1f;%4.1f",
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fc fb80 	bl	8000548 <__aeabi_f2d>
 8003e48:	4680      	mov	r8, r0
 8003e4a:	4689      	mov	r9, r1
				sensor_data.imu->q[2], sensor_data.imu->q[3]);
 8003e4c:	4b1b      	ldr	r3, [pc, #108]	; (8003ebc <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x23c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.1f;%4.1f;%4.1f;%4.1f",
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fc fb78 	bl	8000548 <__aeabi_f2d>
 8003e58:	4682      	mov	sl, r0
 8003e5a:	468b      	mov	fp, r1
				sensor_data.imu->q[2], sensor_data.imu->q[3]);
 8003e5c:	4b17      	ldr	r3, [pc, #92]	; (8003ebc <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x23c>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.1f;%4.1f;%4.1f;%4.1f",
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7fc fb70 	bl	8000548 <__aeabi_f2d>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	f107 000c 	add.w	r0, r7, #12
 8003e70:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003e74:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8003e78:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003e7c:	e9cd 4500 	strd	r4, r5, [sp]
 8003e80:	4a11      	ldr	r2, [pc, #68]	; (8003ec8 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x248>)
 8003e82:	2119      	movs	r1, #25
 8003e84:	f00c fbf0 	bl	8010668 <sniprintf>
		HAL_UART_Transmit(&huart3, (BUF_CMP_t*) tx_buf, strlen((char*) tx_buf),
 8003e88:	f107 030c 	add.w	r3, r7, #12
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7fc f99f 	bl	80001d0 <strlen>
 8003e92:	4603      	mov	r3, r0
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	f107 010c 	add.w	r1, r7, #12
 8003e9a:	230a      	movs	r3, #10
 8003e9c:	4809      	ldr	r0, [pc, #36]	; (8003ec4 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x244>)
 8003e9e:	f005 ffad 	bl	8009dfc <HAL_UART_Transmit>
				10);
		break;
 8003ea2:	e006      	b.n	8003eb2 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x232>
	}
	default: {
		HAL_UART_Transmit(&huart3, (BUF_CMP_t*) nack, sizeof(nack), 10);
 8003ea4:	230a      	movs	r3, #10
 8003ea6:	2204      	movs	r2, #4
 8003ea8:	4908      	ldr	r1, [pc, #32]	; (8003ecc <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x24c>)
 8003eaa:	4806      	ldr	r0, [pc, #24]	; (8003ec4 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x244>)
 8003eac:	f005 ffa6 	bl	8009dfc <HAL_UART_Transmit>
	}
	}
}
 8003eb0:	bf00      	nop
 8003eb2:	bf00      	nop
 8003eb4:	3728      	adds	r7, #40	; 0x28
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ebc:	2000065c 	.word	0x2000065c
 8003ec0:	08012a08 	.word	0x08012a08
 8003ec4:	20000a8c 	.word	0x20000a8c
 8003ec8:	08012a10 	.word	0x08012a10
 8003ecc:	080129f8 	.word	0x080129f8

08003ed0 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh>:

MOTION_PKT_t* Processor::getMotionCmdFromBytes(BUF_CMP_t *bytes) {
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]

	uint32_t val = strtol((const char*) &bytes[4], NULL, 10);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	3304      	adds	r3, #4
 8003edc:	220a      	movs	r2, #10
 8003ede:	2100      	movs	r1, #0
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f00c fcdb 	bl	801089c <strtol>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	60fb      	str	r3, [r7, #12]
	if (val == 0)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d101      	bne.n	8003ef4 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x24>
		return NULL; // invalid input or no action
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	e062      	b.n	8003fba <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0xea>
	MOTION_PKT_t *pkt = new MOTION_PKT_t();
 8003ef4:	200c      	movs	r0, #12
 8003ef6:	f00a f9d1 	bl	800e29c <_Znwj>
 8003efa:	4603      	mov	r3, r0
 8003efc:	4619      	mov	r1, r3
 8003efe:	460a      	mov	r2, r1
 8003f00:	2300      	movs	r3, #0
 8003f02:	6013      	str	r3, [r2, #0]
 8003f04:	6053      	str	r3, [r2, #4]
 8003f06:	6093      	str	r3, [r2, #8]
 8003f08:	60b9      	str	r1, [r7, #8]
	pkt->arg = val;
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	605a      	str	r2, [r3, #4]
	switch (bytes[3]) {
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3303      	adds	r3, #3
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	3b62      	subs	r3, #98	; 0x62
 8003f18:	2b10      	cmp	r3, #16
 8003f1a:	d84b      	bhi.n	8003fb4 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0xe4>
 8003f1c:	a201      	add	r2, pc, #4	; (adr r2, 8003f24 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x54>)
 8003f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f22:	bf00      	nop
 8003f24:	08003f71 	.word	0x08003f71
 8003f28:	08003fb5 	.word	0x08003fb5
 8003f2c:	08003fb5 	.word	0x08003fb5
 8003f30:	08003fb5 	.word	0x08003fb5
 8003f34:	08003f69 	.word	0x08003f69
 8003f38:	08003fb5 	.word	0x08003fb5
 8003f3c:	08003fb5 	.word	0x08003fb5
 8003f40:	08003fb5 	.word	0x08003fb5
 8003f44:	08003fb5 	.word	0x08003fb5
 8003f48:	08003fb5 	.word	0x08003fb5
 8003f4c:	08003f79 	.word	0x08003f79
 8003f50:	08003fb5 	.word	0x08003fb5
 8003f54:	08003fb5 	.word	0x08003fb5
 8003f58:	08003fb5 	.word	0x08003fb5
 8003f5c:	08003fb5 	.word	0x08003fb5
 8003f60:	08003fb5 	.word	0x08003fb5
 8003f64:	08003f97 	.word	0x08003f97
	case FWD_CHAR: {
		pkt->cmd = MOVE_FWD;
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	601a      	str	r2, [r3, #0]
		break;
 8003f6e:	e023      	b.n	8003fb8 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0xe8>
	}
	case BWD_CHAR: {
		pkt->cmd = MOVE_BWD;
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	2201      	movs	r2, #1
 8003f74:	601a      	str	r2, [r3, #0]
		break;
 8003f76:	e01f      	b.n	8003fb8 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0xe8>
	}
	case LEFT_CHAR: {
		pkt->cmd =
				(bool) (isEq<BUF_CMP_t>(BWD_CHAR, bytes[7])) ?
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	3307      	adds	r3, #7
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	4811      	ldr	r0, [pc, #68]	; (8003fc4 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0xf4>)
 8003f80:	f000 f822 	bl	8003fc8 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0xbe>
 8003f8a:	2205      	movs	r2, #5
 8003f8c:	e000      	b.n	8003f90 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0xc0>
 8003f8e:	2203      	movs	r2, #3
		pkt->cmd =
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	601a      	str	r2, [r3, #0]
						MOVE_LEFT_BWD : MOVE_LEFT_FWD;
		break;
 8003f94:	e010      	b.n	8003fb8 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0xe8>
	}
	case RIGHT_CHAR: {
		pkt->cmd =
				(bool) (isEq<BUF_CMP_t>(BWD_CHAR, bytes[7])) ?
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3307      	adds	r3, #7
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	4809      	ldr	r0, [pc, #36]	; (8003fc4 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0xf4>)
 8003f9e:	f000 f813 	bl	8003fc8 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0xdc>
 8003fa8:	2204      	movs	r2, #4
 8003faa:	e000      	b.n	8003fae <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0xde>
 8003fac:	2202      	movs	r2, #2
		pkt->cmd =
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	601a      	str	r2, [r3, #0]
						MOVE_RIGHT_BWD : MOVE_RIGHT_FWD;
		break;
 8003fb2:	e001      	b.n	8003fb8 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0xe8>

	}
	default:
		// something went wrong..
		return NULL;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	e000      	b.n	8003fba <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0xea>
	}

	return pkt;
 8003fb8:	68bb      	ldr	r3, [r7, #8]

}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	080134e4 	.word	0x080134e4

08003fc8 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>:
	static bool isEq(const T &a, const T &b)
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
		return a == b;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	781a      	ldrb	r2, [r3, #0]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	bf0c      	ite	eq
 8003fde:	2301      	moveq	r3, #1
 8003fe0:	2300      	movne	r3, #0
 8003fe2:	b2db      	uxtb	r3, r3
	}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
PUTCHAR_PROTOTYPE {
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8003ff8:	1d39      	adds	r1, r7, #4
 8003ffa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ffe:	2201      	movs	r2, #1
 8004000:	4803      	ldr	r0, [pc, #12]	; (8004010 <__io_putchar+0x20>)
 8004002:	f005 fefb 	bl	8009dfc <HAL_UART_Transmit>

	return ch;
 8004006:	687b      	ldr	r3, [r7, #4]
}
 8004008:	4618      	mov	r0, r3
 800400a:	3708      	adds	r7, #8
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	20000a8c 	.word	0x20000a8c

08004014 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004018:	f001 fbc2 	bl	80057a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800401c:	f000 f836 	bl	800408c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004020:	f000 fba8 	bl	8004774 <MX_GPIO_Init>
  MX_DMA_Init();
 8004024:	f000 fb7e 	bl	8004724 <MX_DMA_Init>
  MX_TIM8_Init();
 8004028:	f000 faa8 	bl	800457c <MX_TIM8_Init>
  MX_TIM1_Init();
 800402c:	f000 f95e 	bl	80042ec <MX_TIM1_Init>
  MX_TIM2_Init();
 8004030:	f000 f9fc 	bl	800442c <MX_TIM2_Init>
  MX_TIM3_Init();
 8004034:	f000 fa4e 	bl	80044d4 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8004038:	f000 fb4a 	bl	80046d0 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800403c:	f000 f928 	bl	8004290 <MX_I2C1_Init>
  MX_ADC1_Init();
 8004040:	f000 f882 	bl	8004148 <MX_ADC1_Init>
  MX_ADC2_Init();
 8004044:	f000 f8d2 	bl	80041ec <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8004048:	4a0b      	ldr	r2, [pc, #44]	; (8004078 <main+0x64>)
 800404a:	2100      	movs	r1, #0
 800404c:	480b      	ldr	r0, [pc, #44]	; (800407c <main+0x68>)
 800404e:	f007 fa05 	bl	800b45c <osThreadNew>
 8004052:	4603      	mov	r3, r0
 8004054:	4a0a      	ldr	r2, [pc, #40]	; (8004080 <main+0x6c>)
 8004056:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	defaultTaskHandle = osThreadNew(sensorTask, NULL, &sensorTask_attr);
 8004058:	4a0a      	ldr	r2, [pc, #40]	; (8004084 <main+0x70>)
 800405a:	2100      	movs	r1, #0
 800405c:	480a      	ldr	r0, [pc, #40]	; (8004088 <main+0x74>)
 800405e:	f007 f9fd 	bl	800b45c <osThreadNew>
 8004062:	4603      	mov	r3, r0
 8004064:	4a06      	ldr	r2, [pc, #24]	; (8004080 <main+0x6c>)
 8004066:	6013      	str	r3, [r2, #0]
	initializeCPPconstructs();
 8004068:	f7fd ff60 	bl	8001f2c <initializeCPPconstructs>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800406c:	f007 f9ac 	bl	800b3c8 <osKernelInitialize>
/**
* @}
*/

  /* Start scheduler */
  osKernelStart();
 8004070:	f007 f9ce 	bl	800b410 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8004074:	e7fe      	b.n	8004074 <main+0x60>
 8004076:	bf00      	nop
 8004078:	080134e8 	.word	0x080134e8
 800407c:	080048e5 	.word	0x080048e5
 8004080:	20000bc0 	.word	0x20000bc0
 8004084:	0801350c 	.word	0x0801350c
 8004088:	08001f81 	.word	0x08001f81

0800408c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b094      	sub	sp, #80	; 0x50
 8004090:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004092:	f107 0320 	add.w	r3, r7, #32
 8004096:	2230      	movs	r2, #48	; 0x30
 8004098:	2100      	movs	r1, #0
 800409a:	4618      	mov	r0, r3
 800409c:	f00b fc30 	bl	800f900 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040a0:	f107 030c 	add.w	r3, r7, #12
 80040a4:	2200      	movs	r2, #0
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	605a      	str	r2, [r3, #4]
 80040aa:	609a      	str	r2, [r3, #8]
 80040ac:	60da      	str	r2, [r3, #12]
 80040ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80040b0:	2300      	movs	r3, #0
 80040b2:	60bb      	str	r3, [r7, #8]
 80040b4:	4b22      	ldr	r3, [pc, #136]	; (8004140 <SystemClock_Config+0xb4>)
 80040b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b8:	4a21      	ldr	r2, [pc, #132]	; (8004140 <SystemClock_Config+0xb4>)
 80040ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040be:	6413      	str	r3, [r2, #64]	; 0x40
 80040c0:	4b1f      	ldr	r3, [pc, #124]	; (8004140 <SystemClock_Config+0xb4>)
 80040c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c8:	60bb      	str	r3, [r7, #8]
 80040ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80040cc:	2300      	movs	r3, #0
 80040ce:	607b      	str	r3, [r7, #4]
 80040d0:	4b1c      	ldr	r3, [pc, #112]	; (8004144 <SystemClock_Config+0xb8>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a1b      	ldr	r2, [pc, #108]	; (8004144 <SystemClock_Config+0xb8>)
 80040d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040da:	6013      	str	r3, [r2, #0]
 80040dc:	4b19      	ldr	r3, [pc, #100]	; (8004144 <SystemClock_Config+0xb8>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040e4:	607b      	str	r3, [r7, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80040e8:	2302      	movs	r3, #2
 80040ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80040ec:	2301      	movs	r3, #1
 80040ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80040f0:	2310      	movs	r3, #16
 80040f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80040f4:	2300      	movs	r3, #0
 80040f6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80040f8:	f107 0320 	add.w	r3, r7, #32
 80040fc:	4618      	mov	r0, r3
 80040fe:	f003 ff97 	bl	8008030 <HAL_RCC_OscConfig>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8004108:	f000 fc06 	bl	8004918 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800410c:	230f      	movs	r3, #15
 800410e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004110:	2300      	movs	r3, #0
 8004112:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004114:	2300      	movs	r3, #0
 8004116:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004118:	2300      	movs	r3, #0
 800411a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800411c:	2300      	movs	r3, #0
 800411e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004120:	f107 030c 	add.w	r3, r7, #12
 8004124:	2100      	movs	r1, #0
 8004126:	4618      	mov	r0, r3
 8004128:	f004 f9fa 	bl	8008520 <HAL_RCC_ClockConfig>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8004132:	f000 fbf1 	bl	8004918 <Error_Handler>
  }
}
 8004136:	bf00      	nop
 8004138:	3750      	adds	r7, #80	; 0x50
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	40023800 	.word	0x40023800
 8004144:	40007000 	.word	0x40007000

08004148 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800414e:	463b      	mov	r3, r7
 8004150:	2200      	movs	r2, #0
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	605a      	str	r2, [r3, #4]
 8004156:	609a      	str	r2, [r3, #8]
 8004158:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800415a:	4b21      	ldr	r3, [pc, #132]	; (80041e0 <MX_ADC1_Init+0x98>)
 800415c:	4a21      	ldr	r2, [pc, #132]	; (80041e4 <MX_ADC1_Init+0x9c>)
 800415e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004160:	4b1f      	ldr	r3, [pc, #124]	; (80041e0 <MX_ADC1_Init+0x98>)
 8004162:	2200      	movs	r2, #0
 8004164:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004166:	4b1e      	ldr	r3, [pc, #120]	; (80041e0 <MX_ADC1_Init+0x98>)
 8004168:	2200      	movs	r2, #0
 800416a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800416c:	4b1c      	ldr	r3, [pc, #112]	; (80041e0 <MX_ADC1_Init+0x98>)
 800416e:	2200      	movs	r2, #0
 8004170:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004172:	4b1b      	ldr	r3, [pc, #108]	; (80041e0 <MX_ADC1_Init+0x98>)
 8004174:	2200      	movs	r2, #0
 8004176:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004178:	4b19      	ldr	r3, [pc, #100]	; (80041e0 <MX_ADC1_Init+0x98>)
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004180:	4b17      	ldr	r3, [pc, #92]	; (80041e0 <MX_ADC1_Init+0x98>)
 8004182:	2200      	movs	r2, #0
 8004184:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004186:	4b16      	ldr	r3, [pc, #88]	; (80041e0 <MX_ADC1_Init+0x98>)
 8004188:	4a17      	ldr	r2, [pc, #92]	; (80041e8 <MX_ADC1_Init+0xa0>)
 800418a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800418c:	4b14      	ldr	r3, [pc, #80]	; (80041e0 <MX_ADC1_Init+0x98>)
 800418e:	2200      	movs	r2, #0
 8004190:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004192:	4b13      	ldr	r3, [pc, #76]	; (80041e0 <MX_ADC1_Init+0x98>)
 8004194:	2201      	movs	r2, #1
 8004196:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004198:	4b11      	ldr	r3, [pc, #68]	; (80041e0 <MX_ADC1_Init+0x98>)
 800419a:	2200      	movs	r2, #0
 800419c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80041a0:	4b0f      	ldr	r3, [pc, #60]	; (80041e0 <MX_ADC1_Init+0x98>)
 80041a2:	2201      	movs	r2, #1
 80041a4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80041a6:	480e      	ldr	r0, [pc, #56]	; (80041e0 <MX_ADC1_Init+0x98>)
 80041a8:	f001 fb60 	bl	800586c <HAL_ADC_Init>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80041b2:	f000 fbb1 	bl	8004918 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80041b6:	230a      	movs	r3, #10
 80041b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80041ba:	2301      	movs	r3, #1
 80041bc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80041be:	2300      	movs	r3, #0
 80041c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80041c2:	463b      	mov	r3, r7
 80041c4:	4619      	mov	r1, r3
 80041c6:	4806      	ldr	r0, [pc, #24]	; (80041e0 <MX_ADC1_Init+0x98>)
 80041c8:	f001 fd32 	bl	8005c30 <HAL_ADC_ConfigChannel>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80041d2:	f000 fba1 	bl	8004918 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80041d6:	bf00      	nop
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	20000888 	.word	0x20000888
 80041e4:	40012000 	.word	0x40012000
 80041e8:	0f000001 	.word	0x0f000001

080041ec <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80041f2:	463b      	mov	r3, r7
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	605a      	str	r2, [r3, #4]
 80041fa:	609a      	str	r2, [r3, #8]
 80041fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80041fe:	4b21      	ldr	r3, [pc, #132]	; (8004284 <MX_ADC2_Init+0x98>)
 8004200:	4a21      	ldr	r2, [pc, #132]	; (8004288 <MX_ADC2_Init+0x9c>)
 8004202:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004204:	4b1f      	ldr	r3, [pc, #124]	; (8004284 <MX_ADC2_Init+0x98>)
 8004206:	2200      	movs	r2, #0
 8004208:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800420a:	4b1e      	ldr	r3, [pc, #120]	; (8004284 <MX_ADC2_Init+0x98>)
 800420c:	2200      	movs	r2, #0
 800420e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8004210:	4b1c      	ldr	r3, [pc, #112]	; (8004284 <MX_ADC2_Init+0x98>)
 8004212:	2200      	movs	r2, #0
 8004214:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8004216:	4b1b      	ldr	r3, [pc, #108]	; (8004284 <MX_ADC2_Init+0x98>)
 8004218:	2200      	movs	r2, #0
 800421a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800421c:	4b19      	ldr	r3, [pc, #100]	; (8004284 <MX_ADC2_Init+0x98>)
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004224:	4b17      	ldr	r3, [pc, #92]	; (8004284 <MX_ADC2_Init+0x98>)
 8004226:	2200      	movs	r2, #0
 8004228:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800422a:	4b16      	ldr	r3, [pc, #88]	; (8004284 <MX_ADC2_Init+0x98>)
 800422c:	4a17      	ldr	r2, [pc, #92]	; (800428c <MX_ADC2_Init+0xa0>)
 800422e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004230:	4b14      	ldr	r3, [pc, #80]	; (8004284 <MX_ADC2_Init+0x98>)
 8004232:	2200      	movs	r2, #0
 8004234:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8004236:	4b13      	ldr	r3, [pc, #76]	; (8004284 <MX_ADC2_Init+0x98>)
 8004238:	2201      	movs	r2, #1
 800423a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800423c:	4b11      	ldr	r3, [pc, #68]	; (8004284 <MX_ADC2_Init+0x98>)
 800423e:	2200      	movs	r2, #0
 8004240:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004244:	4b0f      	ldr	r3, [pc, #60]	; (8004284 <MX_ADC2_Init+0x98>)
 8004246:	2201      	movs	r2, #1
 8004248:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800424a:	480e      	ldr	r0, [pc, #56]	; (8004284 <MX_ADC2_Init+0x98>)
 800424c:	f001 fb0e 	bl	800586c <HAL_ADC_Init>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8004256:	f000 fb5f 	bl	8004918 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800425a:	2300      	movs	r3, #0
 800425c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800425e:	2301      	movs	r3, #1
 8004260:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004262:	2300      	movs	r3, #0
 8004264:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004266:	463b      	mov	r3, r7
 8004268:	4619      	mov	r1, r3
 800426a:	4806      	ldr	r0, [pc, #24]	; (8004284 <MX_ADC2_Init+0x98>)
 800426c:	f001 fce0 	bl	8005c30 <HAL_ADC_ConfigChannel>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8004276:	f000 fb4f 	bl	8004918 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800427a:	bf00      	nop
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	200008d0 	.word	0x200008d0
 8004288:	40012100 	.word	0x40012100
 800428c:	0f000001 	.word	0x0f000001

08004290 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004294:	4b12      	ldr	r3, [pc, #72]	; (80042e0 <MX_I2C1_Init+0x50>)
 8004296:	4a13      	ldr	r2, [pc, #76]	; (80042e4 <MX_I2C1_Init+0x54>)
 8004298:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800429a:	4b11      	ldr	r3, [pc, #68]	; (80042e0 <MX_I2C1_Init+0x50>)
 800429c:	4a12      	ldr	r2, [pc, #72]	; (80042e8 <MX_I2C1_Init+0x58>)
 800429e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80042a0:	4b0f      	ldr	r3, [pc, #60]	; (80042e0 <MX_I2C1_Init+0x50>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80042a6:	4b0e      	ldr	r3, [pc, #56]	; (80042e0 <MX_I2C1_Init+0x50>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80042ac:	4b0c      	ldr	r3, [pc, #48]	; (80042e0 <MX_I2C1_Init+0x50>)
 80042ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80042b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80042b4:	4b0a      	ldr	r3, [pc, #40]	; (80042e0 <MX_I2C1_Init+0x50>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80042ba:	4b09      	ldr	r3, [pc, #36]	; (80042e0 <MX_I2C1_Init+0x50>)
 80042bc:	2200      	movs	r2, #0
 80042be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80042c0:	4b07      	ldr	r3, [pc, #28]	; (80042e0 <MX_I2C1_Init+0x50>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80042c6:	4b06      	ldr	r3, [pc, #24]	; (80042e0 <MX_I2C1_Init+0x50>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80042cc:	4804      	ldr	r0, [pc, #16]	; (80042e0 <MX_I2C1_Init+0x50>)
 80042ce:	f002 fd99 	bl	8006e04 <HAL_I2C_Init>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80042d8:	f000 fb1e 	bl	8004918 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80042dc:	bf00      	nop
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	20000918 	.word	0x20000918
 80042e4:	40005400 	.word	0x40005400
 80042e8:	00061a80 	.word	0x00061a80

080042ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b096      	sub	sp, #88	; 0x58
 80042f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80042f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80042f6:	2200      	movs	r2, #0
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	605a      	str	r2, [r3, #4]
 80042fc:	609a      	str	r2, [r3, #8]
 80042fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004300:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004304:	2200      	movs	r2, #0
 8004306:	601a      	str	r2, [r3, #0]
 8004308:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800430a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800430e:	2200      	movs	r2, #0
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	605a      	str	r2, [r3, #4]
 8004314:	609a      	str	r2, [r3, #8]
 8004316:	60da      	str	r2, [r3, #12]
 8004318:	611a      	str	r2, [r3, #16]
 800431a:	615a      	str	r2, [r3, #20]
 800431c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800431e:	1d3b      	adds	r3, r7, #4
 8004320:	2220      	movs	r2, #32
 8004322:	2100      	movs	r1, #0
 8004324:	4618      	mov	r0, r3
 8004326:	f00b faeb 	bl	800f900 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800432a:	4b3e      	ldr	r3, [pc, #248]	; (8004424 <MX_TIM1_Init+0x138>)
 800432c:	4a3e      	ldr	r2, [pc, #248]	; (8004428 <MX_TIM1_Init+0x13c>)
 800432e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8004330:	4b3c      	ldr	r3, [pc, #240]	; (8004424 <MX_TIM1_Init+0x138>)
 8004332:	22a0      	movs	r2, #160	; 0xa0
 8004334:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004336:	4b3b      	ldr	r3, [pc, #236]	; (8004424 <MX_TIM1_Init+0x138>)
 8004338:	2200      	movs	r2, #0
 800433a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800433c:	4b39      	ldr	r3, [pc, #228]	; (8004424 <MX_TIM1_Init+0x138>)
 800433e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004342:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004344:	4b37      	ldr	r3, [pc, #220]	; (8004424 <MX_TIM1_Init+0x138>)
 8004346:	2200      	movs	r2, #0
 8004348:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800434a:	4b36      	ldr	r3, [pc, #216]	; (8004424 <MX_TIM1_Init+0x138>)
 800434c:	2200      	movs	r2, #0
 800434e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004350:	4b34      	ldr	r3, [pc, #208]	; (8004424 <MX_TIM1_Init+0x138>)
 8004352:	2280      	movs	r2, #128	; 0x80
 8004354:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004356:	4833      	ldr	r0, [pc, #204]	; (8004424 <MX_TIM1_Init+0x138>)
 8004358:	f004 fb34 	bl	80089c4 <HAL_TIM_Base_Init>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8004362:	f000 fad9 	bl	8004918 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004366:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800436a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800436c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004370:	4619      	mov	r1, r3
 8004372:	482c      	ldr	r0, [pc, #176]	; (8004424 <MX_TIM1_Init+0x138>)
 8004374:	f005 f806 	bl	8009384 <HAL_TIM_ConfigClockSource>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800437e:	f000 facb 	bl	8004918 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004382:	4828      	ldr	r0, [pc, #160]	; (8004424 <MX_TIM1_Init+0x138>)
 8004384:	f004 fbde 	bl	8008b44 <HAL_TIM_PWM_Init>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800438e:	f000 fac3 	bl	8004918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004392:	2300      	movs	r3, #0
 8004394:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004396:	2300      	movs	r3, #0
 8004398:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800439a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800439e:	4619      	mov	r1, r3
 80043a0:	4820      	ldr	r0, [pc, #128]	; (8004424 <MX_TIM1_Init+0x138>)
 80043a2:	f005 fbef 	bl	8009b84 <HAL_TIMEx_MasterConfigSynchronization>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80043ac:	f000 fab4 	bl	8004918 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80043b0:	2360      	movs	r3, #96	; 0x60
 80043b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80043b4:	2300      	movs	r3, #0
 80043b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80043b8:	2300      	movs	r3, #0
 80043ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80043bc:	2300      	movs	r3, #0
 80043be:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80043c0:	2300      	movs	r3, #0
 80043c2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80043c4:	2300      	movs	r3, #0
 80043c6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80043c8:	2300      	movs	r3, #0
 80043ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80043cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043d0:	2200      	movs	r2, #0
 80043d2:	4619      	mov	r1, r3
 80043d4:	4813      	ldr	r0, [pc, #76]	; (8004424 <MX_TIM1_Init+0x138>)
 80043d6:	f004 ff13 	bl	8009200 <HAL_TIM_PWM_ConfigChannel>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80043e0:	f000 fa9a 	bl	8004918 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80043e4:	2300      	movs	r3, #0
 80043e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80043e8:	2300      	movs	r3, #0
 80043ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80043ec:	2300      	movs	r3, #0
 80043ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80043f0:	2300      	movs	r3, #0
 80043f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80043f4:	2300      	movs	r3, #0
 80043f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80043f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80043fe:	2300      	movs	r3, #0
 8004400:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004402:	1d3b      	adds	r3, r7, #4
 8004404:	4619      	mov	r1, r3
 8004406:	4807      	ldr	r0, [pc, #28]	; (8004424 <MX_TIM1_Init+0x138>)
 8004408:	f005 fc38 	bl	8009c7c <HAL_TIMEx_ConfigBreakDeadTime>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8004412:	f000 fa81 	bl	8004918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004416:	4803      	ldr	r0, [pc, #12]	; (8004424 <MX_TIM1_Init+0x138>)
 8004418:	f000 fe24 	bl	8005064 <HAL_TIM_MspPostInit>

}
 800441c:	bf00      	nop
 800441e:	3758      	adds	r7, #88	; 0x58
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	2000096c 	.word	0x2000096c
 8004428:	40010000 	.word	0x40010000

0800442c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b08c      	sub	sp, #48	; 0x30
 8004430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004432:	f107 030c 	add.w	r3, r7, #12
 8004436:	2224      	movs	r2, #36	; 0x24
 8004438:	2100      	movs	r1, #0
 800443a:	4618      	mov	r0, r3
 800443c:	f00b fa60 	bl	800f900 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004440:	1d3b      	adds	r3, r7, #4
 8004442:	2200      	movs	r2, #0
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004448:	4b21      	ldr	r3, [pc, #132]	; (80044d0 <MX_TIM2_Init+0xa4>)
 800444a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800444e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004450:	4b1f      	ldr	r3, [pc, #124]	; (80044d0 <MX_TIM2_Init+0xa4>)
 8004452:	2200      	movs	r2, #0
 8004454:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004456:	4b1e      	ldr	r3, [pc, #120]	; (80044d0 <MX_TIM2_Init+0xa4>)
 8004458:	2200      	movs	r2, #0
 800445a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800445c:	4b1c      	ldr	r3, [pc, #112]	; (80044d0 <MX_TIM2_Init+0xa4>)
 800445e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004462:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004464:	4b1a      	ldr	r3, [pc, #104]	; (80044d0 <MX_TIM2_Init+0xa4>)
 8004466:	2200      	movs	r2, #0
 8004468:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800446a:	4b19      	ldr	r3, [pc, #100]	; (80044d0 <MX_TIM2_Init+0xa4>)
 800446c:	2200      	movs	r2, #0
 800446e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004470:	2303      	movs	r3, #3
 8004472:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004474:	2300      	movs	r3, #0
 8004476:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004478:	2301      	movs	r3, #1
 800447a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800447c:	2300      	movs	r3, #0
 800447e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8004480:	230a      	movs	r3, #10
 8004482:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004484:	2300      	movs	r3, #0
 8004486:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004488:	2301      	movs	r3, #1
 800448a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800448c:	2300      	movs	r3, #0
 800448e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004490:	2300      	movs	r3, #0
 8004492:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8004494:	f107 030c 	add.w	r3, r7, #12
 8004498:	4619      	mov	r1, r3
 800449a:	480d      	ldr	r0, [pc, #52]	; (80044d0 <MX_TIM2_Init+0xa4>)
 800449c:	f004 fc74 	bl	8008d88 <HAL_TIM_Encoder_Init>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80044a6:	f000 fa37 	bl	8004918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044aa:	2300      	movs	r3, #0
 80044ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044ae:	2300      	movs	r3, #0
 80044b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80044b2:	1d3b      	adds	r3, r7, #4
 80044b4:	4619      	mov	r1, r3
 80044b6:	4806      	ldr	r0, [pc, #24]	; (80044d0 <MX_TIM2_Init+0xa4>)
 80044b8:	f005 fb64 	bl	8009b84 <HAL_TIMEx_MasterConfigSynchronization>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80044c2:	f000 fa29 	bl	8004918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80044c6:	bf00      	nop
 80044c8:	3730      	adds	r7, #48	; 0x30
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	200009b4 	.word	0x200009b4

080044d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b08c      	sub	sp, #48	; 0x30
 80044d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80044da:	f107 030c 	add.w	r3, r7, #12
 80044de:	2224      	movs	r2, #36	; 0x24
 80044e0:	2100      	movs	r1, #0
 80044e2:	4618      	mov	r0, r3
 80044e4:	f00b fa0c 	bl	800f900 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044e8:	1d3b      	adds	r3, r7, #4
 80044ea:	2200      	movs	r2, #0
 80044ec:	601a      	str	r2, [r3, #0]
 80044ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80044f0:	4b20      	ldr	r3, [pc, #128]	; (8004574 <MX_TIM3_Init+0xa0>)
 80044f2:	4a21      	ldr	r2, [pc, #132]	; (8004578 <MX_TIM3_Init+0xa4>)
 80044f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80044f6:	4b1f      	ldr	r3, [pc, #124]	; (8004574 <MX_TIM3_Init+0xa0>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044fc:	4b1d      	ldr	r3, [pc, #116]	; (8004574 <MX_TIM3_Init+0xa0>)
 80044fe:	2200      	movs	r2, #0
 8004500:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004502:	4b1c      	ldr	r3, [pc, #112]	; (8004574 <MX_TIM3_Init+0xa0>)
 8004504:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004508:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800450a:	4b1a      	ldr	r3, [pc, #104]	; (8004574 <MX_TIM3_Init+0xa0>)
 800450c:	2200      	movs	r2, #0
 800450e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004510:	4b18      	ldr	r3, [pc, #96]	; (8004574 <MX_TIM3_Init+0xa0>)
 8004512:	2200      	movs	r2, #0
 8004514:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004516:	2303      	movs	r3, #3
 8004518:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800451a:	2300      	movs	r3, #0
 800451c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800451e:	2301      	movs	r3, #1
 8004520:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004522:	2300      	movs	r3, #0
 8004524:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8004526:	230a      	movs	r3, #10
 8004528:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800452a:	2300      	movs	r3, #0
 800452c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800452e:	2301      	movs	r3, #1
 8004530:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004532:	2300      	movs	r3, #0
 8004534:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004536:	2300      	movs	r3, #0
 8004538:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800453a:	f107 030c 	add.w	r3, r7, #12
 800453e:	4619      	mov	r1, r3
 8004540:	480c      	ldr	r0, [pc, #48]	; (8004574 <MX_TIM3_Init+0xa0>)
 8004542:	f004 fc21 	bl	8008d88 <HAL_TIM_Encoder_Init>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800454c:	f000 f9e4 	bl	8004918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004550:	2300      	movs	r3, #0
 8004552:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004554:	2300      	movs	r3, #0
 8004556:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004558:	1d3b      	adds	r3, r7, #4
 800455a:	4619      	mov	r1, r3
 800455c:	4805      	ldr	r0, [pc, #20]	; (8004574 <MX_TIM3_Init+0xa0>)
 800455e:	f005 fb11 	bl	8009b84 <HAL_TIMEx_MasterConfigSynchronization>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8004568:	f000 f9d6 	bl	8004918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800456c:	bf00      	nop
 800456e:	3730      	adds	r7, #48	; 0x30
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	200009fc 	.word	0x200009fc
 8004578:	40000400 	.word	0x40000400

0800457c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b096      	sub	sp, #88	; 0x58
 8004580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004582:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004586:	2200      	movs	r2, #0
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	605a      	str	r2, [r3, #4]
 800458c:	609a      	str	r2, [r3, #8]
 800458e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004590:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004594:	2200      	movs	r2, #0
 8004596:	601a      	str	r2, [r3, #0]
 8004598:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800459a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800459e:	2200      	movs	r2, #0
 80045a0:	601a      	str	r2, [r3, #0]
 80045a2:	605a      	str	r2, [r3, #4]
 80045a4:	609a      	str	r2, [r3, #8]
 80045a6:	60da      	str	r2, [r3, #12]
 80045a8:	611a      	str	r2, [r3, #16]
 80045aa:	615a      	str	r2, [r3, #20]
 80045ac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80045ae:	1d3b      	adds	r3, r7, #4
 80045b0:	2220      	movs	r2, #32
 80045b2:	2100      	movs	r1, #0
 80045b4:	4618      	mov	r0, r3
 80045b6:	f00b f9a3 	bl	800f900 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80045ba:	4b43      	ldr	r3, [pc, #268]	; (80046c8 <MX_TIM8_Init+0x14c>)
 80045bc:	4a43      	ldr	r2, [pc, #268]	; (80046cc <MX_TIM8_Init+0x150>)
 80045be:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80045c0:	4b41      	ldr	r3, [pc, #260]	; (80046c8 <MX_TIM8_Init+0x14c>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045c6:	4b40      	ldr	r3, [pc, #256]	; (80046c8 <MX_TIM8_Init+0x14c>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 80045cc:	4b3e      	ldr	r3, [pc, #248]	; (80046c8 <MX_TIM8_Init+0x14c>)
 80045ce:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80045d2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045d4:	4b3c      	ldr	r3, [pc, #240]	; (80046c8 <MX_TIM8_Init+0x14c>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80045da:	4b3b      	ldr	r3, [pc, #236]	; (80046c8 <MX_TIM8_Init+0x14c>)
 80045dc:	2200      	movs	r2, #0
 80045de:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045e0:	4b39      	ldr	r3, [pc, #228]	; (80046c8 <MX_TIM8_Init+0x14c>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80045e6:	4838      	ldr	r0, [pc, #224]	; (80046c8 <MX_TIM8_Init+0x14c>)
 80045e8:	f004 f9ec 	bl	80089c4 <HAL_TIM_Base_Init>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80045f2:	f000 f991 	bl	8004918 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045fa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80045fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004600:	4619      	mov	r1, r3
 8004602:	4831      	ldr	r0, [pc, #196]	; (80046c8 <MX_TIM8_Init+0x14c>)
 8004604:	f004 febe 	bl	8009384 <HAL_TIM_ConfigClockSource>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800460e:	f000 f983 	bl	8004918 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8004612:	482d      	ldr	r0, [pc, #180]	; (80046c8 <MX_TIM8_Init+0x14c>)
 8004614:	f004 fa96 	bl	8008b44 <HAL_TIM_PWM_Init>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800461e:	f000 f97b 	bl	8004918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004622:	2300      	movs	r3, #0
 8004624:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004626:	2300      	movs	r3, #0
 8004628:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800462a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800462e:	4619      	mov	r1, r3
 8004630:	4825      	ldr	r0, [pc, #148]	; (80046c8 <MX_TIM8_Init+0x14c>)
 8004632:	f005 faa7 	bl	8009b84 <HAL_TIMEx_MasterConfigSynchronization>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d001      	beq.n	8004640 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 800463c:	f000 f96c 	bl	8004918 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004640:	2360      	movs	r3, #96	; 0x60
 8004642:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004644:	2300      	movs	r3, #0
 8004646:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004648:	2300      	movs	r3, #0
 800464a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800464c:	2300      	movs	r3, #0
 800464e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004650:	2300      	movs	r3, #0
 8004652:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004654:	2300      	movs	r3, #0
 8004656:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004658:	2300      	movs	r3, #0
 800465a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800465c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004660:	2200      	movs	r2, #0
 8004662:	4619      	mov	r1, r3
 8004664:	4818      	ldr	r0, [pc, #96]	; (80046c8 <MX_TIM8_Init+0x14c>)
 8004666:	f004 fdcb 	bl	8009200 <HAL_TIM_PWM_ConfigChannel>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8004670:	f000 f952 	bl	8004918 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004674:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004678:	2204      	movs	r2, #4
 800467a:	4619      	mov	r1, r3
 800467c:	4812      	ldr	r0, [pc, #72]	; (80046c8 <MX_TIM8_Init+0x14c>)
 800467e:	f004 fdbf 	bl	8009200 <HAL_TIM_PWM_ConfigChannel>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d001      	beq.n	800468c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8004688:	f000 f946 	bl	8004918 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800468c:	2300      	movs	r3, #0
 800468e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004690:	2300      	movs	r3, #0
 8004692:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004694:	2300      	movs	r3, #0
 8004696:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004698:	2300      	movs	r3, #0
 800469a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800469c:	2300      	movs	r3, #0
 800469e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80046a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80046a6:	2300      	movs	r3, #0
 80046a8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80046aa:	1d3b      	adds	r3, r7, #4
 80046ac:	4619      	mov	r1, r3
 80046ae:	4806      	ldr	r0, [pc, #24]	; (80046c8 <MX_TIM8_Init+0x14c>)
 80046b0:	f005 fae4 	bl	8009c7c <HAL_TIMEx_ConfigBreakDeadTime>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80046ba:	f000 f92d 	bl	8004918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80046be:	bf00      	nop
 80046c0:	3758      	adds	r7, #88	; 0x58
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	20000a44 	.word	0x20000a44
 80046cc:	40010400 	.word	0x40010400

080046d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80046d4:	4b11      	ldr	r3, [pc, #68]	; (800471c <MX_USART3_UART_Init+0x4c>)
 80046d6:	4a12      	ldr	r2, [pc, #72]	; (8004720 <MX_USART3_UART_Init+0x50>)
 80046d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80046da:	4b10      	ldr	r3, [pc, #64]	; (800471c <MX_USART3_UART_Init+0x4c>)
 80046dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80046e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80046e2:	4b0e      	ldr	r3, [pc, #56]	; (800471c <MX_USART3_UART_Init+0x4c>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80046e8:	4b0c      	ldr	r3, [pc, #48]	; (800471c <MX_USART3_UART_Init+0x4c>)
 80046ea:	2200      	movs	r2, #0
 80046ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80046ee:	4b0b      	ldr	r3, [pc, #44]	; (800471c <MX_USART3_UART_Init+0x4c>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80046f4:	4b09      	ldr	r3, [pc, #36]	; (800471c <MX_USART3_UART_Init+0x4c>)
 80046f6:	220c      	movs	r2, #12
 80046f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80046fa:	4b08      	ldr	r3, [pc, #32]	; (800471c <MX_USART3_UART_Init+0x4c>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004700:	4b06      	ldr	r3, [pc, #24]	; (800471c <MX_USART3_UART_Init+0x4c>)
 8004702:	2200      	movs	r2, #0
 8004704:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004706:	4805      	ldr	r0, [pc, #20]	; (800471c <MX_USART3_UART_Init+0x4c>)
 8004708:	f005 fb1e 	bl	8009d48 <HAL_UART_Init>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004712:	f000 f901 	bl	8004918 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004716:	bf00      	nop
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	20000a8c 	.word	0x20000a8c
 8004720:	40004800 	.word	0x40004800

08004724 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800472a:	2300      	movs	r3, #0
 800472c:	607b      	str	r3, [r7, #4]
 800472e:	4b10      	ldr	r3, [pc, #64]	; (8004770 <MX_DMA_Init+0x4c>)
 8004730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004732:	4a0f      	ldr	r2, [pc, #60]	; (8004770 <MX_DMA_Init+0x4c>)
 8004734:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004738:	6313      	str	r3, [r2, #48]	; 0x30
 800473a:	4b0d      	ldr	r3, [pc, #52]	; (8004770 <MX_DMA_Init+0x4c>)
 800473c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004742:	607b      	str	r3, [r7, #4]
 8004744:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8004746:	2200      	movs	r2, #0
 8004748:	2105      	movs	r1, #5
 800474a:	200c      	movs	r0, #12
 800474c:	f001 fd46 	bl	80061dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8004750:	200c      	movs	r0, #12
 8004752:	f001 fd5f 	bl	8006214 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8004756:	2200      	movs	r2, #0
 8004758:	2105      	movs	r1, #5
 800475a:	200e      	movs	r0, #14
 800475c:	f001 fd3e 	bl	80061dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8004760:	200e      	movs	r0, #14
 8004762:	f001 fd57 	bl	8006214 <HAL_NVIC_EnableIRQ>

}
 8004766:	bf00      	nop
 8004768:	3708      	adds	r7, #8
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	40023800 	.word	0x40023800

08004774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b08a      	sub	sp, #40	; 0x28
 8004778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800477a:	f107 0314 	add.w	r3, r7, #20
 800477e:	2200      	movs	r2, #0
 8004780:	601a      	str	r2, [r3, #0]
 8004782:	605a      	str	r2, [r3, #4]
 8004784:	609a      	str	r2, [r3, #8]
 8004786:	60da      	str	r2, [r3, #12]
 8004788:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800478a:	2300      	movs	r3, #0
 800478c:	613b      	str	r3, [r7, #16]
 800478e:	4b51      	ldr	r3, [pc, #324]	; (80048d4 <MX_GPIO_Init+0x160>)
 8004790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004792:	4a50      	ldr	r2, [pc, #320]	; (80048d4 <MX_GPIO_Init+0x160>)
 8004794:	f043 0310 	orr.w	r3, r3, #16
 8004798:	6313      	str	r3, [r2, #48]	; 0x30
 800479a:	4b4e      	ldr	r3, [pc, #312]	; (80048d4 <MX_GPIO_Init+0x160>)
 800479c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479e:	f003 0310 	and.w	r3, r3, #16
 80047a2:	613b      	str	r3, [r7, #16]
 80047a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80047a6:	2300      	movs	r3, #0
 80047a8:	60fb      	str	r3, [r7, #12]
 80047aa:	4b4a      	ldr	r3, [pc, #296]	; (80048d4 <MX_GPIO_Init+0x160>)
 80047ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ae:	4a49      	ldr	r2, [pc, #292]	; (80048d4 <MX_GPIO_Init+0x160>)
 80047b0:	f043 0304 	orr.w	r3, r3, #4
 80047b4:	6313      	str	r3, [r2, #48]	; 0x30
 80047b6:	4b47      	ldr	r3, [pc, #284]	; (80048d4 <MX_GPIO_Init+0x160>)
 80047b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ba:	f003 0304 	and.w	r3, r3, #4
 80047be:	60fb      	str	r3, [r7, #12]
 80047c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80047c2:	2300      	movs	r3, #0
 80047c4:	60bb      	str	r3, [r7, #8]
 80047c6:	4b43      	ldr	r3, [pc, #268]	; (80048d4 <MX_GPIO_Init+0x160>)
 80047c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ca:	4a42      	ldr	r2, [pc, #264]	; (80048d4 <MX_GPIO_Init+0x160>)
 80047cc:	f043 0301 	orr.w	r3, r3, #1
 80047d0:	6313      	str	r3, [r2, #48]	; 0x30
 80047d2:	4b40      	ldr	r3, [pc, #256]	; (80048d4 <MX_GPIO_Init+0x160>)
 80047d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	60bb      	str	r3, [r7, #8]
 80047dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80047de:	2300      	movs	r3, #0
 80047e0:	607b      	str	r3, [r7, #4]
 80047e2:	4b3c      	ldr	r3, [pc, #240]	; (80048d4 <MX_GPIO_Init+0x160>)
 80047e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e6:	4a3b      	ldr	r2, [pc, #236]	; (80048d4 <MX_GPIO_Init+0x160>)
 80047e8:	f043 0308 	orr.w	r3, r3, #8
 80047ec:	6313      	str	r3, [r2, #48]	; 0x30
 80047ee:	4b39      	ldr	r3, [pc, #228]	; (80048d4 <MX_GPIO_Init+0x160>)
 80047f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f2:	f003 0308 	and.w	r3, r3, #8
 80047f6:	607b      	str	r3, [r7, #4]
 80047f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80047fa:	2300      	movs	r3, #0
 80047fc:	603b      	str	r3, [r7, #0]
 80047fe:	4b35      	ldr	r3, [pc, #212]	; (80048d4 <MX_GPIO_Init+0x160>)
 8004800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004802:	4a34      	ldr	r2, [pc, #208]	; (80048d4 <MX_GPIO_Init+0x160>)
 8004804:	f043 0302 	orr.w	r3, r3, #2
 8004808:	6313      	str	r3, [r2, #48]	; 0x30
 800480a:	4b32      	ldr	r3, [pc, #200]	; (80048d4 <MX_GPIO_Init+0x160>)
 800480c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	603b      	str	r3, [r7, #0]
 8004814:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCLK_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8004816:	2200      	movs	r2, #0
 8004818:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 800481c:	482e      	ldr	r0, [pc, #184]	; (80048d8 <MX_GPIO_Init+0x164>)
 800481e:	f002 faa5 	bl	8006d6c <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8004822:	2200      	movs	r2, #0
 8004824:	213c      	movs	r1, #60	; 0x3c
 8004826:	482d      	ldr	r0, [pc, #180]	; (80048dc <MX_GPIO_Init+0x168>)
 8004828:	f002 faa0 	bl	8006d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCLK_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin;
 800482c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004832:	2301      	movs	r3, #1
 8004834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004836:	2300      	movs	r3, #0
 8004838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800483a:	2300      	movs	r3, #0
 800483c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800483e:	f107 0314 	add.w	r3, r7, #20
 8004842:	4619      	mov	r1, r3
 8004844:	4824      	ldr	r0, [pc, #144]	; (80048d8 <MX_GPIO_Init+0x164>)
 8004846:	f002 f8f5 	bl	8006a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin;
 800484a:	231c      	movs	r3, #28
 800484c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800484e:	2301      	movs	r3, #1
 8004850:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004852:	2300      	movs	r3, #0
 8004854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004856:	2302      	movs	r3, #2
 8004858:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800485a:	f107 0314 	add.w	r3, r7, #20
 800485e:	4619      	mov	r1, r3
 8004860:	481e      	ldr	r0, [pc, #120]	; (80048dc <MX_GPIO_Init+0x168>)
 8004862:	f002 f8e7 	bl	8006a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : BIN2_Pin */
  GPIO_InitStruct.Pin = BIN2_Pin;
 8004866:	2320      	movs	r3, #32
 8004868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800486a:	2301      	movs	r3, #1
 800486c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800486e:	2300      	movs	r3, #0
 8004870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004872:	2301      	movs	r3, #1
 8004874:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BIN2_GPIO_Port, &GPIO_InitStruct);
 8004876:	f107 0314 	add.w	r3, r7, #20
 800487a:	4619      	mov	r1, r3
 800487c:	4817      	ldr	r0, [pc, #92]	; (80048dc <MX_GPIO_Init+0x168>)
 800487e:	f002 f8d9 	bl	8006a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8004882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004888:	2301      	movs	r3, #1
 800488a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800488c:	2300      	movs	r3, #0
 800488e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004890:	2301      	movs	r3, #1
 8004892:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8004894:	f107 0314 	add.w	r3, r7, #20
 8004898:	4619      	mov	r1, r3
 800489a:	480f      	ldr	r0, [pc, #60]	; (80048d8 <MX_GPIO_Init+0x164>)
 800489c:	f002 f8ca 	bl	8006a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80048a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80048a6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80048aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ac:	2300      	movs	r3, #0
 80048ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048b0:	f107 0314 	add.w	r3, r7, #20
 80048b4:	4619      	mov	r1, r3
 80048b6:	480a      	ldr	r0, [pc, #40]	; (80048e0 <MX_GPIO_Init+0x16c>)
 80048b8:	f002 f8bc 	bl	8006a34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80048bc:	2200      	movs	r2, #0
 80048be:	2105      	movs	r1, #5
 80048c0:	2017      	movs	r0, #23
 80048c2:	f001 fc8b 	bl	80061dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80048c6:	2017      	movs	r0, #23
 80048c8:	f001 fca4 	bl	8006214 <HAL_NVIC_EnableIRQ>

}
 80048cc:	bf00      	nop
 80048ce:	3728      	adds	r7, #40	; 0x28
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	40023800 	.word	0x40023800
 80048d8:	40021000 	.word	0x40021000
 80048dc:	40020000 	.word	0x40020000
 80048e0:	40020c00 	.word	0x40020c00

080048e4 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
	/* Infinite loop */

	for (;;) {

		//OLED_Refresh_Gram(); // Refresh Ram
		osDelay(50);
 80048ec:	2032      	movs	r0, #50	; 0x32
 80048ee:	f006 fe69 	bl	800b5c4 <osDelay>
 80048f2:	e7fb      	b.n	80048ec <StartDefaultTask+0x8>

080048f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a04      	ldr	r2, [pc, #16]	; (8004914 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d101      	bne.n	800490a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004906:	f000 ff6d 	bl	80057e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800490a:	bf00      	nop
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	40001400 	.word	0x40001400

08004918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004918:	b480      	push	{r7}
 800491a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800491c:	b672      	cpsid	i
}
 800491e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004920:	e7fe      	b.n	8004920 <Error_Handler+0x8>

08004922 <_Z8PID_initP12pid_type_defhPKfff>:
  * @param[in]      max_out: pid最大输出
  * @param[in]      max_iout: pid最大积分输出
  * @retval         none
  */
void PID_init(pid_type_def *pid, uint8_t mode, const float PID[3], float max_out, float max_iout)
{
 8004922:	b480      	push	{r7}
 8004924:	b087      	sub	sp, #28
 8004926:	af00      	add	r7, sp, #0
 8004928:	6178      	str	r0, [r7, #20]
 800492a:	460b      	mov	r3, r1
 800492c:	60fa      	str	r2, [r7, #12]
 800492e:	ed87 0a02 	vstr	s0, [r7, #8]
 8004932:	edc7 0a01 	vstr	s1, [r7, #4]
 8004936:	74fb      	strb	r3, [r7, #19]
    if (pid == NULL || PID == NULL)
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d042      	beq.n	80049c4 <_Z8PID_initP12pid_type_defhPKfff+0xa2>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d03f      	beq.n	80049c4 <_Z8PID_initP12pid_type_defhPKfff+0xa2>
    {
        return;
    }
    pid->mode = mode;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	7cfa      	ldrb	r2, [r7, #19]
 8004948:	701a      	strb	r2, [r3, #0]
    pid->Kp = PID[0];
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	605a      	str	r2, [r3, #4]
    pid->Ki = PID[1];
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	3304      	adds	r3, #4
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	609a      	str	r2, [r3, #8]
    pid->Kd = PID[2];
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	3308      	adds	r3, #8
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	60da      	str	r2, [r3, #12]
    pid->max_out = max_out;
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	611a      	str	r2, [r3, #16]
    pid->max_iout = max_iout;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	615a      	str	r2, [r3, #20]
    pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f04f 0200 	mov.w	r2, #0
 8004978:	639a      	str	r2, [r3, #56]	; 0x38
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	635a      	str	r2, [r3, #52]	; 0x34
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	631a      	str	r2, [r3, #48]	; 0x30
    pid->error[0] = pid->error[1] = pid->error[2] = pid->Pout = pid->Iout = pid->Dout = pid->out = 0.0f;
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f04f 0200 	mov.w	r2, #0
 8004990:	621a      	str	r2, [r3, #32]
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	6a1a      	ldr	r2, [r3, #32]
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	62da      	str	r2, [r3, #44]	; 0x2c
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	629a      	str	r2, [r3, #40]	; 0x28
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	625a      	str	r2, [r3, #36]	; 0x24
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	645a      	str	r2, [r3, #68]	; 0x44
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	641a      	str	r2, [r3, #64]	; 0x40
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	63da      	str	r2, [r3, #60]	; 0x3c
 80049c2:	e000      	b.n	80049c6 <_Z8PID_initP12pid_type_defhPKfff+0xa4>
        return;
 80049c4:	bf00      	nop
}
 80049c6:	371c      	adds	r7, #28
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <_Z8PID_calcP12pid_type_defff>:
  * @param[in]      ref: 反馈数据
  * @param[in]      set: 设定值
  * @retval         pid输出
  */
float PID_calc(pid_type_def *pid, float ref, float set)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80049dc:	edc7 0a01 	vstr	s1, [r7, #4]
    if (pid == NULL)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d102      	bne.n	80049ec <_Z8PID_calcP12pid_type_defff+0x1c>
    {
        return 0.0f;
 80049e6:	f04f 0300 	mov.w	r3, #0
 80049ea:	e130      	b.n	8004c4e <_Z8PID_calcP12pid_type_defff+0x27e>
    }

    pid->error[2] = pid->error[1];
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	645a      	str	r2, [r3, #68]	; 0x44
    pid->error[1] = pid->error[0];
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	641a      	str	r2, [r3, #64]	; 0x40
    pid->set = set;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	619a      	str	r2, [r3, #24]
    pid->fdb = ref;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	61da      	str	r2, [r3, #28]
    pid->error[0] = set - ref;
 8004a08:	ed97 7a01 	vldr	s14, [r7, #4]
 8004a0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004a10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    if (pid->mode == PID_POSITION)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f040 8095 	bne.w	8004b4e <_Z8PID_calcP12pid_type_defff+0x17e>
    {
        pid->Pout = pid->Kp * pid->error[0];
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	ed93 7a01 	vldr	s14, [r3, #4]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004a30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
        pid->Iout += pid->Ki * pid->error[0];
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	edd3 6a02 	vldr	s13, [r3, #8]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004a4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	639a      	str	r2, [r3, #56]	; 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	635a      	str	r2, [r3, #52]	; 0x34
        pid->Dbuf[0] = (pid->error[0] - pid->error[1]);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8004a76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	ed93 7a03 	vldr	s14, [r3, #12]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004a8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        LimitMax(pid->Iout, pid->max_iout);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	edd3 7a05 	vldr	s15, [r3, #20]
 8004aa2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aaa:	dd04      	ble.n	8004ab6 <_Z8PID_calcP12pid_type_defff+0xe6>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	695a      	ldr	r2, [r3, #20]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	629a      	str	r2, [r3, #40]	; 0x28
 8004ab4:	e014      	b.n	8004ae0 <_Z8PID_calcP12pid_type_defff+0x110>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	edd3 7a05 	vldr	s15, [r3, #20]
 8004ac2:	eef1 7a67 	vneg.f32	s15, s15
 8004ac6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ace:	d507      	bpl.n	8004ae0 <_Z8PID_calcP12pid_type_defff+0x110>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	edd3 7a05 	vldr	s15, [r3, #20]
 8004ad6:	eef1 7a67 	vneg.f32	s15, s15
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        pid->out = pid->Pout + pid->Iout + pid->Dout;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004aec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004af6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	ed93 7a08 	vldr	s14, [r3, #32]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	edd3 7a04 	vldr	s15, [r3, #16]
 8004b0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b14:	dd04      	ble.n	8004b20 <_Z8PID_calcP12pid_type_defff+0x150>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	691a      	ldr	r2, [r3, #16]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	621a      	str	r2, [r3, #32]
 8004b1e:	e094      	b.n	8004c4a <_Z8PID_calcP12pid_type_defff+0x27a>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	ed93 7a08 	vldr	s14, [r3, #32]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	edd3 7a04 	vldr	s15, [r3, #16]
 8004b2c:	eef1 7a67 	vneg.f32	s15, s15
 8004b30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b38:	f140 8087 	bpl.w	8004c4a <_Z8PID_calcP12pid_type_defff+0x27a>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	edd3 7a04 	vldr	s15, [r3, #16]
 8004b42:	eef1 7a67 	vneg.f32	s15, s15
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	edc3 7a08 	vstr	s15, [r3, #32]
 8004b4c:	e07d      	b.n	8004c4a <_Z8PID_calcP12pid_type_defff+0x27a>
    }
    else if (pid->mode == PID_DELTA)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d179      	bne.n	8004c4a <_Z8PID_calcP12pid_type_defff+0x27a>
    {
        pid->Pout = pid->Kp * (pid->error[0] - pid->error[1]);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	ed93 7a01 	vldr	s14, [r3, #4]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8004b68:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004b6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
        pid->Iout = pid->Ki * pid->error[0];
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	ed93 7a02 	vldr	s14, [r3, #8]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	639a      	str	r2, [r3, #56]	; 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	635a      	str	r2, [r3, #52]	; 0x34
        pid->Dbuf[0] = (pid->error[0] - 2.0f * pid->error[1] + pid->error[2]);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8004ba8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004bac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004bb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	ed93 7a03 	vldr	s14, [r3, #12]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        pid->out += pid->Pout + pid->Iout + pid->Dout;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	ed93 7a08 	vldr	s14, [r3, #32]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004be8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	ed93 7a08 	vldr	s14, [r3, #32]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	edd3 7a04 	vldr	s15, [r3, #16]
 8004c0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c14:	dd04      	ble.n	8004c20 <_Z8PID_calcP12pid_type_defff+0x250>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	691a      	ldr	r2, [r3, #16]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	621a      	str	r2, [r3, #32]
 8004c1e:	e014      	b.n	8004c4a <_Z8PID_calcP12pid_type_defff+0x27a>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	ed93 7a08 	vldr	s14, [r3, #32]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	edd3 7a04 	vldr	s15, [r3, #16]
 8004c2c:	eef1 7a67 	vneg.f32	s15, s15
 8004c30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c38:	d507      	bpl.n	8004c4a <_Z8PID_calcP12pid_type_defff+0x27a>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	edd3 7a04 	vldr	s15, [r3, #16]
 8004c40:	eef1 7a67 	vneg.f32	s15, s15
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	edc3 7a08 	vstr	s15, [r3, #32]
    }
    return pid->out;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
}
 8004c4e:	ee07 3a90 	vmov	s15, r3
 8004c52:	eeb0 0a67 	vmov.f32	s0, s15
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c66:	2300      	movs	r3, #0
 8004c68:	607b      	str	r3, [r7, #4]
 8004c6a:	4b12      	ldr	r3, [pc, #72]	; (8004cb4 <HAL_MspInit+0x54>)
 8004c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c6e:	4a11      	ldr	r2, [pc, #68]	; (8004cb4 <HAL_MspInit+0x54>)
 8004c70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c74:	6453      	str	r3, [r2, #68]	; 0x44
 8004c76:	4b0f      	ldr	r3, [pc, #60]	; (8004cb4 <HAL_MspInit+0x54>)
 8004c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c7e:	607b      	str	r3, [r7, #4]
 8004c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c82:	2300      	movs	r3, #0
 8004c84:	603b      	str	r3, [r7, #0]
 8004c86:	4b0b      	ldr	r3, [pc, #44]	; (8004cb4 <HAL_MspInit+0x54>)
 8004c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8a:	4a0a      	ldr	r2, [pc, #40]	; (8004cb4 <HAL_MspInit+0x54>)
 8004c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c90:	6413      	str	r3, [r2, #64]	; 0x40
 8004c92:	4b08      	ldr	r3, [pc, #32]	; (8004cb4 <HAL_MspInit+0x54>)
 8004c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c9a:	603b      	str	r3, [r7, #0]
 8004c9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	210f      	movs	r1, #15
 8004ca2:	f06f 0001 	mvn.w	r0, #1
 8004ca6:	f001 fa99 	bl	80061dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004caa:	bf00      	nop
 8004cac:	3708      	adds	r7, #8
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	40023800 	.word	0x40023800

08004cb8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b08c      	sub	sp, #48	; 0x30
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cc0:	f107 031c 	add.w	r3, r7, #28
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	601a      	str	r2, [r3, #0]
 8004cc8:	605a      	str	r2, [r3, #4]
 8004cca:	609a      	str	r2, [r3, #8]
 8004ccc:	60da      	str	r2, [r3, #12]
 8004cce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a2e      	ldr	r2, [pc, #184]	; (8004d90 <HAL_ADC_MspInit+0xd8>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d128      	bne.n	8004d2c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004cda:	2300      	movs	r3, #0
 8004cdc:	61bb      	str	r3, [r7, #24]
 8004cde:	4b2d      	ldr	r3, [pc, #180]	; (8004d94 <HAL_ADC_MspInit+0xdc>)
 8004ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce2:	4a2c      	ldr	r2, [pc, #176]	; (8004d94 <HAL_ADC_MspInit+0xdc>)
 8004ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ce8:	6453      	str	r3, [r2, #68]	; 0x44
 8004cea:	4b2a      	ldr	r3, [pc, #168]	; (8004d94 <HAL_ADC_MspInit+0xdc>)
 8004cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf2:	61bb      	str	r3, [r7, #24]
 8004cf4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	617b      	str	r3, [r7, #20]
 8004cfa:	4b26      	ldr	r3, [pc, #152]	; (8004d94 <HAL_ADC_MspInit+0xdc>)
 8004cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfe:	4a25      	ldr	r2, [pc, #148]	; (8004d94 <HAL_ADC_MspInit+0xdc>)
 8004d00:	f043 0304 	orr.w	r3, r3, #4
 8004d04:	6313      	str	r3, [r2, #48]	; 0x30
 8004d06:	4b23      	ldr	r3, [pc, #140]	; (8004d94 <HAL_ADC_MspInit+0xdc>)
 8004d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0a:	f003 0304 	and.w	r3, r3, #4
 8004d0e:	617b      	str	r3, [r7, #20]
 8004d10:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004d12:	2301      	movs	r3, #1
 8004d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d16:	2303      	movs	r3, #3
 8004d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d1e:	f107 031c 	add.w	r3, r7, #28
 8004d22:	4619      	mov	r1, r3
 8004d24:	481c      	ldr	r0, [pc, #112]	; (8004d98 <HAL_ADC_MspInit+0xe0>)
 8004d26:	f001 fe85 	bl	8006a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004d2a:	e02c      	b.n	8004d86 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a1a      	ldr	r2, [pc, #104]	; (8004d9c <HAL_ADC_MspInit+0xe4>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d127      	bne.n	8004d86 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004d36:	2300      	movs	r3, #0
 8004d38:	613b      	str	r3, [r7, #16]
 8004d3a:	4b16      	ldr	r3, [pc, #88]	; (8004d94 <HAL_ADC_MspInit+0xdc>)
 8004d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3e:	4a15      	ldr	r2, [pc, #84]	; (8004d94 <HAL_ADC_MspInit+0xdc>)
 8004d40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d44:	6453      	str	r3, [r2, #68]	; 0x44
 8004d46:	4b13      	ldr	r3, [pc, #76]	; (8004d94 <HAL_ADC_MspInit+0xdc>)
 8004d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d4e:	613b      	str	r3, [r7, #16]
 8004d50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d52:	2300      	movs	r3, #0
 8004d54:	60fb      	str	r3, [r7, #12]
 8004d56:	4b0f      	ldr	r3, [pc, #60]	; (8004d94 <HAL_ADC_MspInit+0xdc>)
 8004d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5a:	4a0e      	ldr	r2, [pc, #56]	; (8004d94 <HAL_ADC_MspInit+0xdc>)
 8004d5c:	f043 0301 	orr.w	r3, r3, #1
 8004d60:	6313      	str	r3, [r2, #48]	; 0x30
 8004d62:	4b0c      	ldr	r3, [pc, #48]	; (8004d94 <HAL_ADC_MspInit+0xdc>)
 8004d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d72:	2303      	movs	r3, #3
 8004d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d76:	2300      	movs	r3, #0
 8004d78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d7a:	f107 031c 	add.w	r3, r7, #28
 8004d7e:	4619      	mov	r1, r3
 8004d80:	4807      	ldr	r0, [pc, #28]	; (8004da0 <HAL_ADC_MspInit+0xe8>)
 8004d82:	f001 fe57 	bl	8006a34 <HAL_GPIO_Init>
}
 8004d86:	bf00      	nop
 8004d88:	3730      	adds	r7, #48	; 0x30
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	40012000 	.word	0x40012000
 8004d94:	40023800 	.word	0x40023800
 8004d98:	40020800 	.word	0x40020800
 8004d9c:	40012100 	.word	0x40012100
 8004da0:	40020000 	.word	0x40020000

08004da4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b08a      	sub	sp, #40	; 0x28
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dac:	f107 0314 	add.w	r3, r7, #20
 8004db0:	2200      	movs	r2, #0
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	605a      	str	r2, [r3, #4]
 8004db6:	609a      	str	r2, [r3, #8]
 8004db8:	60da      	str	r2, [r3, #12]
 8004dba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a19      	ldr	r2, [pc, #100]	; (8004e28 <HAL_I2C_MspInit+0x84>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d12c      	bne.n	8004e20 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	613b      	str	r3, [r7, #16]
 8004dca:	4b18      	ldr	r3, [pc, #96]	; (8004e2c <HAL_I2C_MspInit+0x88>)
 8004dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dce:	4a17      	ldr	r2, [pc, #92]	; (8004e2c <HAL_I2C_MspInit+0x88>)
 8004dd0:	f043 0302 	orr.w	r3, r3, #2
 8004dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8004dd6:	4b15      	ldr	r3, [pc, #84]	; (8004e2c <HAL_I2C_MspInit+0x88>)
 8004dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	613b      	str	r3, [r7, #16]
 8004de0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004de2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004de8:	2312      	movs	r3, #18
 8004dea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dec:	2300      	movs	r3, #0
 8004dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004df0:	2303      	movs	r3, #3
 8004df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004df4:	2304      	movs	r3, #4
 8004df6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004df8:	f107 0314 	add.w	r3, r7, #20
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	480c      	ldr	r0, [pc, #48]	; (8004e30 <HAL_I2C_MspInit+0x8c>)
 8004e00:	f001 fe18 	bl	8006a34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004e04:	2300      	movs	r3, #0
 8004e06:	60fb      	str	r3, [r7, #12]
 8004e08:	4b08      	ldr	r3, [pc, #32]	; (8004e2c <HAL_I2C_MspInit+0x88>)
 8004e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0c:	4a07      	ldr	r2, [pc, #28]	; (8004e2c <HAL_I2C_MspInit+0x88>)
 8004e0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e12:	6413      	str	r3, [r2, #64]	; 0x40
 8004e14:	4b05      	ldr	r3, [pc, #20]	; (8004e2c <HAL_I2C_MspInit+0x88>)
 8004e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e1c:	60fb      	str	r3, [r7, #12]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004e20:	bf00      	nop
 8004e22:	3728      	adds	r7, #40	; 0x28
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	40005400 	.word	0x40005400
 8004e2c:	40023800 	.word	0x40023800
 8004e30:	40020400 	.word	0x40020400

08004e34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b08c      	sub	sp, #48	; 0x30
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e3c:	f107 031c 	add.w	r3, r7, #28
 8004e40:	2200      	movs	r2, #0
 8004e42:	601a      	str	r2, [r3, #0]
 8004e44:	605a      	str	r2, [r3, #4]
 8004e46:	609a      	str	r2, [r3, #8]
 8004e48:	60da      	str	r2, [r3, #12]
 8004e4a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a32      	ldr	r2, [pc, #200]	; (8004f1c <HAL_TIM_Base_MspInit+0xe8>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d12d      	bne.n	8004eb2 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004e56:	2300      	movs	r3, #0
 8004e58:	61bb      	str	r3, [r7, #24]
 8004e5a:	4b31      	ldr	r3, [pc, #196]	; (8004f20 <HAL_TIM_Base_MspInit+0xec>)
 8004e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5e:	4a30      	ldr	r2, [pc, #192]	; (8004f20 <HAL_TIM_Base_MspInit+0xec>)
 8004e60:	f043 0301 	orr.w	r3, r3, #1
 8004e64:	6453      	str	r3, [r2, #68]	; 0x44
 8004e66:	4b2e      	ldr	r3, [pc, #184]	; (8004f20 <HAL_TIM_Base_MspInit+0xec>)
 8004e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	61bb      	str	r3, [r7, #24]
 8004e70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004e72:	2300      	movs	r3, #0
 8004e74:	617b      	str	r3, [r7, #20]
 8004e76:	4b2a      	ldr	r3, [pc, #168]	; (8004f20 <HAL_TIM_Base_MspInit+0xec>)
 8004e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7a:	4a29      	ldr	r2, [pc, #164]	; (8004f20 <HAL_TIM_Base_MspInit+0xec>)
 8004e7c:	f043 0310 	orr.w	r3, r3, #16
 8004e80:	6313      	str	r3, [r2, #48]	; 0x30
 8004e82:	4b27      	ldr	r3, [pc, #156]	; (8004f20 <HAL_TIM_Base_MspInit+0xec>)
 8004e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e86:	f003 0310 	and.w	r3, r3, #16
 8004e8a:	617b      	str	r3, [r7, #20]
 8004e8c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Servo_Pin;
 8004e8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e94:	2302      	movs	r3, #2
 8004e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Servo_GPIO_Port, &GPIO_InitStruct);
 8004ea4:	f107 031c 	add.w	r3, r7, #28
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	481e      	ldr	r0, [pc, #120]	; (8004f24 <HAL_TIM_Base_MspInit+0xf0>)
 8004eac:	f001 fdc2 	bl	8006a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004eb0:	e030      	b.n	8004f14 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM8)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a1c      	ldr	r2, [pc, #112]	; (8004f28 <HAL_TIM_Base_MspInit+0xf4>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d12b      	bne.n	8004f14 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	613b      	str	r3, [r7, #16]
 8004ec0:	4b17      	ldr	r3, [pc, #92]	; (8004f20 <HAL_TIM_Base_MspInit+0xec>)
 8004ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec4:	4a16      	ldr	r2, [pc, #88]	; (8004f20 <HAL_TIM_Base_MspInit+0xec>)
 8004ec6:	f043 0302 	orr.w	r3, r3, #2
 8004eca:	6453      	str	r3, [r2, #68]	; 0x44
 8004ecc:	4b14      	ldr	r3, [pc, #80]	; (8004f20 <HAL_TIM_Base_MspInit+0xec>)
 8004ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	613b      	str	r3, [r7, #16]
 8004ed6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ed8:	2300      	movs	r3, #0
 8004eda:	60fb      	str	r3, [r7, #12]
 8004edc:	4b10      	ldr	r3, [pc, #64]	; (8004f20 <HAL_TIM_Base_MspInit+0xec>)
 8004ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee0:	4a0f      	ldr	r2, [pc, #60]	; (8004f20 <HAL_TIM_Base_MspInit+0xec>)
 8004ee2:	f043 0304 	orr.w	r3, r3, #4
 8004ee6:	6313      	str	r3, [r2, #48]	; 0x30
 8004ee8:	4b0d      	ldr	r3, [pc, #52]	; (8004f20 <HAL_TIM_Base_MspInit+0xec>)
 8004eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	60fb      	str	r3, [r7, #12]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8004ef4:	23c0      	movs	r3, #192	; 0xc0
 8004ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ef8:	2302      	movs	r3, #2
 8004efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004efc:	2300      	movs	r3, #0
 8004efe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f00:	2300      	movs	r3, #0
 8004f02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004f04:	2303      	movs	r3, #3
 8004f06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f08:	f107 031c 	add.w	r3, r7, #28
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	4807      	ldr	r0, [pc, #28]	; (8004f2c <HAL_TIM_Base_MspInit+0xf8>)
 8004f10:	f001 fd90 	bl	8006a34 <HAL_GPIO_Init>
}
 8004f14:	bf00      	nop
 8004f16:	3730      	adds	r7, #48	; 0x30
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	40010000 	.word	0x40010000
 8004f20:	40023800 	.word	0x40023800
 8004f24:	40021000 	.word	0x40021000
 8004f28:	40010400 	.word	0x40010400
 8004f2c:	40020800 	.word	0x40020800

08004f30 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b08c      	sub	sp, #48	; 0x30
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f38:	f107 031c 	add.w	r3, r7, #28
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	601a      	str	r2, [r3, #0]
 8004f40:	605a      	str	r2, [r3, #4]
 8004f42:	609a      	str	r2, [r3, #8]
 8004f44:	60da      	str	r2, [r3, #12]
 8004f46:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f50:	d14b      	bne.n	8004fea <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004f52:	2300      	movs	r3, #0
 8004f54:	61bb      	str	r3, [r7, #24]
 8004f56:	4b3f      	ldr	r3, [pc, #252]	; (8005054 <HAL_TIM_Encoder_MspInit+0x124>)
 8004f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5a:	4a3e      	ldr	r2, [pc, #248]	; (8005054 <HAL_TIM_Encoder_MspInit+0x124>)
 8004f5c:	f043 0301 	orr.w	r3, r3, #1
 8004f60:	6413      	str	r3, [r2, #64]	; 0x40
 8004f62:	4b3c      	ldr	r3, [pc, #240]	; (8005054 <HAL_TIM_Encoder_MspInit+0x124>)
 8004f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	61bb      	str	r3, [r7, #24]
 8004f6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f6e:	2300      	movs	r3, #0
 8004f70:	617b      	str	r3, [r7, #20]
 8004f72:	4b38      	ldr	r3, [pc, #224]	; (8005054 <HAL_TIM_Encoder_MspInit+0x124>)
 8004f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f76:	4a37      	ldr	r2, [pc, #220]	; (8005054 <HAL_TIM_Encoder_MspInit+0x124>)
 8004f78:	f043 0301 	orr.w	r3, r3, #1
 8004f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f7e:	4b35      	ldr	r3, [pc, #212]	; (8005054 <HAL_TIM_Encoder_MspInit+0x124>)
 8004f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	617b      	str	r3, [r7, #20]
 8004f88:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	613b      	str	r3, [r7, #16]
 8004f8e:	4b31      	ldr	r3, [pc, #196]	; (8005054 <HAL_TIM_Encoder_MspInit+0x124>)
 8004f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f92:	4a30      	ldr	r2, [pc, #192]	; (8005054 <HAL_TIM_Encoder_MspInit+0x124>)
 8004f94:	f043 0302 	orr.w	r3, r3, #2
 8004f98:	6313      	str	r3, [r2, #48]	; 0x30
 8004f9a:	4b2e      	ldr	r3, [pc, #184]	; (8005054 <HAL_TIM_Encoder_MspInit+0x124>)
 8004f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	613b      	str	r3, [r7, #16]
 8004fa4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004fa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004faa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fac:	2302      	movs	r3, #2
 8004fae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fbc:	f107 031c 	add.w	r3, r7, #28
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	4825      	ldr	r0, [pc, #148]	; (8005058 <HAL_TIM_Encoder_MspInit+0x128>)
 8004fc4:	f001 fd36 	bl	8006a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004fc8:	2308      	movs	r3, #8
 8004fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fcc:	2302      	movs	r3, #2
 8004fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fdc:	f107 031c 	add.w	r3, r7, #28
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	481e      	ldr	r0, [pc, #120]	; (800505c <HAL_TIM_Encoder_MspInit+0x12c>)
 8004fe4:	f001 fd26 	bl	8006a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004fe8:	e030      	b.n	800504c <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a1c      	ldr	r2, [pc, #112]	; (8005060 <HAL_TIM_Encoder_MspInit+0x130>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d12b      	bne.n	800504c <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	4b16      	ldr	r3, [pc, #88]	; (8005054 <HAL_TIM_Encoder_MspInit+0x124>)
 8004ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffc:	4a15      	ldr	r2, [pc, #84]	; (8005054 <HAL_TIM_Encoder_MspInit+0x124>)
 8004ffe:	f043 0302 	orr.w	r3, r3, #2
 8005002:	6413      	str	r3, [r2, #64]	; 0x40
 8005004:	4b13      	ldr	r3, [pc, #76]	; (8005054 <HAL_TIM_Encoder_MspInit+0x124>)
 8005006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	60fb      	str	r3, [r7, #12]
 800500e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005010:	2300      	movs	r3, #0
 8005012:	60bb      	str	r3, [r7, #8]
 8005014:	4b0f      	ldr	r3, [pc, #60]	; (8005054 <HAL_TIM_Encoder_MspInit+0x124>)
 8005016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005018:	4a0e      	ldr	r2, [pc, #56]	; (8005054 <HAL_TIM_Encoder_MspInit+0x124>)
 800501a:	f043 0301 	orr.w	r3, r3, #1
 800501e:	6313      	str	r3, [r2, #48]	; 0x30
 8005020:	4b0c      	ldr	r3, [pc, #48]	; (8005054 <HAL_TIM_Encoder_MspInit+0x124>)
 8005022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	60bb      	str	r3, [r7, #8]
 800502a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800502c:	23c0      	movs	r3, #192	; 0xc0
 800502e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005030:	2302      	movs	r3, #2
 8005032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005034:	2300      	movs	r3, #0
 8005036:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005038:	2300      	movs	r3, #0
 800503a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800503c:	2302      	movs	r3, #2
 800503e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005040:	f107 031c 	add.w	r3, r7, #28
 8005044:	4619      	mov	r1, r3
 8005046:	4804      	ldr	r0, [pc, #16]	; (8005058 <HAL_TIM_Encoder_MspInit+0x128>)
 8005048:	f001 fcf4 	bl	8006a34 <HAL_GPIO_Init>
}
 800504c:	bf00      	nop
 800504e:	3730      	adds	r7, #48	; 0x30
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	40023800 	.word	0x40023800
 8005058:	40020000 	.word	0x40020000
 800505c:	40020400 	.word	0x40020400
 8005060:	40000400 	.word	0x40000400

08005064 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b088      	sub	sp, #32
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800506c:	f107 030c 	add.w	r3, r7, #12
 8005070:	2200      	movs	r2, #0
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	605a      	str	r2, [r3, #4]
 8005076:	609a      	str	r2, [r3, #8]
 8005078:	60da      	str	r2, [r3, #12]
 800507a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a12      	ldr	r2, [pc, #72]	; (80050cc <HAL_TIM_MspPostInit+0x68>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d11e      	bne.n	80050c4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005086:	2300      	movs	r3, #0
 8005088:	60bb      	str	r3, [r7, #8]
 800508a:	4b11      	ldr	r3, [pc, #68]	; (80050d0 <HAL_TIM_MspPostInit+0x6c>)
 800508c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508e:	4a10      	ldr	r2, [pc, #64]	; (80050d0 <HAL_TIM_MspPostInit+0x6c>)
 8005090:	f043 0310 	orr.w	r3, r3, #16
 8005094:	6313      	str	r3, [r2, #48]	; 0x30
 8005096:	4b0e      	ldr	r3, [pc, #56]	; (80050d0 <HAL_TIM_MspPostInit+0x6c>)
 8005098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509a:	f003 0310 	and.w	r3, r3, #16
 800509e:	60bb      	str	r3, [r7, #8]
 80050a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80050a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050a8:	2302      	movs	r3, #2
 80050aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ac:	2300      	movs	r3, #0
 80050ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050b0:	2300      	movs	r3, #0
 80050b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80050b4:	2301      	movs	r3, #1
 80050b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80050b8:	f107 030c 	add.w	r3, r7, #12
 80050bc:	4619      	mov	r1, r3
 80050be:	4805      	ldr	r0, [pc, #20]	; (80050d4 <HAL_TIM_MspPostInit+0x70>)
 80050c0:	f001 fcb8 	bl	8006a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80050c4:	bf00      	nop
 80050c6:	3720      	adds	r7, #32
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	40010000 	.word	0x40010000
 80050d0:	40023800 	.word	0x40023800
 80050d4:	40021000 	.word	0x40021000

080050d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b08a      	sub	sp, #40	; 0x28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050e0:	f107 0314 	add.w	r3, r7, #20
 80050e4:	2200      	movs	r2, #0
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	605a      	str	r2, [r3, #4]
 80050ea:	609a      	str	r2, [r3, #8]
 80050ec:	60da      	str	r2, [r3, #12]
 80050ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a5d      	ldr	r2, [pc, #372]	; (800526c <HAL_UART_MspInit+0x194>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	f040 80b4 	bne.w	8005264 <HAL_UART_MspInit+0x18c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80050fc:	2300      	movs	r3, #0
 80050fe:	613b      	str	r3, [r7, #16]
 8005100:	4b5b      	ldr	r3, [pc, #364]	; (8005270 <HAL_UART_MspInit+0x198>)
 8005102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005104:	4a5a      	ldr	r2, [pc, #360]	; (8005270 <HAL_UART_MspInit+0x198>)
 8005106:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800510a:	6413      	str	r3, [r2, #64]	; 0x40
 800510c:	4b58      	ldr	r3, [pc, #352]	; (8005270 <HAL_UART_MspInit+0x198>)
 800510e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005110:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005114:	613b      	str	r3, [r7, #16]
 8005116:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005118:	2300      	movs	r3, #0
 800511a:	60fb      	str	r3, [r7, #12]
 800511c:	4b54      	ldr	r3, [pc, #336]	; (8005270 <HAL_UART_MspInit+0x198>)
 800511e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005120:	4a53      	ldr	r2, [pc, #332]	; (8005270 <HAL_UART_MspInit+0x198>)
 8005122:	f043 0304 	orr.w	r3, r3, #4
 8005126:	6313      	str	r3, [r2, #48]	; 0x30
 8005128:	4b51      	ldr	r3, [pc, #324]	; (8005270 <HAL_UART_MspInit+0x198>)
 800512a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512c:	f003 0304 	and.w	r3, r3, #4
 8005130:	60fb      	str	r3, [r7, #12]
 8005132:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800513a:	2302      	movs	r3, #2
 800513c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800513e:	2300      	movs	r3, #0
 8005140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005142:	2302      	movs	r3, #2
 8005144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005146:	2307      	movs	r3, #7
 8005148:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800514a:	f107 0314 	add.w	r3, r7, #20
 800514e:	4619      	mov	r1, r3
 8005150:	4848      	ldr	r0, [pc, #288]	; (8005274 <HAL_UART_MspInit+0x19c>)
 8005152:	f001 fc6f 	bl	8006a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005156:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800515a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800515c:	2302      	movs	r3, #2
 800515e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005160:	2302      	movs	r3, #2
 8005162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005164:	2302      	movs	r3, #2
 8005166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005168:	2307      	movs	r3, #7
 800516a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800516c:	f107 0314 	add.w	r3, r7, #20
 8005170:	4619      	mov	r1, r3
 8005172:	4840      	ldr	r0, [pc, #256]	; (8005274 <HAL_UART_MspInit+0x19c>)
 8005174:	f001 fc5e 	bl	8006a34 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8005178:	4b3f      	ldr	r3, [pc, #252]	; (8005278 <HAL_UART_MspInit+0x1a0>)
 800517a:	4a40      	ldr	r2, [pc, #256]	; (800527c <HAL_UART_MspInit+0x1a4>)
 800517c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800517e:	4b3e      	ldr	r3, [pc, #248]	; (8005278 <HAL_UART_MspInit+0x1a0>)
 8005180:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005184:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005186:	4b3c      	ldr	r3, [pc, #240]	; (8005278 <HAL_UART_MspInit+0x1a0>)
 8005188:	2200      	movs	r2, #0
 800518a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800518c:	4b3a      	ldr	r3, [pc, #232]	; (8005278 <HAL_UART_MspInit+0x1a0>)
 800518e:	2200      	movs	r2, #0
 8005190:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005192:	4b39      	ldr	r3, [pc, #228]	; (8005278 <HAL_UART_MspInit+0x1a0>)
 8005194:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005198:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800519a:	4b37      	ldr	r3, [pc, #220]	; (8005278 <HAL_UART_MspInit+0x1a0>)
 800519c:	2200      	movs	r2, #0
 800519e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80051a0:	4b35      	ldr	r3, [pc, #212]	; (8005278 <HAL_UART_MspInit+0x1a0>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80051a6:	4b34      	ldr	r3, [pc, #208]	; (8005278 <HAL_UART_MspInit+0x1a0>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80051ac:	4b32      	ldr	r3, [pc, #200]	; (8005278 <HAL_UART_MspInit+0x1a0>)
 80051ae:	2200      	movs	r2, #0
 80051b0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80051b2:	4b31      	ldr	r3, [pc, #196]	; (8005278 <HAL_UART_MspInit+0x1a0>)
 80051b4:	2204      	movs	r2, #4
 80051b6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80051b8:	4b2f      	ldr	r3, [pc, #188]	; (8005278 <HAL_UART_MspInit+0x1a0>)
 80051ba:	2203      	movs	r2, #3
 80051bc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80051be:	4b2e      	ldr	r3, [pc, #184]	; (8005278 <HAL_UART_MspInit+0x1a0>)
 80051c0:	2200      	movs	r2, #0
 80051c2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80051c4:	4b2c      	ldr	r3, [pc, #176]	; (8005278 <HAL_UART_MspInit+0x1a0>)
 80051c6:	2200      	movs	r2, #0
 80051c8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80051ca:	482b      	ldr	r0, [pc, #172]	; (8005278 <HAL_UART_MspInit+0x1a0>)
 80051cc:	f001 f830 	bl	8006230 <HAL_DMA_Init>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d001      	beq.n	80051da <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 80051d6:	f7ff fb9f 	bl	8004918 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a26      	ldr	r2, [pc, #152]	; (8005278 <HAL_UART_MspInit+0x1a0>)
 80051de:	639a      	str	r2, [r3, #56]	; 0x38
 80051e0:	4a25      	ldr	r2, [pc, #148]	; (8005278 <HAL_UART_MspInit+0x1a0>)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80051e6:	4b26      	ldr	r3, [pc, #152]	; (8005280 <HAL_UART_MspInit+0x1a8>)
 80051e8:	4a26      	ldr	r2, [pc, #152]	; (8005284 <HAL_UART_MspInit+0x1ac>)
 80051ea:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80051ec:	4b24      	ldr	r3, [pc, #144]	; (8005280 <HAL_UART_MspInit+0x1a8>)
 80051ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80051f2:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80051f4:	4b22      	ldr	r3, [pc, #136]	; (8005280 <HAL_UART_MspInit+0x1a8>)
 80051f6:	2240      	movs	r2, #64	; 0x40
 80051f8:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80051fa:	4b21      	ldr	r3, [pc, #132]	; (8005280 <HAL_UART_MspInit+0x1a8>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005200:	4b1f      	ldr	r3, [pc, #124]	; (8005280 <HAL_UART_MspInit+0x1a8>)
 8005202:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005206:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005208:	4b1d      	ldr	r3, [pc, #116]	; (8005280 <HAL_UART_MspInit+0x1a8>)
 800520a:	2200      	movs	r2, #0
 800520c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800520e:	4b1c      	ldr	r3, [pc, #112]	; (8005280 <HAL_UART_MspInit+0x1a8>)
 8005210:	2200      	movs	r2, #0
 8005212:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8005214:	4b1a      	ldr	r3, [pc, #104]	; (8005280 <HAL_UART_MspInit+0x1a8>)
 8005216:	2200      	movs	r2, #0
 8005218:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800521a:	4b19      	ldr	r3, [pc, #100]	; (8005280 <HAL_UART_MspInit+0x1a8>)
 800521c:	2200      	movs	r2, #0
 800521e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005220:	4b17      	ldr	r3, [pc, #92]	; (8005280 <HAL_UART_MspInit+0x1a8>)
 8005222:	2204      	movs	r2, #4
 8005224:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005226:	4b16      	ldr	r3, [pc, #88]	; (8005280 <HAL_UART_MspInit+0x1a8>)
 8005228:	2203      	movs	r2, #3
 800522a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800522c:	4b14      	ldr	r3, [pc, #80]	; (8005280 <HAL_UART_MspInit+0x1a8>)
 800522e:	2200      	movs	r2, #0
 8005230:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005232:	4b13      	ldr	r3, [pc, #76]	; (8005280 <HAL_UART_MspInit+0x1a8>)
 8005234:	2200      	movs	r2, #0
 8005236:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8005238:	4811      	ldr	r0, [pc, #68]	; (8005280 <HAL_UART_MspInit+0x1a8>)
 800523a:	f000 fff9 	bl	8006230 <HAL_DMA_Init>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d001      	beq.n	8005248 <HAL_UART_MspInit+0x170>
    {
      Error_Handler();
 8005244:	f7ff fb68 	bl	8004918 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a0d      	ldr	r2, [pc, #52]	; (8005280 <HAL_UART_MspInit+0x1a8>)
 800524c:	635a      	str	r2, [r3, #52]	; 0x34
 800524e:	4a0c      	ldr	r2, [pc, #48]	; (8005280 <HAL_UART_MspInit+0x1a8>)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8005254:	2200      	movs	r2, #0
 8005256:	2105      	movs	r1, #5
 8005258:	2027      	movs	r0, #39	; 0x27
 800525a:	f000 ffbf 	bl	80061dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800525e:	2027      	movs	r0, #39	; 0x27
 8005260:	f000 ffd8 	bl	8006214 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005264:	bf00      	nop
 8005266:	3728      	adds	r7, #40	; 0x28
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	40004800 	.word	0x40004800
 8005270:	40023800 	.word	0x40023800
 8005274:	40020800 	.word	0x40020800
 8005278:	20000b00 	.word	0x20000b00
 800527c:	40026028 	.word	0x40026028
 8005280:	20000b60 	.word	0x20000b60
 8005284:	40026058 	.word	0x40026058

08005288 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b08e      	sub	sp, #56	; 0x38
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8005290:	2300      	movs	r3, #0
 8005292:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8005294:	2300      	movs	r3, #0
 8005296:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8005298:	2300      	movs	r3, #0
 800529a:	60fb      	str	r3, [r7, #12]
 800529c:	4b33      	ldr	r3, [pc, #204]	; (800536c <HAL_InitTick+0xe4>)
 800529e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a0:	4a32      	ldr	r2, [pc, #200]	; (800536c <HAL_InitTick+0xe4>)
 80052a2:	f043 0320 	orr.w	r3, r3, #32
 80052a6:	6413      	str	r3, [r2, #64]	; 0x40
 80052a8:	4b30      	ldr	r3, [pc, #192]	; (800536c <HAL_InitTick+0xe4>)
 80052aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ac:	f003 0320 	and.w	r3, r3, #32
 80052b0:	60fb      	str	r3, [r7, #12]
 80052b2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80052b4:	f107 0210 	add.w	r2, r7, #16
 80052b8:	f107 0314 	add.w	r3, r7, #20
 80052bc:	4611      	mov	r1, r2
 80052be:	4618      	mov	r0, r3
 80052c0:	f003 fb4e 	bl	8008960 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80052c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d103      	bne.n	80052d6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80052ce:	f003 fb1f 	bl	8008910 <HAL_RCC_GetPCLK1Freq>
 80052d2:	6378      	str	r0, [r7, #52]	; 0x34
 80052d4:	e004      	b.n	80052e0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80052d6:	f003 fb1b 	bl	8008910 <HAL_RCC_GetPCLK1Freq>
 80052da:	4603      	mov	r3, r0
 80052dc:	005b      	lsls	r3, r3, #1
 80052de:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80052e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e2:	4a23      	ldr	r2, [pc, #140]	; (8005370 <HAL_InitTick+0xe8>)
 80052e4:	fba2 2303 	umull	r2, r3, r2, r3
 80052e8:	0c9b      	lsrs	r3, r3, #18
 80052ea:	3b01      	subs	r3, #1
 80052ec:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80052ee:	4b21      	ldr	r3, [pc, #132]	; (8005374 <HAL_InitTick+0xec>)
 80052f0:	4a21      	ldr	r2, [pc, #132]	; (8005378 <HAL_InitTick+0xf0>)
 80052f2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80052f4:	4b1f      	ldr	r3, [pc, #124]	; (8005374 <HAL_InitTick+0xec>)
 80052f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80052fa:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80052fc:	4a1d      	ldr	r2, [pc, #116]	; (8005374 <HAL_InitTick+0xec>)
 80052fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005300:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8005302:	4b1c      	ldr	r3, [pc, #112]	; (8005374 <HAL_InitTick+0xec>)
 8005304:	2200      	movs	r2, #0
 8005306:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005308:	4b1a      	ldr	r3, [pc, #104]	; (8005374 <HAL_InitTick+0xec>)
 800530a:	2200      	movs	r2, #0
 800530c:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800530e:	4b19      	ldr	r3, [pc, #100]	; (8005374 <HAL_InitTick+0xec>)
 8005310:	2200      	movs	r2, #0
 8005312:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8005314:	4817      	ldr	r0, [pc, #92]	; (8005374 <HAL_InitTick+0xec>)
 8005316:	f003 fb55 	bl	80089c4 <HAL_TIM_Base_Init>
 800531a:	4603      	mov	r3, r0
 800531c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8005320:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005324:	2b00      	cmp	r3, #0
 8005326:	d11b      	bne.n	8005360 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8005328:	4812      	ldr	r0, [pc, #72]	; (8005374 <HAL_InitTick+0xec>)
 800532a:	f003 fb9b 	bl	8008a64 <HAL_TIM_Base_Start_IT>
 800532e:	4603      	mov	r3, r0
 8005330:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8005334:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005338:	2b00      	cmp	r3, #0
 800533a:	d111      	bne.n	8005360 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800533c:	2037      	movs	r0, #55	; 0x37
 800533e:	f000 ff69 	bl	8006214 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b0f      	cmp	r3, #15
 8005346:	d808      	bhi.n	800535a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8005348:	2200      	movs	r2, #0
 800534a:	6879      	ldr	r1, [r7, #4]
 800534c:	2037      	movs	r0, #55	; 0x37
 800534e:	f000 ff45 	bl	80061dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005352:	4a0a      	ldr	r2, [pc, #40]	; (800537c <HAL_InitTick+0xf4>)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6013      	str	r3, [r2, #0]
 8005358:	e002      	b.n	8005360 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8005360:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8005364:	4618      	mov	r0, r3
 8005366:	3738      	adds	r7, #56	; 0x38
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	40023800 	.word	0x40023800
 8005370:	431bde83 	.word	0x431bde83
 8005374:	20000bc4 	.word	0x20000bc4
 8005378:	40001400 	.word	0x40001400
 800537c:	20000060 	.word	0x20000060

08005380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005380:	b480      	push	{r7}
 8005382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005384:	e7fe      	b.n	8005384 <NMI_Handler+0x4>

08005386 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005386:	b480      	push	{r7}
 8005388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800538a:	e7fe      	b.n	800538a <HardFault_Handler+0x4>

0800538c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800538c:	b480      	push	{r7}
 800538e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005390:	e7fe      	b.n	8005390 <MemManage_Handler+0x4>

08005392 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005392:	b480      	push	{r7}
 8005394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005396:	e7fe      	b.n	8005396 <BusFault_Handler+0x4>

08005398 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005398:	b480      	push	{r7}
 800539a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800539c:	e7fe      	b.n	800539c <UsageFault_Handler+0x4>

0800539e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800539e:	b480      	push	{r7}
 80053a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80053a2:	bf00      	nop
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80053b0:	4802      	ldr	r0, [pc, #8]	; (80053bc <DMA1_Stream1_IRQHandler+0x10>)
 80053b2:	f001 f8d5 	bl	8006560 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80053b6:	bf00      	nop
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	20000b00 	.word	0x20000b00

080053c0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80053c4:	4802      	ldr	r0, [pc, #8]	; (80053d0 <DMA1_Stream3_IRQHandler+0x10>)
 80053c6:	f001 f8cb 	bl	8006560 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80053ca:	bf00      	nop
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	20000b60 	.word	0x20000b60

080053d4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80053d8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80053dc:	f001 fcfa 	bl	8006dd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80053e0:	bf00      	nop
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80053e8:	4802      	ldr	r0, [pc, #8]	; (80053f4 <USART3_IRQHandler+0x10>)
 80053ea:	f004 fe49 	bl	800a080 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80053ee:	bf00      	nop
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	20000a8c 	.word	0x20000a8c

080053f8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80053fc:	4802      	ldr	r0, [pc, #8]	; (8005408 <TIM7_IRQHandler+0x10>)
 80053fe:	f003 fdf7 	bl	8008ff0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005402:	bf00      	nop
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	20000bc4 	.word	0x20000bc4

0800540c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800540c:	b480      	push	{r7}
 800540e:	af00      	add	r7, sp, #0
  return 1;
 8005410:	2301      	movs	r3, #1
}
 8005412:	4618      	mov	r0, r3
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <_kill>:

int _kill(int pid, int sig)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005426:	f00a f935 	bl	800f694 <__errno>
 800542a:	4603      	mov	r3, r0
 800542c:	2216      	movs	r2, #22
 800542e:	601a      	str	r2, [r3, #0]
  return -1;
 8005430:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005434:	4618      	mov	r0, r3
 8005436:	3708      	adds	r7, #8
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <_exit>:

void _exit (int status)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005444:	f04f 31ff 	mov.w	r1, #4294967295
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f7ff ffe7 	bl	800541c <_kill>
  while (1) {}    /* Make sure we hang here */
 800544e:	e7fe      	b.n	800544e <_exit+0x12>

08005450 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800545c:	2300      	movs	r3, #0
 800545e:	617b      	str	r3, [r7, #20]
 8005460:	e00a      	b.n	8005478 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005462:	f3af 8000 	nop.w
 8005466:	4601      	mov	r1, r0
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	1c5a      	adds	r2, r3, #1
 800546c:	60ba      	str	r2, [r7, #8]
 800546e:	b2ca      	uxtb	r2, r1
 8005470:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	3301      	adds	r3, #1
 8005476:	617b      	str	r3, [r7, #20]
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	429a      	cmp	r2, r3
 800547e:	dbf0      	blt.n	8005462 <_read+0x12>
  }

  return len;
 8005480:	687b      	ldr	r3, [r7, #4]
}
 8005482:	4618      	mov	r0, r3
 8005484:	3718      	adds	r7, #24
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800548a:	b580      	push	{r7, lr}
 800548c:	b086      	sub	sp, #24
 800548e:	af00      	add	r7, sp, #0
 8005490:	60f8      	str	r0, [r7, #12]
 8005492:	60b9      	str	r1, [r7, #8]
 8005494:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005496:	2300      	movs	r3, #0
 8005498:	617b      	str	r3, [r7, #20]
 800549a:	e009      	b.n	80054b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	1c5a      	adds	r2, r3, #1
 80054a0:	60ba      	str	r2, [r7, #8]
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7fe fda3 	bl	8003ff0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	3301      	adds	r3, #1
 80054ae:	617b      	str	r3, [r7, #20]
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	dbf1      	blt.n	800549c <_write+0x12>
  }
  return len;
 80054b8:	687b      	ldr	r3, [r7, #4]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3718      	adds	r7, #24
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <_close>:

int _close(int file)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b083      	sub	sp, #12
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80054ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80054da:	b480      	push	{r7}
 80054dc:	b083      	sub	sp, #12
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
 80054e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80054ea:	605a      	str	r2, [r3, #4]
  return 0;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <_isatty>:

int _isatty(int file)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b083      	sub	sp, #12
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005502:	2301      	movs	r3, #1
}
 8005504:	4618      	mov	r0, r3
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3714      	adds	r7, #20
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
	...

0800552c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b086      	sub	sp, #24
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005534:	4a14      	ldr	r2, [pc, #80]	; (8005588 <_sbrk+0x5c>)
 8005536:	4b15      	ldr	r3, [pc, #84]	; (800558c <_sbrk+0x60>)
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005540:	4b13      	ldr	r3, [pc, #76]	; (8005590 <_sbrk+0x64>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d102      	bne.n	800554e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005548:	4b11      	ldr	r3, [pc, #68]	; (8005590 <_sbrk+0x64>)
 800554a:	4a12      	ldr	r2, [pc, #72]	; (8005594 <_sbrk+0x68>)
 800554c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800554e:	4b10      	ldr	r3, [pc, #64]	; (8005590 <_sbrk+0x64>)
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4413      	add	r3, r2
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	429a      	cmp	r2, r3
 800555a:	d207      	bcs.n	800556c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800555c:	f00a f89a 	bl	800f694 <__errno>
 8005560:	4603      	mov	r3, r0
 8005562:	220c      	movs	r2, #12
 8005564:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005566:	f04f 33ff 	mov.w	r3, #4294967295
 800556a:	e009      	b.n	8005580 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800556c:	4b08      	ldr	r3, [pc, #32]	; (8005590 <_sbrk+0x64>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005572:	4b07      	ldr	r3, [pc, #28]	; (8005590 <_sbrk+0x64>)
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4413      	add	r3, r2
 800557a:	4a05      	ldr	r2, [pc, #20]	; (8005590 <_sbrk+0x64>)
 800557c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800557e:	68fb      	ldr	r3, [r7, #12]
}
 8005580:	4618      	mov	r0, r3
 8005582:	3718      	adds	r7, #24
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	20020000 	.word	0x20020000
 800558c:	00000800 	.word	0x00000800
 8005590:	20000c0c 	.word	0x20000c0c
 8005594:	20005c58 	.word	0x20005c58

08005598 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005598:	b480      	push	{r7}
 800559a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800559c:	4b06      	ldr	r3, [pc, #24]	; (80055b8 <SystemInit+0x20>)
 800559e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055a2:	4a05      	ldr	r2, [pc, #20]	; (80055b8 <SystemInit+0x20>)
 80055a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80055a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80055ac:	bf00      	nop
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	e000ed00 	.word	0xe000ed00

080055bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80055bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80055f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80055c0:	480d      	ldr	r0, [pc, #52]	; (80055f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80055c2:	490e      	ldr	r1, [pc, #56]	; (80055fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80055c4:	4a0e      	ldr	r2, [pc, #56]	; (8005600 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80055c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80055c8:	e002      	b.n	80055d0 <LoopCopyDataInit>

080055ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055ce:	3304      	adds	r3, #4

080055d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055d4:	d3f9      	bcc.n	80055ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055d6:	4a0b      	ldr	r2, [pc, #44]	; (8005604 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80055d8:	4c0b      	ldr	r4, [pc, #44]	; (8005608 <LoopFillZerobss+0x26>)
  movs r3, #0
 80055da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80055dc:	e001      	b.n	80055e2 <LoopFillZerobss>

080055de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80055de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80055e0:	3204      	adds	r2, #4

080055e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80055e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80055e4:	d3fb      	bcc.n	80055de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80055e6:	f7ff ffd7 	bl	8005598 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80055ea:	f00a f94f 	bl	800f88c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80055ee:	f7fe fd11 	bl	8004014 <main>
  bx  lr    
 80055f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80055f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80055f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80055fc:	2000023c 	.word	0x2000023c
  ldr r2, =_sidata
 8005600:	080139e4 	.word	0x080139e4
  ldr r2, =_sbss
 8005604:	2000023c 	.word	0x2000023c
  ldr r4, =_ebss
 8005608:	20005c58 	.word	0x20005c58

0800560c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800560c:	e7fe      	b.n	800560c <ADC_IRQHandler>

0800560e <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b084      	sub	sp, #16
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d104      	bne.n	8005626 <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800561c:	b672      	cpsid	i
}
 800561e:	bf00      	nop
 8005620:	f7ff f97a 	bl	8004918 <Error_Handler>
 8005624:	e7fe      	b.n	8005624 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8005626:	2300      	movs	r3, #0
 8005628:	60fb      	str	r3, [r7, #12]
 800562a:	e007      	b.n	800563c <stm32_lock_init+0x2e>
  {
    lock->basepri[i] = 0;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	2100      	movs	r1, #0
 8005632:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	3301      	adds	r3, #1
 800563a:	60fb      	str	r3, [r7, #12]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d9f4      	bls.n	800562c <stm32_lock_init+0x1e>
  }
  lock->nesting_level = 0;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	721a      	strb	r2, [r3, #8]
}
 8005648:	bf00      	nop
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d104      	bne.n	8005668 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800565e:	b672      	cpsid	i
}
 8005660:	bf00      	nop
 8005662:	f7ff f959 	bl	8004918 <Error_Handler>
 8005666:	e7fe      	b.n	8005666 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	7a1b      	ldrb	r3, [r3, #8]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d904      	bls.n	800567a <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8005670:	b672      	cpsid	i
}
 8005672:	bf00      	nop
 8005674:	f7ff f950 	bl	8004918 <Error_Handler>
 8005678:	e7fe      	b.n	8005678 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	7a1b      	ldrb	r3, [r3, #8]
 800567e:	1c5a      	adds	r2, r3, #1
 8005680:	b2d1      	uxtb	r1, r2
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	7211      	strb	r1, [r2, #8]
 8005686:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005688:	f3ef 8211 	mrs	r2, BASEPRI
 800568c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005690:	f383 8811 	msr	BASEPRI, r3
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	60fa      	str	r2, [r7, #12]
 800569e:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80056a8:	bf00      	nop
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d104      	bne.n	80056c8 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80056be:	b672      	cpsid	i
}
 80056c0:	bf00      	nop
 80056c2:	f7ff f929 	bl	8004918 <Error_Handler>
 80056c6:	e7fe      	b.n	80056c6 <stm32_lock_release+0x16>
  lock->nesting_level--;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	7a1b      	ldrb	r3, [r3, #8]
 80056cc:	3b01      	subs	r3, #1
 80056ce:	b2da      	uxtb	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	7a1b      	ldrb	r3, [r3, #8]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d904      	bls.n	80056e6 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 80056dc:	b672      	cpsid	i
}
 80056de:	bf00      	nop
 80056e0:	f7ff f91a 	bl	8004918 <Error_Handler>
 80056e4:	e7fe      	b.n	80056e4 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	7a1b      	ldrb	r3, [r3, #8]
 80056ea:	461a      	mov	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056f2:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80056fa:	bf00      	nop
}
 80056fc:	bf00      	nop
 80056fe:	3710      	adds	r7, #16
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d105      	bne.n	800571e <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8005712:	f009 ffbf 	bl	800f694 <__errno>
 8005716:	4603      	mov	r3, r0
 8005718:	2216      	movs	r2, #22
 800571a:	601a      	str	r2, [r3, #0]
    return;
 800571c:	e015      	b.n	800574a <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 800571e:	200c      	movs	r0, #12
 8005720:	f00a f8d8 	bl	800f8d4 <malloc>
 8005724:	4603      	mov	r3, r0
 8005726:	461a      	mov	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d005      	beq.n	8005740 <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4618      	mov	r0, r3
 800573a:	f7ff ff68 	bl	800560e <stm32_lock_init>
    return;
 800573e:	e004      	b.n	800574a <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 8005740:	b672      	cpsid	i
}
 8005742:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8005744:	f7ff f8e8 	bl	8004918 <Error_Handler>
 8005748:	e7fe      	b.n	8005748 <__retarget_lock_init_recursive+0x44>
}
 800574a:	3708      	adds	r7, #8
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d104      	bne.n	8005768 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800575e:	b672      	cpsid	i
}
 8005760:	bf00      	nop
 8005762:	f7ff f8d9 	bl	8004918 <Error_Handler>
 8005766:	e7fe      	b.n	8005766 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4618      	mov	r0, r3
 800576c:	f7ff ff70 	bl	8005650 <stm32_lock_acquire>
}
 8005770:	bf00      	nop
 8005772:	3708      	adds	r7, #8
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d104      	bne.n	8005790 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8005786:	b672      	cpsid	i
}
 8005788:	bf00      	nop
 800578a:	f7ff f8c5 	bl	8004918 <Error_Handler>
 800578e:	e7fe      	b.n	800578e <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4618      	mov	r0, r3
 8005794:	f7ff ff8c 	bl	80056b0 <stm32_lock_release>
}
 8005798:	bf00      	nop
 800579a:	3708      	adds	r7, #8
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80057a4:	4b0e      	ldr	r3, [pc, #56]	; (80057e0 <HAL_Init+0x40>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a0d      	ldr	r2, [pc, #52]	; (80057e0 <HAL_Init+0x40>)
 80057aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80057b0:	4b0b      	ldr	r3, [pc, #44]	; (80057e0 <HAL_Init+0x40>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a0a      	ldr	r2, [pc, #40]	; (80057e0 <HAL_Init+0x40>)
 80057b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80057bc:	4b08      	ldr	r3, [pc, #32]	; (80057e0 <HAL_Init+0x40>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a07      	ldr	r2, [pc, #28]	; (80057e0 <HAL_Init+0x40>)
 80057c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80057c8:	2003      	movs	r0, #3
 80057ca:	f000 fcfc 	bl	80061c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80057ce:	200f      	movs	r0, #15
 80057d0:	f7ff fd5a 	bl	8005288 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80057d4:	f7ff fa44 	bl	8004c60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	40023c00 	.word	0x40023c00

080057e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80057e4:	b480      	push	{r7}
 80057e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80057e8:	4b06      	ldr	r3, [pc, #24]	; (8005804 <HAL_IncTick+0x20>)
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	461a      	mov	r2, r3
 80057ee:	4b06      	ldr	r3, [pc, #24]	; (8005808 <HAL_IncTick+0x24>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4413      	add	r3, r2
 80057f4:	4a04      	ldr	r2, [pc, #16]	; (8005808 <HAL_IncTick+0x24>)
 80057f6:	6013      	str	r3, [r2, #0]
}
 80057f8:	bf00      	nop
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	20000064 	.word	0x20000064
 8005808:	20000c34 	.word	0x20000c34

0800580c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800580c:	b480      	push	{r7}
 800580e:	af00      	add	r7, sp, #0
  return uwTick;
 8005810:	4b03      	ldr	r3, [pc, #12]	; (8005820 <HAL_GetTick+0x14>)
 8005812:	681b      	ldr	r3, [r3, #0]
}
 8005814:	4618      	mov	r0, r3
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	20000c34 	.word	0x20000c34

08005824 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800582c:	f7ff ffee 	bl	800580c <HAL_GetTick>
 8005830:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583c:	d005      	beq.n	800584a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800583e:	4b0a      	ldr	r3, [pc, #40]	; (8005868 <HAL_Delay+0x44>)
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	461a      	mov	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	4413      	add	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800584a:	bf00      	nop
 800584c:	f7ff ffde 	bl	800580c <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	429a      	cmp	r2, r3
 800585a:	d8f7      	bhi.n	800584c <HAL_Delay+0x28>
  {
  }
}
 800585c:	bf00      	nop
 800585e:	bf00      	nop
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	20000064 	.word	0x20000064

0800586c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005874:	2300      	movs	r3, #0
 8005876:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e033      	b.n	80058ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005886:	2b00      	cmp	r3, #0
 8005888:	d109      	bne.n	800589e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7ff fa14 	bl	8004cb8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a2:	f003 0310 	and.w	r3, r3, #16
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d118      	bne.n	80058dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80058b2:	f023 0302 	bic.w	r3, r3, #2
 80058b6:	f043 0202 	orr.w	r2, r3, #2
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 fad8 	bl	8005e74 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	f023 0303 	bic.w	r3, r3, #3
 80058d2:	f043 0201 	orr.w	r2, r3, #1
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	641a      	str	r2, [r3, #64]	; 0x40
 80058da:	e001      	b.n	80058e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
	...

080058f4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80058fc:	2300      	movs	r3, #0
 80058fe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005906:	2b01      	cmp	r3, #1
 8005908:	d101      	bne.n	800590e <HAL_ADC_Start+0x1a>
 800590a:	2302      	movs	r3, #2
 800590c:	e0b2      	b.n	8005a74 <HAL_ADC_Start+0x180>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f003 0301 	and.w	r3, r3, #1
 8005920:	2b01      	cmp	r3, #1
 8005922:	d018      	beq.n	8005956 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689a      	ldr	r2, [r3, #8]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f042 0201 	orr.w	r2, r2, #1
 8005932:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005934:	4b52      	ldr	r3, [pc, #328]	; (8005a80 <HAL_ADC_Start+0x18c>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a52      	ldr	r2, [pc, #328]	; (8005a84 <HAL_ADC_Start+0x190>)
 800593a:	fba2 2303 	umull	r2, r3, r2, r3
 800593e:	0c9a      	lsrs	r2, r3, #18
 8005940:	4613      	mov	r3, r2
 8005942:	005b      	lsls	r3, r3, #1
 8005944:	4413      	add	r3, r2
 8005946:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005948:	e002      	b.n	8005950 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	3b01      	subs	r3, #1
 800594e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1f9      	bne.n	800594a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	2b01      	cmp	r3, #1
 8005962:	d17a      	bne.n	8005a5a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005968:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800596c:	f023 0301 	bic.w	r3, r3, #1
 8005970:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005982:	2b00      	cmp	r3, #0
 8005984:	d007      	beq.n	8005996 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800598e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800599e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059a2:	d106      	bne.n	80059b2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a8:	f023 0206 	bic.w	r2, r3, #6
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	645a      	str	r2, [r3, #68]	; 0x44
 80059b0:	e002      	b.n	80059b8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80059c0:	4b31      	ldr	r3, [pc, #196]	; (8005a88 <HAL_ADC_Start+0x194>)
 80059c2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80059cc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f003 031f 	and.w	r3, r3, #31
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d12a      	bne.n	8005a30 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a2b      	ldr	r2, [pc, #172]	; (8005a8c <HAL_ADC_Start+0x198>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d015      	beq.n	8005a10 <HAL_ADC_Start+0x11c>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a29      	ldr	r2, [pc, #164]	; (8005a90 <HAL_ADC_Start+0x19c>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d105      	bne.n	80059fa <HAL_ADC_Start+0x106>
 80059ee:	4b26      	ldr	r3, [pc, #152]	; (8005a88 <HAL_ADC_Start+0x194>)
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f003 031f 	and.w	r3, r3, #31
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00a      	beq.n	8005a10 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a25      	ldr	r2, [pc, #148]	; (8005a94 <HAL_ADC_Start+0x1a0>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d136      	bne.n	8005a72 <HAL_ADC_Start+0x17e>
 8005a04:	4b20      	ldr	r3, [pc, #128]	; (8005a88 <HAL_ADC_Start+0x194>)
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f003 0310 	and.w	r3, r3, #16
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d130      	bne.n	8005a72 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d129      	bne.n	8005a72 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	689a      	ldr	r2, [r3, #8]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005a2c:	609a      	str	r2, [r3, #8]
 8005a2e:	e020      	b.n	8005a72 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a15      	ldr	r2, [pc, #84]	; (8005a8c <HAL_ADC_Start+0x198>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d11b      	bne.n	8005a72 <HAL_ADC_Start+0x17e>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d114      	bne.n	8005a72 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689a      	ldr	r2, [r3, #8]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005a56:	609a      	str	r2, [r3, #8]
 8005a58:	e00b      	b.n	8005a72 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5e:	f043 0210 	orr.w	r2, r3, #16
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a6a:	f043 0201 	orr.w	r2, r3, #1
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3714      	adds	r7, #20
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr
 8005a80:	2000005c 	.word	0x2000005c
 8005a84:	431bde83 	.word	0x431bde83
 8005a88:	40012300 	.word	0x40012300
 8005a8c:	40012000 	.word	0x40012000
 8005a90:	40012100 	.word	0x40012100
 8005a94:	40012200 	.word	0x40012200

08005a98 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d101      	bne.n	8005aae <HAL_ADC_Stop+0x16>
 8005aaa:	2302      	movs	r3, #2
 8005aac:	e021      	b.n	8005af2 <HAL_ADC_Stop+0x5a>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	689a      	ldr	r2, [r3, #8]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f022 0201 	bic.w	r2, r2, #1
 8005ac4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f003 0301 	and.w	r3, r3, #1
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d109      	bne.n	8005ae8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005adc:	f023 0301 	bic.w	r3, r3, #1
 8005ae0:	f043 0201 	orr.w	r2, r3, #1
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr

08005afe <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b084      	sub	sp, #16
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
 8005b06:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b1a:	d113      	bne.n	8005b44 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005b26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b2a:	d10b      	bne.n	8005b44 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b30:	f043 0220 	orr.w	r2, r3, #32
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e063      	b.n	8005c0c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005b44:	f7ff fe62 	bl	800580c <HAL_GetTick>
 8005b48:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005b4a:	e021      	b.n	8005b90 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b52:	d01d      	beq.n	8005b90 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d007      	beq.n	8005b6a <HAL_ADC_PollForConversion+0x6c>
 8005b5a:	f7ff fe57 	bl	800580c <HAL_GetTick>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	683a      	ldr	r2, [r7, #0]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d212      	bcs.n	8005b90 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0302 	and.w	r3, r3, #2
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d00b      	beq.n	8005b90 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7c:	f043 0204 	orr.w	r2, r3, #4
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e03d      	b.n	8005c0c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0302 	and.w	r3, r3, #2
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d1d6      	bne.n	8005b4c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f06f 0212 	mvn.w	r2, #18
 8005ba6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d123      	bne.n	8005c0a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d11f      	bne.n	8005c0a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d006      	beq.n	8005be6 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d111      	bne.n	8005c0a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d105      	bne.n	8005c0a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c02:	f043 0201 	orr.w	r2, r3, #1
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	370c      	adds	r7, #12
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
	...

08005c30 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d101      	bne.n	8005c4c <HAL_ADC_ConfigChannel+0x1c>
 8005c48:	2302      	movs	r3, #2
 8005c4a:	e105      	b.n	8005e58 <HAL_ADC_ConfigChannel+0x228>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2b09      	cmp	r3, #9
 8005c5a:	d925      	bls.n	8005ca8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68d9      	ldr	r1, [r3, #12]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	461a      	mov	r2, r3
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	005b      	lsls	r3, r3, #1
 8005c6e:	4413      	add	r3, r2
 8005c70:	3b1e      	subs	r3, #30
 8005c72:	2207      	movs	r2, #7
 8005c74:	fa02 f303 	lsl.w	r3, r2, r3
 8005c78:	43da      	mvns	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	400a      	ands	r2, r1
 8005c80:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68d9      	ldr	r1, [r3, #12]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	689a      	ldr	r2, [r3, #8]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	4618      	mov	r0, r3
 8005c94:	4603      	mov	r3, r0
 8005c96:	005b      	lsls	r3, r3, #1
 8005c98:	4403      	add	r3, r0
 8005c9a:	3b1e      	subs	r3, #30
 8005c9c:	409a      	lsls	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	60da      	str	r2, [r3, #12]
 8005ca6:	e022      	b.n	8005cee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	6919      	ldr	r1, [r3, #16]
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	005b      	lsls	r3, r3, #1
 8005cba:	4413      	add	r3, r2
 8005cbc:	2207      	movs	r2, #7
 8005cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc2:	43da      	mvns	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	400a      	ands	r2, r1
 8005cca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6919      	ldr	r1, [r3, #16]
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	689a      	ldr	r2, [r3, #8]
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	4618      	mov	r0, r3
 8005cde:	4603      	mov	r3, r0
 8005ce0:	005b      	lsls	r3, r3, #1
 8005ce2:	4403      	add	r3, r0
 8005ce4:	409a      	lsls	r2, r3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	430a      	orrs	r2, r1
 8005cec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	2b06      	cmp	r3, #6
 8005cf4:	d824      	bhi.n	8005d40 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	685a      	ldr	r2, [r3, #4]
 8005d00:	4613      	mov	r3, r2
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	4413      	add	r3, r2
 8005d06:	3b05      	subs	r3, #5
 8005d08:	221f      	movs	r2, #31
 8005d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0e:	43da      	mvns	r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	400a      	ands	r2, r1
 8005d16:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	4618      	mov	r0, r3
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	685a      	ldr	r2, [r3, #4]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4413      	add	r3, r2
 8005d30:	3b05      	subs	r3, #5
 8005d32:	fa00 f203 	lsl.w	r2, r0, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	635a      	str	r2, [r3, #52]	; 0x34
 8005d3e:	e04c      	b.n	8005dda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	2b0c      	cmp	r3, #12
 8005d46:	d824      	bhi.n	8005d92 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	685a      	ldr	r2, [r3, #4]
 8005d52:	4613      	mov	r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	4413      	add	r3, r2
 8005d58:	3b23      	subs	r3, #35	; 0x23
 8005d5a:	221f      	movs	r2, #31
 8005d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d60:	43da      	mvns	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	400a      	ands	r2, r1
 8005d68:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	4618      	mov	r0, r3
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	685a      	ldr	r2, [r3, #4]
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	3b23      	subs	r3, #35	; 0x23
 8005d84:	fa00 f203 	lsl.w	r2, r0, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	430a      	orrs	r2, r1
 8005d8e:	631a      	str	r2, [r3, #48]	; 0x30
 8005d90:	e023      	b.n	8005dda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	4413      	add	r3, r2
 8005da2:	3b41      	subs	r3, #65	; 0x41
 8005da4:	221f      	movs	r2, #31
 8005da6:	fa02 f303 	lsl.w	r3, r2, r3
 8005daa:	43da      	mvns	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	400a      	ands	r2, r1
 8005db2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	4413      	add	r3, r2
 8005dcc:	3b41      	subs	r3, #65	; 0x41
 8005dce:	fa00 f203 	lsl.w	r2, r0, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	430a      	orrs	r2, r1
 8005dd8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005dda:	4b22      	ldr	r3, [pc, #136]	; (8005e64 <HAL_ADC_ConfigChannel+0x234>)
 8005ddc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a21      	ldr	r2, [pc, #132]	; (8005e68 <HAL_ADC_ConfigChannel+0x238>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d109      	bne.n	8005dfc <HAL_ADC_ConfigChannel+0x1cc>
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2b12      	cmp	r3, #18
 8005dee:	d105      	bne.n	8005dfc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a19      	ldr	r2, [pc, #100]	; (8005e68 <HAL_ADC_ConfigChannel+0x238>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d123      	bne.n	8005e4e <HAL_ADC_ConfigChannel+0x21e>
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2b10      	cmp	r3, #16
 8005e0c:	d003      	beq.n	8005e16 <HAL_ADC_ConfigChannel+0x1e6>
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2b11      	cmp	r3, #17
 8005e14:	d11b      	bne.n	8005e4e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2b10      	cmp	r3, #16
 8005e28:	d111      	bne.n	8005e4e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005e2a:	4b10      	ldr	r3, [pc, #64]	; (8005e6c <HAL_ADC_ConfigChannel+0x23c>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a10      	ldr	r2, [pc, #64]	; (8005e70 <HAL_ADC_ConfigChannel+0x240>)
 8005e30:	fba2 2303 	umull	r2, r3, r2, r3
 8005e34:	0c9a      	lsrs	r2, r3, #18
 8005e36:	4613      	mov	r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	4413      	add	r3, r2
 8005e3c:	005b      	lsls	r3, r3, #1
 8005e3e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005e40:	e002      	b.n	8005e48 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	3b01      	subs	r3, #1
 8005e46:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1f9      	bne.n	8005e42 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3714      	adds	r7, #20
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr
 8005e64:	40012300 	.word	0x40012300
 8005e68:	40012000 	.word	0x40012000
 8005e6c:	2000005c 	.word	0x2000005c
 8005e70:	431bde83 	.word	0x431bde83

08005e74 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005e7c:	4b79      	ldr	r3, [pc, #484]	; (8006064 <ADC_Init+0x1f0>)
 8005e7e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	431a      	orrs	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	685a      	ldr	r2, [r3, #4]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ea8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	6859      	ldr	r1, [r3, #4]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	021a      	lsls	r2, r3, #8
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	430a      	orrs	r2, r1
 8005ebc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	685a      	ldr	r2, [r3, #4]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005ecc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	6859      	ldr	r1, [r3, #4]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	689a      	ldr	r2, [r3, #8]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	430a      	orrs	r2, r1
 8005ede:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	689a      	ldr	r2, [r3, #8]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005eee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	6899      	ldr	r1, [r3, #8]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	68da      	ldr	r2, [r3, #12]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	430a      	orrs	r2, r1
 8005f00:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f06:	4a58      	ldr	r2, [pc, #352]	; (8006068 <ADC_Init+0x1f4>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d022      	beq.n	8005f52 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	689a      	ldr	r2, [r3, #8]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005f1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6899      	ldr	r1, [r3, #8]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	689a      	ldr	r2, [r3, #8]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005f3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	6899      	ldr	r1, [r3, #8]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	430a      	orrs	r2, r1
 8005f4e:	609a      	str	r2, [r3, #8]
 8005f50:	e00f      	b.n	8005f72 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	689a      	ldr	r2, [r3, #8]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005f60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	689a      	ldr	r2, [r3, #8]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005f70:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	689a      	ldr	r2, [r3, #8]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f022 0202 	bic.w	r2, r2, #2
 8005f80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	6899      	ldr	r1, [r3, #8]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	7e1b      	ldrb	r3, [r3, #24]
 8005f8c:	005a      	lsls	r2, r3, #1
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	430a      	orrs	r2, r1
 8005f94:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d01b      	beq.n	8005fd8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	685a      	ldr	r2, [r3, #4]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	685a      	ldr	r2, [r3, #4]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005fbe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6859      	ldr	r1, [r3, #4]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	035a      	lsls	r2, r3, #13
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	605a      	str	r2, [r3, #4]
 8005fd6:	e007      	b.n	8005fe8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fe6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005ff6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	69db      	ldr	r3, [r3, #28]
 8006002:	3b01      	subs	r3, #1
 8006004:	051a      	lsls	r2, r3, #20
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	430a      	orrs	r2, r1
 800600c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	689a      	ldr	r2, [r3, #8]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800601c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	6899      	ldr	r1, [r3, #8]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800602a:	025a      	lsls	r2, r3, #9
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	430a      	orrs	r2, r1
 8006032:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689a      	ldr	r2, [r3, #8]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006042:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	6899      	ldr	r1, [r3, #8]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	029a      	lsls	r2, r3, #10
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	430a      	orrs	r2, r1
 8006056:	609a      	str	r2, [r3, #8]
}
 8006058:	bf00      	nop
 800605a:	3714      	adds	r7, #20
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr
 8006064:	40012300 	.word	0x40012300
 8006068:	0f000001 	.word	0x0f000001

0800606c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f003 0307 	and.w	r3, r3, #7
 800607a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800607c:	4b0c      	ldr	r3, [pc, #48]	; (80060b0 <__NVIC_SetPriorityGrouping+0x44>)
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006088:	4013      	ands	r3, r2
 800608a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006094:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800609c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800609e:	4a04      	ldr	r2, [pc, #16]	; (80060b0 <__NVIC_SetPriorityGrouping+0x44>)
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	60d3      	str	r3, [r2, #12]
}
 80060a4:	bf00      	nop
 80060a6:	3714      	adds	r7, #20
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr
 80060b0:	e000ed00 	.word	0xe000ed00

080060b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80060b4:	b480      	push	{r7}
 80060b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80060b8:	4b04      	ldr	r3, [pc, #16]	; (80060cc <__NVIC_GetPriorityGrouping+0x18>)
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	0a1b      	lsrs	r3, r3, #8
 80060be:	f003 0307 	and.w	r3, r3, #7
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr
 80060cc:	e000ed00 	.word	0xe000ed00

080060d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	4603      	mov	r3, r0
 80060d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	db0b      	blt.n	80060fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060e2:	79fb      	ldrb	r3, [r7, #7]
 80060e4:	f003 021f 	and.w	r2, r3, #31
 80060e8:	4907      	ldr	r1, [pc, #28]	; (8006108 <__NVIC_EnableIRQ+0x38>)
 80060ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060ee:	095b      	lsrs	r3, r3, #5
 80060f0:	2001      	movs	r0, #1
 80060f2:	fa00 f202 	lsl.w	r2, r0, r2
 80060f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80060fa:	bf00      	nop
 80060fc:	370c      	adds	r7, #12
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	e000e100 	.word	0xe000e100

0800610c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	4603      	mov	r3, r0
 8006114:	6039      	str	r1, [r7, #0]
 8006116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800611c:	2b00      	cmp	r3, #0
 800611e:	db0a      	blt.n	8006136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	b2da      	uxtb	r2, r3
 8006124:	490c      	ldr	r1, [pc, #48]	; (8006158 <__NVIC_SetPriority+0x4c>)
 8006126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800612a:	0112      	lsls	r2, r2, #4
 800612c:	b2d2      	uxtb	r2, r2
 800612e:	440b      	add	r3, r1
 8006130:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006134:	e00a      	b.n	800614c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	b2da      	uxtb	r2, r3
 800613a:	4908      	ldr	r1, [pc, #32]	; (800615c <__NVIC_SetPriority+0x50>)
 800613c:	79fb      	ldrb	r3, [r7, #7]
 800613e:	f003 030f 	and.w	r3, r3, #15
 8006142:	3b04      	subs	r3, #4
 8006144:	0112      	lsls	r2, r2, #4
 8006146:	b2d2      	uxtb	r2, r2
 8006148:	440b      	add	r3, r1
 800614a:	761a      	strb	r2, [r3, #24]
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr
 8006158:	e000e100 	.word	0xe000e100
 800615c:	e000ed00 	.word	0xe000ed00

08006160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006160:	b480      	push	{r7}
 8006162:	b089      	sub	sp, #36	; 0x24
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f003 0307 	and.w	r3, r3, #7
 8006172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	f1c3 0307 	rsb	r3, r3, #7
 800617a:	2b04      	cmp	r3, #4
 800617c:	bf28      	it	cs
 800617e:	2304      	movcs	r3, #4
 8006180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	3304      	adds	r3, #4
 8006186:	2b06      	cmp	r3, #6
 8006188:	d902      	bls.n	8006190 <NVIC_EncodePriority+0x30>
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	3b03      	subs	r3, #3
 800618e:	e000      	b.n	8006192 <NVIC_EncodePriority+0x32>
 8006190:	2300      	movs	r3, #0
 8006192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006194:	f04f 32ff 	mov.w	r2, #4294967295
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	fa02 f303 	lsl.w	r3, r2, r3
 800619e:	43da      	mvns	r2, r3
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	401a      	ands	r2, r3
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80061a8:	f04f 31ff 	mov.w	r1, #4294967295
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	fa01 f303 	lsl.w	r3, r1, r3
 80061b2:	43d9      	mvns	r1, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061b8:	4313      	orrs	r3, r2
         );
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3724      	adds	r7, #36	; 0x24
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr

080061c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b082      	sub	sp, #8
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f7ff ff4c 	bl	800606c <__NVIC_SetPriorityGrouping>
}
 80061d4:	bf00      	nop
 80061d6:	3708      	adds	r7, #8
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80061dc:	b580      	push	{r7, lr}
 80061de:	b086      	sub	sp, #24
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	4603      	mov	r3, r0
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
 80061e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80061ea:	2300      	movs	r3, #0
 80061ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80061ee:	f7ff ff61 	bl	80060b4 <__NVIC_GetPriorityGrouping>
 80061f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	68b9      	ldr	r1, [r7, #8]
 80061f8:	6978      	ldr	r0, [r7, #20]
 80061fa:	f7ff ffb1 	bl	8006160 <NVIC_EncodePriority>
 80061fe:	4602      	mov	r2, r0
 8006200:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006204:	4611      	mov	r1, r2
 8006206:	4618      	mov	r0, r3
 8006208:	f7ff ff80 	bl	800610c <__NVIC_SetPriority>
}
 800620c:	bf00      	nop
 800620e:	3718      	adds	r7, #24
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	4603      	mov	r3, r0
 800621c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800621e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006222:	4618      	mov	r0, r3
 8006224:	f7ff ff54 	bl	80060d0 <__NVIC_EnableIRQ>
}
 8006228:	bf00      	nop
 800622a:	3708      	adds	r7, #8
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006238:	2300      	movs	r3, #0
 800623a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800623c:	f7ff fae6 	bl	800580c <HAL_GetTick>
 8006240:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d101      	bne.n	800624c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e099      	b.n	8006380 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2202      	movs	r2, #2
 8006250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f022 0201 	bic.w	r2, r2, #1
 800626a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800626c:	e00f      	b.n	800628e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800626e:	f7ff facd 	bl	800580c <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	2b05      	cmp	r3, #5
 800627a:	d908      	bls.n	800628e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2220      	movs	r2, #32
 8006280:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2203      	movs	r2, #3
 8006286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e078      	b.n	8006380 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 0301 	and.w	r3, r3, #1
 8006298:	2b00      	cmp	r3, #0
 800629a:	d1e8      	bne.n	800626e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80062a4:	697a      	ldr	r2, [r7, #20]
 80062a6:	4b38      	ldr	r3, [pc, #224]	; (8006388 <HAL_DMA_Init+0x158>)
 80062a8:	4013      	ands	r3, r2
 80062aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	685a      	ldr	r2, [r3, #4]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80062ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80062da:	697a      	ldr	r2, [r7, #20]
 80062dc:	4313      	orrs	r3, r2
 80062de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e4:	2b04      	cmp	r3, #4
 80062e6:	d107      	bne.n	80062f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f0:	4313      	orrs	r3, r2
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	f023 0307 	bic.w	r3, r3, #7
 800630e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006314:	697a      	ldr	r2, [r7, #20]
 8006316:	4313      	orrs	r3, r2
 8006318:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631e:	2b04      	cmp	r3, #4
 8006320:	d117      	bne.n	8006352 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	4313      	orrs	r3, r2
 800632a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00e      	beq.n	8006352 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 fb01 	bl	800693c <DMA_CheckFifoParam>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d008      	beq.n	8006352 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2240      	movs	r2, #64	; 0x40
 8006344:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800634e:	2301      	movs	r3, #1
 8006350:	e016      	b.n	8006380 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 fab8 	bl	80068d0 <DMA_CalcBaseAndBitshift>
 8006360:	4603      	mov	r3, r0
 8006362:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006368:	223f      	movs	r2, #63	; 0x3f
 800636a:	409a      	lsls	r2, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3718      	adds	r7, #24
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	f010803f 	.word	0xf010803f

0800638c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b086      	sub	sp, #24
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
 8006398:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800639a:	2300      	movs	r3, #0
 800639c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d101      	bne.n	80063b2 <HAL_DMA_Start_IT+0x26>
 80063ae:	2302      	movs	r3, #2
 80063b0:	e040      	b.n	8006434 <HAL_DMA_Start_IT+0xa8>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d12f      	bne.n	8006426 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2202      	movs	r2, #2
 80063ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	68b9      	ldr	r1, [r7, #8]
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	f000 fa4a 	bl	8006874 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063e4:	223f      	movs	r2, #63	; 0x3f
 80063e6:	409a      	lsls	r2, r3
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f042 0216 	orr.w	r2, r2, #22
 80063fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006400:	2b00      	cmp	r3, #0
 8006402:	d007      	beq.n	8006414 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f042 0208 	orr.w	r2, r2, #8
 8006412:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f042 0201 	orr.w	r2, r2, #1
 8006422:	601a      	str	r2, [r3, #0]
 8006424:	e005      	b.n	8006432 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800642e:	2302      	movs	r3, #2
 8006430:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006432:	7dfb      	ldrb	r3, [r7, #23]
}
 8006434:	4618      	mov	r0, r3
 8006436:	3718      	adds	r7, #24
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006448:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800644a:	f7ff f9df 	bl	800580c <HAL_GetTick>
 800644e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006456:	b2db      	uxtb	r3, r3
 8006458:	2b02      	cmp	r3, #2
 800645a:	d008      	beq.n	800646e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2280      	movs	r2, #128	; 0x80
 8006460:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e052      	b.n	8006514 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f022 0216 	bic.w	r2, r2, #22
 800647c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	695a      	ldr	r2, [r3, #20]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800648c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006492:	2b00      	cmp	r3, #0
 8006494:	d103      	bne.n	800649e <HAL_DMA_Abort+0x62>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800649a:	2b00      	cmp	r3, #0
 800649c:	d007      	beq.n	80064ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f022 0208 	bic.w	r2, r2, #8
 80064ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f022 0201 	bic.w	r2, r2, #1
 80064bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80064be:	e013      	b.n	80064e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80064c0:	f7ff f9a4 	bl	800580c <HAL_GetTick>
 80064c4:	4602      	mov	r2, r0
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	2b05      	cmp	r3, #5
 80064cc:	d90c      	bls.n	80064e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2220      	movs	r2, #32
 80064d2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2203      	movs	r2, #3
 80064d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e015      	b.n	8006514 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1e4      	bne.n	80064c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064fa:	223f      	movs	r2, #63	; 0x3f
 80064fc:	409a      	lsls	r2, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2201      	movs	r2, #1
 8006506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3710      	adds	r7, #16
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800652a:	b2db      	uxtb	r3, r3
 800652c:	2b02      	cmp	r3, #2
 800652e:	d004      	beq.n	800653a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2280      	movs	r2, #128	; 0x80
 8006534:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e00c      	b.n	8006554 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2205      	movs	r2, #5
 800653e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f022 0201 	bic.w	r2, r2, #1
 8006550:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006568:	2300      	movs	r3, #0
 800656a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800656c:	4b8e      	ldr	r3, [pc, #568]	; (80067a8 <HAL_DMA_IRQHandler+0x248>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a8e      	ldr	r2, [pc, #568]	; (80067ac <HAL_DMA_IRQHandler+0x24c>)
 8006572:	fba2 2303 	umull	r2, r3, r2, r3
 8006576:	0a9b      	lsrs	r3, r3, #10
 8006578:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800657e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800658a:	2208      	movs	r2, #8
 800658c:	409a      	lsls	r2, r3
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	4013      	ands	r3, r2
 8006592:	2b00      	cmp	r3, #0
 8006594:	d01a      	beq.n	80065cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0304 	and.w	r3, r3, #4
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d013      	beq.n	80065cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f022 0204 	bic.w	r2, r2, #4
 80065b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065b8:	2208      	movs	r2, #8
 80065ba:	409a      	lsls	r2, r3
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c4:	f043 0201 	orr.w	r2, r3, #1
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065d0:	2201      	movs	r2, #1
 80065d2:	409a      	lsls	r2, r3
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	4013      	ands	r3, r2
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d012      	beq.n	8006602 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	695b      	ldr	r3, [r3, #20]
 80065e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00b      	beq.n	8006602 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ee:	2201      	movs	r2, #1
 80065f0:	409a      	lsls	r2, r3
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065fa:	f043 0202 	orr.w	r2, r3, #2
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006606:	2204      	movs	r2, #4
 8006608:	409a      	lsls	r2, r3
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	4013      	ands	r3, r2
 800660e:	2b00      	cmp	r3, #0
 8006610:	d012      	beq.n	8006638 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0302 	and.w	r3, r3, #2
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00b      	beq.n	8006638 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006624:	2204      	movs	r2, #4
 8006626:	409a      	lsls	r2, r3
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006630:	f043 0204 	orr.w	r2, r3, #4
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800663c:	2210      	movs	r2, #16
 800663e:	409a      	lsls	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	4013      	ands	r3, r2
 8006644:	2b00      	cmp	r3, #0
 8006646:	d043      	beq.n	80066d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 0308 	and.w	r3, r3, #8
 8006652:	2b00      	cmp	r3, #0
 8006654:	d03c      	beq.n	80066d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800665a:	2210      	movs	r2, #16
 800665c:	409a      	lsls	r2, r3
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800666c:	2b00      	cmp	r3, #0
 800666e:	d018      	beq.n	80066a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d108      	bne.n	8006690 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006682:	2b00      	cmp	r3, #0
 8006684:	d024      	beq.n	80066d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	4798      	blx	r3
 800668e:	e01f      	b.n	80066d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006694:	2b00      	cmp	r3, #0
 8006696:	d01b      	beq.n	80066d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	4798      	blx	r3
 80066a0:	e016      	b.n	80066d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d107      	bne.n	80066c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f022 0208 	bic.w	r2, r2, #8
 80066be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d003      	beq.n	80066d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066d4:	2220      	movs	r2, #32
 80066d6:	409a      	lsls	r2, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	4013      	ands	r3, r2
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f000 808f 	beq.w	8006800 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0310 	and.w	r3, r3, #16
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f000 8087 	beq.w	8006800 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066f6:	2220      	movs	r2, #32
 80066f8:	409a      	lsls	r2, r3
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006704:	b2db      	uxtb	r3, r3
 8006706:	2b05      	cmp	r3, #5
 8006708:	d136      	bne.n	8006778 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f022 0216 	bic.w	r2, r2, #22
 8006718:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	695a      	ldr	r2, [r3, #20]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006728:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672e:	2b00      	cmp	r3, #0
 8006730:	d103      	bne.n	800673a <HAL_DMA_IRQHandler+0x1da>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006736:	2b00      	cmp	r3, #0
 8006738:	d007      	beq.n	800674a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f022 0208 	bic.w	r2, r2, #8
 8006748:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800674e:	223f      	movs	r2, #63	; 0x3f
 8006750:	409a      	lsls	r2, r3
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2201      	movs	r2, #1
 800675a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800676a:	2b00      	cmp	r3, #0
 800676c:	d07e      	beq.n	800686c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	4798      	blx	r3
        }
        return;
 8006776:	e079      	b.n	800686c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d01d      	beq.n	80067c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10d      	bne.n	80067b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006798:	2b00      	cmp	r3, #0
 800679a:	d031      	beq.n	8006800 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	4798      	blx	r3
 80067a4:	e02c      	b.n	8006800 <HAL_DMA_IRQHandler+0x2a0>
 80067a6:	bf00      	nop
 80067a8:	2000005c 	.word	0x2000005c
 80067ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d023      	beq.n	8006800 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	4798      	blx	r3
 80067c0:	e01e      	b.n	8006800 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d10f      	bne.n	80067f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f022 0210 	bic.w	r2, r2, #16
 80067de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d003      	beq.n	8006800 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006804:	2b00      	cmp	r3, #0
 8006806:	d032      	beq.n	800686e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800680c:	f003 0301 	and.w	r3, r3, #1
 8006810:	2b00      	cmp	r3, #0
 8006812:	d022      	beq.n	800685a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2205      	movs	r2, #5
 8006818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f022 0201 	bic.w	r2, r2, #1
 800682a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	3301      	adds	r3, #1
 8006830:	60bb      	str	r3, [r7, #8]
 8006832:	697a      	ldr	r2, [r7, #20]
 8006834:	429a      	cmp	r2, r3
 8006836:	d307      	bcc.n	8006848 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 0301 	and.w	r3, r3, #1
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1f2      	bne.n	800682c <HAL_DMA_IRQHandler+0x2cc>
 8006846:	e000      	b.n	800684a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006848:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800685e:	2b00      	cmp	r3, #0
 8006860:	d005      	beq.n	800686e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	4798      	blx	r3
 800686a:	e000      	b.n	800686e <HAL_DMA_IRQHandler+0x30e>
        return;
 800686c:	bf00      	nop
    }
  }
}
 800686e:	3718      	adds	r7, #24
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
 8006880:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006890:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	683a      	ldr	r2, [r7, #0]
 8006898:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	2b40      	cmp	r3, #64	; 0x40
 80068a0:	d108      	bne.n	80068b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80068b2:	e007      	b.n	80068c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68ba      	ldr	r2, [r7, #8]
 80068ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	60da      	str	r2, [r3, #12]
}
 80068c4:	bf00      	nop
 80068c6:	3714      	adds	r7, #20
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	3b10      	subs	r3, #16
 80068e0:	4a14      	ldr	r2, [pc, #80]	; (8006934 <DMA_CalcBaseAndBitshift+0x64>)
 80068e2:	fba2 2303 	umull	r2, r3, r2, r3
 80068e6:	091b      	lsrs	r3, r3, #4
 80068e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80068ea:	4a13      	ldr	r2, [pc, #76]	; (8006938 <DMA_CalcBaseAndBitshift+0x68>)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	4413      	add	r3, r2
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	461a      	mov	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2b03      	cmp	r3, #3
 80068fc:	d909      	bls.n	8006912 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006906:	f023 0303 	bic.w	r3, r3, #3
 800690a:	1d1a      	adds	r2, r3, #4
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	659a      	str	r2, [r3, #88]	; 0x58
 8006910:	e007      	b.n	8006922 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800691a:	f023 0303 	bic.w	r3, r3, #3
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006926:	4618      	mov	r0, r3
 8006928:	3714      	adds	r7, #20
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	aaaaaaab 	.word	0xaaaaaaab
 8006938:	08013548 	.word	0x08013548

0800693c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800693c:	b480      	push	{r7}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006944:	2300      	movs	r3, #0
 8006946:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800694c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d11f      	bne.n	8006996 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	2b03      	cmp	r3, #3
 800695a:	d856      	bhi.n	8006a0a <DMA_CheckFifoParam+0xce>
 800695c:	a201      	add	r2, pc, #4	; (adr r2, 8006964 <DMA_CheckFifoParam+0x28>)
 800695e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006962:	bf00      	nop
 8006964:	08006975 	.word	0x08006975
 8006968:	08006987 	.word	0x08006987
 800696c:	08006975 	.word	0x08006975
 8006970:	08006a0b 	.word	0x08006a0b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006978:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800697c:	2b00      	cmp	r3, #0
 800697e:	d046      	beq.n	8006a0e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006984:	e043      	b.n	8006a0e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800698e:	d140      	bne.n	8006a12 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006994:	e03d      	b.n	8006a12 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	699b      	ldr	r3, [r3, #24]
 800699a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800699e:	d121      	bne.n	80069e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	2b03      	cmp	r3, #3
 80069a4:	d837      	bhi.n	8006a16 <DMA_CheckFifoParam+0xda>
 80069a6:	a201      	add	r2, pc, #4	; (adr r2, 80069ac <DMA_CheckFifoParam+0x70>)
 80069a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ac:	080069bd 	.word	0x080069bd
 80069b0:	080069c3 	.word	0x080069c3
 80069b4:	080069bd 	.word	0x080069bd
 80069b8:	080069d5 	.word	0x080069d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	73fb      	strb	r3, [r7, #15]
      break;
 80069c0:	e030      	b.n	8006a24 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d025      	beq.n	8006a1a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069d2:	e022      	b.n	8006a1a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80069dc:	d11f      	bne.n	8006a1e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80069e2:	e01c      	b.n	8006a1e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d903      	bls.n	80069f2 <DMA_CheckFifoParam+0xb6>
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	2b03      	cmp	r3, #3
 80069ee:	d003      	beq.n	80069f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80069f0:	e018      	b.n	8006a24 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	73fb      	strb	r3, [r7, #15]
      break;
 80069f6:	e015      	b.n	8006a24 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00e      	beq.n	8006a22 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	73fb      	strb	r3, [r7, #15]
      break;
 8006a08:	e00b      	b.n	8006a22 <DMA_CheckFifoParam+0xe6>
      break;
 8006a0a:	bf00      	nop
 8006a0c:	e00a      	b.n	8006a24 <DMA_CheckFifoParam+0xe8>
      break;
 8006a0e:	bf00      	nop
 8006a10:	e008      	b.n	8006a24 <DMA_CheckFifoParam+0xe8>
      break;
 8006a12:	bf00      	nop
 8006a14:	e006      	b.n	8006a24 <DMA_CheckFifoParam+0xe8>
      break;
 8006a16:	bf00      	nop
 8006a18:	e004      	b.n	8006a24 <DMA_CheckFifoParam+0xe8>
      break;
 8006a1a:	bf00      	nop
 8006a1c:	e002      	b.n	8006a24 <DMA_CheckFifoParam+0xe8>
      break;   
 8006a1e:	bf00      	nop
 8006a20:	e000      	b.n	8006a24 <DMA_CheckFifoParam+0xe8>
      break;
 8006a22:	bf00      	nop
    }
  } 
  
  return status; 
 8006a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3714      	adds	r7, #20
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop

08006a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b089      	sub	sp, #36	; 0x24
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006a42:	2300      	movs	r3, #0
 8006a44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006a46:	2300      	movs	r3, #0
 8006a48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	61fb      	str	r3, [r7, #28]
 8006a4e:	e16b      	b.n	8006d28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006a50:	2201      	movs	r2, #1
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	fa02 f303 	lsl.w	r3, r2, r3
 8006a58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	4013      	ands	r3, r2
 8006a62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	f040 815a 	bne.w	8006d22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	f003 0303 	and.w	r3, r3, #3
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d005      	beq.n	8006a86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d130      	bne.n	8006ae8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	005b      	lsls	r3, r3, #1
 8006a90:	2203      	movs	r2, #3
 8006a92:	fa02 f303 	lsl.w	r3, r2, r3
 8006a96:	43db      	mvns	r3, r3
 8006a98:	69ba      	ldr	r2, [r7, #24]
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	68da      	ldr	r2, [r3, #12]
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	005b      	lsls	r3, r3, #1
 8006aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aaa:	69ba      	ldr	r2, [r7, #24]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	69ba      	ldr	r2, [r7, #24]
 8006ab4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006abc:	2201      	movs	r2, #1
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac4:	43db      	mvns	r3, r3
 8006ac6:	69ba      	ldr	r2, [r7, #24]
 8006ac8:	4013      	ands	r3, r2
 8006aca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	091b      	lsrs	r3, r3, #4
 8006ad2:	f003 0201 	and.w	r2, r3, #1
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8006adc:	69ba      	ldr	r2, [r7, #24]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	69ba      	ldr	r2, [r7, #24]
 8006ae6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	f003 0303 	and.w	r3, r3, #3
 8006af0:	2b03      	cmp	r3, #3
 8006af2:	d017      	beq.n	8006b24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	005b      	lsls	r3, r3, #1
 8006afe:	2203      	movs	r2, #3
 8006b00:	fa02 f303 	lsl.w	r3, r2, r3
 8006b04:	43db      	mvns	r3, r3
 8006b06:	69ba      	ldr	r2, [r7, #24]
 8006b08:	4013      	ands	r3, r2
 8006b0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	689a      	ldr	r2, [r3, #8]
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	005b      	lsls	r3, r3, #1
 8006b14:	fa02 f303 	lsl.w	r3, r2, r3
 8006b18:	69ba      	ldr	r2, [r7, #24]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	69ba      	ldr	r2, [r7, #24]
 8006b22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	f003 0303 	and.w	r3, r3, #3
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d123      	bne.n	8006b78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	08da      	lsrs	r2, r3, #3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	3208      	adds	r2, #8
 8006b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	f003 0307 	and.w	r3, r3, #7
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	220f      	movs	r2, #15
 8006b48:	fa02 f303 	lsl.w	r3, r2, r3
 8006b4c:	43db      	mvns	r3, r3
 8006b4e:	69ba      	ldr	r2, [r7, #24]
 8006b50:	4013      	ands	r3, r2
 8006b52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	691a      	ldr	r2, [r3, #16]
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	f003 0307 	and.w	r3, r3, #7
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	fa02 f303 	lsl.w	r3, r2, r3
 8006b64:	69ba      	ldr	r2, [r7, #24]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	08da      	lsrs	r2, r3, #3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	3208      	adds	r2, #8
 8006b72:	69b9      	ldr	r1, [r7, #24]
 8006b74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	005b      	lsls	r3, r3, #1
 8006b82:	2203      	movs	r2, #3
 8006b84:	fa02 f303 	lsl.w	r3, r2, r3
 8006b88:	43db      	mvns	r3, r3
 8006b8a:	69ba      	ldr	r2, [r7, #24]
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	f003 0203 	and.w	r2, r3, #3
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	005b      	lsls	r3, r3, #1
 8006b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba0:	69ba      	ldr	r2, [r7, #24]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	69ba      	ldr	r2, [r7, #24]
 8006baa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f000 80b4 	beq.w	8006d22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006bba:	2300      	movs	r3, #0
 8006bbc:	60fb      	str	r3, [r7, #12]
 8006bbe:	4b60      	ldr	r3, [pc, #384]	; (8006d40 <HAL_GPIO_Init+0x30c>)
 8006bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bc2:	4a5f      	ldr	r2, [pc, #380]	; (8006d40 <HAL_GPIO_Init+0x30c>)
 8006bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8006bca:	4b5d      	ldr	r3, [pc, #372]	; (8006d40 <HAL_GPIO_Init+0x30c>)
 8006bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bd2:	60fb      	str	r3, [r7, #12]
 8006bd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006bd6:	4a5b      	ldr	r2, [pc, #364]	; (8006d44 <HAL_GPIO_Init+0x310>)
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	089b      	lsrs	r3, r3, #2
 8006bdc:	3302      	adds	r3, #2
 8006bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	f003 0303 	and.w	r3, r3, #3
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	220f      	movs	r2, #15
 8006bee:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf2:	43db      	mvns	r3, r3
 8006bf4:	69ba      	ldr	r2, [r7, #24]
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a52      	ldr	r2, [pc, #328]	; (8006d48 <HAL_GPIO_Init+0x314>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d02b      	beq.n	8006c5a <HAL_GPIO_Init+0x226>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a51      	ldr	r2, [pc, #324]	; (8006d4c <HAL_GPIO_Init+0x318>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d025      	beq.n	8006c56 <HAL_GPIO_Init+0x222>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a50      	ldr	r2, [pc, #320]	; (8006d50 <HAL_GPIO_Init+0x31c>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d01f      	beq.n	8006c52 <HAL_GPIO_Init+0x21e>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a4f      	ldr	r2, [pc, #316]	; (8006d54 <HAL_GPIO_Init+0x320>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d019      	beq.n	8006c4e <HAL_GPIO_Init+0x21a>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a4e      	ldr	r2, [pc, #312]	; (8006d58 <HAL_GPIO_Init+0x324>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d013      	beq.n	8006c4a <HAL_GPIO_Init+0x216>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a4d      	ldr	r2, [pc, #308]	; (8006d5c <HAL_GPIO_Init+0x328>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d00d      	beq.n	8006c46 <HAL_GPIO_Init+0x212>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a4c      	ldr	r2, [pc, #304]	; (8006d60 <HAL_GPIO_Init+0x32c>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d007      	beq.n	8006c42 <HAL_GPIO_Init+0x20e>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a4b      	ldr	r2, [pc, #300]	; (8006d64 <HAL_GPIO_Init+0x330>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d101      	bne.n	8006c3e <HAL_GPIO_Init+0x20a>
 8006c3a:	2307      	movs	r3, #7
 8006c3c:	e00e      	b.n	8006c5c <HAL_GPIO_Init+0x228>
 8006c3e:	2308      	movs	r3, #8
 8006c40:	e00c      	b.n	8006c5c <HAL_GPIO_Init+0x228>
 8006c42:	2306      	movs	r3, #6
 8006c44:	e00a      	b.n	8006c5c <HAL_GPIO_Init+0x228>
 8006c46:	2305      	movs	r3, #5
 8006c48:	e008      	b.n	8006c5c <HAL_GPIO_Init+0x228>
 8006c4a:	2304      	movs	r3, #4
 8006c4c:	e006      	b.n	8006c5c <HAL_GPIO_Init+0x228>
 8006c4e:	2303      	movs	r3, #3
 8006c50:	e004      	b.n	8006c5c <HAL_GPIO_Init+0x228>
 8006c52:	2302      	movs	r3, #2
 8006c54:	e002      	b.n	8006c5c <HAL_GPIO_Init+0x228>
 8006c56:	2301      	movs	r3, #1
 8006c58:	e000      	b.n	8006c5c <HAL_GPIO_Init+0x228>
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	69fa      	ldr	r2, [r7, #28]
 8006c5e:	f002 0203 	and.w	r2, r2, #3
 8006c62:	0092      	lsls	r2, r2, #2
 8006c64:	4093      	lsls	r3, r2
 8006c66:	69ba      	ldr	r2, [r7, #24]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006c6c:	4935      	ldr	r1, [pc, #212]	; (8006d44 <HAL_GPIO_Init+0x310>)
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	089b      	lsrs	r3, r3, #2
 8006c72:	3302      	adds	r3, #2
 8006c74:	69ba      	ldr	r2, [r7, #24]
 8006c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006c7a:	4b3b      	ldr	r3, [pc, #236]	; (8006d68 <HAL_GPIO_Init+0x334>)
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	43db      	mvns	r3, r3
 8006c84:	69ba      	ldr	r2, [r7, #24]
 8006c86:	4013      	ands	r3, r2
 8006c88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d003      	beq.n	8006c9e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006c96:	69ba      	ldr	r2, [r7, #24]
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006c9e:	4a32      	ldr	r2, [pc, #200]	; (8006d68 <HAL_GPIO_Init+0x334>)
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006ca4:	4b30      	ldr	r3, [pc, #192]	; (8006d68 <HAL_GPIO_Init+0x334>)
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	43db      	mvns	r3, r3
 8006cae:	69ba      	ldr	r2, [r7, #24]
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d003      	beq.n	8006cc8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006cc0:	69ba      	ldr	r2, [r7, #24]
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006cc8:	4a27      	ldr	r2, [pc, #156]	; (8006d68 <HAL_GPIO_Init+0x334>)
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006cce:	4b26      	ldr	r3, [pc, #152]	; (8006d68 <HAL_GPIO_Init+0x334>)
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	43db      	mvns	r3, r3
 8006cd8:	69ba      	ldr	r2, [r7, #24]
 8006cda:	4013      	ands	r3, r2
 8006cdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d003      	beq.n	8006cf2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006cea:	69ba      	ldr	r2, [r7, #24]
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006cf2:	4a1d      	ldr	r2, [pc, #116]	; (8006d68 <HAL_GPIO_Init+0x334>)
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006cf8:	4b1b      	ldr	r3, [pc, #108]	; (8006d68 <HAL_GPIO_Init+0x334>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	43db      	mvns	r3, r3
 8006d02:	69ba      	ldr	r2, [r7, #24]
 8006d04:	4013      	ands	r3, r2
 8006d06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d003      	beq.n	8006d1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006d14:	69ba      	ldr	r2, [r7, #24]
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006d1c:	4a12      	ldr	r2, [pc, #72]	; (8006d68 <HAL_GPIO_Init+0x334>)
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	3301      	adds	r3, #1
 8006d26:	61fb      	str	r3, [r7, #28]
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	2b0f      	cmp	r3, #15
 8006d2c:	f67f ae90 	bls.w	8006a50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006d30:	bf00      	nop
 8006d32:	bf00      	nop
 8006d34:	3724      	adds	r7, #36	; 0x24
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr
 8006d3e:	bf00      	nop
 8006d40:	40023800 	.word	0x40023800
 8006d44:	40013800 	.word	0x40013800
 8006d48:	40020000 	.word	0x40020000
 8006d4c:	40020400 	.word	0x40020400
 8006d50:	40020800 	.word	0x40020800
 8006d54:	40020c00 	.word	0x40020c00
 8006d58:	40021000 	.word	0x40021000
 8006d5c:	40021400 	.word	0x40021400
 8006d60:	40021800 	.word	0x40021800
 8006d64:	40021c00 	.word	0x40021c00
 8006d68:	40013c00 	.word	0x40013c00

08006d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	460b      	mov	r3, r1
 8006d76:	807b      	strh	r3, [r7, #2]
 8006d78:	4613      	mov	r3, r2
 8006d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006d7c:	787b      	ldrb	r3, [r7, #1]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d003      	beq.n	8006d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006d82:	887a      	ldrh	r2, [r7, #2]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006d88:	e003      	b.n	8006d92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006d8a:	887b      	ldrh	r3, [r7, #2]
 8006d8c:	041a      	lsls	r2, r3, #16
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	619a      	str	r2, [r3, #24]
}
 8006d92:	bf00      	nop
 8006d94:	370c      	adds	r7, #12
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr

08006d9e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006d9e:	b480      	push	{r7}
 8006da0:	b085      	sub	sp, #20
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
 8006da6:	460b      	mov	r3, r1
 8006da8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	695b      	ldr	r3, [r3, #20]
 8006dae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006db0:	887a      	ldrh	r2, [r7, #2]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	4013      	ands	r3, r2
 8006db6:	041a      	lsls	r2, r3, #16
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	43d9      	mvns	r1, r3
 8006dbc:	887b      	ldrh	r3, [r7, #2]
 8006dbe:	400b      	ands	r3, r1
 8006dc0:	431a      	orrs	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	619a      	str	r2, [r3, #24]
}
 8006dc6:	bf00      	nop
 8006dc8:	3714      	adds	r7, #20
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
	...

08006dd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	4603      	mov	r3, r0
 8006ddc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006dde:	4b08      	ldr	r3, [pc, #32]	; (8006e00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006de0:	695a      	ldr	r2, [r3, #20]
 8006de2:	88fb      	ldrh	r3, [r7, #6]
 8006de4:	4013      	ands	r3, r2
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d006      	beq.n	8006df8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006dea:	4a05      	ldr	r2, [pc, #20]	; (8006e00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006dec:	88fb      	ldrh	r3, [r7, #6]
 8006dee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006df0:	88fb      	ldrh	r3, [r7, #6]
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7fb f876 	bl	8001ee4 <HAL_GPIO_EXTI_Callback>
  }
}
 8006df8:	bf00      	nop
 8006dfa:	3708      	adds	r7, #8
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	40013c00 	.word	0x40013c00

08006e04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d101      	bne.n	8006e16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e12b      	b.n	800706e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d106      	bne.n	8006e30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f7fd ffba 	bl	8004da4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2224      	movs	r2, #36	; 0x24
 8006e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f022 0201 	bic.w	r2, r2, #1
 8006e46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006e68:	f001 fd52 	bl	8008910 <HAL_RCC_GetPCLK1Freq>
 8006e6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	4a81      	ldr	r2, [pc, #516]	; (8007078 <HAL_I2C_Init+0x274>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d807      	bhi.n	8006e88 <HAL_I2C_Init+0x84>
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	4a80      	ldr	r2, [pc, #512]	; (800707c <HAL_I2C_Init+0x278>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	bf94      	ite	ls
 8006e80:	2301      	movls	r3, #1
 8006e82:	2300      	movhi	r3, #0
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	e006      	b.n	8006e96 <HAL_I2C_Init+0x92>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	4a7d      	ldr	r2, [pc, #500]	; (8007080 <HAL_I2C_Init+0x27c>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	bf94      	ite	ls
 8006e90:	2301      	movls	r3, #1
 8006e92:	2300      	movhi	r3, #0
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d001      	beq.n	8006e9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e0e7      	b.n	800706e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	4a78      	ldr	r2, [pc, #480]	; (8007084 <HAL_I2C_Init+0x280>)
 8006ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea6:	0c9b      	lsrs	r3, r3, #18
 8006ea8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	68ba      	ldr	r2, [r7, #8]
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	6a1b      	ldr	r3, [r3, #32]
 8006ec4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	4a6a      	ldr	r2, [pc, #424]	; (8007078 <HAL_I2C_Init+0x274>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d802      	bhi.n	8006ed8 <HAL_I2C_Init+0xd4>
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	e009      	b.n	8006eec <HAL_I2C_Init+0xe8>
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006ede:	fb02 f303 	mul.w	r3, r2, r3
 8006ee2:	4a69      	ldr	r2, [pc, #420]	; (8007088 <HAL_I2C_Init+0x284>)
 8006ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ee8:	099b      	lsrs	r3, r3, #6
 8006eea:	3301      	adds	r3, #1
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	6812      	ldr	r2, [r2, #0]
 8006ef0:	430b      	orrs	r3, r1
 8006ef2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	69db      	ldr	r3, [r3, #28]
 8006efa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006efe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	495c      	ldr	r1, [pc, #368]	; (8007078 <HAL_I2C_Init+0x274>)
 8006f08:	428b      	cmp	r3, r1
 8006f0a:	d819      	bhi.n	8006f40 <HAL_I2C_Init+0x13c>
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	1e59      	subs	r1, r3, #1
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	005b      	lsls	r3, r3, #1
 8006f16:	fbb1 f3f3 	udiv	r3, r1, r3
 8006f1a:	1c59      	adds	r1, r3, #1
 8006f1c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006f20:	400b      	ands	r3, r1
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00a      	beq.n	8006f3c <HAL_I2C_Init+0x138>
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	1e59      	subs	r1, r3, #1
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	005b      	lsls	r3, r3, #1
 8006f30:	fbb1 f3f3 	udiv	r3, r1, r3
 8006f34:	3301      	adds	r3, #1
 8006f36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f3a:	e051      	b.n	8006fe0 <HAL_I2C_Init+0x1dc>
 8006f3c:	2304      	movs	r3, #4
 8006f3e:	e04f      	b.n	8006fe0 <HAL_I2C_Init+0x1dc>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d111      	bne.n	8006f6c <HAL_I2C_Init+0x168>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	1e58      	subs	r0, r3, #1
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6859      	ldr	r1, [r3, #4]
 8006f50:	460b      	mov	r3, r1
 8006f52:	005b      	lsls	r3, r3, #1
 8006f54:	440b      	add	r3, r1
 8006f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	bf0c      	ite	eq
 8006f64:	2301      	moveq	r3, #1
 8006f66:	2300      	movne	r3, #0
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	e012      	b.n	8006f92 <HAL_I2C_Init+0x18e>
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	1e58      	subs	r0, r3, #1
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6859      	ldr	r1, [r3, #4]
 8006f74:	460b      	mov	r3, r1
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	440b      	add	r3, r1
 8006f7a:	0099      	lsls	r1, r3, #2
 8006f7c:	440b      	add	r3, r1
 8006f7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f82:	3301      	adds	r3, #1
 8006f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	bf0c      	ite	eq
 8006f8c:	2301      	moveq	r3, #1
 8006f8e:	2300      	movne	r3, #0
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d001      	beq.n	8006f9a <HAL_I2C_Init+0x196>
 8006f96:	2301      	movs	r3, #1
 8006f98:	e022      	b.n	8006fe0 <HAL_I2C_Init+0x1dc>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10e      	bne.n	8006fc0 <HAL_I2C_Init+0x1bc>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	1e58      	subs	r0, r3, #1
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6859      	ldr	r1, [r3, #4]
 8006faa:	460b      	mov	r3, r1
 8006fac:	005b      	lsls	r3, r3, #1
 8006fae:	440b      	add	r3, r1
 8006fb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fbe:	e00f      	b.n	8006fe0 <HAL_I2C_Init+0x1dc>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	1e58      	subs	r0, r3, #1
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6859      	ldr	r1, [r3, #4]
 8006fc8:	460b      	mov	r3, r1
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	440b      	add	r3, r1
 8006fce:	0099      	lsls	r1, r3, #2
 8006fd0:	440b      	add	r3, r1
 8006fd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006fe0:	6879      	ldr	r1, [r7, #4]
 8006fe2:	6809      	ldr	r1, [r1, #0]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	69da      	ldr	r2, [r3, #28]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a1b      	ldr	r3, [r3, #32]
 8006ffa:	431a      	orrs	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	430a      	orrs	r2, r1
 8007002:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800700e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	6911      	ldr	r1, [r2, #16]
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	68d2      	ldr	r2, [r2, #12]
 800701a:	4311      	orrs	r1, r2
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	6812      	ldr	r2, [r2, #0]
 8007020:	430b      	orrs	r3, r1
 8007022:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	695a      	ldr	r2, [r3, #20]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	699b      	ldr	r3, [r3, #24]
 8007036:	431a      	orrs	r2, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	430a      	orrs	r2, r1
 800703e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f042 0201 	orr.w	r2, r2, #1
 800704e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2220      	movs	r2, #32
 800705a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3710      	adds	r7, #16
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	000186a0 	.word	0x000186a0
 800707c:	001e847f 	.word	0x001e847f
 8007080:	003d08ff 	.word	0x003d08ff
 8007084:	431bde83 	.word	0x431bde83
 8007088:	10624dd3 	.word	0x10624dd3

0800708c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b088      	sub	sp, #32
 8007090:	af02      	add	r7, sp, #8
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	4608      	mov	r0, r1
 8007096:	4611      	mov	r1, r2
 8007098:	461a      	mov	r2, r3
 800709a:	4603      	mov	r3, r0
 800709c:	817b      	strh	r3, [r7, #10]
 800709e:	460b      	mov	r3, r1
 80070a0:	813b      	strh	r3, [r7, #8]
 80070a2:	4613      	mov	r3, r2
 80070a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80070a6:	f7fe fbb1 	bl	800580c <HAL_GetTick>
 80070aa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	2b20      	cmp	r3, #32
 80070b6:	f040 80d9 	bne.w	800726c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	9300      	str	r3, [sp, #0]
 80070be:	2319      	movs	r3, #25
 80070c0:	2201      	movs	r2, #1
 80070c2:	496d      	ldr	r1, [pc, #436]	; (8007278 <HAL_I2C_Mem_Write+0x1ec>)
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f000 fdad 	bl	8007c24 <I2C_WaitOnFlagUntilTimeout>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d001      	beq.n	80070d4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80070d0:	2302      	movs	r3, #2
 80070d2:	e0cc      	b.n	800726e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d101      	bne.n	80070e2 <HAL_I2C_Mem_Write+0x56>
 80070de:	2302      	movs	r3, #2
 80070e0:	e0c5      	b.n	800726e <HAL_I2C_Mem_Write+0x1e2>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 0301 	and.w	r3, r3, #1
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d007      	beq.n	8007108 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f042 0201 	orr.w	r2, r2, #1
 8007106:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007116:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2221      	movs	r2, #33	; 0x21
 800711c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2240      	movs	r2, #64	; 0x40
 8007124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2200      	movs	r2, #0
 800712c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6a3a      	ldr	r2, [r7, #32]
 8007132:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007138:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800713e:	b29a      	uxth	r2, r3
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	4a4d      	ldr	r2, [pc, #308]	; (800727c <HAL_I2C_Mem_Write+0x1f0>)
 8007148:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800714a:	88f8      	ldrh	r0, [r7, #6]
 800714c:	893a      	ldrh	r2, [r7, #8]
 800714e:	8979      	ldrh	r1, [r7, #10]
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	9301      	str	r3, [sp, #4]
 8007154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007156:	9300      	str	r3, [sp, #0]
 8007158:	4603      	mov	r3, r0
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f000 fbe4 	bl	8007928 <I2C_RequestMemoryWrite>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d052      	beq.n	800720c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e081      	b.n	800726e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f000 fe2e 	bl	8007dd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00d      	beq.n	8007196 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717e:	2b04      	cmp	r3, #4
 8007180:	d107      	bne.n	8007192 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007190:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	e06b      	b.n	800726e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719a:	781a      	ldrb	r2, [r3, #0]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a6:	1c5a      	adds	r2, r3, #1
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071b0:	3b01      	subs	r3, #1
 80071b2:	b29a      	uxth	r2, r3
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071bc:	b29b      	uxth	r3, r3
 80071be:	3b01      	subs	r3, #1
 80071c0:	b29a      	uxth	r2, r3
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	695b      	ldr	r3, [r3, #20]
 80071cc:	f003 0304 	and.w	r3, r3, #4
 80071d0:	2b04      	cmp	r3, #4
 80071d2:	d11b      	bne.n	800720c <HAL_I2C_Mem_Write+0x180>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d017      	beq.n	800720c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e0:	781a      	ldrb	r2, [r3, #0]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ec:	1c5a      	adds	r2, r3, #1
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071f6:	3b01      	subs	r3, #1
 80071f8:	b29a      	uxth	r2, r3
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007202:	b29b      	uxth	r3, r3
 8007204:	3b01      	subs	r3, #1
 8007206:	b29a      	uxth	r2, r3
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1aa      	bne.n	800716a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007214:	697a      	ldr	r2, [r7, #20]
 8007216:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f000 fe1a 	bl	8007e52 <I2C_WaitOnBTFFlagUntilTimeout>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d00d      	beq.n	8007240 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007228:	2b04      	cmp	r3, #4
 800722a:	d107      	bne.n	800723c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800723a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	e016      	b.n	800726e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800724e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2220      	movs	r2, #32
 8007254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007268:	2300      	movs	r3, #0
 800726a:	e000      	b.n	800726e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800726c:	2302      	movs	r3, #2
  }
}
 800726e:	4618      	mov	r0, r3
 8007270:	3718      	adds	r7, #24
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	00100002 	.word	0x00100002
 800727c:	ffff0000 	.word	0xffff0000

08007280 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b08c      	sub	sp, #48	; 0x30
 8007284:	af02      	add	r7, sp, #8
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	4608      	mov	r0, r1
 800728a:	4611      	mov	r1, r2
 800728c:	461a      	mov	r2, r3
 800728e:	4603      	mov	r3, r0
 8007290:	817b      	strh	r3, [r7, #10]
 8007292:	460b      	mov	r3, r1
 8007294:	813b      	strh	r3, [r7, #8]
 8007296:	4613      	mov	r3, r2
 8007298:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800729a:	f7fe fab7 	bl	800580c <HAL_GetTick>
 800729e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	2b20      	cmp	r3, #32
 80072aa:	f040 8208 	bne.w	80076be <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80072ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b0:	9300      	str	r3, [sp, #0]
 80072b2:	2319      	movs	r3, #25
 80072b4:	2201      	movs	r2, #1
 80072b6:	497b      	ldr	r1, [pc, #492]	; (80074a4 <HAL_I2C_Mem_Read+0x224>)
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f000 fcb3 	bl	8007c24 <I2C_WaitOnFlagUntilTimeout>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d001      	beq.n	80072c8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80072c4:	2302      	movs	r3, #2
 80072c6:	e1fb      	b.n	80076c0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d101      	bne.n	80072d6 <HAL_I2C_Mem_Read+0x56>
 80072d2:	2302      	movs	r3, #2
 80072d4:	e1f4      	b.n	80076c0 <HAL_I2C_Mem_Read+0x440>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2201      	movs	r2, #1
 80072da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 0301 	and.w	r3, r3, #1
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d007      	beq.n	80072fc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f042 0201 	orr.w	r2, r2, #1
 80072fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800730a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2222      	movs	r2, #34	; 0x22
 8007310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2240      	movs	r2, #64	; 0x40
 8007318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2200      	movs	r2, #0
 8007320:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007326:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800732c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007332:	b29a      	uxth	r2, r3
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	4a5b      	ldr	r2, [pc, #364]	; (80074a8 <HAL_I2C_Mem_Read+0x228>)
 800733c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800733e:	88f8      	ldrh	r0, [r7, #6]
 8007340:	893a      	ldrh	r2, [r7, #8]
 8007342:	8979      	ldrh	r1, [r7, #10]
 8007344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007346:	9301      	str	r3, [sp, #4]
 8007348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734a:	9300      	str	r3, [sp, #0]
 800734c:	4603      	mov	r3, r0
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f000 fb80 	bl	8007a54 <I2C_RequestMemoryRead>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d001      	beq.n	800735e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e1b0      	b.n	80076c0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007362:	2b00      	cmp	r3, #0
 8007364:	d113      	bne.n	800738e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007366:	2300      	movs	r3, #0
 8007368:	623b      	str	r3, [r7, #32]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	695b      	ldr	r3, [r3, #20]
 8007370:	623b      	str	r3, [r7, #32]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	699b      	ldr	r3, [r3, #24]
 8007378:	623b      	str	r3, [r7, #32]
 800737a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800738a:	601a      	str	r2, [r3, #0]
 800738c:	e184      	b.n	8007698 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007392:	2b01      	cmp	r3, #1
 8007394:	d11b      	bne.n	80073ce <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073a6:	2300      	movs	r3, #0
 80073a8:	61fb      	str	r3, [r7, #28]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	695b      	ldr	r3, [r3, #20]
 80073b0:	61fb      	str	r3, [r7, #28]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	699b      	ldr	r3, [r3, #24]
 80073b8:	61fb      	str	r3, [r7, #28]
 80073ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073ca:	601a      	str	r2, [r3, #0]
 80073cc:	e164      	b.n	8007698 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073d2:	2b02      	cmp	r3, #2
 80073d4:	d11b      	bne.n	800740e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073f6:	2300      	movs	r3, #0
 80073f8:	61bb      	str	r3, [r7, #24]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	695b      	ldr	r3, [r3, #20]
 8007400:	61bb      	str	r3, [r7, #24]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	699b      	ldr	r3, [r3, #24]
 8007408:	61bb      	str	r3, [r7, #24]
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	e144      	b.n	8007698 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800740e:	2300      	movs	r3, #0
 8007410:	617b      	str	r3, [r7, #20]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	695b      	ldr	r3, [r3, #20]
 8007418:	617b      	str	r3, [r7, #20]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	617b      	str	r3, [r7, #20]
 8007422:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007424:	e138      	b.n	8007698 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800742a:	2b03      	cmp	r3, #3
 800742c:	f200 80f1 	bhi.w	8007612 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007434:	2b01      	cmp	r3, #1
 8007436:	d123      	bne.n	8007480 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800743a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800743c:	68f8      	ldr	r0, [r7, #12]
 800743e:	f000 fd49 	bl	8007ed4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d001      	beq.n	800744c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	e139      	b.n	80076c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	691a      	ldr	r2, [r3, #16]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007456:	b2d2      	uxtb	r2, r2
 8007458:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745e:	1c5a      	adds	r2, r3, #1
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007468:	3b01      	subs	r3, #1
 800746a:	b29a      	uxth	r2, r3
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007474:	b29b      	uxth	r3, r3
 8007476:	3b01      	subs	r3, #1
 8007478:	b29a      	uxth	r2, r3
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800747e:	e10b      	b.n	8007698 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007484:	2b02      	cmp	r3, #2
 8007486:	d14e      	bne.n	8007526 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748a:	9300      	str	r3, [sp, #0]
 800748c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748e:	2200      	movs	r2, #0
 8007490:	4906      	ldr	r1, [pc, #24]	; (80074ac <HAL_I2C_Mem_Read+0x22c>)
 8007492:	68f8      	ldr	r0, [r7, #12]
 8007494:	f000 fbc6 	bl	8007c24 <I2C_WaitOnFlagUntilTimeout>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d008      	beq.n	80074b0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e10e      	b.n	80076c0 <HAL_I2C_Mem_Read+0x440>
 80074a2:	bf00      	nop
 80074a4:	00100002 	.word	0x00100002
 80074a8:	ffff0000 	.word	0xffff0000
 80074ac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	691a      	ldr	r2, [r3, #16]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ca:	b2d2      	uxtb	r2, r2
 80074cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d2:	1c5a      	adds	r2, r3, #1
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074dc:	3b01      	subs	r3, #1
 80074de:	b29a      	uxth	r2, r3
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	3b01      	subs	r3, #1
 80074ec:	b29a      	uxth	r2, r3
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	691a      	ldr	r2, [r3, #16]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fc:	b2d2      	uxtb	r2, r2
 80074fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007504:	1c5a      	adds	r2, r3, #1
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800750e:	3b01      	subs	r3, #1
 8007510:	b29a      	uxth	r2, r3
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800751a:	b29b      	uxth	r3, r3
 800751c:	3b01      	subs	r3, #1
 800751e:	b29a      	uxth	r2, r3
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007524:	e0b8      	b.n	8007698 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007528:	9300      	str	r3, [sp, #0]
 800752a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752c:	2200      	movs	r2, #0
 800752e:	4966      	ldr	r1, [pc, #408]	; (80076c8 <HAL_I2C_Mem_Read+0x448>)
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f000 fb77 	bl	8007c24 <I2C_WaitOnFlagUntilTimeout>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d001      	beq.n	8007540 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	e0bf      	b.n	80076c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800754e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	691a      	ldr	r2, [r3, #16]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755a:	b2d2      	uxtb	r2, r2
 800755c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007562:	1c5a      	adds	r2, r3, #1
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800756c:	3b01      	subs	r3, #1
 800756e:	b29a      	uxth	r2, r3
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007578:	b29b      	uxth	r3, r3
 800757a:	3b01      	subs	r3, #1
 800757c:	b29a      	uxth	r2, r3
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007584:	9300      	str	r3, [sp, #0]
 8007586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007588:	2200      	movs	r2, #0
 800758a:	494f      	ldr	r1, [pc, #316]	; (80076c8 <HAL_I2C_Mem_Read+0x448>)
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	f000 fb49 	bl	8007c24 <I2C_WaitOnFlagUntilTimeout>
 8007592:	4603      	mov	r3, r0
 8007594:	2b00      	cmp	r3, #0
 8007596:	d001      	beq.n	800759c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	e091      	b.n	80076c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	691a      	ldr	r2, [r3, #16]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b6:	b2d2      	uxtb	r2, r2
 80075b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075be:	1c5a      	adds	r2, r3, #1
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075c8:	3b01      	subs	r3, #1
 80075ca:	b29a      	uxth	r2, r3
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	3b01      	subs	r3, #1
 80075d8:	b29a      	uxth	r2, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	691a      	ldr	r2, [r3, #16]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e8:	b2d2      	uxtb	r2, r2
 80075ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f0:	1c5a      	adds	r2, r3, #1
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075fa:	3b01      	subs	r3, #1
 80075fc:	b29a      	uxth	r2, r3
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007606:	b29b      	uxth	r3, r3
 8007608:	3b01      	subs	r3, #1
 800760a:	b29a      	uxth	r2, r3
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007610:	e042      	b.n	8007698 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007614:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	f000 fc5c 	bl	8007ed4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800761c:	4603      	mov	r3, r0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d001      	beq.n	8007626 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	e04c      	b.n	80076c0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	691a      	ldr	r2, [r3, #16]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007630:	b2d2      	uxtb	r2, r2
 8007632:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007638:	1c5a      	adds	r2, r3, #1
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007642:	3b01      	subs	r3, #1
 8007644:	b29a      	uxth	r2, r3
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800764e:	b29b      	uxth	r3, r3
 8007650:	3b01      	subs	r3, #1
 8007652:	b29a      	uxth	r2, r3
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	695b      	ldr	r3, [r3, #20]
 800765e:	f003 0304 	and.w	r3, r3, #4
 8007662:	2b04      	cmp	r3, #4
 8007664:	d118      	bne.n	8007698 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	691a      	ldr	r2, [r3, #16]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007670:	b2d2      	uxtb	r2, r2
 8007672:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007678:	1c5a      	adds	r2, r3, #1
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007682:	3b01      	subs	r3, #1
 8007684:	b29a      	uxth	r2, r3
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800768e:	b29b      	uxth	r3, r3
 8007690:	3b01      	subs	r3, #1
 8007692:	b29a      	uxth	r2, r3
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800769c:	2b00      	cmp	r3, #0
 800769e:	f47f aec2 	bne.w	8007426 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2220      	movs	r2, #32
 80076a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80076ba:	2300      	movs	r3, #0
 80076bc:	e000      	b.n	80076c0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80076be:	2302      	movs	r3, #2
  }
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3728      	adds	r7, #40	; 0x28
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	00010004 	.word	0x00010004

080076cc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b08a      	sub	sp, #40	; 0x28
 80076d0:	af02      	add	r7, sp, #8
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	607a      	str	r2, [r7, #4]
 80076d6:	603b      	str	r3, [r7, #0]
 80076d8:	460b      	mov	r3, r1
 80076da:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80076dc:	f7fe f896 	bl	800580c <HAL_GetTick>
 80076e0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80076e2:	2300      	movs	r3, #0
 80076e4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	2b20      	cmp	r3, #32
 80076f0:	f040 8111 	bne.w	8007916 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	9300      	str	r3, [sp, #0]
 80076f8:	2319      	movs	r3, #25
 80076fa:	2201      	movs	r2, #1
 80076fc:	4988      	ldr	r1, [pc, #544]	; (8007920 <HAL_I2C_IsDeviceReady+0x254>)
 80076fe:	68f8      	ldr	r0, [r7, #12]
 8007700:	f000 fa90 	bl	8007c24 <I2C_WaitOnFlagUntilTimeout>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d001      	beq.n	800770e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800770a:	2302      	movs	r3, #2
 800770c:	e104      	b.n	8007918 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007714:	2b01      	cmp	r3, #1
 8007716:	d101      	bne.n	800771c <HAL_I2C_IsDeviceReady+0x50>
 8007718:	2302      	movs	r3, #2
 800771a:	e0fd      	b.n	8007918 <HAL_I2C_IsDeviceReady+0x24c>
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 0301 	and.w	r3, r3, #1
 800772e:	2b01      	cmp	r3, #1
 8007730:	d007      	beq.n	8007742 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f042 0201 	orr.w	r2, r2, #1
 8007740:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007750:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2224      	movs	r2, #36	; 0x24
 8007756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2200      	movs	r2, #0
 800775e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	4a70      	ldr	r2, [pc, #448]	; (8007924 <HAL_I2C_IsDeviceReady+0x258>)
 8007764:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007774:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	9300      	str	r3, [sp, #0]
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	2200      	movs	r2, #0
 800777e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007782:	68f8      	ldr	r0, [r7, #12]
 8007784:	f000 fa4e 	bl	8007c24 <I2C_WaitOnFlagUntilTimeout>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00d      	beq.n	80077aa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007798:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800779c:	d103      	bne.n	80077a6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077a4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80077a6:	2303      	movs	r3, #3
 80077a8:	e0b6      	b.n	8007918 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80077aa:	897b      	ldrh	r3, [r7, #10]
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	461a      	mov	r2, r3
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80077b8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80077ba:	f7fe f827 	bl	800580c <HAL_GetTick>
 80077be:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	695b      	ldr	r3, [r3, #20]
 80077c6:	f003 0302 	and.w	r3, r3, #2
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	bf0c      	ite	eq
 80077ce:	2301      	moveq	r3, #1
 80077d0:	2300      	movne	r3, #0
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	695b      	ldr	r3, [r3, #20]
 80077dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077e4:	bf0c      	ite	eq
 80077e6:	2301      	moveq	r3, #1
 80077e8:	2300      	movne	r3, #0
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80077ee:	e025      	b.n	800783c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80077f0:	f7fe f80c 	bl	800580c <HAL_GetTick>
 80077f4:	4602      	mov	r2, r0
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	1ad3      	subs	r3, r2, r3
 80077fa:	683a      	ldr	r2, [r7, #0]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d302      	bcc.n	8007806 <HAL_I2C_IsDeviceReady+0x13a>
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d103      	bne.n	800780e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	22a0      	movs	r2, #160	; 0xa0
 800780a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	695b      	ldr	r3, [r3, #20]
 8007814:	f003 0302 	and.w	r3, r3, #2
 8007818:	2b02      	cmp	r3, #2
 800781a:	bf0c      	ite	eq
 800781c:	2301      	moveq	r3, #1
 800781e:	2300      	movne	r3, #0
 8007820:	b2db      	uxtb	r3, r3
 8007822:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	695b      	ldr	r3, [r3, #20]
 800782a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800782e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007832:	bf0c      	ite	eq
 8007834:	2301      	moveq	r3, #1
 8007836:	2300      	movne	r3, #0
 8007838:	b2db      	uxtb	r3, r3
 800783a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007842:	b2db      	uxtb	r3, r3
 8007844:	2ba0      	cmp	r3, #160	; 0xa0
 8007846:	d005      	beq.n	8007854 <HAL_I2C_IsDeviceReady+0x188>
 8007848:	7dfb      	ldrb	r3, [r7, #23]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d102      	bne.n	8007854 <HAL_I2C_IsDeviceReady+0x188>
 800784e:	7dbb      	ldrb	r3, [r7, #22]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d0cd      	beq.n	80077f0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2220      	movs	r2, #32
 8007858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	695b      	ldr	r3, [r3, #20]
 8007862:	f003 0302 	and.w	r3, r3, #2
 8007866:	2b02      	cmp	r3, #2
 8007868:	d129      	bne.n	80078be <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007878:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800787a:	2300      	movs	r3, #0
 800787c:	613b      	str	r3, [r7, #16]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	695b      	ldr	r3, [r3, #20]
 8007884:	613b      	str	r3, [r7, #16]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	699b      	ldr	r3, [r3, #24]
 800788c:	613b      	str	r3, [r7, #16]
 800788e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	9300      	str	r3, [sp, #0]
 8007894:	2319      	movs	r3, #25
 8007896:	2201      	movs	r2, #1
 8007898:	4921      	ldr	r1, [pc, #132]	; (8007920 <HAL_I2C_IsDeviceReady+0x254>)
 800789a:	68f8      	ldr	r0, [r7, #12]
 800789c:	f000 f9c2 	bl	8007c24 <I2C_WaitOnFlagUntilTimeout>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d001      	beq.n	80078aa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e036      	b.n	8007918 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2220      	movs	r2, #32
 80078ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80078ba:	2300      	movs	r3, #0
 80078bc:	e02c      	b.n	8007918 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078cc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80078d6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80078d8:	69fb      	ldr	r3, [r7, #28]
 80078da:	9300      	str	r3, [sp, #0]
 80078dc:	2319      	movs	r3, #25
 80078de:	2201      	movs	r2, #1
 80078e0:	490f      	ldr	r1, [pc, #60]	; (8007920 <HAL_I2C_IsDeviceReady+0x254>)
 80078e2:	68f8      	ldr	r0, [r7, #12]
 80078e4:	f000 f99e 	bl	8007c24 <I2C_WaitOnFlagUntilTimeout>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d001      	beq.n	80078f2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	e012      	b.n	8007918 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	3301      	adds	r3, #1
 80078f6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80078f8:	69ba      	ldr	r2, [r7, #24]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	f4ff af32 	bcc.w	8007766 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2220      	movs	r2, #32
 8007906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2200      	movs	r2, #0
 800790e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e000      	b.n	8007918 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8007916:	2302      	movs	r3, #2
  }
}
 8007918:	4618      	mov	r0, r3
 800791a:	3720      	adds	r7, #32
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}
 8007920:	00100002 	.word	0x00100002
 8007924:	ffff0000 	.word	0xffff0000

08007928 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b088      	sub	sp, #32
 800792c:	af02      	add	r7, sp, #8
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	4608      	mov	r0, r1
 8007932:	4611      	mov	r1, r2
 8007934:	461a      	mov	r2, r3
 8007936:	4603      	mov	r3, r0
 8007938:	817b      	strh	r3, [r7, #10]
 800793a:	460b      	mov	r3, r1
 800793c:	813b      	strh	r3, [r7, #8]
 800793e:	4613      	mov	r3, r2
 8007940:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007950:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007954:	9300      	str	r3, [sp, #0]
 8007956:	6a3b      	ldr	r3, [r7, #32]
 8007958:	2200      	movs	r2, #0
 800795a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f000 f960 	bl	8007c24 <I2C_WaitOnFlagUntilTimeout>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00d      	beq.n	8007986 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007974:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007978:	d103      	bne.n	8007982 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007980:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007982:	2303      	movs	r3, #3
 8007984:	e05f      	b.n	8007a46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007986:	897b      	ldrh	r3, [r7, #10]
 8007988:	b2db      	uxtb	r3, r3
 800798a:	461a      	mov	r2, r3
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007994:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007998:	6a3a      	ldr	r2, [r7, #32]
 800799a:	492d      	ldr	r1, [pc, #180]	; (8007a50 <I2C_RequestMemoryWrite+0x128>)
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f000 f998 	bl	8007cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d001      	beq.n	80079ac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	e04c      	b.n	8007a46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079ac:	2300      	movs	r3, #0
 80079ae:	617b      	str	r3, [r7, #20]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	695b      	ldr	r3, [r3, #20]
 80079b6:	617b      	str	r3, [r7, #20]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	699b      	ldr	r3, [r3, #24]
 80079be:	617b      	str	r3, [r7, #20]
 80079c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079c4:	6a39      	ldr	r1, [r7, #32]
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	f000 fa02 	bl	8007dd0 <I2C_WaitOnTXEFlagUntilTimeout>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00d      	beq.n	80079ee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d6:	2b04      	cmp	r3, #4
 80079d8:	d107      	bne.n	80079ea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e02b      	b.n	8007a46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80079ee:	88fb      	ldrh	r3, [r7, #6]
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d105      	bne.n	8007a00 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80079f4:	893b      	ldrh	r3, [r7, #8]
 80079f6:	b2da      	uxtb	r2, r3
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	611a      	str	r2, [r3, #16]
 80079fe:	e021      	b.n	8007a44 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007a00:	893b      	ldrh	r3, [r7, #8]
 8007a02:	0a1b      	lsrs	r3, r3, #8
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	b2da      	uxtb	r2, r3
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a10:	6a39      	ldr	r1, [r7, #32]
 8007a12:	68f8      	ldr	r0, [r7, #12]
 8007a14:	f000 f9dc 	bl	8007dd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00d      	beq.n	8007a3a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a22:	2b04      	cmp	r3, #4
 8007a24:	d107      	bne.n	8007a36 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e005      	b.n	8007a46 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007a3a:	893b      	ldrh	r3, [r7, #8]
 8007a3c:	b2da      	uxtb	r2, r3
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3718      	adds	r7, #24
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	00010002 	.word	0x00010002

08007a54 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b088      	sub	sp, #32
 8007a58:	af02      	add	r7, sp, #8
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	4608      	mov	r0, r1
 8007a5e:	4611      	mov	r1, r2
 8007a60:	461a      	mov	r2, r3
 8007a62:	4603      	mov	r3, r0
 8007a64:	817b      	strh	r3, [r7, #10]
 8007a66:	460b      	mov	r3, r1
 8007a68:	813b      	strh	r3, [r7, #8]
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a7c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a90:	9300      	str	r3, [sp, #0]
 8007a92:	6a3b      	ldr	r3, [r7, #32]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007a9a:	68f8      	ldr	r0, [r7, #12]
 8007a9c:	f000 f8c2 	bl	8007c24 <I2C_WaitOnFlagUntilTimeout>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d00d      	beq.n	8007ac2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ab0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ab4:	d103      	bne.n	8007abe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007abc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007abe:	2303      	movs	r3, #3
 8007ac0:	e0aa      	b.n	8007c18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007ac2:	897b      	ldrh	r3, [r7, #10]
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007ad0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad4:	6a3a      	ldr	r2, [r7, #32]
 8007ad6:	4952      	ldr	r1, [pc, #328]	; (8007c20 <I2C_RequestMemoryRead+0x1cc>)
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f000 f8fa 	bl	8007cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d001      	beq.n	8007ae8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	e097      	b.n	8007c18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ae8:	2300      	movs	r3, #0
 8007aea:	617b      	str	r3, [r7, #20]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	695b      	ldr	r3, [r3, #20]
 8007af2:	617b      	str	r3, [r7, #20]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	699b      	ldr	r3, [r3, #24]
 8007afa:	617b      	str	r3, [r7, #20]
 8007afc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b00:	6a39      	ldr	r1, [r7, #32]
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	f000 f964 	bl	8007dd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00d      	beq.n	8007b2a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b12:	2b04      	cmp	r3, #4
 8007b14:	d107      	bne.n	8007b26 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	e076      	b.n	8007c18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007b2a:	88fb      	ldrh	r3, [r7, #6]
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d105      	bne.n	8007b3c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007b30:	893b      	ldrh	r3, [r7, #8]
 8007b32:	b2da      	uxtb	r2, r3
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	611a      	str	r2, [r3, #16]
 8007b3a:	e021      	b.n	8007b80 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007b3c:	893b      	ldrh	r3, [r7, #8]
 8007b3e:	0a1b      	lsrs	r3, r3, #8
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	b2da      	uxtb	r2, r3
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b4c:	6a39      	ldr	r1, [r7, #32]
 8007b4e:	68f8      	ldr	r0, [r7, #12]
 8007b50:	f000 f93e 	bl	8007dd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00d      	beq.n	8007b76 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5e:	2b04      	cmp	r3, #4
 8007b60:	d107      	bne.n	8007b72 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e050      	b.n	8007c18 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007b76:	893b      	ldrh	r3, [r7, #8]
 8007b78:	b2da      	uxtb	r2, r3
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b82:	6a39      	ldr	r1, [r7, #32]
 8007b84:	68f8      	ldr	r0, [r7, #12]
 8007b86:	f000 f923 	bl	8007dd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00d      	beq.n	8007bac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b94:	2b04      	cmp	r3, #4
 8007b96:	d107      	bne.n	8007ba8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ba6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e035      	b.n	8007c18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007bba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbe:	9300      	str	r3, [sp, #0]
 8007bc0:	6a3b      	ldr	r3, [r7, #32]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007bc8:	68f8      	ldr	r0, [r7, #12]
 8007bca:	f000 f82b 	bl	8007c24 <I2C_WaitOnFlagUntilTimeout>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00d      	beq.n	8007bf0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007be2:	d103      	bne.n	8007bec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007bec:	2303      	movs	r3, #3
 8007bee:	e013      	b.n	8007c18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007bf0:	897b      	ldrh	r3, [r7, #10]
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	f043 0301 	orr.w	r3, r3, #1
 8007bf8:	b2da      	uxtb	r2, r3
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c02:	6a3a      	ldr	r2, [r7, #32]
 8007c04:	4906      	ldr	r1, [pc, #24]	; (8007c20 <I2C_RequestMemoryRead+0x1cc>)
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f000 f863 	bl	8007cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d001      	beq.n	8007c16 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	e000      	b.n	8007c18 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007c16:	2300      	movs	r3, #0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3718      	adds	r7, #24
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	00010002 	.word	0x00010002

08007c24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	60b9      	str	r1, [r7, #8]
 8007c2e:	603b      	str	r3, [r7, #0]
 8007c30:	4613      	mov	r3, r2
 8007c32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c34:	e025      	b.n	8007c82 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c3c:	d021      	beq.n	8007c82 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c3e:	f7fd fde5 	bl	800580c <HAL_GetTick>
 8007c42:	4602      	mov	r2, r0
 8007c44:	69bb      	ldr	r3, [r7, #24]
 8007c46:	1ad3      	subs	r3, r2, r3
 8007c48:	683a      	ldr	r2, [r7, #0]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d302      	bcc.n	8007c54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d116      	bne.n	8007c82 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2200      	movs	r2, #0
 8007c58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2220      	movs	r2, #32
 8007c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6e:	f043 0220 	orr.w	r2, r3, #32
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e023      	b.n	8007cca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	0c1b      	lsrs	r3, r3, #16
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d10d      	bne.n	8007ca8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	43da      	mvns	r2, r3
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	4013      	ands	r3, r2
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	bf0c      	ite	eq
 8007c9e:	2301      	moveq	r3, #1
 8007ca0:	2300      	movne	r3, #0
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	e00c      	b.n	8007cc2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	699b      	ldr	r3, [r3, #24]
 8007cae:	43da      	mvns	r2, r3
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	4013      	ands	r3, r2
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	bf0c      	ite	eq
 8007cba:	2301      	moveq	r3, #1
 8007cbc:	2300      	movne	r3, #0
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	79fb      	ldrb	r3, [r7, #7]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d0b6      	beq.n	8007c36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3710      	adds	r7, #16
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b084      	sub	sp, #16
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	60f8      	str	r0, [r7, #12]
 8007cda:	60b9      	str	r1, [r7, #8]
 8007cdc:	607a      	str	r2, [r7, #4]
 8007cde:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007ce0:	e051      	b.n	8007d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	695b      	ldr	r3, [r3, #20]
 8007ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cf0:	d123      	bne.n	8007d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d00:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007d0a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2220      	movs	r2, #32
 8007d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d26:	f043 0204 	orr.w	r2, r3, #4
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e046      	b.n	8007dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d40:	d021      	beq.n	8007d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d42:	f7fd fd63 	bl	800580c <HAL_GetTick>
 8007d46:	4602      	mov	r2, r0
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	1ad3      	subs	r3, r2, r3
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d302      	bcc.n	8007d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d116      	bne.n	8007d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2220      	movs	r2, #32
 8007d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d72:	f043 0220 	orr.w	r2, r3, #32
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	e020      	b.n	8007dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	0c1b      	lsrs	r3, r3, #16
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d10c      	bne.n	8007daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	695b      	ldr	r3, [r3, #20]
 8007d96:	43da      	mvns	r2, r3
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	4013      	ands	r3, r2
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	bf14      	ite	ne
 8007da2:	2301      	movne	r3, #1
 8007da4:	2300      	moveq	r3, #0
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	e00b      	b.n	8007dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	699b      	ldr	r3, [r3, #24]
 8007db0:	43da      	mvns	r2, r3
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	4013      	ands	r3, r2
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	bf14      	ite	ne
 8007dbc:	2301      	movne	r3, #1
 8007dbe:	2300      	moveq	r3, #0
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d18d      	bne.n	8007ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ddc:	e02d      	b.n	8007e3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	f000 f8ce 	bl	8007f80 <I2C_IsAcknowledgeFailed>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d001      	beq.n	8007dee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	e02d      	b.n	8007e4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df4:	d021      	beq.n	8007e3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007df6:	f7fd fd09 	bl	800580c <HAL_GetTick>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	1ad3      	subs	r3, r2, r3
 8007e00:	68ba      	ldr	r2, [r7, #8]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d302      	bcc.n	8007e0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d116      	bne.n	8007e3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2220      	movs	r2, #32
 8007e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e26:	f043 0220 	orr.w	r2, r3, #32
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e007      	b.n	8007e4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	695b      	ldr	r3, [r3, #20]
 8007e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e44:	2b80      	cmp	r3, #128	; 0x80
 8007e46:	d1ca      	bne.n	8007dde <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b084      	sub	sp, #16
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	60f8      	str	r0, [r7, #12]
 8007e5a:	60b9      	str	r1, [r7, #8]
 8007e5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007e5e:	e02d      	b.n	8007ebc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007e60:	68f8      	ldr	r0, [r7, #12]
 8007e62:	f000 f88d 	bl	8007f80 <I2C_IsAcknowledgeFailed>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d001      	beq.n	8007e70 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e02d      	b.n	8007ecc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e76:	d021      	beq.n	8007ebc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e78:	f7fd fcc8 	bl	800580c <HAL_GetTick>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	68ba      	ldr	r2, [r7, #8]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d302      	bcc.n	8007e8e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d116      	bne.n	8007ebc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2200      	movs	r2, #0
 8007e92:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2220      	movs	r2, #32
 8007e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea8:	f043 0220 	orr.w	r2, r3, #32
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e007      	b.n	8007ecc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	695b      	ldr	r3, [r3, #20]
 8007ec2:	f003 0304 	and.w	r3, r3, #4
 8007ec6:	2b04      	cmp	r3, #4
 8007ec8:	d1ca      	bne.n	8007e60 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007ee0:	e042      	b.n	8007f68 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	695b      	ldr	r3, [r3, #20]
 8007ee8:	f003 0310 	and.w	r3, r3, #16
 8007eec:	2b10      	cmp	r3, #16
 8007eee:	d119      	bne.n	8007f24 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f06f 0210 	mvn.w	r2, #16
 8007ef8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2200      	movs	r2, #0
 8007efe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2220      	movs	r2, #32
 8007f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	e029      	b.n	8007f78 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f24:	f7fd fc72 	bl	800580c <HAL_GetTick>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	1ad3      	subs	r3, r2, r3
 8007f2e:	68ba      	ldr	r2, [r7, #8]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d302      	bcc.n	8007f3a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d116      	bne.n	8007f68 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2220      	movs	r2, #32
 8007f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f54:	f043 0220 	orr.w	r2, r3, #32
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007f64:	2301      	movs	r3, #1
 8007f66:	e007      	b.n	8007f78 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	695b      	ldr	r3, [r3, #20]
 8007f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f72:	2b40      	cmp	r3, #64	; 0x40
 8007f74:	d1b5      	bne.n	8007ee2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3710      	adds	r7, #16
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	695b      	ldr	r3, [r3, #20]
 8007f8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f96:	d11b      	bne.n	8007fd0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007fa0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2220      	movs	r2, #32
 8007fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fbc:	f043 0204 	orr.w	r2, r3, #4
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e000      	b.n	8007fd2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	370c      	adds	r7, #12
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr
	...

08007fe0 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8007fe6:	4b06      	ldr	r3, [pc, #24]	; (8008000 <HAL_PWR_EnableBkUpAccess+0x20>)
 8007fe8:	2201      	movs	r2, #1
 8007fea:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8007fec:	4b05      	ldr	r3, [pc, #20]	; (8008004 <HAL_PWR_EnableBkUpAccess+0x24>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8007ff2:	687b      	ldr	r3, [r7, #4]
}
 8007ff4:	bf00      	nop
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr
 8008000:	420e0020 	.word	0x420e0020
 8008004:	40007000 	.word	0x40007000

08008008 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 800800e:	4b06      	ldr	r3, [pc, #24]	; (8008028 <HAL_PWR_DisableBkUpAccess+0x20>)
 8008010:	2200      	movs	r2, #0
 8008012:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8008014:	4b05      	ldr	r3, [pc, #20]	; (800802c <HAL_PWR_DisableBkUpAccess+0x24>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800801a:	687b      	ldr	r3, [r7, #4]
}
 800801c:	bf00      	nop
 800801e:	370c      	adds	r7, #12
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr
 8008028:	420e0020 	.word	0x420e0020
 800802c:	40007000 	.word	0x40007000

08008030 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b086      	sub	sp, #24
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d101      	bne.n	8008042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	e267      	b.n	8008512 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f003 0301 	and.w	r3, r3, #1
 800804a:	2b00      	cmp	r3, #0
 800804c:	d075      	beq.n	800813a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800804e:	4b88      	ldr	r3, [pc, #544]	; (8008270 <HAL_RCC_OscConfig+0x240>)
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	f003 030c 	and.w	r3, r3, #12
 8008056:	2b04      	cmp	r3, #4
 8008058:	d00c      	beq.n	8008074 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800805a:	4b85      	ldr	r3, [pc, #532]	; (8008270 <HAL_RCC_OscConfig+0x240>)
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008062:	2b08      	cmp	r3, #8
 8008064:	d112      	bne.n	800808c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008066:	4b82      	ldr	r3, [pc, #520]	; (8008270 <HAL_RCC_OscConfig+0x240>)
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800806e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008072:	d10b      	bne.n	800808c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008074:	4b7e      	ldr	r3, [pc, #504]	; (8008270 <HAL_RCC_OscConfig+0x240>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800807c:	2b00      	cmp	r3, #0
 800807e:	d05b      	beq.n	8008138 <HAL_RCC_OscConfig+0x108>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d157      	bne.n	8008138 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008088:	2301      	movs	r3, #1
 800808a:	e242      	b.n	8008512 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008094:	d106      	bne.n	80080a4 <HAL_RCC_OscConfig+0x74>
 8008096:	4b76      	ldr	r3, [pc, #472]	; (8008270 <HAL_RCC_OscConfig+0x240>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a75      	ldr	r2, [pc, #468]	; (8008270 <HAL_RCC_OscConfig+0x240>)
 800809c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080a0:	6013      	str	r3, [r2, #0]
 80080a2:	e01d      	b.n	80080e0 <HAL_RCC_OscConfig+0xb0>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80080ac:	d10c      	bne.n	80080c8 <HAL_RCC_OscConfig+0x98>
 80080ae:	4b70      	ldr	r3, [pc, #448]	; (8008270 <HAL_RCC_OscConfig+0x240>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a6f      	ldr	r2, [pc, #444]	; (8008270 <HAL_RCC_OscConfig+0x240>)
 80080b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80080b8:	6013      	str	r3, [r2, #0]
 80080ba:	4b6d      	ldr	r3, [pc, #436]	; (8008270 <HAL_RCC_OscConfig+0x240>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a6c      	ldr	r2, [pc, #432]	; (8008270 <HAL_RCC_OscConfig+0x240>)
 80080c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080c4:	6013      	str	r3, [r2, #0]
 80080c6:	e00b      	b.n	80080e0 <HAL_RCC_OscConfig+0xb0>
 80080c8:	4b69      	ldr	r3, [pc, #420]	; (8008270 <HAL_RCC_OscConfig+0x240>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a68      	ldr	r2, [pc, #416]	; (8008270 <HAL_RCC_OscConfig+0x240>)
 80080ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080d2:	6013      	str	r3, [r2, #0]
 80080d4:	4b66      	ldr	r3, [pc, #408]	; (8008270 <HAL_RCC_OscConfig+0x240>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a65      	ldr	r2, [pc, #404]	; (8008270 <HAL_RCC_OscConfig+0x240>)
 80080da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d013      	beq.n	8008110 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080e8:	f7fd fb90 	bl	800580c <HAL_GetTick>
 80080ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080ee:	e008      	b.n	8008102 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80080f0:	f7fd fb8c 	bl	800580c <HAL_GetTick>
 80080f4:	4602      	mov	r2, r0
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	1ad3      	subs	r3, r2, r3
 80080fa:	2b64      	cmp	r3, #100	; 0x64
 80080fc:	d901      	bls.n	8008102 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80080fe:	2303      	movs	r3, #3
 8008100:	e207      	b.n	8008512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008102:	4b5b      	ldr	r3, [pc, #364]	; (8008270 <HAL_RCC_OscConfig+0x240>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800810a:	2b00      	cmp	r3, #0
 800810c:	d0f0      	beq.n	80080f0 <HAL_RCC_OscConfig+0xc0>
 800810e:	e014      	b.n	800813a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008110:	f7fd fb7c 	bl	800580c <HAL_GetTick>
 8008114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008116:	e008      	b.n	800812a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008118:	f7fd fb78 	bl	800580c <HAL_GetTick>
 800811c:	4602      	mov	r2, r0
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	1ad3      	subs	r3, r2, r3
 8008122:	2b64      	cmp	r3, #100	; 0x64
 8008124:	d901      	bls.n	800812a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008126:	2303      	movs	r3, #3
 8008128:	e1f3      	b.n	8008512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800812a:	4b51      	ldr	r3, [pc, #324]	; (8008270 <HAL_RCC_OscConfig+0x240>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008132:	2b00      	cmp	r3, #0
 8008134:	d1f0      	bne.n	8008118 <HAL_RCC_OscConfig+0xe8>
 8008136:	e000      	b.n	800813a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f003 0302 	and.w	r3, r3, #2
 8008142:	2b00      	cmp	r3, #0
 8008144:	d063      	beq.n	800820e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008146:	4b4a      	ldr	r3, [pc, #296]	; (8008270 <HAL_RCC_OscConfig+0x240>)
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	f003 030c 	and.w	r3, r3, #12
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00b      	beq.n	800816a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008152:	4b47      	ldr	r3, [pc, #284]	; (8008270 <HAL_RCC_OscConfig+0x240>)
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800815a:	2b08      	cmp	r3, #8
 800815c:	d11c      	bne.n	8008198 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800815e:	4b44      	ldr	r3, [pc, #272]	; (8008270 <HAL_RCC_OscConfig+0x240>)
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008166:	2b00      	cmp	r3, #0
 8008168:	d116      	bne.n	8008198 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800816a:	4b41      	ldr	r3, [pc, #260]	; (8008270 <HAL_RCC_OscConfig+0x240>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f003 0302 	and.w	r3, r3, #2
 8008172:	2b00      	cmp	r3, #0
 8008174:	d005      	beq.n	8008182 <HAL_RCC_OscConfig+0x152>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	2b01      	cmp	r3, #1
 800817c:	d001      	beq.n	8008182 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	e1c7      	b.n	8008512 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008182:	4b3b      	ldr	r3, [pc, #236]	; (8008270 <HAL_RCC_OscConfig+0x240>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	691b      	ldr	r3, [r3, #16]
 800818e:	00db      	lsls	r3, r3, #3
 8008190:	4937      	ldr	r1, [pc, #220]	; (8008270 <HAL_RCC_OscConfig+0x240>)
 8008192:	4313      	orrs	r3, r2
 8008194:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008196:	e03a      	b.n	800820e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d020      	beq.n	80081e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80081a0:	4b34      	ldr	r3, [pc, #208]	; (8008274 <HAL_RCC_OscConfig+0x244>)
 80081a2:	2201      	movs	r2, #1
 80081a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081a6:	f7fd fb31 	bl	800580c <HAL_GetTick>
 80081aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081ac:	e008      	b.n	80081c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80081ae:	f7fd fb2d 	bl	800580c <HAL_GetTick>
 80081b2:	4602      	mov	r2, r0
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	1ad3      	subs	r3, r2, r3
 80081b8:	2b02      	cmp	r3, #2
 80081ba:	d901      	bls.n	80081c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80081bc:	2303      	movs	r3, #3
 80081be:	e1a8      	b.n	8008512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081c0:	4b2b      	ldr	r3, [pc, #172]	; (8008270 <HAL_RCC_OscConfig+0x240>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 0302 	and.w	r3, r3, #2
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d0f0      	beq.n	80081ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081cc:	4b28      	ldr	r3, [pc, #160]	; (8008270 <HAL_RCC_OscConfig+0x240>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	00db      	lsls	r3, r3, #3
 80081da:	4925      	ldr	r1, [pc, #148]	; (8008270 <HAL_RCC_OscConfig+0x240>)
 80081dc:	4313      	orrs	r3, r2
 80081de:	600b      	str	r3, [r1, #0]
 80081e0:	e015      	b.n	800820e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80081e2:	4b24      	ldr	r3, [pc, #144]	; (8008274 <HAL_RCC_OscConfig+0x244>)
 80081e4:	2200      	movs	r2, #0
 80081e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081e8:	f7fd fb10 	bl	800580c <HAL_GetTick>
 80081ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081ee:	e008      	b.n	8008202 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80081f0:	f7fd fb0c 	bl	800580c <HAL_GetTick>
 80081f4:	4602      	mov	r2, r0
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	1ad3      	subs	r3, r2, r3
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	d901      	bls.n	8008202 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80081fe:	2303      	movs	r3, #3
 8008200:	e187      	b.n	8008512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008202:	4b1b      	ldr	r3, [pc, #108]	; (8008270 <HAL_RCC_OscConfig+0x240>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f003 0302 	and.w	r3, r3, #2
 800820a:	2b00      	cmp	r3, #0
 800820c:	d1f0      	bne.n	80081f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f003 0308 	and.w	r3, r3, #8
 8008216:	2b00      	cmp	r3, #0
 8008218:	d036      	beq.n	8008288 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	695b      	ldr	r3, [r3, #20]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d016      	beq.n	8008250 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008222:	4b15      	ldr	r3, [pc, #84]	; (8008278 <HAL_RCC_OscConfig+0x248>)
 8008224:	2201      	movs	r2, #1
 8008226:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008228:	f7fd faf0 	bl	800580c <HAL_GetTick>
 800822c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800822e:	e008      	b.n	8008242 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008230:	f7fd faec 	bl	800580c <HAL_GetTick>
 8008234:	4602      	mov	r2, r0
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	1ad3      	subs	r3, r2, r3
 800823a:	2b02      	cmp	r3, #2
 800823c:	d901      	bls.n	8008242 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800823e:	2303      	movs	r3, #3
 8008240:	e167      	b.n	8008512 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008242:	4b0b      	ldr	r3, [pc, #44]	; (8008270 <HAL_RCC_OscConfig+0x240>)
 8008244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008246:	f003 0302 	and.w	r3, r3, #2
 800824a:	2b00      	cmp	r3, #0
 800824c:	d0f0      	beq.n	8008230 <HAL_RCC_OscConfig+0x200>
 800824e:	e01b      	b.n	8008288 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008250:	4b09      	ldr	r3, [pc, #36]	; (8008278 <HAL_RCC_OscConfig+0x248>)
 8008252:	2200      	movs	r2, #0
 8008254:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008256:	f7fd fad9 	bl	800580c <HAL_GetTick>
 800825a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800825c:	e00e      	b.n	800827c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800825e:	f7fd fad5 	bl	800580c <HAL_GetTick>
 8008262:	4602      	mov	r2, r0
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	1ad3      	subs	r3, r2, r3
 8008268:	2b02      	cmp	r3, #2
 800826a:	d907      	bls.n	800827c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800826c:	2303      	movs	r3, #3
 800826e:	e150      	b.n	8008512 <HAL_RCC_OscConfig+0x4e2>
 8008270:	40023800 	.word	0x40023800
 8008274:	42470000 	.word	0x42470000
 8008278:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800827c:	4b88      	ldr	r3, [pc, #544]	; (80084a0 <HAL_RCC_OscConfig+0x470>)
 800827e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008280:	f003 0302 	and.w	r3, r3, #2
 8008284:	2b00      	cmp	r3, #0
 8008286:	d1ea      	bne.n	800825e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f003 0304 	and.w	r3, r3, #4
 8008290:	2b00      	cmp	r3, #0
 8008292:	f000 8097 	beq.w	80083c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008296:	2300      	movs	r3, #0
 8008298:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800829a:	4b81      	ldr	r3, [pc, #516]	; (80084a0 <HAL_RCC_OscConfig+0x470>)
 800829c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800829e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d10f      	bne.n	80082c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80082a6:	2300      	movs	r3, #0
 80082a8:	60bb      	str	r3, [r7, #8]
 80082aa:	4b7d      	ldr	r3, [pc, #500]	; (80084a0 <HAL_RCC_OscConfig+0x470>)
 80082ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ae:	4a7c      	ldr	r2, [pc, #496]	; (80084a0 <HAL_RCC_OscConfig+0x470>)
 80082b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082b4:	6413      	str	r3, [r2, #64]	; 0x40
 80082b6:	4b7a      	ldr	r3, [pc, #488]	; (80084a0 <HAL_RCC_OscConfig+0x470>)
 80082b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082be:	60bb      	str	r3, [r7, #8]
 80082c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80082c2:	2301      	movs	r3, #1
 80082c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082c6:	4b77      	ldr	r3, [pc, #476]	; (80084a4 <HAL_RCC_OscConfig+0x474>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d118      	bne.n	8008304 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80082d2:	4b74      	ldr	r3, [pc, #464]	; (80084a4 <HAL_RCC_OscConfig+0x474>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a73      	ldr	r2, [pc, #460]	; (80084a4 <HAL_RCC_OscConfig+0x474>)
 80082d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80082de:	f7fd fa95 	bl	800580c <HAL_GetTick>
 80082e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082e4:	e008      	b.n	80082f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082e6:	f7fd fa91 	bl	800580c <HAL_GetTick>
 80082ea:	4602      	mov	r2, r0
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	1ad3      	subs	r3, r2, r3
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	d901      	bls.n	80082f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80082f4:	2303      	movs	r3, #3
 80082f6:	e10c      	b.n	8008512 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082f8:	4b6a      	ldr	r3, [pc, #424]	; (80084a4 <HAL_RCC_OscConfig+0x474>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008300:	2b00      	cmp	r3, #0
 8008302:	d0f0      	beq.n	80082e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	2b01      	cmp	r3, #1
 800830a:	d106      	bne.n	800831a <HAL_RCC_OscConfig+0x2ea>
 800830c:	4b64      	ldr	r3, [pc, #400]	; (80084a0 <HAL_RCC_OscConfig+0x470>)
 800830e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008310:	4a63      	ldr	r2, [pc, #396]	; (80084a0 <HAL_RCC_OscConfig+0x470>)
 8008312:	f043 0301 	orr.w	r3, r3, #1
 8008316:	6713      	str	r3, [r2, #112]	; 0x70
 8008318:	e01c      	b.n	8008354 <HAL_RCC_OscConfig+0x324>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	2b05      	cmp	r3, #5
 8008320:	d10c      	bne.n	800833c <HAL_RCC_OscConfig+0x30c>
 8008322:	4b5f      	ldr	r3, [pc, #380]	; (80084a0 <HAL_RCC_OscConfig+0x470>)
 8008324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008326:	4a5e      	ldr	r2, [pc, #376]	; (80084a0 <HAL_RCC_OscConfig+0x470>)
 8008328:	f043 0304 	orr.w	r3, r3, #4
 800832c:	6713      	str	r3, [r2, #112]	; 0x70
 800832e:	4b5c      	ldr	r3, [pc, #368]	; (80084a0 <HAL_RCC_OscConfig+0x470>)
 8008330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008332:	4a5b      	ldr	r2, [pc, #364]	; (80084a0 <HAL_RCC_OscConfig+0x470>)
 8008334:	f043 0301 	orr.w	r3, r3, #1
 8008338:	6713      	str	r3, [r2, #112]	; 0x70
 800833a:	e00b      	b.n	8008354 <HAL_RCC_OscConfig+0x324>
 800833c:	4b58      	ldr	r3, [pc, #352]	; (80084a0 <HAL_RCC_OscConfig+0x470>)
 800833e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008340:	4a57      	ldr	r2, [pc, #348]	; (80084a0 <HAL_RCC_OscConfig+0x470>)
 8008342:	f023 0301 	bic.w	r3, r3, #1
 8008346:	6713      	str	r3, [r2, #112]	; 0x70
 8008348:	4b55      	ldr	r3, [pc, #340]	; (80084a0 <HAL_RCC_OscConfig+0x470>)
 800834a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800834c:	4a54      	ldr	r2, [pc, #336]	; (80084a0 <HAL_RCC_OscConfig+0x470>)
 800834e:	f023 0304 	bic.w	r3, r3, #4
 8008352:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d015      	beq.n	8008388 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800835c:	f7fd fa56 	bl	800580c <HAL_GetTick>
 8008360:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008362:	e00a      	b.n	800837a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008364:	f7fd fa52 	bl	800580c <HAL_GetTick>
 8008368:	4602      	mov	r2, r0
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	1ad3      	subs	r3, r2, r3
 800836e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008372:	4293      	cmp	r3, r2
 8008374:	d901      	bls.n	800837a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008376:	2303      	movs	r3, #3
 8008378:	e0cb      	b.n	8008512 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800837a:	4b49      	ldr	r3, [pc, #292]	; (80084a0 <HAL_RCC_OscConfig+0x470>)
 800837c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800837e:	f003 0302 	and.w	r3, r3, #2
 8008382:	2b00      	cmp	r3, #0
 8008384:	d0ee      	beq.n	8008364 <HAL_RCC_OscConfig+0x334>
 8008386:	e014      	b.n	80083b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008388:	f7fd fa40 	bl	800580c <HAL_GetTick>
 800838c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800838e:	e00a      	b.n	80083a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008390:	f7fd fa3c 	bl	800580c <HAL_GetTick>
 8008394:	4602      	mov	r2, r0
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	f241 3288 	movw	r2, #5000	; 0x1388
 800839e:	4293      	cmp	r3, r2
 80083a0:	d901      	bls.n	80083a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80083a2:	2303      	movs	r3, #3
 80083a4:	e0b5      	b.n	8008512 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083a6:	4b3e      	ldr	r3, [pc, #248]	; (80084a0 <HAL_RCC_OscConfig+0x470>)
 80083a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083aa:	f003 0302 	and.w	r3, r3, #2
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1ee      	bne.n	8008390 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80083b2:	7dfb      	ldrb	r3, [r7, #23]
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d105      	bne.n	80083c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80083b8:	4b39      	ldr	r3, [pc, #228]	; (80084a0 <HAL_RCC_OscConfig+0x470>)
 80083ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083bc:	4a38      	ldr	r2, [pc, #224]	; (80084a0 <HAL_RCC_OscConfig+0x470>)
 80083be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	699b      	ldr	r3, [r3, #24]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	f000 80a1 	beq.w	8008510 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80083ce:	4b34      	ldr	r3, [pc, #208]	; (80084a0 <HAL_RCC_OscConfig+0x470>)
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	f003 030c 	and.w	r3, r3, #12
 80083d6:	2b08      	cmp	r3, #8
 80083d8:	d05c      	beq.n	8008494 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	699b      	ldr	r3, [r3, #24]
 80083de:	2b02      	cmp	r3, #2
 80083e0:	d141      	bne.n	8008466 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083e2:	4b31      	ldr	r3, [pc, #196]	; (80084a8 <HAL_RCC_OscConfig+0x478>)
 80083e4:	2200      	movs	r2, #0
 80083e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083e8:	f7fd fa10 	bl	800580c <HAL_GetTick>
 80083ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083ee:	e008      	b.n	8008402 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083f0:	f7fd fa0c 	bl	800580c <HAL_GetTick>
 80083f4:	4602      	mov	r2, r0
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	1ad3      	subs	r3, r2, r3
 80083fa:	2b02      	cmp	r3, #2
 80083fc:	d901      	bls.n	8008402 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80083fe:	2303      	movs	r3, #3
 8008400:	e087      	b.n	8008512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008402:	4b27      	ldr	r3, [pc, #156]	; (80084a0 <HAL_RCC_OscConfig+0x470>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800840a:	2b00      	cmp	r3, #0
 800840c:	d1f0      	bne.n	80083f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	69da      	ldr	r2, [r3, #28]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a1b      	ldr	r3, [r3, #32]
 8008416:	431a      	orrs	r2, r3
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841c:	019b      	lsls	r3, r3, #6
 800841e:	431a      	orrs	r2, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008424:	085b      	lsrs	r3, r3, #1
 8008426:	3b01      	subs	r3, #1
 8008428:	041b      	lsls	r3, r3, #16
 800842a:	431a      	orrs	r2, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008430:	061b      	lsls	r3, r3, #24
 8008432:	491b      	ldr	r1, [pc, #108]	; (80084a0 <HAL_RCC_OscConfig+0x470>)
 8008434:	4313      	orrs	r3, r2
 8008436:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008438:	4b1b      	ldr	r3, [pc, #108]	; (80084a8 <HAL_RCC_OscConfig+0x478>)
 800843a:	2201      	movs	r2, #1
 800843c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800843e:	f7fd f9e5 	bl	800580c <HAL_GetTick>
 8008442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008444:	e008      	b.n	8008458 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008446:	f7fd f9e1 	bl	800580c <HAL_GetTick>
 800844a:	4602      	mov	r2, r0
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	1ad3      	subs	r3, r2, r3
 8008450:	2b02      	cmp	r3, #2
 8008452:	d901      	bls.n	8008458 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008454:	2303      	movs	r3, #3
 8008456:	e05c      	b.n	8008512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008458:	4b11      	ldr	r3, [pc, #68]	; (80084a0 <HAL_RCC_OscConfig+0x470>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008460:	2b00      	cmp	r3, #0
 8008462:	d0f0      	beq.n	8008446 <HAL_RCC_OscConfig+0x416>
 8008464:	e054      	b.n	8008510 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008466:	4b10      	ldr	r3, [pc, #64]	; (80084a8 <HAL_RCC_OscConfig+0x478>)
 8008468:	2200      	movs	r2, #0
 800846a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800846c:	f7fd f9ce 	bl	800580c <HAL_GetTick>
 8008470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008472:	e008      	b.n	8008486 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008474:	f7fd f9ca 	bl	800580c <HAL_GetTick>
 8008478:	4602      	mov	r2, r0
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	1ad3      	subs	r3, r2, r3
 800847e:	2b02      	cmp	r3, #2
 8008480:	d901      	bls.n	8008486 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008482:	2303      	movs	r3, #3
 8008484:	e045      	b.n	8008512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008486:	4b06      	ldr	r3, [pc, #24]	; (80084a0 <HAL_RCC_OscConfig+0x470>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800848e:	2b00      	cmp	r3, #0
 8008490:	d1f0      	bne.n	8008474 <HAL_RCC_OscConfig+0x444>
 8008492:	e03d      	b.n	8008510 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	699b      	ldr	r3, [r3, #24]
 8008498:	2b01      	cmp	r3, #1
 800849a:	d107      	bne.n	80084ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	e038      	b.n	8008512 <HAL_RCC_OscConfig+0x4e2>
 80084a0:	40023800 	.word	0x40023800
 80084a4:	40007000 	.word	0x40007000
 80084a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80084ac:	4b1b      	ldr	r3, [pc, #108]	; (800851c <HAL_RCC_OscConfig+0x4ec>)
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	699b      	ldr	r3, [r3, #24]
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	d028      	beq.n	800850c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d121      	bne.n	800850c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d11a      	bne.n	800850c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80084d6:	68fa      	ldr	r2, [r7, #12]
 80084d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80084dc:	4013      	ands	r3, r2
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80084e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d111      	bne.n	800850c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f2:	085b      	lsrs	r3, r3, #1
 80084f4:	3b01      	subs	r3, #1
 80084f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d107      	bne.n	800850c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008506:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008508:	429a      	cmp	r2, r3
 800850a:	d001      	beq.n	8008510 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	e000      	b.n	8008512 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008510:	2300      	movs	r3, #0
}
 8008512:	4618      	mov	r0, r3
 8008514:	3718      	adds	r7, #24
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	40023800 	.word	0x40023800

08008520 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d101      	bne.n	8008534 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008530:	2301      	movs	r3, #1
 8008532:	e0cc      	b.n	80086ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008534:	4b68      	ldr	r3, [pc, #416]	; (80086d8 <HAL_RCC_ClockConfig+0x1b8>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f003 0307 	and.w	r3, r3, #7
 800853c:	683a      	ldr	r2, [r7, #0]
 800853e:	429a      	cmp	r2, r3
 8008540:	d90c      	bls.n	800855c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008542:	4b65      	ldr	r3, [pc, #404]	; (80086d8 <HAL_RCC_ClockConfig+0x1b8>)
 8008544:	683a      	ldr	r2, [r7, #0]
 8008546:	b2d2      	uxtb	r2, r2
 8008548:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800854a:	4b63      	ldr	r3, [pc, #396]	; (80086d8 <HAL_RCC_ClockConfig+0x1b8>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f003 0307 	and.w	r3, r3, #7
 8008552:	683a      	ldr	r2, [r7, #0]
 8008554:	429a      	cmp	r2, r3
 8008556:	d001      	beq.n	800855c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008558:	2301      	movs	r3, #1
 800855a:	e0b8      	b.n	80086ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f003 0302 	and.w	r3, r3, #2
 8008564:	2b00      	cmp	r3, #0
 8008566:	d020      	beq.n	80085aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f003 0304 	and.w	r3, r3, #4
 8008570:	2b00      	cmp	r3, #0
 8008572:	d005      	beq.n	8008580 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008574:	4b59      	ldr	r3, [pc, #356]	; (80086dc <HAL_RCC_ClockConfig+0x1bc>)
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	4a58      	ldr	r2, [pc, #352]	; (80086dc <HAL_RCC_ClockConfig+0x1bc>)
 800857a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800857e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 0308 	and.w	r3, r3, #8
 8008588:	2b00      	cmp	r3, #0
 800858a:	d005      	beq.n	8008598 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800858c:	4b53      	ldr	r3, [pc, #332]	; (80086dc <HAL_RCC_ClockConfig+0x1bc>)
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	4a52      	ldr	r2, [pc, #328]	; (80086dc <HAL_RCC_ClockConfig+0x1bc>)
 8008592:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008596:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008598:	4b50      	ldr	r3, [pc, #320]	; (80086dc <HAL_RCC_ClockConfig+0x1bc>)
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	494d      	ldr	r1, [pc, #308]	; (80086dc <HAL_RCC_ClockConfig+0x1bc>)
 80085a6:	4313      	orrs	r3, r2
 80085a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f003 0301 	and.w	r3, r3, #1
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d044      	beq.n	8008640 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d107      	bne.n	80085ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085be:	4b47      	ldr	r3, [pc, #284]	; (80086dc <HAL_RCC_ClockConfig+0x1bc>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d119      	bne.n	80085fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085ca:	2301      	movs	r3, #1
 80085cc:	e07f      	b.n	80086ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	d003      	beq.n	80085de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80085da:	2b03      	cmp	r3, #3
 80085dc:	d107      	bne.n	80085ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80085de:	4b3f      	ldr	r3, [pc, #252]	; (80086dc <HAL_RCC_ClockConfig+0x1bc>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d109      	bne.n	80085fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085ea:	2301      	movs	r3, #1
 80085ec:	e06f      	b.n	80086ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085ee:	4b3b      	ldr	r3, [pc, #236]	; (80086dc <HAL_RCC_ClockConfig+0x1bc>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f003 0302 	and.w	r3, r3, #2
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d101      	bne.n	80085fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	e067      	b.n	80086ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80085fe:	4b37      	ldr	r3, [pc, #220]	; (80086dc <HAL_RCC_ClockConfig+0x1bc>)
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	f023 0203 	bic.w	r2, r3, #3
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	4934      	ldr	r1, [pc, #208]	; (80086dc <HAL_RCC_ClockConfig+0x1bc>)
 800860c:	4313      	orrs	r3, r2
 800860e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008610:	f7fd f8fc 	bl	800580c <HAL_GetTick>
 8008614:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008616:	e00a      	b.n	800862e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008618:	f7fd f8f8 	bl	800580c <HAL_GetTick>
 800861c:	4602      	mov	r2, r0
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	1ad3      	subs	r3, r2, r3
 8008622:	f241 3288 	movw	r2, #5000	; 0x1388
 8008626:	4293      	cmp	r3, r2
 8008628:	d901      	bls.n	800862e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800862a:	2303      	movs	r3, #3
 800862c:	e04f      	b.n	80086ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800862e:	4b2b      	ldr	r3, [pc, #172]	; (80086dc <HAL_RCC_ClockConfig+0x1bc>)
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	f003 020c 	and.w	r2, r3, #12
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	429a      	cmp	r2, r3
 800863e:	d1eb      	bne.n	8008618 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008640:	4b25      	ldr	r3, [pc, #148]	; (80086d8 <HAL_RCC_ClockConfig+0x1b8>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f003 0307 	and.w	r3, r3, #7
 8008648:	683a      	ldr	r2, [r7, #0]
 800864a:	429a      	cmp	r2, r3
 800864c:	d20c      	bcs.n	8008668 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800864e:	4b22      	ldr	r3, [pc, #136]	; (80086d8 <HAL_RCC_ClockConfig+0x1b8>)
 8008650:	683a      	ldr	r2, [r7, #0]
 8008652:	b2d2      	uxtb	r2, r2
 8008654:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008656:	4b20      	ldr	r3, [pc, #128]	; (80086d8 <HAL_RCC_ClockConfig+0x1b8>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f003 0307 	and.w	r3, r3, #7
 800865e:	683a      	ldr	r2, [r7, #0]
 8008660:	429a      	cmp	r2, r3
 8008662:	d001      	beq.n	8008668 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008664:	2301      	movs	r3, #1
 8008666:	e032      	b.n	80086ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f003 0304 	and.w	r3, r3, #4
 8008670:	2b00      	cmp	r3, #0
 8008672:	d008      	beq.n	8008686 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008674:	4b19      	ldr	r3, [pc, #100]	; (80086dc <HAL_RCC_ClockConfig+0x1bc>)
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	4916      	ldr	r1, [pc, #88]	; (80086dc <HAL_RCC_ClockConfig+0x1bc>)
 8008682:	4313      	orrs	r3, r2
 8008684:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f003 0308 	and.w	r3, r3, #8
 800868e:	2b00      	cmp	r3, #0
 8008690:	d009      	beq.n	80086a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008692:	4b12      	ldr	r3, [pc, #72]	; (80086dc <HAL_RCC_ClockConfig+0x1bc>)
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	691b      	ldr	r3, [r3, #16]
 800869e:	00db      	lsls	r3, r3, #3
 80086a0:	490e      	ldr	r1, [pc, #56]	; (80086dc <HAL_RCC_ClockConfig+0x1bc>)
 80086a2:	4313      	orrs	r3, r2
 80086a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80086a6:	f000 f821 	bl	80086ec <HAL_RCC_GetSysClockFreq>
 80086aa:	4602      	mov	r2, r0
 80086ac:	4b0b      	ldr	r3, [pc, #44]	; (80086dc <HAL_RCC_ClockConfig+0x1bc>)
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	091b      	lsrs	r3, r3, #4
 80086b2:	f003 030f 	and.w	r3, r3, #15
 80086b6:	490a      	ldr	r1, [pc, #40]	; (80086e0 <HAL_RCC_ClockConfig+0x1c0>)
 80086b8:	5ccb      	ldrb	r3, [r1, r3]
 80086ba:	fa22 f303 	lsr.w	r3, r2, r3
 80086be:	4a09      	ldr	r2, [pc, #36]	; (80086e4 <HAL_RCC_ClockConfig+0x1c4>)
 80086c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80086c2:	4b09      	ldr	r3, [pc, #36]	; (80086e8 <HAL_RCC_ClockConfig+0x1c8>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7fc fdde 	bl	8005288 <HAL_InitTick>

  return HAL_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3710      	adds	r7, #16
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
 80086d6:	bf00      	nop
 80086d8:	40023c00 	.word	0x40023c00
 80086dc:	40023800 	.word	0x40023800
 80086e0:	08013530 	.word	0x08013530
 80086e4:	2000005c 	.word	0x2000005c
 80086e8:	20000060 	.word	0x20000060

080086ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80086ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086f0:	b094      	sub	sp, #80	; 0x50
 80086f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80086f4:	2300      	movs	r3, #0
 80086f6:	647b      	str	r3, [r7, #68]	; 0x44
 80086f8:	2300      	movs	r3, #0
 80086fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086fc:	2300      	movs	r3, #0
 80086fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008700:	2300      	movs	r3, #0
 8008702:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008704:	4b79      	ldr	r3, [pc, #484]	; (80088ec <HAL_RCC_GetSysClockFreq+0x200>)
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	f003 030c 	and.w	r3, r3, #12
 800870c:	2b08      	cmp	r3, #8
 800870e:	d00d      	beq.n	800872c <HAL_RCC_GetSysClockFreq+0x40>
 8008710:	2b08      	cmp	r3, #8
 8008712:	f200 80e1 	bhi.w	80088d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008716:	2b00      	cmp	r3, #0
 8008718:	d002      	beq.n	8008720 <HAL_RCC_GetSysClockFreq+0x34>
 800871a:	2b04      	cmp	r3, #4
 800871c:	d003      	beq.n	8008726 <HAL_RCC_GetSysClockFreq+0x3a>
 800871e:	e0db      	b.n	80088d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008720:	4b73      	ldr	r3, [pc, #460]	; (80088f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8008722:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008724:	e0db      	b.n	80088de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008726:	4b73      	ldr	r3, [pc, #460]	; (80088f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8008728:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800872a:	e0d8      	b.n	80088de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800872c:	4b6f      	ldr	r3, [pc, #444]	; (80088ec <HAL_RCC_GetSysClockFreq+0x200>)
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008734:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008736:	4b6d      	ldr	r3, [pc, #436]	; (80088ec <HAL_RCC_GetSysClockFreq+0x200>)
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800873e:	2b00      	cmp	r3, #0
 8008740:	d063      	beq.n	800880a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008742:	4b6a      	ldr	r3, [pc, #424]	; (80088ec <HAL_RCC_GetSysClockFreq+0x200>)
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	099b      	lsrs	r3, r3, #6
 8008748:	2200      	movs	r2, #0
 800874a:	63bb      	str	r3, [r7, #56]	; 0x38
 800874c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800874e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008754:	633b      	str	r3, [r7, #48]	; 0x30
 8008756:	2300      	movs	r3, #0
 8008758:	637b      	str	r3, [r7, #52]	; 0x34
 800875a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800875e:	4622      	mov	r2, r4
 8008760:	462b      	mov	r3, r5
 8008762:	f04f 0000 	mov.w	r0, #0
 8008766:	f04f 0100 	mov.w	r1, #0
 800876a:	0159      	lsls	r1, r3, #5
 800876c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008770:	0150      	lsls	r0, r2, #5
 8008772:	4602      	mov	r2, r0
 8008774:	460b      	mov	r3, r1
 8008776:	4621      	mov	r1, r4
 8008778:	1a51      	subs	r1, r2, r1
 800877a:	6139      	str	r1, [r7, #16]
 800877c:	4629      	mov	r1, r5
 800877e:	eb63 0301 	sbc.w	r3, r3, r1
 8008782:	617b      	str	r3, [r7, #20]
 8008784:	f04f 0200 	mov.w	r2, #0
 8008788:	f04f 0300 	mov.w	r3, #0
 800878c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008790:	4659      	mov	r1, fp
 8008792:	018b      	lsls	r3, r1, #6
 8008794:	4651      	mov	r1, sl
 8008796:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800879a:	4651      	mov	r1, sl
 800879c:	018a      	lsls	r2, r1, #6
 800879e:	4651      	mov	r1, sl
 80087a0:	ebb2 0801 	subs.w	r8, r2, r1
 80087a4:	4659      	mov	r1, fp
 80087a6:	eb63 0901 	sbc.w	r9, r3, r1
 80087aa:	f04f 0200 	mov.w	r2, #0
 80087ae:	f04f 0300 	mov.w	r3, #0
 80087b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80087b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80087ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80087be:	4690      	mov	r8, r2
 80087c0:	4699      	mov	r9, r3
 80087c2:	4623      	mov	r3, r4
 80087c4:	eb18 0303 	adds.w	r3, r8, r3
 80087c8:	60bb      	str	r3, [r7, #8]
 80087ca:	462b      	mov	r3, r5
 80087cc:	eb49 0303 	adc.w	r3, r9, r3
 80087d0:	60fb      	str	r3, [r7, #12]
 80087d2:	f04f 0200 	mov.w	r2, #0
 80087d6:	f04f 0300 	mov.w	r3, #0
 80087da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80087de:	4629      	mov	r1, r5
 80087e0:	024b      	lsls	r3, r1, #9
 80087e2:	4621      	mov	r1, r4
 80087e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80087e8:	4621      	mov	r1, r4
 80087ea:	024a      	lsls	r2, r1, #9
 80087ec:	4610      	mov	r0, r2
 80087ee:	4619      	mov	r1, r3
 80087f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087f2:	2200      	movs	r2, #0
 80087f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80087f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80087fc:	f7f8 fa24 	bl	8000c48 <__aeabi_uldivmod>
 8008800:	4602      	mov	r2, r0
 8008802:	460b      	mov	r3, r1
 8008804:	4613      	mov	r3, r2
 8008806:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008808:	e058      	b.n	80088bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800880a:	4b38      	ldr	r3, [pc, #224]	; (80088ec <HAL_RCC_GetSysClockFreq+0x200>)
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	099b      	lsrs	r3, r3, #6
 8008810:	2200      	movs	r2, #0
 8008812:	4618      	mov	r0, r3
 8008814:	4611      	mov	r1, r2
 8008816:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800881a:	623b      	str	r3, [r7, #32]
 800881c:	2300      	movs	r3, #0
 800881e:	627b      	str	r3, [r7, #36]	; 0x24
 8008820:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008824:	4642      	mov	r2, r8
 8008826:	464b      	mov	r3, r9
 8008828:	f04f 0000 	mov.w	r0, #0
 800882c:	f04f 0100 	mov.w	r1, #0
 8008830:	0159      	lsls	r1, r3, #5
 8008832:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008836:	0150      	lsls	r0, r2, #5
 8008838:	4602      	mov	r2, r0
 800883a:	460b      	mov	r3, r1
 800883c:	4641      	mov	r1, r8
 800883e:	ebb2 0a01 	subs.w	sl, r2, r1
 8008842:	4649      	mov	r1, r9
 8008844:	eb63 0b01 	sbc.w	fp, r3, r1
 8008848:	f04f 0200 	mov.w	r2, #0
 800884c:	f04f 0300 	mov.w	r3, #0
 8008850:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008854:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008858:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800885c:	ebb2 040a 	subs.w	r4, r2, sl
 8008860:	eb63 050b 	sbc.w	r5, r3, fp
 8008864:	f04f 0200 	mov.w	r2, #0
 8008868:	f04f 0300 	mov.w	r3, #0
 800886c:	00eb      	lsls	r3, r5, #3
 800886e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008872:	00e2      	lsls	r2, r4, #3
 8008874:	4614      	mov	r4, r2
 8008876:	461d      	mov	r5, r3
 8008878:	4643      	mov	r3, r8
 800887a:	18e3      	adds	r3, r4, r3
 800887c:	603b      	str	r3, [r7, #0]
 800887e:	464b      	mov	r3, r9
 8008880:	eb45 0303 	adc.w	r3, r5, r3
 8008884:	607b      	str	r3, [r7, #4]
 8008886:	f04f 0200 	mov.w	r2, #0
 800888a:	f04f 0300 	mov.w	r3, #0
 800888e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008892:	4629      	mov	r1, r5
 8008894:	028b      	lsls	r3, r1, #10
 8008896:	4621      	mov	r1, r4
 8008898:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800889c:	4621      	mov	r1, r4
 800889e:	028a      	lsls	r2, r1, #10
 80088a0:	4610      	mov	r0, r2
 80088a2:	4619      	mov	r1, r3
 80088a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088a6:	2200      	movs	r2, #0
 80088a8:	61bb      	str	r3, [r7, #24]
 80088aa:	61fa      	str	r2, [r7, #28]
 80088ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80088b0:	f7f8 f9ca 	bl	8000c48 <__aeabi_uldivmod>
 80088b4:	4602      	mov	r2, r0
 80088b6:	460b      	mov	r3, r1
 80088b8:	4613      	mov	r3, r2
 80088ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80088bc:	4b0b      	ldr	r3, [pc, #44]	; (80088ec <HAL_RCC_GetSysClockFreq+0x200>)
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	0c1b      	lsrs	r3, r3, #16
 80088c2:	f003 0303 	and.w	r3, r3, #3
 80088c6:	3301      	adds	r3, #1
 80088c8:	005b      	lsls	r3, r3, #1
 80088ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80088cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80088ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80088d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80088d6:	e002      	b.n	80088de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80088d8:	4b05      	ldr	r3, [pc, #20]	; (80088f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80088da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80088dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80088de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3750      	adds	r7, #80	; 0x50
 80088e4:	46bd      	mov	sp, r7
 80088e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088ea:	bf00      	nop
 80088ec:	40023800 	.word	0x40023800
 80088f0:	00f42400 	.word	0x00f42400
 80088f4:	007a1200 	.word	0x007a1200

080088f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80088f8:	b480      	push	{r7}
 80088fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80088fc:	4b03      	ldr	r3, [pc, #12]	; (800890c <HAL_RCC_GetHCLKFreq+0x14>)
 80088fe:	681b      	ldr	r3, [r3, #0]
}
 8008900:	4618      	mov	r0, r3
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr
 800890a:	bf00      	nop
 800890c:	2000005c 	.word	0x2000005c

08008910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008914:	f7ff fff0 	bl	80088f8 <HAL_RCC_GetHCLKFreq>
 8008918:	4602      	mov	r2, r0
 800891a:	4b05      	ldr	r3, [pc, #20]	; (8008930 <HAL_RCC_GetPCLK1Freq+0x20>)
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	0a9b      	lsrs	r3, r3, #10
 8008920:	f003 0307 	and.w	r3, r3, #7
 8008924:	4903      	ldr	r1, [pc, #12]	; (8008934 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008926:	5ccb      	ldrb	r3, [r1, r3]
 8008928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800892c:	4618      	mov	r0, r3
 800892e:	bd80      	pop	{r7, pc}
 8008930:	40023800 	.word	0x40023800
 8008934:	08013540 	.word	0x08013540

08008938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800893c:	f7ff ffdc 	bl	80088f8 <HAL_RCC_GetHCLKFreq>
 8008940:	4602      	mov	r2, r0
 8008942:	4b05      	ldr	r3, [pc, #20]	; (8008958 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	0b5b      	lsrs	r3, r3, #13
 8008948:	f003 0307 	and.w	r3, r3, #7
 800894c:	4903      	ldr	r1, [pc, #12]	; (800895c <HAL_RCC_GetPCLK2Freq+0x24>)
 800894e:	5ccb      	ldrb	r3, [r1, r3]
 8008950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008954:	4618      	mov	r0, r3
 8008956:	bd80      	pop	{r7, pc}
 8008958:	40023800 	.word	0x40023800
 800895c:	08013540 	.word	0x08013540

08008960 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	220f      	movs	r2, #15
 800896e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008970:	4b12      	ldr	r3, [pc, #72]	; (80089bc <HAL_RCC_GetClockConfig+0x5c>)
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	f003 0203 	and.w	r2, r3, #3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800897c:	4b0f      	ldr	r3, [pc, #60]	; (80089bc <HAL_RCC_GetClockConfig+0x5c>)
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008988:	4b0c      	ldr	r3, [pc, #48]	; (80089bc <HAL_RCC_GetClockConfig+0x5c>)
 800898a:	689b      	ldr	r3, [r3, #8]
 800898c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008994:	4b09      	ldr	r3, [pc, #36]	; (80089bc <HAL_RCC_GetClockConfig+0x5c>)
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	08db      	lsrs	r3, r3, #3
 800899a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80089a2:	4b07      	ldr	r3, [pc, #28]	; (80089c0 <HAL_RCC_GetClockConfig+0x60>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f003 0207 	and.w	r2, r3, #7
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	601a      	str	r2, [r3, #0]
}
 80089ae:	bf00      	nop
 80089b0:	370c      	adds	r7, #12
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr
 80089ba:	bf00      	nop
 80089bc:	40023800 	.word	0x40023800
 80089c0:	40023c00 	.word	0x40023c00

080089c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b082      	sub	sp, #8
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d101      	bne.n	80089d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80089d2:	2301      	movs	r3, #1
 80089d4:	e041      	b.n	8008a5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d106      	bne.n	80089f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f7fc fa22 	bl	8004e34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2202      	movs	r2, #2
 80089f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	3304      	adds	r3, #4
 8008a00:	4619      	mov	r1, r3
 8008a02:	4610      	mov	r0, r2
 8008a04:	f000 fdae 	bl	8009564 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2201      	movs	r2, #1
 8008a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2201      	movs	r2, #1
 8008a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2201      	movs	r2, #1
 8008a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a58:	2300      	movs	r3, #0
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3708      	adds	r7, #8
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
	...

08008a64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d001      	beq.n	8008a7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	e04e      	b.n	8008b1a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2202      	movs	r2, #2
 8008a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	68da      	ldr	r2, [r3, #12]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f042 0201 	orr.w	r2, r2, #1
 8008a92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a23      	ldr	r2, [pc, #140]	; (8008b28 <HAL_TIM_Base_Start_IT+0xc4>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d022      	beq.n	8008ae4 <HAL_TIM_Base_Start_IT+0x80>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008aa6:	d01d      	beq.n	8008ae4 <HAL_TIM_Base_Start_IT+0x80>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a1f      	ldr	r2, [pc, #124]	; (8008b2c <HAL_TIM_Base_Start_IT+0xc8>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d018      	beq.n	8008ae4 <HAL_TIM_Base_Start_IT+0x80>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a1e      	ldr	r2, [pc, #120]	; (8008b30 <HAL_TIM_Base_Start_IT+0xcc>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d013      	beq.n	8008ae4 <HAL_TIM_Base_Start_IT+0x80>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a1c      	ldr	r2, [pc, #112]	; (8008b34 <HAL_TIM_Base_Start_IT+0xd0>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d00e      	beq.n	8008ae4 <HAL_TIM_Base_Start_IT+0x80>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a1b      	ldr	r2, [pc, #108]	; (8008b38 <HAL_TIM_Base_Start_IT+0xd4>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d009      	beq.n	8008ae4 <HAL_TIM_Base_Start_IT+0x80>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a19      	ldr	r2, [pc, #100]	; (8008b3c <HAL_TIM_Base_Start_IT+0xd8>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d004      	beq.n	8008ae4 <HAL_TIM_Base_Start_IT+0x80>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a18      	ldr	r2, [pc, #96]	; (8008b40 <HAL_TIM_Base_Start_IT+0xdc>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d111      	bne.n	8008b08 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	f003 0307 	and.w	r3, r3, #7
 8008aee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2b06      	cmp	r3, #6
 8008af4:	d010      	beq.n	8008b18 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f042 0201 	orr.w	r2, r2, #1
 8008b04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b06:	e007      	b.n	8008b18 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f042 0201 	orr.w	r2, r2, #1
 8008b16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b18:	2300      	movs	r3, #0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3714      	adds	r7, #20
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr
 8008b26:	bf00      	nop
 8008b28:	40010000 	.word	0x40010000
 8008b2c:	40000400 	.word	0x40000400
 8008b30:	40000800 	.word	0x40000800
 8008b34:	40000c00 	.word	0x40000c00
 8008b38:	40010400 	.word	0x40010400
 8008b3c:	40014000 	.word	0x40014000
 8008b40:	40001800 	.word	0x40001800

08008b44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d101      	bne.n	8008b56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	e041      	b.n	8008bda <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d106      	bne.n	8008b70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 f839 	bl	8008be2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2202      	movs	r2, #2
 8008b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	3304      	adds	r3, #4
 8008b80:	4619      	mov	r1, r3
 8008b82:	4610      	mov	r0, r2
 8008b84:	f000 fcee 	bl	8009564 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008bd8:	2300      	movs	r3, #0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008be2:	b480      	push	{r7}
 8008be4:	b083      	sub	sp, #12
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008bea:	bf00      	nop
 8008bec:	370c      	adds	r7, #12
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr
	...

08008bf8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d109      	bne.n	8008c1c <HAL_TIM_PWM_Start+0x24>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	bf14      	ite	ne
 8008c14:	2301      	movne	r3, #1
 8008c16:	2300      	moveq	r3, #0
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	e022      	b.n	8008c62 <HAL_TIM_PWM_Start+0x6a>
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	2b04      	cmp	r3, #4
 8008c20:	d109      	bne.n	8008c36 <HAL_TIM_PWM_Start+0x3e>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	bf14      	ite	ne
 8008c2e:	2301      	movne	r3, #1
 8008c30:	2300      	moveq	r3, #0
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	e015      	b.n	8008c62 <HAL_TIM_PWM_Start+0x6a>
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	2b08      	cmp	r3, #8
 8008c3a:	d109      	bne.n	8008c50 <HAL_TIM_PWM_Start+0x58>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	bf14      	ite	ne
 8008c48:	2301      	movne	r3, #1
 8008c4a:	2300      	moveq	r3, #0
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	e008      	b.n	8008c62 <HAL_TIM_PWM_Start+0x6a>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	bf14      	ite	ne
 8008c5c:	2301      	movne	r3, #1
 8008c5e:	2300      	moveq	r3, #0
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d001      	beq.n	8008c6a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008c66:	2301      	movs	r3, #1
 8008c68:	e07c      	b.n	8008d64 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d104      	bne.n	8008c7a <HAL_TIM_PWM_Start+0x82>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2202      	movs	r2, #2
 8008c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c78:	e013      	b.n	8008ca2 <HAL_TIM_PWM_Start+0xaa>
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	2b04      	cmp	r3, #4
 8008c7e:	d104      	bne.n	8008c8a <HAL_TIM_PWM_Start+0x92>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2202      	movs	r2, #2
 8008c84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c88:	e00b      	b.n	8008ca2 <HAL_TIM_PWM_Start+0xaa>
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	2b08      	cmp	r3, #8
 8008c8e:	d104      	bne.n	8008c9a <HAL_TIM_PWM_Start+0xa2>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2202      	movs	r2, #2
 8008c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c98:	e003      	b.n	8008ca2 <HAL_TIM_PWM_Start+0xaa>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2202      	movs	r2, #2
 8008c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	6839      	ldr	r1, [r7, #0]
 8008caa:	4618      	mov	r0, r3
 8008cac:	f000 ff44 	bl	8009b38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a2d      	ldr	r2, [pc, #180]	; (8008d6c <HAL_TIM_PWM_Start+0x174>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d004      	beq.n	8008cc4 <HAL_TIM_PWM_Start+0xcc>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a2c      	ldr	r2, [pc, #176]	; (8008d70 <HAL_TIM_PWM_Start+0x178>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d101      	bne.n	8008cc8 <HAL_TIM_PWM_Start+0xd0>
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	e000      	b.n	8008cca <HAL_TIM_PWM_Start+0xd2>
 8008cc8:	2300      	movs	r3, #0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d007      	beq.n	8008cde <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008cdc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a22      	ldr	r2, [pc, #136]	; (8008d6c <HAL_TIM_PWM_Start+0x174>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d022      	beq.n	8008d2e <HAL_TIM_PWM_Start+0x136>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cf0:	d01d      	beq.n	8008d2e <HAL_TIM_PWM_Start+0x136>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a1f      	ldr	r2, [pc, #124]	; (8008d74 <HAL_TIM_PWM_Start+0x17c>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d018      	beq.n	8008d2e <HAL_TIM_PWM_Start+0x136>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a1d      	ldr	r2, [pc, #116]	; (8008d78 <HAL_TIM_PWM_Start+0x180>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d013      	beq.n	8008d2e <HAL_TIM_PWM_Start+0x136>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a1c      	ldr	r2, [pc, #112]	; (8008d7c <HAL_TIM_PWM_Start+0x184>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d00e      	beq.n	8008d2e <HAL_TIM_PWM_Start+0x136>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a16      	ldr	r2, [pc, #88]	; (8008d70 <HAL_TIM_PWM_Start+0x178>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d009      	beq.n	8008d2e <HAL_TIM_PWM_Start+0x136>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a18      	ldr	r2, [pc, #96]	; (8008d80 <HAL_TIM_PWM_Start+0x188>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d004      	beq.n	8008d2e <HAL_TIM_PWM_Start+0x136>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a16      	ldr	r2, [pc, #88]	; (8008d84 <HAL_TIM_PWM_Start+0x18c>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d111      	bne.n	8008d52 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	f003 0307 	and.w	r3, r3, #7
 8008d38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2b06      	cmp	r3, #6
 8008d3e:	d010      	beq.n	8008d62 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	681a      	ldr	r2, [r3, #0]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f042 0201 	orr.w	r2, r2, #1
 8008d4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d50:	e007      	b.n	8008d62 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	681a      	ldr	r2, [r3, #0]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f042 0201 	orr.w	r2, r2, #1
 8008d60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3710      	adds	r7, #16
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	40010000 	.word	0x40010000
 8008d70:	40010400 	.word	0x40010400
 8008d74:	40000400 	.word	0x40000400
 8008d78:	40000800 	.word	0x40000800
 8008d7c:	40000c00 	.word	0x40000c00
 8008d80:	40014000 	.word	0x40014000
 8008d84:	40001800 	.word	0x40001800

08008d88 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b086      	sub	sp, #24
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d101      	bne.n	8008d9c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e097      	b.n	8008ecc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d106      	bne.n	8008db6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f7fc f8bd 	bl	8004f30 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2202      	movs	r2, #2
 8008dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	6812      	ldr	r2, [r2, #0]
 8008dc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008dcc:	f023 0307 	bic.w	r3, r3, #7
 8008dd0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681a      	ldr	r2, [r3, #0]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	3304      	adds	r3, #4
 8008dda:	4619      	mov	r1, r3
 8008ddc:	4610      	mov	r0, r2
 8008dde:	f000 fbc1 	bl	8009564 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	699b      	ldr	r3, [r3, #24]
 8008df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	6a1b      	ldr	r3, [r3, #32]
 8008df8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	697a      	ldr	r2, [r7, #20]
 8008e00:	4313      	orrs	r3, r2
 8008e02:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e0a:	f023 0303 	bic.w	r3, r3, #3
 8008e0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	689a      	ldr	r2, [r3, #8]
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	699b      	ldr	r3, [r3, #24]
 8008e18:	021b      	lsls	r3, r3, #8
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	693a      	ldr	r2, [r7, #16]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008e28:	f023 030c 	bic.w	r3, r3, #12
 8008e2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008e34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	68da      	ldr	r2, [r3, #12]
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	69db      	ldr	r3, [r3, #28]
 8008e42:	021b      	lsls	r3, r3, #8
 8008e44:	4313      	orrs	r3, r2
 8008e46:	693a      	ldr	r2, [r7, #16]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	691b      	ldr	r3, [r3, #16]
 8008e50:	011a      	lsls	r2, r3, #4
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	6a1b      	ldr	r3, [r3, #32]
 8008e56:	031b      	lsls	r3, r3, #12
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	693a      	ldr	r2, [r7, #16]
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008e66:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008e6e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	685a      	ldr	r2, [r3, #4]
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	695b      	ldr	r3, [r3, #20]
 8008e78:	011b      	lsls	r3, r3, #4
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	68fa      	ldr	r2, [r7, #12]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	697a      	ldr	r2, [r7, #20]
 8008e88:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	693a      	ldr	r2, [r7, #16]
 8008e90:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	68fa      	ldr	r2, [r7, #12]
 8008e98:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2201      	movs	r2, #1
 8008eae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008eca:	2300      	movs	r3, #0
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3718      	adds	r7, #24
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ee4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008eec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008ef4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008efc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d110      	bne.n	8008f26 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008f04:	7bfb      	ldrb	r3, [r7, #15]
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d102      	bne.n	8008f10 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008f0a:	7b7b      	ldrb	r3, [r7, #13]
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d001      	beq.n	8008f14 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008f10:	2301      	movs	r3, #1
 8008f12:	e069      	b.n	8008fe8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2202      	movs	r2, #2
 8008f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2202      	movs	r2, #2
 8008f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f24:	e031      	b.n	8008f8a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	2b04      	cmp	r3, #4
 8008f2a:	d110      	bne.n	8008f4e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008f2c:	7bbb      	ldrb	r3, [r7, #14]
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d102      	bne.n	8008f38 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008f32:	7b3b      	ldrb	r3, [r7, #12]
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d001      	beq.n	8008f3c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	e055      	b.n	8008fe8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2202      	movs	r2, #2
 8008f40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2202      	movs	r2, #2
 8008f48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f4c:	e01d      	b.n	8008f8a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008f4e:	7bfb      	ldrb	r3, [r7, #15]
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d108      	bne.n	8008f66 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008f54:	7bbb      	ldrb	r3, [r7, #14]
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d105      	bne.n	8008f66 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008f5a:	7b7b      	ldrb	r3, [r7, #13]
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d102      	bne.n	8008f66 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008f60:	7b3b      	ldrb	r3, [r7, #12]
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	d001      	beq.n	8008f6a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008f66:	2301      	movs	r3, #1
 8008f68:	e03e      	b.n	8008fe8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2202      	movs	r2, #2
 8008f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2202      	movs	r2, #2
 8008f76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2202      	movs	r2, #2
 8008f7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2202      	movs	r2, #2
 8008f86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d003      	beq.n	8008f98 <HAL_TIM_Encoder_Start+0xc4>
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	2b04      	cmp	r3, #4
 8008f94:	d008      	beq.n	8008fa8 <HAL_TIM_Encoder_Start+0xd4>
 8008f96:	e00f      	b.n	8008fb8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	2100      	movs	r1, #0
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f000 fdc9 	bl	8009b38 <TIM_CCxChannelCmd>
      break;
 8008fa6:	e016      	b.n	8008fd6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	2201      	movs	r2, #1
 8008fae:	2104      	movs	r1, #4
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f000 fdc1 	bl	8009b38 <TIM_CCxChannelCmd>
      break;
 8008fb6:	e00e      	b.n	8008fd6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	2100      	movs	r1, #0
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f000 fdb9 	bl	8009b38 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	2104      	movs	r1, #4
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f000 fdb2 	bl	8009b38 <TIM_CCxChannelCmd>
      break;
 8008fd4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f042 0201 	orr.w	r2, r2, #1
 8008fe4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008fe6:	2300      	movs	r3, #0
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3710      	adds	r7, #16
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	691b      	ldr	r3, [r3, #16]
 8008ffe:	f003 0302 	and.w	r3, r3, #2
 8009002:	2b02      	cmp	r3, #2
 8009004:	d122      	bne.n	800904c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	f003 0302 	and.w	r3, r3, #2
 8009010:	2b02      	cmp	r3, #2
 8009012:	d11b      	bne.n	800904c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f06f 0202 	mvn.w	r2, #2
 800901c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2201      	movs	r2, #1
 8009022:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	699b      	ldr	r3, [r3, #24]
 800902a:	f003 0303 	and.w	r3, r3, #3
 800902e:	2b00      	cmp	r3, #0
 8009030:	d003      	beq.n	800903a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 fa77 	bl	8009526 <HAL_TIM_IC_CaptureCallback>
 8009038:	e005      	b.n	8009046 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 fa69 	bl	8009512 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 fa7a 	bl	800953a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2200      	movs	r2, #0
 800904a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	691b      	ldr	r3, [r3, #16]
 8009052:	f003 0304 	and.w	r3, r3, #4
 8009056:	2b04      	cmp	r3, #4
 8009058:	d122      	bne.n	80090a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	f003 0304 	and.w	r3, r3, #4
 8009064:	2b04      	cmp	r3, #4
 8009066:	d11b      	bne.n	80090a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f06f 0204 	mvn.w	r2, #4
 8009070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2202      	movs	r2, #2
 8009076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	699b      	ldr	r3, [r3, #24]
 800907e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009082:	2b00      	cmp	r3, #0
 8009084:	d003      	beq.n	800908e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 fa4d 	bl	8009526 <HAL_TIM_IC_CaptureCallback>
 800908c:	e005      	b.n	800909a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 fa3f 	bl	8009512 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 fa50 	bl	800953a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2200      	movs	r2, #0
 800909e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	691b      	ldr	r3, [r3, #16]
 80090a6:	f003 0308 	and.w	r3, r3, #8
 80090aa:	2b08      	cmp	r3, #8
 80090ac:	d122      	bne.n	80090f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	f003 0308 	and.w	r3, r3, #8
 80090b8:	2b08      	cmp	r3, #8
 80090ba:	d11b      	bne.n	80090f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f06f 0208 	mvn.w	r2, #8
 80090c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2204      	movs	r2, #4
 80090ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	69db      	ldr	r3, [r3, #28]
 80090d2:	f003 0303 	and.w	r3, r3, #3
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d003      	beq.n	80090e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 fa23 	bl	8009526 <HAL_TIM_IC_CaptureCallback>
 80090e0:	e005      	b.n	80090ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 fa15 	bl	8009512 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 fa26 	bl	800953a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	691b      	ldr	r3, [r3, #16]
 80090fa:	f003 0310 	and.w	r3, r3, #16
 80090fe:	2b10      	cmp	r3, #16
 8009100:	d122      	bne.n	8009148 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	f003 0310 	and.w	r3, r3, #16
 800910c:	2b10      	cmp	r3, #16
 800910e:	d11b      	bne.n	8009148 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f06f 0210 	mvn.w	r2, #16
 8009118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2208      	movs	r2, #8
 800911e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	69db      	ldr	r3, [r3, #28]
 8009126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800912a:	2b00      	cmp	r3, #0
 800912c:	d003      	beq.n	8009136 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 f9f9 	bl	8009526 <HAL_TIM_IC_CaptureCallback>
 8009134:	e005      	b.n	8009142 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 f9eb 	bl	8009512 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 f9fc 	bl	800953a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2200      	movs	r2, #0
 8009146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	691b      	ldr	r3, [r3, #16]
 800914e:	f003 0301 	and.w	r3, r3, #1
 8009152:	2b01      	cmp	r3, #1
 8009154:	d10e      	bne.n	8009174 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	f003 0301 	and.w	r3, r3, #1
 8009160:	2b01      	cmp	r3, #1
 8009162:	d107      	bne.n	8009174 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f06f 0201 	mvn.w	r2, #1
 800916c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f7fb fbc0 	bl	80048f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800917e:	2b80      	cmp	r3, #128	; 0x80
 8009180:	d10e      	bne.n	80091a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800918c:	2b80      	cmp	r3, #128	; 0x80
 800918e:	d107      	bne.n	80091a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 fdca 	bl	8009d34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	691b      	ldr	r3, [r3, #16]
 80091a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091aa:	2b40      	cmp	r3, #64	; 0x40
 80091ac:	d10e      	bne.n	80091cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	68db      	ldr	r3, [r3, #12]
 80091b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091b8:	2b40      	cmp	r3, #64	; 0x40
 80091ba:	d107      	bne.n	80091cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80091c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 f9c1 	bl	800954e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	691b      	ldr	r3, [r3, #16]
 80091d2:	f003 0320 	and.w	r3, r3, #32
 80091d6:	2b20      	cmp	r3, #32
 80091d8:	d10e      	bne.n	80091f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	f003 0320 	and.w	r3, r3, #32
 80091e4:	2b20      	cmp	r3, #32
 80091e6:	d107      	bne.n	80091f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f06f 0220 	mvn.w	r2, #32
 80091f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 fd94 	bl	8009d20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80091f8:	bf00      	nop
 80091fa:	3708      	adds	r7, #8
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b086      	sub	sp, #24
 8009204:	af00      	add	r7, sp, #0
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	60b9      	str	r1, [r7, #8]
 800920a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800920c:	2300      	movs	r3, #0
 800920e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009216:	2b01      	cmp	r3, #1
 8009218:	d101      	bne.n	800921e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800921a:	2302      	movs	r3, #2
 800921c:	e0ae      	b.n	800937c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2201      	movs	r2, #1
 8009222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2b0c      	cmp	r3, #12
 800922a:	f200 809f 	bhi.w	800936c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800922e:	a201      	add	r2, pc, #4	; (adr r2, 8009234 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009234:	08009269 	.word	0x08009269
 8009238:	0800936d 	.word	0x0800936d
 800923c:	0800936d 	.word	0x0800936d
 8009240:	0800936d 	.word	0x0800936d
 8009244:	080092a9 	.word	0x080092a9
 8009248:	0800936d 	.word	0x0800936d
 800924c:	0800936d 	.word	0x0800936d
 8009250:	0800936d 	.word	0x0800936d
 8009254:	080092eb 	.word	0x080092eb
 8009258:	0800936d 	.word	0x0800936d
 800925c:	0800936d 	.word	0x0800936d
 8009260:	0800936d 	.word	0x0800936d
 8009264:	0800932b 	.word	0x0800932b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	68b9      	ldr	r1, [r7, #8]
 800926e:	4618      	mov	r0, r3
 8009270:	f000 fa18 	bl	80096a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	699a      	ldr	r2, [r3, #24]
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f042 0208 	orr.w	r2, r2, #8
 8009282:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	699a      	ldr	r2, [r3, #24]
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f022 0204 	bic.w	r2, r2, #4
 8009292:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	6999      	ldr	r1, [r3, #24]
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	691a      	ldr	r2, [r3, #16]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	430a      	orrs	r2, r1
 80092a4:	619a      	str	r2, [r3, #24]
      break;
 80092a6:	e064      	b.n	8009372 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	68b9      	ldr	r1, [r7, #8]
 80092ae:	4618      	mov	r0, r3
 80092b0:	f000 fa68 	bl	8009784 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	699a      	ldr	r2, [r3, #24]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	699a      	ldr	r2, [r3, #24]
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	6999      	ldr	r1, [r3, #24]
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	691b      	ldr	r3, [r3, #16]
 80092de:	021a      	lsls	r2, r3, #8
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	430a      	orrs	r2, r1
 80092e6:	619a      	str	r2, [r3, #24]
      break;
 80092e8:	e043      	b.n	8009372 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	68b9      	ldr	r1, [r7, #8]
 80092f0:	4618      	mov	r0, r3
 80092f2:	f000 fabd 	bl	8009870 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	69da      	ldr	r2, [r3, #28]
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f042 0208 	orr.w	r2, r2, #8
 8009304:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	69da      	ldr	r2, [r3, #28]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f022 0204 	bic.w	r2, r2, #4
 8009314:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	69d9      	ldr	r1, [r3, #28]
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	691a      	ldr	r2, [r3, #16]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	430a      	orrs	r2, r1
 8009326:	61da      	str	r2, [r3, #28]
      break;
 8009328:	e023      	b.n	8009372 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	68b9      	ldr	r1, [r7, #8]
 8009330:	4618      	mov	r0, r3
 8009332:	f000 fb11 	bl	8009958 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	69da      	ldr	r2, [r3, #28]
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009344:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	69da      	ldr	r2, [r3, #28]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009354:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	69d9      	ldr	r1, [r3, #28]
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	691b      	ldr	r3, [r3, #16]
 8009360:	021a      	lsls	r2, r3, #8
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	430a      	orrs	r2, r1
 8009368:	61da      	str	r2, [r3, #28]
      break;
 800936a:	e002      	b.n	8009372 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800936c:	2301      	movs	r3, #1
 800936e:	75fb      	strb	r3, [r7, #23]
      break;
 8009370:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2200      	movs	r2, #0
 8009376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800937a:	7dfb      	ldrb	r3, [r7, #23]
}
 800937c:	4618      	mov	r0, r3
 800937e:	3718      	adds	r7, #24
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b084      	sub	sp, #16
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800938e:	2300      	movs	r3, #0
 8009390:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009398:	2b01      	cmp	r3, #1
 800939a:	d101      	bne.n	80093a0 <HAL_TIM_ConfigClockSource+0x1c>
 800939c:	2302      	movs	r3, #2
 800939e:	e0b4      	b.n	800950a <HAL_TIM_ConfigClockSource+0x186>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2202      	movs	r2, #2
 80093ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	689b      	ldr	r3, [r3, #8]
 80093b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80093be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80093c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	68ba      	ldr	r2, [r7, #8]
 80093ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093d8:	d03e      	beq.n	8009458 <HAL_TIM_ConfigClockSource+0xd4>
 80093da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093de:	f200 8087 	bhi.w	80094f0 <HAL_TIM_ConfigClockSource+0x16c>
 80093e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093e6:	f000 8086 	beq.w	80094f6 <HAL_TIM_ConfigClockSource+0x172>
 80093ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093ee:	d87f      	bhi.n	80094f0 <HAL_TIM_ConfigClockSource+0x16c>
 80093f0:	2b70      	cmp	r3, #112	; 0x70
 80093f2:	d01a      	beq.n	800942a <HAL_TIM_ConfigClockSource+0xa6>
 80093f4:	2b70      	cmp	r3, #112	; 0x70
 80093f6:	d87b      	bhi.n	80094f0 <HAL_TIM_ConfigClockSource+0x16c>
 80093f8:	2b60      	cmp	r3, #96	; 0x60
 80093fa:	d050      	beq.n	800949e <HAL_TIM_ConfigClockSource+0x11a>
 80093fc:	2b60      	cmp	r3, #96	; 0x60
 80093fe:	d877      	bhi.n	80094f0 <HAL_TIM_ConfigClockSource+0x16c>
 8009400:	2b50      	cmp	r3, #80	; 0x50
 8009402:	d03c      	beq.n	800947e <HAL_TIM_ConfigClockSource+0xfa>
 8009404:	2b50      	cmp	r3, #80	; 0x50
 8009406:	d873      	bhi.n	80094f0 <HAL_TIM_ConfigClockSource+0x16c>
 8009408:	2b40      	cmp	r3, #64	; 0x40
 800940a:	d058      	beq.n	80094be <HAL_TIM_ConfigClockSource+0x13a>
 800940c:	2b40      	cmp	r3, #64	; 0x40
 800940e:	d86f      	bhi.n	80094f0 <HAL_TIM_ConfigClockSource+0x16c>
 8009410:	2b30      	cmp	r3, #48	; 0x30
 8009412:	d064      	beq.n	80094de <HAL_TIM_ConfigClockSource+0x15a>
 8009414:	2b30      	cmp	r3, #48	; 0x30
 8009416:	d86b      	bhi.n	80094f0 <HAL_TIM_ConfigClockSource+0x16c>
 8009418:	2b20      	cmp	r3, #32
 800941a:	d060      	beq.n	80094de <HAL_TIM_ConfigClockSource+0x15a>
 800941c:	2b20      	cmp	r3, #32
 800941e:	d867      	bhi.n	80094f0 <HAL_TIM_ConfigClockSource+0x16c>
 8009420:	2b00      	cmp	r3, #0
 8009422:	d05c      	beq.n	80094de <HAL_TIM_ConfigClockSource+0x15a>
 8009424:	2b10      	cmp	r3, #16
 8009426:	d05a      	beq.n	80094de <HAL_TIM_ConfigClockSource+0x15a>
 8009428:	e062      	b.n	80094f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6818      	ldr	r0, [r3, #0]
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	6899      	ldr	r1, [r3, #8]
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	685a      	ldr	r2, [r3, #4]
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	68db      	ldr	r3, [r3, #12]
 800943a:	f000 fb5d 	bl	8009af8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800944c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	68ba      	ldr	r2, [r7, #8]
 8009454:	609a      	str	r2, [r3, #8]
      break;
 8009456:	e04f      	b.n	80094f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6818      	ldr	r0, [r3, #0]
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	6899      	ldr	r1, [r3, #8]
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	685a      	ldr	r2, [r3, #4]
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	68db      	ldr	r3, [r3, #12]
 8009468:	f000 fb46 	bl	8009af8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	689a      	ldr	r2, [r3, #8]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800947a:	609a      	str	r2, [r3, #8]
      break;
 800947c:	e03c      	b.n	80094f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6818      	ldr	r0, [r3, #0]
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	6859      	ldr	r1, [r3, #4]
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	461a      	mov	r2, r3
 800948c:	f000 faba 	bl	8009a04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2150      	movs	r1, #80	; 0x50
 8009496:	4618      	mov	r0, r3
 8009498:	f000 fb13 	bl	8009ac2 <TIM_ITRx_SetConfig>
      break;
 800949c:	e02c      	b.n	80094f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6818      	ldr	r0, [r3, #0]
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	6859      	ldr	r1, [r3, #4]
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	461a      	mov	r2, r3
 80094ac:	f000 fad9 	bl	8009a62 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	2160      	movs	r1, #96	; 0x60
 80094b6:	4618      	mov	r0, r3
 80094b8:	f000 fb03 	bl	8009ac2 <TIM_ITRx_SetConfig>
      break;
 80094bc:	e01c      	b.n	80094f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6818      	ldr	r0, [r3, #0]
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	6859      	ldr	r1, [r3, #4]
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	68db      	ldr	r3, [r3, #12]
 80094ca:	461a      	mov	r2, r3
 80094cc:	f000 fa9a 	bl	8009a04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	2140      	movs	r1, #64	; 0x40
 80094d6:	4618      	mov	r0, r3
 80094d8:	f000 faf3 	bl	8009ac2 <TIM_ITRx_SetConfig>
      break;
 80094dc:	e00c      	b.n	80094f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4619      	mov	r1, r3
 80094e8:	4610      	mov	r0, r2
 80094ea:	f000 faea 	bl	8009ac2 <TIM_ITRx_SetConfig>
      break;
 80094ee:	e003      	b.n	80094f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80094f0:	2301      	movs	r3, #1
 80094f2:	73fb      	strb	r3, [r7, #15]
      break;
 80094f4:	e000      	b.n	80094f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80094f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2200      	movs	r2, #0
 8009504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009508:	7bfb      	ldrb	r3, [r7, #15]
}
 800950a:	4618      	mov	r0, r3
 800950c:	3710      	adds	r7, #16
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009512:	b480      	push	{r7}
 8009514:	b083      	sub	sp, #12
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800951a:	bf00      	nop
 800951c:	370c      	adds	r7, #12
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr

08009526 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009526:	b480      	push	{r7}
 8009528:	b083      	sub	sp, #12
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800952e:	bf00      	nop
 8009530:	370c      	adds	r7, #12
 8009532:	46bd      	mov	sp, r7
 8009534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009538:	4770      	bx	lr

0800953a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800953a:	b480      	push	{r7}
 800953c:	b083      	sub	sp, #12
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009542:	bf00      	nop
 8009544:	370c      	adds	r7, #12
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr

0800954e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800954e:	b480      	push	{r7}
 8009550:	b083      	sub	sp, #12
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009556:	bf00      	nop
 8009558:	370c      	adds	r7, #12
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr
	...

08009564 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009564:	b480      	push	{r7}
 8009566:	b085      	sub	sp, #20
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	4a40      	ldr	r2, [pc, #256]	; (8009678 <TIM_Base_SetConfig+0x114>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d013      	beq.n	80095a4 <TIM_Base_SetConfig+0x40>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009582:	d00f      	beq.n	80095a4 <TIM_Base_SetConfig+0x40>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	4a3d      	ldr	r2, [pc, #244]	; (800967c <TIM_Base_SetConfig+0x118>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d00b      	beq.n	80095a4 <TIM_Base_SetConfig+0x40>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	4a3c      	ldr	r2, [pc, #240]	; (8009680 <TIM_Base_SetConfig+0x11c>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d007      	beq.n	80095a4 <TIM_Base_SetConfig+0x40>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	4a3b      	ldr	r2, [pc, #236]	; (8009684 <TIM_Base_SetConfig+0x120>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d003      	beq.n	80095a4 <TIM_Base_SetConfig+0x40>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	4a3a      	ldr	r2, [pc, #232]	; (8009688 <TIM_Base_SetConfig+0x124>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d108      	bne.n	80095b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	68fa      	ldr	r2, [r7, #12]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	4a2f      	ldr	r2, [pc, #188]	; (8009678 <TIM_Base_SetConfig+0x114>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d02b      	beq.n	8009616 <TIM_Base_SetConfig+0xb2>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095c4:	d027      	beq.n	8009616 <TIM_Base_SetConfig+0xb2>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	4a2c      	ldr	r2, [pc, #176]	; (800967c <TIM_Base_SetConfig+0x118>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d023      	beq.n	8009616 <TIM_Base_SetConfig+0xb2>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	4a2b      	ldr	r2, [pc, #172]	; (8009680 <TIM_Base_SetConfig+0x11c>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d01f      	beq.n	8009616 <TIM_Base_SetConfig+0xb2>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	4a2a      	ldr	r2, [pc, #168]	; (8009684 <TIM_Base_SetConfig+0x120>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d01b      	beq.n	8009616 <TIM_Base_SetConfig+0xb2>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	4a29      	ldr	r2, [pc, #164]	; (8009688 <TIM_Base_SetConfig+0x124>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d017      	beq.n	8009616 <TIM_Base_SetConfig+0xb2>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	4a28      	ldr	r2, [pc, #160]	; (800968c <TIM_Base_SetConfig+0x128>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d013      	beq.n	8009616 <TIM_Base_SetConfig+0xb2>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	4a27      	ldr	r2, [pc, #156]	; (8009690 <TIM_Base_SetConfig+0x12c>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d00f      	beq.n	8009616 <TIM_Base_SetConfig+0xb2>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	4a26      	ldr	r2, [pc, #152]	; (8009694 <TIM_Base_SetConfig+0x130>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d00b      	beq.n	8009616 <TIM_Base_SetConfig+0xb2>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	4a25      	ldr	r2, [pc, #148]	; (8009698 <TIM_Base_SetConfig+0x134>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d007      	beq.n	8009616 <TIM_Base_SetConfig+0xb2>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	4a24      	ldr	r2, [pc, #144]	; (800969c <TIM_Base_SetConfig+0x138>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d003      	beq.n	8009616 <TIM_Base_SetConfig+0xb2>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	4a23      	ldr	r2, [pc, #140]	; (80096a0 <TIM_Base_SetConfig+0x13c>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d108      	bne.n	8009628 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800961c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	68db      	ldr	r3, [r3, #12]
 8009622:	68fa      	ldr	r2, [r7, #12]
 8009624:	4313      	orrs	r3, r2
 8009626:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	695b      	ldr	r3, [r3, #20]
 8009632:	4313      	orrs	r3, r2
 8009634:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	68fa      	ldr	r2, [r7, #12]
 800963a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	689a      	ldr	r2, [r3, #8]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	4a0a      	ldr	r2, [pc, #40]	; (8009678 <TIM_Base_SetConfig+0x114>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d003      	beq.n	800965c <TIM_Base_SetConfig+0xf8>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	4a0c      	ldr	r2, [pc, #48]	; (8009688 <TIM_Base_SetConfig+0x124>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d103      	bne.n	8009664 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	691a      	ldr	r2, [r3, #16]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2201      	movs	r2, #1
 8009668:	615a      	str	r2, [r3, #20]
}
 800966a:	bf00      	nop
 800966c:	3714      	adds	r7, #20
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr
 8009676:	bf00      	nop
 8009678:	40010000 	.word	0x40010000
 800967c:	40000400 	.word	0x40000400
 8009680:	40000800 	.word	0x40000800
 8009684:	40000c00 	.word	0x40000c00
 8009688:	40010400 	.word	0x40010400
 800968c:	40014000 	.word	0x40014000
 8009690:	40014400 	.word	0x40014400
 8009694:	40014800 	.word	0x40014800
 8009698:	40001800 	.word	0x40001800
 800969c:	40001c00 	.word	0x40001c00
 80096a0:	40002000 	.word	0x40002000

080096a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b087      	sub	sp, #28
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6a1b      	ldr	r3, [r3, #32]
 80096b2:	f023 0201 	bic.w	r2, r3, #1
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6a1b      	ldr	r3, [r3, #32]
 80096be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	699b      	ldr	r3, [r3, #24]
 80096ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f023 0303 	bic.w	r3, r3, #3
 80096da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	68fa      	ldr	r2, [r7, #12]
 80096e2:	4313      	orrs	r3, r2
 80096e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	f023 0302 	bic.w	r3, r3, #2
 80096ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	689b      	ldr	r3, [r3, #8]
 80096f2:	697a      	ldr	r2, [r7, #20]
 80096f4:	4313      	orrs	r3, r2
 80096f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	4a20      	ldr	r2, [pc, #128]	; (800977c <TIM_OC1_SetConfig+0xd8>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d003      	beq.n	8009708 <TIM_OC1_SetConfig+0x64>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	4a1f      	ldr	r2, [pc, #124]	; (8009780 <TIM_OC1_SetConfig+0xdc>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d10c      	bne.n	8009722 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	f023 0308 	bic.w	r3, r3, #8
 800970e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	68db      	ldr	r3, [r3, #12]
 8009714:	697a      	ldr	r2, [r7, #20]
 8009716:	4313      	orrs	r3, r2
 8009718:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	f023 0304 	bic.w	r3, r3, #4
 8009720:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	4a15      	ldr	r2, [pc, #84]	; (800977c <TIM_OC1_SetConfig+0xd8>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d003      	beq.n	8009732 <TIM_OC1_SetConfig+0x8e>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	4a14      	ldr	r2, [pc, #80]	; (8009780 <TIM_OC1_SetConfig+0xdc>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d111      	bne.n	8009756 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009738:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009740:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	695b      	ldr	r3, [r3, #20]
 8009746:	693a      	ldr	r2, [r7, #16]
 8009748:	4313      	orrs	r3, r2
 800974a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	699b      	ldr	r3, [r3, #24]
 8009750:	693a      	ldr	r2, [r7, #16]
 8009752:	4313      	orrs	r3, r2
 8009754:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	693a      	ldr	r2, [r7, #16]
 800975a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	68fa      	ldr	r2, [r7, #12]
 8009760:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	685a      	ldr	r2, [r3, #4]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	697a      	ldr	r2, [r7, #20]
 800976e:	621a      	str	r2, [r3, #32]
}
 8009770:	bf00      	nop
 8009772:	371c      	adds	r7, #28
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr
 800977c:	40010000 	.word	0x40010000
 8009780:	40010400 	.word	0x40010400

08009784 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009784:	b480      	push	{r7}
 8009786:	b087      	sub	sp, #28
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6a1b      	ldr	r3, [r3, #32]
 8009792:	f023 0210 	bic.w	r2, r3, #16
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6a1b      	ldr	r3, [r3, #32]
 800979e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	699b      	ldr	r3, [r3, #24]
 80097aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	021b      	lsls	r3, r3, #8
 80097c2:	68fa      	ldr	r2, [r7, #12]
 80097c4:	4313      	orrs	r3, r2
 80097c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	f023 0320 	bic.w	r3, r3, #32
 80097ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	689b      	ldr	r3, [r3, #8]
 80097d4:	011b      	lsls	r3, r3, #4
 80097d6:	697a      	ldr	r2, [r7, #20]
 80097d8:	4313      	orrs	r3, r2
 80097da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	4a22      	ldr	r2, [pc, #136]	; (8009868 <TIM_OC2_SetConfig+0xe4>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d003      	beq.n	80097ec <TIM_OC2_SetConfig+0x68>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	4a21      	ldr	r2, [pc, #132]	; (800986c <TIM_OC2_SetConfig+0xe8>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d10d      	bne.n	8009808 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	68db      	ldr	r3, [r3, #12]
 80097f8:	011b      	lsls	r3, r3, #4
 80097fa:	697a      	ldr	r2, [r7, #20]
 80097fc:	4313      	orrs	r3, r2
 80097fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009806:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	4a17      	ldr	r2, [pc, #92]	; (8009868 <TIM_OC2_SetConfig+0xe4>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d003      	beq.n	8009818 <TIM_OC2_SetConfig+0x94>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	4a16      	ldr	r2, [pc, #88]	; (800986c <TIM_OC2_SetConfig+0xe8>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d113      	bne.n	8009840 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800981e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009826:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	695b      	ldr	r3, [r3, #20]
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	693a      	ldr	r2, [r7, #16]
 8009830:	4313      	orrs	r3, r2
 8009832:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	699b      	ldr	r3, [r3, #24]
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	693a      	ldr	r2, [r7, #16]
 800983c:	4313      	orrs	r3, r2
 800983e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	693a      	ldr	r2, [r7, #16]
 8009844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	68fa      	ldr	r2, [r7, #12]
 800984a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	685a      	ldr	r2, [r3, #4]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	697a      	ldr	r2, [r7, #20]
 8009858:	621a      	str	r2, [r3, #32]
}
 800985a:	bf00      	nop
 800985c:	371c      	adds	r7, #28
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr
 8009866:	bf00      	nop
 8009868:	40010000 	.word	0x40010000
 800986c:	40010400 	.word	0x40010400

08009870 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009870:	b480      	push	{r7}
 8009872:	b087      	sub	sp, #28
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6a1b      	ldr	r3, [r3, #32]
 800987e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6a1b      	ldr	r3, [r3, #32]
 800988a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	69db      	ldr	r3, [r3, #28]
 8009896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800989e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f023 0303 	bic.w	r3, r3, #3
 80098a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	68fa      	ldr	r2, [r7, #12]
 80098ae:	4313      	orrs	r3, r2
 80098b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80098b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	689b      	ldr	r3, [r3, #8]
 80098be:	021b      	lsls	r3, r3, #8
 80098c0:	697a      	ldr	r2, [r7, #20]
 80098c2:	4313      	orrs	r3, r2
 80098c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4a21      	ldr	r2, [pc, #132]	; (8009950 <TIM_OC3_SetConfig+0xe0>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d003      	beq.n	80098d6 <TIM_OC3_SetConfig+0x66>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	4a20      	ldr	r2, [pc, #128]	; (8009954 <TIM_OC3_SetConfig+0xe4>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d10d      	bne.n	80098f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80098dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	68db      	ldr	r3, [r3, #12]
 80098e2:	021b      	lsls	r3, r3, #8
 80098e4:	697a      	ldr	r2, [r7, #20]
 80098e6:	4313      	orrs	r3, r2
 80098e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80098f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	4a16      	ldr	r2, [pc, #88]	; (8009950 <TIM_OC3_SetConfig+0xe0>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d003      	beq.n	8009902 <TIM_OC3_SetConfig+0x92>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	4a15      	ldr	r2, [pc, #84]	; (8009954 <TIM_OC3_SetConfig+0xe4>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d113      	bne.n	800992a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009908:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009910:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	695b      	ldr	r3, [r3, #20]
 8009916:	011b      	lsls	r3, r3, #4
 8009918:	693a      	ldr	r2, [r7, #16]
 800991a:	4313      	orrs	r3, r2
 800991c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	699b      	ldr	r3, [r3, #24]
 8009922:	011b      	lsls	r3, r3, #4
 8009924:	693a      	ldr	r2, [r7, #16]
 8009926:	4313      	orrs	r3, r2
 8009928:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	693a      	ldr	r2, [r7, #16]
 800992e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	68fa      	ldr	r2, [r7, #12]
 8009934:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	685a      	ldr	r2, [r3, #4]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	697a      	ldr	r2, [r7, #20]
 8009942:	621a      	str	r2, [r3, #32]
}
 8009944:	bf00      	nop
 8009946:	371c      	adds	r7, #28
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr
 8009950:	40010000 	.word	0x40010000
 8009954:	40010400 	.word	0x40010400

08009958 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009958:	b480      	push	{r7}
 800995a:	b087      	sub	sp, #28
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6a1b      	ldr	r3, [r3, #32]
 8009966:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6a1b      	ldr	r3, [r3, #32]
 8009972:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	69db      	ldr	r3, [r3, #28]
 800997e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800998e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	021b      	lsls	r3, r3, #8
 8009996:	68fa      	ldr	r2, [r7, #12]
 8009998:	4313      	orrs	r3, r2
 800999a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80099a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	031b      	lsls	r3, r3, #12
 80099aa:	693a      	ldr	r2, [r7, #16]
 80099ac:	4313      	orrs	r3, r2
 80099ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	4a12      	ldr	r2, [pc, #72]	; (80099fc <TIM_OC4_SetConfig+0xa4>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d003      	beq.n	80099c0 <TIM_OC4_SetConfig+0x68>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	4a11      	ldr	r2, [pc, #68]	; (8009a00 <TIM_OC4_SetConfig+0xa8>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d109      	bne.n	80099d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	695b      	ldr	r3, [r3, #20]
 80099cc:	019b      	lsls	r3, r3, #6
 80099ce:	697a      	ldr	r2, [r7, #20]
 80099d0:	4313      	orrs	r3, r2
 80099d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	697a      	ldr	r2, [r7, #20]
 80099d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	68fa      	ldr	r2, [r7, #12]
 80099de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	685a      	ldr	r2, [r3, #4]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	693a      	ldr	r2, [r7, #16]
 80099ec:	621a      	str	r2, [r3, #32]
}
 80099ee:	bf00      	nop
 80099f0:	371c      	adds	r7, #28
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr
 80099fa:	bf00      	nop
 80099fc:	40010000 	.word	0x40010000
 8009a00:	40010400 	.word	0x40010400

08009a04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b087      	sub	sp, #28
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	60b9      	str	r1, [r7, #8]
 8009a0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	6a1b      	ldr	r3, [r3, #32]
 8009a14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	6a1b      	ldr	r3, [r3, #32]
 8009a1a:	f023 0201 	bic.w	r2, r3, #1
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	699b      	ldr	r3, [r3, #24]
 8009a26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	011b      	lsls	r3, r3, #4
 8009a34:	693a      	ldr	r2, [r7, #16]
 8009a36:	4313      	orrs	r3, r2
 8009a38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	f023 030a 	bic.w	r3, r3, #10
 8009a40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009a42:	697a      	ldr	r2, [r7, #20]
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	4313      	orrs	r3, r2
 8009a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	693a      	ldr	r2, [r7, #16]
 8009a4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	697a      	ldr	r2, [r7, #20]
 8009a54:	621a      	str	r2, [r3, #32]
}
 8009a56:	bf00      	nop
 8009a58:	371c      	adds	r7, #28
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a60:	4770      	bx	lr

08009a62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a62:	b480      	push	{r7}
 8009a64:	b087      	sub	sp, #28
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	60f8      	str	r0, [r7, #12]
 8009a6a:	60b9      	str	r1, [r7, #8]
 8009a6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	6a1b      	ldr	r3, [r3, #32]
 8009a72:	f023 0210 	bic.w	r2, r3, #16
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	699b      	ldr	r3, [r3, #24]
 8009a7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	6a1b      	ldr	r3, [r3, #32]
 8009a84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	031b      	lsls	r3, r3, #12
 8009a92:	697a      	ldr	r2, [r7, #20]
 8009a94:	4313      	orrs	r3, r2
 8009a96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009a9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	011b      	lsls	r3, r3, #4
 8009aa4:	693a      	ldr	r2, [r7, #16]
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	697a      	ldr	r2, [r7, #20]
 8009aae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	693a      	ldr	r2, [r7, #16]
 8009ab4:	621a      	str	r2, [r3, #32]
}
 8009ab6:	bf00      	nop
 8009ab8:	371c      	adds	r7, #28
 8009aba:	46bd      	mov	sp, r7
 8009abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac0:	4770      	bx	lr

08009ac2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009ac2:	b480      	push	{r7}
 8009ac4:	b085      	sub	sp, #20
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	6078      	str	r0, [r7, #4]
 8009aca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ad8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009ada:	683a      	ldr	r2, [r7, #0]
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	f043 0307 	orr.w	r3, r3, #7
 8009ae4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	68fa      	ldr	r2, [r7, #12]
 8009aea:	609a      	str	r2, [r3, #8]
}
 8009aec:	bf00      	nop
 8009aee:	3714      	adds	r7, #20
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr

08009af8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b087      	sub	sp, #28
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	60f8      	str	r0, [r7, #12]
 8009b00:	60b9      	str	r1, [r7, #8]
 8009b02:	607a      	str	r2, [r7, #4]
 8009b04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	689b      	ldr	r3, [r3, #8]
 8009b0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	021a      	lsls	r2, r3, #8
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	431a      	orrs	r2, r3
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	697a      	ldr	r2, [r7, #20]
 8009b22:	4313      	orrs	r3, r2
 8009b24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	697a      	ldr	r2, [r7, #20]
 8009b2a:	609a      	str	r2, [r3, #8]
}
 8009b2c:	bf00      	nop
 8009b2e:	371c      	adds	r7, #28
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr

08009b38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b087      	sub	sp, #28
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	60b9      	str	r1, [r7, #8]
 8009b42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	f003 031f 	and.w	r3, r3, #31
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	6a1a      	ldr	r2, [r3, #32]
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	43db      	mvns	r3, r3
 8009b5a:	401a      	ands	r2, r3
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	6a1a      	ldr	r2, [r3, #32]
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	f003 031f 	and.w	r3, r3, #31
 8009b6a:	6879      	ldr	r1, [r7, #4]
 8009b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8009b70:	431a      	orrs	r2, r3
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	621a      	str	r2, [r3, #32]
}
 8009b76:	bf00      	nop
 8009b78:	371c      	adds	r7, #28
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr
	...

08009b84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b085      	sub	sp, #20
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d101      	bne.n	8009b9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009b98:	2302      	movs	r3, #2
 8009b9a:	e05a      	b.n	8009c52 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2202      	movs	r2, #2
 8009ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	689b      	ldr	r3, [r3, #8]
 8009bba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	68fa      	ldr	r2, [r7, #12]
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	68fa      	ldr	r2, [r7, #12]
 8009bd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a21      	ldr	r2, [pc, #132]	; (8009c60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d022      	beq.n	8009c26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009be8:	d01d      	beq.n	8009c26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a1d      	ldr	r2, [pc, #116]	; (8009c64 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d018      	beq.n	8009c26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a1b      	ldr	r2, [pc, #108]	; (8009c68 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d013      	beq.n	8009c26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4a1a      	ldr	r2, [pc, #104]	; (8009c6c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d00e      	beq.n	8009c26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a18      	ldr	r2, [pc, #96]	; (8009c70 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d009      	beq.n	8009c26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4a17      	ldr	r2, [pc, #92]	; (8009c74 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d004      	beq.n	8009c26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a15      	ldr	r2, [pc, #84]	; (8009c78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d10c      	bne.n	8009c40 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	68ba      	ldr	r2, [r7, #8]
 8009c34:	4313      	orrs	r3, r2
 8009c36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	68ba      	ldr	r2, [r7, #8]
 8009c3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2201      	movs	r2, #1
 8009c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c50:	2300      	movs	r3, #0
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3714      	adds	r7, #20
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr
 8009c5e:	bf00      	nop
 8009c60:	40010000 	.word	0x40010000
 8009c64:	40000400 	.word	0x40000400
 8009c68:	40000800 	.word	0x40000800
 8009c6c:	40000c00 	.word	0x40000c00
 8009c70:	40010400 	.word	0x40010400
 8009c74:	40014000 	.word	0x40014000
 8009c78:	40001800 	.word	0x40001800

08009c7c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b085      	sub	sp, #20
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009c86:	2300      	movs	r3, #0
 8009c88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	d101      	bne.n	8009c98 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009c94:	2302      	movs	r3, #2
 8009c96:	e03d      	b.n	8009d14 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	68db      	ldr	r3, [r3, #12]
 8009caa:	4313      	orrs	r3, r2
 8009cac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	689b      	ldr	r3, [r3, #8]
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	691b      	ldr	r3, [r3, #16]
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	695b      	ldr	r3, [r3, #20]
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	69db      	ldr	r3, [r3, #28]
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	68fa      	ldr	r2, [r7, #12]
 8009d08:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d12:	2300      	movs	r3, #0
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3714      	adds	r7, #20
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr

08009d20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b083      	sub	sp, #12
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d28:	bf00      	nop
 8009d2a:	370c      	adds	r7, #12
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr

08009d34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d3c:	bf00      	nop
 8009d3e:	370c      	adds	r7, #12
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr

08009d48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b082      	sub	sp, #8
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d101      	bne.n	8009d5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009d56:	2301      	movs	r3, #1
 8009d58:	e04a      	b.n	8009df0 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d111      	bne.n	8009d8a <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 fc6a 	bl	800a648 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d102      	bne.n	8009d82 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	4a1e      	ldr	r2, [pc, #120]	; (8009df8 <HAL_UART_Init+0xb0>)
 8009d80:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2224      	movs	r2, #36	; 0x24
 8009d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	68da      	ldr	r2, [r3, #12]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009da0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f001 f858 	bl	800ae58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	691a      	ldr	r2, [r3, #16]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009db6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	695a      	ldr	r2, [r3, #20]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009dc6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	68da      	ldr	r2, [r3, #12]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009dd6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2220      	movs	r2, #32
 8009de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2220      	movs	r2, #32
 8009dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009dee:	2300      	movs	r3, #0
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3708      	adds	r7, #8
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}
 8009df8:	080050d9 	.word	0x080050d9

08009dfc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b08a      	sub	sp, #40	; 0x28
 8009e00:	af02      	add	r7, sp, #8
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	603b      	str	r3, [r7, #0]
 8009e08:	4613      	mov	r3, r2
 8009e0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	2b20      	cmp	r3, #32
 8009e1a:	d17c      	bne.n	8009f16 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d002      	beq.n	8009e28 <HAL_UART_Transmit+0x2c>
 8009e22:	88fb      	ldrh	r3, [r7, #6]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d101      	bne.n	8009e2c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009e28:	2301      	movs	r3, #1
 8009e2a:	e075      	b.n	8009f18 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d101      	bne.n	8009e3a <HAL_UART_Transmit+0x3e>
 8009e36:	2302      	movs	r3, #2
 8009e38:	e06e      	b.n	8009f18 <HAL_UART_Transmit+0x11c>
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2200      	movs	r2, #0
 8009e46:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2221      	movs	r2, #33	; 0x21
 8009e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009e50:	f7fb fcdc 	bl	800580c <HAL_GetTick>
 8009e54:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	88fa      	ldrh	r2, [r7, #6]
 8009e5a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	88fa      	ldrh	r2, [r7, #6]
 8009e60:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	689b      	ldr	r3, [r3, #8]
 8009e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e6a:	d108      	bne.n	8009e7e <HAL_UART_Transmit+0x82>
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	691b      	ldr	r3, [r3, #16]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d104      	bne.n	8009e7e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009e74:	2300      	movs	r3, #0
 8009e76:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	61bb      	str	r3, [r7, #24]
 8009e7c:	e003      	b.n	8009e86 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009e82:	2300      	movs	r3, #0
 8009e84:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009e8e:	e02a      	b.n	8009ee6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	9300      	str	r3, [sp, #0]
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	2200      	movs	r2, #0
 8009e98:	2180      	movs	r1, #128	; 0x80
 8009e9a:	68f8      	ldr	r0, [r7, #12]
 8009e9c:	f000 fd09 	bl	800a8b2 <UART_WaitOnFlagUntilTimeout>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d001      	beq.n	8009eaa <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009ea6:	2303      	movs	r3, #3
 8009ea8:	e036      	b.n	8009f18 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d10b      	bne.n	8009ec8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009eb0:	69bb      	ldr	r3, [r7, #24]
 8009eb2:	881b      	ldrh	r3, [r3, #0]
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009ebe:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009ec0:	69bb      	ldr	r3, [r7, #24]
 8009ec2:	3302      	adds	r3, #2
 8009ec4:	61bb      	str	r3, [r7, #24]
 8009ec6:	e007      	b.n	8009ed8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009ec8:	69fb      	ldr	r3, [r7, #28]
 8009eca:	781a      	ldrb	r2, [r3, #0]
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009ed2:	69fb      	ldr	r3, [r7, #28]
 8009ed4:	3301      	adds	r3, #1
 8009ed6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	3b01      	subs	r3, #1
 8009ee0:	b29a      	uxth	r2, r3
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009eea:	b29b      	uxth	r3, r3
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d1cf      	bne.n	8009e90 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	9300      	str	r3, [sp, #0]
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	2140      	movs	r1, #64	; 0x40
 8009efa:	68f8      	ldr	r0, [r7, #12]
 8009efc:	f000 fcd9 	bl	800a8b2 <UART_WaitOnFlagUntilTimeout>
 8009f00:	4603      	mov	r3, r0
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d001      	beq.n	8009f0a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009f06:	2303      	movs	r3, #3
 8009f08:	e006      	b.n	8009f18 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2220      	movs	r2, #32
 8009f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009f12:	2300      	movs	r3, #0
 8009f14:	e000      	b.n	8009f18 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009f16:	2302      	movs	r3, #2
  }
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3720      	adds	r7, #32
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	4613      	mov	r3, r2
 8009f2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	2b20      	cmp	r3, #32
 8009f38:	d11d      	bne.n	8009f76 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d002      	beq.n	8009f46 <HAL_UART_Receive_DMA+0x26>
 8009f40:	88fb      	ldrh	r3, [r7, #6]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d101      	bne.n	8009f4a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009f46:	2301      	movs	r3, #1
 8009f48:	e016      	b.n	8009f78 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d101      	bne.n	8009f58 <HAL_UART_Receive_DMA+0x38>
 8009f54:	2302      	movs	r3, #2
 8009f56:	e00f      	b.n	8009f78 <HAL_UART_Receive_DMA+0x58>
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	2200      	movs	r2, #0
 8009f64:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009f66:	88fb      	ldrh	r3, [r7, #6]
 8009f68:	461a      	mov	r2, r3
 8009f6a:	68b9      	ldr	r1, [r7, #8]
 8009f6c:	68f8      	ldr	r0, [r7, #12]
 8009f6e:	f000 fd0f 	bl	800a990 <UART_Start_Receive_DMA>
 8009f72:	4603      	mov	r3, r0
 8009f74:	e000      	b.n	8009f78 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009f76:	2302      	movs	r3, #2
  }
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3710      	adds	r7, #16
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b090      	sub	sp, #64	; 0x40
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	695b      	ldr	r3, [r3, #20]
 8009f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f96:	2b80      	cmp	r3, #128	; 0x80
 8009f98:	bf0c      	ite	eq
 8009f9a:	2301      	moveq	r3, #1
 8009f9c:	2300      	movne	r3, #0
 8009f9e:	b2db      	uxtb	r3, r3
 8009fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fa8:	b2db      	uxtb	r3, r3
 8009faa:	2b21      	cmp	r3, #33	; 0x21
 8009fac:	d128      	bne.n	800a000 <HAL_UART_DMAStop+0x80>
 8009fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d025      	beq.n	800a000 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	3314      	adds	r3, #20
 8009fba:	627b      	str	r3, [r7, #36]	; 0x24
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fbe:	e853 3f00 	ldrex	r3, [r3]
 8009fc2:	623b      	str	r3, [r7, #32]
   return(result);
 8009fc4:	6a3b      	ldr	r3, [r7, #32]
 8009fc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fca:	63bb      	str	r3, [r7, #56]	; 0x38
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	3314      	adds	r3, #20
 8009fd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009fd4:	633a      	str	r2, [r7, #48]	; 0x30
 8009fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009fda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fdc:	e841 2300 	strex	r3, r2, [r1]
 8009fe0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d1e5      	bne.n	8009fb4 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d004      	beq.n	8009ffa <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f7fc fa21 	bl	800643c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 fd66 	bl	800aacc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	695b      	ldr	r3, [r3, #20]
 800a006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a00a:	2b40      	cmp	r3, #64	; 0x40
 800a00c:	bf0c      	ite	eq
 800a00e:	2301      	moveq	r3, #1
 800a010:	2300      	movne	r3, #0
 800a012:	b2db      	uxtb	r3, r3
 800a014:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a01c:	b2db      	uxtb	r3, r3
 800a01e:	2b22      	cmp	r3, #34	; 0x22
 800a020:	d128      	bne.n	800a074 <HAL_UART_DMAStop+0xf4>
 800a022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a024:	2b00      	cmp	r3, #0
 800a026:	d025      	beq.n	800a074 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	3314      	adds	r3, #20
 800a02e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	e853 3f00 	ldrex	r3, [r3]
 800a036:	60fb      	str	r3, [r7, #12]
   return(result);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a03e:	637b      	str	r3, [r7, #52]	; 0x34
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	3314      	adds	r3, #20
 800a046:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a048:	61fa      	str	r2, [r7, #28]
 800a04a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a04c:	69b9      	ldr	r1, [r7, #24]
 800a04e:	69fa      	ldr	r2, [r7, #28]
 800a050:	e841 2300 	strex	r3, r2, [r1]
 800a054:	617b      	str	r3, [r7, #20]
   return(result);
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d1e5      	bne.n	800a028 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a060:	2b00      	cmp	r3, #0
 800a062:	d004      	beq.n	800a06e <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a068:	4618      	mov	r0, r3
 800a06a:	f7fc f9e7 	bl	800643c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 fd54 	bl	800ab1c <UART_EndRxTransfer>
  }

  return HAL_OK;
 800a074:	2300      	movs	r3, #0
}
 800a076:	4618      	mov	r0, r3
 800a078:	3740      	adds	r7, #64	; 0x40
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
	...

0800a080 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b0ba      	sub	sp, #232	; 0xe8
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	695b      	ldr	r3, [r3, #20]
 800a0a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a0b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0b6:	f003 030f 	and.w	r3, r3, #15
 800a0ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a0be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d10f      	bne.n	800a0e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a0c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0ca:	f003 0320 	and.w	r3, r3, #32
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d009      	beq.n	800a0e6 <HAL_UART_IRQHandler+0x66>
 800a0d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0d6:	f003 0320 	and.w	r3, r3, #32
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d003      	beq.n	800a0e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f000 fdfd 	bl	800acde <UART_Receive_IT>
      return;
 800a0e4:	e25b      	b.n	800a59e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a0e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	f000 80e1 	beq.w	800a2b2 <HAL_UART_IRQHandler+0x232>
 800a0f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a0f4:	f003 0301 	and.w	r3, r3, #1
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d106      	bne.n	800a10a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a0fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a100:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a104:	2b00      	cmp	r3, #0
 800a106:	f000 80d4 	beq.w	800a2b2 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a10a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a10e:	f003 0301 	and.w	r3, r3, #1
 800a112:	2b00      	cmp	r3, #0
 800a114:	d00b      	beq.n	800a12e <HAL_UART_IRQHandler+0xae>
 800a116:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a11a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d005      	beq.n	800a12e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a126:	f043 0201 	orr.w	r2, r3, #1
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a12e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a132:	f003 0304 	and.w	r3, r3, #4
 800a136:	2b00      	cmp	r3, #0
 800a138:	d00b      	beq.n	800a152 <HAL_UART_IRQHandler+0xd2>
 800a13a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a13e:	f003 0301 	and.w	r3, r3, #1
 800a142:	2b00      	cmp	r3, #0
 800a144:	d005      	beq.n	800a152 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a14a:	f043 0202 	orr.w	r2, r3, #2
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a156:	f003 0302 	and.w	r3, r3, #2
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d00b      	beq.n	800a176 <HAL_UART_IRQHandler+0xf6>
 800a15e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a162:	f003 0301 	and.w	r3, r3, #1
 800a166:	2b00      	cmp	r3, #0
 800a168:	d005      	beq.n	800a176 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a16e:	f043 0204 	orr.w	r2, r3, #4
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a17a:	f003 0308 	and.w	r3, r3, #8
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d011      	beq.n	800a1a6 <HAL_UART_IRQHandler+0x126>
 800a182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a186:	f003 0320 	and.w	r3, r3, #32
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d105      	bne.n	800a19a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a18e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a192:	f003 0301 	and.w	r3, r3, #1
 800a196:	2b00      	cmp	r3, #0
 800a198:	d005      	beq.n	800a1a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a19e:	f043 0208 	orr.w	r2, r3, #8
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	f000 81f2 	beq.w	800a594 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a1b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1b4:	f003 0320 	and.w	r3, r3, #32
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d008      	beq.n	800a1ce <HAL_UART_IRQHandler+0x14e>
 800a1bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1c0:	f003 0320 	and.w	r3, r3, #32
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d002      	beq.n	800a1ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 fd88 	bl	800acde <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	695b      	ldr	r3, [r3, #20]
 800a1d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1d8:	2b40      	cmp	r3, #64	; 0x40
 800a1da:	bf0c      	ite	eq
 800a1dc:	2301      	moveq	r3, #1
 800a1de:	2300      	movne	r3, #0
 800a1e0:	b2db      	uxtb	r3, r3
 800a1e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ea:	f003 0308 	and.w	r3, r3, #8
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d103      	bne.n	800a1fa <HAL_UART_IRQHandler+0x17a>
 800a1f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d051      	beq.n	800a29e <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f000 fc8e 	bl	800ab1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	695b      	ldr	r3, [r3, #20]
 800a206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a20a:	2b40      	cmp	r3, #64	; 0x40
 800a20c:	d142      	bne.n	800a294 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	3314      	adds	r3, #20
 800a214:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a218:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a21c:	e853 3f00 	ldrex	r3, [r3]
 800a220:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a224:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a228:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a22c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	3314      	adds	r3, #20
 800a236:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a23a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a23e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a242:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a246:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a24a:	e841 2300 	strex	r3, r2, [r1]
 800a24e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a252:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a256:	2b00      	cmp	r3, #0
 800a258:	d1d9      	bne.n	800a20e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d013      	beq.n	800a28a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a266:	4a7f      	ldr	r2, [pc, #508]	; (800a464 <HAL_UART_IRQHandler+0x3e4>)
 800a268:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a26e:	4618      	mov	r0, r3
 800a270:	f7fc f954 	bl	800651c <HAL_DMA_Abort_IT>
 800a274:	4603      	mov	r3, r0
 800a276:	2b00      	cmp	r3, #0
 800a278:	d019      	beq.n	800a2ae <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a27e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a280:	687a      	ldr	r2, [r7, #4]
 800a282:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a284:	4610      	mov	r0, r2
 800a286:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a288:	e011      	b.n	800a2ae <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a292:	e00c      	b.n	800a2ae <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a29c:	e007      	b.n	800a2ae <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a2ac:	e172      	b.n	800a594 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2ae:	bf00      	nop
    return;
 800a2b0:	e170      	b.n	800a594 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	f040 814c 	bne.w	800a554 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a2bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2c0:	f003 0310 	and.w	r3, r3, #16
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	f000 8145 	beq.w	800a554 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a2ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2ce:	f003 0310 	and.w	r3, r3, #16
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	f000 813e 	beq.w	800a554 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a2d8:	2300      	movs	r3, #0
 800a2da:	60bb      	str	r3, [r7, #8]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	60bb      	str	r3, [r7, #8]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	685b      	ldr	r3, [r3, #4]
 800a2ea:	60bb      	str	r3, [r7, #8]
 800a2ec:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	695b      	ldr	r3, [r3, #20]
 800a2f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2f8:	2b40      	cmp	r3, #64	; 0x40
 800a2fa:	f040 80b5 	bne.w	800a468 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a30a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a30e:	2b00      	cmp	r3, #0
 800a310:	f000 8142 	beq.w	800a598 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a318:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a31c:	429a      	cmp	r2, r3
 800a31e:	f080 813b 	bcs.w	800a598 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a328:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a32e:	69db      	ldr	r3, [r3, #28]
 800a330:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a334:	f000 8088 	beq.w	800a448 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	330c      	adds	r3, #12
 800a33e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a342:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a346:	e853 3f00 	ldrex	r3, [r3]
 800a34a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a34e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a352:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a356:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	330c      	adds	r3, #12
 800a360:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a364:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a368:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a36c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a370:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a374:	e841 2300 	strex	r3, r2, [r1]
 800a378:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a37c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a380:	2b00      	cmp	r3, #0
 800a382:	d1d9      	bne.n	800a338 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	3314      	adds	r3, #20
 800a38a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a38c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a38e:	e853 3f00 	ldrex	r3, [r3]
 800a392:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a394:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a396:	f023 0301 	bic.w	r3, r3, #1
 800a39a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	3314      	adds	r3, #20
 800a3a4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a3a8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a3ac:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ae:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a3b0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a3b4:	e841 2300 	strex	r3, r2, [r1]
 800a3b8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a3ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d1e1      	bne.n	800a384 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	3314      	adds	r3, #20
 800a3c6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3ca:	e853 3f00 	ldrex	r3, [r3]
 800a3ce:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a3d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a3d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	3314      	adds	r3, #20
 800a3e0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a3e4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a3e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a3ea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a3ec:	e841 2300 	strex	r3, r2, [r1]
 800a3f0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a3f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d1e3      	bne.n	800a3c0 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2220      	movs	r2, #32
 800a3fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2200      	movs	r2, #0
 800a404:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	330c      	adds	r3, #12
 800a40c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a40e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a410:	e853 3f00 	ldrex	r3, [r3]
 800a414:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a418:	f023 0310 	bic.w	r3, r3, #16
 800a41c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	330c      	adds	r3, #12
 800a426:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a42a:	65ba      	str	r2, [r7, #88]	; 0x58
 800a42c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a42e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a430:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a432:	e841 2300 	strex	r3, r2, [r1]
 800a436:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d1e3      	bne.n	800a406 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a442:	4618      	mov	r0, r3
 800a444:	f7fb fffa 	bl	800643c <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a44c:	687a      	ldr	r2, [r7, #4]
 800a44e:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800a454:	b292      	uxth	r2, r2
 800a456:	1a8a      	subs	r2, r1, r2
 800a458:	b292      	uxth	r2, r2
 800a45a:	4611      	mov	r1, r2
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a460:	e09a      	b.n	800a598 <HAL_UART_IRQHandler+0x518>
 800a462:	bf00      	nop
 800a464:	0800abe3 	.word	0x0800abe3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a470:	b29b      	uxth	r3, r3
 800a472:	1ad3      	subs	r3, r2, r3
 800a474:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a47c:	b29b      	uxth	r3, r3
 800a47e:	2b00      	cmp	r3, #0
 800a480:	f000 808c 	beq.w	800a59c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800a484:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a488:	2b00      	cmp	r3, #0
 800a48a:	f000 8087 	beq.w	800a59c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	330c      	adds	r3, #12
 800a494:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a498:	e853 3f00 	ldrex	r3, [r3]
 800a49c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a49e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a4a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	330c      	adds	r3, #12
 800a4ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a4b2:	647a      	str	r2, [r7, #68]	; 0x44
 800a4b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a4b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a4ba:	e841 2300 	strex	r3, r2, [r1]
 800a4be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a4c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d1e3      	bne.n	800a48e <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	3314      	adds	r3, #20
 800a4cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d0:	e853 3f00 	ldrex	r3, [r3]
 800a4d4:	623b      	str	r3, [r7, #32]
   return(result);
 800a4d6:	6a3b      	ldr	r3, [r7, #32]
 800a4d8:	f023 0301 	bic.w	r3, r3, #1
 800a4dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	3314      	adds	r3, #20
 800a4e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a4ea:	633a      	str	r2, [r7, #48]	; 0x30
 800a4ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a4f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4f2:	e841 2300 	strex	r3, r2, [r1]
 800a4f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d1e3      	bne.n	800a4c6 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2220      	movs	r2, #32
 800a502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2200      	movs	r2, #0
 800a50a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	330c      	adds	r3, #12
 800a512:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	e853 3f00 	ldrex	r3, [r3]
 800a51a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f023 0310 	bic.w	r3, r3, #16
 800a522:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	330c      	adds	r3, #12
 800a52c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a530:	61fa      	str	r2, [r7, #28]
 800a532:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a534:	69b9      	ldr	r1, [r7, #24]
 800a536:	69fa      	ldr	r2, [r7, #28]
 800a538:	e841 2300 	strex	r3, r2, [r1]
 800a53c:	617b      	str	r3, [r7, #20]
   return(result);
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d1e3      	bne.n	800a50c <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a548:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800a54c:	4611      	mov	r1, r2
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a552:	e023      	b.n	800a59c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d009      	beq.n	800a574 <HAL_UART_IRQHandler+0x4f4>
 800a560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d003      	beq.n	800a574 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 fb4d 	bl	800ac0c <UART_Transmit_IT>
    return;
 800a572:	e014      	b.n	800a59e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d00e      	beq.n	800a59e <HAL_UART_IRQHandler+0x51e>
 800a580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d008      	beq.n	800a59e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f000 fb8d 	bl	800acac <UART_EndTransmit_IT>
    return;
 800a592:	e004      	b.n	800a59e <HAL_UART_IRQHandler+0x51e>
    return;
 800a594:	bf00      	nop
 800a596:	e002      	b.n	800a59e <HAL_UART_IRQHandler+0x51e>
      return;
 800a598:	bf00      	nop
 800a59a:	e000      	b.n	800a59e <HAL_UART_IRQHandler+0x51e>
      return;
 800a59c:	bf00      	nop
  }
}
 800a59e:	37e8      	adds	r7, #232	; 0xe8
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b083      	sub	sp, #12
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a5ac:	bf00      	nop
 800a5ae:	370c      	adds	r7, #12
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr

0800a5b8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b083      	sub	sp, #12
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a5c0:	bf00      	nop
 800a5c2:	370c      	adds	r7, #12
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr

0800a5cc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b083      	sub	sp, #12
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a5d4:	bf00      	nop
 800a5d6:	370c      	adds	r7, #12
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr

0800a5e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b083      	sub	sp, #12
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a5e8:	bf00      	nop
 800a5ea:	370c      	adds	r7, #12
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr

0800a5f4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b083      	sub	sp, #12
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800a5fc:	bf00      	nop
 800a5fe:	370c      	adds	r7, #12
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr

0800a608 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800a608:	b480      	push	{r7}
 800a60a:	b083      	sub	sp, #12
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800a610:	bf00      	nop
 800a612:	370c      	adds	r7, #12
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b083      	sub	sp, #12
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800a624:	bf00      	nop
 800a626:	370c      	adds	r7, #12
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a630:	b480      	push	{r7}
 800a632:	b083      	sub	sp, #12
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	460b      	mov	r3, r1
 800a63a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a63c:	bf00      	nop
 800a63e:	370c      	adds	r7, #12
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr

0800a648 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800a648:	b480      	push	{r7}
 800a64a:	b083      	sub	sp, #12
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	4a10      	ldr	r2, [pc, #64]	; (800a694 <UART_InitCallbacksToDefault+0x4c>)
 800a654:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	4a0f      	ldr	r2, [pc, #60]	; (800a698 <UART_InitCallbacksToDefault+0x50>)
 800a65a:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	4a0f      	ldr	r2, [pc, #60]	; (800a69c <UART_InitCallbacksToDefault+0x54>)
 800a660:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	4a0e      	ldr	r2, [pc, #56]	; (800a6a0 <UART_InitCallbacksToDefault+0x58>)
 800a666:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	4a0e      	ldr	r2, [pc, #56]	; (800a6a4 <UART_InitCallbacksToDefault+0x5c>)
 800a66c:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	4a0d      	ldr	r2, [pc, #52]	; (800a6a8 <UART_InitCallbacksToDefault+0x60>)
 800a672:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	4a0d      	ldr	r2, [pc, #52]	; (800a6ac <UART_InitCallbacksToDefault+0x64>)
 800a678:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	4a0c      	ldr	r2, [pc, #48]	; (800a6b0 <UART_InitCallbacksToDefault+0x68>)
 800a67e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	4a0c      	ldr	r2, [pc, #48]	; (800a6b4 <UART_InitCallbacksToDefault+0x6c>)
 800a684:	669a      	str	r2, [r3, #104]	; 0x68

}
 800a686:	bf00      	nop
 800a688:	370c      	adds	r7, #12
 800a68a:	46bd      	mov	sp, r7
 800a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a690:	4770      	bx	lr
 800a692:	bf00      	nop
 800a694:	0800a5b9 	.word	0x0800a5b9
 800a698:	0800a5a5 	.word	0x0800a5a5
 800a69c:	0800a5cd 	.word	0x0800a5cd
 800a6a0:	08001f05 	.word	0x08001f05
 800a6a4:	0800a5e1 	.word	0x0800a5e1
 800a6a8:	0800a5f5 	.word	0x0800a5f5
 800a6ac:	0800a609 	.word	0x0800a609
 800a6b0:	0800a61d 	.word	0x0800a61d
 800a6b4:	0800a631 	.word	0x0800a631

0800a6b8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b09c      	sub	sp, #112	; 0x70
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d172      	bne.n	800a7ba <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a6d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a6da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	330c      	adds	r3, #12
 800a6e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6e4:	e853 3f00 	ldrex	r3, [r3]
 800a6e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a6ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a6f0:	66bb      	str	r3, [r7, #104]	; 0x68
 800a6f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	330c      	adds	r3, #12
 800a6f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a6fa:	65ba      	str	r2, [r7, #88]	; 0x58
 800a6fc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a700:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a702:	e841 2300 	strex	r3, r2, [r1]
 800a706:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a708:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d1e5      	bne.n	800a6da <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a70e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	3314      	adds	r3, #20
 800a714:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a718:	e853 3f00 	ldrex	r3, [r3]
 800a71c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a71e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a720:	f023 0301 	bic.w	r3, r3, #1
 800a724:	667b      	str	r3, [r7, #100]	; 0x64
 800a726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	3314      	adds	r3, #20
 800a72c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a72e:	647a      	str	r2, [r7, #68]	; 0x44
 800a730:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a732:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a734:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a736:	e841 2300 	strex	r3, r2, [r1]
 800a73a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a73c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d1e5      	bne.n	800a70e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	3314      	adds	r3, #20
 800a748:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74c:	e853 3f00 	ldrex	r3, [r3]
 800a750:	623b      	str	r3, [r7, #32]
   return(result);
 800a752:	6a3b      	ldr	r3, [r7, #32]
 800a754:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a758:	663b      	str	r3, [r7, #96]	; 0x60
 800a75a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	3314      	adds	r3, #20
 800a760:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a762:	633a      	str	r2, [r7, #48]	; 0x30
 800a764:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a766:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a76a:	e841 2300 	strex	r3, r2, [r1]
 800a76e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a772:	2b00      	cmp	r3, #0
 800a774:	d1e5      	bne.n	800a742 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a778:	2220      	movs	r2, #32
 800a77a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a77e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a782:	2b01      	cmp	r3, #1
 800a784:	d119      	bne.n	800a7ba <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	330c      	adds	r3, #12
 800a78c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	e853 3f00 	ldrex	r3, [r3]
 800a794:	60fb      	str	r3, [r7, #12]
   return(result);
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	f023 0310 	bic.w	r3, r3, #16
 800a79c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a79e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	330c      	adds	r3, #12
 800a7a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a7a6:	61fa      	str	r2, [r7, #28]
 800a7a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7aa:	69b9      	ldr	r1, [r7, #24]
 800a7ac:	69fa      	ldr	r2, [r7, #28]
 800a7ae:	e841 2300 	strex	r3, r2, [r1]
 800a7b2:	617b      	str	r3, [r7, #20]
   return(result);
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d1e5      	bne.n	800a786 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7be:	2b01      	cmp	r3, #1
 800a7c0:	d107      	bne.n	800a7d2 <UART_DMAReceiveCplt+0x11a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800a7c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a7c8:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800a7ca:	4611      	mov	r1, r2
 800a7cc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a7ce:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a7d0:	e003      	b.n	800a7da <UART_DMAReceiveCplt+0x122>
    huart->RxCpltCallback(huart);
 800a7d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7d6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a7d8:	4798      	blx	r3
}
 800a7da:	bf00      	nop
 800a7dc:	3770      	adds	r7, #112	; 0x70
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}

0800a7e2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a7e2:	b580      	push	{r7, lr}
 800a7e4:	b084      	sub	sp, #16
 800a7e6:	af00      	add	r7, sp, #0
 800a7e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ee:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d109      	bne.n	800a80c <UART_DMARxHalfCplt+0x2a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7fc:	68fa      	ldr	r2, [r7, #12]
 800a7fe:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800a800:	0852      	lsrs	r2, r2, #1
 800a802:	b292      	uxth	r2, r2
 800a804:	4611      	mov	r1, r2
 800a806:	68f8      	ldr	r0, [r7, #12]
 800a808:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a80a:	e003      	b.n	800a814 <UART_DMARxHalfCplt+0x32>
    huart->RxHalfCpltCallback(huart);
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a810:	68f8      	ldr	r0, [r7, #12]
 800a812:	4798      	blx	r3
}
 800a814:	bf00      	nop
 800a816:	3710      	adds	r7, #16
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}

0800a81c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b084      	sub	sp, #16
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a824:	2300      	movs	r3, #0
 800a826:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a82c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	695b      	ldr	r3, [r3, #20]
 800a834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a838:	2b80      	cmp	r3, #128	; 0x80
 800a83a:	bf0c      	ite	eq
 800a83c:	2301      	moveq	r3, #1
 800a83e:	2300      	movne	r3, #0
 800a840:	b2db      	uxtb	r3, r3
 800a842:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	2b21      	cmp	r3, #33	; 0x21
 800a84e:	d108      	bne.n	800a862 <UART_DMAError+0x46>
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d005      	beq.n	800a862 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	2200      	movs	r2, #0
 800a85a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a85c:	68b8      	ldr	r0, [r7, #8]
 800a85e:	f000 f935 	bl	800aacc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	695b      	ldr	r3, [r3, #20]
 800a868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a86c:	2b40      	cmp	r3, #64	; 0x40
 800a86e:	bf0c      	ite	eq
 800a870:	2301      	moveq	r3, #1
 800a872:	2300      	movne	r3, #0
 800a874:	b2db      	uxtb	r3, r3
 800a876:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a87e:	b2db      	uxtb	r3, r3
 800a880:	2b22      	cmp	r3, #34	; 0x22
 800a882:	d108      	bne.n	800a896 <UART_DMAError+0x7a>
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d005      	beq.n	800a896 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	2200      	movs	r2, #0
 800a88e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a890:	68b8      	ldr	r0, [r7, #8]
 800a892:	f000 f943 	bl	800ab1c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a89a:	f043 0210 	orr.w	r2, r3, #16
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8a6:	68b8      	ldr	r0, [r7, #8]
 800a8a8:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a8aa:	bf00      	nop
 800a8ac:	3710      	adds	r7, #16
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}

0800a8b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a8b2:	b580      	push	{r7, lr}
 800a8b4:	b090      	sub	sp, #64	; 0x40
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	60f8      	str	r0, [r7, #12]
 800a8ba:	60b9      	str	r1, [r7, #8]
 800a8bc:	603b      	str	r3, [r7, #0]
 800a8be:	4613      	mov	r3, r2
 800a8c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8c2:	e050      	b.n	800a966 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a8c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ca:	d04c      	beq.n	800a966 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a8cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d007      	beq.n	800a8e2 <UART_WaitOnFlagUntilTimeout+0x30>
 800a8d2:	f7fa ff9b 	bl	800580c <HAL_GetTick>
 800a8d6:	4602      	mov	r2, r0
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	1ad3      	subs	r3, r2, r3
 800a8dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d241      	bcs.n	800a966 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	330c      	adds	r3, #12
 800a8e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ec:	e853 3f00 	ldrex	r3, [r3]
 800a8f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a8f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	330c      	adds	r3, #12
 800a900:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a902:	637a      	str	r2, [r7, #52]	; 0x34
 800a904:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a906:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a908:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a90a:	e841 2300 	strex	r3, r2, [r1]
 800a90e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a912:	2b00      	cmp	r3, #0
 800a914:	d1e5      	bne.n	800a8e2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	3314      	adds	r3, #20
 800a91c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	e853 3f00 	ldrex	r3, [r3]
 800a924:	613b      	str	r3, [r7, #16]
   return(result);
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	f023 0301 	bic.w	r3, r3, #1
 800a92c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	3314      	adds	r3, #20
 800a934:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a936:	623a      	str	r2, [r7, #32]
 800a938:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a93a:	69f9      	ldr	r1, [r7, #28]
 800a93c:	6a3a      	ldr	r2, [r7, #32]
 800a93e:	e841 2300 	strex	r3, r2, [r1]
 800a942:	61bb      	str	r3, [r7, #24]
   return(result);
 800a944:	69bb      	ldr	r3, [r7, #24]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d1e5      	bne.n	800a916 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2220      	movs	r2, #32
 800a94e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2220      	movs	r2, #32
 800a956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2200      	movs	r2, #0
 800a95e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a962:	2303      	movs	r3, #3
 800a964:	e00f      	b.n	800a986 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	681a      	ldr	r2, [r3, #0]
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	4013      	ands	r3, r2
 800a970:	68ba      	ldr	r2, [r7, #8]
 800a972:	429a      	cmp	r2, r3
 800a974:	bf0c      	ite	eq
 800a976:	2301      	moveq	r3, #1
 800a978:	2300      	movne	r3, #0
 800a97a:	b2db      	uxtb	r3, r3
 800a97c:	461a      	mov	r2, r3
 800a97e:	79fb      	ldrb	r3, [r7, #7]
 800a980:	429a      	cmp	r2, r3
 800a982:	d09f      	beq.n	800a8c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a984:	2300      	movs	r3, #0
}
 800a986:	4618      	mov	r0, r3
 800a988:	3740      	adds	r7, #64	; 0x40
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
	...

0800a990 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b098      	sub	sp, #96	; 0x60
 800a994:	af00      	add	r7, sp, #0
 800a996:	60f8      	str	r0, [r7, #12]
 800a998:	60b9      	str	r1, [r7, #8]
 800a99a:	4613      	mov	r3, r2
 800a99c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a99e:	68ba      	ldr	r2, [r7, #8]
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	88fa      	ldrh	r2, [r7, #6]
 800a9a8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	2222      	movs	r2, #34	; 0x22
 800a9b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9bc:	4a40      	ldr	r2, [pc, #256]	; (800aac0 <UART_Start_Receive_DMA+0x130>)
 800a9be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9c4:	4a3f      	ldr	r2, [pc, #252]	; (800aac4 <UART_Start_Receive_DMA+0x134>)
 800a9c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9cc:	4a3e      	ldr	r2, [pc, #248]	; (800aac8 <UART_Start_Receive_DMA+0x138>)
 800a9ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a9d8:	f107 0308 	add.w	r3, r7, #8
 800a9dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	3304      	adds	r3, #4
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a9ec:	681a      	ldr	r2, [r3, #0]
 800a9ee:	88fb      	ldrh	r3, [r7, #6]
 800a9f0:	f7fb fccc 	bl	800638c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	613b      	str	r3, [r7, #16]
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	613b      	str	r3, [r7, #16]
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	685b      	ldr	r3, [r3, #4]
 800aa06:	613b      	str	r3, [r7, #16]
 800aa08:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	691b      	ldr	r3, [r3, #16]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d019      	beq.n	800aa4e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	330c      	adds	r3, #12
 800aa20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa24:	e853 3f00 	ldrex	r3, [r3]
 800aa28:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aa2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa30:	65bb      	str	r3, [r7, #88]	; 0x58
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	330c      	adds	r3, #12
 800aa38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aa3a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800aa3c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa3e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800aa40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aa42:	e841 2300 	strex	r3, r2, [r1]
 800aa46:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800aa48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d1e5      	bne.n	800aa1a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	3314      	adds	r3, #20
 800aa54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa58:	e853 3f00 	ldrex	r3, [r3]
 800aa5c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aa5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa60:	f043 0301 	orr.w	r3, r3, #1
 800aa64:	657b      	str	r3, [r7, #84]	; 0x54
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	3314      	adds	r3, #20
 800aa6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aa6e:	63ba      	str	r2, [r7, #56]	; 0x38
 800aa70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa72:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aa74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa76:	e841 2300 	strex	r3, r2, [r1]
 800aa7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aa7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d1e5      	bne.n	800aa4e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	3314      	adds	r3, #20
 800aa88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa8a:	69bb      	ldr	r3, [r7, #24]
 800aa8c:	e853 3f00 	ldrex	r3, [r3]
 800aa90:	617b      	str	r3, [r7, #20]
   return(result);
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa98:	653b      	str	r3, [r7, #80]	; 0x50
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	3314      	adds	r3, #20
 800aaa0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aaa2:	627a      	str	r2, [r7, #36]	; 0x24
 800aaa4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaa6:	6a39      	ldr	r1, [r7, #32]
 800aaa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aaaa:	e841 2300 	strex	r3, r2, [r1]
 800aaae:	61fb      	str	r3, [r7, #28]
   return(result);
 800aab0:	69fb      	ldr	r3, [r7, #28]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d1e5      	bne.n	800aa82 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800aab6:	2300      	movs	r3, #0
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3760      	adds	r7, #96	; 0x60
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	0800a6b9 	.word	0x0800a6b9
 800aac4:	0800a7e3 	.word	0x0800a7e3
 800aac8:	0800a81d 	.word	0x0800a81d

0800aacc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800aacc:	b480      	push	{r7}
 800aace:	b089      	sub	sp, #36	; 0x24
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	330c      	adds	r3, #12
 800aada:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	e853 3f00 	ldrex	r3, [r3]
 800aae2:	60bb      	str	r3, [r7, #8]
   return(result);
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800aaea:	61fb      	str	r3, [r7, #28]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	330c      	adds	r3, #12
 800aaf2:	69fa      	ldr	r2, [r7, #28]
 800aaf4:	61ba      	str	r2, [r7, #24]
 800aaf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf8:	6979      	ldr	r1, [r7, #20]
 800aafa:	69ba      	ldr	r2, [r7, #24]
 800aafc:	e841 2300 	strex	r3, r2, [r1]
 800ab00:	613b      	str	r3, [r7, #16]
   return(result);
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d1e5      	bne.n	800aad4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2220      	movs	r2, #32
 800ab0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800ab10:	bf00      	nop
 800ab12:	3724      	adds	r7, #36	; 0x24
 800ab14:	46bd      	mov	sp, r7
 800ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1a:	4770      	bx	lr

0800ab1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b095      	sub	sp, #84	; 0x54
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	330c      	adds	r3, #12
 800ab2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab2e:	e853 3f00 	ldrex	r3, [r3]
 800ab32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ab34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	330c      	adds	r3, #12
 800ab42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ab44:	643a      	str	r2, [r7, #64]	; 0x40
 800ab46:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ab4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab4c:	e841 2300 	strex	r3, r2, [r1]
 800ab50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ab52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d1e5      	bne.n	800ab24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	3314      	adds	r3, #20
 800ab5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab60:	6a3b      	ldr	r3, [r7, #32]
 800ab62:	e853 3f00 	ldrex	r3, [r3]
 800ab66:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab68:	69fb      	ldr	r3, [r7, #28]
 800ab6a:	f023 0301 	bic.w	r3, r3, #1
 800ab6e:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	3314      	adds	r3, #20
 800ab76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab78:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ab7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ab7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab80:	e841 2300 	strex	r3, r2, [r1]
 800ab84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ab86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d1e5      	bne.n	800ab58 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	d119      	bne.n	800abc8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	330c      	adds	r3, #12
 800ab9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	e853 3f00 	ldrex	r3, [r3]
 800aba2:	60bb      	str	r3, [r7, #8]
   return(result);
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	f023 0310 	bic.w	r3, r3, #16
 800abaa:	647b      	str	r3, [r7, #68]	; 0x44
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	330c      	adds	r3, #12
 800abb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800abb4:	61ba      	str	r2, [r7, #24]
 800abb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abb8:	6979      	ldr	r1, [r7, #20]
 800abba:	69ba      	ldr	r2, [r7, #24]
 800abbc:	e841 2300 	strex	r3, r2, [r1]
 800abc0:	613b      	str	r3, [r7, #16]
   return(result);
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d1e5      	bne.n	800ab94 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2220      	movs	r2, #32
 800abcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2200      	movs	r2, #0
 800abd4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800abd6:	bf00      	nop
 800abd8:	3754      	adds	r7, #84	; 0x54
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr

0800abe2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800abe2:	b580      	push	{r7, lr}
 800abe4:	b084      	sub	sp, #16
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2200      	movs	r2, #0
 800abf4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2200      	movs	r2, #0
 800abfa:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac00:	68f8      	ldr	r0, [r7, #12]
 800ac02:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac04:	bf00      	nop
 800ac06:	3710      	adds	r7, #16
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b085      	sub	sp, #20
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac1a:	b2db      	uxtb	r3, r3
 800ac1c:	2b21      	cmp	r3, #33	; 0x21
 800ac1e:	d13e      	bne.n	800ac9e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	689b      	ldr	r3, [r3, #8]
 800ac24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac28:	d114      	bne.n	800ac54 <UART_Transmit_IT+0x48>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	691b      	ldr	r3, [r3, #16]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d110      	bne.n	800ac54 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6a1b      	ldr	r3, [r3, #32]
 800ac36:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	881b      	ldrh	r3, [r3, #0]
 800ac3c:	461a      	mov	r2, r3
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac46:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6a1b      	ldr	r3, [r3, #32]
 800ac4c:	1c9a      	adds	r2, r3, #2
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	621a      	str	r2, [r3, #32]
 800ac52:	e008      	b.n	800ac66 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6a1b      	ldr	r3, [r3, #32]
 800ac58:	1c59      	adds	r1, r3, #1
 800ac5a:	687a      	ldr	r2, [r7, #4]
 800ac5c:	6211      	str	r1, [r2, #32]
 800ac5e:	781a      	ldrb	r2, [r3, #0]
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ac6a:	b29b      	uxth	r3, r3
 800ac6c:	3b01      	subs	r3, #1
 800ac6e:	b29b      	uxth	r3, r3
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	4619      	mov	r1, r3
 800ac74:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d10f      	bne.n	800ac9a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	68da      	ldr	r2, [r3, #12]
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ac88:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	68da      	ldr	r2, [r3, #12]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac98:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	e000      	b.n	800aca0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ac9e:	2302      	movs	r3, #2
  }
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3714      	adds	r7, #20
 800aca4:	46bd      	mov	sp, r7
 800aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acaa:	4770      	bx	lr

0800acac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	68da      	ldr	r2, [r3, #12]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800acc2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2220      	movs	r2, #32
 800acc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800acd4:	2300      	movs	r3, #0
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3708      	adds	r7, #8
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}

0800acde <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800acde:	b580      	push	{r7, lr}
 800ace0:	b08c      	sub	sp, #48	; 0x30
 800ace2:	af00      	add	r7, sp, #0
 800ace4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800acec:	b2db      	uxtb	r3, r3
 800acee:	2b22      	cmp	r3, #34	; 0x22
 800acf0:	f040 80ad 	bne.w	800ae4e <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	689b      	ldr	r3, [r3, #8]
 800acf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acfc:	d117      	bne.n	800ad2e <UART_Receive_IT+0x50>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	691b      	ldr	r3, [r3, #16]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d113      	bne.n	800ad2e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ad06:	2300      	movs	r3, #0
 800ad08:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad0e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad1c:	b29a      	uxth	r2, r3
 800ad1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad20:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad26:	1c9a      	adds	r2, r3, #2
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	629a      	str	r2, [r3, #40]	; 0x28
 800ad2c:	e026      	b.n	800ad7c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad32:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ad34:	2300      	movs	r3, #0
 800ad36:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	689b      	ldr	r3, [r3, #8]
 800ad3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad40:	d007      	beq.n	800ad52 <UART_Receive_IT+0x74>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	689b      	ldr	r3, [r3, #8]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d10a      	bne.n	800ad60 <UART_Receive_IT+0x82>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	691b      	ldr	r3, [r3, #16]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d106      	bne.n	800ad60 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	b2da      	uxtb	r2, r3
 800ad5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad5c:	701a      	strb	r2, [r3, #0]
 800ad5e:	e008      	b.n	800ad72 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	685b      	ldr	r3, [r3, #4]
 800ad66:	b2db      	uxtb	r3, r3
 800ad68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad6c:	b2da      	uxtb	r2, r3
 800ad6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad70:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad76:	1c5a      	adds	r2, r3, #1
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ad80:	b29b      	uxth	r3, r3
 800ad82:	3b01      	subs	r3, #1
 800ad84:	b29b      	uxth	r3, r3
 800ad86:	687a      	ldr	r2, [r7, #4]
 800ad88:	4619      	mov	r1, r3
 800ad8a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d15c      	bne.n	800ae4a <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	68da      	ldr	r2, [r3, #12]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f022 0220 	bic.w	r2, r2, #32
 800ad9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	68da      	ldr	r2, [r3, #12]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800adae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	695a      	ldr	r2, [r3, #20]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f022 0201 	bic.w	r2, r2, #1
 800adbe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2220      	movs	r2, #32
 800adc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adcc:	2b01      	cmp	r3, #1
 800adce:	d136      	bne.n	800ae3e <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2200      	movs	r2, #0
 800add4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	330c      	adds	r3, #12
 800addc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	e853 3f00 	ldrex	r3, [r3]
 800ade4:	613b      	str	r3, [r7, #16]
   return(result);
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	f023 0310 	bic.w	r3, r3, #16
 800adec:	627b      	str	r3, [r7, #36]	; 0x24
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	330c      	adds	r3, #12
 800adf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adf6:	623a      	str	r2, [r7, #32]
 800adf8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adfa:	69f9      	ldr	r1, [r7, #28]
 800adfc:	6a3a      	ldr	r2, [r7, #32]
 800adfe:	e841 2300 	strex	r3, r2, [r1]
 800ae02:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae04:	69bb      	ldr	r3, [r7, #24]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d1e5      	bne.n	800add6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f003 0310 	and.w	r3, r3, #16
 800ae14:	2b10      	cmp	r3, #16
 800ae16:	d10a      	bne.n	800ae2e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ae18:	2300      	movs	r3, #0
 800ae1a:	60fb      	str	r3, [r7, #12]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	60fb      	str	r3, [r7, #12]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	60fb      	str	r3, [r7, #12]
 800ae2c:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800ae36:	4611      	mov	r1, r2
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	4798      	blx	r3
 800ae3c:	e003      	b.n	800ae46 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ae46:	2300      	movs	r3, #0
 800ae48:	e002      	b.n	800ae50 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	e000      	b.n	800ae50 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800ae4e:	2302      	movs	r3, #2
  }
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	3730      	adds	r7, #48	; 0x30
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}

0800ae58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae5c:	b0c0      	sub	sp, #256	; 0x100
 800ae5e:	af00      	add	r7, sp, #0
 800ae60:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	691b      	ldr	r3, [r3, #16]
 800ae6c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ae70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae74:	68d9      	ldr	r1, [r3, #12]
 800ae76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae7a:	681a      	ldr	r2, [r3, #0]
 800ae7c:	ea40 0301 	orr.w	r3, r0, r1
 800ae80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ae82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae86:	689a      	ldr	r2, [r3, #8]
 800ae88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae8c:	691b      	ldr	r3, [r3, #16]
 800ae8e:	431a      	orrs	r2, r3
 800ae90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae94:	695b      	ldr	r3, [r3, #20]
 800ae96:	431a      	orrs	r2, r3
 800ae98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae9c:	69db      	ldr	r3, [r3, #28]
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800aea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	68db      	ldr	r3, [r3, #12]
 800aeac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800aeb0:	f021 010c 	bic.w	r1, r1, #12
 800aeb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aeb8:	681a      	ldr	r2, [r3, #0]
 800aeba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aebe:	430b      	orrs	r3, r1
 800aec0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	695b      	ldr	r3, [r3, #20]
 800aeca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800aece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aed2:	6999      	ldr	r1, [r3, #24]
 800aed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	ea40 0301 	orr.w	r3, r0, r1
 800aede:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aee4:	681a      	ldr	r2, [r3, #0]
 800aee6:	4b8f      	ldr	r3, [pc, #572]	; (800b124 <UART_SetConfig+0x2cc>)
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d005      	beq.n	800aef8 <UART_SetConfig+0xa0>
 800aeec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aef0:	681a      	ldr	r2, [r3, #0]
 800aef2:	4b8d      	ldr	r3, [pc, #564]	; (800b128 <UART_SetConfig+0x2d0>)
 800aef4:	429a      	cmp	r2, r3
 800aef6:	d104      	bne.n	800af02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800aef8:	f7fd fd1e 	bl	8008938 <HAL_RCC_GetPCLK2Freq>
 800aefc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800af00:	e003      	b.n	800af0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800af02:	f7fd fd05 	bl	8008910 <HAL_RCC_GetPCLK1Freq>
 800af06:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af0e:	69db      	ldr	r3, [r3, #28]
 800af10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af14:	f040 810c 	bne.w	800b130 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800af18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800af1c:	2200      	movs	r2, #0
 800af1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800af22:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800af26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800af2a:	4622      	mov	r2, r4
 800af2c:	462b      	mov	r3, r5
 800af2e:	1891      	adds	r1, r2, r2
 800af30:	65b9      	str	r1, [r7, #88]	; 0x58
 800af32:	415b      	adcs	r3, r3
 800af34:	65fb      	str	r3, [r7, #92]	; 0x5c
 800af36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800af3a:	4621      	mov	r1, r4
 800af3c:	eb12 0801 	adds.w	r8, r2, r1
 800af40:	4629      	mov	r1, r5
 800af42:	eb43 0901 	adc.w	r9, r3, r1
 800af46:	f04f 0200 	mov.w	r2, #0
 800af4a:	f04f 0300 	mov.w	r3, #0
 800af4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800af52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800af56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800af5a:	4690      	mov	r8, r2
 800af5c:	4699      	mov	r9, r3
 800af5e:	4623      	mov	r3, r4
 800af60:	eb18 0303 	adds.w	r3, r8, r3
 800af64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800af68:	462b      	mov	r3, r5
 800af6a:	eb49 0303 	adc.w	r3, r9, r3
 800af6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800af72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af76:	685b      	ldr	r3, [r3, #4]
 800af78:	2200      	movs	r2, #0
 800af7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800af7e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800af82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800af86:	460b      	mov	r3, r1
 800af88:	18db      	adds	r3, r3, r3
 800af8a:	653b      	str	r3, [r7, #80]	; 0x50
 800af8c:	4613      	mov	r3, r2
 800af8e:	eb42 0303 	adc.w	r3, r2, r3
 800af92:	657b      	str	r3, [r7, #84]	; 0x54
 800af94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800af98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800af9c:	f7f5 fe54 	bl	8000c48 <__aeabi_uldivmod>
 800afa0:	4602      	mov	r2, r0
 800afa2:	460b      	mov	r3, r1
 800afa4:	4b61      	ldr	r3, [pc, #388]	; (800b12c <UART_SetConfig+0x2d4>)
 800afa6:	fba3 2302 	umull	r2, r3, r3, r2
 800afaa:	095b      	lsrs	r3, r3, #5
 800afac:	011c      	lsls	r4, r3, #4
 800afae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800afb2:	2200      	movs	r2, #0
 800afb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800afb8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800afbc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800afc0:	4642      	mov	r2, r8
 800afc2:	464b      	mov	r3, r9
 800afc4:	1891      	adds	r1, r2, r2
 800afc6:	64b9      	str	r1, [r7, #72]	; 0x48
 800afc8:	415b      	adcs	r3, r3
 800afca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800afcc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800afd0:	4641      	mov	r1, r8
 800afd2:	eb12 0a01 	adds.w	sl, r2, r1
 800afd6:	4649      	mov	r1, r9
 800afd8:	eb43 0b01 	adc.w	fp, r3, r1
 800afdc:	f04f 0200 	mov.w	r2, #0
 800afe0:	f04f 0300 	mov.w	r3, #0
 800afe4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800afe8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800afec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aff0:	4692      	mov	sl, r2
 800aff2:	469b      	mov	fp, r3
 800aff4:	4643      	mov	r3, r8
 800aff6:	eb1a 0303 	adds.w	r3, sl, r3
 800affa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800affe:	464b      	mov	r3, r9
 800b000:	eb4b 0303 	adc.w	r3, fp, r3
 800b004:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b00c:	685b      	ldr	r3, [r3, #4]
 800b00e:	2200      	movs	r2, #0
 800b010:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b014:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b018:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b01c:	460b      	mov	r3, r1
 800b01e:	18db      	adds	r3, r3, r3
 800b020:	643b      	str	r3, [r7, #64]	; 0x40
 800b022:	4613      	mov	r3, r2
 800b024:	eb42 0303 	adc.w	r3, r2, r3
 800b028:	647b      	str	r3, [r7, #68]	; 0x44
 800b02a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b02e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b032:	f7f5 fe09 	bl	8000c48 <__aeabi_uldivmod>
 800b036:	4602      	mov	r2, r0
 800b038:	460b      	mov	r3, r1
 800b03a:	4611      	mov	r1, r2
 800b03c:	4b3b      	ldr	r3, [pc, #236]	; (800b12c <UART_SetConfig+0x2d4>)
 800b03e:	fba3 2301 	umull	r2, r3, r3, r1
 800b042:	095b      	lsrs	r3, r3, #5
 800b044:	2264      	movs	r2, #100	; 0x64
 800b046:	fb02 f303 	mul.w	r3, r2, r3
 800b04a:	1acb      	subs	r3, r1, r3
 800b04c:	00db      	lsls	r3, r3, #3
 800b04e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b052:	4b36      	ldr	r3, [pc, #216]	; (800b12c <UART_SetConfig+0x2d4>)
 800b054:	fba3 2302 	umull	r2, r3, r3, r2
 800b058:	095b      	lsrs	r3, r3, #5
 800b05a:	005b      	lsls	r3, r3, #1
 800b05c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b060:	441c      	add	r4, r3
 800b062:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b066:	2200      	movs	r2, #0
 800b068:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b06c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b070:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b074:	4642      	mov	r2, r8
 800b076:	464b      	mov	r3, r9
 800b078:	1891      	adds	r1, r2, r2
 800b07a:	63b9      	str	r1, [r7, #56]	; 0x38
 800b07c:	415b      	adcs	r3, r3
 800b07e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b080:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b084:	4641      	mov	r1, r8
 800b086:	1851      	adds	r1, r2, r1
 800b088:	6339      	str	r1, [r7, #48]	; 0x30
 800b08a:	4649      	mov	r1, r9
 800b08c:	414b      	adcs	r3, r1
 800b08e:	637b      	str	r3, [r7, #52]	; 0x34
 800b090:	f04f 0200 	mov.w	r2, #0
 800b094:	f04f 0300 	mov.w	r3, #0
 800b098:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b09c:	4659      	mov	r1, fp
 800b09e:	00cb      	lsls	r3, r1, #3
 800b0a0:	4651      	mov	r1, sl
 800b0a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b0a6:	4651      	mov	r1, sl
 800b0a8:	00ca      	lsls	r2, r1, #3
 800b0aa:	4610      	mov	r0, r2
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	4642      	mov	r2, r8
 800b0b2:	189b      	adds	r3, r3, r2
 800b0b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b0b8:	464b      	mov	r3, r9
 800b0ba:	460a      	mov	r2, r1
 800b0bc:	eb42 0303 	adc.w	r3, r2, r3
 800b0c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b0c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b0d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b0d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b0d8:	460b      	mov	r3, r1
 800b0da:	18db      	adds	r3, r3, r3
 800b0dc:	62bb      	str	r3, [r7, #40]	; 0x28
 800b0de:	4613      	mov	r3, r2
 800b0e0:	eb42 0303 	adc.w	r3, r2, r3
 800b0e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b0ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b0ee:	f7f5 fdab 	bl	8000c48 <__aeabi_uldivmod>
 800b0f2:	4602      	mov	r2, r0
 800b0f4:	460b      	mov	r3, r1
 800b0f6:	4b0d      	ldr	r3, [pc, #52]	; (800b12c <UART_SetConfig+0x2d4>)
 800b0f8:	fba3 1302 	umull	r1, r3, r3, r2
 800b0fc:	095b      	lsrs	r3, r3, #5
 800b0fe:	2164      	movs	r1, #100	; 0x64
 800b100:	fb01 f303 	mul.w	r3, r1, r3
 800b104:	1ad3      	subs	r3, r2, r3
 800b106:	00db      	lsls	r3, r3, #3
 800b108:	3332      	adds	r3, #50	; 0x32
 800b10a:	4a08      	ldr	r2, [pc, #32]	; (800b12c <UART_SetConfig+0x2d4>)
 800b10c:	fba2 2303 	umull	r2, r3, r2, r3
 800b110:	095b      	lsrs	r3, r3, #5
 800b112:	f003 0207 	and.w	r2, r3, #7
 800b116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	4422      	add	r2, r4
 800b11e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b120:	e105      	b.n	800b32e <UART_SetConfig+0x4d6>
 800b122:	bf00      	nop
 800b124:	40011000 	.word	0x40011000
 800b128:	40011400 	.word	0x40011400
 800b12c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b130:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b134:	2200      	movs	r2, #0
 800b136:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b13a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b13e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b142:	4642      	mov	r2, r8
 800b144:	464b      	mov	r3, r9
 800b146:	1891      	adds	r1, r2, r2
 800b148:	6239      	str	r1, [r7, #32]
 800b14a:	415b      	adcs	r3, r3
 800b14c:	627b      	str	r3, [r7, #36]	; 0x24
 800b14e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b152:	4641      	mov	r1, r8
 800b154:	1854      	adds	r4, r2, r1
 800b156:	4649      	mov	r1, r9
 800b158:	eb43 0501 	adc.w	r5, r3, r1
 800b15c:	f04f 0200 	mov.w	r2, #0
 800b160:	f04f 0300 	mov.w	r3, #0
 800b164:	00eb      	lsls	r3, r5, #3
 800b166:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b16a:	00e2      	lsls	r2, r4, #3
 800b16c:	4614      	mov	r4, r2
 800b16e:	461d      	mov	r5, r3
 800b170:	4643      	mov	r3, r8
 800b172:	18e3      	adds	r3, r4, r3
 800b174:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b178:	464b      	mov	r3, r9
 800b17a:	eb45 0303 	adc.w	r3, r5, r3
 800b17e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b186:	685b      	ldr	r3, [r3, #4]
 800b188:	2200      	movs	r2, #0
 800b18a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b18e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b192:	f04f 0200 	mov.w	r2, #0
 800b196:	f04f 0300 	mov.w	r3, #0
 800b19a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b19e:	4629      	mov	r1, r5
 800b1a0:	008b      	lsls	r3, r1, #2
 800b1a2:	4621      	mov	r1, r4
 800b1a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b1a8:	4621      	mov	r1, r4
 800b1aa:	008a      	lsls	r2, r1, #2
 800b1ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b1b0:	f7f5 fd4a 	bl	8000c48 <__aeabi_uldivmod>
 800b1b4:	4602      	mov	r2, r0
 800b1b6:	460b      	mov	r3, r1
 800b1b8:	4b60      	ldr	r3, [pc, #384]	; (800b33c <UART_SetConfig+0x4e4>)
 800b1ba:	fba3 2302 	umull	r2, r3, r3, r2
 800b1be:	095b      	lsrs	r3, r3, #5
 800b1c0:	011c      	lsls	r4, r3, #4
 800b1c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b1cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b1d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b1d4:	4642      	mov	r2, r8
 800b1d6:	464b      	mov	r3, r9
 800b1d8:	1891      	adds	r1, r2, r2
 800b1da:	61b9      	str	r1, [r7, #24]
 800b1dc:	415b      	adcs	r3, r3
 800b1de:	61fb      	str	r3, [r7, #28]
 800b1e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b1e4:	4641      	mov	r1, r8
 800b1e6:	1851      	adds	r1, r2, r1
 800b1e8:	6139      	str	r1, [r7, #16]
 800b1ea:	4649      	mov	r1, r9
 800b1ec:	414b      	adcs	r3, r1
 800b1ee:	617b      	str	r3, [r7, #20]
 800b1f0:	f04f 0200 	mov.w	r2, #0
 800b1f4:	f04f 0300 	mov.w	r3, #0
 800b1f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b1fc:	4659      	mov	r1, fp
 800b1fe:	00cb      	lsls	r3, r1, #3
 800b200:	4651      	mov	r1, sl
 800b202:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b206:	4651      	mov	r1, sl
 800b208:	00ca      	lsls	r2, r1, #3
 800b20a:	4610      	mov	r0, r2
 800b20c:	4619      	mov	r1, r3
 800b20e:	4603      	mov	r3, r0
 800b210:	4642      	mov	r2, r8
 800b212:	189b      	adds	r3, r3, r2
 800b214:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b218:	464b      	mov	r3, r9
 800b21a:	460a      	mov	r2, r1
 800b21c:	eb42 0303 	adc.w	r3, r2, r3
 800b220:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b228:	685b      	ldr	r3, [r3, #4]
 800b22a:	2200      	movs	r2, #0
 800b22c:	67bb      	str	r3, [r7, #120]	; 0x78
 800b22e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b230:	f04f 0200 	mov.w	r2, #0
 800b234:	f04f 0300 	mov.w	r3, #0
 800b238:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b23c:	4649      	mov	r1, r9
 800b23e:	008b      	lsls	r3, r1, #2
 800b240:	4641      	mov	r1, r8
 800b242:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b246:	4641      	mov	r1, r8
 800b248:	008a      	lsls	r2, r1, #2
 800b24a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b24e:	f7f5 fcfb 	bl	8000c48 <__aeabi_uldivmod>
 800b252:	4602      	mov	r2, r0
 800b254:	460b      	mov	r3, r1
 800b256:	4b39      	ldr	r3, [pc, #228]	; (800b33c <UART_SetConfig+0x4e4>)
 800b258:	fba3 1302 	umull	r1, r3, r3, r2
 800b25c:	095b      	lsrs	r3, r3, #5
 800b25e:	2164      	movs	r1, #100	; 0x64
 800b260:	fb01 f303 	mul.w	r3, r1, r3
 800b264:	1ad3      	subs	r3, r2, r3
 800b266:	011b      	lsls	r3, r3, #4
 800b268:	3332      	adds	r3, #50	; 0x32
 800b26a:	4a34      	ldr	r2, [pc, #208]	; (800b33c <UART_SetConfig+0x4e4>)
 800b26c:	fba2 2303 	umull	r2, r3, r2, r3
 800b270:	095b      	lsrs	r3, r3, #5
 800b272:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b276:	441c      	add	r4, r3
 800b278:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b27c:	2200      	movs	r2, #0
 800b27e:	673b      	str	r3, [r7, #112]	; 0x70
 800b280:	677a      	str	r2, [r7, #116]	; 0x74
 800b282:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b286:	4642      	mov	r2, r8
 800b288:	464b      	mov	r3, r9
 800b28a:	1891      	adds	r1, r2, r2
 800b28c:	60b9      	str	r1, [r7, #8]
 800b28e:	415b      	adcs	r3, r3
 800b290:	60fb      	str	r3, [r7, #12]
 800b292:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b296:	4641      	mov	r1, r8
 800b298:	1851      	adds	r1, r2, r1
 800b29a:	6039      	str	r1, [r7, #0]
 800b29c:	4649      	mov	r1, r9
 800b29e:	414b      	adcs	r3, r1
 800b2a0:	607b      	str	r3, [r7, #4]
 800b2a2:	f04f 0200 	mov.w	r2, #0
 800b2a6:	f04f 0300 	mov.w	r3, #0
 800b2aa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b2ae:	4659      	mov	r1, fp
 800b2b0:	00cb      	lsls	r3, r1, #3
 800b2b2:	4651      	mov	r1, sl
 800b2b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b2b8:	4651      	mov	r1, sl
 800b2ba:	00ca      	lsls	r2, r1, #3
 800b2bc:	4610      	mov	r0, r2
 800b2be:	4619      	mov	r1, r3
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	4642      	mov	r2, r8
 800b2c4:	189b      	adds	r3, r3, r2
 800b2c6:	66bb      	str	r3, [r7, #104]	; 0x68
 800b2c8:	464b      	mov	r3, r9
 800b2ca:	460a      	mov	r2, r1
 800b2cc:	eb42 0303 	adc.w	r3, r2, r3
 800b2d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b2d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2d6:	685b      	ldr	r3, [r3, #4]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	663b      	str	r3, [r7, #96]	; 0x60
 800b2dc:	667a      	str	r2, [r7, #100]	; 0x64
 800b2de:	f04f 0200 	mov.w	r2, #0
 800b2e2:	f04f 0300 	mov.w	r3, #0
 800b2e6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b2ea:	4649      	mov	r1, r9
 800b2ec:	008b      	lsls	r3, r1, #2
 800b2ee:	4641      	mov	r1, r8
 800b2f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b2f4:	4641      	mov	r1, r8
 800b2f6:	008a      	lsls	r2, r1, #2
 800b2f8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b2fc:	f7f5 fca4 	bl	8000c48 <__aeabi_uldivmod>
 800b300:	4602      	mov	r2, r0
 800b302:	460b      	mov	r3, r1
 800b304:	4b0d      	ldr	r3, [pc, #52]	; (800b33c <UART_SetConfig+0x4e4>)
 800b306:	fba3 1302 	umull	r1, r3, r3, r2
 800b30a:	095b      	lsrs	r3, r3, #5
 800b30c:	2164      	movs	r1, #100	; 0x64
 800b30e:	fb01 f303 	mul.w	r3, r1, r3
 800b312:	1ad3      	subs	r3, r2, r3
 800b314:	011b      	lsls	r3, r3, #4
 800b316:	3332      	adds	r3, #50	; 0x32
 800b318:	4a08      	ldr	r2, [pc, #32]	; (800b33c <UART_SetConfig+0x4e4>)
 800b31a:	fba2 2303 	umull	r2, r3, r2, r3
 800b31e:	095b      	lsrs	r3, r3, #5
 800b320:	f003 020f 	and.w	r2, r3, #15
 800b324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	4422      	add	r2, r4
 800b32c:	609a      	str	r2, [r3, #8]
}
 800b32e:	bf00      	nop
 800b330:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b334:	46bd      	mov	sp, r7
 800b336:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b33a:	bf00      	nop
 800b33c:	51eb851f 	.word	0x51eb851f

0800b340 <__NVIC_SetPriority>:
{
 800b340:	b480      	push	{r7}
 800b342:	b083      	sub	sp, #12
 800b344:	af00      	add	r7, sp, #0
 800b346:	4603      	mov	r3, r0
 800b348:	6039      	str	r1, [r7, #0]
 800b34a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b34c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b350:	2b00      	cmp	r3, #0
 800b352:	db0a      	blt.n	800b36a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	b2da      	uxtb	r2, r3
 800b358:	490c      	ldr	r1, [pc, #48]	; (800b38c <__NVIC_SetPriority+0x4c>)
 800b35a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b35e:	0112      	lsls	r2, r2, #4
 800b360:	b2d2      	uxtb	r2, r2
 800b362:	440b      	add	r3, r1
 800b364:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b368:	e00a      	b.n	800b380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	b2da      	uxtb	r2, r3
 800b36e:	4908      	ldr	r1, [pc, #32]	; (800b390 <__NVIC_SetPriority+0x50>)
 800b370:	79fb      	ldrb	r3, [r7, #7]
 800b372:	f003 030f 	and.w	r3, r3, #15
 800b376:	3b04      	subs	r3, #4
 800b378:	0112      	lsls	r2, r2, #4
 800b37a:	b2d2      	uxtb	r2, r2
 800b37c:	440b      	add	r3, r1
 800b37e:	761a      	strb	r2, [r3, #24]
}
 800b380:	bf00      	nop
 800b382:	370c      	adds	r7, #12
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr
 800b38c:	e000e100 	.word	0xe000e100
 800b390:	e000ed00 	.word	0xe000ed00

0800b394 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b394:	b580      	push	{r7, lr}
 800b396:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b398:	4b05      	ldr	r3, [pc, #20]	; (800b3b0 <SysTick_Handler+0x1c>)
 800b39a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b39c:	f001 ff16 	bl	800d1cc <xTaskGetSchedulerState>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	2b01      	cmp	r3, #1
 800b3a4:	d001      	beq.n	800b3aa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b3a6:	f002 fcff 	bl	800dda8 <xPortSysTickHandler>
  }
}
 800b3aa:	bf00      	nop
 800b3ac:	bd80      	pop	{r7, pc}
 800b3ae:	bf00      	nop
 800b3b0:	e000e010 	.word	0xe000e010

0800b3b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b3b8:	2100      	movs	r1, #0
 800b3ba:	f06f 0004 	mvn.w	r0, #4
 800b3be:	f7ff ffbf 	bl	800b340 <__NVIC_SetPriority>
#endif
}
 800b3c2:	bf00      	nop
 800b3c4:	bd80      	pop	{r7, pc}
	...

0800b3c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b3c8:	b480      	push	{r7}
 800b3ca:	b083      	sub	sp, #12
 800b3cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3ce:	f3ef 8305 	mrs	r3, IPSR
 800b3d2:	603b      	str	r3, [r7, #0]
  return(result);
 800b3d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d003      	beq.n	800b3e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b3da:	f06f 0305 	mvn.w	r3, #5
 800b3de:	607b      	str	r3, [r7, #4]
 800b3e0:	e00c      	b.n	800b3fc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b3e2:	4b0a      	ldr	r3, [pc, #40]	; (800b40c <osKernelInitialize+0x44>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d105      	bne.n	800b3f6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b3ea:	4b08      	ldr	r3, [pc, #32]	; (800b40c <osKernelInitialize+0x44>)
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	607b      	str	r3, [r7, #4]
 800b3f4:	e002      	b.n	800b3fc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b3f6:	f04f 33ff 	mov.w	r3, #4294967295
 800b3fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b3fc:	687b      	ldr	r3, [r7, #4]
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	370c      	adds	r7, #12
 800b402:	46bd      	mov	sp, r7
 800b404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b408:	4770      	bx	lr
 800b40a:	bf00      	nop
 800b40c:	20000c38 	.word	0x20000c38

0800b410 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b410:	b580      	push	{r7, lr}
 800b412:	b082      	sub	sp, #8
 800b414:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b416:	f3ef 8305 	mrs	r3, IPSR
 800b41a:	603b      	str	r3, [r7, #0]
  return(result);
 800b41c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d003      	beq.n	800b42a <osKernelStart+0x1a>
    stat = osErrorISR;
 800b422:	f06f 0305 	mvn.w	r3, #5
 800b426:	607b      	str	r3, [r7, #4]
 800b428:	e010      	b.n	800b44c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b42a:	4b0b      	ldr	r3, [pc, #44]	; (800b458 <osKernelStart+0x48>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	2b01      	cmp	r3, #1
 800b430:	d109      	bne.n	800b446 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b432:	f7ff ffbf 	bl	800b3b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b436:	4b08      	ldr	r3, [pc, #32]	; (800b458 <osKernelStart+0x48>)
 800b438:	2202      	movs	r2, #2
 800b43a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b43c:	f001 faa2 	bl	800c984 <vTaskStartScheduler>
      stat = osOK;
 800b440:	2300      	movs	r3, #0
 800b442:	607b      	str	r3, [r7, #4]
 800b444:	e002      	b.n	800b44c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b446:	f04f 33ff 	mov.w	r3, #4294967295
 800b44a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b44c:	687b      	ldr	r3, [r7, #4]
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3708      	adds	r7, #8
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
 800b456:	bf00      	nop
 800b458:	20000c38 	.word	0x20000c38

0800b45c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b08e      	sub	sp, #56	; 0x38
 800b460:	af04      	add	r7, sp, #16
 800b462:	60f8      	str	r0, [r7, #12]
 800b464:	60b9      	str	r1, [r7, #8]
 800b466:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b468:	2300      	movs	r3, #0
 800b46a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b46c:	f3ef 8305 	mrs	r3, IPSR
 800b470:	617b      	str	r3, [r7, #20]
  return(result);
 800b472:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b474:	2b00      	cmp	r3, #0
 800b476:	d17f      	bne.n	800b578 <osThreadNew+0x11c>
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d07c      	beq.n	800b578 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800b47e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b482:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b484:	2318      	movs	r3, #24
 800b486:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b488:	2300      	movs	r3, #0
 800b48a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b48c:	f04f 33ff 	mov.w	r3, #4294967295
 800b490:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d045      	beq.n	800b524 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d002      	beq.n	800b4a6 <osThreadNew+0x4a>
        name = attr->name;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	699b      	ldr	r3, [r3, #24]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d002      	beq.n	800b4b4 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	699b      	ldr	r3, [r3, #24]
 800b4b2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b4b4:	69fb      	ldr	r3, [r7, #28]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d008      	beq.n	800b4cc <osThreadNew+0x70>
 800b4ba:	69fb      	ldr	r3, [r7, #28]
 800b4bc:	2b38      	cmp	r3, #56	; 0x38
 800b4be:	d805      	bhi.n	800b4cc <osThreadNew+0x70>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	685b      	ldr	r3, [r3, #4]
 800b4c4:	f003 0301 	and.w	r3, r3, #1
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d001      	beq.n	800b4d0 <osThreadNew+0x74>
        return (NULL);
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	e054      	b.n	800b57a <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	695b      	ldr	r3, [r3, #20]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d003      	beq.n	800b4e0 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	695b      	ldr	r3, [r3, #20]
 800b4dc:	089b      	lsrs	r3, r3, #2
 800b4de:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	689b      	ldr	r3, [r3, #8]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d00e      	beq.n	800b506 <osThreadNew+0xaa>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	68db      	ldr	r3, [r3, #12]
 800b4ec:	2bbb      	cmp	r3, #187	; 0xbb
 800b4ee:	d90a      	bls.n	800b506 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d006      	beq.n	800b506 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	695b      	ldr	r3, [r3, #20]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d002      	beq.n	800b506 <osThreadNew+0xaa>
        mem = 1;
 800b500:	2301      	movs	r3, #1
 800b502:	61bb      	str	r3, [r7, #24]
 800b504:	e010      	b.n	800b528 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	689b      	ldr	r3, [r3, #8]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d10c      	bne.n	800b528 <osThreadNew+0xcc>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	68db      	ldr	r3, [r3, #12]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d108      	bne.n	800b528 <osThreadNew+0xcc>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	691b      	ldr	r3, [r3, #16]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d104      	bne.n	800b528 <osThreadNew+0xcc>
          mem = 0;
 800b51e:	2300      	movs	r3, #0
 800b520:	61bb      	str	r3, [r7, #24]
 800b522:	e001      	b.n	800b528 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800b524:	2300      	movs	r3, #0
 800b526:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b528:	69bb      	ldr	r3, [r7, #24]
 800b52a:	2b01      	cmp	r3, #1
 800b52c:	d110      	bne.n	800b550 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b532:	687a      	ldr	r2, [r7, #4]
 800b534:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b536:	9202      	str	r2, [sp, #8]
 800b538:	9301      	str	r3, [sp, #4]
 800b53a:	69fb      	ldr	r3, [r7, #28]
 800b53c:	9300      	str	r3, [sp, #0]
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	6a3a      	ldr	r2, [r7, #32]
 800b542:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b544:	68f8      	ldr	r0, [r7, #12]
 800b546:	f001 f841 	bl	800c5cc <xTaskCreateStatic>
 800b54a:	4603      	mov	r3, r0
 800b54c:	613b      	str	r3, [r7, #16]
 800b54e:	e013      	b.n	800b578 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800b550:	69bb      	ldr	r3, [r7, #24]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d110      	bne.n	800b578 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b556:	6a3b      	ldr	r3, [r7, #32]
 800b558:	b29a      	uxth	r2, r3
 800b55a:	f107 0310 	add.w	r3, r7, #16
 800b55e:	9301      	str	r3, [sp, #4]
 800b560:	69fb      	ldr	r3, [r7, #28]
 800b562:	9300      	str	r3, [sp, #0]
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b568:	68f8      	ldr	r0, [r7, #12]
 800b56a:	f001 f88c 	bl	800c686 <xTaskCreate>
 800b56e:	4603      	mov	r3, r0
 800b570:	2b01      	cmp	r3, #1
 800b572:	d001      	beq.n	800b578 <osThreadNew+0x11c>
            hTask = NULL;
 800b574:	2300      	movs	r3, #0
 800b576:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b578:	693b      	ldr	r3, [r7, #16]
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	3728      	adds	r7, #40	; 0x28
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
	...

0800b584 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 800b584:	b480      	push	{r7}
 800b586:	b083      	sub	sp, #12
 800b588:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b58a:	f3ef 8305 	mrs	r3, IPSR
 800b58e:	603b      	str	r3, [r7, #0]
  return(result);
 800b590:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b592:	2b00      	cmp	r3, #0
 800b594:	d003      	beq.n	800b59e <osThreadYield+0x1a>
    stat = osErrorISR;
 800b596:	f06f 0305 	mvn.w	r3, #5
 800b59a:	607b      	str	r3, [r7, #4]
 800b59c:	e009      	b.n	800b5b2 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	607b      	str	r3, [r7, #4]
    taskYIELD();
 800b5a2:	4b07      	ldr	r3, [pc, #28]	; (800b5c0 <osThreadYield+0x3c>)
 800b5a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5a8:	601a      	str	r2, [r3, #0]
 800b5aa:	f3bf 8f4f 	dsb	sy
 800b5ae:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 800b5b2:	687b      	ldr	r3, [r7, #4]
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	370c      	adds	r7, #12
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5be:	4770      	bx	lr
 800b5c0:	e000ed04 	.word	0xe000ed04

0800b5c4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b084      	sub	sp, #16
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5cc:	f3ef 8305 	mrs	r3, IPSR
 800b5d0:	60bb      	str	r3, [r7, #8]
  return(result);
 800b5d2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d003      	beq.n	800b5e0 <osDelay+0x1c>
    stat = osErrorISR;
 800b5d8:	f06f 0305 	mvn.w	r3, #5
 800b5dc:	60fb      	str	r3, [r7, #12]
 800b5de:	e007      	b.n	800b5f0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d002      	beq.n	800b5f0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f001 f996 	bl	800c91c <vTaskDelay>
    }
  }

  return (stat);
 800b5f0:	68fb      	ldr	r3, [r7, #12]
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3710      	adds	r7, #16
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}

0800b5fa <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b5fa:	b580      	push	{r7, lr}
 800b5fc:	b08a      	sub	sp, #40	; 0x28
 800b5fe:	af02      	add	r7, sp, #8
 800b600:	60f8      	str	r0, [r7, #12]
 800b602:	60b9      	str	r1, [r7, #8]
 800b604:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b606:	2300      	movs	r3, #0
 800b608:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b60a:	f3ef 8305 	mrs	r3, IPSR
 800b60e:	613b      	str	r3, [r7, #16]
  return(result);
 800b610:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b612:	2b00      	cmp	r3, #0
 800b614:	d15f      	bne.n	800b6d6 <osMessageQueueNew+0xdc>
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d05c      	beq.n	800b6d6 <osMessageQueueNew+0xdc>
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d059      	beq.n	800b6d6 <osMessageQueueNew+0xdc>
    mem = -1;
 800b622:	f04f 33ff 	mov.w	r3, #4294967295
 800b626:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d029      	beq.n	800b682 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	689b      	ldr	r3, [r3, #8]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d012      	beq.n	800b65c <osMessageQueueNew+0x62>
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	68db      	ldr	r3, [r3, #12]
 800b63a:	2b4f      	cmp	r3, #79	; 0x4f
 800b63c:	d90e      	bls.n	800b65c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b642:	2b00      	cmp	r3, #0
 800b644:	d00a      	beq.n	800b65c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	695a      	ldr	r2, [r3, #20]
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	68b9      	ldr	r1, [r7, #8]
 800b64e:	fb01 f303 	mul.w	r3, r1, r3
 800b652:	429a      	cmp	r2, r3
 800b654:	d302      	bcc.n	800b65c <osMessageQueueNew+0x62>
        mem = 1;
 800b656:	2301      	movs	r3, #1
 800b658:	61bb      	str	r3, [r7, #24]
 800b65a:	e014      	b.n	800b686 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	689b      	ldr	r3, [r3, #8]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d110      	bne.n	800b686 <osMessageQueueNew+0x8c>
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	68db      	ldr	r3, [r3, #12]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d10c      	bne.n	800b686 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b670:	2b00      	cmp	r3, #0
 800b672:	d108      	bne.n	800b686 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	695b      	ldr	r3, [r3, #20]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d104      	bne.n	800b686 <osMessageQueueNew+0x8c>
          mem = 0;
 800b67c:	2300      	movs	r3, #0
 800b67e:	61bb      	str	r3, [r7, #24]
 800b680:	e001      	b.n	800b686 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b682:	2300      	movs	r3, #0
 800b684:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b686:	69bb      	ldr	r3, [r7, #24]
 800b688:	2b01      	cmp	r3, #1
 800b68a:	d10b      	bne.n	800b6a4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	691a      	ldr	r2, [r3, #16]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	689b      	ldr	r3, [r3, #8]
 800b694:	2100      	movs	r1, #0
 800b696:	9100      	str	r1, [sp, #0]
 800b698:	68b9      	ldr	r1, [r7, #8]
 800b69a:	68f8      	ldr	r0, [r7, #12]
 800b69c:	f000 fa41 	bl	800bb22 <xQueueGenericCreateStatic>
 800b6a0:	61f8      	str	r0, [r7, #28]
 800b6a2:	e008      	b.n	800b6b6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b6a4:	69bb      	ldr	r3, [r7, #24]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d105      	bne.n	800b6b6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	68b9      	ldr	r1, [r7, #8]
 800b6ae:	68f8      	ldr	r0, [r7, #12]
 800b6b0:	f000 faaf 	bl	800bc12 <xQueueGenericCreate>
 800b6b4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b6b6:	69fb      	ldr	r3, [r7, #28]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d00c      	beq.n	800b6d6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d003      	beq.n	800b6ca <osMessageQueueNew+0xd0>
        name = attr->name;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	617b      	str	r3, [r7, #20]
 800b6c8:	e001      	b.n	800b6ce <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b6ce:	6979      	ldr	r1, [r7, #20]
 800b6d0:	69f8      	ldr	r0, [r7, #28]
 800b6d2:	f000 ff1d 	bl	800c510 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b6d6:	69fb      	ldr	r3, [r7, #28]
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	3720      	adds	r7, #32
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}

0800b6e0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b088      	sub	sp, #32
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	60f8      	str	r0, [r7, #12]
 800b6e8:	60b9      	str	r1, [r7, #8]
 800b6ea:	603b      	str	r3, [r7, #0]
 800b6ec:	4613      	mov	r3, r2
 800b6ee:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6f8:	f3ef 8305 	mrs	r3, IPSR
 800b6fc:	617b      	str	r3, [r7, #20]
  return(result);
 800b6fe:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b700:	2b00      	cmp	r3, #0
 800b702:	d028      	beq.n	800b756 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b704:	69bb      	ldr	r3, [r7, #24]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d005      	beq.n	800b716 <osMessageQueuePut+0x36>
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d002      	beq.n	800b716 <osMessageQueuePut+0x36>
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d003      	beq.n	800b71e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b716:	f06f 0303 	mvn.w	r3, #3
 800b71a:	61fb      	str	r3, [r7, #28]
 800b71c:	e038      	b.n	800b790 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b71e:	2300      	movs	r3, #0
 800b720:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b722:	f107 0210 	add.w	r2, r7, #16
 800b726:	2300      	movs	r3, #0
 800b728:	68b9      	ldr	r1, [r7, #8]
 800b72a:	69b8      	ldr	r0, [r7, #24]
 800b72c:	f000 fbb4 	bl	800be98 <xQueueGenericSendFromISR>
 800b730:	4603      	mov	r3, r0
 800b732:	2b01      	cmp	r3, #1
 800b734:	d003      	beq.n	800b73e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b736:	f06f 0302 	mvn.w	r3, #2
 800b73a:	61fb      	str	r3, [r7, #28]
 800b73c:	e028      	b.n	800b790 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d025      	beq.n	800b790 <osMessageQueuePut+0xb0>
 800b744:	4b15      	ldr	r3, [pc, #84]	; (800b79c <osMessageQueuePut+0xbc>)
 800b746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b74a:	601a      	str	r2, [r3, #0]
 800b74c:	f3bf 8f4f 	dsb	sy
 800b750:	f3bf 8f6f 	isb	sy
 800b754:	e01c      	b.n	800b790 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b756:	69bb      	ldr	r3, [r7, #24]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d002      	beq.n	800b762 <osMessageQueuePut+0x82>
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d103      	bne.n	800b76a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b762:	f06f 0303 	mvn.w	r3, #3
 800b766:	61fb      	str	r3, [r7, #28]
 800b768:	e012      	b.n	800b790 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b76a:	2300      	movs	r3, #0
 800b76c:	683a      	ldr	r2, [r7, #0]
 800b76e:	68b9      	ldr	r1, [r7, #8]
 800b770:	69b8      	ldr	r0, [r7, #24]
 800b772:	f000 faab 	bl	800bccc <xQueueGenericSend>
 800b776:	4603      	mov	r3, r0
 800b778:	2b01      	cmp	r3, #1
 800b77a:	d009      	beq.n	800b790 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d003      	beq.n	800b78a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b782:	f06f 0301 	mvn.w	r3, #1
 800b786:	61fb      	str	r3, [r7, #28]
 800b788:	e002      	b.n	800b790 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b78a:	f06f 0302 	mvn.w	r3, #2
 800b78e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b790:	69fb      	ldr	r3, [r7, #28]
}
 800b792:	4618      	mov	r0, r3
 800b794:	3720      	adds	r7, #32
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}
 800b79a:	bf00      	nop
 800b79c:	e000ed04 	.word	0xe000ed04

0800b7a0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b088      	sub	sp, #32
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	60f8      	str	r0, [r7, #12]
 800b7a8:	60b9      	str	r1, [r7, #8]
 800b7aa:	607a      	str	r2, [r7, #4]
 800b7ac:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b7b6:	f3ef 8305 	mrs	r3, IPSR
 800b7ba:	617b      	str	r3, [r7, #20]
  return(result);
 800b7bc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d028      	beq.n	800b814 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b7c2:	69bb      	ldr	r3, [r7, #24]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d005      	beq.n	800b7d4 <osMessageQueueGet+0x34>
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d002      	beq.n	800b7d4 <osMessageQueueGet+0x34>
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d003      	beq.n	800b7dc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b7d4:	f06f 0303 	mvn.w	r3, #3
 800b7d8:	61fb      	str	r3, [r7, #28]
 800b7da:	e037      	b.n	800b84c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b7e0:	f107 0310 	add.w	r3, r7, #16
 800b7e4:	461a      	mov	r2, r3
 800b7e6:	68b9      	ldr	r1, [r7, #8]
 800b7e8:	69b8      	ldr	r0, [r7, #24]
 800b7ea:	f000 fcc5 	bl	800c178 <xQueueReceiveFromISR>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d003      	beq.n	800b7fc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b7f4:	f06f 0302 	mvn.w	r3, #2
 800b7f8:	61fb      	str	r3, [r7, #28]
 800b7fa:	e027      	b.n	800b84c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d024      	beq.n	800b84c <osMessageQueueGet+0xac>
 800b802:	4b15      	ldr	r3, [pc, #84]	; (800b858 <osMessageQueueGet+0xb8>)
 800b804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b808:	601a      	str	r2, [r3, #0]
 800b80a:	f3bf 8f4f 	dsb	sy
 800b80e:	f3bf 8f6f 	isb	sy
 800b812:	e01b      	b.n	800b84c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b814:	69bb      	ldr	r3, [r7, #24]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d002      	beq.n	800b820 <osMessageQueueGet+0x80>
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d103      	bne.n	800b828 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b820:	f06f 0303 	mvn.w	r3, #3
 800b824:	61fb      	str	r3, [r7, #28]
 800b826:	e011      	b.n	800b84c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b828:	683a      	ldr	r2, [r7, #0]
 800b82a:	68b9      	ldr	r1, [r7, #8]
 800b82c:	69b8      	ldr	r0, [r7, #24]
 800b82e:	f000 fbcf 	bl	800bfd0 <xQueueReceive>
 800b832:	4603      	mov	r3, r0
 800b834:	2b01      	cmp	r3, #1
 800b836:	d009      	beq.n	800b84c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d003      	beq.n	800b846 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b83e:	f06f 0301 	mvn.w	r3, #1
 800b842:	61fb      	str	r3, [r7, #28]
 800b844:	e002      	b.n	800b84c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b846:	f06f 0302 	mvn.w	r3, #2
 800b84a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b84c:	69fb      	ldr	r3, [r7, #28]
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3720      	adds	r7, #32
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}
 800b856:	bf00      	nop
 800b858:	e000ed04 	.word	0xe000ed04

0800b85c <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b086      	sub	sp, #24
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d102      	bne.n	800b874 <osMessageQueueGetCount+0x18>
    count = 0U;
 800b86e:	2300      	movs	r3, #0
 800b870:	617b      	str	r3, [r7, #20]
 800b872:	e00e      	b.n	800b892 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b874:	f3ef 8305 	mrs	r3, IPSR
 800b878:	60fb      	str	r3, [r7, #12]
  return(result);
 800b87a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d004      	beq.n	800b88a <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800b880:	6938      	ldr	r0, [r7, #16]
 800b882:	f000 fd17 	bl	800c2b4 <uxQueueMessagesWaitingFromISR>
 800b886:	6178      	str	r0, [r7, #20]
 800b888:	e003      	b.n	800b892 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800b88a:	6938      	ldr	r0, [r7, #16]
 800b88c:	f000 fcf4 	bl	800c278 <uxQueueMessagesWaiting>
 800b890:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800b892:	697b      	ldr	r3, [r7, #20]
}
 800b894:	4618      	mov	r0, r3
 800b896:	3718      	adds	r7, #24
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b89c:	b480      	push	{r7}
 800b89e:	b085      	sub	sp, #20
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	60f8      	str	r0, [r7, #12]
 800b8a4:	60b9      	str	r1, [r7, #8]
 800b8a6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	4a07      	ldr	r2, [pc, #28]	; (800b8c8 <vApplicationGetIdleTaskMemory+0x2c>)
 800b8ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	4a06      	ldr	r2, [pc, #24]	; (800b8cc <vApplicationGetIdleTaskMemory+0x30>)
 800b8b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b8ba:	601a      	str	r2, [r3, #0]
}
 800b8bc:	bf00      	nop
 800b8be:	3714      	adds	r7, #20
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c6:	4770      	bx	lr
 800b8c8:	20000c3c 	.word	0x20000c3c
 800b8cc:	20000cf8 	.word	0x20000cf8

0800b8d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b8d0:	b480      	push	{r7}
 800b8d2:	b085      	sub	sp, #20
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	60f8      	str	r0, [r7, #12]
 800b8d8:	60b9      	str	r1, [r7, #8]
 800b8da:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	4a07      	ldr	r2, [pc, #28]	; (800b8fc <vApplicationGetTimerTaskMemory+0x2c>)
 800b8e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	4a06      	ldr	r2, [pc, #24]	; (800b900 <vApplicationGetTimerTaskMemory+0x30>)
 800b8e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b8ee:	601a      	str	r2, [r3, #0]
}
 800b8f0:	bf00      	nop
 800b8f2:	3714      	adds	r7, #20
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fa:	4770      	bx	lr
 800b8fc:	200010f8 	.word	0x200010f8
 800b900:	200011b4 	.word	0x200011b4

0800b904 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b904:	b480      	push	{r7}
 800b906:	b083      	sub	sp, #12
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f103 0208 	add.w	r2, r3, #8
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f04f 32ff 	mov.w	r2, #4294967295
 800b91c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f103 0208 	add.w	r2, r3, #8
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f103 0208 	add.w	r2, r3, #8
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2200      	movs	r2, #0
 800b936:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b938:	bf00      	nop
 800b93a:	370c      	adds	r7, #12
 800b93c:	46bd      	mov	sp, r7
 800b93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b942:	4770      	bx	lr

0800b944 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b944:	b480      	push	{r7}
 800b946:	b083      	sub	sp, #12
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2200      	movs	r2, #0
 800b950:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b952:	bf00      	nop
 800b954:	370c      	adds	r7, #12
 800b956:	46bd      	mov	sp, r7
 800b958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95c:	4770      	bx	lr

0800b95e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b95e:	b480      	push	{r7}
 800b960:	b085      	sub	sp, #20
 800b962:	af00      	add	r7, sp, #0
 800b964:	6078      	str	r0, [r7, #4]
 800b966:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	685b      	ldr	r3, [r3, #4]
 800b96c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	68fa      	ldr	r2, [r7, #12]
 800b972:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	689a      	ldr	r2, [r3, #8]
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	689b      	ldr	r3, [r3, #8]
 800b980:	683a      	ldr	r2, [r7, #0]
 800b982:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	683a      	ldr	r2, [r7, #0]
 800b988:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	687a      	ldr	r2, [r7, #4]
 800b98e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	1c5a      	adds	r2, r3, #1
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	601a      	str	r2, [r3, #0]
}
 800b99a:	bf00      	nop
 800b99c:	3714      	adds	r7, #20
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a4:	4770      	bx	lr

0800b9a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b9a6:	b480      	push	{r7}
 800b9a8:	b085      	sub	sp, #20
 800b9aa:	af00      	add	r7, sp, #0
 800b9ac:	6078      	str	r0, [r7, #4]
 800b9ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9bc:	d103      	bne.n	800b9c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	691b      	ldr	r3, [r3, #16]
 800b9c2:	60fb      	str	r3, [r7, #12]
 800b9c4:	e00c      	b.n	800b9e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	3308      	adds	r3, #8
 800b9ca:	60fb      	str	r3, [r7, #12]
 800b9cc:	e002      	b.n	800b9d4 <vListInsert+0x2e>
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	685b      	ldr	r3, [r3, #4]
 800b9d2:	60fb      	str	r3, [r7, #12]
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	685b      	ldr	r3, [r3, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	68ba      	ldr	r2, [r7, #8]
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d2f6      	bcs.n	800b9ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	685a      	ldr	r2, [r3, #4]
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	685b      	ldr	r3, [r3, #4]
 800b9ec:	683a      	ldr	r2, [r7, #0]
 800b9ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	68fa      	ldr	r2, [r7, #12]
 800b9f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	683a      	ldr	r2, [r7, #0]
 800b9fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	687a      	ldr	r2, [r7, #4]
 800ba00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	1c5a      	adds	r2, r3, #1
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	601a      	str	r2, [r3, #0]
}
 800ba0c:	bf00      	nop
 800ba0e:	3714      	adds	r7, #20
 800ba10:	46bd      	mov	sp, r7
 800ba12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba16:	4770      	bx	lr

0800ba18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b085      	sub	sp, #20
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	691b      	ldr	r3, [r3, #16]
 800ba24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	685b      	ldr	r3, [r3, #4]
 800ba2a:	687a      	ldr	r2, [r7, #4]
 800ba2c:	6892      	ldr	r2, [r2, #8]
 800ba2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	689b      	ldr	r3, [r3, #8]
 800ba34:	687a      	ldr	r2, [r7, #4]
 800ba36:	6852      	ldr	r2, [r2, #4]
 800ba38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	685b      	ldr	r3, [r3, #4]
 800ba3e:	687a      	ldr	r2, [r7, #4]
 800ba40:	429a      	cmp	r2, r3
 800ba42:	d103      	bne.n	800ba4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	689a      	ldr	r2, [r3, #8]
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	1e5a      	subs	r2, r3, #1
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	681b      	ldr	r3, [r3, #0]
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3714      	adds	r7, #20
 800ba64:	46bd      	mov	sp, r7
 800ba66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6a:	4770      	bx	lr

0800ba6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b084      	sub	sp, #16
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
 800ba74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d10a      	bne.n	800ba96 <xQueueGenericReset+0x2a>
	__asm volatile
 800ba80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba84:	f383 8811 	msr	BASEPRI, r3
 800ba88:	f3bf 8f6f 	isb	sy
 800ba8c:	f3bf 8f4f 	dsb	sy
 800ba90:	60bb      	str	r3, [r7, #8]
}
 800ba92:	bf00      	nop
 800ba94:	e7fe      	b.n	800ba94 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ba96:	f002 f8f5 	bl	800dc84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	681a      	ldr	r2, [r3, #0]
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baa2:	68f9      	ldr	r1, [r7, #12]
 800baa4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800baa6:	fb01 f303 	mul.w	r3, r1, r3
 800baaa:	441a      	add	r2, r3
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	2200      	movs	r2, #0
 800bab4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	681a      	ldr	r2, [r3, #0]
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	681a      	ldr	r2, [r3, #0]
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bac6:	3b01      	subs	r3, #1
 800bac8:	68f9      	ldr	r1, [r7, #12]
 800baca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bacc:	fb01 f303 	mul.w	r3, r1, r3
 800bad0:	441a      	add	r2, r3
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	22ff      	movs	r2, #255	; 0xff
 800bada:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	22ff      	movs	r2, #255	; 0xff
 800bae2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d109      	bne.n	800bb00 <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	691b      	ldr	r3, [r3, #16]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d00f      	beq.n	800bb14 <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	3310      	adds	r3, #16
 800baf8:	4618      	mov	r0, r3
 800bafa:	f001 f9ab 	bl	800ce54 <xTaskRemoveFromEventList>
 800bafe:	e009      	b.n	800bb14 <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	3310      	adds	r3, #16
 800bb04:	4618      	mov	r0, r3
 800bb06:	f7ff fefd 	bl	800b904 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	3324      	adds	r3, #36	; 0x24
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f7ff fef8 	bl	800b904 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bb14:	f002 f8e6 	bl	800dce4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bb18:	2301      	movs	r3, #1
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3710      	adds	r7, #16
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}

0800bb22 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bb22:	b580      	push	{r7, lr}
 800bb24:	b08e      	sub	sp, #56	; 0x38
 800bb26:	af02      	add	r7, sp, #8
 800bb28:	60f8      	str	r0, [r7, #12]
 800bb2a:	60b9      	str	r1, [r7, #8]
 800bb2c:	607a      	str	r2, [r7, #4]
 800bb2e:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d10a      	bne.n	800bb4c <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bb36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb3a:	f383 8811 	msr	BASEPRI, r3
 800bb3e:	f3bf 8f6f 	isb	sy
 800bb42:	f3bf 8f4f 	dsb	sy
 800bb46:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bb48:	bf00      	nop
 800bb4a:	e7fe      	b.n	800bb4a <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d10a      	bne.n	800bb68 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb56:	f383 8811 	msr	BASEPRI, r3
 800bb5a:	f3bf 8f6f 	isb	sy
 800bb5e:	f3bf 8f4f 	dsb	sy
 800bb62:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bb64:	bf00      	nop
 800bb66:	e7fe      	b.n	800bb66 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d002      	beq.n	800bb74 <xQueueGenericCreateStatic+0x52>
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d001      	beq.n	800bb78 <xQueueGenericCreateStatic+0x56>
 800bb74:	2301      	movs	r3, #1
 800bb76:	e000      	b.n	800bb7a <xQueueGenericCreateStatic+0x58>
 800bb78:	2300      	movs	r3, #0
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d10a      	bne.n	800bb94 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bb7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb82:	f383 8811 	msr	BASEPRI, r3
 800bb86:	f3bf 8f6f 	isb	sy
 800bb8a:	f3bf 8f4f 	dsb	sy
 800bb8e:	623b      	str	r3, [r7, #32]
}
 800bb90:	bf00      	nop
 800bb92:	e7fe      	b.n	800bb92 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d102      	bne.n	800bba0 <xQueueGenericCreateStatic+0x7e>
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d101      	bne.n	800bba4 <xQueueGenericCreateStatic+0x82>
 800bba0:	2301      	movs	r3, #1
 800bba2:	e000      	b.n	800bba6 <xQueueGenericCreateStatic+0x84>
 800bba4:	2300      	movs	r3, #0
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d10a      	bne.n	800bbc0 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bbaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbae:	f383 8811 	msr	BASEPRI, r3
 800bbb2:	f3bf 8f6f 	isb	sy
 800bbb6:	f3bf 8f4f 	dsb	sy
 800bbba:	61fb      	str	r3, [r7, #28]
}
 800bbbc:	bf00      	nop
 800bbbe:	e7fe      	b.n	800bbbe <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bbc0:	2350      	movs	r3, #80	; 0x50
 800bbc2:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bbc4:	697b      	ldr	r3, [r7, #20]
 800bbc6:	2b50      	cmp	r3, #80	; 0x50
 800bbc8:	d00a      	beq.n	800bbe0 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bbca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbce:	f383 8811 	msr	BASEPRI, r3
 800bbd2:	f3bf 8f6f 	isb	sy
 800bbd6:	f3bf 8f4f 	dsb	sy
 800bbda:	61bb      	str	r3, [r7, #24]
}
 800bbdc:	bf00      	nop
 800bbde:	e7fe      	b.n	800bbde <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bbe0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bbe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d00d      	beq.n	800bc08 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bbec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbee:	2201      	movs	r2, #1
 800bbf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bbf4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbfa:	9300      	str	r3, [sp, #0]
 800bbfc:	4613      	mov	r3, r2
 800bbfe:	687a      	ldr	r2, [r7, #4]
 800bc00:	68b9      	ldr	r1, [r7, #8]
 800bc02:	68f8      	ldr	r0, [r7, #12]
 800bc04:	f000 f83f 	bl	800bc86 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bc08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3730      	adds	r7, #48	; 0x30
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}

0800bc12 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bc12:	b580      	push	{r7, lr}
 800bc14:	b08a      	sub	sp, #40	; 0x28
 800bc16:	af02      	add	r7, sp, #8
 800bc18:	60f8      	str	r0, [r7, #12]
 800bc1a:	60b9      	str	r1, [r7, #8]
 800bc1c:	4613      	mov	r3, r2
 800bc1e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d10a      	bne.n	800bc3c <xQueueGenericCreate+0x2a>
	__asm volatile
 800bc26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc2a:	f383 8811 	msr	BASEPRI, r3
 800bc2e:	f3bf 8f6f 	isb	sy
 800bc32:	f3bf 8f4f 	dsb	sy
 800bc36:	613b      	str	r3, [r7, #16]
}
 800bc38:	bf00      	nop
 800bc3a:	e7fe      	b.n	800bc3a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	68ba      	ldr	r2, [r7, #8]
 800bc40:	fb02 f303 	mul.w	r3, r2, r3
 800bc44:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bc46:	69fb      	ldr	r3, [r7, #28]
 800bc48:	3350      	adds	r3, #80	; 0x50
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f002 f93c 	bl	800dec8 <pvPortMalloc>
 800bc50:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bc52:	69bb      	ldr	r3, [r7, #24]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d011      	beq.n	800bc7c <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bc58:	69bb      	ldr	r3, [r7, #24]
 800bc5a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	3350      	adds	r3, #80	; 0x50
 800bc60:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bc62:	69bb      	ldr	r3, [r7, #24]
 800bc64:	2200      	movs	r2, #0
 800bc66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bc6a:	79fa      	ldrb	r2, [r7, #7]
 800bc6c:	69bb      	ldr	r3, [r7, #24]
 800bc6e:	9300      	str	r3, [sp, #0]
 800bc70:	4613      	mov	r3, r2
 800bc72:	697a      	ldr	r2, [r7, #20]
 800bc74:	68b9      	ldr	r1, [r7, #8]
 800bc76:	68f8      	ldr	r0, [r7, #12]
 800bc78:	f000 f805 	bl	800bc86 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bc7c:	69bb      	ldr	r3, [r7, #24]
	}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3720      	adds	r7, #32
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}

0800bc86 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bc86:	b580      	push	{r7, lr}
 800bc88:	b084      	sub	sp, #16
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	60f8      	str	r0, [r7, #12]
 800bc8e:	60b9      	str	r1, [r7, #8]
 800bc90:	607a      	str	r2, [r7, #4]
 800bc92:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d103      	bne.n	800bca2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bc9a:	69bb      	ldr	r3, [r7, #24]
 800bc9c:	69ba      	ldr	r2, [r7, #24]
 800bc9e:	601a      	str	r2, [r3, #0]
 800bca0:	e002      	b.n	800bca8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bca2:	69bb      	ldr	r3, [r7, #24]
 800bca4:	687a      	ldr	r2, [r7, #4]
 800bca6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bca8:	69bb      	ldr	r3, [r7, #24]
 800bcaa:	68fa      	ldr	r2, [r7, #12]
 800bcac:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bcae:	69bb      	ldr	r3, [r7, #24]
 800bcb0:	68ba      	ldr	r2, [r7, #8]
 800bcb2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bcb4:	2101      	movs	r1, #1
 800bcb6:	69b8      	ldr	r0, [r7, #24]
 800bcb8:	f7ff fed8 	bl	800ba6c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bcbc:	69bb      	ldr	r3, [r7, #24]
 800bcbe:	78fa      	ldrb	r2, [r7, #3]
 800bcc0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bcc4:	bf00      	nop
 800bcc6:	3710      	adds	r7, #16
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}

0800bccc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b08e      	sub	sp, #56	; 0x38
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	60f8      	str	r0, [r7, #12]
 800bcd4:	60b9      	str	r1, [r7, #8]
 800bcd6:	607a      	str	r2, [r7, #4]
 800bcd8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d10a      	bne.n	800bcfe <xQueueGenericSend+0x32>
	__asm volatile
 800bce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcec:	f383 8811 	msr	BASEPRI, r3
 800bcf0:	f3bf 8f6f 	isb	sy
 800bcf4:	f3bf 8f4f 	dsb	sy
 800bcf8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bcfa:	bf00      	nop
 800bcfc:	e7fe      	b.n	800bcfc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d103      	bne.n	800bd0c <xQueueGenericSend+0x40>
 800bd04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d101      	bne.n	800bd10 <xQueueGenericSend+0x44>
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	e000      	b.n	800bd12 <xQueueGenericSend+0x46>
 800bd10:	2300      	movs	r3, #0
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d10a      	bne.n	800bd2c <xQueueGenericSend+0x60>
	__asm volatile
 800bd16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd1a:	f383 8811 	msr	BASEPRI, r3
 800bd1e:	f3bf 8f6f 	isb	sy
 800bd22:	f3bf 8f4f 	dsb	sy
 800bd26:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bd28:	bf00      	nop
 800bd2a:	e7fe      	b.n	800bd2a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	2b02      	cmp	r3, #2
 800bd30:	d103      	bne.n	800bd3a <xQueueGenericSend+0x6e>
 800bd32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd36:	2b01      	cmp	r3, #1
 800bd38:	d101      	bne.n	800bd3e <xQueueGenericSend+0x72>
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	e000      	b.n	800bd40 <xQueueGenericSend+0x74>
 800bd3e:	2300      	movs	r3, #0
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d10a      	bne.n	800bd5a <xQueueGenericSend+0x8e>
	__asm volatile
 800bd44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd48:	f383 8811 	msr	BASEPRI, r3
 800bd4c:	f3bf 8f6f 	isb	sy
 800bd50:	f3bf 8f4f 	dsb	sy
 800bd54:	623b      	str	r3, [r7, #32]
}
 800bd56:	bf00      	nop
 800bd58:	e7fe      	b.n	800bd58 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd5a:	f001 fa37 	bl	800d1cc <xTaskGetSchedulerState>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d102      	bne.n	800bd6a <xQueueGenericSend+0x9e>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d101      	bne.n	800bd6e <xQueueGenericSend+0xa2>
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	e000      	b.n	800bd70 <xQueueGenericSend+0xa4>
 800bd6e:	2300      	movs	r3, #0
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d10a      	bne.n	800bd8a <xQueueGenericSend+0xbe>
	__asm volatile
 800bd74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd78:	f383 8811 	msr	BASEPRI, r3
 800bd7c:	f3bf 8f6f 	isb	sy
 800bd80:	f3bf 8f4f 	dsb	sy
 800bd84:	61fb      	str	r3, [r7, #28]
}
 800bd86:	bf00      	nop
 800bd88:	e7fe      	b.n	800bd88 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bd8a:	f001 ff7b 	bl	800dc84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bd8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd96:	429a      	cmp	r2, r3
 800bd98:	d302      	bcc.n	800bda0 <xQueueGenericSend+0xd4>
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	2b02      	cmp	r3, #2
 800bd9e:	d112      	bne.n	800bdc6 <xQueueGenericSend+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bda0:	683a      	ldr	r2, [r7, #0]
 800bda2:	68b9      	ldr	r1, [r7, #8]
 800bda4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bda6:	f000 faa3 	bl	800c2f0 <prvCopyDataToQueue>
 800bdaa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bdac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d004      	beq.n	800bdbe <xQueueGenericSend+0xf2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bdb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb6:	3324      	adds	r3, #36	; 0x24
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f001 f84b 	bl	800ce54 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bdbe:	f001 ff91 	bl	800dce4 <vPortExitCritical>
				return pdPASS;
 800bdc2:	2301      	movs	r3, #1
 800bdc4:	e062      	b.n	800be8c <xQueueGenericSend+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d103      	bne.n	800bdd4 <xQueueGenericSend+0x108>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bdcc:	f001 ff8a 	bl	800dce4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	e05b      	b.n	800be8c <xQueueGenericSend+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bdd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d106      	bne.n	800bde8 <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bdda:	f107 0314 	add.w	r3, r7, #20
 800bdde:	4618      	mov	r0, r3
 800bde0:	f001 f89c 	bl	800cf1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bde4:	2301      	movs	r3, #1
 800bde6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bde8:	f001 ff7c 	bl	800dce4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bdec:	f000 fe3a 	bl	800ca64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bdf0:	f001 ff48 	bl	800dc84 <vPortEnterCritical>
 800bdf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bdfa:	b25b      	sxtb	r3, r3
 800bdfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be00:	d103      	bne.n	800be0a <xQueueGenericSend+0x13e>
 800be02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be04:	2200      	movs	r2, #0
 800be06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be10:	b25b      	sxtb	r3, r3
 800be12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be16:	d103      	bne.n	800be20 <xQueueGenericSend+0x154>
 800be18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be1a:	2200      	movs	r2, #0
 800be1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be20:	f001 ff60 	bl	800dce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be24:	1d3a      	adds	r2, r7, #4
 800be26:	f107 0314 	add.w	r3, r7, #20
 800be2a:	4611      	mov	r1, r2
 800be2c:	4618      	mov	r0, r3
 800be2e:	f001 f88b 	bl	800cf48 <xTaskCheckForTimeOut>
 800be32:	4603      	mov	r3, r0
 800be34:	2b00      	cmp	r3, #0
 800be36:	d123      	bne.n	800be80 <xQueueGenericSend+0x1b4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800be38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be3a:	f000 fb51 	bl	800c4e0 <prvIsQueueFull>
 800be3e:	4603      	mov	r3, r0
 800be40:	2b00      	cmp	r3, #0
 800be42:	d017      	beq.n	800be74 <xQueueGenericSend+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800be44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be46:	3310      	adds	r3, #16
 800be48:	687a      	ldr	r2, [r7, #4]
 800be4a:	4611      	mov	r1, r2
 800be4c:	4618      	mov	r0, r3
 800be4e:	f000 ffb1 	bl	800cdb4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800be52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be54:	f000 fadc 	bl	800c410 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800be58:	f000 fe12 	bl	800ca80 <xTaskResumeAll>
 800be5c:	4603      	mov	r3, r0
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d193      	bne.n	800bd8a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800be62:	4b0c      	ldr	r3, [pc, #48]	; (800be94 <xQueueGenericSend+0x1c8>)
 800be64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be68:	601a      	str	r2, [r3, #0]
 800be6a:	f3bf 8f4f 	dsb	sy
 800be6e:	f3bf 8f6f 	isb	sy
 800be72:	e78a      	b.n	800bd8a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800be74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be76:	f000 facb 	bl	800c410 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800be7a:	f000 fe01 	bl	800ca80 <xTaskResumeAll>
 800be7e:	e784      	b.n	800bd8a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800be80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be82:	f000 fac5 	bl	800c410 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800be86:	f000 fdfb 	bl	800ca80 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800be8a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3738      	adds	r7, #56	; 0x38
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}
 800be94:	e000ed04 	.word	0xe000ed04

0800be98 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b090      	sub	sp, #64	; 0x40
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	60f8      	str	r0, [r7, #12]
 800bea0:	60b9      	str	r1, [r7, #8]
 800bea2:	607a      	str	r2, [r7, #4]
 800bea4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800beaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beac:	2b00      	cmp	r3, #0
 800beae:	d10a      	bne.n	800bec6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800beb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb4:	f383 8811 	msr	BASEPRI, r3
 800beb8:	f3bf 8f6f 	isb	sy
 800bebc:	f3bf 8f4f 	dsb	sy
 800bec0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bec2:	bf00      	nop
 800bec4:	e7fe      	b.n	800bec4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d103      	bne.n	800bed4 <xQueueGenericSendFromISR+0x3c>
 800becc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d101      	bne.n	800bed8 <xQueueGenericSendFromISR+0x40>
 800bed4:	2301      	movs	r3, #1
 800bed6:	e000      	b.n	800beda <xQueueGenericSendFromISR+0x42>
 800bed8:	2300      	movs	r3, #0
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d10a      	bne.n	800bef4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee2:	f383 8811 	msr	BASEPRI, r3
 800bee6:	f3bf 8f6f 	isb	sy
 800beea:	f3bf 8f4f 	dsb	sy
 800beee:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bef0:	bf00      	nop
 800bef2:	e7fe      	b.n	800bef2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	2b02      	cmp	r3, #2
 800bef8:	d103      	bne.n	800bf02 <xQueueGenericSendFromISR+0x6a>
 800befa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800befc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800befe:	2b01      	cmp	r3, #1
 800bf00:	d101      	bne.n	800bf06 <xQueueGenericSendFromISR+0x6e>
 800bf02:	2301      	movs	r3, #1
 800bf04:	e000      	b.n	800bf08 <xQueueGenericSendFromISR+0x70>
 800bf06:	2300      	movs	r3, #0
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d10a      	bne.n	800bf22 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bf0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf10:	f383 8811 	msr	BASEPRI, r3
 800bf14:	f3bf 8f6f 	isb	sy
 800bf18:	f3bf 8f4f 	dsb	sy
 800bf1c:	623b      	str	r3, [r7, #32]
}
 800bf1e:	bf00      	nop
 800bf20:	e7fe      	b.n	800bf20 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bf22:	f001 ff91 	bl	800de48 <vPortValidateInterruptPriority>
	__asm volatile
 800bf26:	f3ef 8211 	mrs	r2, BASEPRI
 800bf2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf2e:	f383 8811 	msr	BASEPRI, r3
 800bf32:	f3bf 8f6f 	isb	sy
 800bf36:	f3bf 8f4f 	dsb	sy
 800bf3a:	61fa      	str	r2, [r7, #28]
 800bf3c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800bf3e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bf40:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bf42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf4a:	429a      	cmp	r2, r3
 800bf4c:	d302      	bcc.n	800bf54 <xQueueGenericSendFromISR+0xbc>
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	2b02      	cmp	r3, #2
 800bf52:	d12f      	bne.n	800bfb4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bf54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf62:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bf64:	683a      	ldr	r2, [r7, #0]
 800bf66:	68b9      	ldr	r1, [r7, #8]
 800bf68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bf6a:	f000 f9c1 	bl	800c2f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bf6e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bf72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf76:	d112      	bne.n	800bf9e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d016      	beq.n	800bfae <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf82:	3324      	adds	r3, #36	; 0x24
 800bf84:	4618      	mov	r0, r3
 800bf86:	f000 ff65 	bl	800ce54 <xTaskRemoveFromEventList>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d00e      	beq.n	800bfae <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d00b      	beq.n	800bfae <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2201      	movs	r2, #1
 800bf9a:	601a      	str	r2, [r3, #0]
 800bf9c:	e007      	b.n	800bfae <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bf9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	b2db      	uxtb	r3, r3
 800bfa6:	b25a      	sxtb	r2, r3
 800bfa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bfae:	2301      	movs	r3, #1
 800bfb0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800bfb2:	e001      	b.n	800bfb8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfba:	617b      	str	r3, [r7, #20]
	__asm volatile
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	f383 8811 	msr	BASEPRI, r3
}
 800bfc2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bfc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3740      	adds	r7, #64	; 0x40
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}
	...

0800bfd0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b08c      	sub	sp, #48	; 0x30
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	60f8      	str	r0, [r7, #12]
 800bfd8:	60b9      	str	r1, [r7, #8]
 800bfda:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bfe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d10a      	bne.n	800c000 <xQueueReceive+0x30>
	__asm volatile
 800bfea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfee:	f383 8811 	msr	BASEPRI, r3
 800bff2:	f3bf 8f6f 	isb	sy
 800bff6:	f3bf 8f4f 	dsb	sy
 800bffa:	623b      	str	r3, [r7, #32]
}
 800bffc:	bf00      	nop
 800bffe:	e7fe      	b.n	800bffe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d103      	bne.n	800c00e <xQueueReceive+0x3e>
 800c006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d101      	bne.n	800c012 <xQueueReceive+0x42>
 800c00e:	2301      	movs	r3, #1
 800c010:	e000      	b.n	800c014 <xQueueReceive+0x44>
 800c012:	2300      	movs	r3, #0
 800c014:	2b00      	cmp	r3, #0
 800c016:	d10a      	bne.n	800c02e <xQueueReceive+0x5e>
	__asm volatile
 800c018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c01c:	f383 8811 	msr	BASEPRI, r3
 800c020:	f3bf 8f6f 	isb	sy
 800c024:	f3bf 8f4f 	dsb	sy
 800c028:	61fb      	str	r3, [r7, #28]
}
 800c02a:	bf00      	nop
 800c02c:	e7fe      	b.n	800c02c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c02e:	f001 f8cd 	bl	800d1cc <xTaskGetSchedulerState>
 800c032:	4603      	mov	r3, r0
 800c034:	2b00      	cmp	r3, #0
 800c036:	d102      	bne.n	800c03e <xQueueReceive+0x6e>
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d101      	bne.n	800c042 <xQueueReceive+0x72>
 800c03e:	2301      	movs	r3, #1
 800c040:	e000      	b.n	800c044 <xQueueReceive+0x74>
 800c042:	2300      	movs	r3, #0
 800c044:	2b00      	cmp	r3, #0
 800c046:	d10a      	bne.n	800c05e <xQueueReceive+0x8e>
	__asm volatile
 800c048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c04c:	f383 8811 	msr	BASEPRI, r3
 800c050:	f3bf 8f6f 	isb	sy
 800c054:	f3bf 8f4f 	dsb	sy
 800c058:	61bb      	str	r3, [r7, #24]
}
 800c05a:	bf00      	nop
 800c05c:	e7fe      	b.n	800c05c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c05e:	f001 fe11 	bl	800dc84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c066:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d014      	beq.n	800c098 <xQueueReceive+0xc8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c06e:	68b9      	ldr	r1, [r7, #8]
 800c070:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c072:	f000 f9a7 	bl	800c3c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c078:	1e5a      	subs	r2, r3, #1
 800c07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c07c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c080:	691b      	ldr	r3, [r3, #16]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d004      	beq.n	800c090 <xQueueReceive+0xc0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c088:	3310      	adds	r3, #16
 800c08a:	4618      	mov	r0, r3
 800c08c:	f000 fee2 	bl	800ce54 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c090:	f001 fe28 	bl	800dce4 <vPortExitCritical>
				return pdPASS;
 800c094:	2301      	movs	r3, #1
 800c096:	e069      	b.n	800c16c <xQueueReceive+0x19c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d103      	bne.n	800c0a6 <xQueueReceive+0xd6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c09e:	f001 fe21 	bl	800dce4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	e062      	b.n	800c16c <xQueueReceive+0x19c>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c0a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d106      	bne.n	800c0ba <xQueueReceive+0xea>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c0ac:	f107 0310 	add.w	r3, r7, #16
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f000 ff33 	bl	800cf1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c0ba:	f001 fe13 	bl	800dce4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c0be:	f000 fcd1 	bl	800ca64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c0c2:	f001 fddf 	bl	800dc84 <vPortEnterCritical>
 800c0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c0cc:	b25b      	sxtb	r3, r3
 800c0ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0d2:	d103      	bne.n	800c0dc <xQueueReceive+0x10c>
 800c0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c0e2:	b25b      	sxtb	r3, r3
 800c0e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0e8:	d103      	bne.n	800c0f2 <xQueueReceive+0x122>
 800c0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c0f2:	f001 fdf7 	bl	800dce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c0f6:	1d3a      	adds	r2, r7, #4
 800c0f8:	f107 0310 	add.w	r3, r7, #16
 800c0fc:	4611      	mov	r1, r2
 800c0fe:	4618      	mov	r0, r3
 800c100:	f000 ff22 	bl	800cf48 <xTaskCheckForTimeOut>
 800c104:	4603      	mov	r3, r0
 800c106:	2b00      	cmp	r3, #0
 800c108:	d123      	bne.n	800c152 <xQueueReceive+0x182>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c10a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c10c:	f000 f9d2 	bl	800c4b4 <prvIsQueueEmpty>
 800c110:	4603      	mov	r3, r0
 800c112:	2b00      	cmp	r3, #0
 800c114:	d017      	beq.n	800c146 <xQueueReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c118:	3324      	adds	r3, #36	; 0x24
 800c11a:	687a      	ldr	r2, [r7, #4]
 800c11c:	4611      	mov	r1, r2
 800c11e:	4618      	mov	r0, r3
 800c120:	f000 fe48 	bl	800cdb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c124:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c126:	f000 f973 	bl	800c410 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c12a:	f000 fca9 	bl	800ca80 <xTaskResumeAll>
 800c12e:	4603      	mov	r3, r0
 800c130:	2b00      	cmp	r3, #0
 800c132:	d194      	bne.n	800c05e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c134:	4b0f      	ldr	r3, [pc, #60]	; (800c174 <xQueueReceive+0x1a4>)
 800c136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c13a:	601a      	str	r2, [r3, #0]
 800c13c:	f3bf 8f4f 	dsb	sy
 800c140:	f3bf 8f6f 	isb	sy
 800c144:	e78b      	b.n	800c05e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c146:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c148:	f000 f962 	bl	800c410 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c14c:	f000 fc98 	bl	800ca80 <xTaskResumeAll>
 800c150:	e785      	b.n	800c05e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c152:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c154:	f000 f95c 	bl	800c410 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c158:	f000 fc92 	bl	800ca80 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c15c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c15e:	f000 f9a9 	bl	800c4b4 <prvIsQueueEmpty>
 800c162:	4603      	mov	r3, r0
 800c164:	2b00      	cmp	r3, #0
 800c166:	f43f af7a 	beq.w	800c05e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c16a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c16c:	4618      	mov	r0, r3
 800c16e:	3730      	adds	r7, #48	; 0x30
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}
 800c174:	e000ed04 	.word	0xe000ed04

0800c178 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b08e      	sub	sp, #56	; 0x38
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	60f8      	str	r0, [r7, #12]
 800c180:	60b9      	str	r1, [r7, #8]
 800c182:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d10a      	bne.n	800c1a4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c192:	f383 8811 	msr	BASEPRI, r3
 800c196:	f3bf 8f6f 	isb	sy
 800c19a:	f3bf 8f4f 	dsb	sy
 800c19e:	623b      	str	r3, [r7, #32]
}
 800c1a0:	bf00      	nop
 800c1a2:	e7fe      	b.n	800c1a2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d103      	bne.n	800c1b2 <xQueueReceiveFromISR+0x3a>
 800c1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d101      	bne.n	800c1b6 <xQueueReceiveFromISR+0x3e>
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	e000      	b.n	800c1b8 <xQueueReceiveFromISR+0x40>
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d10a      	bne.n	800c1d2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c0:	f383 8811 	msr	BASEPRI, r3
 800c1c4:	f3bf 8f6f 	isb	sy
 800c1c8:	f3bf 8f4f 	dsb	sy
 800c1cc:	61fb      	str	r3, [r7, #28]
}
 800c1ce:	bf00      	nop
 800c1d0:	e7fe      	b.n	800c1d0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c1d2:	f001 fe39 	bl	800de48 <vPortValidateInterruptPriority>
	__asm volatile
 800c1d6:	f3ef 8211 	mrs	r2, BASEPRI
 800c1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1de:	f383 8811 	msr	BASEPRI, r3
 800c1e2:	f3bf 8f6f 	isb	sy
 800c1e6:	f3bf 8f4f 	dsb	sy
 800c1ea:	61ba      	str	r2, [r7, #24]
 800c1ec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c1ee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c1f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1f6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d02f      	beq.n	800c25e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c200:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c208:	68b9      	ldr	r1, [r7, #8]
 800c20a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c20c:	f000 f8da 	bl	800c3c4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c212:	1e5a      	subs	r2, r3, #1
 800c214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c216:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c218:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c21c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c220:	d112      	bne.n	800c248 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c224:	691b      	ldr	r3, [r3, #16]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d016      	beq.n	800c258 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c22c:	3310      	adds	r3, #16
 800c22e:	4618      	mov	r0, r3
 800c230:	f000 fe10 	bl	800ce54 <xTaskRemoveFromEventList>
 800c234:	4603      	mov	r3, r0
 800c236:	2b00      	cmp	r3, #0
 800c238:	d00e      	beq.n	800c258 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d00b      	beq.n	800c258 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2201      	movs	r2, #1
 800c244:	601a      	str	r2, [r3, #0]
 800c246:	e007      	b.n	800c258 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c248:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c24c:	3301      	adds	r3, #1
 800c24e:	b2db      	uxtb	r3, r3
 800c250:	b25a      	sxtb	r2, r3
 800c252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c254:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c258:	2301      	movs	r3, #1
 800c25a:	637b      	str	r3, [r7, #52]	; 0x34
 800c25c:	e001      	b.n	800c262 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c25e:	2300      	movs	r3, #0
 800c260:	637b      	str	r3, [r7, #52]	; 0x34
 800c262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c264:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	f383 8811 	msr	BASEPRI, r3
}
 800c26c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c26e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c270:	4618      	mov	r0, r3
 800c272:	3738      	adds	r7, #56	; 0x38
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}

0800c278 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b084      	sub	sp, #16
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d10a      	bne.n	800c29c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800c286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c28a:	f383 8811 	msr	BASEPRI, r3
 800c28e:	f3bf 8f6f 	isb	sy
 800c292:	f3bf 8f4f 	dsb	sy
 800c296:	60bb      	str	r3, [r7, #8]
}
 800c298:	bf00      	nop
 800c29a:	e7fe      	b.n	800c29a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800c29c:	f001 fcf2 	bl	800dc84 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2a4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800c2a6:	f001 fd1d 	bl	800dce4 <vPortExitCritical>

	return uxReturn;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3710      	adds	r7, #16
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}

0800c2b4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b087      	sub	sp, #28
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d10a      	bne.n	800c2dc <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800c2c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ca:	f383 8811 	msr	BASEPRI, r3
 800c2ce:	f3bf 8f6f 	isb	sy
 800c2d2:	f3bf 8f4f 	dsb	sy
 800c2d6:	60fb      	str	r3, [r7, #12]
}
 800c2d8:	bf00      	nop
 800c2da:	e7fe      	b.n	800c2da <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2e0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800c2e2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	371c      	adds	r7, #28
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ee:	4770      	bx	lr

0800c2f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b086      	sub	sp, #24
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	60f8      	str	r0, [r7, #12]
 800c2f8:	60b9      	str	r1, [r7, #8]
 800c2fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c304:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d10d      	bne.n	800c32a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d14d      	bne.n	800c3b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	689b      	ldr	r3, [r3, #8]
 800c31a:	4618      	mov	r0, r3
 800c31c:	f000 ff74 	bl	800d208 <xTaskPriorityDisinherit>
 800c320:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	2200      	movs	r2, #0
 800c326:	609a      	str	r2, [r3, #8]
 800c328:	e043      	b.n	800c3b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d119      	bne.n	800c364 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	6858      	ldr	r0, [r3, #4]
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c338:	461a      	mov	r2, r3
 800c33a:	68b9      	ldr	r1, [r7, #8]
 800c33c:	f003 fad2 	bl	800f8e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	685a      	ldr	r2, [r3, #4]
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c348:	441a      	add	r2, r3
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	685a      	ldr	r2, [r3, #4]
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	689b      	ldr	r3, [r3, #8]
 800c356:	429a      	cmp	r2, r3
 800c358:	d32b      	bcc.n	800c3b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	681a      	ldr	r2, [r3, #0]
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	605a      	str	r2, [r3, #4]
 800c362:	e026      	b.n	800c3b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	68d8      	ldr	r0, [r3, #12]
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c36c:	461a      	mov	r2, r3
 800c36e:	68b9      	ldr	r1, [r7, #8]
 800c370:	f003 fab8 	bl	800f8e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	68da      	ldr	r2, [r3, #12]
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c37c:	425b      	negs	r3, r3
 800c37e:	441a      	add	r2, r3
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	68da      	ldr	r2, [r3, #12]
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	429a      	cmp	r2, r3
 800c38e:	d207      	bcs.n	800c3a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	689a      	ldr	r2, [r3, #8]
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c398:	425b      	negs	r3, r3
 800c39a:	441a      	add	r2, r3
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2b02      	cmp	r3, #2
 800c3a4:	d105      	bne.n	800c3b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c3a6:	693b      	ldr	r3, [r7, #16]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d002      	beq.n	800c3b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	3b01      	subs	r3, #1
 800c3b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	1c5a      	adds	r2, r3, #1
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c3ba:	697b      	ldr	r3, [r7, #20]
}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	3718      	adds	r7, #24
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}

0800c3c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b082      	sub	sp, #8
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
 800c3cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d018      	beq.n	800c408 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	68da      	ldr	r2, [r3, #12]
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3de:	441a      	add	r2, r3
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	68da      	ldr	r2, [r3, #12]
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	689b      	ldr	r3, [r3, #8]
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	d303      	bcc.n	800c3f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681a      	ldr	r2, [r3, #0]
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	68d9      	ldr	r1, [r3, #12]
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c400:	461a      	mov	r2, r3
 800c402:	6838      	ldr	r0, [r7, #0]
 800c404:	f003 fa6e 	bl	800f8e4 <memcpy>
	}
}
 800c408:	bf00      	nop
 800c40a:	3708      	adds	r7, #8
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}

0800c410 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b084      	sub	sp, #16
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c418:	f001 fc34 	bl	800dc84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c422:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c424:	e011      	b.n	800c44a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d012      	beq.n	800c454 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	3324      	adds	r3, #36	; 0x24
 800c432:	4618      	mov	r0, r3
 800c434:	f000 fd0e 	bl	800ce54 <xTaskRemoveFromEventList>
 800c438:	4603      	mov	r3, r0
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d001      	beq.n	800c442 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c43e:	f000 fde5 	bl	800d00c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c442:	7bfb      	ldrb	r3, [r7, #15]
 800c444:	3b01      	subs	r3, #1
 800c446:	b2db      	uxtb	r3, r3
 800c448:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c44a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	dce9      	bgt.n	800c426 <prvUnlockQueue+0x16>
 800c452:	e000      	b.n	800c456 <prvUnlockQueue+0x46>
					break;
 800c454:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	22ff      	movs	r2, #255	; 0xff
 800c45a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c45e:	f001 fc41 	bl	800dce4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c462:	f001 fc0f 	bl	800dc84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c46c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c46e:	e011      	b.n	800c494 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	691b      	ldr	r3, [r3, #16]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d012      	beq.n	800c49e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	3310      	adds	r3, #16
 800c47c:	4618      	mov	r0, r3
 800c47e:	f000 fce9 	bl	800ce54 <xTaskRemoveFromEventList>
 800c482:	4603      	mov	r3, r0
 800c484:	2b00      	cmp	r3, #0
 800c486:	d001      	beq.n	800c48c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c488:	f000 fdc0 	bl	800d00c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c48c:	7bbb      	ldrb	r3, [r7, #14]
 800c48e:	3b01      	subs	r3, #1
 800c490:	b2db      	uxtb	r3, r3
 800c492:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c494:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	dce9      	bgt.n	800c470 <prvUnlockQueue+0x60>
 800c49c:	e000      	b.n	800c4a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c49e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	22ff      	movs	r2, #255	; 0xff
 800c4a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c4a8:	f001 fc1c 	bl	800dce4 <vPortExitCritical>
}
 800c4ac:	bf00      	nop
 800c4ae:	3710      	adds	r7, #16
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}

0800c4b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b084      	sub	sp, #16
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c4bc:	f001 fbe2 	bl	800dc84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d102      	bne.n	800c4ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	60fb      	str	r3, [r7, #12]
 800c4cc:	e001      	b.n	800c4d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c4d2:	f001 fc07 	bl	800dce4 <vPortExitCritical>

	return xReturn;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
}
 800c4d8:	4618      	mov	r0, r3
 800c4da:	3710      	adds	r7, #16
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}

0800c4e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b084      	sub	sp, #16
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c4e8:	f001 fbcc 	bl	800dc84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	d102      	bne.n	800c4fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c4f8:	2301      	movs	r3, #1
 800c4fa:	60fb      	str	r3, [r7, #12]
 800c4fc:	e001      	b.n	800c502 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c4fe:	2300      	movs	r3, #0
 800c500:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c502:	f001 fbef 	bl	800dce4 <vPortExitCritical>

	return xReturn;
 800c506:	68fb      	ldr	r3, [r7, #12]
}
 800c508:	4618      	mov	r0, r3
 800c50a:	3710      	adds	r7, #16
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}

0800c510 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c510:	b480      	push	{r7}
 800c512:	b085      	sub	sp, #20
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c51a:	2300      	movs	r3, #0
 800c51c:	60fb      	str	r3, [r7, #12]
 800c51e:	e014      	b.n	800c54a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c520:	4a0f      	ldr	r2, [pc, #60]	; (800c560 <vQueueAddToRegistry+0x50>)
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d10b      	bne.n	800c544 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c52c:	490c      	ldr	r1, [pc, #48]	; (800c560 <vQueueAddToRegistry+0x50>)
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	683a      	ldr	r2, [r7, #0]
 800c532:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c536:	4a0a      	ldr	r2, [pc, #40]	; (800c560 <vQueueAddToRegistry+0x50>)
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	00db      	lsls	r3, r3, #3
 800c53c:	4413      	add	r3, r2
 800c53e:	687a      	ldr	r2, [r7, #4]
 800c540:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c542:	e006      	b.n	800c552 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	3301      	adds	r3, #1
 800c548:	60fb      	str	r3, [r7, #12]
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	2b07      	cmp	r3, #7
 800c54e:	d9e7      	bls.n	800c520 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c550:	bf00      	nop
 800c552:	bf00      	nop
 800c554:	3714      	adds	r7, #20
 800c556:	46bd      	mov	sp, r7
 800c558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55c:	4770      	bx	lr
 800c55e:	bf00      	nop
 800c560:	200019b4 	.word	0x200019b4

0800c564 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c564:	b580      	push	{r7, lr}
 800c566:	b086      	sub	sp, #24
 800c568:	af00      	add	r7, sp, #0
 800c56a:	60f8      	str	r0, [r7, #12]
 800c56c:	60b9      	str	r1, [r7, #8]
 800c56e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c574:	f001 fb86 	bl	800dc84 <vPortEnterCritical>
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c57e:	b25b      	sxtb	r3, r3
 800c580:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c584:	d103      	bne.n	800c58e <vQueueWaitForMessageRestricted+0x2a>
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	2200      	movs	r2, #0
 800c58a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c594:	b25b      	sxtb	r3, r3
 800c596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c59a:	d103      	bne.n	800c5a4 <vQueueWaitForMessageRestricted+0x40>
 800c59c:	697b      	ldr	r3, [r7, #20]
 800c59e:	2200      	movs	r2, #0
 800c5a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c5a4:	f001 fb9e 	bl	800dce4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d106      	bne.n	800c5be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	3324      	adds	r3, #36	; 0x24
 800c5b4:	687a      	ldr	r2, [r7, #4]
 800c5b6:	68b9      	ldr	r1, [r7, #8]
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f000 fc1f 	bl	800cdfc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c5be:	6978      	ldr	r0, [r7, #20]
 800c5c0:	f7ff ff26 	bl	800c410 <prvUnlockQueue>
	}
 800c5c4:	bf00      	nop
 800c5c6:	3718      	adds	r7, #24
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}

0800c5cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b08e      	sub	sp, #56	; 0x38
 800c5d0:	af04      	add	r7, sp, #16
 800c5d2:	60f8      	str	r0, [r7, #12]
 800c5d4:	60b9      	str	r1, [r7, #8]
 800c5d6:	607a      	str	r2, [r7, #4]
 800c5d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c5da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d10a      	bne.n	800c5f6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e4:	f383 8811 	msr	BASEPRI, r3
 800c5e8:	f3bf 8f6f 	isb	sy
 800c5ec:	f3bf 8f4f 	dsb	sy
 800c5f0:	623b      	str	r3, [r7, #32]
}
 800c5f2:	bf00      	nop
 800c5f4:	e7fe      	b.n	800c5f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d10a      	bne.n	800c612 <xTaskCreateStatic+0x46>
	__asm volatile
 800c5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c600:	f383 8811 	msr	BASEPRI, r3
 800c604:	f3bf 8f6f 	isb	sy
 800c608:	f3bf 8f4f 	dsb	sy
 800c60c:	61fb      	str	r3, [r7, #28]
}
 800c60e:	bf00      	nop
 800c610:	e7fe      	b.n	800c610 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c612:	23bc      	movs	r3, #188	; 0xbc
 800c614:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c616:	693b      	ldr	r3, [r7, #16]
 800c618:	2bbc      	cmp	r3, #188	; 0xbc
 800c61a:	d00a      	beq.n	800c632 <xTaskCreateStatic+0x66>
	__asm volatile
 800c61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c620:	f383 8811 	msr	BASEPRI, r3
 800c624:	f3bf 8f6f 	isb	sy
 800c628:	f3bf 8f4f 	dsb	sy
 800c62c:	61bb      	str	r3, [r7, #24]
}
 800c62e:	bf00      	nop
 800c630:	e7fe      	b.n	800c630 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c632:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c636:	2b00      	cmp	r3, #0
 800c638:	d01e      	beq.n	800c678 <xTaskCreateStatic+0xac>
 800c63a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d01b      	beq.n	800c678 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c642:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c646:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c648:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c64c:	2202      	movs	r2, #2
 800c64e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c652:	2300      	movs	r3, #0
 800c654:	9303      	str	r3, [sp, #12]
 800c656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c658:	9302      	str	r3, [sp, #8]
 800c65a:	f107 0314 	add.w	r3, r7, #20
 800c65e:	9301      	str	r3, [sp, #4]
 800c660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c662:	9300      	str	r3, [sp, #0]
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	687a      	ldr	r2, [r7, #4]
 800c668:	68b9      	ldr	r1, [r7, #8]
 800c66a:	68f8      	ldr	r0, [r7, #12]
 800c66c:	f000 f850 	bl	800c710 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c670:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c672:	f000 f8f3 	bl	800c85c <prvAddNewTaskToReadyList>
 800c676:	e001      	b.n	800c67c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c678:	2300      	movs	r3, #0
 800c67a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c67c:	697b      	ldr	r3, [r7, #20]
	}
 800c67e:	4618      	mov	r0, r3
 800c680:	3728      	adds	r7, #40	; 0x28
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}

0800c686 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c686:	b580      	push	{r7, lr}
 800c688:	b08c      	sub	sp, #48	; 0x30
 800c68a:	af04      	add	r7, sp, #16
 800c68c:	60f8      	str	r0, [r7, #12]
 800c68e:	60b9      	str	r1, [r7, #8]
 800c690:	603b      	str	r3, [r7, #0]
 800c692:	4613      	mov	r3, r2
 800c694:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c696:	88fb      	ldrh	r3, [r7, #6]
 800c698:	009b      	lsls	r3, r3, #2
 800c69a:	4618      	mov	r0, r3
 800c69c:	f001 fc14 	bl	800dec8 <pvPortMalloc>
 800c6a0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d00e      	beq.n	800c6c6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c6a8:	20bc      	movs	r0, #188	; 0xbc
 800c6aa:	f001 fc0d 	bl	800dec8 <pvPortMalloc>
 800c6ae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c6b0:	69fb      	ldr	r3, [r7, #28]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d003      	beq.n	800c6be <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c6b6:	69fb      	ldr	r3, [r7, #28]
 800c6b8:	697a      	ldr	r2, [r7, #20]
 800c6ba:	631a      	str	r2, [r3, #48]	; 0x30
 800c6bc:	e005      	b.n	800c6ca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c6be:	6978      	ldr	r0, [r7, #20]
 800c6c0:	f001 fcce 	bl	800e060 <vPortFree>
 800c6c4:	e001      	b.n	800c6ca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c6ca:	69fb      	ldr	r3, [r7, #28]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d017      	beq.n	800c700 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c6d0:	69fb      	ldr	r3, [r7, #28]
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c6d8:	88fa      	ldrh	r2, [r7, #6]
 800c6da:	2300      	movs	r3, #0
 800c6dc:	9303      	str	r3, [sp, #12]
 800c6de:	69fb      	ldr	r3, [r7, #28]
 800c6e0:	9302      	str	r3, [sp, #8]
 800c6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6e4:	9301      	str	r3, [sp, #4]
 800c6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e8:	9300      	str	r3, [sp, #0]
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	68b9      	ldr	r1, [r7, #8]
 800c6ee:	68f8      	ldr	r0, [r7, #12]
 800c6f0:	f000 f80e 	bl	800c710 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c6f4:	69f8      	ldr	r0, [r7, #28]
 800c6f6:	f000 f8b1 	bl	800c85c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c6fa:	2301      	movs	r3, #1
 800c6fc:	61bb      	str	r3, [r7, #24]
 800c6fe:	e002      	b.n	800c706 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c700:	f04f 33ff 	mov.w	r3, #4294967295
 800c704:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c706:	69bb      	ldr	r3, [r7, #24]
	}
 800c708:	4618      	mov	r0, r3
 800c70a:	3720      	adds	r7, #32
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b088      	sub	sp, #32
 800c714:	af00      	add	r7, sp, #0
 800c716:	60f8      	str	r0, [r7, #12]
 800c718:	60b9      	str	r1, [r7, #8]
 800c71a:	607a      	str	r2, [r7, #4]
 800c71c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c720:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	009b      	lsls	r3, r3, #2
 800c726:	461a      	mov	r2, r3
 800c728:	21a5      	movs	r1, #165	; 0xa5
 800c72a:	f003 f8e9 	bl	800f900 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c730:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c738:	3b01      	subs	r3, #1
 800c73a:	009b      	lsls	r3, r3, #2
 800c73c:	4413      	add	r3, r2
 800c73e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c740:	69bb      	ldr	r3, [r7, #24]
 800c742:	f023 0307 	bic.w	r3, r3, #7
 800c746:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c748:	69bb      	ldr	r3, [r7, #24]
 800c74a:	f003 0307 	and.w	r3, r3, #7
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d00a      	beq.n	800c768 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c756:	f383 8811 	msr	BASEPRI, r3
 800c75a:	f3bf 8f6f 	isb	sy
 800c75e:	f3bf 8f4f 	dsb	sy
 800c762:	617b      	str	r3, [r7, #20]
}
 800c764:	bf00      	nop
 800c766:	e7fe      	b.n	800c766 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d01f      	beq.n	800c7ae <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c76e:	2300      	movs	r3, #0
 800c770:	61fb      	str	r3, [r7, #28]
 800c772:	e012      	b.n	800c79a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c774:	68ba      	ldr	r2, [r7, #8]
 800c776:	69fb      	ldr	r3, [r7, #28]
 800c778:	4413      	add	r3, r2
 800c77a:	7819      	ldrb	r1, [r3, #0]
 800c77c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c77e:	69fb      	ldr	r3, [r7, #28]
 800c780:	4413      	add	r3, r2
 800c782:	3334      	adds	r3, #52	; 0x34
 800c784:	460a      	mov	r2, r1
 800c786:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c788:	68ba      	ldr	r2, [r7, #8]
 800c78a:	69fb      	ldr	r3, [r7, #28]
 800c78c:	4413      	add	r3, r2
 800c78e:	781b      	ldrb	r3, [r3, #0]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d006      	beq.n	800c7a2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c794:	69fb      	ldr	r3, [r7, #28]
 800c796:	3301      	adds	r3, #1
 800c798:	61fb      	str	r3, [r7, #28]
 800c79a:	69fb      	ldr	r3, [r7, #28]
 800c79c:	2b0f      	cmp	r3, #15
 800c79e:	d9e9      	bls.n	800c774 <prvInitialiseNewTask+0x64>
 800c7a0:	e000      	b.n	800c7a4 <prvInitialiseNewTask+0x94>
			{
				break;
 800c7a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c7ac:	e003      	b.n	800c7b6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b8:	2b37      	cmp	r3, #55	; 0x37
 800c7ba:	d901      	bls.n	800c7c0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c7bc:	2337      	movs	r3, #55	; 0x37
 800c7be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7ca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d4:	3304      	adds	r3, #4
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f7ff f8b4 	bl	800b944 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7de:	3318      	adds	r3, #24
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f7ff f8af 	bl	800b944 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7fe:	2200      	movs	r2, #0
 800c800:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c806:	2200      	movs	r2, #0
 800c808:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c80e:	3354      	adds	r3, #84	; 0x54
 800c810:	2260      	movs	r2, #96	; 0x60
 800c812:	2100      	movs	r1, #0
 800c814:	4618      	mov	r0, r3
 800c816:	f003 f873 	bl	800f900 <memset>
 800c81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c81c:	4a0c      	ldr	r2, [pc, #48]	; (800c850 <prvInitialiseNewTask+0x140>)
 800c81e:	659a      	str	r2, [r3, #88]	; 0x58
 800c820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c822:	4a0c      	ldr	r2, [pc, #48]	; (800c854 <prvInitialiseNewTask+0x144>)
 800c824:	65da      	str	r2, [r3, #92]	; 0x5c
 800c826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c828:	4a0b      	ldr	r2, [pc, #44]	; (800c858 <prvInitialiseNewTask+0x148>)
 800c82a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c82c:	683a      	ldr	r2, [r7, #0]
 800c82e:	68f9      	ldr	r1, [r7, #12]
 800c830:	69b8      	ldr	r0, [r7, #24]
 800c832:	f001 f8f9 	bl	800da28 <pxPortInitialiseStack>
 800c836:	4602      	mov	r2, r0
 800c838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c83a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d002      	beq.n	800c848 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c846:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c848:	bf00      	nop
 800c84a:	3720      	adds	r7, #32
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}
 800c850:	08013610 	.word	0x08013610
 800c854:	08013630 	.word	0x08013630
 800c858:	080135f0 	.word	0x080135f0

0800c85c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b082      	sub	sp, #8
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c864:	f001 fa0e 	bl	800dc84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c868:	4b26      	ldr	r3, [pc, #152]	; (800c904 <prvAddNewTaskToReadyList+0xa8>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	3301      	adds	r3, #1
 800c86e:	4a25      	ldr	r2, [pc, #148]	; (800c904 <prvAddNewTaskToReadyList+0xa8>)
 800c870:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c872:	4b25      	ldr	r3, [pc, #148]	; (800c908 <prvAddNewTaskToReadyList+0xac>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d109      	bne.n	800c88e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c87a:	4a23      	ldr	r2, [pc, #140]	; (800c908 <prvAddNewTaskToReadyList+0xac>)
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c880:	4b20      	ldr	r3, [pc, #128]	; (800c904 <prvAddNewTaskToReadyList+0xa8>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	2b01      	cmp	r3, #1
 800c886:	d110      	bne.n	800c8aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c888:	f000 fbde 	bl	800d048 <prvInitialiseTaskLists>
 800c88c:	e00d      	b.n	800c8aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c88e:	4b1f      	ldr	r3, [pc, #124]	; (800c90c <prvAddNewTaskToReadyList+0xb0>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d109      	bne.n	800c8aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c896:	4b1c      	ldr	r3, [pc, #112]	; (800c908 <prvAddNewTaskToReadyList+0xac>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	d802      	bhi.n	800c8aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c8a4:	4a18      	ldr	r2, [pc, #96]	; (800c908 <prvAddNewTaskToReadyList+0xac>)
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c8aa:	4b19      	ldr	r3, [pc, #100]	; (800c910 <prvAddNewTaskToReadyList+0xb4>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	3301      	adds	r3, #1
 800c8b0:	4a17      	ldr	r2, [pc, #92]	; (800c910 <prvAddNewTaskToReadyList+0xb4>)
 800c8b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c8b4:	4b16      	ldr	r3, [pc, #88]	; (800c910 <prvAddNewTaskToReadyList+0xb4>)
 800c8b6:	681a      	ldr	r2, [r3, #0]
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8c0:	4b14      	ldr	r3, [pc, #80]	; (800c914 <prvAddNewTaskToReadyList+0xb8>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	d903      	bls.n	800c8d0 <prvAddNewTaskToReadyList+0x74>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8cc:	4a11      	ldr	r2, [pc, #68]	; (800c914 <prvAddNewTaskToReadyList+0xb8>)
 800c8ce:	6013      	str	r3, [r2, #0]
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8d4:	4613      	mov	r3, r2
 800c8d6:	009b      	lsls	r3, r3, #2
 800c8d8:	4413      	add	r3, r2
 800c8da:	009b      	lsls	r3, r3, #2
 800c8dc:	4a0e      	ldr	r2, [pc, #56]	; (800c918 <prvAddNewTaskToReadyList+0xbc>)
 800c8de:	441a      	add	r2, r3
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	3304      	adds	r3, #4
 800c8e4:	4619      	mov	r1, r3
 800c8e6:	4610      	mov	r0, r2
 800c8e8:	f7ff f839 	bl	800b95e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c8ec:	f001 f9fa 	bl	800dce4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c8f0:	4b06      	ldr	r3, [pc, #24]	; (800c90c <prvAddNewTaskToReadyList+0xb0>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d001      	beq.n	800c8fc <prvAddNewTaskToReadyList+0xa0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c8f8:	4b03      	ldr	r3, [pc, #12]	; (800c908 <prvAddNewTaskToReadyList+0xac>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c8fc:	bf00      	nop
 800c8fe:	3708      	adds	r7, #8
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}
 800c904:	20001ec8 	.word	0x20001ec8
 800c908:	200019f4 	.word	0x200019f4
 800c90c:	20001ed4 	.word	0x20001ed4
 800c910:	20001ee4 	.word	0x20001ee4
 800c914:	20001ed0 	.word	0x20001ed0
 800c918:	200019f8 	.word	0x200019f8

0800c91c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b084      	sub	sp, #16
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c924:	2300      	movs	r3, #0
 800c926:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d017      	beq.n	800c95e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c92e:	4b13      	ldr	r3, [pc, #76]	; (800c97c <vTaskDelay+0x60>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d00a      	beq.n	800c94c <vTaskDelay+0x30>
	__asm volatile
 800c936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c93a:	f383 8811 	msr	BASEPRI, r3
 800c93e:	f3bf 8f6f 	isb	sy
 800c942:	f3bf 8f4f 	dsb	sy
 800c946:	60bb      	str	r3, [r7, #8]
}
 800c948:	bf00      	nop
 800c94a:	e7fe      	b.n	800c94a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c94c:	f000 f88a 	bl	800ca64 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c950:	2100      	movs	r1, #0
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f000 fcc6 	bl	800d2e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c958:	f000 f892 	bl	800ca80 <xTaskResumeAll>
 800c95c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d107      	bne.n	800c974 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c964:	4b06      	ldr	r3, [pc, #24]	; (800c980 <vTaskDelay+0x64>)
 800c966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c96a:	601a      	str	r2, [r3, #0]
 800c96c:	f3bf 8f4f 	dsb	sy
 800c970:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c974:	bf00      	nop
 800c976:	3710      	adds	r7, #16
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}
 800c97c:	20001ef0 	.word	0x20001ef0
 800c980:	e000ed04 	.word	0xe000ed04

0800c984 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b08a      	sub	sp, #40	; 0x28
 800c988:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c98a:	2300      	movs	r3, #0
 800c98c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c98e:	2300      	movs	r3, #0
 800c990:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c992:	463a      	mov	r2, r7
 800c994:	1d39      	adds	r1, r7, #4
 800c996:	f107 0308 	add.w	r3, r7, #8
 800c99a:	4618      	mov	r0, r3
 800c99c:	f7fe ff7e 	bl	800b89c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c9a0:	6839      	ldr	r1, [r7, #0]
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	68ba      	ldr	r2, [r7, #8]
 800c9a6:	9202      	str	r2, [sp, #8]
 800c9a8:	9301      	str	r3, [sp, #4]
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	9300      	str	r3, [sp, #0]
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	460a      	mov	r2, r1
 800c9b2:	4924      	ldr	r1, [pc, #144]	; (800ca44 <vTaskStartScheduler+0xc0>)
 800c9b4:	4824      	ldr	r0, [pc, #144]	; (800ca48 <vTaskStartScheduler+0xc4>)
 800c9b6:	f7ff fe09 	bl	800c5cc <xTaskCreateStatic>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	4a23      	ldr	r2, [pc, #140]	; (800ca4c <vTaskStartScheduler+0xc8>)
 800c9be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c9c0:	4b22      	ldr	r3, [pc, #136]	; (800ca4c <vTaskStartScheduler+0xc8>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d002      	beq.n	800c9ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	617b      	str	r3, [r7, #20]
 800c9cc:	e001      	b.n	800c9d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c9d2:	697b      	ldr	r3, [r7, #20]
 800c9d4:	2b01      	cmp	r3, #1
 800c9d6:	d102      	bne.n	800c9de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c9d8:	f000 fcd8 	bl	800d38c <xTimerCreateTimerTask>
 800c9dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	2b01      	cmp	r3, #1
 800c9e2:	d11b      	bne.n	800ca1c <vTaskStartScheduler+0x98>
	__asm volatile
 800c9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9e8:	f383 8811 	msr	BASEPRI, r3
 800c9ec:	f3bf 8f6f 	isb	sy
 800c9f0:	f3bf 8f4f 	dsb	sy
 800c9f4:	613b      	str	r3, [r7, #16]
}
 800c9f6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c9f8:	4b15      	ldr	r3, [pc, #84]	; (800ca50 <vTaskStartScheduler+0xcc>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	3354      	adds	r3, #84	; 0x54
 800c9fe:	4a15      	ldr	r2, [pc, #84]	; (800ca54 <vTaskStartScheduler+0xd0>)
 800ca00:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ca02:	4b15      	ldr	r3, [pc, #84]	; (800ca58 <vTaskStartScheduler+0xd4>)
 800ca04:	f04f 32ff 	mov.w	r2, #4294967295
 800ca08:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ca0a:	4b14      	ldr	r3, [pc, #80]	; (800ca5c <vTaskStartScheduler+0xd8>)
 800ca0c:	2201      	movs	r2, #1
 800ca0e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ca10:	4b13      	ldr	r3, [pc, #76]	; (800ca60 <vTaskStartScheduler+0xdc>)
 800ca12:	2200      	movs	r2, #0
 800ca14:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ca16:	f001 f893 	bl	800db40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ca1a:	e00e      	b.n	800ca3a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ca1c:	697b      	ldr	r3, [r7, #20]
 800ca1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca22:	d10a      	bne.n	800ca3a <vTaskStartScheduler+0xb6>
	__asm volatile
 800ca24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca28:	f383 8811 	msr	BASEPRI, r3
 800ca2c:	f3bf 8f6f 	isb	sy
 800ca30:	f3bf 8f4f 	dsb	sy
 800ca34:	60fb      	str	r3, [r7, #12]
}
 800ca36:	bf00      	nop
 800ca38:	e7fe      	b.n	800ca38 <vTaskStartScheduler+0xb4>
}
 800ca3a:	bf00      	nop
 800ca3c:	3718      	adds	r7, #24
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}
 800ca42:	bf00      	nop
 800ca44:	08012a40 	.word	0x08012a40
 800ca48:	0800d025 	.word	0x0800d025
 800ca4c:	20001eec 	.word	0x20001eec
 800ca50:	200019f4 	.word	0x200019f4
 800ca54:	2000006c 	.word	0x2000006c
 800ca58:	20001ee8 	.word	0x20001ee8
 800ca5c:	20001ed4 	.word	0x20001ed4
 800ca60:	20001ecc 	.word	0x20001ecc

0800ca64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ca64:	b480      	push	{r7}
 800ca66:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ca68:	4b04      	ldr	r3, [pc, #16]	; (800ca7c <vTaskSuspendAll+0x18>)
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	3301      	adds	r3, #1
 800ca6e:	4a03      	ldr	r2, [pc, #12]	; (800ca7c <vTaskSuspendAll+0x18>)
 800ca70:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ca72:	bf00      	nop
 800ca74:	46bd      	mov	sp, r7
 800ca76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7a:	4770      	bx	lr
 800ca7c:	20001ef0 	.word	0x20001ef0

0800ca80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b084      	sub	sp, #16
 800ca84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ca86:	2300      	movs	r3, #0
 800ca88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ca8e:	4b3c      	ldr	r3, [pc, #240]	; (800cb80 <xTaskResumeAll+0x100>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d10a      	bne.n	800caac <xTaskResumeAll+0x2c>
	__asm volatile
 800ca96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca9a:	f383 8811 	msr	BASEPRI, r3
 800ca9e:	f3bf 8f6f 	isb	sy
 800caa2:	f3bf 8f4f 	dsb	sy
 800caa6:	603b      	str	r3, [r7, #0]
}
 800caa8:	bf00      	nop
 800caaa:	e7fe      	b.n	800caaa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800caac:	f001 f8ea 	bl	800dc84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cab0:	4b33      	ldr	r3, [pc, #204]	; (800cb80 <xTaskResumeAll+0x100>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	3b01      	subs	r3, #1
 800cab6:	4a32      	ldr	r2, [pc, #200]	; (800cb80 <xTaskResumeAll+0x100>)
 800cab8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800caba:	4b31      	ldr	r3, [pc, #196]	; (800cb80 <xTaskResumeAll+0x100>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d156      	bne.n	800cb70 <xTaskResumeAll+0xf0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cac2:	4b30      	ldr	r3, [pc, #192]	; (800cb84 <xTaskResumeAll+0x104>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d052      	beq.n	800cb70 <xTaskResumeAll+0xf0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800caca:	e02f      	b.n	800cb2c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cacc:	4b2e      	ldr	r3, [pc, #184]	; (800cb88 <xTaskResumeAll+0x108>)
 800cace:	68db      	ldr	r3, [r3, #12]
 800cad0:	68db      	ldr	r3, [r3, #12]
 800cad2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	3318      	adds	r3, #24
 800cad8:	4618      	mov	r0, r3
 800cada:	f7fe ff9d 	bl	800ba18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	3304      	adds	r3, #4
 800cae2:	4618      	mov	r0, r3
 800cae4:	f7fe ff98 	bl	800ba18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caec:	4b27      	ldr	r3, [pc, #156]	; (800cb8c <xTaskResumeAll+0x10c>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	429a      	cmp	r2, r3
 800caf2:	d903      	bls.n	800cafc <xTaskResumeAll+0x7c>
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caf8:	4a24      	ldr	r2, [pc, #144]	; (800cb8c <xTaskResumeAll+0x10c>)
 800cafa:	6013      	str	r3, [r2, #0]
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb00:	4613      	mov	r3, r2
 800cb02:	009b      	lsls	r3, r3, #2
 800cb04:	4413      	add	r3, r2
 800cb06:	009b      	lsls	r3, r3, #2
 800cb08:	4a21      	ldr	r2, [pc, #132]	; (800cb90 <xTaskResumeAll+0x110>)
 800cb0a:	441a      	add	r2, r3
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	3304      	adds	r3, #4
 800cb10:	4619      	mov	r1, r3
 800cb12:	4610      	mov	r0, r2
 800cb14:	f7fe ff23 	bl	800b95e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb1c:	4b1d      	ldr	r3, [pc, #116]	; (800cb94 <xTaskResumeAll+0x114>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d302      	bcc.n	800cb2c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cb26:	4b1c      	ldr	r3, [pc, #112]	; (800cb98 <xTaskResumeAll+0x118>)
 800cb28:	2201      	movs	r2, #1
 800cb2a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cb2c:	4b16      	ldr	r3, [pc, #88]	; (800cb88 <xTaskResumeAll+0x108>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d1cb      	bne.n	800cacc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d001      	beq.n	800cb3e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cb3a:	f000 fb27 	bl	800d18c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cb3e:	4b17      	ldr	r3, [pc, #92]	; (800cb9c <xTaskResumeAll+0x11c>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d010      	beq.n	800cb6c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cb4a:	f000 f839 	bl	800cbc0 <xTaskIncrementTick>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d002      	beq.n	800cb5a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800cb54:	4b10      	ldr	r3, [pc, #64]	; (800cb98 <xTaskResumeAll+0x118>)
 800cb56:	2201      	movs	r2, #1
 800cb58:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cb5a:	68bb      	ldr	r3, [r7, #8]
 800cb5c:	3b01      	subs	r3, #1
 800cb5e:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cb60:	68bb      	ldr	r3, [r7, #8]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d1f1      	bne.n	800cb4a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800cb66:	4b0d      	ldr	r3, [pc, #52]	; (800cb9c <xTaskResumeAll+0x11c>)
 800cb68:	2200      	movs	r2, #0
 800cb6a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cb6c:	4b0a      	ldr	r3, [pc, #40]	; (800cb98 <xTaskResumeAll+0x118>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cb70:	f001 f8b8 	bl	800dce4 <vPortExitCritical>

	return xAlreadyYielded;
 800cb74:	687b      	ldr	r3, [r7, #4]
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3710      	adds	r7, #16
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}
 800cb7e:	bf00      	nop
 800cb80:	20001ef0 	.word	0x20001ef0
 800cb84:	20001ec8 	.word	0x20001ec8
 800cb88:	20001e88 	.word	0x20001e88
 800cb8c:	20001ed0 	.word	0x20001ed0
 800cb90:	200019f8 	.word	0x200019f8
 800cb94:	200019f4 	.word	0x200019f4
 800cb98:	20001edc 	.word	0x20001edc
 800cb9c:	20001ed8 	.word	0x20001ed8

0800cba0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cba0:	b480      	push	{r7}
 800cba2:	b083      	sub	sp, #12
 800cba4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cba6:	4b05      	ldr	r3, [pc, #20]	; (800cbbc <xTaskGetTickCount+0x1c>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cbac:	687b      	ldr	r3, [r7, #4]
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	370c      	adds	r7, #12
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb8:	4770      	bx	lr
 800cbba:	bf00      	nop
 800cbbc:	20001ecc 	.word	0x20001ecc

0800cbc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b086      	sub	sp, #24
 800cbc4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cbca:	4b3f      	ldr	r3, [pc, #252]	; (800ccc8 <xTaskIncrementTick+0x108>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d170      	bne.n	800ccb4 <xTaskIncrementTick+0xf4>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cbd2:	4b3e      	ldr	r3, [pc, #248]	; (800cccc <xTaskIncrementTick+0x10c>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	3301      	adds	r3, #1
 800cbd8:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cbda:	4a3c      	ldr	r2, [pc, #240]	; (800cccc <xTaskIncrementTick+0x10c>)
 800cbdc:	693b      	ldr	r3, [r7, #16]
 800cbde:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d120      	bne.n	800cc28 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800cbe6:	4b3a      	ldr	r3, [pc, #232]	; (800ccd0 <xTaskIncrementTick+0x110>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d00a      	beq.n	800cc06 <xTaskIncrementTick+0x46>
	__asm volatile
 800cbf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf4:	f383 8811 	msr	BASEPRI, r3
 800cbf8:	f3bf 8f6f 	isb	sy
 800cbfc:	f3bf 8f4f 	dsb	sy
 800cc00:	603b      	str	r3, [r7, #0]
}
 800cc02:	bf00      	nop
 800cc04:	e7fe      	b.n	800cc04 <xTaskIncrementTick+0x44>
 800cc06:	4b32      	ldr	r3, [pc, #200]	; (800ccd0 <xTaskIncrementTick+0x110>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	60fb      	str	r3, [r7, #12]
 800cc0c:	4b31      	ldr	r3, [pc, #196]	; (800ccd4 <xTaskIncrementTick+0x114>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	4a2f      	ldr	r2, [pc, #188]	; (800ccd0 <xTaskIncrementTick+0x110>)
 800cc12:	6013      	str	r3, [r2, #0]
 800cc14:	4a2f      	ldr	r2, [pc, #188]	; (800ccd4 <xTaskIncrementTick+0x114>)
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	6013      	str	r3, [r2, #0]
 800cc1a:	4b2f      	ldr	r3, [pc, #188]	; (800ccd8 <xTaskIncrementTick+0x118>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	3301      	adds	r3, #1
 800cc20:	4a2d      	ldr	r2, [pc, #180]	; (800ccd8 <xTaskIncrementTick+0x118>)
 800cc22:	6013      	str	r3, [r2, #0]
 800cc24:	f000 fab2 	bl	800d18c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cc28:	4b2c      	ldr	r3, [pc, #176]	; (800ccdc <xTaskIncrementTick+0x11c>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	693a      	ldr	r2, [r7, #16]
 800cc2e:	429a      	cmp	r2, r3
 800cc30:	d345      	bcc.n	800ccbe <xTaskIncrementTick+0xfe>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc32:	4b27      	ldr	r3, [pc, #156]	; (800ccd0 <xTaskIncrementTick+0x110>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d104      	bne.n	800cc46 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc3c:	4b27      	ldr	r3, [pc, #156]	; (800ccdc <xTaskIncrementTick+0x11c>)
 800cc3e:	f04f 32ff 	mov.w	r2, #4294967295
 800cc42:	601a      	str	r2, [r3, #0]
					break;
 800cc44:	e03b      	b.n	800ccbe <xTaskIncrementTick+0xfe>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc46:	4b22      	ldr	r3, [pc, #136]	; (800ccd0 <xTaskIncrementTick+0x110>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	68db      	ldr	r3, [r3, #12]
 800cc4c:	68db      	ldr	r3, [r3, #12]
 800cc4e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	685b      	ldr	r3, [r3, #4]
 800cc54:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cc56:	693a      	ldr	r2, [r7, #16]
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	429a      	cmp	r2, r3
 800cc5c:	d203      	bcs.n	800cc66 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cc5e:	4a1f      	ldr	r2, [pc, #124]	; (800ccdc <xTaskIncrementTick+0x11c>)
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cc64:	e02b      	b.n	800ccbe <xTaskIncrementTick+0xfe>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc66:	68bb      	ldr	r3, [r7, #8]
 800cc68:	3304      	adds	r3, #4
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f7fe fed4 	bl	800ba18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d004      	beq.n	800cc82 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	3318      	adds	r3, #24
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f7fe fecb 	bl	800ba18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cc82:	68bb      	ldr	r3, [r7, #8]
 800cc84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc86:	4b16      	ldr	r3, [pc, #88]	; (800cce0 <xTaskIncrementTick+0x120>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	429a      	cmp	r2, r3
 800cc8c:	d903      	bls.n	800cc96 <xTaskIncrementTick+0xd6>
 800cc8e:	68bb      	ldr	r3, [r7, #8]
 800cc90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc92:	4a13      	ldr	r2, [pc, #76]	; (800cce0 <xTaskIncrementTick+0x120>)
 800cc94:	6013      	str	r3, [r2, #0]
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc9a:	4613      	mov	r3, r2
 800cc9c:	009b      	lsls	r3, r3, #2
 800cc9e:	4413      	add	r3, r2
 800cca0:	009b      	lsls	r3, r3, #2
 800cca2:	4a10      	ldr	r2, [pc, #64]	; (800cce4 <xTaskIncrementTick+0x124>)
 800cca4:	441a      	add	r2, r3
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	3304      	adds	r3, #4
 800ccaa:	4619      	mov	r1, r3
 800ccac:	4610      	mov	r0, r2
 800ccae:	f7fe fe56 	bl	800b95e <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ccb2:	e7be      	b.n	800cc32 <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ccb4:	4b0c      	ldr	r3, [pc, #48]	; (800cce8 <xTaskIncrementTick+0x128>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	3301      	adds	r3, #1
 800ccba:	4a0b      	ldr	r2, [pc, #44]	; (800cce8 <xTaskIncrementTick+0x128>)
 800ccbc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ccbe:	697b      	ldr	r3, [r7, #20]
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3718      	adds	r7, #24
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}
 800ccc8:	20001ef0 	.word	0x20001ef0
 800cccc:	20001ecc 	.word	0x20001ecc
 800ccd0:	20001e80 	.word	0x20001e80
 800ccd4:	20001e84 	.word	0x20001e84
 800ccd8:	20001ee0 	.word	0x20001ee0
 800ccdc:	20001ee8 	.word	0x20001ee8
 800cce0:	20001ed0 	.word	0x20001ed0
 800cce4:	200019f8 	.word	0x200019f8
 800cce8:	20001ed8 	.word	0x20001ed8

0800ccec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ccec:	b480      	push	{r7}
 800ccee:	b085      	sub	sp, #20
 800ccf0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ccf2:	4b2a      	ldr	r3, [pc, #168]	; (800cd9c <vTaskSwitchContext+0xb0>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d003      	beq.n	800cd02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ccfa:	4b29      	ldr	r3, [pc, #164]	; (800cda0 <vTaskSwitchContext+0xb4>)
 800ccfc:	2201      	movs	r2, #1
 800ccfe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cd00:	e046      	b.n	800cd90 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800cd02:	4b27      	ldr	r3, [pc, #156]	; (800cda0 <vTaskSwitchContext+0xb4>)
 800cd04:	2200      	movs	r2, #0
 800cd06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd08:	4b26      	ldr	r3, [pc, #152]	; (800cda4 <vTaskSwitchContext+0xb8>)
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	60fb      	str	r3, [r7, #12]
 800cd0e:	e010      	b.n	800cd32 <vTaskSwitchContext+0x46>
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d10a      	bne.n	800cd2c <vTaskSwitchContext+0x40>
	__asm volatile
 800cd16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd1a:	f383 8811 	msr	BASEPRI, r3
 800cd1e:	f3bf 8f6f 	isb	sy
 800cd22:	f3bf 8f4f 	dsb	sy
 800cd26:	607b      	str	r3, [r7, #4]
}
 800cd28:	bf00      	nop
 800cd2a:	e7fe      	b.n	800cd2a <vTaskSwitchContext+0x3e>
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	3b01      	subs	r3, #1
 800cd30:	60fb      	str	r3, [r7, #12]
 800cd32:	491d      	ldr	r1, [pc, #116]	; (800cda8 <vTaskSwitchContext+0xbc>)
 800cd34:	68fa      	ldr	r2, [r7, #12]
 800cd36:	4613      	mov	r3, r2
 800cd38:	009b      	lsls	r3, r3, #2
 800cd3a:	4413      	add	r3, r2
 800cd3c:	009b      	lsls	r3, r3, #2
 800cd3e:	440b      	add	r3, r1
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d0e4      	beq.n	800cd10 <vTaskSwitchContext+0x24>
 800cd46:	68fa      	ldr	r2, [r7, #12]
 800cd48:	4613      	mov	r3, r2
 800cd4a:	009b      	lsls	r3, r3, #2
 800cd4c:	4413      	add	r3, r2
 800cd4e:	009b      	lsls	r3, r3, #2
 800cd50:	4a15      	ldr	r2, [pc, #84]	; (800cda8 <vTaskSwitchContext+0xbc>)
 800cd52:	4413      	add	r3, r2
 800cd54:	60bb      	str	r3, [r7, #8]
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	685b      	ldr	r3, [r3, #4]
 800cd5a:	685a      	ldr	r2, [r3, #4]
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	605a      	str	r2, [r3, #4]
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	685a      	ldr	r2, [r3, #4]
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	3308      	adds	r3, #8
 800cd68:	429a      	cmp	r2, r3
 800cd6a:	d104      	bne.n	800cd76 <vTaskSwitchContext+0x8a>
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	685b      	ldr	r3, [r3, #4]
 800cd70:	685a      	ldr	r2, [r3, #4]
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	605a      	str	r2, [r3, #4]
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	685b      	ldr	r3, [r3, #4]
 800cd7a:	68db      	ldr	r3, [r3, #12]
 800cd7c:	4a0b      	ldr	r2, [pc, #44]	; (800cdac <vTaskSwitchContext+0xc0>)
 800cd7e:	6013      	str	r3, [r2, #0]
 800cd80:	4a08      	ldr	r2, [pc, #32]	; (800cda4 <vTaskSwitchContext+0xb8>)
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cd86:	4b09      	ldr	r3, [pc, #36]	; (800cdac <vTaskSwitchContext+0xc0>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	3354      	adds	r3, #84	; 0x54
 800cd8c:	4a08      	ldr	r2, [pc, #32]	; (800cdb0 <vTaskSwitchContext+0xc4>)
 800cd8e:	6013      	str	r3, [r2, #0]
}
 800cd90:	bf00      	nop
 800cd92:	3714      	adds	r7, #20
 800cd94:	46bd      	mov	sp, r7
 800cd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9a:	4770      	bx	lr
 800cd9c:	20001ef0 	.word	0x20001ef0
 800cda0:	20001edc 	.word	0x20001edc
 800cda4:	20001ed0 	.word	0x20001ed0
 800cda8:	200019f8 	.word	0x200019f8
 800cdac:	200019f4 	.word	0x200019f4
 800cdb0:	2000006c 	.word	0x2000006c

0800cdb4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b084      	sub	sp, #16
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
 800cdbc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d10a      	bne.n	800cdda <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cdc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc8:	f383 8811 	msr	BASEPRI, r3
 800cdcc:	f3bf 8f6f 	isb	sy
 800cdd0:	f3bf 8f4f 	dsb	sy
 800cdd4:	60fb      	str	r3, [r7, #12]
}
 800cdd6:	bf00      	nop
 800cdd8:	e7fe      	b.n	800cdd8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cdda:	4b07      	ldr	r3, [pc, #28]	; (800cdf8 <vTaskPlaceOnEventList+0x44>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	3318      	adds	r3, #24
 800cde0:	4619      	mov	r1, r3
 800cde2:	6878      	ldr	r0, [r7, #4]
 800cde4:	f7fe fddf 	bl	800b9a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cde8:	2101      	movs	r1, #1
 800cdea:	6838      	ldr	r0, [r7, #0]
 800cdec:	f000 fa7a 	bl	800d2e4 <prvAddCurrentTaskToDelayedList>
}
 800cdf0:	bf00      	nop
 800cdf2:	3710      	adds	r7, #16
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bd80      	pop	{r7, pc}
 800cdf8:	200019f4 	.word	0x200019f4

0800cdfc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b086      	sub	sp, #24
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	60f8      	str	r0, [r7, #12]
 800ce04:	60b9      	str	r1, [r7, #8]
 800ce06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d10a      	bne.n	800ce24 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ce0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce12:	f383 8811 	msr	BASEPRI, r3
 800ce16:	f3bf 8f6f 	isb	sy
 800ce1a:	f3bf 8f4f 	dsb	sy
 800ce1e:	617b      	str	r3, [r7, #20]
}
 800ce20:	bf00      	nop
 800ce22:	e7fe      	b.n	800ce22 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ce24:	4b0a      	ldr	r3, [pc, #40]	; (800ce50 <vTaskPlaceOnEventListRestricted+0x54>)
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	3318      	adds	r3, #24
 800ce2a:	4619      	mov	r1, r3
 800ce2c:	68f8      	ldr	r0, [r7, #12]
 800ce2e:	f7fe fd96 	bl	800b95e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d002      	beq.n	800ce3e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ce38:	f04f 33ff 	mov.w	r3, #4294967295
 800ce3c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ce3e:	6879      	ldr	r1, [r7, #4]
 800ce40:	68b8      	ldr	r0, [r7, #8]
 800ce42:	f000 fa4f 	bl	800d2e4 <prvAddCurrentTaskToDelayedList>
	}
 800ce46:	bf00      	nop
 800ce48:	3718      	adds	r7, #24
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}
 800ce4e:	bf00      	nop
 800ce50:	200019f4 	.word	0x200019f4

0800ce54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b086      	sub	sp, #24
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	68db      	ldr	r3, [r3, #12]
 800ce60:	68db      	ldr	r3, [r3, #12]
 800ce62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ce64:	693b      	ldr	r3, [r7, #16]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d10a      	bne.n	800ce80 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ce6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce6e:	f383 8811 	msr	BASEPRI, r3
 800ce72:	f3bf 8f6f 	isb	sy
 800ce76:	f3bf 8f4f 	dsb	sy
 800ce7a:	60fb      	str	r3, [r7, #12]
}
 800ce7c:	bf00      	nop
 800ce7e:	e7fe      	b.n	800ce7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	3318      	adds	r3, #24
 800ce84:	4618      	mov	r0, r3
 800ce86:	f7fe fdc7 	bl	800ba18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce8a:	4b1e      	ldr	r3, [pc, #120]	; (800cf04 <xTaskRemoveFromEventList+0xb0>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d11d      	bne.n	800cece <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ce92:	693b      	ldr	r3, [r7, #16]
 800ce94:	3304      	adds	r3, #4
 800ce96:	4618      	mov	r0, r3
 800ce98:	f7fe fdbe 	bl	800ba18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ce9c:	693b      	ldr	r3, [r7, #16]
 800ce9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cea0:	4b19      	ldr	r3, [pc, #100]	; (800cf08 <xTaskRemoveFromEventList+0xb4>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	429a      	cmp	r2, r3
 800cea6:	d903      	bls.n	800ceb0 <xTaskRemoveFromEventList+0x5c>
 800cea8:	693b      	ldr	r3, [r7, #16]
 800ceaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceac:	4a16      	ldr	r2, [pc, #88]	; (800cf08 <xTaskRemoveFromEventList+0xb4>)
 800ceae:	6013      	str	r3, [r2, #0]
 800ceb0:	693b      	ldr	r3, [r7, #16]
 800ceb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceb4:	4613      	mov	r3, r2
 800ceb6:	009b      	lsls	r3, r3, #2
 800ceb8:	4413      	add	r3, r2
 800ceba:	009b      	lsls	r3, r3, #2
 800cebc:	4a13      	ldr	r2, [pc, #76]	; (800cf0c <xTaskRemoveFromEventList+0xb8>)
 800cebe:	441a      	add	r2, r3
 800cec0:	693b      	ldr	r3, [r7, #16]
 800cec2:	3304      	adds	r3, #4
 800cec4:	4619      	mov	r1, r3
 800cec6:	4610      	mov	r0, r2
 800cec8:	f7fe fd49 	bl	800b95e <vListInsertEnd>
 800cecc:	e005      	b.n	800ceda <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cece:	693b      	ldr	r3, [r7, #16]
 800ced0:	3318      	adds	r3, #24
 800ced2:	4619      	mov	r1, r3
 800ced4:	480e      	ldr	r0, [pc, #56]	; (800cf10 <xTaskRemoveFromEventList+0xbc>)
 800ced6:	f7fe fd42 	bl	800b95e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ceda:	693b      	ldr	r3, [r7, #16]
 800cedc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cede:	4b0d      	ldr	r3, [pc, #52]	; (800cf14 <xTaskRemoveFromEventList+0xc0>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cee4:	429a      	cmp	r2, r3
 800cee6:	d905      	bls.n	800cef4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cee8:	2301      	movs	r3, #1
 800ceea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ceec:	4b0a      	ldr	r3, [pc, #40]	; (800cf18 <xTaskRemoveFromEventList+0xc4>)
 800ceee:	2201      	movs	r2, #1
 800cef0:	601a      	str	r2, [r3, #0]
 800cef2:	e001      	b.n	800cef8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800cef4:	2300      	movs	r3, #0
 800cef6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cef8:	697b      	ldr	r3, [r7, #20]
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3718      	adds	r7, #24
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}
 800cf02:	bf00      	nop
 800cf04:	20001ef0 	.word	0x20001ef0
 800cf08:	20001ed0 	.word	0x20001ed0
 800cf0c:	200019f8 	.word	0x200019f8
 800cf10:	20001e88 	.word	0x20001e88
 800cf14:	200019f4 	.word	0x200019f4
 800cf18:	20001edc 	.word	0x20001edc

0800cf1c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	b083      	sub	sp, #12
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cf24:	4b06      	ldr	r3, [pc, #24]	; (800cf40 <vTaskInternalSetTimeOutState+0x24>)
 800cf26:	681a      	ldr	r2, [r3, #0]
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cf2c:	4b05      	ldr	r3, [pc, #20]	; (800cf44 <vTaskInternalSetTimeOutState+0x28>)
 800cf2e:	681a      	ldr	r2, [r3, #0]
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	605a      	str	r2, [r3, #4]
}
 800cf34:	bf00      	nop
 800cf36:	370c      	adds	r7, #12
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3e:	4770      	bx	lr
 800cf40:	20001ee0 	.word	0x20001ee0
 800cf44:	20001ecc 	.word	0x20001ecc

0800cf48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b088      	sub	sp, #32
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
 800cf50:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d10a      	bne.n	800cf6e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cf58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf5c:	f383 8811 	msr	BASEPRI, r3
 800cf60:	f3bf 8f6f 	isb	sy
 800cf64:	f3bf 8f4f 	dsb	sy
 800cf68:	613b      	str	r3, [r7, #16]
}
 800cf6a:	bf00      	nop
 800cf6c:	e7fe      	b.n	800cf6c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d10a      	bne.n	800cf8a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cf74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf78:	f383 8811 	msr	BASEPRI, r3
 800cf7c:	f3bf 8f6f 	isb	sy
 800cf80:	f3bf 8f4f 	dsb	sy
 800cf84:	60fb      	str	r3, [r7, #12]
}
 800cf86:	bf00      	nop
 800cf88:	e7fe      	b.n	800cf88 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cf8a:	f000 fe7b 	bl	800dc84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cf8e:	4b1d      	ldr	r3, [pc, #116]	; (800d004 <xTaskCheckForTimeOut+0xbc>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	685b      	ldr	r3, [r3, #4]
 800cf98:	69ba      	ldr	r2, [r7, #24]
 800cf9a:	1ad3      	subs	r3, r2, r3
 800cf9c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfa6:	d102      	bne.n	800cfae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	61fb      	str	r3, [r7, #28]
 800cfac:	e023      	b.n	800cff6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681a      	ldr	r2, [r3, #0]
 800cfb2:	4b15      	ldr	r3, [pc, #84]	; (800d008 <xTaskCheckForTimeOut+0xc0>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	429a      	cmp	r2, r3
 800cfb8:	d007      	beq.n	800cfca <xTaskCheckForTimeOut+0x82>
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	685b      	ldr	r3, [r3, #4]
 800cfbe:	69ba      	ldr	r2, [r7, #24]
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	d302      	bcc.n	800cfca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cfc4:	2301      	movs	r3, #1
 800cfc6:	61fb      	str	r3, [r7, #28]
 800cfc8:	e015      	b.n	800cff6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cfca:	683b      	ldr	r3, [r7, #0]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	697a      	ldr	r2, [r7, #20]
 800cfd0:	429a      	cmp	r2, r3
 800cfd2:	d20b      	bcs.n	800cfec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	681a      	ldr	r2, [r3, #0]
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	1ad2      	subs	r2, r2, r3
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cfe0:	6878      	ldr	r0, [r7, #4]
 800cfe2:	f7ff ff9b 	bl	800cf1c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	61fb      	str	r3, [r7, #28]
 800cfea:	e004      	b.n	800cff6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	2200      	movs	r2, #0
 800cff0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cff2:	2301      	movs	r3, #1
 800cff4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cff6:	f000 fe75 	bl	800dce4 <vPortExitCritical>

	return xReturn;
 800cffa:	69fb      	ldr	r3, [r7, #28]
}
 800cffc:	4618      	mov	r0, r3
 800cffe:	3720      	adds	r7, #32
 800d000:	46bd      	mov	sp, r7
 800d002:	bd80      	pop	{r7, pc}
 800d004:	20001ecc 	.word	0x20001ecc
 800d008:	20001ee0 	.word	0x20001ee0

0800d00c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d00c:	b480      	push	{r7}
 800d00e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d010:	4b03      	ldr	r3, [pc, #12]	; (800d020 <vTaskMissedYield+0x14>)
 800d012:	2201      	movs	r2, #1
 800d014:	601a      	str	r2, [r3, #0]
}
 800d016:	bf00      	nop
 800d018:	46bd      	mov	sp, r7
 800d01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01e:	4770      	bx	lr
 800d020:	20001edc 	.word	0x20001edc

0800d024 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b082      	sub	sp, #8
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d02c:	f000 f84c 	bl	800d0c8 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 800d030:	4b04      	ldr	r3, [pc, #16]	; (800d044 <prvIdleTask+0x20>)
 800d032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d036:	601a      	str	r2, [r3, #0]
 800d038:	f3bf 8f4f 	dsb	sy
 800d03c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d040:	e7f4      	b.n	800d02c <prvIdleTask+0x8>
 800d042:	bf00      	nop
 800d044:	e000ed04 	.word	0xe000ed04

0800d048 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b082      	sub	sp, #8
 800d04c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d04e:	2300      	movs	r3, #0
 800d050:	607b      	str	r3, [r7, #4]
 800d052:	e00c      	b.n	800d06e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d054:	687a      	ldr	r2, [r7, #4]
 800d056:	4613      	mov	r3, r2
 800d058:	009b      	lsls	r3, r3, #2
 800d05a:	4413      	add	r3, r2
 800d05c:	009b      	lsls	r3, r3, #2
 800d05e:	4a12      	ldr	r2, [pc, #72]	; (800d0a8 <prvInitialiseTaskLists+0x60>)
 800d060:	4413      	add	r3, r2
 800d062:	4618      	mov	r0, r3
 800d064:	f7fe fc4e 	bl	800b904 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	3301      	adds	r3, #1
 800d06c:	607b      	str	r3, [r7, #4]
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2b37      	cmp	r3, #55	; 0x37
 800d072:	d9ef      	bls.n	800d054 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d074:	480d      	ldr	r0, [pc, #52]	; (800d0ac <prvInitialiseTaskLists+0x64>)
 800d076:	f7fe fc45 	bl	800b904 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d07a:	480d      	ldr	r0, [pc, #52]	; (800d0b0 <prvInitialiseTaskLists+0x68>)
 800d07c:	f7fe fc42 	bl	800b904 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d080:	480c      	ldr	r0, [pc, #48]	; (800d0b4 <prvInitialiseTaskLists+0x6c>)
 800d082:	f7fe fc3f 	bl	800b904 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d086:	480c      	ldr	r0, [pc, #48]	; (800d0b8 <prvInitialiseTaskLists+0x70>)
 800d088:	f7fe fc3c 	bl	800b904 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d08c:	480b      	ldr	r0, [pc, #44]	; (800d0bc <prvInitialiseTaskLists+0x74>)
 800d08e:	f7fe fc39 	bl	800b904 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d092:	4b0b      	ldr	r3, [pc, #44]	; (800d0c0 <prvInitialiseTaskLists+0x78>)
 800d094:	4a05      	ldr	r2, [pc, #20]	; (800d0ac <prvInitialiseTaskLists+0x64>)
 800d096:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d098:	4b0a      	ldr	r3, [pc, #40]	; (800d0c4 <prvInitialiseTaskLists+0x7c>)
 800d09a:	4a05      	ldr	r2, [pc, #20]	; (800d0b0 <prvInitialiseTaskLists+0x68>)
 800d09c:	601a      	str	r2, [r3, #0]
}
 800d09e:	bf00      	nop
 800d0a0:	3708      	adds	r7, #8
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}
 800d0a6:	bf00      	nop
 800d0a8:	200019f8 	.word	0x200019f8
 800d0ac:	20001e58 	.word	0x20001e58
 800d0b0:	20001e6c 	.word	0x20001e6c
 800d0b4:	20001e88 	.word	0x20001e88
 800d0b8:	20001e9c 	.word	0x20001e9c
 800d0bc:	20001eb4 	.word	0x20001eb4
 800d0c0:	20001e80 	.word	0x20001e80
 800d0c4:	20001e84 	.word	0x20001e84

0800d0c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b082      	sub	sp, #8
 800d0cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d0ce:	e019      	b.n	800d104 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d0d0:	f000 fdd8 	bl	800dc84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0d4:	4b10      	ldr	r3, [pc, #64]	; (800d118 <prvCheckTasksWaitingTermination+0x50>)
 800d0d6:	68db      	ldr	r3, [r3, #12]
 800d0d8:	68db      	ldr	r3, [r3, #12]
 800d0da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	3304      	adds	r3, #4
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f7fe fc99 	bl	800ba18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d0e6:	4b0d      	ldr	r3, [pc, #52]	; (800d11c <prvCheckTasksWaitingTermination+0x54>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	3b01      	subs	r3, #1
 800d0ec:	4a0b      	ldr	r2, [pc, #44]	; (800d11c <prvCheckTasksWaitingTermination+0x54>)
 800d0ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d0f0:	4b0b      	ldr	r3, [pc, #44]	; (800d120 <prvCheckTasksWaitingTermination+0x58>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	3b01      	subs	r3, #1
 800d0f6:	4a0a      	ldr	r2, [pc, #40]	; (800d120 <prvCheckTasksWaitingTermination+0x58>)
 800d0f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d0fa:	f000 fdf3 	bl	800dce4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f000 f810 	bl	800d124 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d104:	4b06      	ldr	r3, [pc, #24]	; (800d120 <prvCheckTasksWaitingTermination+0x58>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d1e1      	bne.n	800d0d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d10c:	bf00      	nop
 800d10e:	bf00      	nop
 800d110:	3708      	adds	r7, #8
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}
 800d116:	bf00      	nop
 800d118:	20001e9c 	.word	0x20001e9c
 800d11c:	20001ec8 	.word	0x20001ec8
 800d120:	20001eb0 	.word	0x20001eb0

0800d124 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d124:	b580      	push	{r7, lr}
 800d126:	b084      	sub	sp, #16
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	3354      	adds	r3, #84	; 0x54
 800d130:	4618      	mov	r0, r3
 800d132:	f003 f9e9 	bl	8010508 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d108      	bne.n	800d152 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d144:	4618      	mov	r0, r3
 800d146:	f000 ff8b 	bl	800e060 <vPortFree>
				vPortFree( pxTCB );
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f000 ff88 	bl	800e060 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d150:	e018      	b.n	800d184 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d158:	2b01      	cmp	r3, #1
 800d15a:	d103      	bne.n	800d164 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d15c:	6878      	ldr	r0, [r7, #4]
 800d15e:	f000 ff7f 	bl	800e060 <vPortFree>
	}
 800d162:	e00f      	b.n	800d184 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d16a:	2b02      	cmp	r3, #2
 800d16c:	d00a      	beq.n	800d184 <prvDeleteTCB+0x60>
	__asm volatile
 800d16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d172:	f383 8811 	msr	BASEPRI, r3
 800d176:	f3bf 8f6f 	isb	sy
 800d17a:	f3bf 8f4f 	dsb	sy
 800d17e:	60fb      	str	r3, [r7, #12]
}
 800d180:	bf00      	nop
 800d182:	e7fe      	b.n	800d182 <prvDeleteTCB+0x5e>
	}
 800d184:	bf00      	nop
 800d186:	3710      	adds	r7, #16
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}

0800d18c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d18c:	b480      	push	{r7}
 800d18e:	b083      	sub	sp, #12
 800d190:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d192:	4b0c      	ldr	r3, [pc, #48]	; (800d1c4 <prvResetNextTaskUnblockTime+0x38>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d104      	bne.n	800d1a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d19c:	4b0a      	ldr	r3, [pc, #40]	; (800d1c8 <prvResetNextTaskUnblockTime+0x3c>)
 800d19e:	f04f 32ff 	mov.w	r2, #4294967295
 800d1a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d1a4:	e008      	b.n	800d1b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1a6:	4b07      	ldr	r3, [pc, #28]	; (800d1c4 <prvResetNextTaskUnblockTime+0x38>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	68db      	ldr	r3, [r3, #12]
 800d1ac:	68db      	ldr	r3, [r3, #12]
 800d1ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	685b      	ldr	r3, [r3, #4]
 800d1b4:	4a04      	ldr	r2, [pc, #16]	; (800d1c8 <prvResetNextTaskUnblockTime+0x3c>)
 800d1b6:	6013      	str	r3, [r2, #0]
}
 800d1b8:	bf00      	nop
 800d1ba:	370c      	adds	r7, #12
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c2:	4770      	bx	lr
 800d1c4:	20001e80 	.word	0x20001e80
 800d1c8:	20001ee8 	.word	0x20001ee8

0800d1cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d1cc:	b480      	push	{r7}
 800d1ce:	b083      	sub	sp, #12
 800d1d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d1d2:	4b0b      	ldr	r3, [pc, #44]	; (800d200 <xTaskGetSchedulerState+0x34>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d102      	bne.n	800d1e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d1da:	2301      	movs	r3, #1
 800d1dc:	607b      	str	r3, [r7, #4]
 800d1de:	e008      	b.n	800d1f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d1e0:	4b08      	ldr	r3, [pc, #32]	; (800d204 <xTaskGetSchedulerState+0x38>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d102      	bne.n	800d1ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d1e8:	2302      	movs	r3, #2
 800d1ea:	607b      	str	r3, [r7, #4]
 800d1ec:	e001      	b.n	800d1f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d1f2:	687b      	ldr	r3, [r7, #4]
	}
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	370c      	adds	r7, #12
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fe:	4770      	bx	lr
 800d200:	20001ed4 	.word	0x20001ed4
 800d204:	20001ef0 	.word	0x20001ef0

0800d208 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b086      	sub	sp, #24
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d214:	2300      	movs	r3, #0
 800d216:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d056      	beq.n	800d2cc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d21e:	4b2e      	ldr	r3, [pc, #184]	; (800d2d8 <xTaskPriorityDisinherit+0xd0>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	693a      	ldr	r2, [r7, #16]
 800d224:	429a      	cmp	r2, r3
 800d226:	d00a      	beq.n	800d23e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d22c:	f383 8811 	msr	BASEPRI, r3
 800d230:	f3bf 8f6f 	isb	sy
 800d234:	f3bf 8f4f 	dsb	sy
 800d238:	60fb      	str	r3, [r7, #12]
}
 800d23a:	bf00      	nop
 800d23c:	e7fe      	b.n	800d23c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d23e:	693b      	ldr	r3, [r7, #16]
 800d240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d242:	2b00      	cmp	r3, #0
 800d244:	d10a      	bne.n	800d25c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d24a:	f383 8811 	msr	BASEPRI, r3
 800d24e:	f3bf 8f6f 	isb	sy
 800d252:	f3bf 8f4f 	dsb	sy
 800d256:	60bb      	str	r3, [r7, #8]
}
 800d258:	bf00      	nop
 800d25a:	e7fe      	b.n	800d25a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d25c:	693b      	ldr	r3, [r7, #16]
 800d25e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d260:	1e5a      	subs	r2, r3, #1
 800d262:	693b      	ldr	r3, [r7, #16]
 800d264:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d266:	693b      	ldr	r3, [r7, #16]
 800d268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d26a:	693b      	ldr	r3, [r7, #16]
 800d26c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d26e:	429a      	cmp	r2, r3
 800d270:	d02c      	beq.n	800d2cc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d272:	693b      	ldr	r3, [r7, #16]
 800d274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d276:	2b00      	cmp	r3, #0
 800d278:	d128      	bne.n	800d2cc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d27a:	693b      	ldr	r3, [r7, #16]
 800d27c:	3304      	adds	r3, #4
 800d27e:	4618      	mov	r0, r3
 800d280:	f7fe fbca 	bl	800ba18 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d284:	693b      	ldr	r3, [r7, #16]
 800d286:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d288:	693b      	ldr	r3, [r7, #16]
 800d28a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d28c:	693b      	ldr	r3, [r7, #16]
 800d28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d290:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d294:	693b      	ldr	r3, [r7, #16]
 800d296:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d298:	693b      	ldr	r3, [r7, #16]
 800d29a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d29c:	4b0f      	ldr	r3, [pc, #60]	; (800d2dc <xTaskPriorityDisinherit+0xd4>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	429a      	cmp	r2, r3
 800d2a2:	d903      	bls.n	800d2ac <xTaskPriorityDisinherit+0xa4>
 800d2a4:	693b      	ldr	r3, [r7, #16]
 800d2a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2a8:	4a0c      	ldr	r2, [pc, #48]	; (800d2dc <xTaskPriorityDisinherit+0xd4>)
 800d2aa:	6013      	str	r3, [r2, #0]
 800d2ac:	693b      	ldr	r3, [r7, #16]
 800d2ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2b0:	4613      	mov	r3, r2
 800d2b2:	009b      	lsls	r3, r3, #2
 800d2b4:	4413      	add	r3, r2
 800d2b6:	009b      	lsls	r3, r3, #2
 800d2b8:	4a09      	ldr	r2, [pc, #36]	; (800d2e0 <xTaskPriorityDisinherit+0xd8>)
 800d2ba:	441a      	add	r2, r3
 800d2bc:	693b      	ldr	r3, [r7, #16]
 800d2be:	3304      	adds	r3, #4
 800d2c0:	4619      	mov	r1, r3
 800d2c2:	4610      	mov	r0, r2
 800d2c4:	f7fe fb4b 	bl	800b95e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d2c8:	2301      	movs	r3, #1
 800d2ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d2cc:	697b      	ldr	r3, [r7, #20]
	}
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	3718      	adds	r7, #24
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	bd80      	pop	{r7, pc}
 800d2d6:	bf00      	nop
 800d2d8:	200019f4 	.word	0x200019f4
 800d2dc:	20001ed0 	.word	0x20001ed0
 800d2e0:	200019f8 	.word	0x200019f8

0800d2e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b084      	sub	sp, #16
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
 800d2ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d2ee:	4b21      	ldr	r3, [pc, #132]	; (800d374 <prvAddCurrentTaskToDelayedList+0x90>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d2f4:	4b20      	ldr	r3, [pc, #128]	; (800d378 <prvAddCurrentTaskToDelayedList+0x94>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	3304      	adds	r3, #4
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	f7fe fb8c 	bl	800ba18 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d306:	d10a      	bne.n	800d31e <prvAddCurrentTaskToDelayedList+0x3a>
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d007      	beq.n	800d31e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d30e:	4b1a      	ldr	r3, [pc, #104]	; (800d378 <prvAddCurrentTaskToDelayedList+0x94>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	3304      	adds	r3, #4
 800d314:	4619      	mov	r1, r3
 800d316:	4819      	ldr	r0, [pc, #100]	; (800d37c <prvAddCurrentTaskToDelayedList+0x98>)
 800d318:	f7fe fb21 	bl	800b95e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d31c:	e026      	b.n	800d36c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d31e:	68fa      	ldr	r2, [r7, #12]
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	4413      	add	r3, r2
 800d324:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d326:	4b14      	ldr	r3, [pc, #80]	; (800d378 <prvAddCurrentTaskToDelayedList+0x94>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	68ba      	ldr	r2, [r7, #8]
 800d32c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d32e:	68ba      	ldr	r2, [r7, #8]
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	429a      	cmp	r2, r3
 800d334:	d209      	bcs.n	800d34a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d336:	4b12      	ldr	r3, [pc, #72]	; (800d380 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d338:	681a      	ldr	r2, [r3, #0]
 800d33a:	4b0f      	ldr	r3, [pc, #60]	; (800d378 <prvAddCurrentTaskToDelayedList+0x94>)
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	3304      	adds	r3, #4
 800d340:	4619      	mov	r1, r3
 800d342:	4610      	mov	r0, r2
 800d344:	f7fe fb2f 	bl	800b9a6 <vListInsert>
}
 800d348:	e010      	b.n	800d36c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d34a:	4b0e      	ldr	r3, [pc, #56]	; (800d384 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d34c:	681a      	ldr	r2, [r3, #0]
 800d34e:	4b0a      	ldr	r3, [pc, #40]	; (800d378 <prvAddCurrentTaskToDelayedList+0x94>)
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	3304      	adds	r3, #4
 800d354:	4619      	mov	r1, r3
 800d356:	4610      	mov	r0, r2
 800d358:	f7fe fb25 	bl	800b9a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d35c:	4b0a      	ldr	r3, [pc, #40]	; (800d388 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	68ba      	ldr	r2, [r7, #8]
 800d362:	429a      	cmp	r2, r3
 800d364:	d202      	bcs.n	800d36c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d366:	4a08      	ldr	r2, [pc, #32]	; (800d388 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d368:	68bb      	ldr	r3, [r7, #8]
 800d36a:	6013      	str	r3, [r2, #0]
}
 800d36c:	bf00      	nop
 800d36e:	3710      	adds	r7, #16
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}
 800d374:	20001ecc 	.word	0x20001ecc
 800d378:	200019f4 	.word	0x200019f4
 800d37c:	20001eb4 	.word	0x20001eb4
 800d380:	20001e84 	.word	0x20001e84
 800d384:	20001e80 	.word	0x20001e80
 800d388:	20001ee8 	.word	0x20001ee8

0800d38c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b08a      	sub	sp, #40	; 0x28
 800d390:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d392:	2300      	movs	r3, #0
 800d394:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d396:	f000 fb07 	bl	800d9a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d39a:	4b1c      	ldr	r3, [pc, #112]	; (800d40c <xTimerCreateTimerTask+0x80>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d021      	beq.n	800d3e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d3aa:	1d3a      	adds	r2, r7, #4
 800d3ac:	f107 0108 	add.w	r1, r7, #8
 800d3b0:	f107 030c 	add.w	r3, r7, #12
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f7fe fa8b 	bl	800b8d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d3ba:	6879      	ldr	r1, [r7, #4]
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	68fa      	ldr	r2, [r7, #12]
 800d3c0:	9202      	str	r2, [sp, #8]
 800d3c2:	9301      	str	r3, [sp, #4]
 800d3c4:	2302      	movs	r3, #2
 800d3c6:	9300      	str	r3, [sp, #0]
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	460a      	mov	r2, r1
 800d3cc:	4910      	ldr	r1, [pc, #64]	; (800d410 <xTimerCreateTimerTask+0x84>)
 800d3ce:	4811      	ldr	r0, [pc, #68]	; (800d414 <xTimerCreateTimerTask+0x88>)
 800d3d0:	f7ff f8fc 	bl	800c5cc <xTaskCreateStatic>
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	4a10      	ldr	r2, [pc, #64]	; (800d418 <xTimerCreateTimerTask+0x8c>)
 800d3d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d3da:	4b0f      	ldr	r3, [pc, #60]	; (800d418 <xTimerCreateTimerTask+0x8c>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d001      	beq.n	800d3e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d3e6:	697b      	ldr	r3, [r7, #20]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d10a      	bne.n	800d402 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3f0:	f383 8811 	msr	BASEPRI, r3
 800d3f4:	f3bf 8f6f 	isb	sy
 800d3f8:	f3bf 8f4f 	dsb	sy
 800d3fc:	613b      	str	r3, [r7, #16]
}
 800d3fe:	bf00      	nop
 800d400:	e7fe      	b.n	800d400 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d402:	697b      	ldr	r3, [r7, #20]
}
 800d404:	4618      	mov	r0, r3
 800d406:	3718      	adds	r7, #24
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}
 800d40c:	20001f24 	.word	0x20001f24
 800d410:	08012a48 	.word	0x08012a48
 800d414:	0800d551 	.word	0x0800d551
 800d418:	20001f28 	.word	0x20001f28

0800d41c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b08a      	sub	sp, #40	; 0x28
 800d420:	af00      	add	r7, sp, #0
 800d422:	60f8      	str	r0, [r7, #12]
 800d424:	60b9      	str	r1, [r7, #8]
 800d426:	607a      	str	r2, [r7, #4]
 800d428:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d42a:	2300      	movs	r3, #0
 800d42c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d10a      	bne.n	800d44a <xTimerGenericCommand+0x2e>
	__asm volatile
 800d434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d438:	f383 8811 	msr	BASEPRI, r3
 800d43c:	f3bf 8f6f 	isb	sy
 800d440:	f3bf 8f4f 	dsb	sy
 800d444:	623b      	str	r3, [r7, #32]
}
 800d446:	bf00      	nop
 800d448:	e7fe      	b.n	800d448 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d44a:	4b1a      	ldr	r3, [pc, #104]	; (800d4b4 <xTimerGenericCommand+0x98>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d02a      	beq.n	800d4a8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	2b05      	cmp	r3, #5
 800d462:	dc18      	bgt.n	800d496 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d464:	f7ff feb2 	bl	800d1cc <xTaskGetSchedulerState>
 800d468:	4603      	mov	r3, r0
 800d46a:	2b02      	cmp	r3, #2
 800d46c:	d109      	bne.n	800d482 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d46e:	4b11      	ldr	r3, [pc, #68]	; (800d4b4 <xTimerGenericCommand+0x98>)
 800d470:	6818      	ldr	r0, [r3, #0]
 800d472:	f107 0110 	add.w	r1, r7, #16
 800d476:	2300      	movs	r3, #0
 800d478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d47a:	f7fe fc27 	bl	800bccc <xQueueGenericSend>
 800d47e:	6278      	str	r0, [r7, #36]	; 0x24
 800d480:	e012      	b.n	800d4a8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d482:	4b0c      	ldr	r3, [pc, #48]	; (800d4b4 <xTimerGenericCommand+0x98>)
 800d484:	6818      	ldr	r0, [r3, #0]
 800d486:	f107 0110 	add.w	r1, r7, #16
 800d48a:	2300      	movs	r3, #0
 800d48c:	2200      	movs	r2, #0
 800d48e:	f7fe fc1d 	bl	800bccc <xQueueGenericSend>
 800d492:	6278      	str	r0, [r7, #36]	; 0x24
 800d494:	e008      	b.n	800d4a8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d496:	4b07      	ldr	r3, [pc, #28]	; (800d4b4 <xTimerGenericCommand+0x98>)
 800d498:	6818      	ldr	r0, [r3, #0]
 800d49a:	f107 0110 	add.w	r1, r7, #16
 800d49e:	2300      	movs	r3, #0
 800d4a0:	683a      	ldr	r2, [r7, #0]
 800d4a2:	f7fe fcf9 	bl	800be98 <xQueueGenericSendFromISR>
 800d4a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	3728      	adds	r7, #40	; 0x28
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}
 800d4b2:	bf00      	nop
 800d4b4:	20001f24 	.word	0x20001f24

0800d4b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b088      	sub	sp, #32
 800d4bc:	af02      	add	r7, sp, #8
 800d4be:	6078      	str	r0, [r7, #4]
 800d4c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4c2:	4b22      	ldr	r3, [pc, #136]	; (800d54c <prvProcessExpiredTimer+0x94>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	68db      	ldr	r3, [r3, #12]
 800d4c8:	68db      	ldr	r3, [r3, #12]
 800d4ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d4cc:	697b      	ldr	r3, [r7, #20]
 800d4ce:	3304      	adds	r3, #4
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f7fe faa1 	bl	800ba18 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d4dc:	f003 0304 	and.w	r3, r3, #4
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d022      	beq.n	800d52a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d4e4:	697b      	ldr	r3, [r7, #20]
 800d4e6:	699a      	ldr	r2, [r3, #24]
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	18d1      	adds	r1, r2, r3
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	683a      	ldr	r2, [r7, #0]
 800d4f0:	6978      	ldr	r0, [r7, #20]
 800d4f2:	f000 f8d1 	bl	800d698 <prvInsertTimerInActiveList>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d01f      	beq.n	800d53c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	9300      	str	r3, [sp, #0]
 800d500:	2300      	movs	r3, #0
 800d502:	687a      	ldr	r2, [r7, #4]
 800d504:	2100      	movs	r1, #0
 800d506:	6978      	ldr	r0, [r7, #20]
 800d508:	f7ff ff88 	bl	800d41c <xTimerGenericCommand>
 800d50c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d50e:	693b      	ldr	r3, [r7, #16]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d113      	bne.n	800d53c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d518:	f383 8811 	msr	BASEPRI, r3
 800d51c:	f3bf 8f6f 	isb	sy
 800d520:	f3bf 8f4f 	dsb	sy
 800d524:	60fb      	str	r3, [r7, #12]
}
 800d526:	bf00      	nop
 800d528:	e7fe      	b.n	800d528 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d530:	f023 0301 	bic.w	r3, r3, #1
 800d534:	b2da      	uxtb	r2, r3
 800d536:	697b      	ldr	r3, [r7, #20]
 800d538:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d53c:	697b      	ldr	r3, [r7, #20]
 800d53e:	6a1b      	ldr	r3, [r3, #32]
 800d540:	6978      	ldr	r0, [r7, #20]
 800d542:	4798      	blx	r3
}
 800d544:	bf00      	nop
 800d546:	3718      	adds	r7, #24
 800d548:	46bd      	mov	sp, r7
 800d54a:	bd80      	pop	{r7, pc}
 800d54c:	20001f1c 	.word	0x20001f1c

0800d550 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b084      	sub	sp, #16
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d558:	f107 0308 	add.w	r3, r7, #8
 800d55c:	4618      	mov	r0, r3
 800d55e:	f000 f857 	bl	800d610 <prvGetNextExpireTime>
 800d562:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d564:	68bb      	ldr	r3, [r7, #8]
 800d566:	4619      	mov	r1, r3
 800d568:	68f8      	ldr	r0, [r7, #12]
 800d56a:	f000 f803 	bl	800d574 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d56e:	f000 f8d5 	bl	800d71c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d572:	e7f1      	b.n	800d558 <prvTimerTask+0x8>

0800d574 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b084      	sub	sp, #16
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
 800d57c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d57e:	f7ff fa71 	bl	800ca64 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d582:	f107 0308 	add.w	r3, r7, #8
 800d586:	4618      	mov	r0, r3
 800d588:	f000 f866 	bl	800d658 <prvSampleTimeNow>
 800d58c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d130      	bne.n	800d5f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d10a      	bne.n	800d5b0 <prvProcessTimerOrBlockTask+0x3c>
 800d59a:	687a      	ldr	r2, [r7, #4]
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	429a      	cmp	r2, r3
 800d5a0:	d806      	bhi.n	800d5b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d5a2:	f7ff fa6d 	bl	800ca80 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d5a6:	68f9      	ldr	r1, [r7, #12]
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	f7ff ff85 	bl	800d4b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d5ae:	e024      	b.n	800d5fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d008      	beq.n	800d5c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d5b6:	4b13      	ldr	r3, [pc, #76]	; (800d604 <prvProcessTimerOrBlockTask+0x90>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d101      	bne.n	800d5c4 <prvProcessTimerOrBlockTask+0x50>
 800d5c0:	2301      	movs	r3, #1
 800d5c2:	e000      	b.n	800d5c6 <prvProcessTimerOrBlockTask+0x52>
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d5c8:	4b0f      	ldr	r3, [pc, #60]	; (800d608 <prvProcessTimerOrBlockTask+0x94>)
 800d5ca:	6818      	ldr	r0, [r3, #0]
 800d5cc:	687a      	ldr	r2, [r7, #4]
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	1ad3      	subs	r3, r2, r3
 800d5d2:	683a      	ldr	r2, [r7, #0]
 800d5d4:	4619      	mov	r1, r3
 800d5d6:	f7fe ffc5 	bl	800c564 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d5da:	f7ff fa51 	bl	800ca80 <xTaskResumeAll>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d10a      	bne.n	800d5fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d5e4:	4b09      	ldr	r3, [pc, #36]	; (800d60c <prvProcessTimerOrBlockTask+0x98>)
 800d5e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5ea:	601a      	str	r2, [r3, #0]
 800d5ec:	f3bf 8f4f 	dsb	sy
 800d5f0:	f3bf 8f6f 	isb	sy
}
 800d5f4:	e001      	b.n	800d5fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d5f6:	f7ff fa43 	bl	800ca80 <xTaskResumeAll>
}
 800d5fa:	bf00      	nop
 800d5fc:	3710      	adds	r7, #16
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
 800d602:	bf00      	nop
 800d604:	20001f20 	.word	0x20001f20
 800d608:	20001f24 	.word	0x20001f24
 800d60c:	e000ed04 	.word	0xe000ed04

0800d610 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d610:	b480      	push	{r7}
 800d612:	b085      	sub	sp, #20
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d618:	4b0e      	ldr	r3, [pc, #56]	; (800d654 <prvGetNextExpireTime+0x44>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d101      	bne.n	800d626 <prvGetNextExpireTime+0x16>
 800d622:	2201      	movs	r2, #1
 800d624:	e000      	b.n	800d628 <prvGetNextExpireTime+0x18>
 800d626:	2200      	movs	r2, #0
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d105      	bne.n	800d640 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d634:	4b07      	ldr	r3, [pc, #28]	; (800d654 <prvGetNextExpireTime+0x44>)
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	68db      	ldr	r3, [r3, #12]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	60fb      	str	r3, [r7, #12]
 800d63e:	e001      	b.n	800d644 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d640:	2300      	movs	r3, #0
 800d642:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d644:	68fb      	ldr	r3, [r7, #12]
}
 800d646:	4618      	mov	r0, r3
 800d648:	3714      	adds	r7, #20
 800d64a:	46bd      	mov	sp, r7
 800d64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d650:	4770      	bx	lr
 800d652:	bf00      	nop
 800d654:	20001f1c 	.word	0x20001f1c

0800d658 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b084      	sub	sp, #16
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d660:	f7ff fa9e 	bl	800cba0 <xTaskGetTickCount>
 800d664:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d666:	4b0b      	ldr	r3, [pc, #44]	; (800d694 <prvSampleTimeNow+0x3c>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	68fa      	ldr	r2, [r7, #12]
 800d66c:	429a      	cmp	r2, r3
 800d66e:	d205      	bcs.n	800d67c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d670:	f000 f936 	bl	800d8e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2201      	movs	r2, #1
 800d678:	601a      	str	r2, [r3, #0]
 800d67a:	e002      	b.n	800d682 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2200      	movs	r2, #0
 800d680:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d682:	4a04      	ldr	r2, [pc, #16]	; (800d694 <prvSampleTimeNow+0x3c>)
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d688:	68fb      	ldr	r3, [r7, #12]
}
 800d68a:	4618      	mov	r0, r3
 800d68c:	3710      	adds	r7, #16
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}
 800d692:	bf00      	nop
 800d694:	20001f2c 	.word	0x20001f2c

0800d698 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b086      	sub	sp, #24
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	60f8      	str	r0, [r7, #12]
 800d6a0:	60b9      	str	r1, [r7, #8]
 800d6a2:	607a      	str	r2, [r7, #4]
 800d6a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	68ba      	ldr	r2, [r7, #8]
 800d6ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	68fa      	ldr	r2, [r7, #12]
 800d6b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d6b6:	68ba      	ldr	r2, [r7, #8]
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	429a      	cmp	r2, r3
 800d6bc:	d812      	bhi.n	800d6e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d6be:	687a      	ldr	r2, [r7, #4]
 800d6c0:	683b      	ldr	r3, [r7, #0]
 800d6c2:	1ad2      	subs	r2, r2, r3
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	699b      	ldr	r3, [r3, #24]
 800d6c8:	429a      	cmp	r2, r3
 800d6ca:	d302      	bcc.n	800d6d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	617b      	str	r3, [r7, #20]
 800d6d0:	e01b      	b.n	800d70a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d6d2:	4b10      	ldr	r3, [pc, #64]	; (800d714 <prvInsertTimerInActiveList+0x7c>)
 800d6d4:	681a      	ldr	r2, [r3, #0]
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	3304      	adds	r3, #4
 800d6da:	4619      	mov	r1, r3
 800d6dc:	4610      	mov	r0, r2
 800d6de:	f7fe f962 	bl	800b9a6 <vListInsert>
 800d6e2:	e012      	b.n	800d70a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d6e4:	687a      	ldr	r2, [r7, #4]
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	429a      	cmp	r2, r3
 800d6ea:	d206      	bcs.n	800d6fa <prvInsertTimerInActiveList+0x62>
 800d6ec:	68ba      	ldr	r2, [r7, #8]
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	429a      	cmp	r2, r3
 800d6f2:	d302      	bcc.n	800d6fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d6f4:	2301      	movs	r3, #1
 800d6f6:	617b      	str	r3, [r7, #20]
 800d6f8:	e007      	b.n	800d70a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d6fa:	4b07      	ldr	r3, [pc, #28]	; (800d718 <prvInsertTimerInActiveList+0x80>)
 800d6fc:	681a      	ldr	r2, [r3, #0]
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	3304      	adds	r3, #4
 800d702:	4619      	mov	r1, r3
 800d704:	4610      	mov	r0, r2
 800d706:	f7fe f94e 	bl	800b9a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d70a:	697b      	ldr	r3, [r7, #20]
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	3718      	adds	r7, #24
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}
 800d714:	20001f20 	.word	0x20001f20
 800d718:	20001f1c 	.word	0x20001f1c

0800d71c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b08e      	sub	sp, #56	; 0x38
 800d720:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d722:	e0ca      	b.n	800d8ba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2b00      	cmp	r3, #0
 800d728:	da18      	bge.n	800d75c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d72a:	1d3b      	adds	r3, r7, #4
 800d72c:	3304      	adds	r3, #4
 800d72e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d732:	2b00      	cmp	r3, #0
 800d734:	d10a      	bne.n	800d74c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d73a:	f383 8811 	msr	BASEPRI, r3
 800d73e:	f3bf 8f6f 	isb	sy
 800d742:	f3bf 8f4f 	dsb	sy
 800d746:	61fb      	str	r3, [r7, #28]
}
 800d748:	bf00      	nop
 800d74a:	e7fe      	b.n	800d74a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d752:	6850      	ldr	r0, [r2, #4]
 800d754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d756:	6892      	ldr	r2, [r2, #8]
 800d758:	4611      	mov	r1, r2
 800d75a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	f2c0 80aa 	blt.w	800d8b8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d76a:	695b      	ldr	r3, [r3, #20]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d004      	beq.n	800d77a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d772:	3304      	adds	r3, #4
 800d774:	4618      	mov	r0, r3
 800d776:	f7fe f94f 	bl	800ba18 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d77a:	463b      	mov	r3, r7
 800d77c:	4618      	mov	r0, r3
 800d77e:	f7ff ff6b 	bl	800d658 <prvSampleTimeNow>
 800d782:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2b09      	cmp	r3, #9
 800d788:	f200 8097 	bhi.w	800d8ba <prvProcessReceivedCommands+0x19e>
 800d78c:	a201      	add	r2, pc, #4	; (adr r2, 800d794 <prvProcessReceivedCommands+0x78>)
 800d78e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d792:	bf00      	nop
 800d794:	0800d7bd 	.word	0x0800d7bd
 800d798:	0800d7bd 	.word	0x0800d7bd
 800d79c:	0800d7bd 	.word	0x0800d7bd
 800d7a0:	0800d831 	.word	0x0800d831
 800d7a4:	0800d845 	.word	0x0800d845
 800d7a8:	0800d88f 	.word	0x0800d88f
 800d7ac:	0800d7bd 	.word	0x0800d7bd
 800d7b0:	0800d7bd 	.word	0x0800d7bd
 800d7b4:	0800d831 	.word	0x0800d831
 800d7b8:	0800d845 	.word	0x0800d845
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d7c2:	f043 0301 	orr.w	r3, r3, #1
 800d7c6:	b2da      	uxtb	r2, r3
 800d7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d7ce:	68ba      	ldr	r2, [r7, #8]
 800d7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7d2:	699b      	ldr	r3, [r3, #24]
 800d7d4:	18d1      	adds	r1, r2, r3
 800d7d6:	68bb      	ldr	r3, [r7, #8]
 800d7d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d7dc:	f7ff ff5c 	bl	800d698 <prvInsertTimerInActiveList>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d069      	beq.n	800d8ba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7e8:	6a1b      	ldr	r3, [r3, #32]
 800d7ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d7ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d7f4:	f003 0304 	and.w	r3, r3, #4
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d05e      	beq.n	800d8ba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d7fc:	68ba      	ldr	r2, [r7, #8]
 800d7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d800:	699b      	ldr	r3, [r3, #24]
 800d802:	441a      	add	r2, r3
 800d804:	2300      	movs	r3, #0
 800d806:	9300      	str	r3, [sp, #0]
 800d808:	2300      	movs	r3, #0
 800d80a:	2100      	movs	r1, #0
 800d80c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d80e:	f7ff fe05 	bl	800d41c <xTimerGenericCommand>
 800d812:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d814:	6a3b      	ldr	r3, [r7, #32]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d14f      	bne.n	800d8ba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d81e:	f383 8811 	msr	BASEPRI, r3
 800d822:	f3bf 8f6f 	isb	sy
 800d826:	f3bf 8f4f 	dsb	sy
 800d82a:	61bb      	str	r3, [r7, #24]
}
 800d82c:	bf00      	nop
 800d82e:	e7fe      	b.n	800d82e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d832:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d836:	f023 0301 	bic.w	r3, r3, #1
 800d83a:	b2da      	uxtb	r2, r3
 800d83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d83e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d842:	e03a      	b.n	800d8ba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d846:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d84a:	f043 0301 	orr.w	r3, r3, #1
 800d84e:	b2da      	uxtb	r2, r3
 800d850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d852:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d856:	68ba      	ldr	r2, [r7, #8]
 800d858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d85a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d85e:	699b      	ldr	r3, [r3, #24]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d10a      	bne.n	800d87a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d868:	f383 8811 	msr	BASEPRI, r3
 800d86c:	f3bf 8f6f 	isb	sy
 800d870:	f3bf 8f4f 	dsb	sy
 800d874:	617b      	str	r3, [r7, #20]
}
 800d876:	bf00      	nop
 800d878:	e7fe      	b.n	800d878 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d87c:	699a      	ldr	r2, [r3, #24]
 800d87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d880:	18d1      	adds	r1, r2, r3
 800d882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d886:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d888:	f7ff ff06 	bl	800d698 <prvInsertTimerInActiveList>
					break;
 800d88c:	e015      	b.n	800d8ba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d890:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d894:	f003 0302 	and.w	r3, r3, #2
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d103      	bne.n	800d8a4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d89c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d89e:	f000 fbdf 	bl	800e060 <vPortFree>
 800d8a2:	e00a      	b.n	800d8ba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d8aa:	f023 0301 	bic.w	r3, r3, #1
 800d8ae:	b2da      	uxtb	r2, r3
 800d8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d8b6:	e000      	b.n	800d8ba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d8b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d8ba:	4b08      	ldr	r3, [pc, #32]	; (800d8dc <prvProcessReceivedCommands+0x1c0>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	1d39      	adds	r1, r7, #4
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	f7fe fb84 	bl	800bfd0 <xQueueReceive>
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	f47f af2a 	bne.w	800d724 <prvProcessReceivedCommands+0x8>
	}
}
 800d8d0:	bf00      	nop
 800d8d2:	bf00      	nop
 800d8d4:	3730      	adds	r7, #48	; 0x30
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}
 800d8da:	bf00      	nop
 800d8dc:	20001f24 	.word	0x20001f24

0800d8e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b088      	sub	sp, #32
 800d8e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d8e6:	e048      	b.n	800d97a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d8e8:	4b2d      	ldr	r3, [pc, #180]	; (800d9a0 <prvSwitchTimerLists+0xc0>)
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	68db      	ldr	r3, [r3, #12]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8f2:	4b2b      	ldr	r3, [pc, #172]	; (800d9a0 <prvSwitchTimerLists+0xc0>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	68db      	ldr	r3, [r3, #12]
 800d8f8:	68db      	ldr	r3, [r3, #12]
 800d8fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	3304      	adds	r3, #4
 800d900:	4618      	mov	r0, r3
 800d902:	f7fe f889 	bl	800ba18 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	6a1b      	ldr	r3, [r3, #32]
 800d90a:	68f8      	ldr	r0, [r7, #12]
 800d90c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d914:	f003 0304 	and.w	r3, r3, #4
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d02e      	beq.n	800d97a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	699b      	ldr	r3, [r3, #24]
 800d920:	693a      	ldr	r2, [r7, #16]
 800d922:	4413      	add	r3, r2
 800d924:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d926:	68ba      	ldr	r2, [r7, #8]
 800d928:	693b      	ldr	r3, [r7, #16]
 800d92a:	429a      	cmp	r2, r3
 800d92c:	d90e      	bls.n	800d94c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	68ba      	ldr	r2, [r7, #8]
 800d932:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	68fa      	ldr	r2, [r7, #12]
 800d938:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d93a:	4b19      	ldr	r3, [pc, #100]	; (800d9a0 <prvSwitchTimerLists+0xc0>)
 800d93c:	681a      	ldr	r2, [r3, #0]
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	3304      	adds	r3, #4
 800d942:	4619      	mov	r1, r3
 800d944:	4610      	mov	r0, r2
 800d946:	f7fe f82e 	bl	800b9a6 <vListInsert>
 800d94a:	e016      	b.n	800d97a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d94c:	2300      	movs	r3, #0
 800d94e:	9300      	str	r3, [sp, #0]
 800d950:	2300      	movs	r3, #0
 800d952:	693a      	ldr	r2, [r7, #16]
 800d954:	2100      	movs	r1, #0
 800d956:	68f8      	ldr	r0, [r7, #12]
 800d958:	f7ff fd60 	bl	800d41c <xTimerGenericCommand>
 800d95c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d10a      	bne.n	800d97a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d968:	f383 8811 	msr	BASEPRI, r3
 800d96c:	f3bf 8f6f 	isb	sy
 800d970:	f3bf 8f4f 	dsb	sy
 800d974:	603b      	str	r3, [r7, #0]
}
 800d976:	bf00      	nop
 800d978:	e7fe      	b.n	800d978 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d97a:	4b09      	ldr	r3, [pc, #36]	; (800d9a0 <prvSwitchTimerLists+0xc0>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d1b1      	bne.n	800d8e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d984:	4b06      	ldr	r3, [pc, #24]	; (800d9a0 <prvSwitchTimerLists+0xc0>)
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d98a:	4b06      	ldr	r3, [pc, #24]	; (800d9a4 <prvSwitchTimerLists+0xc4>)
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	4a04      	ldr	r2, [pc, #16]	; (800d9a0 <prvSwitchTimerLists+0xc0>)
 800d990:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d992:	4a04      	ldr	r2, [pc, #16]	; (800d9a4 <prvSwitchTimerLists+0xc4>)
 800d994:	697b      	ldr	r3, [r7, #20]
 800d996:	6013      	str	r3, [r2, #0]
}
 800d998:	bf00      	nop
 800d99a:	3718      	adds	r7, #24
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}
 800d9a0:	20001f1c 	.word	0x20001f1c
 800d9a4:	20001f20 	.word	0x20001f20

0800d9a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b082      	sub	sp, #8
 800d9ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d9ae:	f000 f969 	bl	800dc84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d9b2:	4b15      	ldr	r3, [pc, #84]	; (800da08 <prvCheckForValidListAndQueue+0x60>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d120      	bne.n	800d9fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d9ba:	4814      	ldr	r0, [pc, #80]	; (800da0c <prvCheckForValidListAndQueue+0x64>)
 800d9bc:	f7fd ffa2 	bl	800b904 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d9c0:	4813      	ldr	r0, [pc, #76]	; (800da10 <prvCheckForValidListAndQueue+0x68>)
 800d9c2:	f7fd ff9f 	bl	800b904 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d9c6:	4b13      	ldr	r3, [pc, #76]	; (800da14 <prvCheckForValidListAndQueue+0x6c>)
 800d9c8:	4a10      	ldr	r2, [pc, #64]	; (800da0c <prvCheckForValidListAndQueue+0x64>)
 800d9ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d9cc:	4b12      	ldr	r3, [pc, #72]	; (800da18 <prvCheckForValidListAndQueue+0x70>)
 800d9ce:	4a10      	ldr	r2, [pc, #64]	; (800da10 <prvCheckForValidListAndQueue+0x68>)
 800d9d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	9300      	str	r3, [sp, #0]
 800d9d6:	4b11      	ldr	r3, [pc, #68]	; (800da1c <prvCheckForValidListAndQueue+0x74>)
 800d9d8:	4a11      	ldr	r2, [pc, #68]	; (800da20 <prvCheckForValidListAndQueue+0x78>)
 800d9da:	2110      	movs	r1, #16
 800d9dc:	200a      	movs	r0, #10
 800d9de:	f7fe f8a0 	bl	800bb22 <xQueueGenericCreateStatic>
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	4a08      	ldr	r2, [pc, #32]	; (800da08 <prvCheckForValidListAndQueue+0x60>)
 800d9e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d9e8:	4b07      	ldr	r3, [pc, #28]	; (800da08 <prvCheckForValidListAndQueue+0x60>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d005      	beq.n	800d9fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d9f0:	4b05      	ldr	r3, [pc, #20]	; (800da08 <prvCheckForValidListAndQueue+0x60>)
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	490b      	ldr	r1, [pc, #44]	; (800da24 <prvCheckForValidListAndQueue+0x7c>)
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f7fe fd8a 	bl	800c510 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d9fc:	f000 f972 	bl	800dce4 <vPortExitCritical>
}
 800da00:	bf00      	nop
 800da02:	46bd      	mov	sp, r7
 800da04:	bd80      	pop	{r7, pc}
 800da06:	bf00      	nop
 800da08:	20001f24 	.word	0x20001f24
 800da0c:	20001ef4 	.word	0x20001ef4
 800da10:	20001f08 	.word	0x20001f08
 800da14:	20001f1c 	.word	0x20001f1c
 800da18:	20001f20 	.word	0x20001f20
 800da1c:	20001fd0 	.word	0x20001fd0
 800da20:	20001f30 	.word	0x20001f30
 800da24:	08012a50 	.word	0x08012a50

0800da28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800da28:	b480      	push	{r7}
 800da2a:	b085      	sub	sp, #20
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	60f8      	str	r0, [r7, #12]
 800da30:	60b9      	str	r1, [r7, #8]
 800da32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	3b04      	subs	r3, #4
 800da38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800da40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	3b04      	subs	r3, #4
 800da46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800da48:	68bb      	ldr	r3, [r7, #8]
 800da4a:	f023 0201 	bic.w	r2, r3, #1
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	3b04      	subs	r3, #4
 800da56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800da58:	4a0c      	ldr	r2, [pc, #48]	; (800da8c <pxPortInitialiseStack+0x64>)
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	3b14      	subs	r3, #20
 800da62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800da64:	687a      	ldr	r2, [r7, #4]
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	3b04      	subs	r3, #4
 800da6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	f06f 0202 	mvn.w	r2, #2
 800da76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	3b20      	subs	r3, #32
 800da7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800da7e:	68fb      	ldr	r3, [r7, #12]
}
 800da80:	4618      	mov	r0, r3
 800da82:	3714      	adds	r7, #20
 800da84:	46bd      	mov	sp, r7
 800da86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8a:	4770      	bx	lr
 800da8c:	0800da91 	.word	0x0800da91

0800da90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800da90:	b480      	push	{r7}
 800da92:	b085      	sub	sp, #20
 800da94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800da96:	2300      	movs	r3, #0
 800da98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800da9a:	4b12      	ldr	r3, [pc, #72]	; (800dae4 <prvTaskExitError+0x54>)
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daa2:	d00a      	beq.n	800daba <prvTaskExitError+0x2a>
	__asm volatile
 800daa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daa8:	f383 8811 	msr	BASEPRI, r3
 800daac:	f3bf 8f6f 	isb	sy
 800dab0:	f3bf 8f4f 	dsb	sy
 800dab4:	60fb      	str	r3, [r7, #12]
}
 800dab6:	bf00      	nop
 800dab8:	e7fe      	b.n	800dab8 <prvTaskExitError+0x28>
	__asm volatile
 800daba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dabe:	f383 8811 	msr	BASEPRI, r3
 800dac2:	f3bf 8f6f 	isb	sy
 800dac6:	f3bf 8f4f 	dsb	sy
 800daca:	60bb      	str	r3, [r7, #8]
}
 800dacc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dace:	bf00      	nop
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d0fc      	beq.n	800dad0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dad6:	bf00      	nop
 800dad8:	bf00      	nop
 800dada:	3714      	adds	r7, #20
 800dadc:	46bd      	mov	sp, r7
 800dade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae2:	4770      	bx	lr
 800dae4:	20000068 	.word	0x20000068
	...

0800daf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800daf0:	4b07      	ldr	r3, [pc, #28]	; (800db10 <pxCurrentTCBConst2>)
 800daf2:	6819      	ldr	r1, [r3, #0]
 800daf4:	6808      	ldr	r0, [r1, #0]
 800daf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dafa:	f380 8809 	msr	PSP, r0
 800dafe:	f3bf 8f6f 	isb	sy
 800db02:	f04f 0000 	mov.w	r0, #0
 800db06:	f380 8811 	msr	BASEPRI, r0
 800db0a:	4770      	bx	lr
 800db0c:	f3af 8000 	nop.w

0800db10 <pxCurrentTCBConst2>:
 800db10:	200019f4 	.word	0x200019f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800db14:	bf00      	nop
 800db16:	bf00      	nop

0800db18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800db18:	4808      	ldr	r0, [pc, #32]	; (800db3c <prvPortStartFirstTask+0x24>)
 800db1a:	6800      	ldr	r0, [r0, #0]
 800db1c:	6800      	ldr	r0, [r0, #0]
 800db1e:	f380 8808 	msr	MSP, r0
 800db22:	f04f 0000 	mov.w	r0, #0
 800db26:	f380 8814 	msr	CONTROL, r0
 800db2a:	b662      	cpsie	i
 800db2c:	b661      	cpsie	f
 800db2e:	f3bf 8f4f 	dsb	sy
 800db32:	f3bf 8f6f 	isb	sy
 800db36:	df00      	svc	0
 800db38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800db3a:	bf00      	nop
 800db3c:	e000ed08 	.word	0xe000ed08

0800db40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b086      	sub	sp, #24
 800db44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800db46:	4b46      	ldr	r3, [pc, #280]	; (800dc60 <xPortStartScheduler+0x120>)
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	4a46      	ldr	r2, [pc, #280]	; (800dc64 <xPortStartScheduler+0x124>)
 800db4c:	4293      	cmp	r3, r2
 800db4e:	d10a      	bne.n	800db66 <xPortStartScheduler+0x26>
	__asm volatile
 800db50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db54:	f383 8811 	msr	BASEPRI, r3
 800db58:	f3bf 8f6f 	isb	sy
 800db5c:	f3bf 8f4f 	dsb	sy
 800db60:	613b      	str	r3, [r7, #16]
}
 800db62:	bf00      	nop
 800db64:	e7fe      	b.n	800db64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800db66:	4b3e      	ldr	r3, [pc, #248]	; (800dc60 <xPortStartScheduler+0x120>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	4a3f      	ldr	r2, [pc, #252]	; (800dc68 <xPortStartScheduler+0x128>)
 800db6c:	4293      	cmp	r3, r2
 800db6e:	d10a      	bne.n	800db86 <xPortStartScheduler+0x46>
	__asm volatile
 800db70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db74:	f383 8811 	msr	BASEPRI, r3
 800db78:	f3bf 8f6f 	isb	sy
 800db7c:	f3bf 8f4f 	dsb	sy
 800db80:	60fb      	str	r3, [r7, #12]
}
 800db82:	bf00      	nop
 800db84:	e7fe      	b.n	800db84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800db86:	4b39      	ldr	r3, [pc, #228]	; (800dc6c <xPortStartScheduler+0x12c>)
 800db88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800db8a:	697b      	ldr	r3, [r7, #20]
 800db8c:	781b      	ldrb	r3, [r3, #0]
 800db8e:	b2db      	uxtb	r3, r3
 800db90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800db92:	697b      	ldr	r3, [r7, #20]
 800db94:	22ff      	movs	r2, #255	; 0xff
 800db96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800db98:	697b      	ldr	r3, [r7, #20]
 800db9a:	781b      	ldrb	r3, [r3, #0]
 800db9c:	b2db      	uxtb	r3, r3
 800db9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dba0:	78fb      	ldrb	r3, [r7, #3]
 800dba2:	b2db      	uxtb	r3, r3
 800dba4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dba8:	b2da      	uxtb	r2, r3
 800dbaa:	4b31      	ldr	r3, [pc, #196]	; (800dc70 <xPortStartScheduler+0x130>)
 800dbac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dbae:	4b31      	ldr	r3, [pc, #196]	; (800dc74 <xPortStartScheduler+0x134>)
 800dbb0:	2207      	movs	r2, #7
 800dbb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dbb4:	e009      	b.n	800dbca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800dbb6:	4b2f      	ldr	r3, [pc, #188]	; (800dc74 <xPortStartScheduler+0x134>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	3b01      	subs	r3, #1
 800dbbc:	4a2d      	ldr	r2, [pc, #180]	; (800dc74 <xPortStartScheduler+0x134>)
 800dbbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dbc0:	78fb      	ldrb	r3, [r7, #3]
 800dbc2:	b2db      	uxtb	r3, r3
 800dbc4:	005b      	lsls	r3, r3, #1
 800dbc6:	b2db      	uxtb	r3, r3
 800dbc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dbca:	78fb      	ldrb	r3, [r7, #3]
 800dbcc:	b2db      	uxtb	r3, r3
 800dbce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dbd2:	2b80      	cmp	r3, #128	; 0x80
 800dbd4:	d0ef      	beq.n	800dbb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dbd6:	4b27      	ldr	r3, [pc, #156]	; (800dc74 <xPortStartScheduler+0x134>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	f1c3 0307 	rsb	r3, r3, #7
 800dbde:	2b04      	cmp	r3, #4
 800dbe0:	d00a      	beq.n	800dbf8 <xPortStartScheduler+0xb8>
	__asm volatile
 800dbe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbe6:	f383 8811 	msr	BASEPRI, r3
 800dbea:	f3bf 8f6f 	isb	sy
 800dbee:	f3bf 8f4f 	dsb	sy
 800dbf2:	60bb      	str	r3, [r7, #8]
}
 800dbf4:	bf00      	nop
 800dbf6:	e7fe      	b.n	800dbf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dbf8:	4b1e      	ldr	r3, [pc, #120]	; (800dc74 <xPortStartScheduler+0x134>)
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	021b      	lsls	r3, r3, #8
 800dbfe:	4a1d      	ldr	r2, [pc, #116]	; (800dc74 <xPortStartScheduler+0x134>)
 800dc00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dc02:	4b1c      	ldr	r3, [pc, #112]	; (800dc74 <xPortStartScheduler+0x134>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dc0a:	4a1a      	ldr	r2, [pc, #104]	; (800dc74 <xPortStartScheduler+0x134>)
 800dc0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	b2da      	uxtb	r2, r3
 800dc12:	697b      	ldr	r3, [r7, #20]
 800dc14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dc16:	4b18      	ldr	r3, [pc, #96]	; (800dc78 <xPortStartScheduler+0x138>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	4a17      	ldr	r2, [pc, #92]	; (800dc78 <xPortStartScheduler+0x138>)
 800dc1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dc20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dc22:	4b15      	ldr	r3, [pc, #84]	; (800dc78 <xPortStartScheduler+0x138>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	4a14      	ldr	r2, [pc, #80]	; (800dc78 <xPortStartScheduler+0x138>)
 800dc28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800dc2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dc2e:	f000 f8dd 	bl	800ddec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dc32:	4b12      	ldr	r3, [pc, #72]	; (800dc7c <xPortStartScheduler+0x13c>)
 800dc34:	2200      	movs	r2, #0
 800dc36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dc38:	f000 f8fc 	bl	800de34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dc3c:	4b10      	ldr	r3, [pc, #64]	; (800dc80 <xPortStartScheduler+0x140>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	4a0f      	ldr	r2, [pc, #60]	; (800dc80 <xPortStartScheduler+0x140>)
 800dc42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800dc46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dc48:	f7ff ff66 	bl	800db18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dc4c:	f7ff f84e 	bl	800ccec <vTaskSwitchContext>
	prvTaskExitError();
 800dc50:	f7ff ff1e 	bl	800da90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dc54:	2300      	movs	r3, #0
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3718      	adds	r7, #24
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}
 800dc5e:	bf00      	nop
 800dc60:	e000ed00 	.word	0xe000ed00
 800dc64:	410fc271 	.word	0x410fc271
 800dc68:	410fc270 	.word	0x410fc270
 800dc6c:	e000e400 	.word	0xe000e400
 800dc70:	20002020 	.word	0x20002020
 800dc74:	20002024 	.word	0x20002024
 800dc78:	e000ed20 	.word	0xe000ed20
 800dc7c:	20000068 	.word	0x20000068
 800dc80:	e000ef34 	.word	0xe000ef34

0800dc84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dc84:	b480      	push	{r7}
 800dc86:	b083      	sub	sp, #12
 800dc88:	af00      	add	r7, sp, #0
	__asm volatile
 800dc8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc8e:	f383 8811 	msr	BASEPRI, r3
 800dc92:	f3bf 8f6f 	isb	sy
 800dc96:	f3bf 8f4f 	dsb	sy
 800dc9a:	607b      	str	r3, [r7, #4]
}
 800dc9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dc9e:	4b0f      	ldr	r3, [pc, #60]	; (800dcdc <vPortEnterCritical+0x58>)
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	3301      	adds	r3, #1
 800dca4:	4a0d      	ldr	r2, [pc, #52]	; (800dcdc <vPortEnterCritical+0x58>)
 800dca6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dca8:	4b0c      	ldr	r3, [pc, #48]	; (800dcdc <vPortEnterCritical+0x58>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	2b01      	cmp	r3, #1
 800dcae:	d10f      	bne.n	800dcd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dcb0:	4b0b      	ldr	r3, [pc, #44]	; (800dce0 <vPortEnterCritical+0x5c>)
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	b2db      	uxtb	r3, r3
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d00a      	beq.n	800dcd0 <vPortEnterCritical+0x4c>
	__asm volatile
 800dcba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcbe:	f383 8811 	msr	BASEPRI, r3
 800dcc2:	f3bf 8f6f 	isb	sy
 800dcc6:	f3bf 8f4f 	dsb	sy
 800dcca:	603b      	str	r3, [r7, #0]
}
 800dccc:	bf00      	nop
 800dcce:	e7fe      	b.n	800dcce <vPortEnterCritical+0x4a>
	}
}
 800dcd0:	bf00      	nop
 800dcd2:	370c      	adds	r7, #12
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcda:	4770      	bx	lr
 800dcdc:	20000068 	.word	0x20000068
 800dce0:	e000ed04 	.word	0xe000ed04

0800dce4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dce4:	b480      	push	{r7}
 800dce6:	b083      	sub	sp, #12
 800dce8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dcea:	4b12      	ldr	r3, [pc, #72]	; (800dd34 <vPortExitCritical+0x50>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d10a      	bne.n	800dd08 <vPortExitCritical+0x24>
	__asm volatile
 800dcf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcf6:	f383 8811 	msr	BASEPRI, r3
 800dcfa:	f3bf 8f6f 	isb	sy
 800dcfe:	f3bf 8f4f 	dsb	sy
 800dd02:	607b      	str	r3, [r7, #4]
}
 800dd04:	bf00      	nop
 800dd06:	e7fe      	b.n	800dd06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dd08:	4b0a      	ldr	r3, [pc, #40]	; (800dd34 <vPortExitCritical+0x50>)
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	3b01      	subs	r3, #1
 800dd0e:	4a09      	ldr	r2, [pc, #36]	; (800dd34 <vPortExitCritical+0x50>)
 800dd10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dd12:	4b08      	ldr	r3, [pc, #32]	; (800dd34 <vPortExitCritical+0x50>)
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d105      	bne.n	800dd26 <vPortExitCritical+0x42>
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	f383 8811 	msr	BASEPRI, r3
}
 800dd24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dd26:	bf00      	nop
 800dd28:	370c      	adds	r7, #12
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd30:	4770      	bx	lr
 800dd32:	bf00      	nop
 800dd34:	20000068 	.word	0x20000068
	...

0800dd40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dd40:	f3ef 8009 	mrs	r0, PSP
 800dd44:	f3bf 8f6f 	isb	sy
 800dd48:	4b15      	ldr	r3, [pc, #84]	; (800dda0 <pxCurrentTCBConst>)
 800dd4a:	681a      	ldr	r2, [r3, #0]
 800dd4c:	f01e 0f10 	tst.w	lr, #16
 800dd50:	bf08      	it	eq
 800dd52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dd56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd5a:	6010      	str	r0, [r2, #0]
 800dd5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dd60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dd64:	f380 8811 	msr	BASEPRI, r0
 800dd68:	f3bf 8f4f 	dsb	sy
 800dd6c:	f3bf 8f6f 	isb	sy
 800dd70:	f7fe ffbc 	bl	800ccec <vTaskSwitchContext>
 800dd74:	f04f 0000 	mov.w	r0, #0
 800dd78:	f380 8811 	msr	BASEPRI, r0
 800dd7c:	bc09      	pop	{r0, r3}
 800dd7e:	6819      	ldr	r1, [r3, #0]
 800dd80:	6808      	ldr	r0, [r1, #0]
 800dd82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd86:	f01e 0f10 	tst.w	lr, #16
 800dd8a:	bf08      	it	eq
 800dd8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dd90:	f380 8809 	msr	PSP, r0
 800dd94:	f3bf 8f6f 	isb	sy
 800dd98:	4770      	bx	lr
 800dd9a:	bf00      	nop
 800dd9c:	f3af 8000 	nop.w

0800dda0 <pxCurrentTCBConst>:
 800dda0:	200019f4 	.word	0x200019f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dda4:	bf00      	nop
 800dda6:	bf00      	nop

0800dda8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b082      	sub	sp, #8
 800ddac:	af00      	add	r7, sp, #0
	__asm volatile
 800ddae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddb2:	f383 8811 	msr	BASEPRI, r3
 800ddb6:	f3bf 8f6f 	isb	sy
 800ddba:	f3bf 8f4f 	dsb	sy
 800ddbe:	607b      	str	r3, [r7, #4]
}
 800ddc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ddc2:	f7fe fefd 	bl	800cbc0 <xTaskIncrementTick>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d003      	beq.n	800ddd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ddcc:	4b06      	ldr	r3, [pc, #24]	; (800dde8 <xPortSysTickHandler+0x40>)
 800ddce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddd2:	601a      	str	r2, [r3, #0]
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	f383 8811 	msr	BASEPRI, r3
}
 800ddde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dde0:	bf00      	nop
 800dde2:	3708      	adds	r7, #8
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd80      	pop	{r7, pc}
 800dde8:	e000ed04 	.word	0xe000ed04

0800ddec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ddec:	b480      	push	{r7}
 800ddee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ddf0:	4b0b      	ldr	r3, [pc, #44]	; (800de20 <vPortSetupTimerInterrupt+0x34>)
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ddf6:	4b0b      	ldr	r3, [pc, #44]	; (800de24 <vPortSetupTimerInterrupt+0x38>)
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ddfc:	4b0a      	ldr	r3, [pc, #40]	; (800de28 <vPortSetupTimerInterrupt+0x3c>)
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	4a0a      	ldr	r2, [pc, #40]	; (800de2c <vPortSetupTimerInterrupt+0x40>)
 800de02:	fba2 2303 	umull	r2, r3, r2, r3
 800de06:	099b      	lsrs	r3, r3, #6
 800de08:	4a09      	ldr	r2, [pc, #36]	; (800de30 <vPortSetupTimerInterrupt+0x44>)
 800de0a:	3b01      	subs	r3, #1
 800de0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800de0e:	4b04      	ldr	r3, [pc, #16]	; (800de20 <vPortSetupTimerInterrupt+0x34>)
 800de10:	2207      	movs	r2, #7
 800de12:	601a      	str	r2, [r3, #0]
}
 800de14:	bf00      	nop
 800de16:	46bd      	mov	sp, r7
 800de18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1c:	4770      	bx	lr
 800de1e:	bf00      	nop
 800de20:	e000e010 	.word	0xe000e010
 800de24:	e000e018 	.word	0xe000e018
 800de28:	2000005c 	.word	0x2000005c
 800de2c:	10624dd3 	.word	0x10624dd3
 800de30:	e000e014 	.word	0xe000e014

0800de34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800de34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800de44 <vPortEnableVFP+0x10>
 800de38:	6801      	ldr	r1, [r0, #0]
 800de3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800de3e:	6001      	str	r1, [r0, #0]
 800de40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800de42:	bf00      	nop
 800de44:	e000ed88 	.word	0xe000ed88

0800de48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800de48:	b480      	push	{r7}
 800de4a:	b085      	sub	sp, #20
 800de4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800de4e:	f3ef 8305 	mrs	r3, IPSR
 800de52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	2b0f      	cmp	r3, #15
 800de58:	d914      	bls.n	800de84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800de5a:	4a17      	ldr	r2, [pc, #92]	; (800deb8 <vPortValidateInterruptPriority+0x70>)
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	4413      	add	r3, r2
 800de60:	781b      	ldrb	r3, [r3, #0]
 800de62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800de64:	4b15      	ldr	r3, [pc, #84]	; (800debc <vPortValidateInterruptPriority+0x74>)
 800de66:	781b      	ldrb	r3, [r3, #0]
 800de68:	7afa      	ldrb	r2, [r7, #11]
 800de6a:	429a      	cmp	r2, r3
 800de6c:	d20a      	bcs.n	800de84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800de6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de72:	f383 8811 	msr	BASEPRI, r3
 800de76:	f3bf 8f6f 	isb	sy
 800de7a:	f3bf 8f4f 	dsb	sy
 800de7e:	607b      	str	r3, [r7, #4]
}
 800de80:	bf00      	nop
 800de82:	e7fe      	b.n	800de82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800de84:	4b0e      	ldr	r3, [pc, #56]	; (800dec0 <vPortValidateInterruptPriority+0x78>)
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800de8c:	4b0d      	ldr	r3, [pc, #52]	; (800dec4 <vPortValidateInterruptPriority+0x7c>)
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	429a      	cmp	r2, r3
 800de92:	d90a      	bls.n	800deaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800de94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de98:	f383 8811 	msr	BASEPRI, r3
 800de9c:	f3bf 8f6f 	isb	sy
 800dea0:	f3bf 8f4f 	dsb	sy
 800dea4:	603b      	str	r3, [r7, #0]
}
 800dea6:	bf00      	nop
 800dea8:	e7fe      	b.n	800dea8 <vPortValidateInterruptPriority+0x60>
	}
 800deaa:	bf00      	nop
 800deac:	3714      	adds	r7, #20
 800deae:	46bd      	mov	sp, r7
 800deb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb4:	4770      	bx	lr
 800deb6:	bf00      	nop
 800deb8:	e000e3f0 	.word	0xe000e3f0
 800debc:	20002020 	.word	0x20002020
 800dec0:	e000ed0c 	.word	0xe000ed0c
 800dec4:	20002024 	.word	0x20002024

0800dec8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b08a      	sub	sp, #40	; 0x28
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ded0:	2300      	movs	r3, #0
 800ded2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ded4:	f7fe fdc6 	bl	800ca64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ded8:	4b5b      	ldr	r3, [pc, #364]	; (800e048 <pvPortMalloc+0x180>)
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d101      	bne.n	800dee4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dee0:	f000 f920 	bl	800e124 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dee4:	4b59      	ldr	r3, [pc, #356]	; (800e04c <pvPortMalloc+0x184>)
 800dee6:	681a      	ldr	r2, [r3, #0]
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	4013      	ands	r3, r2
 800deec:	2b00      	cmp	r3, #0
 800deee:	f040 8093 	bne.w	800e018 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d01d      	beq.n	800df34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800def8:	2208      	movs	r2, #8
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	4413      	add	r3, r2
 800defe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	f003 0307 	and.w	r3, r3, #7
 800df06:	2b00      	cmp	r3, #0
 800df08:	d014      	beq.n	800df34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	f023 0307 	bic.w	r3, r3, #7
 800df10:	3308      	adds	r3, #8
 800df12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	f003 0307 	and.w	r3, r3, #7
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d00a      	beq.n	800df34 <pvPortMalloc+0x6c>
	__asm volatile
 800df1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df22:	f383 8811 	msr	BASEPRI, r3
 800df26:	f3bf 8f6f 	isb	sy
 800df2a:	f3bf 8f4f 	dsb	sy
 800df2e:	617b      	str	r3, [r7, #20]
}
 800df30:	bf00      	nop
 800df32:	e7fe      	b.n	800df32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d06e      	beq.n	800e018 <pvPortMalloc+0x150>
 800df3a:	4b45      	ldr	r3, [pc, #276]	; (800e050 <pvPortMalloc+0x188>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	687a      	ldr	r2, [r7, #4]
 800df40:	429a      	cmp	r2, r3
 800df42:	d869      	bhi.n	800e018 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800df44:	4b43      	ldr	r3, [pc, #268]	; (800e054 <pvPortMalloc+0x18c>)
 800df46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800df48:	4b42      	ldr	r3, [pc, #264]	; (800e054 <pvPortMalloc+0x18c>)
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800df4e:	e004      	b.n	800df5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800df50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800df54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800df5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df5c:	685b      	ldr	r3, [r3, #4]
 800df5e:	687a      	ldr	r2, [r7, #4]
 800df60:	429a      	cmp	r2, r3
 800df62:	d903      	bls.n	800df6c <pvPortMalloc+0xa4>
 800df64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d1f1      	bne.n	800df50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800df6c:	4b36      	ldr	r3, [pc, #216]	; (800e048 <pvPortMalloc+0x180>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df72:	429a      	cmp	r2, r3
 800df74:	d050      	beq.n	800e018 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800df76:	6a3b      	ldr	r3, [r7, #32]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	2208      	movs	r2, #8
 800df7c:	4413      	add	r3, r2
 800df7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800df80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df82:	681a      	ldr	r2, [r3, #0]
 800df84:	6a3b      	ldr	r3, [r7, #32]
 800df86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800df88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df8a:	685a      	ldr	r2, [r3, #4]
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	1ad2      	subs	r2, r2, r3
 800df90:	2308      	movs	r3, #8
 800df92:	005b      	lsls	r3, r3, #1
 800df94:	429a      	cmp	r2, r3
 800df96:	d91f      	bls.n	800dfd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800df98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	4413      	add	r3, r2
 800df9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dfa0:	69bb      	ldr	r3, [r7, #24]
 800dfa2:	f003 0307 	and.w	r3, r3, #7
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d00a      	beq.n	800dfc0 <pvPortMalloc+0xf8>
	__asm volatile
 800dfaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfae:	f383 8811 	msr	BASEPRI, r3
 800dfb2:	f3bf 8f6f 	isb	sy
 800dfb6:	f3bf 8f4f 	dsb	sy
 800dfba:	613b      	str	r3, [r7, #16]
}
 800dfbc:	bf00      	nop
 800dfbe:	e7fe      	b.n	800dfbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dfc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc2:	685a      	ldr	r2, [r3, #4]
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	1ad2      	subs	r2, r2, r3
 800dfc8:	69bb      	ldr	r3, [r7, #24]
 800dfca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dfcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfce:	687a      	ldr	r2, [r7, #4]
 800dfd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dfd2:	69b8      	ldr	r0, [r7, #24]
 800dfd4:	f000 f908 	bl	800e1e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dfd8:	4b1d      	ldr	r3, [pc, #116]	; (800e050 <pvPortMalloc+0x188>)
 800dfda:	681a      	ldr	r2, [r3, #0]
 800dfdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfde:	685b      	ldr	r3, [r3, #4]
 800dfe0:	1ad3      	subs	r3, r2, r3
 800dfe2:	4a1b      	ldr	r2, [pc, #108]	; (800e050 <pvPortMalloc+0x188>)
 800dfe4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dfe6:	4b1a      	ldr	r3, [pc, #104]	; (800e050 <pvPortMalloc+0x188>)
 800dfe8:	681a      	ldr	r2, [r3, #0]
 800dfea:	4b1b      	ldr	r3, [pc, #108]	; (800e058 <pvPortMalloc+0x190>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	429a      	cmp	r2, r3
 800dff0:	d203      	bcs.n	800dffa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dff2:	4b17      	ldr	r3, [pc, #92]	; (800e050 <pvPortMalloc+0x188>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	4a18      	ldr	r2, [pc, #96]	; (800e058 <pvPortMalloc+0x190>)
 800dff8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dffc:	685a      	ldr	r2, [r3, #4]
 800dffe:	4b13      	ldr	r3, [pc, #76]	; (800e04c <pvPortMalloc+0x184>)
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	431a      	orrs	r2, r3
 800e004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e006:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e00a:	2200      	movs	r2, #0
 800e00c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e00e:	4b13      	ldr	r3, [pc, #76]	; (800e05c <pvPortMalloc+0x194>)
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	3301      	adds	r3, #1
 800e014:	4a11      	ldr	r2, [pc, #68]	; (800e05c <pvPortMalloc+0x194>)
 800e016:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e018:	f7fe fd32 	bl	800ca80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e01c:	69fb      	ldr	r3, [r7, #28]
 800e01e:	f003 0307 	and.w	r3, r3, #7
 800e022:	2b00      	cmp	r3, #0
 800e024:	d00a      	beq.n	800e03c <pvPortMalloc+0x174>
	__asm volatile
 800e026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e02a:	f383 8811 	msr	BASEPRI, r3
 800e02e:	f3bf 8f6f 	isb	sy
 800e032:	f3bf 8f4f 	dsb	sy
 800e036:	60fb      	str	r3, [r7, #12]
}
 800e038:	bf00      	nop
 800e03a:	e7fe      	b.n	800e03a <pvPortMalloc+0x172>
	return pvReturn;
 800e03c:	69fb      	ldr	r3, [r7, #28]
}
 800e03e:	4618      	mov	r0, r3
 800e040:	3728      	adds	r7, #40	; 0x28
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}
 800e046:	bf00      	nop
 800e048:	20005c30 	.word	0x20005c30
 800e04c:	20005c44 	.word	0x20005c44
 800e050:	20005c34 	.word	0x20005c34
 800e054:	20005c28 	.word	0x20005c28
 800e058:	20005c38 	.word	0x20005c38
 800e05c:	20005c3c 	.word	0x20005c3c

0800e060 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b086      	sub	sp, #24
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d04d      	beq.n	800e10e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e072:	2308      	movs	r3, #8
 800e074:	425b      	negs	r3, r3
 800e076:	697a      	ldr	r2, [r7, #20]
 800e078:	4413      	add	r3, r2
 800e07a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e07c:	697b      	ldr	r3, [r7, #20]
 800e07e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e080:	693b      	ldr	r3, [r7, #16]
 800e082:	685a      	ldr	r2, [r3, #4]
 800e084:	4b24      	ldr	r3, [pc, #144]	; (800e118 <vPortFree+0xb8>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	4013      	ands	r3, r2
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d10a      	bne.n	800e0a4 <vPortFree+0x44>
	__asm volatile
 800e08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e092:	f383 8811 	msr	BASEPRI, r3
 800e096:	f3bf 8f6f 	isb	sy
 800e09a:	f3bf 8f4f 	dsb	sy
 800e09e:	60fb      	str	r3, [r7, #12]
}
 800e0a0:	bf00      	nop
 800e0a2:	e7fe      	b.n	800e0a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e0a4:	693b      	ldr	r3, [r7, #16]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d00a      	beq.n	800e0c2 <vPortFree+0x62>
	__asm volatile
 800e0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0b0:	f383 8811 	msr	BASEPRI, r3
 800e0b4:	f3bf 8f6f 	isb	sy
 800e0b8:	f3bf 8f4f 	dsb	sy
 800e0bc:	60bb      	str	r3, [r7, #8]
}
 800e0be:	bf00      	nop
 800e0c0:	e7fe      	b.n	800e0c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e0c2:	693b      	ldr	r3, [r7, #16]
 800e0c4:	685a      	ldr	r2, [r3, #4]
 800e0c6:	4b14      	ldr	r3, [pc, #80]	; (800e118 <vPortFree+0xb8>)
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	4013      	ands	r3, r2
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d01e      	beq.n	800e10e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e0d0:	693b      	ldr	r3, [r7, #16]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d11a      	bne.n	800e10e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e0d8:	693b      	ldr	r3, [r7, #16]
 800e0da:	685a      	ldr	r2, [r3, #4]
 800e0dc:	4b0e      	ldr	r3, [pc, #56]	; (800e118 <vPortFree+0xb8>)
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	43db      	mvns	r3, r3
 800e0e2:	401a      	ands	r2, r3
 800e0e4:	693b      	ldr	r3, [r7, #16]
 800e0e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e0e8:	f7fe fcbc 	bl	800ca64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e0ec:	693b      	ldr	r3, [r7, #16]
 800e0ee:	685a      	ldr	r2, [r3, #4]
 800e0f0:	4b0a      	ldr	r3, [pc, #40]	; (800e11c <vPortFree+0xbc>)
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	4413      	add	r3, r2
 800e0f6:	4a09      	ldr	r2, [pc, #36]	; (800e11c <vPortFree+0xbc>)
 800e0f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e0fa:	6938      	ldr	r0, [r7, #16]
 800e0fc:	f000 f874 	bl	800e1e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e100:	4b07      	ldr	r3, [pc, #28]	; (800e120 <vPortFree+0xc0>)
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	3301      	adds	r3, #1
 800e106:	4a06      	ldr	r2, [pc, #24]	; (800e120 <vPortFree+0xc0>)
 800e108:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e10a:	f7fe fcb9 	bl	800ca80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e10e:	bf00      	nop
 800e110:	3718      	adds	r7, #24
 800e112:	46bd      	mov	sp, r7
 800e114:	bd80      	pop	{r7, pc}
 800e116:	bf00      	nop
 800e118:	20005c44 	.word	0x20005c44
 800e11c:	20005c34 	.word	0x20005c34
 800e120:	20005c40 	.word	0x20005c40

0800e124 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e124:	b480      	push	{r7}
 800e126:	b085      	sub	sp, #20
 800e128:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e12a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e12e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e130:	4b27      	ldr	r3, [pc, #156]	; (800e1d0 <prvHeapInit+0xac>)
 800e132:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	f003 0307 	and.w	r3, r3, #7
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d00c      	beq.n	800e158 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	3307      	adds	r3, #7
 800e142:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	f023 0307 	bic.w	r3, r3, #7
 800e14a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e14c:	68ba      	ldr	r2, [r7, #8]
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	1ad3      	subs	r3, r2, r3
 800e152:	4a1f      	ldr	r2, [pc, #124]	; (800e1d0 <prvHeapInit+0xac>)
 800e154:	4413      	add	r3, r2
 800e156:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e15c:	4a1d      	ldr	r2, [pc, #116]	; (800e1d4 <prvHeapInit+0xb0>)
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e162:	4b1c      	ldr	r3, [pc, #112]	; (800e1d4 <prvHeapInit+0xb0>)
 800e164:	2200      	movs	r2, #0
 800e166:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	68ba      	ldr	r2, [r7, #8]
 800e16c:	4413      	add	r3, r2
 800e16e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e170:	2208      	movs	r2, #8
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	1a9b      	subs	r3, r3, r2
 800e176:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	f023 0307 	bic.w	r3, r3, #7
 800e17e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	4a15      	ldr	r2, [pc, #84]	; (800e1d8 <prvHeapInit+0xb4>)
 800e184:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e186:	4b14      	ldr	r3, [pc, #80]	; (800e1d8 <prvHeapInit+0xb4>)
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	2200      	movs	r2, #0
 800e18c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e18e:	4b12      	ldr	r3, [pc, #72]	; (800e1d8 <prvHeapInit+0xb4>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	2200      	movs	r2, #0
 800e194:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	68fa      	ldr	r2, [r7, #12]
 800e19e:	1ad2      	subs	r2, r2, r3
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e1a4:	4b0c      	ldr	r3, [pc, #48]	; (800e1d8 <prvHeapInit+0xb4>)
 800e1a6:	681a      	ldr	r2, [r3, #0]
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	685b      	ldr	r3, [r3, #4]
 800e1b0:	4a0a      	ldr	r2, [pc, #40]	; (800e1dc <prvHeapInit+0xb8>)
 800e1b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	685b      	ldr	r3, [r3, #4]
 800e1b8:	4a09      	ldr	r2, [pc, #36]	; (800e1e0 <prvHeapInit+0xbc>)
 800e1ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e1bc:	4b09      	ldr	r3, [pc, #36]	; (800e1e4 <prvHeapInit+0xc0>)
 800e1be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e1c2:	601a      	str	r2, [r3, #0]
}
 800e1c4:	bf00      	nop
 800e1c6:	3714      	adds	r7, #20
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ce:	4770      	bx	lr
 800e1d0:	20002028 	.word	0x20002028
 800e1d4:	20005c28 	.word	0x20005c28
 800e1d8:	20005c30 	.word	0x20005c30
 800e1dc:	20005c38 	.word	0x20005c38
 800e1e0:	20005c34 	.word	0x20005c34
 800e1e4:	20005c44 	.word	0x20005c44

0800e1e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e1e8:	b480      	push	{r7}
 800e1ea:	b085      	sub	sp, #20
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e1f0:	4b28      	ldr	r3, [pc, #160]	; (800e294 <prvInsertBlockIntoFreeList+0xac>)
 800e1f2:	60fb      	str	r3, [r7, #12]
 800e1f4:	e002      	b.n	800e1fc <prvInsertBlockIntoFreeList+0x14>
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	60fb      	str	r3, [r7, #12]
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	687a      	ldr	r2, [r7, #4]
 800e202:	429a      	cmp	r2, r3
 800e204:	d8f7      	bhi.n	800e1f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	685b      	ldr	r3, [r3, #4]
 800e20e:	68ba      	ldr	r2, [r7, #8]
 800e210:	4413      	add	r3, r2
 800e212:	687a      	ldr	r2, [r7, #4]
 800e214:	429a      	cmp	r2, r3
 800e216:	d108      	bne.n	800e22a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	685a      	ldr	r2, [r3, #4]
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	685b      	ldr	r3, [r3, #4]
 800e220:	441a      	add	r2, r3
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	685b      	ldr	r3, [r3, #4]
 800e232:	68ba      	ldr	r2, [r7, #8]
 800e234:	441a      	add	r2, r3
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	429a      	cmp	r2, r3
 800e23c:	d118      	bne.n	800e270 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	681a      	ldr	r2, [r3, #0]
 800e242:	4b15      	ldr	r3, [pc, #84]	; (800e298 <prvInsertBlockIntoFreeList+0xb0>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	429a      	cmp	r2, r3
 800e248:	d00d      	beq.n	800e266 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	685a      	ldr	r2, [r3, #4]
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	685b      	ldr	r3, [r3, #4]
 800e254:	441a      	add	r2, r3
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	681a      	ldr	r2, [r3, #0]
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	601a      	str	r2, [r3, #0]
 800e264:	e008      	b.n	800e278 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e266:	4b0c      	ldr	r3, [pc, #48]	; (800e298 <prvInsertBlockIntoFreeList+0xb0>)
 800e268:	681a      	ldr	r2, [r3, #0]
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	601a      	str	r2, [r3, #0]
 800e26e:	e003      	b.n	800e278 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	681a      	ldr	r2, [r3, #0]
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e278:	68fa      	ldr	r2, [r7, #12]
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	429a      	cmp	r2, r3
 800e27e:	d002      	beq.n	800e286 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	687a      	ldr	r2, [r7, #4]
 800e284:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e286:	bf00      	nop
 800e288:	3714      	adds	r7, #20
 800e28a:	46bd      	mov	sp, r7
 800e28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e290:	4770      	bx	lr
 800e292:	bf00      	nop
 800e294:	20005c28 	.word	0x20005c28
 800e298:	20005c30 	.word	0x20005c30

0800e29c <_Znwj>:
 800e29c:	2801      	cmp	r0, #1
 800e29e:	bf38      	it	cc
 800e2a0:	2001      	movcc	r0, #1
 800e2a2:	b510      	push	{r4, lr}
 800e2a4:	4604      	mov	r4, r0
 800e2a6:	4620      	mov	r0, r4
 800e2a8:	f001 fb14 	bl	800f8d4 <malloc>
 800e2ac:	b930      	cbnz	r0, 800e2bc <_Znwj+0x20>
 800e2ae:	f000 f807 	bl	800e2c0 <_ZSt15get_new_handlerv>
 800e2b2:	b908      	cbnz	r0, 800e2b8 <_Znwj+0x1c>
 800e2b4:	f001 f9e6 	bl	800f684 <abort>
 800e2b8:	4780      	blx	r0
 800e2ba:	e7f4      	b.n	800e2a6 <_Znwj+0xa>
 800e2bc:	bd10      	pop	{r4, pc}
	...

0800e2c0 <_ZSt15get_new_handlerv>:
 800e2c0:	4b02      	ldr	r3, [pc, #8]	; (800e2cc <_ZSt15get_new_handlerv+0xc>)
 800e2c2:	6818      	ldr	r0, [r3, #0]
 800e2c4:	f3bf 8f5b 	dmb	ish
 800e2c8:	4770      	bx	lr
 800e2ca:	bf00      	nop
 800e2cc:	20005c48 	.word	0x20005c48

0800e2d0 <roundf>:
 800e2d0:	ee10 0a10 	vmov	r0, s0
 800e2d4:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800e2d8:	3a7f      	subs	r2, #127	; 0x7f
 800e2da:	2a16      	cmp	r2, #22
 800e2dc:	dc15      	bgt.n	800e30a <roundf+0x3a>
 800e2de:	2a00      	cmp	r2, #0
 800e2e0:	da08      	bge.n	800e2f4 <roundf+0x24>
 800e2e2:	3201      	adds	r2, #1
 800e2e4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800e2e8:	d101      	bne.n	800e2ee <roundf+0x1e>
 800e2ea:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800e2ee:	ee00 3a10 	vmov	s0, r3
 800e2f2:	4770      	bx	lr
 800e2f4:	4907      	ldr	r1, [pc, #28]	; (800e314 <roundf+0x44>)
 800e2f6:	4111      	asrs	r1, r2
 800e2f8:	4208      	tst	r0, r1
 800e2fa:	d0fa      	beq.n	800e2f2 <roundf+0x22>
 800e2fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e300:	4113      	asrs	r3, r2
 800e302:	4403      	add	r3, r0
 800e304:	ea23 0301 	bic.w	r3, r3, r1
 800e308:	e7f1      	b.n	800e2ee <roundf+0x1e>
 800e30a:	2a80      	cmp	r2, #128	; 0x80
 800e30c:	d1f1      	bne.n	800e2f2 <roundf+0x22>
 800e30e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e312:	4770      	bx	lr
 800e314:	007fffff 	.word	0x007fffff

0800e318 <atan2>:
 800e318:	f000 b89e 	b.w	800e458 <__ieee754_atan2>

0800e31c <pow>:
 800e31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e31e:	ed2d 8b02 	vpush	{d8}
 800e322:	eeb0 8a40 	vmov.f32	s16, s0
 800e326:	eef0 8a60 	vmov.f32	s17, s1
 800e32a:	ec55 4b11 	vmov	r4, r5, d1
 800e32e:	f000 f95f 	bl	800e5f0 <__ieee754_pow>
 800e332:	4622      	mov	r2, r4
 800e334:	462b      	mov	r3, r5
 800e336:	4620      	mov	r0, r4
 800e338:	4629      	mov	r1, r5
 800e33a:	ec57 6b10 	vmov	r6, r7, d0
 800e33e:	f7f2 fbf5 	bl	8000b2c <__aeabi_dcmpun>
 800e342:	2800      	cmp	r0, #0
 800e344:	d13b      	bne.n	800e3be <pow+0xa2>
 800e346:	ec51 0b18 	vmov	r0, r1, d8
 800e34a:	2200      	movs	r2, #0
 800e34c:	2300      	movs	r3, #0
 800e34e:	f7f2 fbbb 	bl	8000ac8 <__aeabi_dcmpeq>
 800e352:	b1b8      	cbz	r0, 800e384 <pow+0x68>
 800e354:	2200      	movs	r2, #0
 800e356:	2300      	movs	r3, #0
 800e358:	4620      	mov	r0, r4
 800e35a:	4629      	mov	r1, r5
 800e35c:	f7f2 fbb4 	bl	8000ac8 <__aeabi_dcmpeq>
 800e360:	2800      	cmp	r0, #0
 800e362:	d146      	bne.n	800e3f2 <pow+0xd6>
 800e364:	ec45 4b10 	vmov	d0, r4, r5
 800e368:	f001 f8fb 	bl	800f562 <finite>
 800e36c:	b338      	cbz	r0, 800e3be <pow+0xa2>
 800e36e:	2200      	movs	r2, #0
 800e370:	2300      	movs	r3, #0
 800e372:	4620      	mov	r0, r4
 800e374:	4629      	mov	r1, r5
 800e376:	f7f2 fbb1 	bl	8000adc <__aeabi_dcmplt>
 800e37a:	b300      	cbz	r0, 800e3be <pow+0xa2>
 800e37c:	f001 f98a 	bl	800f694 <__errno>
 800e380:	2322      	movs	r3, #34	; 0x22
 800e382:	e01b      	b.n	800e3bc <pow+0xa0>
 800e384:	ec47 6b10 	vmov	d0, r6, r7
 800e388:	f001 f8eb 	bl	800f562 <finite>
 800e38c:	b9e0      	cbnz	r0, 800e3c8 <pow+0xac>
 800e38e:	eeb0 0a48 	vmov.f32	s0, s16
 800e392:	eef0 0a68 	vmov.f32	s1, s17
 800e396:	f001 f8e4 	bl	800f562 <finite>
 800e39a:	b1a8      	cbz	r0, 800e3c8 <pow+0xac>
 800e39c:	ec45 4b10 	vmov	d0, r4, r5
 800e3a0:	f001 f8df 	bl	800f562 <finite>
 800e3a4:	b180      	cbz	r0, 800e3c8 <pow+0xac>
 800e3a6:	4632      	mov	r2, r6
 800e3a8:	463b      	mov	r3, r7
 800e3aa:	4630      	mov	r0, r6
 800e3ac:	4639      	mov	r1, r7
 800e3ae:	f7f2 fbbd 	bl	8000b2c <__aeabi_dcmpun>
 800e3b2:	2800      	cmp	r0, #0
 800e3b4:	d0e2      	beq.n	800e37c <pow+0x60>
 800e3b6:	f001 f96d 	bl	800f694 <__errno>
 800e3ba:	2321      	movs	r3, #33	; 0x21
 800e3bc:	6003      	str	r3, [r0, #0]
 800e3be:	ecbd 8b02 	vpop	{d8}
 800e3c2:	ec47 6b10 	vmov	d0, r6, r7
 800e3c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	4630      	mov	r0, r6
 800e3ce:	4639      	mov	r1, r7
 800e3d0:	f7f2 fb7a 	bl	8000ac8 <__aeabi_dcmpeq>
 800e3d4:	2800      	cmp	r0, #0
 800e3d6:	d0f2      	beq.n	800e3be <pow+0xa2>
 800e3d8:	eeb0 0a48 	vmov.f32	s0, s16
 800e3dc:	eef0 0a68 	vmov.f32	s1, s17
 800e3e0:	f001 f8bf 	bl	800f562 <finite>
 800e3e4:	2800      	cmp	r0, #0
 800e3e6:	d0ea      	beq.n	800e3be <pow+0xa2>
 800e3e8:	ec45 4b10 	vmov	d0, r4, r5
 800e3ec:	f001 f8b9 	bl	800f562 <finite>
 800e3f0:	e7c3      	b.n	800e37a <pow+0x5e>
 800e3f2:	4f01      	ldr	r7, [pc, #4]	; (800e3f8 <pow+0xdc>)
 800e3f4:	2600      	movs	r6, #0
 800e3f6:	e7e2      	b.n	800e3be <pow+0xa2>
 800e3f8:	3ff00000 	.word	0x3ff00000

0800e3fc <sqrt>:
 800e3fc:	b538      	push	{r3, r4, r5, lr}
 800e3fe:	ed2d 8b02 	vpush	{d8}
 800e402:	ec55 4b10 	vmov	r4, r5, d0
 800e406:	f000 fe21 	bl	800f04c <__ieee754_sqrt>
 800e40a:	4622      	mov	r2, r4
 800e40c:	462b      	mov	r3, r5
 800e40e:	4620      	mov	r0, r4
 800e410:	4629      	mov	r1, r5
 800e412:	eeb0 8a40 	vmov.f32	s16, s0
 800e416:	eef0 8a60 	vmov.f32	s17, s1
 800e41a:	f7f2 fb87 	bl	8000b2c <__aeabi_dcmpun>
 800e41e:	b990      	cbnz	r0, 800e446 <sqrt+0x4a>
 800e420:	2200      	movs	r2, #0
 800e422:	2300      	movs	r3, #0
 800e424:	4620      	mov	r0, r4
 800e426:	4629      	mov	r1, r5
 800e428:	f7f2 fb58 	bl	8000adc <__aeabi_dcmplt>
 800e42c:	b158      	cbz	r0, 800e446 <sqrt+0x4a>
 800e42e:	f001 f931 	bl	800f694 <__errno>
 800e432:	2321      	movs	r3, #33	; 0x21
 800e434:	6003      	str	r3, [r0, #0]
 800e436:	2200      	movs	r2, #0
 800e438:	2300      	movs	r3, #0
 800e43a:	4610      	mov	r0, r2
 800e43c:	4619      	mov	r1, r3
 800e43e:	f7f2 fa05 	bl	800084c <__aeabi_ddiv>
 800e442:	ec41 0b18 	vmov	d8, r0, r1
 800e446:	eeb0 0a48 	vmov.f32	s0, s16
 800e44a:	eef0 0a68 	vmov.f32	s1, s17
 800e44e:	ecbd 8b02 	vpop	{d8}
 800e452:	bd38      	pop	{r3, r4, r5, pc}
 800e454:	0000      	movs	r0, r0
	...

0800e458 <__ieee754_atan2>:
 800e458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e45c:	ec57 6b11 	vmov	r6, r7, d1
 800e460:	4273      	negs	r3, r6
 800e462:	f8df e184 	ldr.w	lr, [pc, #388]	; 800e5e8 <__ieee754_atan2+0x190>
 800e466:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800e46a:	4333      	orrs	r3, r6
 800e46c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800e470:	4573      	cmp	r3, lr
 800e472:	ec51 0b10 	vmov	r0, r1, d0
 800e476:	ee11 8a10 	vmov	r8, s2
 800e47a:	d80a      	bhi.n	800e492 <__ieee754_atan2+0x3a>
 800e47c:	4244      	negs	r4, r0
 800e47e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e482:	4304      	orrs	r4, r0
 800e484:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800e488:	4574      	cmp	r4, lr
 800e48a:	ee10 9a10 	vmov	r9, s0
 800e48e:	468c      	mov	ip, r1
 800e490:	d907      	bls.n	800e4a2 <__ieee754_atan2+0x4a>
 800e492:	4632      	mov	r2, r6
 800e494:	463b      	mov	r3, r7
 800e496:	f7f1 fef9 	bl	800028c <__adddf3>
 800e49a:	ec41 0b10 	vmov	d0, r0, r1
 800e49e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4a2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800e4a6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e4aa:	4334      	orrs	r4, r6
 800e4ac:	d103      	bne.n	800e4b6 <__ieee754_atan2+0x5e>
 800e4ae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4b2:	f000 bead 	b.w	800f210 <atan>
 800e4b6:	17bc      	asrs	r4, r7, #30
 800e4b8:	f004 0402 	and.w	r4, r4, #2
 800e4bc:	ea53 0909 	orrs.w	r9, r3, r9
 800e4c0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800e4c4:	d107      	bne.n	800e4d6 <__ieee754_atan2+0x7e>
 800e4c6:	2c02      	cmp	r4, #2
 800e4c8:	d060      	beq.n	800e58c <__ieee754_atan2+0x134>
 800e4ca:	2c03      	cmp	r4, #3
 800e4cc:	d1e5      	bne.n	800e49a <__ieee754_atan2+0x42>
 800e4ce:	a142      	add	r1, pc, #264	; (adr r1, 800e5d8 <__ieee754_atan2+0x180>)
 800e4d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4d4:	e7e1      	b.n	800e49a <__ieee754_atan2+0x42>
 800e4d6:	ea52 0808 	orrs.w	r8, r2, r8
 800e4da:	d106      	bne.n	800e4ea <__ieee754_atan2+0x92>
 800e4dc:	f1bc 0f00 	cmp.w	ip, #0
 800e4e0:	da5f      	bge.n	800e5a2 <__ieee754_atan2+0x14a>
 800e4e2:	a13f      	add	r1, pc, #252	; (adr r1, 800e5e0 <__ieee754_atan2+0x188>)
 800e4e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4e8:	e7d7      	b.n	800e49a <__ieee754_atan2+0x42>
 800e4ea:	4572      	cmp	r2, lr
 800e4ec:	d10f      	bne.n	800e50e <__ieee754_atan2+0xb6>
 800e4ee:	4293      	cmp	r3, r2
 800e4f0:	f104 34ff 	add.w	r4, r4, #4294967295
 800e4f4:	d107      	bne.n	800e506 <__ieee754_atan2+0xae>
 800e4f6:	2c02      	cmp	r4, #2
 800e4f8:	d84c      	bhi.n	800e594 <__ieee754_atan2+0x13c>
 800e4fa:	4b35      	ldr	r3, [pc, #212]	; (800e5d0 <__ieee754_atan2+0x178>)
 800e4fc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e500:	e9d4 0100 	ldrd	r0, r1, [r4]
 800e504:	e7c9      	b.n	800e49a <__ieee754_atan2+0x42>
 800e506:	2c02      	cmp	r4, #2
 800e508:	d848      	bhi.n	800e59c <__ieee754_atan2+0x144>
 800e50a:	4b32      	ldr	r3, [pc, #200]	; (800e5d4 <__ieee754_atan2+0x17c>)
 800e50c:	e7f6      	b.n	800e4fc <__ieee754_atan2+0xa4>
 800e50e:	4573      	cmp	r3, lr
 800e510:	d0e4      	beq.n	800e4dc <__ieee754_atan2+0x84>
 800e512:	1a9b      	subs	r3, r3, r2
 800e514:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800e518:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e51c:	da1e      	bge.n	800e55c <__ieee754_atan2+0x104>
 800e51e:	2f00      	cmp	r7, #0
 800e520:	da01      	bge.n	800e526 <__ieee754_atan2+0xce>
 800e522:	323c      	adds	r2, #60	; 0x3c
 800e524:	db1e      	blt.n	800e564 <__ieee754_atan2+0x10c>
 800e526:	4632      	mov	r2, r6
 800e528:	463b      	mov	r3, r7
 800e52a:	f7f2 f98f 	bl	800084c <__aeabi_ddiv>
 800e52e:	ec41 0b10 	vmov	d0, r0, r1
 800e532:	f001 f80d 	bl	800f550 <fabs>
 800e536:	f000 fe6b 	bl	800f210 <atan>
 800e53a:	ec51 0b10 	vmov	r0, r1, d0
 800e53e:	2c01      	cmp	r4, #1
 800e540:	d013      	beq.n	800e56a <__ieee754_atan2+0x112>
 800e542:	2c02      	cmp	r4, #2
 800e544:	d015      	beq.n	800e572 <__ieee754_atan2+0x11a>
 800e546:	2c00      	cmp	r4, #0
 800e548:	d0a7      	beq.n	800e49a <__ieee754_atan2+0x42>
 800e54a:	a319      	add	r3, pc, #100	; (adr r3, 800e5b0 <__ieee754_atan2+0x158>)
 800e54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e550:	f7f1 fe9a 	bl	8000288 <__aeabi_dsub>
 800e554:	a318      	add	r3, pc, #96	; (adr r3, 800e5b8 <__ieee754_atan2+0x160>)
 800e556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e55a:	e014      	b.n	800e586 <__ieee754_atan2+0x12e>
 800e55c:	a118      	add	r1, pc, #96	; (adr r1, 800e5c0 <__ieee754_atan2+0x168>)
 800e55e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e562:	e7ec      	b.n	800e53e <__ieee754_atan2+0xe6>
 800e564:	2000      	movs	r0, #0
 800e566:	2100      	movs	r1, #0
 800e568:	e7e9      	b.n	800e53e <__ieee754_atan2+0xe6>
 800e56a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e56e:	4619      	mov	r1, r3
 800e570:	e793      	b.n	800e49a <__ieee754_atan2+0x42>
 800e572:	a30f      	add	r3, pc, #60	; (adr r3, 800e5b0 <__ieee754_atan2+0x158>)
 800e574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e578:	f7f1 fe86 	bl	8000288 <__aeabi_dsub>
 800e57c:	4602      	mov	r2, r0
 800e57e:	460b      	mov	r3, r1
 800e580:	a10d      	add	r1, pc, #52	; (adr r1, 800e5b8 <__ieee754_atan2+0x160>)
 800e582:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e586:	f7f1 fe7f 	bl	8000288 <__aeabi_dsub>
 800e58a:	e786      	b.n	800e49a <__ieee754_atan2+0x42>
 800e58c:	a10a      	add	r1, pc, #40	; (adr r1, 800e5b8 <__ieee754_atan2+0x160>)
 800e58e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e592:	e782      	b.n	800e49a <__ieee754_atan2+0x42>
 800e594:	a10c      	add	r1, pc, #48	; (adr r1, 800e5c8 <__ieee754_atan2+0x170>)
 800e596:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e59a:	e77e      	b.n	800e49a <__ieee754_atan2+0x42>
 800e59c:	2000      	movs	r0, #0
 800e59e:	2100      	movs	r1, #0
 800e5a0:	e77b      	b.n	800e49a <__ieee754_atan2+0x42>
 800e5a2:	a107      	add	r1, pc, #28	; (adr r1, 800e5c0 <__ieee754_atan2+0x168>)
 800e5a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e5a8:	e777      	b.n	800e49a <__ieee754_atan2+0x42>
 800e5aa:	bf00      	nop
 800e5ac:	f3af 8000 	nop.w
 800e5b0:	33145c07 	.word	0x33145c07
 800e5b4:	3ca1a626 	.word	0x3ca1a626
 800e5b8:	54442d18 	.word	0x54442d18
 800e5bc:	400921fb 	.word	0x400921fb
 800e5c0:	54442d18 	.word	0x54442d18
 800e5c4:	3ff921fb 	.word	0x3ff921fb
 800e5c8:	54442d18 	.word	0x54442d18
 800e5cc:	3fe921fb 	.word	0x3fe921fb
 800e5d0:	08013550 	.word	0x08013550
 800e5d4:	08013568 	.word	0x08013568
 800e5d8:	54442d18 	.word	0x54442d18
 800e5dc:	c00921fb 	.word	0xc00921fb
 800e5e0:	54442d18 	.word	0x54442d18
 800e5e4:	bff921fb 	.word	0xbff921fb
 800e5e8:	7ff00000 	.word	0x7ff00000
 800e5ec:	00000000 	.word	0x00000000

0800e5f0 <__ieee754_pow>:
 800e5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5f4:	ed2d 8b06 	vpush	{d8-d10}
 800e5f8:	b089      	sub	sp, #36	; 0x24
 800e5fa:	ed8d 1b00 	vstr	d1, [sp]
 800e5fe:	e9dd 2900 	ldrd	r2, r9, [sp]
 800e602:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800e606:	ea58 0102 	orrs.w	r1, r8, r2
 800e60a:	ec57 6b10 	vmov	r6, r7, d0
 800e60e:	d115      	bne.n	800e63c <__ieee754_pow+0x4c>
 800e610:	19b3      	adds	r3, r6, r6
 800e612:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800e616:	4152      	adcs	r2, r2
 800e618:	4299      	cmp	r1, r3
 800e61a:	4b89      	ldr	r3, [pc, #548]	; (800e840 <__ieee754_pow+0x250>)
 800e61c:	4193      	sbcs	r3, r2
 800e61e:	f080 84d2 	bcs.w	800efc6 <__ieee754_pow+0x9d6>
 800e622:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e626:	4630      	mov	r0, r6
 800e628:	4639      	mov	r1, r7
 800e62a:	f7f1 fe2f 	bl	800028c <__adddf3>
 800e62e:	ec41 0b10 	vmov	d0, r0, r1
 800e632:	b009      	add	sp, #36	; 0x24
 800e634:	ecbd 8b06 	vpop	{d8-d10}
 800e638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e63c:	4b81      	ldr	r3, [pc, #516]	; (800e844 <__ieee754_pow+0x254>)
 800e63e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800e642:	429c      	cmp	r4, r3
 800e644:	ee10 aa10 	vmov	sl, s0
 800e648:	463d      	mov	r5, r7
 800e64a:	dc06      	bgt.n	800e65a <__ieee754_pow+0x6a>
 800e64c:	d101      	bne.n	800e652 <__ieee754_pow+0x62>
 800e64e:	2e00      	cmp	r6, #0
 800e650:	d1e7      	bne.n	800e622 <__ieee754_pow+0x32>
 800e652:	4598      	cmp	r8, r3
 800e654:	dc01      	bgt.n	800e65a <__ieee754_pow+0x6a>
 800e656:	d10f      	bne.n	800e678 <__ieee754_pow+0x88>
 800e658:	b172      	cbz	r2, 800e678 <__ieee754_pow+0x88>
 800e65a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800e65e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800e662:	ea55 050a 	orrs.w	r5, r5, sl
 800e666:	d1dc      	bne.n	800e622 <__ieee754_pow+0x32>
 800e668:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e66c:	18db      	adds	r3, r3, r3
 800e66e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800e672:	4152      	adcs	r2, r2
 800e674:	429d      	cmp	r5, r3
 800e676:	e7d0      	b.n	800e61a <__ieee754_pow+0x2a>
 800e678:	2d00      	cmp	r5, #0
 800e67a:	da3b      	bge.n	800e6f4 <__ieee754_pow+0x104>
 800e67c:	4b72      	ldr	r3, [pc, #456]	; (800e848 <__ieee754_pow+0x258>)
 800e67e:	4598      	cmp	r8, r3
 800e680:	dc51      	bgt.n	800e726 <__ieee754_pow+0x136>
 800e682:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e686:	4598      	cmp	r8, r3
 800e688:	f340 84ac 	ble.w	800efe4 <__ieee754_pow+0x9f4>
 800e68c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e690:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e694:	2b14      	cmp	r3, #20
 800e696:	dd0f      	ble.n	800e6b8 <__ieee754_pow+0xc8>
 800e698:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e69c:	fa22 f103 	lsr.w	r1, r2, r3
 800e6a0:	fa01 f303 	lsl.w	r3, r1, r3
 800e6a4:	4293      	cmp	r3, r2
 800e6a6:	f040 849d 	bne.w	800efe4 <__ieee754_pow+0x9f4>
 800e6aa:	f001 0101 	and.w	r1, r1, #1
 800e6ae:	f1c1 0302 	rsb	r3, r1, #2
 800e6b2:	9304      	str	r3, [sp, #16]
 800e6b4:	b182      	cbz	r2, 800e6d8 <__ieee754_pow+0xe8>
 800e6b6:	e05f      	b.n	800e778 <__ieee754_pow+0x188>
 800e6b8:	2a00      	cmp	r2, #0
 800e6ba:	d15b      	bne.n	800e774 <__ieee754_pow+0x184>
 800e6bc:	f1c3 0314 	rsb	r3, r3, #20
 800e6c0:	fa48 f103 	asr.w	r1, r8, r3
 800e6c4:	fa01 f303 	lsl.w	r3, r1, r3
 800e6c8:	4543      	cmp	r3, r8
 800e6ca:	f040 8488 	bne.w	800efde <__ieee754_pow+0x9ee>
 800e6ce:	f001 0101 	and.w	r1, r1, #1
 800e6d2:	f1c1 0302 	rsb	r3, r1, #2
 800e6d6:	9304      	str	r3, [sp, #16]
 800e6d8:	4b5c      	ldr	r3, [pc, #368]	; (800e84c <__ieee754_pow+0x25c>)
 800e6da:	4598      	cmp	r8, r3
 800e6dc:	d132      	bne.n	800e744 <__ieee754_pow+0x154>
 800e6de:	f1b9 0f00 	cmp.w	r9, #0
 800e6e2:	f280 8478 	bge.w	800efd6 <__ieee754_pow+0x9e6>
 800e6e6:	4959      	ldr	r1, [pc, #356]	; (800e84c <__ieee754_pow+0x25c>)
 800e6e8:	4632      	mov	r2, r6
 800e6ea:	463b      	mov	r3, r7
 800e6ec:	2000      	movs	r0, #0
 800e6ee:	f7f2 f8ad 	bl	800084c <__aeabi_ddiv>
 800e6f2:	e79c      	b.n	800e62e <__ieee754_pow+0x3e>
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	9304      	str	r3, [sp, #16]
 800e6f8:	2a00      	cmp	r2, #0
 800e6fa:	d13d      	bne.n	800e778 <__ieee754_pow+0x188>
 800e6fc:	4b51      	ldr	r3, [pc, #324]	; (800e844 <__ieee754_pow+0x254>)
 800e6fe:	4598      	cmp	r8, r3
 800e700:	d1ea      	bne.n	800e6d8 <__ieee754_pow+0xe8>
 800e702:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e706:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e70a:	ea53 030a 	orrs.w	r3, r3, sl
 800e70e:	f000 845a 	beq.w	800efc6 <__ieee754_pow+0x9d6>
 800e712:	4b4f      	ldr	r3, [pc, #316]	; (800e850 <__ieee754_pow+0x260>)
 800e714:	429c      	cmp	r4, r3
 800e716:	dd08      	ble.n	800e72a <__ieee754_pow+0x13a>
 800e718:	f1b9 0f00 	cmp.w	r9, #0
 800e71c:	f2c0 8457 	blt.w	800efce <__ieee754_pow+0x9de>
 800e720:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e724:	e783      	b.n	800e62e <__ieee754_pow+0x3e>
 800e726:	2302      	movs	r3, #2
 800e728:	e7e5      	b.n	800e6f6 <__ieee754_pow+0x106>
 800e72a:	f1b9 0f00 	cmp.w	r9, #0
 800e72e:	f04f 0000 	mov.w	r0, #0
 800e732:	f04f 0100 	mov.w	r1, #0
 800e736:	f6bf af7a 	bge.w	800e62e <__ieee754_pow+0x3e>
 800e73a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e73e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e742:	e774      	b.n	800e62e <__ieee754_pow+0x3e>
 800e744:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800e748:	d106      	bne.n	800e758 <__ieee754_pow+0x168>
 800e74a:	4632      	mov	r2, r6
 800e74c:	463b      	mov	r3, r7
 800e74e:	4630      	mov	r0, r6
 800e750:	4639      	mov	r1, r7
 800e752:	f7f1 ff51 	bl	80005f8 <__aeabi_dmul>
 800e756:	e76a      	b.n	800e62e <__ieee754_pow+0x3e>
 800e758:	4b3e      	ldr	r3, [pc, #248]	; (800e854 <__ieee754_pow+0x264>)
 800e75a:	4599      	cmp	r9, r3
 800e75c:	d10c      	bne.n	800e778 <__ieee754_pow+0x188>
 800e75e:	2d00      	cmp	r5, #0
 800e760:	db0a      	blt.n	800e778 <__ieee754_pow+0x188>
 800e762:	ec47 6b10 	vmov	d0, r6, r7
 800e766:	b009      	add	sp, #36	; 0x24
 800e768:	ecbd 8b06 	vpop	{d8-d10}
 800e76c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e770:	f000 bc6c 	b.w	800f04c <__ieee754_sqrt>
 800e774:	2300      	movs	r3, #0
 800e776:	9304      	str	r3, [sp, #16]
 800e778:	ec47 6b10 	vmov	d0, r6, r7
 800e77c:	f000 fee8 	bl	800f550 <fabs>
 800e780:	ec51 0b10 	vmov	r0, r1, d0
 800e784:	f1ba 0f00 	cmp.w	sl, #0
 800e788:	d129      	bne.n	800e7de <__ieee754_pow+0x1ee>
 800e78a:	b124      	cbz	r4, 800e796 <__ieee754_pow+0x1a6>
 800e78c:	4b2f      	ldr	r3, [pc, #188]	; (800e84c <__ieee754_pow+0x25c>)
 800e78e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e792:	429a      	cmp	r2, r3
 800e794:	d123      	bne.n	800e7de <__ieee754_pow+0x1ee>
 800e796:	f1b9 0f00 	cmp.w	r9, #0
 800e79a:	da05      	bge.n	800e7a8 <__ieee754_pow+0x1b8>
 800e79c:	4602      	mov	r2, r0
 800e79e:	460b      	mov	r3, r1
 800e7a0:	2000      	movs	r0, #0
 800e7a2:	492a      	ldr	r1, [pc, #168]	; (800e84c <__ieee754_pow+0x25c>)
 800e7a4:	f7f2 f852 	bl	800084c <__aeabi_ddiv>
 800e7a8:	2d00      	cmp	r5, #0
 800e7aa:	f6bf af40 	bge.w	800e62e <__ieee754_pow+0x3e>
 800e7ae:	9b04      	ldr	r3, [sp, #16]
 800e7b0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e7b4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e7b8:	4323      	orrs	r3, r4
 800e7ba:	d108      	bne.n	800e7ce <__ieee754_pow+0x1de>
 800e7bc:	4602      	mov	r2, r0
 800e7be:	460b      	mov	r3, r1
 800e7c0:	4610      	mov	r0, r2
 800e7c2:	4619      	mov	r1, r3
 800e7c4:	f7f1 fd60 	bl	8000288 <__aeabi_dsub>
 800e7c8:	4602      	mov	r2, r0
 800e7ca:	460b      	mov	r3, r1
 800e7cc:	e78f      	b.n	800e6ee <__ieee754_pow+0xfe>
 800e7ce:	9b04      	ldr	r3, [sp, #16]
 800e7d0:	2b01      	cmp	r3, #1
 800e7d2:	f47f af2c 	bne.w	800e62e <__ieee754_pow+0x3e>
 800e7d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e7da:	4619      	mov	r1, r3
 800e7dc:	e727      	b.n	800e62e <__ieee754_pow+0x3e>
 800e7de:	0feb      	lsrs	r3, r5, #31
 800e7e0:	3b01      	subs	r3, #1
 800e7e2:	9306      	str	r3, [sp, #24]
 800e7e4:	9a06      	ldr	r2, [sp, #24]
 800e7e6:	9b04      	ldr	r3, [sp, #16]
 800e7e8:	4313      	orrs	r3, r2
 800e7ea:	d102      	bne.n	800e7f2 <__ieee754_pow+0x202>
 800e7ec:	4632      	mov	r2, r6
 800e7ee:	463b      	mov	r3, r7
 800e7f0:	e7e6      	b.n	800e7c0 <__ieee754_pow+0x1d0>
 800e7f2:	4b19      	ldr	r3, [pc, #100]	; (800e858 <__ieee754_pow+0x268>)
 800e7f4:	4598      	cmp	r8, r3
 800e7f6:	f340 80fb 	ble.w	800e9f0 <__ieee754_pow+0x400>
 800e7fa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e7fe:	4598      	cmp	r8, r3
 800e800:	4b13      	ldr	r3, [pc, #76]	; (800e850 <__ieee754_pow+0x260>)
 800e802:	dd0c      	ble.n	800e81e <__ieee754_pow+0x22e>
 800e804:	429c      	cmp	r4, r3
 800e806:	dc0f      	bgt.n	800e828 <__ieee754_pow+0x238>
 800e808:	f1b9 0f00 	cmp.w	r9, #0
 800e80c:	da0f      	bge.n	800e82e <__ieee754_pow+0x23e>
 800e80e:	2000      	movs	r0, #0
 800e810:	b009      	add	sp, #36	; 0x24
 800e812:	ecbd 8b06 	vpop	{d8-d10}
 800e816:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e81a:	f000 bcf0 	b.w	800f1fe <__math_oflow>
 800e81e:	429c      	cmp	r4, r3
 800e820:	dbf2      	blt.n	800e808 <__ieee754_pow+0x218>
 800e822:	4b0a      	ldr	r3, [pc, #40]	; (800e84c <__ieee754_pow+0x25c>)
 800e824:	429c      	cmp	r4, r3
 800e826:	dd19      	ble.n	800e85c <__ieee754_pow+0x26c>
 800e828:	f1b9 0f00 	cmp.w	r9, #0
 800e82c:	dcef      	bgt.n	800e80e <__ieee754_pow+0x21e>
 800e82e:	2000      	movs	r0, #0
 800e830:	b009      	add	sp, #36	; 0x24
 800e832:	ecbd 8b06 	vpop	{d8-d10}
 800e836:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e83a:	f000 bcd7 	b.w	800f1ec <__math_uflow>
 800e83e:	bf00      	nop
 800e840:	fff00000 	.word	0xfff00000
 800e844:	7ff00000 	.word	0x7ff00000
 800e848:	433fffff 	.word	0x433fffff
 800e84c:	3ff00000 	.word	0x3ff00000
 800e850:	3fefffff 	.word	0x3fefffff
 800e854:	3fe00000 	.word	0x3fe00000
 800e858:	41e00000 	.word	0x41e00000
 800e85c:	4b60      	ldr	r3, [pc, #384]	; (800e9e0 <__ieee754_pow+0x3f0>)
 800e85e:	2200      	movs	r2, #0
 800e860:	f7f1 fd12 	bl	8000288 <__aeabi_dsub>
 800e864:	a354      	add	r3, pc, #336	; (adr r3, 800e9b8 <__ieee754_pow+0x3c8>)
 800e866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e86a:	4604      	mov	r4, r0
 800e86c:	460d      	mov	r5, r1
 800e86e:	f7f1 fec3 	bl	80005f8 <__aeabi_dmul>
 800e872:	a353      	add	r3, pc, #332	; (adr r3, 800e9c0 <__ieee754_pow+0x3d0>)
 800e874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e878:	4606      	mov	r6, r0
 800e87a:	460f      	mov	r7, r1
 800e87c:	4620      	mov	r0, r4
 800e87e:	4629      	mov	r1, r5
 800e880:	f7f1 feba 	bl	80005f8 <__aeabi_dmul>
 800e884:	4b57      	ldr	r3, [pc, #348]	; (800e9e4 <__ieee754_pow+0x3f4>)
 800e886:	4682      	mov	sl, r0
 800e888:	468b      	mov	fp, r1
 800e88a:	2200      	movs	r2, #0
 800e88c:	4620      	mov	r0, r4
 800e88e:	4629      	mov	r1, r5
 800e890:	f7f1 feb2 	bl	80005f8 <__aeabi_dmul>
 800e894:	4602      	mov	r2, r0
 800e896:	460b      	mov	r3, r1
 800e898:	a14b      	add	r1, pc, #300	; (adr r1, 800e9c8 <__ieee754_pow+0x3d8>)
 800e89a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e89e:	f7f1 fcf3 	bl	8000288 <__aeabi_dsub>
 800e8a2:	4622      	mov	r2, r4
 800e8a4:	462b      	mov	r3, r5
 800e8a6:	f7f1 fea7 	bl	80005f8 <__aeabi_dmul>
 800e8aa:	4602      	mov	r2, r0
 800e8ac:	460b      	mov	r3, r1
 800e8ae:	2000      	movs	r0, #0
 800e8b0:	494d      	ldr	r1, [pc, #308]	; (800e9e8 <__ieee754_pow+0x3f8>)
 800e8b2:	f7f1 fce9 	bl	8000288 <__aeabi_dsub>
 800e8b6:	4622      	mov	r2, r4
 800e8b8:	4680      	mov	r8, r0
 800e8ba:	4689      	mov	r9, r1
 800e8bc:	462b      	mov	r3, r5
 800e8be:	4620      	mov	r0, r4
 800e8c0:	4629      	mov	r1, r5
 800e8c2:	f7f1 fe99 	bl	80005f8 <__aeabi_dmul>
 800e8c6:	4602      	mov	r2, r0
 800e8c8:	460b      	mov	r3, r1
 800e8ca:	4640      	mov	r0, r8
 800e8cc:	4649      	mov	r1, r9
 800e8ce:	f7f1 fe93 	bl	80005f8 <__aeabi_dmul>
 800e8d2:	a33f      	add	r3, pc, #252	; (adr r3, 800e9d0 <__ieee754_pow+0x3e0>)
 800e8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8d8:	f7f1 fe8e 	bl	80005f8 <__aeabi_dmul>
 800e8dc:	4602      	mov	r2, r0
 800e8de:	460b      	mov	r3, r1
 800e8e0:	4650      	mov	r0, sl
 800e8e2:	4659      	mov	r1, fp
 800e8e4:	f7f1 fcd0 	bl	8000288 <__aeabi_dsub>
 800e8e8:	4602      	mov	r2, r0
 800e8ea:	460b      	mov	r3, r1
 800e8ec:	4680      	mov	r8, r0
 800e8ee:	4689      	mov	r9, r1
 800e8f0:	4630      	mov	r0, r6
 800e8f2:	4639      	mov	r1, r7
 800e8f4:	f7f1 fcca 	bl	800028c <__adddf3>
 800e8f8:	2000      	movs	r0, #0
 800e8fa:	4632      	mov	r2, r6
 800e8fc:	463b      	mov	r3, r7
 800e8fe:	4604      	mov	r4, r0
 800e900:	460d      	mov	r5, r1
 800e902:	f7f1 fcc1 	bl	8000288 <__aeabi_dsub>
 800e906:	4602      	mov	r2, r0
 800e908:	460b      	mov	r3, r1
 800e90a:	4640      	mov	r0, r8
 800e90c:	4649      	mov	r1, r9
 800e90e:	f7f1 fcbb 	bl	8000288 <__aeabi_dsub>
 800e912:	9b04      	ldr	r3, [sp, #16]
 800e914:	9a06      	ldr	r2, [sp, #24]
 800e916:	3b01      	subs	r3, #1
 800e918:	4313      	orrs	r3, r2
 800e91a:	4682      	mov	sl, r0
 800e91c:	468b      	mov	fp, r1
 800e91e:	f040 81e7 	bne.w	800ecf0 <__ieee754_pow+0x700>
 800e922:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800e9d8 <__ieee754_pow+0x3e8>
 800e926:	eeb0 8a47 	vmov.f32	s16, s14
 800e92a:	eef0 8a67 	vmov.f32	s17, s15
 800e92e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e932:	2600      	movs	r6, #0
 800e934:	4632      	mov	r2, r6
 800e936:	463b      	mov	r3, r7
 800e938:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e93c:	f7f1 fca4 	bl	8000288 <__aeabi_dsub>
 800e940:	4622      	mov	r2, r4
 800e942:	462b      	mov	r3, r5
 800e944:	f7f1 fe58 	bl	80005f8 <__aeabi_dmul>
 800e948:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e94c:	4680      	mov	r8, r0
 800e94e:	4689      	mov	r9, r1
 800e950:	4650      	mov	r0, sl
 800e952:	4659      	mov	r1, fp
 800e954:	f7f1 fe50 	bl	80005f8 <__aeabi_dmul>
 800e958:	4602      	mov	r2, r0
 800e95a:	460b      	mov	r3, r1
 800e95c:	4640      	mov	r0, r8
 800e95e:	4649      	mov	r1, r9
 800e960:	f7f1 fc94 	bl	800028c <__adddf3>
 800e964:	4632      	mov	r2, r6
 800e966:	463b      	mov	r3, r7
 800e968:	4680      	mov	r8, r0
 800e96a:	4689      	mov	r9, r1
 800e96c:	4620      	mov	r0, r4
 800e96e:	4629      	mov	r1, r5
 800e970:	f7f1 fe42 	bl	80005f8 <__aeabi_dmul>
 800e974:	460b      	mov	r3, r1
 800e976:	4604      	mov	r4, r0
 800e978:	460d      	mov	r5, r1
 800e97a:	4602      	mov	r2, r0
 800e97c:	4649      	mov	r1, r9
 800e97e:	4640      	mov	r0, r8
 800e980:	f7f1 fc84 	bl	800028c <__adddf3>
 800e984:	4b19      	ldr	r3, [pc, #100]	; (800e9ec <__ieee754_pow+0x3fc>)
 800e986:	4299      	cmp	r1, r3
 800e988:	ec45 4b19 	vmov	d9, r4, r5
 800e98c:	4606      	mov	r6, r0
 800e98e:	460f      	mov	r7, r1
 800e990:	468b      	mov	fp, r1
 800e992:	f340 82f1 	ble.w	800ef78 <__ieee754_pow+0x988>
 800e996:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e99a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e99e:	4303      	orrs	r3, r0
 800e9a0:	f000 81e4 	beq.w	800ed6c <__ieee754_pow+0x77c>
 800e9a4:	ec51 0b18 	vmov	r0, r1, d8
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	f7f2 f896 	bl	8000adc <__aeabi_dcmplt>
 800e9b0:	3800      	subs	r0, #0
 800e9b2:	bf18      	it	ne
 800e9b4:	2001      	movne	r0, #1
 800e9b6:	e72b      	b.n	800e810 <__ieee754_pow+0x220>
 800e9b8:	60000000 	.word	0x60000000
 800e9bc:	3ff71547 	.word	0x3ff71547
 800e9c0:	f85ddf44 	.word	0xf85ddf44
 800e9c4:	3e54ae0b 	.word	0x3e54ae0b
 800e9c8:	55555555 	.word	0x55555555
 800e9cc:	3fd55555 	.word	0x3fd55555
 800e9d0:	652b82fe 	.word	0x652b82fe
 800e9d4:	3ff71547 	.word	0x3ff71547
 800e9d8:	00000000 	.word	0x00000000
 800e9dc:	bff00000 	.word	0xbff00000
 800e9e0:	3ff00000 	.word	0x3ff00000
 800e9e4:	3fd00000 	.word	0x3fd00000
 800e9e8:	3fe00000 	.word	0x3fe00000
 800e9ec:	408fffff 	.word	0x408fffff
 800e9f0:	4bd5      	ldr	r3, [pc, #852]	; (800ed48 <__ieee754_pow+0x758>)
 800e9f2:	402b      	ands	r3, r5
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	b92b      	cbnz	r3, 800ea04 <__ieee754_pow+0x414>
 800e9f8:	4bd4      	ldr	r3, [pc, #848]	; (800ed4c <__ieee754_pow+0x75c>)
 800e9fa:	f7f1 fdfd 	bl	80005f8 <__aeabi_dmul>
 800e9fe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ea02:	460c      	mov	r4, r1
 800ea04:	1523      	asrs	r3, r4, #20
 800ea06:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ea0a:	4413      	add	r3, r2
 800ea0c:	9305      	str	r3, [sp, #20]
 800ea0e:	4bd0      	ldr	r3, [pc, #832]	; (800ed50 <__ieee754_pow+0x760>)
 800ea10:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ea14:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ea18:	429c      	cmp	r4, r3
 800ea1a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ea1e:	dd08      	ble.n	800ea32 <__ieee754_pow+0x442>
 800ea20:	4bcc      	ldr	r3, [pc, #816]	; (800ed54 <__ieee754_pow+0x764>)
 800ea22:	429c      	cmp	r4, r3
 800ea24:	f340 8162 	ble.w	800ecec <__ieee754_pow+0x6fc>
 800ea28:	9b05      	ldr	r3, [sp, #20]
 800ea2a:	3301      	adds	r3, #1
 800ea2c:	9305      	str	r3, [sp, #20]
 800ea2e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ea32:	2400      	movs	r4, #0
 800ea34:	00e3      	lsls	r3, r4, #3
 800ea36:	9307      	str	r3, [sp, #28]
 800ea38:	4bc7      	ldr	r3, [pc, #796]	; (800ed58 <__ieee754_pow+0x768>)
 800ea3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ea3e:	ed93 7b00 	vldr	d7, [r3]
 800ea42:	4629      	mov	r1, r5
 800ea44:	ec53 2b17 	vmov	r2, r3, d7
 800ea48:	eeb0 9a47 	vmov.f32	s18, s14
 800ea4c:	eef0 9a67 	vmov.f32	s19, s15
 800ea50:	4682      	mov	sl, r0
 800ea52:	f7f1 fc19 	bl	8000288 <__aeabi_dsub>
 800ea56:	4652      	mov	r2, sl
 800ea58:	4606      	mov	r6, r0
 800ea5a:	460f      	mov	r7, r1
 800ea5c:	462b      	mov	r3, r5
 800ea5e:	ec51 0b19 	vmov	r0, r1, d9
 800ea62:	f7f1 fc13 	bl	800028c <__adddf3>
 800ea66:	4602      	mov	r2, r0
 800ea68:	460b      	mov	r3, r1
 800ea6a:	2000      	movs	r0, #0
 800ea6c:	49bb      	ldr	r1, [pc, #748]	; (800ed5c <__ieee754_pow+0x76c>)
 800ea6e:	f7f1 feed 	bl	800084c <__aeabi_ddiv>
 800ea72:	ec41 0b1a 	vmov	d10, r0, r1
 800ea76:	4602      	mov	r2, r0
 800ea78:	460b      	mov	r3, r1
 800ea7a:	4630      	mov	r0, r6
 800ea7c:	4639      	mov	r1, r7
 800ea7e:	f7f1 fdbb 	bl	80005f8 <__aeabi_dmul>
 800ea82:	2300      	movs	r3, #0
 800ea84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea88:	9302      	str	r3, [sp, #8]
 800ea8a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ea8e:	46ab      	mov	fp, r5
 800ea90:	106d      	asrs	r5, r5, #1
 800ea92:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ea96:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ea9a:	ec41 0b18 	vmov	d8, r0, r1
 800ea9e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	4640      	mov	r0, r8
 800eaa6:	4649      	mov	r1, r9
 800eaa8:	4614      	mov	r4, r2
 800eaaa:	461d      	mov	r5, r3
 800eaac:	f7f1 fda4 	bl	80005f8 <__aeabi_dmul>
 800eab0:	4602      	mov	r2, r0
 800eab2:	460b      	mov	r3, r1
 800eab4:	4630      	mov	r0, r6
 800eab6:	4639      	mov	r1, r7
 800eab8:	f7f1 fbe6 	bl	8000288 <__aeabi_dsub>
 800eabc:	ec53 2b19 	vmov	r2, r3, d9
 800eac0:	4606      	mov	r6, r0
 800eac2:	460f      	mov	r7, r1
 800eac4:	4620      	mov	r0, r4
 800eac6:	4629      	mov	r1, r5
 800eac8:	f7f1 fbde 	bl	8000288 <__aeabi_dsub>
 800eacc:	4602      	mov	r2, r0
 800eace:	460b      	mov	r3, r1
 800ead0:	4650      	mov	r0, sl
 800ead2:	4659      	mov	r1, fp
 800ead4:	f7f1 fbd8 	bl	8000288 <__aeabi_dsub>
 800ead8:	4642      	mov	r2, r8
 800eada:	464b      	mov	r3, r9
 800eadc:	f7f1 fd8c 	bl	80005f8 <__aeabi_dmul>
 800eae0:	4602      	mov	r2, r0
 800eae2:	460b      	mov	r3, r1
 800eae4:	4630      	mov	r0, r6
 800eae6:	4639      	mov	r1, r7
 800eae8:	f7f1 fbce 	bl	8000288 <__aeabi_dsub>
 800eaec:	ec53 2b1a 	vmov	r2, r3, d10
 800eaf0:	f7f1 fd82 	bl	80005f8 <__aeabi_dmul>
 800eaf4:	ec53 2b18 	vmov	r2, r3, d8
 800eaf8:	ec41 0b19 	vmov	d9, r0, r1
 800eafc:	ec51 0b18 	vmov	r0, r1, d8
 800eb00:	f7f1 fd7a 	bl	80005f8 <__aeabi_dmul>
 800eb04:	a37c      	add	r3, pc, #496	; (adr r3, 800ecf8 <__ieee754_pow+0x708>)
 800eb06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb0a:	4604      	mov	r4, r0
 800eb0c:	460d      	mov	r5, r1
 800eb0e:	f7f1 fd73 	bl	80005f8 <__aeabi_dmul>
 800eb12:	a37b      	add	r3, pc, #492	; (adr r3, 800ed00 <__ieee754_pow+0x710>)
 800eb14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb18:	f7f1 fbb8 	bl	800028c <__adddf3>
 800eb1c:	4622      	mov	r2, r4
 800eb1e:	462b      	mov	r3, r5
 800eb20:	f7f1 fd6a 	bl	80005f8 <__aeabi_dmul>
 800eb24:	a378      	add	r3, pc, #480	; (adr r3, 800ed08 <__ieee754_pow+0x718>)
 800eb26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb2a:	f7f1 fbaf 	bl	800028c <__adddf3>
 800eb2e:	4622      	mov	r2, r4
 800eb30:	462b      	mov	r3, r5
 800eb32:	f7f1 fd61 	bl	80005f8 <__aeabi_dmul>
 800eb36:	a376      	add	r3, pc, #472	; (adr r3, 800ed10 <__ieee754_pow+0x720>)
 800eb38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb3c:	f7f1 fba6 	bl	800028c <__adddf3>
 800eb40:	4622      	mov	r2, r4
 800eb42:	462b      	mov	r3, r5
 800eb44:	f7f1 fd58 	bl	80005f8 <__aeabi_dmul>
 800eb48:	a373      	add	r3, pc, #460	; (adr r3, 800ed18 <__ieee754_pow+0x728>)
 800eb4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb4e:	f7f1 fb9d 	bl	800028c <__adddf3>
 800eb52:	4622      	mov	r2, r4
 800eb54:	462b      	mov	r3, r5
 800eb56:	f7f1 fd4f 	bl	80005f8 <__aeabi_dmul>
 800eb5a:	a371      	add	r3, pc, #452	; (adr r3, 800ed20 <__ieee754_pow+0x730>)
 800eb5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb60:	f7f1 fb94 	bl	800028c <__adddf3>
 800eb64:	4622      	mov	r2, r4
 800eb66:	4606      	mov	r6, r0
 800eb68:	460f      	mov	r7, r1
 800eb6a:	462b      	mov	r3, r5
 800eb6c:	4620      	mov	r0, r4
 800eb6e:	4629      	mov	r1, r5
 800eb70:	f7f1 fd42 	bl	80005f8 <__aeabi_dmul>
 800eb74:	4602      	mov	r2, r0
 800eb76:	460b      	mov	r3, r1
 800eb78:	4630      	mov	r0, r6
 800eb7a:	4639      	mov	r1, r7
 800eb7c:	f7f1 fd3c 	bl	80005f8 <__aeabi_dmul>
 800eb80:	4642      	mov	r2, r8
 800eb82:	4604      	mov	r4, r0
 800eb84:	460d      	mov	r5, r1
 800eb86:	464b      	mov	r3, r9
 800eb88:	ec51 0b18 	vmov	r0, r1, d8
 800eb8c:	f7f1 fb7e 	bl	800028c <__adddf3>
 800eb90:	ec53 2b19 	vmov	r2, r3, d9
 800eb94:	f7f1 fd30 	bl	80005f8 <__aeabi_dmul>
 800eb98:	4622      	mov	r2, r4
 800eb9a:	462b      	mov	r3, r5
 800eb9c:	f7f1 fb76 	bl	800028c <__adddf3>
 800eba0:	4642      	mov	r2, r8
 800eba2:	4682      	mov	sl, r0
 800eba4:	468b      	mov	fp, r1
 800eba6:	464b      	mov	r3, r9
 800eba8:	4640      	mov	r0, r8
 800ebaa:	4649      	mov	r1, r9
 800ebac:	f7f1 fd24 	bl	80005f8 <__aeabi_dmul>
 800ebb0:	4b6b      	ldr	r3, [pc, #428]	; (800ed60 <__ieee754_pow+0x770>)
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	4606      	mov	r6, r0
 800ebb6:	460f      	mov	r7, r1
 800ebb8:	f7f1 fb68 	bl	800028c <__adddf3>
 800ebbc:	4652      	mov	r2, sl
 800ebbe:	465b      	mov	r3, fp
 800ebc0:	f7f1 fb64 	bl	800028c <__adddf3>
 800ebc4:	2000      	movs	r0, #0
 800ebc6:	4604      	mov	r4, r0
 800ebc8:	460d      	mov	r5, r1
 800ebca:	4602      	mov	r2, r0
 800ebcc:	460b      	mov	r3, r1
 800ebce:	4640      	mov	r0, r8
 800ebd0:	4649      	mov	r1, r9
 800ebd2:	f7f1 fd11 	bl	80005f8 <__aeabi_dmul>
 800ebd6:	4b62      	ldr	r3, [pc, #392]	; (800ed60 <__ieee754_pow+0x770>)
 800ebd8:	4680      	mov	r8, r0
 800ebda:	4689      	mov	r9, r1
 800ebdc:	2200      	movs	r2, #0
 800ebde:	4620      	mov	r0, r4
 800ebe0:	4629      	mov	r1, r5
 800ebe2:	f7f1 fb51 	bl	8000288 <__aeabi_dsub>
 800ebe6:	4632      	mov	r2, r6
 800ebe8:	463b      	mov	r3, r7
 800ebea:	f7f1 fb4d 	bl	8000288 <__aeabi_dsub>
 800ebee:	4602      	mov	r2, r0
 800ebf0:	460b      	mov	r3, r1
 800ebf2:	4650      	mov	r0, sl
 800ebf4:	4659      	mov	r1, fp
 800ebf6:	f7f1 fb47 	bl	8000288 <__aeabi_dsub>
 800ebfa:	ec53 2b18 	vmov	r2, r3, d8
 800ebfe:	f7f1 fcfb 	bl	80005f8 <__aeabi_dmul>
 800ec02:	4622      	mov	r2, r4
 800ec04:	4606      	mov	r6, r0
 800ec06:	460f      	mov	r7, r1
 800ec08:	462b      	mov	r3, r5
 800ec0a:	ec51 0b19 	vmov	r0, r1, d9
 800ec0e:	f7f1 fcf3 	bl	80005f8 <__aeabi_dmul>
 800ec12:	4602      	mov	r2, r0
 800ec14:	460b      	mov	r3, r1
 800ec16:	4630      	mov	r0, r6
 800ec18:	4639      	mov	r1, r7
 800ec1a:	f7f1 fb37 	bl	800028c <__adddf3>
 800ec1e:	4606      	mov	r6, r0
 800ec20:	460f      	mov	r7, r1
 800ec22:	4602      	mov	r2, r0
 800ec24:	460b      	mov	r3, r1
 800ec26:	4640      	mov	r0, r8
 800ec28:	4649      	mov	r1, r9
 800ec2a:	f7f1 fb2f 	bl	800028c <__adddf3>
 800ec2e:	a33e      	add	r3, pc, #248	; (adr r3, 800ed28 <__ieee754_pow+0x738>)
 800ec30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec34:	2000      	movs	r0, #0
 800ec36:	4604      	mov	r4, r0
 800ec38:	460d      	mov	r5, r1
 800ec3a:	f7f1 fcdd 	bl	80005f8 <__aeabi_dmul>
 800ec3e:	4642      	mov	r2, r8
 800ec40:	ec41 0b18 	vmov	d8, r0, r1
 800ec44:	464b      	mov	r3, r9
 800ec46:	4620      	mov	r0, r4
 800ec48:	4629      	mov	r1, r5
 800ec4a:	f7f1 fb1d 	bl	8000288 <__aeabi_dsub>
 800ec4e:	4602      	mov	r2, r0
 800ec50:	460b      	mov	r3, r1
 800ec52:	4630      	mov	r0, r6
 800ec54:	4639      	mov	r1, r7
 800ec56:	f7f1 fb17 	bl	8000288 <__aeabi_dsub>
 800ec5a:	a335      	add	r3, pc, #212	; (adr r3, 800ed30 <__ieee754_pow+0x740>)
 800ec5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec60:	f7f1 fcca 	bl	80005f8 <__aeabi_dmul>
 800ec64:	a334      	add	r3, pc, #208	; (adr r3, 800ed38 <__ieee754_pow+0x748>)
 800ec66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec6a:	4606      	mov	r6, r0
 800ec6c:	460f      	mov	r7, r1
 800ec6e:	4620      	mov	r0, r4
 800ec70:	4629      	mov	r1, r5
 800ec72:	f7f1 fcc1 	bl	80005f8 <__aeabi_dmul>
 800ec76:	4602      	mov	r2, r0
 800ec78:	460b      	mov	r3, r1
 800ec7a:	4630      	mov	r0, r6
 800ec7c:	4639      	mov	r1, r7
 800ec7e:	f7f1 fb05 	bl	800028c <__adddf3>
 800ec82:	9a07      	ldr	r2, [sp, #28]
 800ec84:	4b37      	ldr	r3, [pc, #220]	; (800ed64 <__ieee754_pow+0x774>)
 800ec86:	4413      	add	r3, r2
 800ec88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec8c:	f7f1 fafe 	bl	800028c <__adddf3>
 800ec90:	4682      	mov	sl, r0
 800ec92:	9805      	ldr	r0, [sp, #20]
 800ec94:	468b      	mov	fp, r1
 800ec96:	f7f1 fc45 	bl	8000524 <__aeabi_i2d>
 800ec9a:	9a07      	ldr	r2, [sp, #28]
 800ec9c:	4b32      	ldr	r3, [pc, #200]	; (800ed68 <__ieee754_pow+0x778>)
 800ec9e:	4413      	add	r3, r2
 800eca0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800eca4:	4606      	mov	r6, r0
 800eca6:	460f      	mov	r7, r1
 800eca8:	4652      	mov	r2, sl
 800ecaa:	465b      	mov	r3, fp
 800ecac:	ec51 0b18 	vmov	r0, r1, d8
 800ecb0:	f7f1 faec 	bl	800028c <__adddf3>
 800ecb4:	4642      	mov	r2, r8
 800ecb6:	464b      	mov	r3, r9
 800ecb8:	f7f1 fae8 	bl	800028c <__adddf3>
 800ecbc:	4632      	mov	r2, r6
 800ecbe:	463b      	mov	r3, r7
 800ecc0:	f7f1 fae4 	bl	800028c <__adddf3>
 800ecc4:	2000      	movs	r0, #0
 800ecc6:	4632      	mov	r2, r6
 800ecc8:	463b      	mov	r3, r7
 800ecca:	4604      	mov	r4, r0
 800eccc:	460d      	mov	r5, r1
 800ecce:	f7f1 fadb 	bl	8000288 <__aeabi_dsub>
 800ecd2:	4642      	mov	r2, r8
 800ecd4:	464b      	mov	r3, r9
 800ecd6:	f7f1 fad7 	bl	8000288 <__aeabi_dsub>
 800ecda:	ec53 2b18 	vmov	r2, r3, d8
 800ecde:	f7f1 fad3 	bl	8000288 <__aeabi_dsub>
 800ece2:	4602      	mov	r2, r0
 800ece4:	460b      	mov	r3, r1
 800ece6:	4650      	mov	r0, sl
 800ece8:	4659      	mov	r1, fp
 800ecea:	e610      	b.n	800e90e <__ieee754_pow+0x31e>
 800ecec:	2401      	movs	r4, #1
 800ecee:	e6a1      	b.n	800ea34 <__ieee754_pow+0x444>
 800ecf0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800ed40 <__ieee754_pow+0x750>
 800ecf4:	e617      	b.n	800e926 <__ieee754_pow+0x336>
 800ecf6:	bf00      	nop
 800ecf8:	4a454eef 	.word	0x4a454eef
 800ecfc:	3fca7e28 	.word	0x3fca7e28
 800ed00:	93c9db65 	.word	0x93c9db65
 800ed04:	3fcd864a 	.word	0x3fcd864a
 800ed08:	a91d4101 	.word	0xa91d4101
 800ed0c:	3fd17460 	.word	0x3fd17460
 800ed10:	518f264d 	.word	0x518f264d
 800ed14:	3fd55555 	.word	0x3fd55555
 800ed18:	db6fabff 	.word	0xdb6fabff
 800ed1c:	3fdb6db6 	.word	0x3fdb6db6
 800ed20:	33333303 	.word	0x33333303
 800ed24:	3fe33333 	.word	0x3fe33333
 800ed28:	e0000000 	.word	0xe0000000
 800ed2c:	3feec709 	.word	0x3feec709
 800ed30:	dc3a03fd 	.word	0xdc3a03fd
 800ed34:	3feec709 	.word	0x3feec709
 800ed38:	145b01f5 	.word	0x145b01f5
 800ed3c:	be3e2fe0 	.word	0xbe3e2fe0
 800ed40:	00000000 	.word	0x00000000
 800ed44:	3ff00000 	.word	0x3ff00000
 800ed48:	7ff00000 	.word	0x7ff00000
 800ed4c:	43400000 	.word	0x43400000
 800ed50:	0003988e 	.word	0x0003988e
 800ed54:	000bb679 	.word	0x000bb679
 800ed58:	08013580 	.word	0x08013580
 800ed5c:	3ff00000 	.word	0x3ff00000
 800ed60:	40080000 	.word	0x40080000
 800ed64:	080135a0 	.word	0x080135a0
 800ed68:	08013590 	.word	0x08013590
 800ed6c:	a3b5      	add	r3, pc, #724	; (adr r3, 800f044 <__ieee754_pow+0xa54>)
 800ed6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed72:	4640      	mov	r0, r8
 800ed74:	4649      	mov	r1, r9
 800ed76:	f7f1 fa89 	bl	800028c <__adddf3>
 800ed7a:	4622      	mov	r2, r4
 800ed7c:	ec41 0b1a 	vmov	d10, r0, r1
 800ed80:	462b      	mov	r3, r5
 800ed82:	4630      	mov	r0, r6
 800ed84:	4639      	mov	r1, r7
 800ed86:	f7f1 fa7f 	bl	8000288 <__aeabi_dsub>
 800ed8a:	4602      	mov	r2, r0
 800ed8c:	460b      	mov	r3, r1
 800ed8e:	ec51 0b1a 	vmov	r0, r1, d10
 800ed92:	f7f1 fec1 	bl	8000b18 <__aeabi_dcmpgt>
 800ed96:	2800      	cmp	r0, #0
 800ed98:	f47f ae04 	bne.w	800e9a4 <__ieee754_pow+0x3b4>
 800ed9c:	4aa4      	ldr	r2, [pc, #656]	; (800f030 <__ieee754_pow+0xa40>)
 800ed9e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800eda2:	4293      	cmp	r3, r2
 800eda4:	f340 8108 	ble.w	800efb8 <__ieee754_pow+0x9c8>
 800eda8:	151b      	asrs	r3, r3, #20
 800edaa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800edae:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800edb2:	fa4a f303 	asr.w	r3, sl, r3
 800edb6:	445b      	add	r3, fp
 800edb8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800edbc:	4e9d      	ldr	r6, [pc, #628]	; (800f034 <__ieee754_pow+0xa44>)
 800edbe:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800edc2:	4116      	asrs	r6, r2
 800edc4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800edc8:	2000      	movs	r0, #0
 800edca:	ea23 0106 	bic.w	r1, r3, r6
 800edce:	f1c2 0214 	rsb	r2, r2, #20
 800edd2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800edd6:	fa4a fa02 	asr.w	sl, sl, r2
 800edda:	f1bb 0f00 	cmp.w	fp, #0
 800edde:	4602      	mov	r2, r0
 800ede0:	460b      	mov	r3, r1
 800ede2:	4620      	mov	r0, r4
 800ede4:	4629      	mov	r1, r5
 800ede6:	bfb8      	it	lt
 800ede8:	f1ca 0a00 	rsblt	sl, sl, #0
 800edec:	f7f1 fa4c 	bl	8000288 <__aeabi_dsub>
 800edf0:	ec41 0b19 	vmov	d9, r0, r1
 800edf4:	4642      	mov	r2, r8
 800edf6:	464b      	mov	r3, r9
 800edf8:	ec51 0b19 	vmov	r0, r1, d9
 800edfc:	f7f1 fa46 	bl	800028c <__adddf3>
 800ee00:	a37b      	add	r3, pc, #492	; (adr r3, 800eff0 <__ieee754_pow+0xa00>)
 800ee02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee06:	2000      	movs	r0, #0
 800ee08:	4604      	mov	r4, r0
 800ee0a:	460d      	mov	r5, r1
 800ee0c:	f7f1 fbf4 	bl	80005f8 <__aeabi_dmul>
 800ee10:	ec53 2b19 	vmov	r2, r3, d9
 800ee14:	4606      	mov	r6, r0
 800ee16:	460f      	mov	r7, r1
 800ee18:	4620      	mov	r0, r4
 800ee1a:	4629      	mov	r1, r5
 800ee1c:	f7f1 fa34 	bl	8000288 <__aeabi_dsub>
 800ee20:	4602      	mov	r2, r0
 800ee22:	460b      	mov	r3, r1
 800ee24:	4640      	mov	r0, r8
 800ee26:	4649      	mov	r1, r9
 800ee28:	f7f1 fa2e 	bl	8000288 <__aeabi_dsub>
 800ee2c:	a372      	add	r3, pc, #456	; (adr r3, 800eff8 <__ieee754_pow+0xa08>)
 800ee2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee32:	f7f1 fbe1 	bl	80005f8 <__aeabi_dmul>
 800ee36:	a372      	add	r3, pc, #456	; (adr r3, 800f000 <__ieee754_pow+0xa10>)
 800ee38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee3c:	4680      	mov	r8, r0
 800ee3e:	4689      	mov	r9, r1
 800ee40:	4620      	mov	r0, r4
 800ee42:	4629      	mov	r1, r5
 800ee44:	f7f1 fbd8 	bl	80005f8 <__aeabi_dmul>
 800ee48:	4602      	mov	r2, r0
 800ee4a:	460b      	mov	r3, r1
 800ee4c:	4640      	mov	r0, r8
 800ee4e:	4649      	mov	r1, r9
 800ee50:	f7f1 fa1c 	bl	800028c <__adddf3>
 800ee54:	4604      	mov	r4, r0
 800ee56:	460d      	mov	r5, r1
 800ee58:	4602      	mov	r2, r0
 800ee5a:	460b      	mov	r3, r1
 800ee5c:	4630      	mov	r0, r6
 800ee5e:	4639      	mov	r1, r7
 800ee60:	f7f1 fa14 	bl	800028c <__adddf3>
 800ee64:	4632      	mov	r2, r6
 800ee66:	463b      	mov	r3, r7
 800ee68:	4680      	mov	r8, r0
 800ee6a:	4689      	mov	r9, r1
 800ee6c:	f7f1 fa0c 	bl	8000288 <__aeabi_dsub>
 800ee70:	4602      	mov	r2, r0
 800ee72:	460b      	mov	r3, r1
 800ee74:	4620      	mov	r0, r4
 800ee76:	4629      	mov	r1, r5
 800ee78:	f7f1 fa06 	bl	8000288 <__aeabi_dsub>
 800ee7c:	4642      	mov	r2, r8
 800ee7e:	4606      	mov	r6, r0
 800ee80:	460f      	mov	r7, r1
 800ee82:	464b      	mov	r3, r9
 800ee84:	4640      	mov	r0, r8
 800ee86:	4649      	mov	r1, r9
 800ee88:	f7f1 fbb6 	bl	80005f8 <__aeabi_dmul>
 800ee8c:	a35e      	add	r3, pc, #376	; (adr r3, 800f008 <__ieee754_pow+0xa18>)
 800ee8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee92:	4604      	mov	r4, r0
 800ee94:	460d      	mov	r5, r1
 800ee96:	f7f1 fbaf 	bl	80005f8 <__aeabi_dmul>
 800ee9a:	a35d      	add	r3, pc, #372	; (adr r3, 800f010 <__ieee754_pow+0xa20>)
 800ee9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eea0:	f7f1 f9f2 	bl	8000288 <__aeabi_dsub>
 800eea4:	4622      	mov	r2, r4
 800eea6:	462b      	mov	r3, r5
 800eea8:	f7f1 fba6 	bl	80005f8 <__aeabi_dmul>
 800eeac:	a35a      	add	r3, pc, #360	; (adr r3, 800f018 <__ieee754_pow+0xa28>)
 800eeae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeb2:	f7f1 f9eb 	bl	800028c <__adddf3>
 800eeb6:	4622      	mov	r2, r4
 800eeb8:	462b      	mov	r3, r5
 800eeba:	f7f1 fb9d 	bl	80005f8 <__aeabi_dmul>
 800eebe:	a358      	add	r3, pc, #352	; (adr r3, 800f020 <__ieee754_pow+0xa30>)
 800eec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eec4:	f7f1 f9e0 	bl	8000288 <__aeabi_dsub>
 800eec8:	4622      	mov	r2, r4
 800eeca:	462b      	mov	r3, r5
 800eecc:	f7f1 fb94 	bl	80005f8 <__aeabi_dmul>
 800eed0:	a355      	add	r3, pc, #340	; (adr r3, 800f028 <__ieee754_pow+0xa38>)
 800eed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eed6:	f7f1 f9d9 	bl	800028c <__adddf3>
 800eeda:	4622      	mov	r2, r4
 800eedc:	462b      	mov	r3, r5
 800eede:	f7f1 fb8b 	bl	80005f8 <__aeabi_dmul>
 800eee2:	4602      	mov	r2, r0
 800eee4:	460b      	mov	r3, r1
 800eee6:	4640      	mov	r0, r8
 800eee8:	4649      	mov	r1, r9
 800eeea:	f7f1 f9cd 	bl	8000288 <__aeabi_dsub>
 800eeee:	4604      	mov	r4, r0
 800eef0:	460d      	mov	r5, r1
 800eef2:	4602      	mov	r2, r0
 800eef4:	460b      	mov	r3, r1
 800eef6:	4640      	mov	r0, r8
 800eef8:	4649      	mov	r1, r9
 800eefa:	f7f1 fb7d 	bl	80005f8 <__aeabi_dmul>
 800eefe:	2200      	movs	r2, #0
 800ef00:	ec41 0b19 	vmov	d9, r0, r1
 800ef04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ef08:	4620      	mov	r0, r4
 800ef0a:	4629      	mov	r1, r5
 800ef0c:	f7f1 f9bc 	bl	8000288 <__aeabi_dsub>
 800ef10:	4602      	mov	r2, r0
 800ef12:	460b      	mov	r3, r1
 800ef14:	ec51 0b19 	vmov	r0, r1, d9
 800ef18:	f7f1 fc98 	bl	800084c <__aeabi_ddiv>
 800ef1c:	4632      	mov	r2, r6
 800ef1e:	4604      	mov	r4, r0
 800ef20:	460d      	mov	r5, r1
 800ef22:	463b      	mov	r3, r7
 800ef24:	4640      	mov	r0, r8
 800ef26:	4649      	mov	r1, r9
 800ef28:	f7f1 fb66 	bl	80005f8 <__aeabi_dmul>
 800ef2c:	4632      	mov	r2, r6
 800ef2e:	463b      	mov	r3, r7
 800ef30:	f7f1 f9ac 	bl	800028c <__adddf3>
 800ef34:	4602      	mov	r2, r0
 800ef36:	460b      	mov	r3, r1
 800ef38:	4620      	mov	r0, r4
 800ef3a:	4629      	mov	r1, r5
 800ef3c:	f7f1 f9a4 	bl	8000288 <__aeabi_dsub>
 800ef40:	4642      	mov	r2, r8
 800ef42:	464b      	mov	r3, r9
 800ef44:	f7f1 f9a0 	bl	8000288 <__aeabi_dsub>
 800ef48:	460b      	mov	r3, r1
 800ef4a:	4602      	mov	r2, r0
 800ef4c:	493a      	ldr	r1, [pc, #232]	; (800f038 <__ieee754_pow+0xa48>)
 800ef4e:	2000      	movs	r0, #0
 800ef50:	f7f1 f99a 	bl	8000288 <__aeabi_dsub>
 800ef54:	ec41 0b10 	vmov	d0, r0, r1
 800ef58:	ee10 3a90 	vmov	r3, s1
 800ef5c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ef60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ef64:	da2b      	bge.n	800efbe <__ieee754_pow+0x9ce>
 800ef66:	4650      	mov	r0, sl
 800ef68:	f000 fb06 	bl	800f578 <scalbn>
 800ef6c:	ec51 0b10 	vmov	r0, r1, d0
 800ef70:	ec53 2b18 	vmov	r2, r3, d8
 800ef74:	f7ff bbed 	b.w	800e752 <__ieee754_pow+0x162>
 800ef78:	4b30      	ldr	r3, [pc, #192]	; (800f03c <__ieee754_pow+0xa4c>)
 800ef7a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ef7e:	429e      	cmp	r6, r3
 800ef80:	f77f af0c 	ble.w	800ed9c <__ieee754_pow+0x7ac>
 800ef84:	4b2e      	ldr	r3, [pc, #184]	; (800f040 <__ieee754_pow+0xa50>)
 800ef86:	440b      	add	r3, r1
 800ef88:	4303      	orrs	r3, r0
 800ef8a:	d009      	beq.n	800efa0 <__ieee754_pow+0x9b0>
 800ef8c:	ec51 0b18 	vmov	r0, r1, d8
 800ef90:	2200      	movs	r2, #0
 800ef92:	2300      	movs	r3, #0
 800ef94:	f7f1 fda2 	bl	8000adc <__aeabi_dcmplt>
 800ef98:	3800      	subs	r0, #0
 800ef9a:	bf18      	it	ne
 800ef9c:	2001      	movne	r0, #1
 800ef9e:	e447      	b.n	800e830 <__ieee754_pow+0x240>
 800efa0:	4622      	mov	r2, r4
 800efa2:	462b      	mov	r3, r5
 800efa4:	f7f1 f970 	bl	8000288 <__aeabi_dsub>
 800efa8:	4642      	mov	r2, r8
 800efaa:	464b      	mov	r3, r9
 800efac:	f7f1 fdaa 	bl	8000b04 <__aeabi_dcmpge>
 800efb0:	2800      	cmp	r0, #0
 800efb2:	f43f aef3 	beq.w	800ed9c <__ieee754_pow+0x7ac>
 800efb6:	e7e9      	b.n	800ef8c <__ieee754_pow+0x99c>
 800efb8:	f04f 0a00 	mov.w	sl, #0
 800efbc:	e71a      	b.n	800edf4 <__ieee754_pow+0x804>
 800efbe:	ec51 0b10 	vmov	r0, r1, d0
 800efc2:	4619      	mov	r1, r3
 800efc4:	e7d4      	b.n	800ef70 <__ieee754_pow+0x980>
 800efc6:	491c      	ldr	r1, [pc, #112]	; (800f038 <__ieee754_pow+0xa48>)
 800efc8:	2000      	movs	r0, #0
 800efca:	f7ff bb30 	b.w	800e62e <__ieee754_pow+0x3e>
 800efce:	2000      	movs	r0, #0
 800efd0:	2100      	movs	r1, #0
 800efd2:	f7ff bb2c 	b.w	800e62e <__ieee754_pow+0x3e>
 800efd6:	4630      	mov	r0, r6
 800efd8:	4639      	mov	r1, r7
 800efda:	f7ff bb28 	b.w	800e62e <__ieee754_pow+0x3e>
 800efde:	9204      	str	r2, [sp, #16]
 800efe0:	f7ff bb7a 	b.w	800e6d8 <__ieee754_pow+0xe8>
 800efe4:	2300      	movs	r3, #0
 800efe6:	f7ff bb64 	b.w	800e6b2 <__ieee754_pow+0xc2>
 800efea:	bf00      	nop
 800efec:	f3af 8000 	nop.w
 800eff0:	00000000 	.word	0x00000000
 800eff4:	3fe62e43 	.word	0x3fe62e43
 800eff8:	fefa39ef 	.word	0xfefa39ef
 800effc:	3fe62e42 	.word	0x3fe62e42
 800f000:	0ca86c39 	.word	0x0ca86c39
 800f004:	be205c61 	.word	0xbe205c61
 800f008:	72bea4d0 	.word	0x72bea4d0
 800f00c:	3e663769 	.word	0x3e663769
 800f010:	c5d26bf1 	.word	0xc5d26bf1
 800f014:	3ebbbd41 	.word	0x3ebbbd41
 800f018:	af25de2c 	.word	0xaf25de2c
 800f01c:	3f11566a 	.word	0x3f11566a
 800f020:	16bebd93 	.word	0x16bebd93
 800f024:	3f66c16c 	.word	0x3f66c16c
 800f028:	5555553e 	.word	0x5555553e
 800f02c:	3fc55555 	.word	0x3fc55555
 800f030:	3fe00000 	.word	0x3fe00000
 800f034:	000fffff 	.word	0x000fffff
 800f038:	3ff00000 	.word	0x3ff00000
 800f03c:	4090cbff 	.word	0x4090cbff
 800f040:	3f6f3400 	.word	0x3f6f3400
 800f044:	652b82fe 	.word	0x652b82fe
 800f048:	3c971547 	.word	0x3c971547

0800f04c <__ieee754_sqrt>:
 800f04c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f050:	ec55 4b10 	vmov	r4, r5, d0
 800f054:	4e55      	ldr	r6, [pc, #340]	; (800f1ac <__ieee754_sqrt+0x160>)
 800f056:	43ae      	bics	r6, r5
 800f058:	ee10 0a10 	vmov	r0, s0
 800f05c:	ee10 3a10 	vmov	r3, s0
 800f060:	462a      	mov	r2, r5
 800f062:	4629      	mov	r1, r5
 800f064:	d110      	bne.n	800f088 <__ieee754_sqrt+0x3c>
 800f066:	ee10 2a10 	vmov	r2, s0
 800f06a:	462b      	mov	r3, r5
 800f06c:	f7f1 fac4 	bl	80005f8 <__aeabi_dmul>
 800f070:	4602      	mov	r2, r0
 800f072:	460b      	mov	r3, r1
 800f074:	4620      	mov	r0, r4
 800f076:	4629      	mov	r1, r5
 800f078:	f7f1 f908 	bl	800028c <__adddf3>
 800f07c:	4604      	mov	r4, r0
 800f07e:	460d      	mov	r5, r1
 800f080:	ec45 4b10 	vmov	d0, r4, r5
 800f084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f088:	2d00      	cmp	r5, #0
 800f08a:	dc10      	bgt.n	800f0ae <__ieee754_sqrt+0x62>
 800f08c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f090:	4330      	orrs	r0, r6
 800f092:	d0f5      	beq.n	800f080 <__ieee754_sqrt+0x34>
 800f094:	b15d      	cbz	r5, 800f0ae <__ieee754_sqrt+0x62>
 800f096:	ee10 2a10 	vmov	r2, s0
 800f09a:	462b      	mov	r3, r5
 800f09c:	ee10 0a10 	vmov	r0, s0
 800f0a0:	f7f1 f8f2 	bl	8000288 <__aeabi_dsub>
 800f0a4:	4602      	mov	r2, r0
 800f0a6:	460b      	mov	r3, r1
 800f0a8:	f7f1 fbd0 	bl	800084c <__aeabi_ddiv>
 800f0ac:	e7e6      	b.n	800f07c <__ieee754_sqrt+0x30>
 800f0ae:	1512      	asrs	r2, r2, #20
 800f0b0:	d074      	beq.n	800f19c <__ieee754_sqrt+0x150>
 800f0b2:	07d4      	lsls	r4, r2, #31
 800f0b4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800f0b8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800f0bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800f0c0:	bf5e      	ittt	pl
 800f0c2:	0fda      	lsrpl	r2, r3, #31
 800f0c4:	005b      	lslpl	r3, r3, #1
 800f0c6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800f0ca:	2400      	movs	r4, #0
 800f0cc:	0fda      	lsrs	r2, r3, #31
 800f0ce:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800f0d2:	107f      	asrs	r7, r7, #1
 800f0d4:	005b      	lsls	r3, r3, #1
 800f0d6:	2516      	movs	r5, #22
 800f0d8:	4620      	mov	r0, r4
 800f0da:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f0de:	1886      	adds	r6, r0, r2
 800f0e0:	428e      	cmp	r6, r1
 800f0e2:	bfde      	ittt	le
 800f0e4:	1b89      	suble	r1, r1, r6
 800f0e6:	18b0      	addle	r0, r6, r2
 800f0e8:	18a4      	addle	r4, r4, r2
 800f0ea:	0049      	lsls	r1, r1, #1
 800f0ec:	3d01      	subs	r5, #1
 800f0ee:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800f0f2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800f0f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f0fa:	d1f0      	bne.n	800f0de <__ieee754_sqrt+0x92>
 800f0fc:	462a      	mov	r2, r5
 800f0fe:	f04f 0e20 	mov.w	lr, #32
 800f102:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800f106:	4281      	cmp	r1, r0
 800f108:	eb06 0c05 	add.w	ip, r6, r5
 800f10c:	dc02      	bgt.n	800f114 <__ieee754_sqrt+0xc8>
 800f10e:	d113      	bne.n	800f138 <__ieee754_sqrt+0xec>
 800f110:	459c      	cmp	ip, r3
 800f112:	d811      	bhi.n	800f138 <__ieee754_sqrt+0xec>
 800f114:	f1bc 0f00 	cmp.w	ip, #0
 800f118:	eb0c 0506 	add.w	r5, ip, r6
 800f11c:	da43      	bge.n	800f1a6 <__ieee754_sqrt+0x15a>
 800f11e:	2d00      	cmp	r5, #0
 800f120:	db41      	blt.n	800f1a6 <__ieee754_sqrt+0x15a>
 800f122:	f100 0801 	add.w	r8, r0, #1
 800f126:	1a09      	subs	r1, r1, r0
 800f128:	459c      	cmp	ip, r3
 800f12a:	bf88      	it	hi
 800f12c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800f130:	eba3 030c 	sub.w	r3, r3, ip
 800f134:	4432      	add	r2, r6
 800f136:	4640      	mov	r0, r8
 800f138:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800f13c:	f1be 0e01 	subs.w	lr, lr, #1
 800f140:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800f144:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f148:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f14c:	d1db      	bne.n	800f106 <__ieee754_sqrt+0xba>
 800f14e:	430b      	orrs	r3, r1
 800f150:	d006      	beq.n	800f160 <__ieee754_sqrt+0x114>
 800f152:	1c50      	adds	r0, r2, #1
 800f154:	bf13      	iteet	ne
 800f156:	3201      	addne	r2, #1
 800f158:	3401      	addeq	r4, #1
 800f15a:	4672      	moveq	r2, lr
 800f15c:	f022 0201 	bicne.w	r2, r2, #1
 800f160:	1063      	asrs	r3, r4, #1
 800f162:	0852      	lsrs	r2, r2, #1
 800f164:	07e1      	lsls	r1, r4, #31
 800f166:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f16a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f16e:	bf48      	it	mi
 800f170:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800f174:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800f178:	4614      	mov	r4, r2
 800f17a:	e781      	b.n	800f080 <__ieee754_sqrt+0x34>
 800f17c:	0ad9      	lsrs	r1, r3, #11
 800f17e:	3815      	subs	r0, #21
 800f180:	055b      	lsls	r3, r3, #21
 800f182:	2900      	cmp	r1, #0
 800f184:	d0fa      	beq.n	800f17c <__ieee754_sqrt+0x130>
 800f186:	02cd      	lsls	r5, r1, #11
 800f188:	d50a      	bpl.n	800f1a0 <__ieee754_sqrt+0x154>
 800f18a:	f1c2 0420 	rsb	r4, r2, #32
 800f18e:	fa23 f404 	lsr.w	r4, r3, r4
 800f192:	1e55      	subs	r5, r2, #1
 800f194:	4093      	lsls	r3, r2
 800f196:	4321      	orrs	r1, r4
 800f198:	1b42      	subs	r2, r0, r5
 800f19a:	e78a      	b.n	800f0b2 <__ieee754_sqrt+0x66>
 800f19c:	4610      	mov	r0, r2
 800f19e:	e7f0      	b.n	800f182 <__ieee754_sqrt+0x136>
 800f1a0:	0049      	lsls	r1, r1, #1
 800f1a2:	3201      	adds	r2, #1
 800f1a4:	e7ef      	b.n	800f186 <__ieee754_sqrt+0x13a>
 800f1a6:	4680      	mov	r8, r0
 800f1a8:	e7bd      	b.n	800f126 <__ieee754_sqrt+0xda>
 800f1aa:	bf00      	nop
 800f1ac:	7ff00000 	.word	0x7ff00000

0800f1b0 <with_errno>:
 800f1b0:	b570      	push	{r4, r5, r6, lr}
 800f1b2:	4604      	mov	r4, r0
 800f1b4:	460d      	mov	r5, r1
 800f1b6:	4616      	mov	r6, r2
 800f1b8:	f000 fa6c 	bl	800f694 <__errno>
 800f1bc:	4629      	mov	r1, r5
 800f1be:	6006      	str	r6, [r0, #0]
 800f1c0:	4620      	mov	r0, r4
 800f1c2:	bd70      	pop	{r4, r5, r6, pc}

0800f1c4 <xflow>:
 800f1c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f1c6:	4614      	mov	r4, r2
 800f1c8:	461d      	mov	r5, r3
 800f1ca:	b108      	cbz	r0, 800f1d0 <xflow+0xc>
 800f1cc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f1d0:	e9cd 2300 	strd	r2, r3, [sp]
 800f1d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f1d8:	4620      	mov	r0, r4
 800f1da:	4629      	mov	r1, r5
 800f1dc:	f7f1 fa0c 	bl	80005f8 <__aeabi_dmul>
 800f1e0:	2222      	movs	r2, #34	; 0x22
 800f1e2:	b003      	add	sp, #12
 800f1e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f1e8:	f7ff bfe2 	b.w	800f1b0 <with_errno>

0800f1ec <__math_uflow>:
 800f1ec:	b508      	push	{r3, lr}
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f1f4:	f7ff ffe6 	bl	800f1c4 <xflow>
 800f1f8:	ec41 0b10 	vmov	d0, r0, r1
 800f1fc:	bd08      	pop	{r3, pc}

0800f1fe <__math_oflow>:
 800f1fe:	b508      	push	{r3, lr}
 800f200:	2200      	movs	r2, #0
 800f202:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800f206:	f7ff ffdd 	bl	800f1c4 <xflow>
 800f20a:	ec41 0b10 	vmov	d0, r0, r1
 800f20e:	bd08      	pop	{r3, pc}

0800f210 <atan>:
 800f210:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f214:	ec55 4b10 	vmov	r4, r5, d0
 800f218:	4bc3      	ldr	r3, [pc, #780]	; (800f528 <atan+0x318>)
 800f21a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f21e:	429e      	cmp	r6, r3
 800f220:	46ab      	mov	fp, r5
 800f222:	dd18      	ble.n	800f256 <atan+0x46>
 800f224:	4bc1      	ldr	r3, [pc, #772]	; (800f52c <atan+0x31c>)
 800f226:	429e      	cmp	r6, r3
 800f228:	dc01      	bgt.n	800f22e <atan+0x1e>
 800f22a:	d109      	bne.n	800f240 <atan+0x30>
 800f22c:	b144      	cbz	r4, 800f240 <atan+0x30>
 800f22e:	4622      	mov	r2, r4
 800f230:	462b      	mov	r3, r5
 800f232:	4620      	mov	r0, r4
 800f234:	4629      	mov	r1, r5
 800f236:	f7f1 f829 	bl	800028c <__adddf3>
 800f23a:	4604      	mov	r4, r0
 800f23c:	460d      	mov	r5, r1
 800f23e:	e006      	b.n	800f24e <atan+0x3e>
 800f240:	f1bb 0f00 	cmp.w	fp, #0
 800f244:	f300 8131 	bgt.w	800f4aa <atan+0x29a>
 800f248:	a59b      	add	r5, pc, #620	; (adr r5, 800f4b8 <atan+0x2a8>)
 800f24a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f24e:	ec45 4b10 	vmov	d0, r4, r5
 800f252:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f256:	4bb6      	ldr	r3, [pc, #728]	; (800f530 <atan+0x320>)
 800f258:	429e      	cmp	r6, r3
 800f25a:	dc14      	bgt.n	800f286 <atan+0x76>
 800f25c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800f260:	429e      	cmp	r6, r3
 800f262:	dc0d      	bgt.n	800f280 <atan+0x70>
 800f264:	a396      	add	r3, pc, #600	; (adr r3, 800f4c0 <atan+0x2b0>)
 800f266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f26a:	ee10 0a10 	vmov	r0, s0
 800f26e:	4629      	mov	r1, r5
 800f270:	f7f1 f80c 	bl	800028c <__adddf3>
 800f274:	4baf      	ldr	r3, [pc, #700]	; (800f534 <atan+0x324>)
 800f276:	2200      	movs	r2, #0
 800f278:	f7f1 fc4e 	bl	8000b18 <__aeabi_dcmpgt>
 800f27c:	2800      	cmp	r0, #0
 800f27e:	d1e6      	bne.n	800f24e <atan+0x3e>
 800f280:	f04f 3aff 	mov.w	sl, #4294967295
 800f284:	e02b      	b.n	800f2de <atan+0xce>
 800f286:	f000 f963 	bl	800f550 <fabs>
 800f28a:	4bab      	ldr	r3, [pc, #684]	; (800f538 <atan+0x328>)
 800f28c:	429e      	cmp	r6, r3
 800f28e:	ec55 4b10 	vmov	r4, r5, d0
 800f292:	f300 80bf 	bgt.w	800f414 <atan+0x204>
 800f296:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800f29a:	429e      	cmp	r6, r3
 800f29c:	f300 80a0 	bgt.w	800f3e0 <atan+0x1d0>
 800f2a0:	ee10 2a10 	vmov	r2, s0
 800f2a4:	ee10 0a10 	vmov	r0, s0
 800f2a8:	462b      	mov	r3, r5
 800f2aa:	4629      	mov	r1, r5
 800f2ac:	f7f0 ffee 	bl	800028c <__adddf3>
 800f2b0:	4ba0      	ldr	r3, [pc, #640]	; (800f534 <atan+0x324>)
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	f7f0 ffe8 	bl	8000288 <__aeabi_dsub>
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	4606      	mov	r6, r0
 800f2bc:	460f      	mov	r7, r1
 800f2be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f2c2:	4620      	mov	r0, r4
 800f2c4:	4629      	mov	r1, r5
 800f2c6:	f7f0 ffe1 	bl	800028c <__adddf3>
 800f2ca:	4602      	mov	r2, r0
 800f2cc:	460b      	mov	r3, r1
 800f2ce:	4630      	mov	r0, r6
 800f2d0:	4639      	mov	r1, r7
 800f2d2:	f7f1 fabb 	bl	800084c <__aeabi_ddiv>
 800f2d6:	f04f 0a00 	mov.w	sl, #0
 800f2da:	4604      	mov	r4, r0
 800f2dc:	460d      	mov	r5, r1
 800f2de:	4622      	mov	r2, r4
 800f2e0:	462b      	mov	r3, r5
 800f2e2:	4620      	mov	r0, r4
 800f2e4:	4629      	mov	r1, r5
 800f2e6:	f7f1 f987 	bl	80005f8 <__aeabi_dmul>
 800f2ea:	4602      	mov	r2, r0
 800f2ec:	460b      	mov	r3, r1
 800f2ee:	4680      	mov	r8, r0
 800f2f0:	4689      	mov	r9, r1
 800f2f2:	f7f1 f981 	bl	80005f8 <__aeabi_dmul>
 800f2f6:	a374      	add	r3, pc, #464	; (adr r3, 800f4c8 <atan+0x2b8>)
 800f2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2fc:	4606      	mov	r6, r0
 800f2fe:	460f      	mov	r7, r1
 800f300:	f7f1 f97a 	bl	80005f8 <__aeabi_dmul>
 800f304:	a372      	add	r3, pc, #456	; (adr r3, 800f4d0 <atan+0x2c0>)
 800f306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f30a:	f7f0 ffbf 	bl	800028c <__adddf3>
 800f30e:	4632      	mov	r2, r6
 800f310:	463b      	mov	r3, r7
 800f312:	f7f1 f971 	bl	80005f8 <__aeabi_dmul>
 800f316:	a370      	add	r3, pc, #448	; (adr r3, 800f4d8 <atan+0x2c8>)
 800f318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f31c:	f7f0 ffb6 	bl	800028c <__adddf3>
 800f320:	4632      	mov	r2, r6
 800f322:	463b      	mov	r3, r7
 800f324:	f7f1 f968 	bl	80005f8 <__aeabi_dmul>
 800f328:	a36d      	add	r3, pc, #436	; (adr r3, 800f4e0 <atan+0x2d0>)
 800f32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f32e:	f7f0 ffad 	bl	800028c <__adddf3>
 800f332:	4632      	mov	r2, r6
 800f334:	463b      	mov	r3, r7
 800f336:	f7f1 f95f 	bl	80005f8 <__aeabi_dmul>
 800f33a:	a36b      	add	r3, pc, #428	; (adr r3, 800f4e8 <atan+0x2d8>)
 800f33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f340:	f7f0 ffa4 	bl	800028c <__adddf3>
 800f344:	4632      	mov	r2, r6
 800f346:	463b      	mov	r3, r7
 800f348:	f7f1 f956 	bl	80005f8 <__aeabi_dmul>
 800f34c:	a368      	add	r3, pc, #416	; (adr r3, 800f4f0 <atan+0x2e0>)
 800f34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f352:	f7f0 ff9b 	bl	800028c <__adddf3>
 800f356:	4642      	mov	r2, r8
 800f358:	464b      	mov	r3, r9
 800f35a:	f7f1 f94d 	bl	80005f8 <__aeabi_dmul>
 800f35e:	a366      	add	r3, pc, #408	; (adr r3, 800f4f8 <atan+0x2e8>)
 800f360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f364:	4680      	mov	r8, r0
 800f366:	4689      	mov	r9, r1
 800f368:	4630      	mov	r0, r6
 800f36a:	4639      	mov	r1, r7
 800f36c:	f7f1 f944 	bl	80005f8 <__aeabi_dmul>
 800f370:	a363      	add	r3, pc, #396	; (adr r3, 800f500 <atan+0x2f0>)
 800f372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f376:	f7f0 ff87 	bl	8000288 <__aeabi_dsub>
 800f37a:	4632      	mov	r2, r6
 800f37c:	463b      	mov	r3, r7
 800f37e:	f7f1 f93b 	bl	80005f8 <__aeabi_dmul>
 800f382:	a361      	add	r3, pc, #388	; (adr r3, 800f508 <atan+0x2f8>)
 800f384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f388:	f7f0 ff7e 	bl	8000288 <__aeabi_dsub>
 800f38c:	4632      	mov	r2, r6
 800f38e:	463b      	mov	r3, r7
 800f390:	f7f1 f932 	bl	80005f8 <__aeabi_dmul>
 800f394:	a35e      	add	r3, pc, #376	; (adr r3, 800f510 <atan+0x300>)
 800f396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f39a:	f7f0 ff75 	bl	8000288 <__aeabi_dsub>
 800f39e:	4632      	mov	r2, r6
 800f3a0:	463b      	mov	r3, r7
 800f3a2:	f7f1 f929 	bl	80005f8 <__aeabi_dmul>
 800f3a6:	a35c      	add	r3, pc, #368	; (adr r3, 800f518 <atan+0x308>)
 800f3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3ac:	f7f0 ff6c 	bl	8000288 <__aeabi_dsub>
 800f3b0:	4632      	mov	r2, r6
 800f3b2:	463b      	mov	r3, r7
 800f3b4:	f7f1 f920 	bl	80005f8 <__aeabi_dmul>
 800f3b8:	4602      	mov	r2, r0
 800f3ba:	460b      	mov	r3, r1
 800f3bc:	4640      	mov	r0, r8
 800f3be:	4649      	mov	r1, r9
 800f3c0:	f7f0 ff64 	bl	800028c <__adddf3>
 800f3c4:	4622      	mov	r2, r4
 800f3c6:	462b      	mov	r3, r5
 800f3c8:	f7f1 f916 	bl	80005f8 <__aeabi_dmul>
 800f3cc:	f1ba 3fff 	cmp.w	sl, #4294967295
 800f3d0:	4602      	mov	r2, r0
 800f3d2:	460b      	mov	r3, r1
 800f3d4:	d14b      	bne.n	800f46e <atan+0x25e>
 800f3d6:	4620      	mov	r0, r4
 800f3d8:	4629      	mov	r1, r5
 800f3da:	f7f0 ff55 	bl	8000288 <__aeabi_dsub>
 800f3de:	e72c      	b.n	800f23a <atan+0x2a>
 800f3e0:	ee10 0a10 	vmov	r0, s0
 800f3e4:	4b53      	ldr	r3, [pc, #332]	; (800f534 <atan+0x324>)
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	4629      	mov	r1, r5
 800f3ea:	f7f0 ff4d 	bl	8000288 <__aeabi_dsub>
 800f3ee:	4b51      	ldr	r3, [pc, #324]	; (800f534 <atan+0x324>)
 800f3f0:	4606      	mov	r6, r0
 800f3f2:	460f      	mov	r7, r1
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	4620      	mov	r0, r4
 800f3f8:	4629      	mov	r1, r5
 800f3fa:	f7f0 ff47 	bl	800028c <__adddf3>
 800f3fe:	4602      	mov	r2, r0
 800f400:	460b      	mov	r3, r1
 800f402:	4630      	mov	r0, r6
 800f404:	4639      	mov	r1, r7
 800f406:	f7f1 fa21 	bl	800084c <__aeabi_ddiv>
 800f40a:	f04f 0a01 	mov.w	sl, #1
 800f40e:	4604      	mov	r4, r0
 800f410:	460d      	mov	r5, r1
 800f412:	e764      	b.n	800f2de <atan+0xce>
 800f414:	4b49      	ldr	r3, [pc, #292]	; (800f53c <atan+0x32c>)
 800f416:	429e      	cmp	r6, r3
 800f418:	da1d      	bge.n	800f456 <atan+0x246>
 800f41a:	ee10 0a10 	vmov	r0, s0
 800f41e:	4b48      	ldr	r3, [pc, #288]	; (800f540 <atan+0x330>)
 800f420:	2200      	movs	r2, #0
 800f422:	4629      	mov	r1, r5
 800f424:	f7f0 ff30 	bl	8000288 <__aeabi_dsub>
 800f428:	4b45      	ldr	r3, [pc, #276]	; (800f540 <atan+0x330>)
 800f42a:	4606      	mov	r6, r0
 800f42c:	460f      	mov	r7, r1
 800f42e:	2200      	movs	r2, #0
 800f430:	4620      	mov	r0, r4
 800f432:	4629      	mov	r1, r5
 800f434:	f7f1 f8e0 	bl	80005f8 <__aeabi_dmul>
 800f438:	4b3e      	ldr	r3, [pc, #248]	; (800f534 <atan+0x324>)
 800f43a:	2200      	movs	r2, #0
 800f43c:	f7f0 ff26 	bl	800028c <__adddf3>
 800f440:	4602      	mov	r2, r0
 800f442:	460b      	mov	r3, r1
 800f444:	4630      	mov	r0, r6
 800f446:	4639      	mov	r1, r7
 800f448:	f7f1 fa00 	bl	800084c <__aeabi_ddiv>
 800f44c:	f04f 0a02 	mov.w	sl, #2
 800f450:	4604      	mov	r4, r0
 800f452:	460d      	mov	r5, r1
 800f454:	e743      	b.n	800f2de <atan+0xce>
 800f456:	462b      	mov	r3, r5
 800f458:	ee10 2a10 	vmov	r2, s0
 800f45c:	4939      	ldr	r1, [pc, #228]	; (800f544 <atan+0x334>)
 800f45e:	2000      	movs	r0, #0
 800f460:	f7f1 f9f4 	bl	800084c <__aeabi_ddiv>
 800f464:	f04f 0a03 	mov.w	sl, #3
 800f468:	4604      	mov	r4, r0
 800f46a:	460d      	mov	r5, r1
 800f46c:	e737      	b.n	800f2de <atan+0xce>
 800f46e:	4b36      	ldr	r3, [pc, #216]	; (800f548 <atan+0x338>)
 800f470:	4e36      	ldr	r6, [pc, #216]	; (800f54c <atan+0x33c>)
 800f472:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800f476:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800f47a:	e9da 2300 	ldrd	r2, r3, [sl]
 800f47e:	f7f0 ff03 	bl	8000288 <__aeabi_dsub>
 800f482:	4622      	mov	r2, r4
 800f484:	462b      	mov	r3, r5
 800f486:	f7f0 feff 	bl	8000288 <__aeabi_dsub>
 800f48a:	4602      	mov	r2, r0
 800f48c:	460b      	mov	r3, r1
 800f48e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800f492:	f7f0 fef9 	bl	8000288 <__aeabi_dsub>
 800f496:	f1bb 0f00 	cmp.w	fp, #0
 800f49a:	4604      	mov	r4, r0
 800f49c:	460d      	mov	r5, r1
 800f49e:	f6bf aed6 	bge.w	800f24e <atan+0x3e>
 800f4a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f4a6:	461d      	mov	r5, r3
 800f4a8:	e6d1      	b.n	800f24e <atan+0x3e>
 800f4aa:	a51d      	add	r5, pc, #116	; (adr r5, 800f520 <atan+0x310>)
 800f4ac:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f4b0:	e6cd      	b.n	800f24e <atan+0x3e>
 800f4b2:	bf00      	nop
 800f4b4:	f3af 8000 	nop.w
 800f4b8:	54442d18 	.word	0x54442d18
 800f4bc:	bff921fb 	.word	0xbff921fb
 800f4c0:	8800759c 	.word	0x8800759c
 800f4c4:	7e37e43c 	.word	0x7e37e43c
 800f4c8:	e322da11 	.word	0xe322da11
 800f4cc:	3f90ad3a 	.word	0x3f90ad3a
 800f4d0:	24760deb 	.word	0x24760deb
 800f4d4:	3fa97b4b 	.word	0x3fa97b4b
 800f4d8:	a0d03d51 	.word	0xa0d03d51
 800f4dc:	3fb10d66 	.word	0x3fb10d66
 800f4e0:	c54c206e 	.word	0xc54c206e
 800f4e4:	3fb745cd 	.word	0x3fb745cd
 800f4e8:	920083ff 	.word	0x920083ff
 800f4ec:	3fc24924 	.word	0x3fc24924
 800f4f0:	5555550d 	.word	0x5555550d
 800f4f4:	3fd55555 	.word	0x3fd55555
 800f4f8:	2c6a6c2f 	.word	0x2c6a6c2f
 800f4fc:	bfa2b444 	.word	0xbfa2b444
 800f500:	52defd9a 	.word	0x52defd9a
 800f504:	3fadde2d 	.word	0x3fadde2d
 800f508:	af749a6d 	.word	0xaf749a6d
 800f50c:	3fb3b0f2 	.word	0x3fb3b0f2
 800f510:	fe231671 	.word	0xfe231671
 800f514:	3fbc71c6 	.word	0x3fbc71c6
 800f518:	9998ebc4 	.word	0x9998ebc4
 800f51c:	3fc99999 	.word	0x3fc99999
 800f520:	54442d18 	.word	0x54442d18
 800f524:	3ff921fb 	.word	0x3ff921fb
 800f528:	440fffff 	.word	0x440fffff
 800f52c:	7ff00000 	.word	0x7ff00000
 800f530:	3fdbffff 	.word	0x3fdbffff
 800f534:	3ff00000 	.word	0x3ff00000
 800f538:	3ff2ffff 	.word	0x3ff2ffff
 800f53c:	40038000 	.word	0x40038000
 800f540:	3ff80000 	.word	0x3ff80000
 800f544:	bff00000 	.word	0xbff00000
 800f548:	080135d0 	.word	0x080135d0
 800f54c:	080135b0 	.word	0x080135b0

0800f550 <fabs>:
 800f550:	ec51 0b10 	vmov	r0, r1, d0
 800f554:	ee10 2a10 	vmov	r2, s0
 800f558:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f55c:	ec43 2b10 	vmov	d0, r2, r3
 800f560:	4770      	bx	lr

0800f562 <finite>:
 800f562:	b082      	sub	sp, #8
 800f564:	ed8d 0b00 	vstr	d0, [sp]
 800f568:	9801      	ldr	r0, [sp, #4]
 800f56a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f56e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f572:	0fc0      	lsrs	r0, r0, #31
 800f574:	b002      	add	sp, #8
 800f576:	4770      	bx	lr

0800f578 <scalbn>:
 800f578:	b570      	push	{r4, r5, r6, lr}
 800f57a:	ec55 4b10 	vmov	r4, r5, d0
 800f57e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f582:	4606      	mov	r6, r0
 800f584:	462b      	mov	r3, r5
 800f586:	b99a      	cbnz	r2, 800f5b0 <scalbn+0x38>
 800f588:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f58c:	4323      	orrs	r3, r4
 800f58e:	d036      	beq.n	800f5fe <scalbn+0x86>
 800f590:	4b39      	ldr	r3, [pc, #228]	; (800f678 <scalbn+0x100>)
 800f592:	4629      	mov	r1, r5
 800f594:	ee10 0a10 	vmov	r0, s0
 800f598:	2200      	movs	r2, #0
 800f59a:	f7f1 f82d 	bl	80005f8 <__aeabi_dmul>
 800f59e:	4b37      	ldr	r3, [pc, #220]	; (800f67c <scalbn+0x104>)
 800f5a0:	429e      	cmp	r6, r3
 800f5a2:	4604      	mov	r4, r0
 800f5a4:	460d      	mov	r5, r1
 800f5a6:	da10      	bge.n	800f5ca <scalbn+0x52>
 800f5a8:	a32b      	add	r3, pc, #172	; (adr r3, 800f658 <scalbn+0xe0>)
 800f5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ae:	e03a      	b.n	800f626 <scalbn+0xae>
 800f5b0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f5b4:	428a      	cmp	r2, r1
 800f5b6:	d10c      	bne.n	800f5d2 <scalbn+0x5a>
 800f5b8:	ee10 2a10 	vmov	r2, s0
 800f5bc:	4620      	mov	r0, r4
 800f5be:	4629      	mov	r1, r5
 800f5c0:	f7f0 fe64 	bl	800028c <__adddf3>
 800f5c4:	4604      	mov	r4, r0
 800f5c6:	460d      	mov	r5, r1
 800f5c8:	e019      	b.n	800f5fe <scalbn+0x86>
 800f5ca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f5ce:	460b      	mov	r3, r1
 800f5d0:	3a36      	subs	r2, #54	; 0x36
 800f5d2:	4432      	add	r2, r6
 800f5d4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f5d8:	428a      	cmp	r2, r1
 800f5da:	dd08      	ble.n	800f5ee <scalbn+0x76>
 800f5dc:	2d00      	cmp	r5, #0
 800f5de:	a120      	add	r1, pc, #128	; (adr r1, 800f660 <scalbn+0xe8>)
 800f5e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f5e4:	da1c      	bge.n	800f620 <scalbn+0xa8>
 800f5e6:	a120      	add	r1, pc, #128	; (adr r1, 800f668 <scalbn+0xf0>)
 800f5e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f5ec:	e018      	b.n	800f620 <scalbn+0xa8>
 800f5ee:	2a00      	cmp	r2, #0
 800f5f0:	dd08      	ble.n	800f604 <scalbn+0x8c>
 800f5f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f5f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f5fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f5fe:	ec45 4b10 	vmov	d0, r4, r5
 800f602:	bd70      	pop	{r4, r5, r6, pc}
 800f604:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f608:	da19      	bge.n	800f63e <scalbn+0xc6>
 800f60a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f60e:	429e      	cmp	r6, r3
 800f610:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f614:	dd0a      	ble.n	800f62c <scalbn+0xb4>
 800f616:	a112      	add	r1, pc, #72	; (adr r1, 800f660 <scalbn+0xe8>)
 800f618:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d1e2      	bne.n	800f5e6 <scalbn+0x6e>
 800f620:	a30f      	add	r3, pc, #60	; (adr r3, 800f660 <scalbn+0xe8>)
 800f622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f626:	f7f0 ffe7 	bl	80005f8 <__aeabi_dmul>
 800f62a:	e7cb      	b.n	800f5c4 <scalbn+0x4c>
 800f62c:	a10a      	add	r1, pc, #40	; (adr r1, 800f658 <scalbn+0xe0>)
 800f62e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d0b8      	beq.n	800f5a8 <scalbn+0x30>
 800f636:	a10e      	add	r1, pc, #56	; (adr r1, 800f670 <scalbn+0xf8>)
 800f638:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f63c:	e7b4      	b.n	800f5a8 <scalbn+0x30>
 800f63e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f642:	3236      	adds	r2, #54	; 0x36
 800f644:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f648:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f64c:	4620      	mov	r0, r4
 800f64e:	4b0c      	ldr	r3, [pc, #48]	; (800f680 <scalbn+0x108>)
 800f650:	2200      	movs	r2, #0
 800f652:	e7e8      	b.n	800f626 <scalbn+0xae>
 800f654:	f3af 8000 	nop.w
 800f658:	c2f8f359 	.word	0xc2f8f359
 800f65c:	01a56e1f 	.word	0x01a56e1f
 800f660:	8800759c 	.word	0x8800759c
 800f664:	7e37e43c 	.word	0x7e37e43c
 800f668:	8800759c 	.word	0x8800759c
 800f66c:	fe37e43c 	.word	0xfe37e43c
 800f670:	c2f8f359 	.word	0xc2f8f359
 800f674:	81a56e1f 	.word	0x81a56e1f
 800f678:	43500000 	.word	0x43500000
 800f67c:	ffff3cb0 	.word	0xffff3cb0
 800f680:	3c900000 	.word	0x3c900000

0800f684 <abort>:
 800f684:	b508      	push	{r3, lr}
 800f686:	2006      	movs	r0, #6
 800f688:	f000 ffd2 	bl	8010630 <raise>
 800f68c:	2001      	movs	r0, #1
 800f68e:	f7f5 fed5 	bl	800543c <_exit>
	...

0800f694 <__errno>:
 800f694:	4b01      	ldr	r3, [pc, #4]	; (800f69c <__errno+0x8>)
 800f696:	6818      	ldr	r0, [r3, #0]
 800f698:	4770      	bx	lr
 800f69a:	bf00      	nop
 800f69c:	2000006c 	.word	0x2000006c

0800f6a0 <std>:
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	b510      	push	{r4, lr}
 800f6a4:	4604      	mov	r4, r0
 800f6a6:	e9c0 3300 	strd	r3, r3, [r0]
 800f6aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f6ae:	6083      	str	r3, [r0, #8]
 800f6b0:	8181      	strh	r1, [r0, #12]
 800f6b2:	6643      	str	r3, [r0, #100]	; 0x64
 800f6b4:	81c2      	strh	r2, [r0, #14]
 800f6b6:	6183      	str	r3, [r0, #24]
 800f6b8:	4619      	mov	r1, r3
 800f6ba:	2208      	movs	r2, #8
 800f6bc:	305c      	adds	r0, #92	; 0x5c
 800f6be:	f000 f91f 	bl	800f900 <memset>
 800f6c2:	4b05      	ldr	r3, [pc, #20]	; (800f6d8 <std+0x38>)
 800f6c4:	6263      	str	r3, [r4, #36]	; 0x24
 800f6c6:	4b05      	ldr	r3, [pc, #20]	; (800f6dc <std+0x3c>)
 800f6c8:	62a3      	str	r3, [r4, #40]	; 0x28
 800f6ca:	4b05      	ldr	r3, [pc, #20]	; (800f6e0 <std+0x40>)
 800f6cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f6ce:	4b05      	ldr	r3, [pc, #20]	; (800f6e4 <std+0x44>)
 800f6d0:	6224      	str	r4, [r4, #32]
 800f6d2:	6323      	str	r3, [r4, #48]	; 0x30
 800f6d4:	bd10      	pop	{r4, pc}
 800f6d6:	bf00      	nop
 800f6d8:	08010711 	.word	0x08010711
 800f6dc:	08010733 	.word	0x08010733
 800f6e0:	0801076b 	.word	0x0801076b
 800f6e4:	0801078f 	.word	0x0801078f

0800f6e8 <_cleanup_r>:
 800f6e8:	4901      	ldr	r1, [pc, #4]	; (800f6f0 <_cleanup_r+0x8>)
 800f6ea:	f000 b8af 	b.w	800f84c <_fwalk_reent>
 800f6ee:	bf00      	nop
 800f6f0:	08011879 	.word	0x08011879

0800f6f4 <__sfmoreglue>:
 800f6f4:	b570      	push	{r4, r5, r6, lr}
 800f6f6:	2268      	movs	r2, #104	; 0x68
 800f6f8:	1e4d      	subs	r5, r1, #1
 800f6fa:	4355      	muls	r5, r2
 800f6fc:	460e      	mov	r6, r1
 800f6fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f702:	f000 f971 	bl	800f9e8 <_malloc_r>
 800f706:	4604      	mov	r4, r0
 800f708:	b140      	cbz	r0, 800f71c <__sfmoreglue+0x28>
 800f70a:	2100      	movs	r1, #0
 800f70c:	e9c0 1600 	strd	r1, r6, [r0]
 800f710:	300c      	adds	r0, #12
 800f712:	60a0      	str	r0, [r4, #8]
 800f714:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f718:	f000 f8f2 	bl	800f900 <memset>
 800f71c:	4620      	mov	r0, r4
 800f71e:	bd70      	pop	{r4, r5, r6, pc}

0800f720 <__sfp_lock_acquire>:
 800f720:	4801      	ldr	r0, [pc, #4]	; (800f728 <__sfp_lock_acquire+0x8>)
 800f722:	f7f6 b815 	b.w	8005750 <__retarget_lock_acquire_recursive>
 800f726:	bf00      	nop
 800f728:	20000c1c 	.word	0x20000c1c

0800f72c <__sfp_lock_release>:
 800f72c:	4801      	ldr	r0, [pc, #4]	; (800f734 <__sfp_lock_release+0x8>)
 800f72e:	f7f6 b823 	b.w	8005778 <__retarget_lock_release_recursive>
 800f732:	bf00      	nop
 800f734:	20000c1c 	.word	0x20000c1c

0800f738 <__sinit_lock_acquire>:
 800f738:	4801      	ldr	r0, [pc, #4]	; (800f740 <__sinit_lock_acquire+0x8>)
 800f73a:	f7f6 b809 	b.w	8005750 <__retarget_lock_acquire_recursive>
 800f73e:	bf00      	nop
 800f740:	20000c10 	.word	0x20000c10

0800f744 <__sinit_lock_release>:
 800f744:	4801      	ldr	r0, [pc, #4]	; (800f74c <__sinit_lock_release+0x8>)
 800f746:	f7f6 b817 	b.w	8005778 <__retarget_lock_release_recursive>
 800f74a:	bf00      	nop
 800f74c:	20000c10 	.word	0x20000c10

0800f750 <__sinit>:
 800f750:	b510      	push	{r4, lr}
 800f752:	4604      	mov	r4, r0
 800f754:	f7ff fff0 	bl	800f738 <__sinit_lock_acquire>
 800f758:	69a3      	ldr	r3, [r4, #24]
 800f75a:	b11b      	cbz	r3, 800f764 <__sinit+0x14>
 800f75c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f760:	f7ff bff0 	b.w	800f744 <__sinit_lock_release>
 800f764:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f768:	6523      	str	r3, [r4, #80]	; 0x50
 800f76a:	4b13      	ldr	r3, [pc, #76]	; (800f7b8 <__sinit+0x68>)
 800f76c:	4a13      	ldr	r2, [pc, #76]	; (800f7bc <__sinit+0x6c>)
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	62a2      	str	r2, [r4, #40]	; 0x28
 800f772:	42a3      	cmp	r3, r4
 800f774:	bf04      	itt	eq
 800f776:	2301      	moveq	r3, #1
 800f778:	61a3      	streq	r3, [r4, #24]
 800f77a:	4620      	mov	r0, r4
 800f77c:	f000 f820 	bl	800f7c0 <__sfp>
 800f780:	6060      	str	r0, [r4, #4]
 800f782:	4620      	mov	r0, r4
 800f784:	f000 f81c 	bl	800f7c0 <__sfp>
 800f788:	60a0      	str	r0, [r4, #8]
 800f78a:	4620      	mov	r0, r4
 800f78c:	f000 f818 	bl	800f7c0 <__sfp>
 800f790:	2200      	movs	r2, #0
 800f792:	60e0      	str	r0, [r4, #12]
 800f794:	2104      	movs	r1, #4
 800f796:	6860      	ldr	r0, [r4, #4]
 800f798:	f7ff ff82 	bl	800f6a0 <std>
 800f79c:	68a0      	ldr	r0, [r4, #8]
 800f79e:	2201      	movs	r2, #1
 800f7a0:	2109      	movs	r1, #9
 800f7a2:	f7ff ff7d 	bl	800f6a0 <std>
 800f7a6:	68e0      	ldr	r0, [r4, #12]
 800f7a8:	2202      	movs	r2, #2
 800f7aa:	2112      	movs	r1, #18
 800f7ac:	f7ff ff78 	bl	800f6a0 <std>
 800f7b0:	2301      	movs	r3, #1
 800f7b2:	61a3      	str	r3, [r4, #24]
 800f7b4:	e7d2      	b.n	800f75c <__sinit+0xc>
 800f7b6:	bf00      	nop
 800f7b8:	08013650 	.word	0x08013650
 800f7bc:	0800f6e9 	.word	0x0800f6e9

0800f7c0 <__sfp>:
 800f7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7c2:	4607      	mov	r7, r0
 800f7c4:	f7ff ffac 	bl	800f720 <__sfp_lock_acquire>
 800f7c8:	4b1e      	ldr	r3, [pc, #120]	; (800f844 <__sfp+0x84>)
 800f7ca:	681e      	ldr	r6, [r3, #0]
 800f7cc:	69b3      	ldr	r3, [r6, #24]
 800f7ce:	b913      	cbnz	r3, 800f7d6 <__sfp+0x16>
 800f7d0:	4630      	mov	r0, r6
 800f7d2:	f7ff ffbd 	bl	800f750 <__sinit>
 800f7d6:	3648      	adds	r6, #72	; 0x48
 800f7d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f7dc:	3b01      	subs	r3, #1
 800f7de:	d503      	bpl.n	800f7e8 <__sfp+0x28>
 800f7e0:	6833      	ldr	r3, [r6, #0]
 800f7e2:	b30b      	cbz	r3, 800f828 <__sfp+0x68>
 800f7e4:	6836      	ldr	r6, [r6, #0]
 800f7e6:	e7f7      	b.n	800f7d8 <__sfp+0x18>
 800f7e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f7ec:	b9d5      	cbnz	r5, 800f824 <__sfp+0x64>
 800f7ee:	4b16      	ldr	r3, [pc, #88]	; (800f848 <__sfp+0x88>)
 800f7f0:	60e3      	str	r3, [r4, #12]
 800f7f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f7f6:	6665      	str	r5, [r4, #100]	; 0x64
 800f7f8:	f7f5 ff84 	bl	8005704 <__retarget_lock_init_recursive>
 800f7fc:	f7ff ff96 	bl	800f72c <__sfp_lock_release>
 800f800:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f804:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f808:	6025      	str	r5, [r4, #0]
 800f80a:	61a5      	str	r5, [r4, #24]
 800f80c:	2208      	movs	r2, #8
 800f80e:	4629      	mov	r1, r5
 800f810:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f814:	f000 f874 	bl	800f900 <memset>
 800f818:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f81c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f820:	4620      	mov	r0, r4
 800f822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f824:	3468      	adds	r4, #104	; 0x68
 800f826:	e7d9      	b.n	800f7dc <__sfp+0x1c>
 800f828:	2104      	movs	r1, #4
 800f82a:	4638      	mov	r0, r7
 800f82c:	f7ff ff62 	bl	800f6f4 <__sfmoreglue>
 800f830:	4604      	mov	r4, r0
 800f832:	6030      	str	r0, [r6, #0]
 800f834:	2800      	cmp	r0, #0
 800f836:	d1d5      	bne.n	800f7e4 <__sfp+0x24>
 800f838:	f7ff ff78 	bl	800f72c <__sfp_lock_release>
 800f83c:	230c      	movs	r3, #12
 800f83e:	603b      	str	r3, [r7, #0]
 800f840:	e7ee      	b.n	800f820 <__sfp+0x60>
 800f842:	bf00      	nop
 800f844:	08013650 	.word	0x08013650
 800f848:	ffff0001 	.word	0xffff0001

0800f84c <_fwalk_reent>:
 800f84c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f850:	4606      	mov	r6, r0
 800f852:	4688      	mov	r8, r1
 800f854:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f858:	2700      	movs	r7, #0
 800f85a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f85e:	f1b9 0901 	subs.w	r9, r9, #1
 800f862:	d505      	bpl.n	800f870 <_fwalk_reent+0x24>
 800f864:	6824      	ldr	r4, [r4, #0]
 800f866:	2c00      	cmp	r4, #0
 800f868:	d1f7      	bne.n	800f85a <_fwalk_reent+0xe>
 800f86a:	4638      	mov	r0, r7
 800f86c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f870:	89ab      	ldrh	r3, [r5, #12]
 800f872:	2b01      	cmp	r3, #1
 800f874:	d907      	bls.n	800f886 <_fwalk_reent+0x3a>
 800f876:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f87a:	3301      	adds	r3, #1
 800f87c:	d003      	beq.n	800f886 <_fwalk_reent+0x3a>
 800f87e:	4629      	mov	r1, r5
 800f880:	4630      	mov	r0, r6
 800f882:	47c0      	blx	r8
 800f884:	4307      	orrs	r7, r0
 800f886:	3568      	adds	r5, #104	; 0x68
 800f888:	e7e9      	b.n	800f85e <_fwalk_reent+0x12>
	...

0800f88c <__libc_init_array>:
 800f88c:	b570      	push	{r4, r5, r6, lr}
 800f88e:	4d0d      	ldr	r5, [pc, #52]	; (800f8c4 <__libc_init_array+0x38>)
 800f890:	4c0d      	ldr	r4, [pc, #52]	; (800f8c8 <__libc_init_array+0x3c>)
 800f892:	1b64      	subs	r4, r4, r5
 800f894:	10a4      	asrs	r4, r4, #2
 800f896:	2600      	movs	r6, #0
 800f898:	42a6      	cmp	r6, r4
 800f89a:	d109      	bne.n	800f8b0 <__libc_init_array+0x24>
 800f89c:	4d0b      	ldr	r5, [pc, #44]	; (800f8cc <__libc_init_array+0x40>)
 800f89e:	4c0c      	ldr	r4, [pc, #48]	; (800f8d0 <__libc_init_array+0x44>)
 800f8a0:	f003 f81a 	bl	80128d8 <_init>
 800f8a4:	1b64      	subs	r4, r4, r5
 800f8a6:	10a4      	asrs	r4, r4, #2
 800f8a8:	2600      	movs	r6, #0
 800f8aa:	42a6      	cmp	r6, r4
 800f8ac:	d105      	bne.n	800f8ba <__libc_init_array+0x2e>
 800f8ae:	bd70      	pop	{r4, r5, r6, pc}
 800f8b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800f8b4:	4798      	blx	r3
 800f8b6:	3601      	adds	r6, #1
 800f8b8:	e7ee      	b.n	800f898 <__libc_init_array+0xc>
 800f8ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800f8be:	4798      	blx	r3
 800f8c0:	3601      	adds	r6, #1
 800f8c2:	e7f2      	b.n	800f8aa <__libc_init_array+0x1e>
 800f8c4:	080139d4 	.word	0x080139d4
 800f8c8:	080139d4 	.word	0x080139d4
 800f8cc:	080139d4 	.word	0x080139d4
 800f8d0:	080139dc 	.word	0x080139dc

0800f8d4 <malloc>:
 800f8d4:	4b02      	ldr	r3, [pc, #8]	; (800f8e0 <malloc+0xc>)
 800f8d6:	4601      	mov	r1, r0
 800f8d8:	6818      	ldr	r0, [r3, #0]
 800f8da:	f000 b885 	b.w	800f9e8 <_malloc_r>
 800f8de:	bf00      	nop
 800f8e0:	2000006c 	.word	0x2000006c

0800f8e4 <memcpy>:
 800f8e4:	440a      	add	r2, r1
 800f8e6:	4291      	cmp	r1, r2
 800f8e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800f8ec:	d100      	bne.n	800f8f0 <memcpy+0xc>
 800f8ee:	4770      	bx	lr
 800f8f0:	b510      	push	{r4, lr}
 800f8f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f8f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f8fa:	4291      	cmp	r1, r2
 800f8fc:	d1f9      	bne.n	800f8f2 <memcpy+0xe>
 800f8fe:	bd10      	pop	{r4, pc}

0800f900 <memset>:
 800f900:	4402      	add	r2, r0
 800f902:	4603      	mov	r3, r0
 800f904:	4293      	cmp	r3, r2
 800f906:	d100      	bne.n	800f90a <memset+0xa>
 800f908:	4770      	bx	lr
 800f90a:	f803 1b01 	strb.w	r1, [r3], #1
 800f90e:	e7f9      	b.n	800f904 <memset+0x4>

0800f910 <_free_r>:
 800f910:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f912:	2900      	cmp	r1, #0
 800f914:	d044      	beq.n	800f9a0 <_free_r+0x90>
 800f916:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f91a:	9001      	str	r0, [sp, #4]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	f1a1 0404 	sub.w	r4, r1, #4
 800f922:	bfb8      	it	lt
 800f924:	18e4      	addlt	r4, r4, r3
 800f926:	f002 f85f 	bl	80119e8 <__malloc_lock>
 800f92a:	4a1e      	ldr	r2, [pc, #120]	; (800f9a4 <_free_r+0x94>)
 800f92c:	9801      	ldr	r0, [sp, #4]
 800f92e:	6813      	ldr	r3, [r2, #0]
 800f930:	b933      	cbnz	r3, 800f940 <_free_r+0x30>
 800f932:	6063      	str	r3, [r4, #4]
 800f934:	6014      	str	r4, [r2, #0]
 800f936:	b003      	add	sp, #12
 800f938:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f93c:	f002 b85a 	b.w	80119f4 <__malloc_unlock>
 800f940:	42a3      	cmp	r3, r4
 800f942:	d908      	bls.n	800f956 <_free_r+0x46>
 800f944:	6825      	ldr	r5, [r4, #0]
 800f946:	1961      	adds	r1, r4, r5
 800f948:	428b      	cmp	r3, r1
 800f94a:	bf01      	itttt	eq
 800f94c:	6819      	ldreq	r1, [r3, #0]
 800f94e:	685b      	ldreq	r3, [r3, #4]
 800f950:	1949      	addeq	r1, r1, r5
 800f952:	6021      	streq	r1, [r4, #0]
 800f954:	e7ed      	b.n	800f932 <_free_r+0x22>
 800f956:	461a      	mov	r2, r3
 800f958:	685b      	ldr	r3, [r3, #4]
 800f95a:	b10b      	cbz	r3, 800f960 <_free_r+0x50>
 800f95c:	42a3      	cmp	r3, r4
 800f95e:	d9fa      	bls.n	800f956 <_free_r+0x46>
 800f960:	6811      	ldr	r1, [r2, #0]
 800f962:	1855      	adds	r5, r2, r1
 800f964:	42a5      	cmp	r5, r4
 800f966:	d10b      	bne.n	800f980 <_free_r+0x70>
 800f968:	6824      	ldr	r4, [r4, #0]
 800f96a:	4421      	add	r1, r4
 800f96c:	1854      	adds	r4, r2, r1
 800f96e:	42a3      	cmp	r3, r4
 800f970:	6011      	str	r1, [r2, #0]
 800f972:	d1e0      	bne.n	800f936 <_free_r+0x26>
 800f974:	681c      	ldr	r4, [r3, #0]
 800f976:	685b      	ldr	r3, [r3, #4]
 800f978:	6053      	str	r3, [r2, #4]
 800f97a:	4421      	add	r1, r4
 800f97c:	6011      	str	r1, [r2, #0]
 800f97e:	e7da      	b.n	800f936 <_free_r+0x26>
 800f980:	d902      	bls.n	800f988 <_free_r+0x78>
 800f982:	230c      	movs	r3, #12
 800f984:	6003      	str	r3, [r0, #0]
 800f986:	e7d6      	b.n	800f936 <_free_r+0x26>
 800f988:	6825      	ldr	r5, [r4, #0]
 800f98a:	1961      	adds	r1, r4, r5
 800f98c:	428b      	cmp	r3, r1
 800f98e:	bf04      	itt	eq
 800f990:	6819      	ldreq	r1, [r3, #0]
 800f992:	685b      	ldreq	r3, [r3, #4]
 800f994:	6063      	str	r3, [r4, #4]
 800f996:	bf04      	itt	eq
 800f998:	1949      	addeq	r1, r1, r5
 800f99a:	6021      	streq	r1, [r4, #0]
 800f99c:	6054      	str	r4, [r2, #4]
 800f99e:	e7ca      	b.n	800f936 <_free_r+0x26>
 800f9a0:	b003      	add	sp, #12
 800f9a2:	bd30      	pop	{r4, r5, pc}
 800f9a4:	20005c4c 	.word	0x20005c4c

0800f9a8 <sbrk_aligned>:
 800f9a8:	b570      	push	{r4, r5, r6, lr}
 800f9aa:	4e0e      	ldr	r6, [pc, #56]	; (800f9e4 <sbrk_aligned+0x3c>)
 800f9ac:	460c      	mov	r4, r1
 800f9ae:	6831      	ldr	r1, [r6, #0]
 800f9b0:	4605      	mov	r5, r0
 800f9b2:	b911      	cbnz	r1, 800f9ba <sbrk_aligned+0x12>
 800f9b4:	f000 fe04 	bl	80105c0 <_sbrk_r>
 800f9b8:	6030      	str	r0, [r6, #0]
 800f9ba:	4621      	mov	r1, r4
 800f9bc:	4628      	mov	r0, r5
 800f9be:	f000 fdff 	bl	80105c0 <_sbrk_r>
 800f9c2:	1c43      	adds	r3, r0, #1
 800f9c4:	d00a      	beq.n	800f9dc <sbrk_aligned+0x34>
 800f9c6:	1cc4      	adds	r4, r0, #3
 800f9c8:	f024 0403 	bic.w	r4, r4, #3
 800f9cc:	42a0      	cmp	r0, r4
 800f9ce:	d007      	beq.n	800f9e0 <sbrk_aligned+0x38>
 800f9d0:	1a21      	subs	r1, r4, r0
 800f9d2:	4628      	mov	r0, r5
 800f9d4:	f000 fdf4 	bl	80105c0 <_sbrk_r>
 800f9d8:	3001      	adds	r0, #1
 800f9da:	d101      	bne.n	800f9e0 <sbrk_aligned+0x38>
 800f9dc:	f04f 34ff 	mov.w	r4, #4294967295
 800f9e0:	4620      	mov	r0, r4
 800f9e2:	bd70      	pop	{r4, r5, r6, pc}
 800f9e4:	20005c50 	.word	0x20005c50

0800f9e8 <_malloc_r>:
 800f9e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9ec:	1ccd      	adds	r5, r1, #3
 800f9ee:	f025 0503 	bic.w	r5, r5, #3
 800f9f2:	3508      	adds	r5, #8
 800f9f4:	2d0c      	cmp	r5, #12
 800f9f6:	bf38      	it	cc
 800f9f8:	250c      	movcc	r5, #12
 800f9fa:	2d00      	cmp	r5, #0
 800f9fc:	4607      	mov	r7, r0
 800f9fe:	db01      	blt.n	800fa04 <_malloc_r+0x1c>
 800fa00:	42a9      	cmp	r1, r5
 800fa02:	d905      	bls.n	800fa10 <_malloc_r+0x28>
 800fa04:	230c      	movs	r3, #12
 800fa06:	603b      	str	r3, [r7, #0]
 800fa08:	2600      	movs	r6, #0
 800fa0a:	4630      	mov	r0, r6
 800fa0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa10:	4e2e      	ldr	r6, [pc, #184]	; (800facc <_malloc_r+0xe4>)
 800fa12:	f001 ffe9 	bl	80119e8 <__malloc_lock>
 800fa16:	6833      	ldr	r3, [r6, #0]
 800fa18:	461c      	mov	r4, r3
 800fa1a:	bb34      	cbnz	r4, 800fa6a <_malloc_r+0x82>
 800fa1c:	4629      	mov	r1, r5
 800fa1e:	4638      	mov	r0, r7
 800fa20:	f7ff ffc2 	bl	800f9a8 <sbrk_aligned>
 800fa24:	1c43      	adds	r3, r0, #1
 800fa26:	4604      	mov	r4, r0
 800fa28:	d14d      	bne.n	800fac6 <_malloc_r+0xde>
 800fa2a:	6834      	ldr	r4, [r6, #0]
 800fa2c:	4626      	mov	r6, r4
 800fa2e:	2e00      	cmp	r6, #0
 800fa30:	d140      	bne.n	800fab4 <_malloc_r+0xcc>
 800fa32:	6823      	ldr	r3, [r4, #0]
 800fa34:	4631      	mov	r1, r6
 800fa36:	4638      	mov	r0, r7
 800fa38:	eb04 0803 	add.w	r8, r4, r3
 800fa3c:	f000 fdc0 	bl	80105c0 <_sbrk_r>
 800fa40:	4580      	cmp	r8, r0
 800fa42:	d13a      	bne.n	800faba <_malloc_r+0xd2>
 800fa44:	6821      	ldr	r1, [r4, #0]
 800fa46:	3503      	adds	r5, #3
 800fa48:	1a6d      	subs	r5, r5, r1
 800fa4a:	f025 0503 	bic.w	r5, r5, #3
 800fa4e:	3508      	adds	r5, #8
 800fa50:	2d0c      	cmp	r5, #12
 800fa52:	bf38      	it	cc
 800fa54:	250c      	movcc	r5, #12
 800fa56:	4629      	mov	r1, r5
 800fa58:	4638      	mov	r0, r7
 800fa5a:	f7ff ffa5 	bl	800f9a8 <sbrk_aligned>
 800fa5e:	3001      	adds	r0, #1
 800fa60:	d02b      	beq.n	800faba <_malloc_r+0xd2>
 800fa62:	6823      	ldr	r3, [r4, #0]
 800fa64:	442b      	add	r3, r5
 800fa66:	6023      	str	r3, [r4, #0]
 800fa68:	e00e      	b.n	800fa88 <_malloc_r+0xa0>
 800fa6a:	6822      	ldr	r2, [r4, #0]
 800fa6c:	1b52      	subs	r2, r2, r5
 800fa6e:	d41e      	bmi.n	800faae <_malloc_r+0xc6>
 800fa70:	2a0b      	cmp	r2, #11
 800fa72:	d916      	bls.n	800faa2 <_malloc_r+0xba>
 800fa74:	1961      	adds	r1, r4, r5
 800fa76:	42a3      	cmp	r3, r4
 800fa78:	6025      	str	r5, [r4, #0]
 800fa7a:	bf18      	it	ne
 800fa7c:	6059      	strne	r1, [r3, #4]
 800fa7e:	6863      	ldr	r3, [r4, #4]
 800fa80:	bf08      	it	eq
 800fa82:	6031      	streq	r1, [r6, #0]
 800fa84:	5162      	str	r2, [r4, r5]
 800fa86:	604b      	str	r3, [r1, #4]
 800fa88:	4638      	mov	r0, r7
 800fa8a:	f104 060b 	add.w	r6, r4, #11
 800fa8e:	f001 ffb1 	bl	80119f4 <__malloc_unlock>
 800fa92:	f026 0607 	bic.w	r6, r6, #7
 800fa96:	1d23      	adds	r3, r4, #4
 800fa98:	1af2      	subs	r2, r6, r3
 800fa9a:	d0b6      	beq.n	800fa0a <_malloc_r+0x22>
 800fa9c:	1b9b      	subs	r3, r3, r6
 800fa9e:	50a3      	str	r3, [r4, r2]
 800faa0:	e7b3      	b.n	800fa0a <_malloc_r+0x22>
 800faa2:	6862      	ldr	r2, [r4, #4]
 800faa4:	42a3      	cmp	r3, r4
 800faa6:	bf0c      	ite	eq
 800faa8:	6032      	streq	r2, [r6, #0]
 800faaa:	605a      	strne	r2, [r3, #4]
 800faac:	e7ec      	b.n	800fa88 <_malloc_r+0xa0>
 800faae:	4623      	mov	r3, r4
 800fab0:	6864      	ldr	r4, [r4, #4]
 800fab2:	e7b2      	b.n	800fa1a <_malloc_r+0x32>
 800fab4:	4634      	mov	r4, r6
 800fab6:	6876      	ldr	r6, [r6, #4]
 800fab8:	e7b9      	b.n	800fa2e <_malloc_r+0x46>
 800faba:	230c      	movs	r3, #12
 800fabc:	603b      	str	r3, [r7, #0]
 800fabe:	4638      	mov	r0, r7
 800fac0:	f001 ff98 	bl	80119f4 <__malloc_unlock>
 800fac4:	e7a1      	b.n	800fa0a <_malloc_r+0x22>
 800fac6:	6025      	str	r5, [r4, #0]
 800fac8:	e7de      	b.n	800fa88 <_malloc_r+0xa0>
 800faca:	bf00      	nop
 800facc:	20005c4c 	.word	0x20005c4c

0800fad0 <__cvt>:
 800fad0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fad4:	ec55 4b10 	vmov	r4, r5, d0
 800fad8:	2d00      	cmp	r5, #0
 800fada:	460e      	mov	r6, r1
 800fadc:	4619      	mov	r1, r3
 800fade:	462b      	mov	r3, r5
 800fae0:	bfbb      	ittet	lt
 800fae2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800fae6:	461d      	movlt	r5, r3
 800fae8:	2300      	movge	r3, #0
 800faea:	232d      	movlt	r3, #45	; 0x2d
 800faec:	700b      	strb	r3, [r1, #0]
 800faee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800faf0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800faf4:	4691      	mov	r9, r2
 800faf6:	f023 0820 	bic.w	r8, r3, #32
 800fafa:	bfbc      	itt	lt
 800fafc:	4622      	movlt	r2, r4
 800fafe:	4614      	movlt	r4, r2
 800fb00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fb04:	d005      	beq.n	800fb12 <__cvt+0x42>
 800fb06:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800fb0a:	d100      	bne.n	800fb0e <__cvt+0x3e>
 800fb0c:	3601      	adds	r6, #1
 800fb0e:	2102      	movs	r1, #2
 800fb10:	e000      	b.n	800fb14 <__cvt+0x44>
 800fb12:	2103      	movs	r1, #3
 800fb14:	ab03      	add	r3, sp, #12
 800fb16:	9301      	str	r3, [sp, #4]
 800fb18:	ab02      	add	r3, sp, #8
 800fb1a:	9300      	str	r3, [sp, #0]
 800fb1c:	ec45 4b10 	vmov	d0, r4, r5
 800fb20:	4653      	mov	r3, sl
 800fb22:	4632      	mov	r2, r6
 800fb24:	f001 f834 	bl	8010b90 <_dtoa_r>
 800fb28:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800fb2c:	4607      	mov	r7, r0
 800fb2e:	d102      	bne.n	800fb36 <__cvt+0x66>
 800fb30:	f019 0f01 	tst.w	r9, #1
 800fb34:	d022      	beq.n	800fb7c <__cvt+0xac>
 800fb36:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fb3a:	eb07 0906 	add.w	r9, r7, r6
 800fb3e:	d110      	bne.n	800fb62 <__cvt+0x92>
 800fb40:	783b      	ldrb	r3, [r7, #0]
 800fb42:	2b30      	cmp	r3, #48	; 0x30
 800fb44:	d10a      	bne.n	800fb5c <__cvt+0x8c>
 800fb46:	2200      	movs	r2, #0
 800fb48:	2300      	movs	r3, #0
 800fb4a:	4620      	mov	r0, r4
 800fb4c:	4629      	mov	r1, r5
 800fb4e:	f7f0 ffbb 	bl	8000ac8 <__aeabi_dcmpeq>
 800fb52:	b918      	cbnz	r0, 800fb5c <__cvt+0x8c>
 800fb54:	f1c6 0601 	rsb	r6, r6, #1
 800fb58:	f8ca 6000 	str.w	r6, [sl]
 800fb5c:	f8da 3000 	ldr.w	r3, [sl]
 800fb60:	4499      	add	r9, r3
 800fb62:	2200      	movs	r2, #0
 800fb64:	2300      	movs	r3, #0
 800fb66:	4620      	mov	r0, r4
 800fb68:	4629      	mov	r1, r5
 800fb6a:	f7f0 ffad 	bl	8000ac8 <__aeabi_dcmpeq>
 800fb6e:	b108      	cbz	r0, 800fb74 <__cvt+0xa4>
 800fb70:	f8cd 900c 	str.w	r9, [sp, #12]
 800fb74:	2230      	movs	r2, #48	; 0x30
 800fb76:	9b03      	ldr	r3, [sp, #12]
 800fb78:	454b      	cmp	r3, r9
 800fb7a:	d307      	bcc.n	800fb8c <__cvt+0xbc>
 800fb7c:	9b03      	ldr	r3, [sp, #12]
 800fb7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fb80:	1bdb      	subs	r3, r3, r7
 800fb82:	4638      	mov	r0, r7
 800fb84:	6013      	str	r3, [r2, #0]
 800fb86:	b004      	add	sp, #16
 800fb88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb8c:	1c59      	adds	r1, r3, #1
 800fb8e:	9103      	str	r1, [sp, #12]
 800fb90:	701a      	strb	r2, [r3, #0]
 800fb92:	e7f0      	b.n	800fb76 <__cvt+0xa6>

0800fb94 <__exponent>:
 800fb94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb96:	4603      	mov	r3, r0
 800fb98:	2900      	cmp	r1, #0
 800fb9a:	bfb8      	it	lt
 800fb9c:	4249      	neglt	r1, r1
 800fb9e:	f803 2b02 	strb.w	r2, [r3], #2
 800fba2:	bfb4      	ite	lt
 800fba4:	222d      	movlt	r2, #45	; 0x2d
 800fba6:	222b      	movge	r2, #43	; 0x2b
 800fba8:	2909      	cmp	r1, #9
 800fbaa:	7042      	strb	r2, [r0, #1]
 800fbac:	dd2a      	ble.n	800fc04 <__exponent+0x70>
 800fbae:	f10d 0407 	add.w	r4, sp, #7
 800fbb2:	46a4      	mov	ip, r4
 800fbb4:	270a      	movs	r7, #10
 800fbb6:	46a6      	mov	lr, r4
 800fbb8:	460a      	mov	r2, r1
 800fbba:	fb91 f6f7 	sdiv	r6, r1, r7
 800fbbe:	fb07 1516 	mls	r5, r7, r6, r1
 800fbc2:	3530      	adds	r5, #48	; 0x30
 800fbc4:	2a63      	cmp	r2, #99	; 0x63
 800fbc6:	f104 34ff 	add.w	r4, r4, #4294967295
 800fbca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800fbce:	4631      	mov	r1, r6
 800fbd0:	dcf1      	bgt.n	800fbb6 <__exponent+0x22>
 800fbd2:	3130      	adds	r1, #48	; 0x30
 800fbd4:	f1ae 0502 	sub.w	r5, lr, #2
 800fbd8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800fbdc:	1c44      	adds	r4, r0, #1
 800fbde:	4629      	mov	r1, r5
 800fbe0:	4561      	cmp	r1, ip
 800fbe2:	d30a      	bcc.n	800fbfa <__exponent+0x66>
 800fbe4:	f10d 0209 	add.w	r2, sp, #9
 800fbe8:	eba2 020e 	sub.w	r2, r2, lr
 800fbec:	4565      	cmp	r5, ip
 800fbee:	bf88      	it	hi
 800fbf0:	2200      	movhi	r2, #0
 800fbf2:	4413      	add	r3, r2
 800fbf4:	1a18      	subs	r0, r3, r0
 800fbf6:	b003      	add	sp, #12
 800fbf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fbfe:	f804 2f01 	strb.w	r2, [r4, #1]!
 800fc02:	e7ed      	b.n	800fbe0 <__exponent+0x4c>
 800fc04:	2330      	movs	r3, #48	; 0x30
 800fc06:	3130      	adds	r1, #48	; 0x30
 800fc08:	7083      	strb	r3, [r0, #2]
 800fc0a:	70c1      	strb	r1, [r0, #3]
 800fc0c:	1d03      	adds	r3, r0, #4
 800fc0e:	e7f1      	b.n	800fbf4 <__exponent+0x60>

0800fc10 <_printf_float>:
 800fc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc14:	ed2d 8b02 	vpush	{d8}
 800fc18:	b08d      	sub	sp, #52	; 0x34
 800fc1a:	460c      	mov	r4, r1
 800fc1c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800fc20:	4616      	mov	r6, r2
 800fc22:	461f      	mov	r7, r3
 800fc24:	4605      	mov	r5, r0
 800fc26:	f001 fe63 	bl	80118f0 <_localeconv_r>
 800fc2a:	f8d0 a000 	ldr.w	sl, [r0]
 800fc2e:	4650      	mov	r0, sl
 800fc30:	f7f0 face 	bl	80001d0 <strlen>
 800fc34:	2300      	movs	r3, #0
 800fc36:	930a      	str	r3, [sp, #40]	; 0x28
 800fc38:	6823      	ldr	r3, [r4, #0]
 800fc3a:	9305      	str	r3, [sp, #20]
 800fc3c:	f8d8 3000 	ldr.w	r3, [r8]
 800fc40:	f894 b018 	ldrb.w	fp, [r4, #24]
 800fc44:	3307      	adds	r3, #7
 800fc46:	f023 0307 	bic.w	r3, r3, #7
 800fc4a:	f103 0208 	add.w	r2, r3, #8
 800fc4e:	f8c8 2000 	str.w	r2, [r8]
 800fc52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc56:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800fc5a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800fc5e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fc62:	9307      	str	r3, [sp, #28]
 800fc64:	f8cd 8018 	str.w	r8, [sp, #24]
 800fc68:	ee08 0a10 	vmov	s16, r0
 800fc6c:	4b9f      	ldr	r3, [pc, #636]	; (800feec <_printf_float+0x2dc>)
 800fc6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fc72:	f04f 32ff 	mov.w	r2, #4294967295
 800fc76:	f7f0 ff59 	bl	8000b2c <__aeabi_dcmpun>
 800fc7a:	bb88      	cbnz	r0, 800fce0 <_printf_float+0xd0>
 800fc7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fc80:	4b9a      	ldr	r3, [pc, #616]	; (800feec <_printf_float+0x2dc>)
 800fc82:	f04f 32ff 	mov.w	r2, #4294967295
 800fc86:	f7f0 ff33 	bl	8000af0 <__aeabi_dcmple>
 800fc8a:	bb48      	cbnz	r0, 800fce0 <_printf_float+0xd0>
 800fc8c:	2200      	movs	r2, #0
 800fc8e:	2300      	movs	r3, #0
 800fc90:	4640      	mov	r0, r8
 800fc92:	4649      	mov	r1, r9
 800fc94:	f7f0 ff22 	bl	8000adc <__aeabi_dcmplt>
 800fc98:	b110      	cbz	r0, 800fca0 <_printf_float+0x90>
 800fc9a:	232d      	movs	r3, #45	; 0x2d
 800fc9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fca0:	4b93      	ldr	r3, [pc, #588]	; (800fef0 <_printf_float+0x2e0>)
 800fca2:	4894      	ldr	r0, [pc, #592]	; (800fef4 <_printf_float+0x2e4>)
 800fca4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800fca8:	bf94      	ite	ls
 800fcaa:	4698      	movls	r8, r3
 800fcac:	4680      	movhi	r8, r0
 800fcae:	2303      	movs	r3, #3
 800fcb0:	6123      	str	r3, [r4, #16]
 800fcb2:	9b05      	ldr	r3, [sp, #20]
 800fcb4:	f023 0204 	bic.w	r2, r3, #4
 800fcb8:	6022      	str	r2, [r4, #0]
 800fcba:	f04f 0900 	mov.w	r9, #0
 800fcbe:	9700      	str	r7, [sp, #0]
 800fcc0:	4633      	mov	r3, r6
 800fcc2:	aa0b      	add	r2, sp, #44	; 0x2c
 800fcc4:	4621      	mov	r1, r4
 800fcc6:	4628      	mov	r0, r5
 800fcc8:	f000 f9d8 	bl	801007c <_printf_common>
 800fccc:	3001      	adds	r0, #1
 800fcce:	f040 8090 	bne.w	800fdf2 <_printf_float+0x1e2>
 800fcd2:	f04f 30ff 	mov.w	r0, #4294967295
 800fcd6:	b00d      	add	sp, #52	; 0x34
 800fcd8:	ecbd 8b02 	vpop	{d8}
 800fcdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fce0:	4642      	mov	r2, r8
 800fce2:	464b      	mov	r3, r9
 800fce4:	4640      	mov	r0, r8
 800fce6:	4649      	mov	r1, r9
 800fce8:	f7f0 ff20 	bl	8000b2c <__aeabi_dcmpun>
 800fcec:	b140      	cbz	r0, 800fd00 <_printf_float+0xf0>
 800fcee:	464b      	mov	r3, r9
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	bfbc      	itt	lt
 800fcf4:	232d      	movlt	r3, #45	; 0x2d
 800fcf6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800fcfa:	487f      	ldr	r0, [pc, #508]	; (800fef8 <_printf_float+0x2e8>)
 800fcfc:	4b7f      	ldr	r3, [pc, #508]	; (800fefc <_printf_float+0x2ec>)
 800fcfe:	e7d1      	b.n	800fca4 <_printf_float+0x94>
 800fd00:	6863      	ldr	r3, [r4, #4]
 800fd02:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800fd06:	9206      	str	r2, [sp, #24]
 800fd08:	1c5a      	adds	r2, r3, #1
 800fd0a:	d13f      	bne.n	800fd8c <_printf_float+0x17c>
 800fd0c:	2306      	movs	r3, #6
 800fd0e:	6063      	str	r3, [r4, #4]
 800fd10:	9b05      	ldr	r3, [sp, #20]
 800fd12:	6861      	ldr	r1, [r4, #4]
 800fd14:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800fd18:	2300      	movs	r3, #0
 800fd1a:	9303      	str	r3, [sp, #12]
 800fd1c:	ab0a      	add	r3, sp, #40	; 0x28
 800fd1e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800fd22:	ab09      	add	r3, sp, #36	; 0x24
 800fd24:	ec49 8b10 	vmov	d0, r8, r9
 800fd28:	9300      	str	r3, [sp, #0]
 800fd2a:	6022      	str	r2, [r4, #0]
 800fd2c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fd30:	4628      	mov	r0, r5
 800fd32:	f7ff fecd 	bl	800fad0 <__cvt>
 800fd36:	9b06      	ldr	r3, [sp, #24]
 800fd38:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fd3a:	2b47      	cmp	r3, #71	; 0x47
 800fd3c:	4680      	mov	r8, r0
 800fd3e:	d108      	bne.n	800fd52 <_printf_float+0x142>
 800fd40:	1cc8      	adds	r0, r1, #3
 800fd42:	db02      	blt.n	800fd4a <_printf_float+0x13a>
 800fd44:	6863      	ldr	r3, [r4, #4]
 800fd46:	4299      	cmp	r1, r3
 800fd48:	dd41      	ble.n	800fdce <_printf_float+0x1be>
 800fd4a:	f1ab 0b02 	sub.w	fp, fp, #2
 800fd4e:	fa5f fb8b 	uxtb.w	fp, fp
 800fd52:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fd56:	d820      	bhi.n	800fd9a <_printf_float+0x18a>
 800fd58:	3901      	subs	r1, #1
 800fd5a:	465a      	mov	r2, fp
 800fd5c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fd60:	9109      	str	r1, [sp, #36]	; 0x24
 800fd62:	f7ff ff17 	bl	800fb94 <__exponent>
 800fd66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fd68:	1813      	adds	r3, r2, r0
 800fd6a:	2a01      	cmp	r2, #1
 800fd6c:	4681      	mov	r9, r0
 800fd6e:	6123      	str	r3, [r4, #16]
 800fd70:	dc02      	bgt.n	800fd78 <_printf_float+0x168>
 800fd72:	6822      	ldr	r2, [r4, #0]
 800fd74:	07d2      	lsls	r2, r2, #31
 800fd76:	d501      	bpl.n	800fd7c <_printf_float+0x16c>
 800fd78:	3301      	adds	r3, #1
 800fd7a:	6123      	str	r3, [r4, #16]
 800fd7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d09c      	beq.n	800fcbe <_printf_float+0xae>
 800fd84:	232d      	movs	r3, #45	; 0x2d
 800fd86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fd8a:	e798      	b.n	800fcbe <_printf_float+0xae>
 800fd8c:	9a06      	ldr	r2, [sp, #24]
 800fd8e:	2a47      	cmp	r2, #71	; 0x47
 800fd90:	d1be      	bne.n	800fd10 <_printf_float+0x100>
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d1bc      	bne.n	800fd10 <_printf_float+0x100>
 800fd96:	2301      	movs	r3, #1
 800fd98:	e7b9      	b.n	800fd0e <_printf_float+0xfe>
 800fd9a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800fd9e:	d118      	bne.n	800fdd2 <_printf_float+0x1c2>
 800fda0:	2900      	cmp	r1, #0
 800fda2:	6863      	ldr	r3, [r4, #4]
 800fda4:	dd0b      	ble.n	800fdbe <_printf_float+0x1ae>
 800fda6:	6121      	str	r1, [r4, #16]
 800fda8:	b913      	cbnz	r3, 800fdb0 <_printf_float+0x1a0>
 800fdaa:	6822      	ldr	r2, [r4, #0]
 800fdac:	07d0      	lsls	r0, r2, #31
 800fdae:	d502      	bpl.n	800fdb6 <_printf_float+0x1a6>
 800fdb0:	3301      	adds	r3, #1
 800fdb2:	440b      	add	r3, r1
 800fdb4:	6123      	str	r3, [r4, #16]
 800fdb6:	65a1      	str	r1, [r4, #88]	; 0x58
 800fdb8:	f04f 0900 	mov.w	r9, #0
 800fdbc:	e7de      	b.n	800fd7c <_printf_float+0x16c>
 800fdbe:	b913      	cbnz	r3, 800fdc6 <_printf_float+0x1b6>
 800fdc0:	6822      	ldr	r2, [r4, #0]
 800fdc2:	07d2      	lsls	r2, r2, #31
 800fdc4:	d501      	bpl.n	800fdca <_printf_float+0x1ba>
 800fdc6:	3302      	adds	r3, #2
 800fdc8:	e7f4      	b.n	800fdb4 <_printf_float+0x1a4>
 800fdca:	2301      	movs	r3, #1
 800fdcc:	e7f2      	b.n	800fdb4 <_printf_float+0x1a4>
 800fdce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800fdd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fdd4:	4299      	cmp	r1, r3
 800fdd6:	db05      	blt.n	800fde4 <_printf_float+0x1d4>
 800fdd8:	6823      	ldr	r3, [r4, #0]
 800fdda:	6121      	str	r1, [r4, #16]
 800fddc:	07d8      	lsls	r0, r3, #31
 800fdde:	d5ea      	bpl.n	800fdb6 <_printf_float+0x1a6>
 800fde0:	1c4b      	adds	r3, r1, #1
 800fde2:	e7e7      	b.n	800fdb4 <_printf_float+0x1a4>
 800fde4:	2900      	cmp	r1, #0
 800fde6:	bfd4      	ite	le
 800fde8:	f1c1 0202 	rsble	r2, r1, #2
 800fdec:	2201      	movgt	r2, #1
 800fdee:	4413      	add	r3, r2
 800fdf0:	e7e0      	b.n	800fdb4 <_printf_float+0x1a4>
 800fdf2:	6823      	ldr	r3, [r4, #0]
 800fdf4:	055a      	lsls	r2, r3, #21
 800fdf6:	d407      	bmi.n	800fe08 <_printf_float+0x1f8>
 800fdf8:	6923      	ldr	r3, [r4, #16]
 800fdfa:	4642      	mov	r2, r8
 800fdfc:	4631      	mov	r1, r6
 800fdfe:	4628      	mov	r0, r5
 800fe00:	47b8      	blx	r7
 800fe02:	3001      	adds	r0, #1
 800fe04:	d12c      	bne.n	800fe60 <_printf_float+0x250>
 800fe06:	e764      	b.n	800fcd2 <_printf_float+0xc2>
 800fe08:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fe0c:	f240 80e0 	bls.w	800ffd0 <_printf_float+0x3c0>
 800fe10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fe14:	2200      	movs	r2, #0
 800fe16:	2300      	movs	r3, #0
 800fe18:	f7f0 fe56 	bl	8000ac8 <__aeabi_dcmpeq>
 800fe1c:	2800      	cmp	r0, #0
 800fe1e:	d034      	beq.n	800fe8a <_printf_float+0x27a>
 800fe20:	4a37      	ldr	r2, [pc, #220]	; (800ff00 <_printf_float+0x2f0>)
 800fe22:	2301      	movs	r3, #1
 800fe24:	4631      	mov	r1, r6
 800fe26:	4628      	mov	r0, r5
 800fe28:	47b8      	blx	r7
 800fe2a:	3001      	adds	r0, #1
 800fe2c:	f43f af51 	beq.w	800fcd2 <_printf_float+0xc2>
 800fe30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fe34:	429a      	cmp	r2, r3
 800fe36:	db02      	blt.n	800fe3e <_printf_float+0x22e>
 800fe38:	6823      	ldr	r3, [r4, #0]
 800fe3a:	07d8      	lsls	r0, r3, #31
 800fe3c:	d510      	bpl.n	800fe60 <_printf_float+0x250>
 800fe3e:	ee18 3a10 	vmov	r3, s16
 800fe42:	4652      	mov	r2, sl
 800fe44:	4631      	mov	r1, r6
 800fe46:	4628      	mov	r0, r5
 800fe48:	47b8      	blx	r7
 800fe4a:	3001      	adds	r0, #1
 800fe4c:	f43f af41 	beq.w	800fcd2 <_printf_float+0xc2>
 800fe50:	f04f 0800 	mov.w	r8, #0
 800fe54:	f104 091a 	add.w	r9, r4, #26
 800fe58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe5a:	3b01      	subs	r3, #1
 800fe5c:	4543      	cmp	r3, r8
 800fe5e:	dc09      	bgt.n	800fe74 <_printf_float+0x264>
 800fe60:	6823      	ldr	r3, [r4, #0]
 800fe62:	079b      	lsls	r3, r3, #30
 800fe64:	f100 8105 	bmi.w	8010072 <_printf_float+0x462>
 800fe68:	68e0      	ldr	r0, [r4, #12]
 800fe6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe6c:	4298      	cmp	r0, r3
 800fe6e:	bfb8      	it	lt
 800fe70:	4618      	movlt	r0, r3
 800fe72:	e730      	b.n	800fcd6 <_printf_float+0xc6>
 800fe74:	2301      	movs	r3, #1
 800fe76:	464a      	mov	r2, r9
 800fe78:	4631      	mov	r1, r6
 800fe7a:	4628      	mov	r0, r5
 800fe7c:	47b8      	blx	r7
 800fe7e:	3001      	adds	r0, #1
 800fe80:	f43f af27 	beq.w	800fcd2 <_printf_float+0xc2>
 800fe84:	f108 0801 	add.w	r8, r8, #1
 800fe88:	e7e6      	b.n	800fe58 <_printf_float+0x248>
 800fe8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	dc39      	bgt.n	800ff04 <_printf_float+0x2f4>
 800fe90:	4a1b      	ldr	r2, [pc, #108]	; (800ff00 <_printf_float+0x2f0>)
 800fe92:	2301      	movs	r3, #1
 800fe94:	4631      	mov	r1, r6
 800fe96:	4628      	mov	r0, r5
 800fe98:	47b8      	blx	r7
 800fe9a:	3001      	adds	r0, #1
 800fe9c:	f43f af19 	beq.w	800fcd2 <_printf_float+0xc2>
 800fea0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fea4:	4313      	orrs	r3, r2
 800fea6:	d102      	bne.n	800feae <_printf_float+0x29e>
 800fea8:	6823      	ldr	r3, [r4, #0]
 800feaa:	07d9      	lsls	r1, r3, #31
 800feac:	d5d8      	bpl.n	800fe60 <_printf_float+0x250>
 800feae:	ee18 3a10 	vmov	r3, s16
 800feb2:	4652      	mov	r2, sl
 800feb4:	4631      	mov	r1, r6
 800feb6:	4628      	mov	r0, r5
 800feb8:	47b8      	blx	r7
 800feba:	3001      	adds	r0, #1
 800febc:	f43f af09 	beq.w	800fcd2 <_printf_float+0xc2>
 800fec0:	f04f 0900 	mov.w	r9, #0
 800fec4:	f104 0a1a 	add.w	sl, r4, #26
 800fec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800feca:	425b      	negs	r3, r3
 800fecc:	454b      	cmp	r3, r9
 800fece:	dc01      	bgt.n	800fed4 <_printf_float+0x2c4>
 800fed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fed2:	e792      	b.n	800fdfa <_printf_float+0x1ea>
 800fed4:	2301      	movs	r3, #1
 800fed6:	4652      	mov	r2, sl
 800fed8:	4631      	mov	r1, r6
 800feda:	4628      	mov	r0, r5
 800fedc:	47b8      	blx	r7
 800fede:	3001      	adds	r0, #1
 800fee0:	f43f aef7 	beq.w	800fcd2 <_printf_float+0xc2>
 800fee4:	f109 0901 	add.w	r9, r9, #1
 800fee8:	e7ee      	b.n	800fec8 <_printf_float+0x2b8>
 800feea:	bf00      	nop
 800feec:	7fefffff 	.word	0x7fefffff
 800fef0:	08013654 	.word	0x08013654
 800fef4:	08013658 	.word	0x08013658
 800fef8:	08013660 	.word	0x08013660
 800fefc:	0801365c 	.word	0x0801365c
 800ff00:	08013664 	.word	0x08013664
 800ff04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ff06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ff08:	429a      	cmp	r2, r3
 800ff0a:	bfa8      	it	ge
 800ff0c:	461a      	movge	r2, r3
 800ff0e:	2a00      	cmp	r2, #0
 800ff10:	4691      	mov	r9, r2
 800ff12:	dc37      	bgt.n	800ff84 <_printf_float+0x374>
 800ff14:	f04f 0b00 	mov.w	fp, #0
 800ff18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ff1c:	f104 021a 	add.w	r2, r4, #26
 800ff20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ff22:	9305      	str	r3, [sp, #20]
 800ff24:	eba3 0309 	sub.w	r3, r3, r9
 800ff28:	455b      	cmp	r3, fp
 800ff2a:	dc33      	bgt.n	800ff94 <_printf_float+0x384>
 800ff2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ff30:	429a      	cmp	r2, r3
 800ff32:	db3b      	blt.n	800ffac <_printf_float+0x39c>
 800ff34:	6823      	ldr	r3, [r4, #0]
 800ff36:	07da      	lsls	r2, r3, #31
 800ff38:	d438      	bmi.n	800ffac <_printf_float+0x39c>
 800ff3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff3c:	9a05      	ldr	r2, [sp, #20]
 800ff3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ff40:	1a9a      	subs	r2, r3, r2
 800ff42:	eba3 0901 	sub.w	r9, r3, r1
 800ff46:	4591      	cmp	r9, r2
 800ff48:	bfa8      	it	ge
 800ff4a:	4691      	movge	r9, r2
 800ff4c:	f1b9 0f00 	cmp.w	r9, #0
 800ff50:	dc35      	bgt.n	800ffbe <_printf_float+0x3ae>
 800ff52:	f04f 0800 	mov.w	r8, #0
 800ff56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ff5a:	f104 0a1a 	add.w	sl, r4, #26
 800ff5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ff62:	1a9b      	subs	r3, r3, r2
 800ff64:	eba3 0309 	sub.w	r3, r3, r9
 800ff68:	4543      	cmp	r3, r8
 800ff6a:	f77f af79 	ble.w	800fe60 <_printf_float+0x250>
 800ff6e:	2301      	movs	r3, #1
 800ff70:	4652      	mov	r2, sl
 800ff72:	4631      	mov	r1, r6
 800ff74:	4628      	mov	r0, r5
 800ff76:	47b8      	blx	r7
 800ff78:	3001      	adds	r0, #1
 800ff7a:	f43f aeaa 	beq.w	800fcd2 <_printf_float+0xc2>
 800ff7e:	f108 0801 	add.w	r8, r8, #1
 800ff82:	e7ec      	b.n	800ff5e <_printf_float+0x34e>
 800ff84:	4613      	mov	r3, r2
 800ff86:	4631      	mov	r1, r6
 800ff88:	4642      	mov	r2, r8
 800ff8a:	4628      	mov	r0, r5
 800ff8c:	47b8      	blx	r7
 800ff8e:	3001      	adds	r0, #1
 800ff90:	d1c0      	bne.n	800ff14 <_printf_float+0x304>
 800ff92:	e69e      	b.n	800fcd2 <_printf_float+0xc2>
 800ff94:	2301      	movs	r3, #1
 800ff96:	4631      	mov	r1, r6
 800ff98:	4628      	mov	r0, r5
 800ff9a:	9205      	str	r2, [sp, #20]
 800ff9c:	47b8      	blx	r7
 800ff9e:	3001      	adds	r0, #1
 800ffa0:	f43f ae97 	beq.w	800fcd2 <_printf_float+0xc2>
 800ffa4:	9a05      	ldr	r2, [sp, #20]
 800ffa6:	f10b 0b01 	add.w	fp, fp, #1
 800ffaa:	e7b9      	b.n	800ff20 <_printf_float+0x310>
 800ffac:	ee18 3a10 	vmov	r3, s16
 800ffb0:	4652      	mov	r2, sl
 800ffb2:	4631      	mov	r1, r6
 800ffb4:	4628      	mov	r0, r5
 800ffb6:	47b8      	blx	r7
 800ffb8:	3001      	adds	r0, #1
 800ffba:	d1be      	bne.n	800ff3a <_printf_float+0x32a>
 800ffbc:	e689      	b.n	800fcd2 <_printf_float+0xc2>
 800ffbe:	9a05      	ldr	r2, [sp, #20]
 800ffc0:	464b      	mov	r3, r9
 800ffc2:	4442      	add	r2, r8
 800ffc4:	4631      	mov	r1, r6
 800ffc6:	4628      	mov	r0, r5
 800ffc8:	47b8      	blx	r7
 800ffca:	3001      	adds	r0, #1
 800ffcc:	d1c1      	bne.n	800ff52 <_printf_float+0x342>
 800ffce:	e680      	b.n	800fcd2 <_printf_float+0xc2>
 800ffd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ffd2:	2a01      	cmp	r2, #1
 800ffd4:	dc01      	bgt.n	800ffda <_printf_float+0x3ca>
 800ffd6:	07db      	lsls	r3, r3, #31
 800ffd8:	d538      	bpl.n	801004c <_printf_float+0x43c>
 800ffda:	2301      	movs	r3, #1
 800ffdc:	4642      	mov	r2, r8
 800ffde:	4631      	mov	r1, r6
 800ffe0:	4628      	mov	r0, r5
 800ffe2:	47b8      	blx	r7
 800ffe4:	3001      	adds	r0, #1
 800ffe6:	f43f ae74 	beq.w	800fcd2 <_printf_float+0xc2>
 800ffea:	ee18 3a10 	vmov	r3, s16
 800ffee:	4652      	mov	r2, sl
 800fff0:	4631      	mov	r1, r6
 800fff2:	4628      	mov	r0, r5
 800fff4:	47b8      	blx	r7
 800fff6:	3001      	adds	r0, #1
 800fff8:	f43f ae6b 	beq.w	800fcd2 <_printf_float+0xc2>
 800fffc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010000:	2200      	movs	r2, #0
 8010002:	2300      	movs	r3, #0
 8010004:	f7f0 fd60 	bl	8000ac8 <__aeabi_dcmpeq>
 8010008:	b9d8      	cbnz	r0, 8010042 <_printf_float+0x432>
 801000a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801000c:	f108 0201 	add.w	r2, r8, #1
 8010010:	3b01      	subs	r3, #1
 8010012:	4631      	mov	r1, r6
 8010014:	4628      	mov	r0, r5
 8010016:	47b8      	blx	r7
 8010018:	3001      	adds	r0, #1
 801001a:	d10e      	bne.n	801003a <_printf_float+0x42a>
 801001c:	e659      	b.n	800fcd2 <_printf_float+0xc2>
 801001e:	2301      	movs	r3, #1
 8010020:	4652      	mov	r2, sl
 8010022:	4631      	mov	r1, r6
 8010024:	4628      	mov	r0, r5
 8010026:	47b8      	blx	r7
 8010028:	3001      	adds	r0, #1
 801002a:	f43f ae52 	beq.w	800fcd2 <_printf_float+0xc2>
 801002e:	f108 0801 	add.w	r8, r8, #1
 8010032:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010034:	3b01      	subs	r3, #1
 8010036:	4543      	cmp	r3, r8
 8010038:	dcf1      	bgt.n	801001e <_printf_float+0x40e>
 801003a:	464b      	mov	r3, r9
 801003c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010040:	e6dc      	b.n	800fdfc <_printf_float+0x1ec>
 8010042:	f04f 0800 	mov.w	r8, #0
 8010046:	f104 0a1a 	add.w	sl, r4, #26
 801004a:	e7f2      	b.n	8010032 <_printf_float+0x422>
 801004c:	2301      	movs	r3, #1
 801004e:	4642      	mov	r2, r8
 8010050:	e7df      	b.n	8010012 <_printf_float+0x402>
 8010052:	2301      	movs	r3, #1
 8010054:	464a      	mov	r2, r9
 8010056:	4631      	mov	r1, r6
 8010058:	4628      	mov	r0, r5
 801005a:	47b8      	blx	r7
 801005c:	3001      	adds	r0, #1
 801005e:	f43f ae38 	beq.w	800fcd2 <_printf_float+0xc2>
 8010062:	f108 0801 	add.w	r8, r8, #1
 8010066:	68e3      	ldr	r3, [r4, #12]
 8010068:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801006a:	1a5b      	subs	r3, r3, r1
 801006c:	4543      	cmp	r3, r8
 801006e:	dcf0      	bgt.n	8010052 <_printf_float+0x442>
 8010070:	e6fa      	b.n	800fe68 <_printf_float+0x258>
 8010072:	f04f 0800 	mov.w	r8, #0
 8010076:	f104 0919 	add.w	r9, r4, #25
 801007a:	e7f4      	b.n	8010066 <_printf_float+0x456>

0801007c <_printf_common>:
 801007c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010080:	4616      	mov	r6, r2
 8010082:	4699      	mov	r9, r3
 8010084:	688a      	ldr	r2, [r1, #8]
 8010086:	690b      	ldr	r3, [r1, #16]
 8010088:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801008c:	4293      	cmp	r3, r2
 801008e:	bfb8      	it	lt
 8010090:	4613      	movlt	r3, r2
 8010092:	6033      	str	r3, [r6, #0]
 8010094:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010098:	4607      	mov	r7, r0
 801009a:	460c      	mov	r4, r1
 801009c:	b10a      	cbz	r2, 80100a2 <_printf_common+0x26>
 801009e:	3301      	adds	r3, #1
 80100a0:	6033      	str	r3, [r6, #0]
 80100a2:	6823      	ldr	r3, [r4, #0]
 80100a4:	0699      	lsls	r1, r3, #26
 80100a6:	bf42      	ittt	mi
 80100a8:	6833      	ldrmi	r3, [r6, #0]
 80100aa:	3302      	addmi	r3, #2
 80100ac:	6033      	strmi	r3, [r6, #0]
 80100ae:	6825      	ldr	r5, [r4, #0]
 80100b0:	f015 0506 	ands.w	r5, r5, #6
 80100b4:	d106      	bne.n	80100c4 <_printf_common+0x48>
 80100b6:	f104 0a19 	add.w	sl, r4, #25
 80100ba:	68e3      	ldr	r3, [r4, #12]
 80100bc:	6832      	ldr	r2, [r6, #0]
 80100be:	1a9b      	subs	r3, r3, r2
 80100c0:	42ab      	cmp	r3, r5
 80100c2:	dc26      	bgt.n	8010112 <_printf_common+0x96>
 80100c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80100c8:	1e13      	subs	r3, r2, #0
 80100ca:	6822      	ldr	r2, [r4, #0]
 80100cc:	bf18      	it	ne
 80100ce:	2301      	movne	r3, #1
 80100d0:	0692      	lsls	r2, r2, #26
 80100d2:	d42b      	bmi.n	801012c <_printf_common+0xb0>
 80100d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80100d8:	4649      	mov	r1, r9
 80100da:	4638      	mov	r0, r7
 80100dc:	47c0      	blx	r8
 80100de:	3001      	adds	r0, #1
 80100e0:	d01e      	beq.n	8010120 <_printf_common+0xa4>
 80100e2:	6823      	ldr	r3, [r4, #0]
 80100e4:	68e5      	ldr	r5, [r4, #12]
 80100e6:	6832      	ldr	r2, [r6, #0]
 80100e8:	f003 0306 	and.w	r3, r3, #6
 80100ec:	2b04      	cmp	r3, #4
 80100ee:	bf08      	it	eq
 80100f0:	1aad      	subeq	r5, r5, r2
 80100f2:	68a3      	ldr	r3, [r4, #8]
 80100f4:	6922      	ldr	r2, [r4, #16]
 80100f6:	bf0c      	ite	eq
 80100f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80100fc:	2500      	movne	r5, #0
 80100fe:	4293      	cmp	r3, r2
 8010100:	bfc4      	itt	gt
 8010102:	1a9b      	subgt	r3, r3, r2
 8010104:	18ed      	addgt	r5, r5, r3
 8010106:	2600      	movs	r6, #0
 8010108:	341a      	adds	r4, #26
 801010a:	42b5      	cmp	r5, r6
 801010c:	d11a      	bne.n	8010144 <_printf_common+0xc8>
 801010e:	2000      	movs	r0, #0
 8010110:	e008      	b.n	8010124 <_printf_common+0xa8>
 8010112:	2301      	movs	r3, #1
 8010114:	4652      	mov	r2, sl
 8010116:	4649      	mov	r1, r9
 8010118:	4638      	mov	r0, r7
 801011a:	47c0      	blx	r8
 801011c:	3001      	adds	r0, #1
 801011e:	d103      	bne.n	8010128 <_printf_common+0xac>
 8010120:	f04f 30ff 	mov.w	r0, #4294967295
 8010124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010128:	3501      	adds	r5, #1
 801012a:	e7c6      	b.n	80100ba <_printf_common+0x3e>
 801012c:	18e1      	adds	r1, r4, r3
 801012e:	1c5a      	adds	r2, r3, #1
 8010130:	2030      	movs	r0, #48	; 0x30
 8010132:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010136:	4422      	add	r2, r4
 8010138:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801013c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010140:	3302      	adds	r3, #2
 8010142:	e7c7      	b.n	80100d4 <_printf_common+0x58>
 8010144:	2301      	movs	r3, #1
 8010146:	4622      	mov	r2, r4
 8010148:	4649      	mov	r1, r9
 801014a:	4638      	mov	r0, r7
 801014c:	47c0      	blx	r8
 801014e:	3001      	adds	r0, #1
 8010150:	d0e6      	beq.n	8010120 <_printf_common+0xa4>
 8010152:	3601      	adds	r6, #1
 8010154:	e7d9      	b.n	801010a <_printf_common+0x8e>
	...

08010158 <_printf_i>:
 8010158:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801015c:	7e0f      	ldrb	r7, [r1, #24]
 801015e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010160:	2f78      	cmp	r7, #120	; 0x78
 8010162:	4691      	mov	r9, r2
 8010164:	4680      	mov	r8, r0
 8010166:	460c      	mov	r4, r1
 8010168:	469a      	mov	sl, r3
 801016a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801016e:	d807      	bhi.n	8010180 <_printf_i+0x28>
 8010170:	2f62      	cmp	r7, #98	; 0x62
 8010172:	d80a      	bhi.n	801018a <_printf_i+0x32>
 8010174:	2f00      	cmp	r7, #0
 8010176:	f000 80d8 	beq.w	801032a <_printf_i+0x1d2>
 801017a:	2f58      	cmp	r7, #88	; 0x58
 801017c:	f000 80a3 	beq.w	80102c6 <_printf_i+0x16e>
 8010180:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010184:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010188:	e03a      	b.n	8010200 <_printf_i+0xa8>
 801018a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801018e:	2b15      	cmp	r3, #21
 8010190:	d8f6      	bhi.n	8010180 <_printf_i+0x28>
 8010192:	a101      	add	r1, pc, #4	; (adr r1, 8010198 <_printf_i+0x40>)
 8010194:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010198:	080101f1 	.word	0x080101f1
 801019c:	08010205 	.word	0x08010205
 80101a0:	08010181 	.word	0x08010181
 80101a4:	08010181 	.word	0x08010181
 80101a8:	08010181 	.word	0x08010181
 80101ac:	08010181 	.word	0x08010181
 80101b0:	08010205 	.word	0x08010205
 80101b4:	08010181 	.word	0x08010181
 80101b8:	08010181 	.word	0x08010181
 80101bc:	08010181 	.word	0x08010181
 80101c0:	08010181 	.word	0x08010181
 80101c4:	08010311 	.word	0x08010311
 80101c8:	08010235 	.word	0x08010235
 80101cc:	080102f3 	.word	0x080102f3
 80101d0:	08010181 	.word	0x08010181
 80101d4:	08010181 	.word	0x08010181
 80101d8:	08010333 	.word	0x08010333
 80101dc:	08010181 	.word	0x08010181
 80101e0:	08010235 	.word	0x08010235
 80101e4:	08010181 	.word	0x08010181
 80101e8:	08010181 	.word	0x08010181
 80101ec:	080102fb 	.word	0x080102fb
 80101f0:	682b      	ldr	r3, [r5, #0]
 80101f2:	1d1a      	adds	r2, r3, #4
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	602a      	str	r2, [r5, #0]
 80101f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80101fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010200:	2301      	movs	r3, #1
 8010202:	e0a3      	b.n	801034c <_printf_i+0x1f4>
 8010204:	6820      	ldr	r0, [r4, #0]
 8010206:	6829      	ldr	r1, [r5, #0]
 8010208:	0606      	lsls	r6, r0, #24
 801020a:	f101 0304 	add.w	r3, r1, #4
 801020e:	d50a      	bpl.n	8010226 <_printf_i+0xce>
 8010210:	680e      	ldr	r6, [r1, #0]
 8010212:	602b      	str	r3, [r5, #0]
 8010214:	2e00      	cmp	r6, #0
 8010216:	da03      	bge.n	8010220 <_printf_i+0xc8>
 8010218:	232d      	movs	r3, #45	; 0x2d
 801021a:	4276      	negs	r6, r6
 801021c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010220:	485e      	ldr	r0, [pc, #376]	; (801039c <_printf_i+0x244>)
 8010222:	230a      	movs	r3, #10
 8010224:	e019      	b.n	801025a <_printf_i+0x102>
 8010226:	680e      	ldr	r6, [r1, #0]
 8010228:	602b      	str	r3, [r5, #0]
 801022a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801022e:	bf18      	it	ne
 8010230:	b236      	sxthne	r6, r6
 8010232:	e7ef      	b.n	8010214 <_printf_i+0xbc>
 8010234:	682b      	ldr	r3, [r5, #0]
 8010236:	6820      	ldr	r0, [r4, #0]
 8010238:	1d19      	adds	r1, r3, #4
 801023a:	6029      	str	r1, [r5, #0]
 801023c:	0601      	lsls	r1, r0, #24
 801023e:	d501      	bpl.n	8010244 <_printf_i+0xec>
 8010240:	681e      	ldr	r6, [r3, #0]
 8010242:	e002      	b.n	801024a <_printf_i+0xf2>
 8010244:	0646      	lsls	r6, r0, #25
 8010246:	d5fb      	bpl.n	8010240 <_printf_i+0xe8>
 8010248:	881e      	ldrh	r6, [r3, #0]
 801024a:	4854      	ldr	r0, [pc, #336]	; (801039c <_printf_i+0x244>)
 801024c:	2f6f      	cmp	r7, #111	; 0x6f
 801024e:	bf0c      	ite	eq
 8010250:	2308      	moveq	r3, #8
 8010252:	230a      	movne	r3, #10
 8010254:	2100      	movs	r1, #0
 8010256:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801025a:	6865      	ldr	r5, [r4, #4]
 801025c:	60a5      	str	r5, [r4, #8]
 801025e:	2d00      	cmp	r5, #0
 8010260:	bfa2      	ittt	ge
 8010262:	6821      	ldrge	r1, [r4, #0]
 8010264:	f021 0104 	bicge.w	r1, r1, #4
 8010268:	6021      	strge	r1, [r4, #0]
 801026a:	b90e      	cbnz	r6, 8010270 <_printf_i+0x118>
 801026c:	2d00      	cmp	r5, #0
 801026e:	d04d      	beq.n	801030c <_printf_i+0x1b4>
 8010270:	4615      	mov	r5, r2
 8010272:	fbb6 f1f3 	udiv	r1, r6, r3
 8010276:	fb03 6711 	mls	r7, r3, r1, r6
 801027a:	5dc7      	ldrb	r7, [r0, r7]
 801027c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010280:	4637      	mov	r7, r6
 8010282:	42bb      	cmp	r3, r7
 8010284:	460e      	mov	r6, r1
 8010286:	d9f4      	bls.n	8010272 <_printf_i+0x11a>
 8010288:	2b08      	cmp	r3, #8
 801028a:	d10b      	bne.n	80102a4 <_printf_i+0x14c>
 801028c:	6823      	ldr	r3, [r4, #0]
 801028e:	07de      	lsls	r6, r3, #31
 8010290:	d508      	bpl.n	80102a4 <_printf_i+0x14c>
 8010292:	6923      	ldr	r3, [r4, #16]
 8010294:	6861      	ldr	r1, [r4, #4]
 8010296:	4299      	cmp	r1, r3
 8010298:	bfde      	ittt	le
 801029a:	2330      	movle	r3, #48	; 0x30
 801029c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80102a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80102a4:	1b52      	subs	r2, r2, r5
 80102a6:	6122      	str	r2, [r4, #16]
 80102a8:	f8cd a000 	str.w	sl, [sp]
 80102ac:	464b      	mov	r3, r9
 80102ae:	aa03      	add	r2, sp, #12
 80102b0:	4621      	mov	r1, r4
 80102b2:	4640      	mov	r0, r8
 80102b4:	f7ff fee2 	bl	801007c <_printf_common>
 80102b8:	3001      	adds	r0, #1
 80102ba:	d14c      	bne.n	8010356 <_printf_i+0x1fe>
 80102bc:	f04f 30ff 	mov.w	r0, #4294967295
 80102c0:	b004      	add	sp, #16
 80102c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102c6:	4835      	ldr	r0, [pc, #212]	; (801039c <_printf_i+0x244>)
 80102c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80102cc:	6829      	ldr	r1, [r5, #0]
 80102ce:	6823      	ldr	r3, [r4, #0]
 80102d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80102d4:	6029      	str	r1, [r5, #0]
 80102d6:	061d      	lsls	r5, r3, #24
 80102d8:	d514      	bpl.n	8010304 <_printf_i+0x1ac>
 80102da:	07df      	lsls	r7, r3, #31
 80102dc:	bf44      	itt	mi
 80102de:	f043 0320 	orrmi.w	r3, r3, #32
 80102e2:	6023      	strmi	r3, [r4, #0]
 80102e4:	b91e      	cbnz	r6, 80102ee <_printf_i+0x196>
 80102e6:	6823      	ldr	r3, [r4, #0]
 80102e8:	f023 0320 	bic.w	r3, r3, #32
 80102ec:	6023      	str	r3, [r4, #0]
 80102ee:	2310      	movs	r3, #16
 80102f0:	e7b0      	b.n	8010254 <_printf_i+0xfc>
 80102f2:	6823      	ldr	r3, [r4, #0]
 80102f4:	f043 0320 	orr.w	r3, r3, #32
 80102f8:	6023      	str	r3, [r4, #0]
 80102fa:	2378      	movs	r3, #120	; 0x78
 80102fc:	4828      	ldr	r0, [pc, #160]	; (80103a0 <_printf_i+0x248>)
 80102fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010302:	e7e3      	b.n	80102cc <_printf_i+0x174>
 8010304:	0659      	lsls	r1, r3, #25
 8010306:	bf48      	it	mi
 8010308:	b2b6      	uxthmi	r6, r6
 801030a:	e7e6      	b.n	80102da <_printf_i+0x182>
 801030c:	4615      	mov	r5, r2
 801030e:	e7bb      	b.n	8010288 <_printf_i+0x130>
 8010310:	682b      	ldr	r3, [r5, #0]
 8010312:	6826      	ldr	r6, [r4, #0]
 8010314:	6961      	ldr	r1, [r4, #20]
 8010316:	1d18      	adds	r0, r3, #4
 8010318:	6028      	str	r0, [r5, #0]
 801031a:	0635      	lsls	r5, r6, #24
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	d501      	bpl.n	8010324 <_printf_i+0x1cc>
 8010320:	6019      	str	r1, [r3, #0]
 8010322:	e002      	b.n	801032a <_printf_i+0x1d2>
 8010324:	0670      	lsls	r0, r6, #25
 8010326:	d5fb      	bpl.n	8010320 <_printf_i+0x1c8>
 8010328:	8019      	strh	r1, [r3, #0]
 801032a:	2300      	movs	r3, #0
 801032c:	6123      	str	r3, [r4, #16]
 801032e:	4615      	mov	r5, r2
 8010330:	e7ba      	b.n	80102a8 <_printf_i+0x150>
 8010332:	682b      	ldr	r3, [r5, #0]
 8010334:	1d1a      	adds	r2, r3, #4
 8010336:	602a      	str	r2, [r5, #0]
 8010338:	681d      	ldr	r5, [r3, #0]
 801033a:	6862      	ldr	r2, [r4, #4]
 801033c:	2100      	movs	r1, #0
 801033e:	4628      	mov	r0, r5
 8010340:	f7ef ff4e 	bl	80001e0 <memchr>
 8010344:	b108      	cbz	r0, 801034a <_printf_i+0x1f2>
 8010346:	1b40      	subs	r0, r0, r5
 8010348:	6060      	str	r0, [r4, #4]
 801034a:	6863      	ldr	r3, [r4, #4]
 801034c:	6123      	str	r3, [r4, #16]
 801034e:	2300      	movs	r3, #0
 8010350:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010354:	e7a8      	b.n	80102a8 <_printf_i+0x150>
 8010356:	6923      	ldr	r3, [r4, #16]
 8010358:	462a      	mov	r2, r5
 801035a:	4649      	mov	r1, r9
 801035c:	4640      	mov	r0, r8
 801035e:	47d0      	blx	sl
 8010360:	3001      	adds	r0, #1
 8010362:	d0ab      	beq.n	80102bc <_printf_i+0x164>
 8010364:	6823      	ldr	r3, [r4, #0]
 8010366:	079b      	lsls	r3, r3, #30
 8010368:	d413      	bmi.n	8010392 <_printf_i+0x23a>
 801036a:	68e0      	ldr	r0, [r4, #12]
 801036c:	9b03      	ldr	r3, [sp, #12]
 801036e:	4298      	cmp	r0, r3
 8010370:	bfb8      	it	lt
 8010372:	4618      	movlt	r0, r3
 8010374:	e7a4      	b.n	80102c0 <_printf_i+0x168>
 8010376:	2301      	movs	r3, #1
 8010378:	4632      	mov	r2, r6
 801037a:	4649      	mov	r1, r9
 801037c:	4640      	mov	r0, r8
 801037e:	47d0      	blx	sl
 8010380:	3001      	adds	r0, #1
 8010382:	d09b      	beq.n	80102bc <_printf_i+0x164>
 8010384:	3501      	adds	r5, #1
 8010386:	68e3      	ldr	r3, [r4, #12]
 8010388:	9903      	ldr	r1, [sp, #12]
 801038a:	1a5b      	subs	r3, r3, r1
 801038c:	42ab      	cmp	r3, r5
 801038e:	dcf2      	bgt.n	8010376 <_printf_i+0x21e>
 8010390:	e7eb      	b.n	801036a <_printf_i+0x212>
 8010392:	2500      	movs	r5, #0
 8010394:	f104 0619 	add.w	r6, r4, #25
 8010398:	e7f5      	b.n	8010386 <_printf_i+0x22e>
 801039a:	bf00      	nop
 801039c:	08013666 	.word	0x08013666
 80103a0:	08013677 	.word	0x08013677

080103a4 <iprintf>:
 80103a4:	b40f      	push	{r0, r1, r2, r3}
 80103a6:	4b0a      	ldr	r3, [pc, #40]	; (80103d0 <iprintf+0x2c>)
 80103a8:	b513      	push	{r0, r1, r4, lr}
 80103aa:	681c      	ldr	r4, [r3, #0]
 80103ac:	b124      	cbz	r4, 80103b8 <iprintf+0x14>
 80103ae:	69a3      	ldr	r3, [r4, #24]
 80103b0:	b913      	cbnz	r3, 80103b8 <iprintf+0x14>
 80103b2:	4620      	mov	r0, r4
 80103b4:	f7ff f9cc 	bl	800f750 <__sinit>
 80103b8:	ab05      	add	r3, sp, #20
 80103ba:	9a04      	ldr	r2, [sp, #16]
 80103bc:	68a1      	ldr	r1, [r4, #8]
 80103be:	9301      	str	r3, [sp, #4]
 80103c0:	4620      	mov	r0, r4
 80103c2:	f002 f83d 	bl	8012440 <_vfiprintf_r>
 80103c6:	b002      	add	sp, #8
 80103c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103cc:	b004      	add	sp, #16
 80103ce:	4770      	bx	lr
 80103d0:	2000006c 	.word	0x2000006c

080103d4 <putchar>:
 80103d4:	4b09      	ldr	r3, [pc, #36]	; (80103fc <putchar+0x28>)
 80103d6:	b513      	push	{r0, r1, r4, lr}
 80103d8:	681c      	ldr	r4, [r3, #0]
 80103da:	4601      	mov	r1, r0
 80103dc:	b134      	cbz	r4, 80103ec <putchar+0x18>
 80103de:	69a3      	ldr	r3, [r4, #24]
 80103e0:	b923      	cbnz	r3, 80103ec <putchar+0x18>
 80103e2:	9001      	str	r0, [sp, #4]
 80103e4:	4620      	mov	r0, r4
 80103e6:	f7ff f9b3 	bl	800f750 <__sinit>
 80103ea:	9901      	ldr	r1, [sp, #4]
 80103ec:	68a2      	ldr	r2, [r4, #8]
 80103ee:	4620      	mov	r0, r4
 80103f0:	b002      	add	sp, #8
 80103f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103f6:	f002 b953 	b.w	80126a0 <_putc_r>
 80103fa:	bf00      	nop
 80103fc:	2000006c 	.word	0x2000006c

08010400 <_puts_r>:
 8010400:	b570      	push	{r4, r5, r6, lr}
 8010402:	460e      	mov	r6, r1
 8010404:	4605      	mov	r5, r0
 8010406:	b118      	cbz	r0, 8010410 <_puts_r+0x10>
 8010408:	6983      	ldr	r3, [r0, #24]
 801040a:	b90b      	cbnz	r3, 8010410 <_puts_r+0x10>
 801040c:	f7ff f9a0 	bl	800f750 <__sinit>
 8010410:	69ab      	ldr	r3, [r5, #24]
 8010412:	68ac      	ldr	r4, [r5, #8]
 8010414:	b913      	cbnz	r3, 801041c <_puts_r+0x1c>
 8010416:	4628      	mov	r0, r5
 8010418:	f7ff f99a 	bl	800f750 <__sinit>
 801041c:	4b2c      	ldr	r3, [pc, #176]	; (80104d0 <_puts_r+0xd0>)
 801041e:	429c      	cmp	r4, r3
 8010420:	d120      	bne.n	8010464 <_puts_r+0x64>
 8010422:	686c      	ldr	r4, [r5, #4]
 8010424:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010426:	07db      	lsls	r3, r3, #31
 8010428:	d405      	bmi.n	8010436 <_puts_r+0x36>
 801042a:	89a3      	ldrh	r3, [r4, #12]
 801042c:	0598      	lsls	r0, r3, #22
 801042e:	d402      	bmi.n	8010436 <_puts_r+0x36>
 8010430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010432:	f7f5 f98d 	bl	8005750 <__retarget_lock_acquire_recursive>
 8010436:	89a3      	ldrh	r3, [r4, #12]
 8010438:	0719      	lsls	r1, r3, #28
 801043a:	d51d      	bpl.n	8010478 <_puts_r+0x78>
 801043c:	6923      	ldr	r3, [r4, #16]
 801043e:	b1db      	cbz	r3, 8010478 <_puts_r+0x78>
 8010440:	3e01      	subs	r6, #1
 8010442:	68a3      	ldr	r3, [r4, #8]
 8010444:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010448:	3b01      	subs	r3, #1
 801044a:	60a3      	str	r3, [r4, #8]
 801044c:	bb39      	cbnz	r1, 801049e <_puts_r+0x9e>
 801044e:	2b00      	cmp	r3, #0
 8010450:	da38      	bge.n	80104c4 <_puts_r+0xc4>
 8010452:	4622      	mov	r2, r4
 8010454:	210a      	movs	r1, #10
 8010456:	4628      	mov	r0, r5
 8010458:	f000 fa2a 	bl	80108b0 <__swbuf_r>
 801045c:	3001      	adds	r0, #1
 801045e:	d011      	beq.n	8010484 <_puts_r+0x84>
 8010460:	250a      	movs	r5, #10
 8010462:	e011      	b.n	8010488 <_puts_r+0x88>
 8010464:	4b1b      	ldr	r3, [pc, #108]	; (80104d4 <_puts_r+0xd4>)
 8010466:	429c      	cmp	r4, r3
 8010468:	d101      	bne.n	801046e <_puts_r+0x6e>
 801046a:	68ac      	ldr	r4, [r5, #8]
 801046c:	e7da      	b.n	8010424 <_puts_r+0x24>
 801046e:	4b1a      	ldr	r3, [pc, #104]	; (80104d8 <_puts_r+0xd8>)
 8010470:	429c      	cmp	r4, r3
 8010472:	bf08      	it	eq
 8010474:	68ec      	ldreq	r4, [r5, #12]
 8010476:	e7d5      	b.n	8010424 <_puts_r+0x24>
 8010478:	4621      	mov	r1, r4
 801047a:	4628      	mov	r0, r5
 801047c:	f000 fa7c 	bl	8010978 <__swsetup_r>
 8010480:	2800      	cmp	r0, #0
 8010482:	d0dd      	beq.n	8010440 <_puts_r+0x40>
 8010484:	f04f 35ff 	mov.w	r5, #4294967295
 8010488:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801048a:	07da      	lsls	r2, r3, #31
 801048c:	d405      	bmi.n	801049a <_puts_r+0x9a>
 801048e:	89a3      	ldrh	r3, [r4, #12]
 8010490:	059b      	lsls	r3, r3, #22
 8010492:	d402      	bmi.n	801049a <_puts_r+0x9a>
 8010494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010496:	f7f5 f96f 	bl	8005778 <__retarget_lock_release_recursive>
 801049a:	4628      	mov	r0, r5
 801049c:	bd70      	pop	{r4, r5, r6, pc}
 801049e:	2b00      	cmp	r3, #0
 80104a0:	da04      	bge.n	80104ac <_puts_r+0xac>
 80104a2:	69a2      	ldr	r2, [r4, #24]
 80104a4:	429a      	cmp	r2, r3
 80104a6:	dc06      	bgt.n	80104b6 <_puts_r+0xb6>
 80104a8:	290a      	cmp	r1, #10
 80104aa:	d004      	beq.n	80104b6 <_puts_r+0xb6>
 80104ac:	6823      	ldr	r3, [r4, #0]
 80104ae:	1c5a      	adds	r2, r3, #1
 80104b0:	6022      	str	r2, [r4, #0]
 80104b2:	7019      	strb	r1, [r3, #0]
 80104b4:	e7c5      	b.n	8010442 <_puts_r+0x42>
 80104b6:	4622      	mov	r2, r4
 80104b8:	4628      	mov	r0, r5
 80104ba:	f000 f9f9 	bl	80108b0 <__swbuf_r>
 80104be:	3001      	adds	r0, #1
 80104c0:	d1bf      	bne.n	8010442 <_puts_r+0x42>
 80104c2:	e7df      	b.n	8010484 <_puts_r+0x84>
 80104c4:	6823      	ldr	r3, [r4, #0]
 80104c6:	250a      	movs	r5, #10
 80104c8:	1c5a      	adds	r2, r3, #1
 80104ca:	6022      	str	r2, [r4, #0]
 80104cc:	701d      	strb	r5, [r3, #0]
 80104ce:	e7db      	b.n	8010488 <_puts_r+0x88>
 80104d0:	08013610 	.word	0x08013610
 80104d4:	08013630 	.word	0x08013630
 80104d8:	080135f0 	.word	0x080135f0

080104dc <puts>:
 80104dc:	4b02      	ldr	r3, [pc, #8]	; (80104e8 <puts+0xc>)
 80104de:	4601      	mov	r1, r0
 80104e0:	6818      	ldr	r0, [r3, #0]
 80104e2:	f7ff bf8d 	b.w	8010400 <_puts_r>
 80104e6:	bf00      	nop
 80104e8:	2000006c 	.word	0x2000006c

080104ec <cleanup_glue>:
 80104ec:	b538      	push	{r3, r4, r5, lr}
 80104ee:	460c      	mov	r4, r1
 80104f0:	6809      	ldr	r1, [r1, #0]
 80104f2:	4605      	mov	r5, r0
 80104f4:	b109      	cbz	r1, 80104fa <cleanup_glue+0xe>
 80104f6:	f7ff fff9 	bl	80104ec <cleanup_glue>
 80104fa:	4621      	mov	r1, r4
 80104fc:	4628      	mov	r0, r5
 80104fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010502:	f7ff ba05 	b.w	800f910 <_free_r>
	...

08010508 <_reclaim_reent>:
 8010508:	4b2c      	ldr	r3, [pc, #176]	; (80105bc <_reclaim_reent+0xb4>)
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	4283      	cmp	r3, r0
 801050e:	b570      	push	{r4, r5, r6, lr}
 8010510:	4604      	mov	r4, r0
 8010512:	d051      	beq.n	80105b8 <_reclaim_reent+0xb0>
 8010514:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010516:	b143      	cbz	r3, 801052a <_reclaim_reent+0x22>
 8010518:	68db      	ldr	r3, [r3, #12]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d14a      	bne.n	80105b4 <_reclaim_reent+0xac>
 801051e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010520:	6819      	ldr	r1, [r3, #0]
 8010522:	b111      	cbz	r1, 801052a <_reclaim_reent+0x22>
 8010524:	4620      	mov	r0, r4
 8010526:	f7ff f9f3 	bl	800f910 <_free_r>
 801052a:	6961      	ldr	r1, [r4, #20]
 801052c:	b111      	cbz	r1, 8010534 <_reclaim_reent+0x2c>
 801052e:	4620      	mov	r0, r4
 8010530:	f7ff f9ee 	bl	800f910 <_free_r>
 8010534:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010536:	b111      	cbz	r1, 801053e <_reclaim_reent+0x36>
 8010538:	4620      	mov	r0, r4
 801053a:	f7ff f9e9 	bl	800f910 <_free_r>
 801053e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010540:	b111      	cbz	r1, 8010548 <_reclaim_reent+0x40>
 8010542:	4620      	mov	r0, r4
 8010544:	f7ff f9e4 	bl	800f910 <_free_r>
 8010548:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801054a:	b111      	cbz	r1, 8010552 <_reclaim_reent+0x4a>
 801054c:	4620      	mov	r0, r4
 801054e:	f7ff f9df 	bl	800f910 <_free_r>
 8010552:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8010554:	b111      	cbz	r1, 801055c <_reclaim_reent+0x54>
 8010556:	4620      	mov	r0, r4
 8010558:	f7ff f9da 	bl	800f910 <_free_r>
 801055c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801055e:	b111      	cbz	r1, 8010566 <_reclaim_reent+0x5e>
 8010560:	4620      	mov	r0, r4
 8010562:	f7ff f9d5 	bl	800f910 <_free_r>
 8010566:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8010568:	b111      	cbz	r1, 8010570 <_reclaim_reent+0x68>
 801056a:	4620      	mov	r0, r4
 801056c:	f7ff f9d0 	bl	800f910 <_free_r>
 8010570:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010572:	b111      	cbz	r1, 801057a <_reclaim_reent+0x72>
 8010574:	4620      	mov	r0, r4
 8010576:	f7ff f9cb 	bl	800f910 <_free_r>
 801057a:	69a3      	ldr	r3, [r4, #24]
 801057c:	b1e3      	cbz	r3, 80105b8 <_reclaim_reent+0xb0>
 801057e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010580:	4620      	mov	r0, r4
 8010582:	4798      	blx	r3
 8010584:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8010586:	b1b9      	cbz	r1, 80105b8 <_reclaim_reent+0xb0>
 8010588:	4620      	mov	r0, r4
 801058a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801058e:	f7ff bfad 	b.w	80104ec <cleanup_glue>
 8010592:	5949      	ldr	r1, [r1, r5]
 8010594:	b941      	cbnz	r1, 80105a8 <_reclaim_reent+0xa0>
 8010596:	3504      	adds	r5, #4
 8010598:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801059a:	2d80      	cmp	r5, #128	; 0x80
 801059c:	68d9      	ldr	r1, [r3, #12]
 801059e:	d1f8      	bne.n	8010592 <_reclaim_reent+0x8a>
 80105a0:	4620      	mov	r0, r4
 80105a2:	f7ff f9b5 	bl	800f910 <_free_r>
 80105a6:	e7ba      	b.n	801051e <_reclaim_reent+0x16>
 80105a8:	680e      	ldr	r6, [r1, #0]
 80105aa:	4620      	mov	r0, r4
 80105ac:	f7ff f9b0 	bl	800f910 <_free_r>
 80105b0:	4631      	mov	r1, r6
 80105b2:	e7ef      	b.n	8010594 <_reclaim_reent+0x8c>
 80105b4:	2500      	movs	r5, #0
 80105b6:	e7ef      	b.n	8010598 <_reclaim_reent+0x90>
 80105b8:	bd70      	pop	{r4, r5, r6, pc}
 80105ba:	bf00      	nop
 80105bc:	2000006c 	.word	0x2000006c

080105c0 <_sbrk_r>:
 80105c0:	b538      	push	{r3, r4, r5, lr}
 80105c2:	4d06      	ldr	r5, [pc, #24]	; (80105dc <_sbrk_r+0x1c>)
 80105c4:	2300      	movs	r3, #0
 80105c6:	4604      	mov	r4, r0
 80105c8:	4608      	mov	r0, r1
 80105ca:	602b      	str	r3, [r5, #0]
 80105cc:	f7f4 ffae 	bl	800552c <_sbrk>
 80105d0:	1c43      	adds	r3, r0, #1
 80105d2:	d102      	bne.n	80105da <_sbrk_r+0x1a>
 80105d4:	682b      	ldr	r3, [r5, #0]
 80105d6:	b103      	cbz	r3, 80105da <_sbrk_r+0x1a>
 80105d8:	6023      	str	r3, [r4, #0]
 80105da:	bd38      	pop	{r3, r4, r5, pc}
 80105dc:	20005c54 	.word	0x20005c54

080105e0 <_raise_r>:
 80105e0:	291f      	cmp	r1, #31
 80105e2:	b538      	push	{r3, r4, r5, lr}
 80105e4:	4604      	mov	r4, r0
 80105e6:	460d      	mov	r5, r1
 80105e8:	d904      	bls.n	80105f4 <_raise_r+0x14>
 80105ea:	2316      	movs	r3, #22
 80105ec:	6003      	str	r3, [r0, #0]
 80105ee:	f04f 30ff 	mov.w	r0, #4294967295
 80105f2:	bd38      	pop	{r3, r4, r5, pc}
 80105f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80105f6:	b112      	cbz	r2, 80105fe <_raise_r+0x1e>
 80105f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80105fc:	b94b      	cbnz	r3, 8010612 <_raise_r+0x32>
 80105fe:	4620      	mov	r0, r4
 8010600:	f000 f830 	bl	8010664 <_getpid_r>
 8010604:	462a      	mov	r2, r5
 8010606:	4601      	mov	r1, r0
 8010608:	4620      	mov	r0, r4
 801060a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801060e:	f000 b817 	b.w	8010640 <_kill_r>
 8010612:	2b01      	cmp	r3, #1
 8010614:	d00a      	beq.n	801062c <_raise_r+0x4c>
 8010616:	1c59      	adds	r1, r3, #1
 8010618:	d103      	bne.n	8010622 <_raise_r+0x42>
 801061a:	2316      	movs	r3, #22
 801061c:	6003      	str	r3, [r0, #0]
 801061e:	2001      	movs	r0, #1
 8010620:	e7e7      	b.n	80105f2 <_raise_r+0x12>
 8010622:	2400      	movs	r4, #0
 8010624:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010628:	4628      	mov	r0, r5
 801062a:	4798      	blx	r3
 801062c:	2000      	movs	r0, #0
 801062e:	e7e0      	b.n	80105f2 <_raise_r+0x12>

08010630 <raise>:
 8010630:	4b02      	ldr	r3, [pc, #8]	; (801063c <raise+0xc>)
 8010632:	4601      	mov	r1, r0
 8010634:	6818      	ldr	r0, [r3, #0]
 8010636:	f7ff bfd3 	b.w	80105e0 <_raise_r>
 801063a:	bf00      	nop
 801063c:	2000006c 	.word	0x2000006c

08010640 <_kill_r>:
 8010640:	b538      	push	{r3, r4, r5, lr}
 8010642:	4d07      	ldr	r5, [pc, #28]	; (8010660 <_kill_r+0x20>)
 8010644:	2300      	movs	r3, #0
 8010646:	4604      	mov	r4, r0
 8010648:	4608      	mov	r0, r1
 801064a:	4611      	mov	r1, r2
 801064c:	602b      	str	r3, [r5, #0]
 801064e:	f7f4 fee5 	bl	800541c <_kill>
 8010652:	1c43      	adds	r3, r0, #1
 8010654:	d102      	bne.n	801065c <_kill_r+0x1c>
 8010656:	682b      	ldr	r3, [r5, #0]
 8010658:	b103      	cbz	r3, 801065c <_kill_r+0x1c>
 801065a:	6023      	str	r3, [r4, #0]
 801065c:	bd38      	pop	{r3, r4, r5, pc}
 801065e:	bf00      	nop
 8010660:	20005c54 	.word	0x20005c54

08010664 <_getpid_r>:
 8010664:	f7f4 bed2 	b.w	800540c <_getpid>

08010668 <sniprintf>:
 8010668:	b40c      	push	{r2, r3}
 801066a:	b530      	push	{r4, r5, lr}
 801066c:	4b17      	ldr	r3, [pc, #92]	; (80106cc <sniprintf+0x64>)
 801066e:	1e0c      	subs	r4, r1, #0
 8010670:	681d      	ldr	r5, [r3, #0]
 8010672:	b09d      	sub	sp, #116	; 0x74
 8010674:	da08      	bge.n	8010688 <sniprintf+0x20>
 8010676:	238b      	movs	r3, #139	; 0x8b
 8010678:	602b      	str	r3, [r5, #0]
 801067a:	f04f 30ff 	mov.w	r0, #4294967295
 801067e:	b01d      	add	sp, #116	; 0x74
 8010680:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010684:	b002      	add	sp, #8
 8010686:	4770      	bx	lr
 8010688:	f44f 7302 	mov.w	r3, #520	; 0x208
 801068c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010690:	bf14      	ite	ne
 8010692:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010696:	4623      	moveq	r3, r4
 8010698:	9304      	str	r3, [sp, #16]
 801069a:	9307      	str	r3, [sp, #28]
 801069c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80106a0:	9002      	str	r0, [sp, #8]
 80106a2:	9006      	str	r0, [sp, #24]
 80106a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80106a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80106aa:	ab21      	add	r3, sp, #132	; 0x84
 80106ac:	a902      	add	r1, sp, #8
 80106ae:	4628      	mov	r0, r5
 80106b0:	9301      	str	r3, [sp, #4]
 80106b2:	f001 fd9b 	bl	80121ec <_svfiprintf_r>
 80106b6:	1c43      	adds	r3, r0, #1
 80106b8:	bfbc      	itt	lt
 80106ba:	238b      	movlt	r3, #139	; 0x8b
 80106bc:	602b      	strlt	r3, [r5, #0]
 80106be:	2c00      	cmp	r4, #0
 80106c0:	d0dd      	beq.n	801067e <sniprintf+0x16>
 80106c2:	9b02      	ldr	r3, [sp, #8]
 80106c4:	2200      	movs	r2, #0
 80106c6:	701a      	strb	r2, [r3, #0]
 80106c8:	e7d9      	b.n	801067e <sniprintf+0x16>
 80106ca:	bf00      	nop
 80106cc:	2000006c 	.word	0x2000006c

080106d0 <siprintf>:
 80106d0:	b40e      	push	{r1, r2, r3}
 80106d2:	b500      	push	{lr}
 80106d4:	b09c      	sub	sp, #112	; 0x70
 80106d6:	ab1d      	add	r3, sp, #116	; 0x74
 80106d8:	9002      	str	r0, [sp, #8]
 80106da:	9006      	str	r0, [sp, #24]
 80106dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80106e0:	4809      	ldr	r0, [pc, #36]	; (8010708 <siprintf+0x38>)
 80106e2:	9107      	str	r1, [sp, #28]
 80106e4:	9104      	str	r1, [sp, #16]
 80106e6:	4909      	ldr	r1, [pc, #36]	; (801070c <siprintf+0x3c>)
 80106e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80106ec:	9105      	str	r1, [sp, #20]
 80106ee:	6800      	ldr	r0, [r0, #0]
 80106f0:	9301      	str	r3, [sp, #4]
 80106f2:	a902      	add	r1, sp, #8
 80106f4:	f001 fd7a 	bl	80121ec <_svfiprintf_r>
 80106f8:	9b02      	ldr	r3, [sp, #8]
 80106fa:	2200      	movs	r2, #0
 80106fc:	701a      	strb	r2, [r3, #0]
 80106fe:	b01c      	add	sp, #112	; 0x70
 8010700:	f85d eb04 	ldr.w	lr, [sp], #4
 8010704:	b003      	add	sp, #12
 8010706:	4770      	bx	lr
 8010708:	2000006c 	.word	0x2000006c
 801070c:	ffff0208 	.word	0xffff0208

08010710 <__sread>:
 8010710:	b510      	push	{r4, lr}
 8010712:	460c      	mov	r4, r1
 8010714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010718:	f002 f80a 	bl	8012730 <_read_r>
 801071c:	2800      	cmp	r0, #0
 801071e:	bfab      	itete	ge
 8010720:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010722:	89a3      	ldrhlt	r3, [r4, #12]
 8010724:	181b      	addge	r3, r3, r0
 8010726:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801072a:	bfac      	ite	ge
 801072c:	6563      	strge	r3, [r4, #84]	; 0x54
 801072e:	81a3      	strhlt	r3, [r4, #12]
 8010730:	bd10      	pop	{r4, pc}

08010732 <__swrite>:
 8010732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010736:	461f      	mov	r7, r3
 8010738:	898b      	ldrh	r3, [r1, #12]
 801073a:	05db      	lsls	r3, r3, #23
 801073c:	4605      	mov	r5, r0
 801073e:	460c      	mov	r4, r1
 8010740:	4616      	mov	r6, r2
 8010742:	d505      	bpl.n	8010750 <__swrite+0x1e>
 8010744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010748:	2302      	movs	r3, #2
 801074a:	2200      	movs	r2, #0
 801074c:	f001 f8d4 	bl	80118f8 <_lseek_r>
 8010750:	89a3      	ldrh	r3, [r4, #12]
 8010752:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010756:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801075a:	81a3      	strh	r3, [r4, #12]
 801075c:	4632      	mov	r2, r6
 801075e:	463b      	mov	r3, r7
 8010760:	4628      	mov	r0, r5
 8010762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010766:	f000 b8f5 	b.w	8010954 <_write_r>

0801076a <__sseek>:
 801076a:	b510      	push	{r4, lr}
 801076c:	460c      	mov	r4, r1
 801076e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010772:	f001 f8c1 	bl	80118f8 <_lseek_r>
 8010776:	1c43      	adds	r3, r0, #1
 8010778:	89a3      	ldrh	r3, [r4, #12]
 801077a:	bf15      	itete	ne
 801077c:	6560      	strne	r0, [r4, #84]	; 0x54
 801077e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010782:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010786:	81a3      	strheq	r3, [r4, #12]
 8010788:	bf18      	it	ne
 801078a:	81a3      	strhne	r3, [r4, #12]
 801078c:	bd10      	pop	{r4, pc}

0801078e <__sclose>:
 801078e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010792:	f000 b95f 	b.w	8010a54 <_close_r>
	...

08010798 <_strtol_l.constprop.0>:
 8010798:	2b01      	cmp	r3, #1
 801079a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801079e:	d001      	beq.n	80107a4 <_strtol_l.constprop.0+0xc>
 80107a0:	2b24      	cmp	r3, #36	; 0x24
 80107a2:	d906      	bls.n	80107b2 <_strtol_l.constprop.0+0x1a>
 80107a4:	f7fe ff76 	bl	800f694 <__errno>
 80107a8:	2316      	movs	r3, #22
 80107aa:	6003      	str	r3, [r0, #0]
 80107ac:	2000      	movs	r0, #0
 80107ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107b2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010898 <_strtol_l.constprop.0+0x100>
 80107b6:	460d      	mov	r5, r1
 80107b8:	462e      	mov	r6, r5
 80107ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80107be:	f814 700c 	ldrb.w	r7, [r4, ip]
 80107c2:	f017 0708 	ands.w	r7, r7, #8
 80107c6:	d1f7      	bne.n	80107b8 <_strtol_l.constprop.0+0x20>
 80107c8:	2c2d      	cmp	r4, #45	; 0x2d
 80107ca:	d132      	bne.n	8010832 <_strtol_l.constprop.0+0x9a>
 80107cc:	782c      	ldrb	r4, [r5, #0]
 80107ce:	2701      	movs	r7, #1
 80107d0:	1cb5      	adds	r5, r6, #2
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d05b      	beq.n	801088e <_strtol_l.constprop.0+0xf6>
 80107d6:	2b10      	cmp	r3, #16
 80107d8:	d109      	bne.n	80107ee <_strtol_l.constprop.0+0x56>
 80107da:	2c30      	cmp	r4, #48	; 0x30
 80107dc:	d107      	bne.n	80107ee <_strtol_l.constprop.0+0x56>
 80107de:	782c      	ldrb	r4, [r5, #0]
 80107e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80107e4:	2c58      	cmp	r4, #88	; 0x58
 80107e6:	d14d      	bne.n	8010884 <_strtol_l.constprop.0+0xec>
 80107e8:	786c      	ldrb	r4, [r5, #1]
 80107ea:	2310      	movs	r3, #16
 80107ec:	3502      	adds	r5, #2
 80107ee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80107f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80107f6:	f04f 0c00 	mov.w	ip, #0
 80107fa:	fbb8 f9f3 	udiv	r9, r8, r3
 80107fe:	4666      	mov	r6, ip
 8010800:	fb03 8a19 	mls	sl, r3, r9, r8
 8010804:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8010808:	f1be 0f09 	cmp.w	lr, #9
 801080c:	d816      	bhi.n	801083c <_strtol_l.constprop.0+0xa4>
 801080e:	4674      	mov	r4, lr
 8010810:	42a3      	cmp	r3, r4
 8010812:	dd24      	ble.n	801085e <_strtol_l.constprop.0+0xc6>
 8010814:	f1bc 0f00 	cmp.w	ip, #0
 8010818:	db1e      	blt.n	8010858 <_strtol_l.constprop.0+0xc0>
 801081a:	45b1      	cmp	r9, r6
 801081c:	d31c      	bcc.n	8010858 <_strtol_l.constprop.0+0xc0>
 801081e:	d101      	bne.n	8010824 <_strtol_l.constprop.0+0x8c>
 8010820:	45a2      	cmp	sl, r4
 8010822:	db19      	blt.n	8010858 <_strtol_l.constprop.0+0xc0>
 8010824:	fb06 4603 	mla	r6, r6, r3, r4
 8010828:	f04f 0c01 	mov.w	ip, #1
 801082c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010830:	e7e8      	b.n	8010804 <_strtol_l.constprop.0+0x6c>
 8010832:	2c2b      	cmp	r4, #43	; 0x2b
 8010834:	bf04      	itt	eq
 8010836:	782c      	ldrbeq	r4, [r5, #0]
 8010838:	1cb5      	addeq	r5, r6, #2
 801083a:	e7ca      	b.n	80107d2 <_strtol_l.constprop.0+0x3a>
 801083c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8010840:	f1be 0f19 	cmp.w	lr, #25
 8010844:	d801      	bhi.n	801084a <_strtol_l.constprop.0+0xb2>
 8010846:	3c37      	subs	r4, #55	; 0x37
 8010848:	e7e2      	b.n	8010810 <_strtol_l.constprop.0+0x78>
 801084a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801084e:	f1be 0f19 	cmp.w	lr, #25
 8010852:	d804      	bhi.n	801085e <_strtol_l.constprop.0+0xc6>
 8010854:	3c57      	subs	r4, #87	; 0x57
 8010856:	e7db      	b.n	8010810 <_strtol_l.constprop.0+0x78>
 8010858:	f04f 3cff 	mov.w	ip, #4294967295
 801085c:	e7e6      	b.n	801082c <_strtol_l.constprop.0+0x94>
 801085e:	f1bc 0f00 	cmp.w	ip, #0
 8010862:	da05      	bge.n	8010870 <_strtol_l.constprop.0+0xd8>
 8010864:	2322      	movs	r3, #34	; 0x22
 8010866:	6003      	str	r3, [r0, #0]
 8010868:	4646      	mov	r6, r8
 801086a:	b942      	cbnz	r2, 801087e <_strtol_l.constprop.0+0xe6>
 801086c:	4630      	mov	r0, r6
 801086e:	e79e      	b.n	80107ae <_strtol_l.constprop.0+0x16>
 8010870:	b107      	cbz	r7, 8010874 <_strtol_l.constprop.0+0xdc>
 8010872:	4276      	negs	r6, r6
 8010874:	2a00      	cmp	r2, #0
 8010876:	d0f9      	beq.n	801086c <_strtol_l.constprop.0+0xd4>
 8010878:	f1bc 0f00 	cmp.w	ip, #0
 801087c:	d000      	beq.n	8010880 <_strtol_l.constprop.0+0xe8>
 801087e:	1e69      	subs	r1, r5, #1
 8010880:	6011      	str	r1, [r2, #0]
 8010882:	e7f3      	b.n	801086c <_strtol_l.constprop.0+0xd4>
 8010884:	2430      	movs	r4, #48	; 0x30
 8010886:	2b00      	cmp	r3, #0
 8010888:	d1b1      	bne.n	80107ee <_strtol_l.constprop.0+0x56>
 801088a:	2308      	movs	r3, #8
 801088c:	e7af      	b.n	80107ee <_strtol_l.constprop.0+0x56>
 801088e:	2c30      	cmp	r4, #48	; 0x30
 8010890:	d0a5      	beq.n	80107de <_strtol_l.constprop.0+0x46>
 8010892:	230a      	movs	r3, #10
 8010894:	e7ab      	b.n	80107ee <_strtol_l.constprop.0+0x56>
 8010896:	bf00      	nop
 8010898:	08013689 	.word	0x08013689

0801089c <strtol>:
 801089c:	4613      	mov	r3, r2
 801089e:	460a      	mov	r2, r1
 80108a0:	4601      	mov	r1, r0
 80108a2:	4802      	ldr	r0, [pc, #8]	; (80108ac <strtol+0x10>)
 80108a4:	6800      	ldr	r0, [r0, #0]
 80108a6:	f7ff bf77 	b.w	8010798 <_strtol_l.constprop.0>
 80108aa:	bf00      	nop
 80108ac:	2000006c 	.word	0x2000006c

080108b0 <__swbuf_r>:
 80108b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108b2:	460e      	mov	r6, r1
 80108b4:	4614      	mov	r4, r2
 80108b6:	4605      	mov	r5, r0
 80108b8:	b118      	cbz	r0, 80108c2 <__swbuf_r+0x12>
 80108ba:	6983      	ldr	r3, [r0, #24]
 80108bc:	b90b      	cbnz	r3, 80108c2 <__swbuf_r+0x12>
 80108be:	f7fe ff47 	bl	800f750 <__sinit>
 80108c2:	4b21      	ldr	r3, [pc, #132]	; (8010948 <__swbuf_r+0x98>)
 80108c4:	429c      	cmp	r4, r3
 80108c6:	d12b      	bne.n	8010920 <__swbuf_r+0x70>
 80108c8:	686c      	ldr	r4, [r5, #4]
 80108ca:	69a3      	ldr	r3, [r4, #24]
 80108cc:	60a3      	str	r3, [r4, #8]
 80108ce:	89a3      	ldrh	r3, [r4, #12]
 80108d0:	071a      	lsls	r2, r3, #28
 80108d2:	d52f      	bpl.n	8010934 <__swbuf_r+0x84>
 80108d4:	6923      	ldr	r3, [r4, #16]
 80108d6:	b36b      	cbz	r3, 8010934 <__swbuf_r+0x84>
 80108d8:	6923      	ldr	r3, [r4, #16]
 80108da:	6820      	ldr	r0, [r4, #0]
 80108dc:	1ac0      	subs	r0, r0, r3
 80108de:	6963      	ldr	r3, [r4, #20]
 80108e0:	b2f6      	uxtb	r6, r6
 80108e2:	4283      	cmp	r3, r0
 80108e4:	4637      	mov	r7, r6
 80108e6:	dc04      	bgt.n	80108f2 <__swbuf_r+0x42>
 80108e8:	4621      	mov	r1, r4
 80108ea:	4628      	mov	r0, r5
 80108ec:	f000 ffc4 	bl	8011878 <_fflush_r>
 80108f0:	bb30      	cbnz	r0, 8010940 <__swbuf_r+0x90>
 80108f2:	68a3      	ldr	r3, [r4, #8]
 80108f4:	3b01      	subs	r3, #1
 80108f6:	60a3      	str	r3, [r4, #8]
 80108f8:	6823      	ldr	r3, [r4, #0]
 80108fa:	1c5a      	adds	r2, r3, #1
 80108fc:	6022      	str	r2, [r4, #0]
 80108fe:	701e      	strb	r6, [r3, #0]
 8010900:	6963      	ldr	r3, [r4, #20]
 8010902:	3001      	adds	r0, #1
 8010904:	4283      	cmp	r3, r0
 8010906:	d004      	beq.n	8010912 <__swbuf_r+0x62>
 8010908:	89a3      	ldrh	r3, [r4, #12]
 801090a:	07db      	lsls	r3, r3, #31
 801090c:	d506      	bpl.n	801091c <__swbuf_r+0x6c>
 801090e:	2e0a      	cmp	r6, #10
 8010910:	d104      	bne.n	801091c <__swbuf_r+0x6c>
 8010912:	4621      	mov	r1, r4
 8010914:	4628      	mov	r0, r5
 8010916:	f000 ffaf 	bl	8011878 <_fflush_r>
 801091a:	b988      	cbnz	r0, 8010940 <__swbuf_r+0x90>
 801091c:	4638      	mov	r0, r7
 801091e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010920:	4b0a      	ldr	r3, [pc, #40]	; (801094c <__swbuf_r+0x9c>)
 8010922:	429c      	cmp	r4, r3
 8010924:	d101      	bne.n	801092a <__swbuf_r+0x7a>
 8010926:	68ac      	ldr	r4, [r5, #8]
 8010928:	e7cf      	b.n	80108ca <__swbuf_r+0x1a>
 801092a:	4b09      	ldr	r3, [pc, #36]	; (8010950 <__swbuf_r+0xa0>)
 801092c:	429c      	cmp	r4, r3
 801092e:	bf08      	it	eq
 8010930:	68ec      	ldreq	r4, [r5, #12]
 8010932:	e7ca      	b.n	80108ca <__swbuf_r+0x1a>
 8010934:	4621      	mov	r1, r4
 8010936:	4628      	mov	r0, r5
 8010938:	f000 f81e 	bl	8010978 <__swsetup_r>
 801093c:	2800      	cmp	r0, #0
 801093e:	d0cb      	beq.n	80108d8 <__swbuf_r+0x28>
 8010940:	f04f 37ff 	mov.w	r7, #4294967295
 8010944:	e7ea      	b.n	801091c <__swbuf_r+0x6c>
 8010946:	bf00      	nop
 8010948:	08013610 	.word	0x08013610
 801094c:	08013630 	.word	0x08013630
 8010950:	080135f0 	.word	0x080135f0

08010954 <_write_r>:
 8010954:	b538      	push	{r3, r4, r5, lr}
 8010956:	4d07      	ldr	r5, [pc, #28]	; (8010974 <_write_r+0x20>)
 8010958:	4604      	mov	r4, r0
 801095a:	4608      	mov	r0, r1
 801095c:	4611      	mov	r1, r2
 801095e:	2200      	movs	r2, #0
 8010960:	602a      	str	r2, [r5, #0]
 8010962:	461a      	mov	r2, r3
 8010964:	f7f4 fd91 	bl	800548a <_write>
 8010968:	1c43      	adds	r3, r0, #1
 801096a:	d102      	bne.n	8010972 <_write_r+0x1e>
 801096c:	682b      	ldr	r3, [r5, #0]
 801096e:	b103      	cbz	r3, 8010972 <_write_r+0x1e>
 8010970:	6023      	str	r3, [r4, #0]
 8010972:	bd38      	pop	{r3, r4, r5, pc}
 8010974:	20005c54 	.word	0x20005c54

08010978 <__swsetup_r>:
 8010978:	4b32      	ldr	r3, [pc, #200]	; (8010a44 <__swsetup_r+0xcc>)
 801097a:	b570      	push	{r4, r5, r6, lr}
 801097c:	681d      	ldr	r5, [r3, #0]
 801097e:	4606      	mov	r6, r0
 8010980:	460c      	mov	r4, r1
 8010982:	b125      	cbz	r5, 801098e <__swsetup_r+0x16>
 8010984:	69ab      	ldr	r3, [r5, #24]
 8010986:	b913      	cbnz	r3, 801098e <__swsetup_r+0x16>
 8010988:	4628      	mov	r0, r5
 801098a:	f7fe fee1 	bl	800f750 <__sinit>
 801098e:	4b2e      	ldr	r3, [pc, #184]	; (8010a48 <__swsetup_r+0xd0>)
 8010990:	429c      	cmp	r4, r3
 8010992:	d10f      	bne.n	80109b4 <__swsetup_r+0x3c>
 8010994:	686c      	ldr	r4, [r5, #4]
 8010996:	89a3      	ldrh	r3, [r4, #12]
 8010998:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801099c:	0719      	lsls	r1, r3, #28
 801099e:	d42c      	bmi.n	80109fa <__swsetup_r+0x82>
 80109a0:	06dd      	lsls	r5, r3, #27
 80109a2:	d411      	bmi.n	80109c8 <__swsetup_r+0x50>
 80109a4:	2309      	movs	r3, #9
 80109a6:	6033      	str	r3, [r6, #0]
 80109a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80109ac:	81a3      	strh	r3, [r4, #12]
 80109ae:	f04f 30ff 	mov.w	r0, #4294967295
 80109b2:	e03e      	b.n	8010a32 <__swsetup_r+0xba>
 80109b4:	4b25      	ldr	r3, [pc, #148]	; (8010a4c <__swsetup_r+0xd4>)
 80109b6:	429c      	cmp	r4, r3
 80109b8:	d101      	bne.n	80109be <__swsetup_r+0x46>
 80109ba:	68ac      	ldr	r4, [r5, #8]
 80109bc:	e7eb      	b.n	8010996 <__swsetup_r+0x1e>
 80109be:	4b24      	ldr	r3, [pc, #144]	; (8010a50 <__swsetup_r+0xd8>)
 80109c0:	429c      	cmp	r4, r3
 80109c2:	bf08      	it	eq
 80109c4:	68ec      	ldreq	r4, [r5, #12]
 80109c6:	e7e6      	b.n	8010996 <__swsetup_r+0x1e>
 80109c8:	0758      	lsls	r0, r3, #29
 80109ca:	d512      	bpl.n	80109f2 <__swsetup_r+0x7a>
 80109cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80109ce:	b141      	cbz	r1, 80109e2 <__swsetup_r+0x6a>
 80109d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80109d4:	4299      	cmp	r1, r3
 80109d6:	d002      	beq.n	80109de <__swsetup_r+0x66>
 80109d8:	4630      	mov	r0, r6
 80109da:	f7fe ff99 	bl	800f910 <_free_r>
 80109de:	2300      	movs	r3, #0
 80109e0:	6363      	str	r3, [r4, #52]	; 0x34
 80109e2:	89a3      	ldrh	r3, [r4, #12]
 80109e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80109e8:	81a3      	strh	r3, [r4, #12]
 80109ea:	2300      	movs	r3, #0
 80109ec:	6063      	str	r3, [r4, #4]
 80109ee:	6923      	ldr	r3, [r4, #16]
 80109f0:	6023      	str	r3, [r4, #0]
 80109f2:	89a3      	ldrh	r3, [r4, #12]
 80109f4:	f043 0308 	orr.w	r3, r3, #8
 80109f8:	81a3      	strh	r3, [r4, #12]
 80109fa:	6923      	ldr	r3, [r4, #16]
 80109fc:	b94b      	cbnz	r3, 8010a12 <__swsetup_r+0x9a>
 80109fe:	89a3      	ldrh	r3, [r4, #12]
 8010a00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010a08:	d003      	beq.n	8010a12 <__swsetup_r+0x9a>
 8010a0a:	4621      	mov	r1, r4
 8010a0c:	4630      	mov	r0, r6
 8010a0e:	f000 ffab 	bl	8011968 <__smakebuf_r>
 8010a12:	89a0      	ldrh	r0, [r4, #12]
 8010a14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010a18:	f010 0301 	ands.w	r3, r0, #1
 8010a1c:	d00a      	beq.n	8010a34 <__swsetup_r+0xbc>
 8010a1e:	2300      	movs	r3, #0
 8010a20:	60a3      	str	r3, [r4, #8]
 8010a22:	6963      	ldr	r3, [r4, #20]
 8010a24:	425b      	negs	r3, r3
 8010a26:	61a3      	str	r3, [r4, #24]
 8010a28:	6923      	ldr	r3, [r4, #16]
 8010a2a:	b943      	cbnz	r3, 8010a3e <__swsetup_r+0xc6>
 8010a2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010a30:	d1ba      	bne.n	80109a8 <__swsetup_r+0x30>
 8010a32:	bd70      	pop	{r4, r5, r6, pc}
 8010a34:	0781      	lsls	r1, r0, #30
 8010a36:	bf58      	it	pl
 8010a38:	6963      	ldrpl	r3, [r4, #20]
 8010a3a:	60a3      	str	r3, [r4, #8]
 8010a3c:	e7f4      	b.n	8010a28 <__swsetup_r+0xb0>
 8010a3e:	2000      	movs	r0, #0
 8010a40:	e7f7      	b.n	8010a32 <__swsetup_r+0xba>
 8010a42:	bf00      	nop
 8010a44:	2000006c 	.word	0x2000006c
 8010a48:	08013610 	.word	0x08013610
 8010a4c:	08013630 	.word	0x08013630
 8010a50:	080135f0 	.word	0x080135f0

08010a54 <_close_r>:
 8010a54:	b538      	push	{r3, r4, r5, lr}
 8010a56:	4d06      	ldr	r5, [pc, #24]	; (8010a70 <_close_r+0x1c>)
 8010a58:	2300      	movs	r3, #0
 8010a5a:	4604      	mov	r4, r0
 8010a5c:	4608      	mov	r0, r1
 8010a5e:	602b      	str	r3, [r5, #0]
 8010a60:	f7f4 fd2f 	bl	80054c2 <_close>
 8010a64:	1c43      	adds	r3, r0, #1
 8010a66:	d102      	bne.n	8010a6e <_close_r+0x1a>
 8010a68:	682b      	ldr	r3, [r5, #0]
 8010a6a:	b103      	cbz	r3, 8010a6e <_close_r+0x1a>
 8010a6c:	6023      	str	r3, [r4, #0]
 8010a6e:	bd38      	pop	{r3, r4, r5, pc}
 8010a70:	20005c54 	.word	0x20005c54

08010a74 <quorem>:
 8010a74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a78:	6903      	ldr	r3, [r0, #16]
 8010a7a:	690c      	ldr	r4, [r1, #16]
 8010a7c:	42a3      	cmp	r3, r4
 8010a7e:	4607      	mov	r7, r0
 8010a80:	f2c0 8081 	blt.w	8010b86 <quorem+0x112>
 8010a84:	3c01      	subs	r4, #1
 8010a86:	f101 0814 	add.w	r8, r1, #20
 8010a8a:	f100 0514 	add.w	r5, r0, #20
 8010a8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010a92:	9301      	str	r3, [sp, #4]
 8010a94:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010a98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010a9c:	3301      	adds	r3, #1
 8010a9e:	429a      	cmp	r2, r3
 8010aa0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010aa4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010aa8:	fbb2 f6f3 	udiv	r6, r2, r3
 8010aac:	d331      	bcc.n	8010b12 <quorem+0x9e>
 8010aae:	f04f 0e00 	mov.w	lr, #0
 8010ab2:	4640      	mov	r0, r8
 8010ab4:	46ac      	mov	ip, r5
 8010ab6:	46f2      	mov	sl, lr
 8010ab8:	f850 2b04 	ldr.w	r2, [r0], #4
 8010abc:	b293      	uxth	r3, r2
 8010abe:	fb06 e303 	mla	r3, r6, r3, lr
 8010ac2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010ac6:	b29b      	uxth	r3, r3
 8010ac8:	ebaa 0303 	sub.w	r3, sl, r3
 8010acc:	f8dc a000 	ldr.w	sl, [ip]
 8010ad0:	0c12      	lsrs	r2, r2, #16
 8010ad2:	fa13 f38a 	uxtah	r3, r3, sl
 8010ad6:	fb06 e202 	mla	r2, r6, r2, lr
 8010ada:	9300      	str	r3, [sp, #0]
 8010adc:	9b00      	ldr	r3, [sp, #0]
 8010ade:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010ae2:	b292      	uxth	r2, r2
 8010ae4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010ae8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010aec:	f8bd 3000 	ldrh.w	r3, [sp]
 8010af0:	4581      	cmp	r9, r0
 8010af2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010af6:	f84c 3b04 	str.w	r3, [ip], #4
 8010afa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010afe:	d2db      	bcs.n	8010ab8 <quorem+0x44>
 8010b00:	f855 300b 	ldr.w	r3, [r5, fp]
 8010b04:	b92b      	cbnz	r3, 8010b12 <quorem+0x9e>
 8010b06:	9b01      	ldr	r3, [sp, #4]
 8010b08:	3b04      	subs	r3, #4
 8010b0a:	429d      	cmp	r5, r3
 8010b0c:	461a      	mov	r2, r3
 8010b0e:	d32e      	bcc.n	8010b6e <quorem+0xfa>
 8010b10:	613c      	str	r4, [r7, #16]
 8010b12:	4638      	mov	r0, r7
 8010b14:	f001 f9f6 	bl	8011f04 <__mcmp>
 8010b18:	2800      	cmp	r0, #0
 8010b1a:	db24      	blt.n	8010b66 <quorem+0xf2>
 8010b1c:	3601      	adds	r6, #1
 8010b1e:	4628      	mov	r0, r5
 8010b20:	f04f 0c00 	mov.w	ip, #0
 8010b24:	f858 2b04 	ldr.w	r2, [r8], #4
 8010b28:	f8d0 e000 	ldr.w	lr, [r0]
 8010b2c:	b293      	uxth	r3, r2
 8010b2e:	ebac 0303 	sub.w	r3, ip, r3
 8010b32:	0c12      	lsrs	r2, r2, #16
 8010b34:	fa13 f38e 	uxtah	r3, r3, lr
 8010b38:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010b3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010b40:	b29b      	uxth	r3, r3
 8010b42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010b46:	45c1      	cmp	r9, r8
 8010b48:	f840 3b04 	str.w	r3, [r0], #4
 8010b4c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010b50:	d2e8      	bcs.n	8010b24 <quorem+0xb0>
 8010b52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010b56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010b5a:	b922      	cbnz	r2, 8010b66 <quorem+0xf2>
 8010b5c:	3b04      	subs	r3, #4
 8010b5e:	429d      	cmp	r5, r3
 8010b60:	461a      	mov	r2, r3
 8010b62:	d30a      	bcc.n	8010b7a <quorem+0x106>
 8010b64:	613c      	str	r4, [r7, #16]
 8010b66:	4630      	mov	r0, r6
 8010b68:	b003      	add	sp, #12
 8010b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b6e:	6812      	ldr	r2, [r2, #0]
 8010b70:	3b04      	subs	r3, #4
 8010b72:	2a00      	cmp	r2, #0
 8010b74:	d1cc      	bne.n	8010b10 <quorem+0x9c>
 8010b76:	3c01      	subs	r4, #1
 8010b78:	e7c7      	b.n	8010b0a <quorem+0x96>
 8010b7a:	6812      	ldr	r2, [r2, #0]
 8010b7c:	3b04      	subs	r3, #4
 8010b7e:	2a00      	cmp	r2, #0
 8010b80:	d1f0      	bne.n	8010b64 <quorem+0xf0>
 8010b82:	3c01      	subs	r4, #1
 8010b84:	e7eb      	b.n	8010b5e <quorem+0xea>
 8010b86:	2000      	movs	r0, #0
 8010b88:	e7ee      	b.n	8010b68 <quorem+0xf4>
 8010b8a:	0000      	movs	r0, r0
 8010b8c:	0000      	movs	r0, r0
	...

08010b90 <_dtoa_r>:
 8010b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b94:	ed2d 8b04 	vpush	{d8-d9}
 8010b98:	ec57 6b10 	vmov	r6, r7, d0
 8010b9c:	b093      	sub	sp, #76	; 0x4c
 8010b9e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010ba0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010ba4:	9106      	str	r1, [sp, #24]
 8010ba6:	ee10 aa10 	vmov	sl, s0
 8010baa:	4604      	mov	r4, r0
 8010bac:	9209      	str	r2, [sp, #36]	; 0x24
 8010bae:	930c      	str	r3, [sp, #48]	; 0x30
 8010bb0:	46bb      	mov	fp, r7
 8010bb2:	b975      	cbnz	r5, 8010bd2 <_dtoa_r+0x42>
 8010bb4:	2010      	movs	r0, #16
 8010bb6:	f7fe fe8d 	bl	800f8d4 <malloc>
 8010bba:	4602      	mov	r2, r0
 8010bbc:	6260      	str	r0, [r4, #36]	; 0x24
 8010bbe:	b920      	cbnz	r0, 8010bca <_dtoa_r+0x3a>
 8010bc0:	4ba7      	ldr	r3, [pc, #668]	; (8010e60 <_dtoa_r+0x2d0>)
 8010bc2:	21ea      	movs	r1, #234	; 0xea
 8010bc4:	48a7      	ldr	r0, [pc, #668]	; (8010e64 <_dtoa_r+0x2d4>)
 8010bc6:	f001 fdc5 	bl	8012754 <__assert_func>
 8010bca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010bce:	6005      	str	r5, [r0, #0]
 8010bd0:	60c5      	str	r5, [r0, #12]
 8010bd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010bd4:	6819      	ldr	r1, [r3, #0]
 8010bd6:	b151      	cbz	r1, 8010bee <_dtoa_r+0x5e>
 8010bd8:	685a      	ldr	r2, [r3, #4]
 8010bda:	604a      	str	r2, [r1, #4]
 8010bdc:	2301      	movs	r3, #1
 8010bde:	4093      	lsls	r3, r2
 8010be0:	608b      	str	r3, [r1, #8]
 8010be2:	4620      	mov	r0, r4
 8010be4:	f000 ff4c 	bl	8011a80 <_Bfree>
 8010be8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010bea:	2200      	movs	r2, #0
 8010bec:	601a      	str	r2, [r3, #0]
 8010bee:	1e3b      	subs	r3, r7, #0
 8010bf0:	bfaa      	itet	ge
 8010bf2:	2300      	movge	r3, #0
 8010bf4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010bf8:	f8c8 3000 	strge.w	r3, [r8]
 8010bfc:	4b9a      	ldr	r3, [pc, #616]	; (8010e68 <_dtoa_r+0x2d8>)
 8010bfe:	bfbc      	itt	lt
 8010c00:	2201      	movlt	r2, #1
 8010c02:	f8c8 2000 	strlt.w	r2, [r8]
 8010c06:	ea33 030b 	bics.w	r3, r3, fp
 8010c0a:	d11b      	bne.n	8010c44 <_dtoa_r+0xb4>
 8010c0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010c0e:	f242 730f 	movw	r3, #9999	; 0x270f
 8010c12:	6013      	str	r3, [r2, #0]
 8010c14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010c18:	4333      	orrs	r3, r6
 8010c1a:	f000 8592 	beq.w	8011742 <_dtoa_r+0xbb2>
 8010c1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010c20:	b963      	cbnz	r3, 8010c3c <_dtoa_r+0xac>
 8010c22:	4b92      	ldr	r3, [pc, #584]	; (8010e6c <_dtoa_r+0x2dc>)
 8010c24:	e022      	b.n	8010c6c <_dtoa_r+0xdc>
 8010c26:	4b92      	ldr	r3, [pc, #584]	; (8010e70 <_dtoa_r+0x2e0>)
 8010c28:	9301      	str	r3, [sp, #4]
 8010c2a:	3308      	adds	r3, #8
 8010c2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010c2e:	6013      	str	r3, [r2, #0]
 8010c30:	9801      	ldr	r0, [sp, #4]
 8010c32:	b013      	add	sp, #76	; 0x4c
 8010c34:	ecbd 8b04 	vpop	{d8-d9}
 8010c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c3c:	4b8b      	ldr	r3, [pc, #556]	; (8010e6c <_dtoa_r+0x2dc>)
 8010c3e:	9301      	str	r3, [sp, #4]
 8010c40:	3303      	adds	r3, #3
 8010c42:	e7f3      	b.n	8010c2c <_dtoa_r+0x9c>
 8010c44:	2200      	movs	r2, #0
 8010c46:	2300      	movs	r3, #0
 8010c48:	4650      	mov	r0, sl
 8010c4a:	4659      	mov	r1, fp
 8010c4c:	f7ef ff3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8010c50:	ec4b ab19 	vmov	d9, sl, fp
 8010c54:	4680      	mov	r8, r0
 8010c56:	b158      	cbz	r0, 8010c70 <_dtoa_r+0xe0>
 8010c58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010c5a:	2301      	movs	r3, #1
 8010c5c:	6013      	str	r3, [r2, #0]
 8010c5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	f000 856b 	beq.w	801173c <_dtoa_r+0xbac>
 8010c66:	4883      	ldr	r0, [pc, #524]	; (8010e74 <_dtoa_r+0x2e4>)
 8010c68:	6018      	str	r0, [r3, #0]
 8010c6a:	1e43      	subs	r3, r0, #1
 8010c6c:	9301      	str	r3, [sp, #4]
 8010c6e:	e7df      	b.n	8010c30 <_dtoa_r+0xa0>
 8010c70:	ec4b ab10 	vmov	d0, sl, fp
 8010c74:	aa10      	add	r2, sp, #64	; 0x40
 8010c76:	a911      	add	r1, sp, #68	; 0x44
 8010c78:	4620      	mov	r0, r4
 8010c7a:	f001 f9e9 	bl	8012050 <__d2b>
 8010c7e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8010c82:	ee08 0a10 	vmov	s16, r0
 8010c86:	2d00      	cmp	r5, #0
 8010c88:	f000 8084 	beq.w	8010d94 <_dtoa_r+0x204>
 8010c8c:	ee19 3a90 	vmov	r3, s19
 8010c90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010c94:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010c98:	4656      	mov	r6, sl
 8010c9a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010c9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010ca2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8010ca6:	4b74      	ldr	r3, [pc, #464]	; (8010e78 <_dtoa_r+0x2e8>)
 8010ca8:	2200      	movs	r2, #0
 8010caa:	4630      	mov	r0, r6
 8010cac:	4639      	mov	r1, r7
 8010cae:	f7ef faeb 	bl	8000288 <__aeabi_dsub>
 8010cb2:	a365      	add	r3, pc, #404	; (adr r3, 8010e48 <_dtoa_r+0x2b8>)
 8010cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cb8:	f7ef fc9e 	bl	80005f8 <__aeabi_dmul>
 8010cbc:	a364      	add	r3, pc, #400	; (adr r3, 8010e50 <_dtoa_r+0x2c0>)
 8010cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cc2:	f7ef fae3 	bl	800028c <__adddf3>
 8010cc6:	4606      	mov	r6, r0
 8010cc8:	4628      	mov	r0, r5
 8010cca:	460f      	mov	r7, r1
 8010ccc:	f7ef fc2a 	bl	8000524 <__aeabi_i2d>
 8010cd0:	a361      	add	r3, pc, #388	; (adr r3, 8010e58 <_dtoa_r+0x2c8>)
 8010cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cd6:	f7ef fc8f 	bl	80005f8 <__aeabi_dmul>
 8010cda:	4602      	mov	r2, r0
 8010cdc:	460b      	mov	r3, r1
 8010cde:	4630      	mov	r0, r6
 8010ce0:	4639      	mov	r1, r7
 8010ce2:	f7ef fad3 	bl	800028c <__adddf3>
 8010ce6:	4606      	mov	r6, r0
 8010ce8:	460f      	mov	r7, r1
 8010cea:	f7ef ff35 	bl	8000b58 <__aeabi_d2iz>
 8010cee:	2200      	movs	r2, #0
 8010cf0:	9000      	str	r0, [sp, #0]
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	4630      	mov	r0, r6
 8010cf6:	4639      	mov	r1, r7
 8010cf8:	f7ef fef0 	bl	8000adc <__aeabi_dcmplt>
 8010cfc:	b150      	cbz	r0, 8010d14 <_dtoa_r+0x184>
 8010cfe:	9800      	ldr	r0, [sp, #0]
 8010d00:	f7ef fc10 	bl	8000524 <__aeabi_i2d>
 8010d04:	4632      	mov	r2, r6
 8010d06:	463b      	mov	r3, r7
 8010d08:	f7ef fede 	bl	8000ac8 <__aeabi_dcmpeq>
 8010d0c:	b910      	cbnz	r0, 8010d14 <_dtoa_r+0x184>
 8010d0e:	9b00      	ldr	r3, [sp, #0]
 8010d10:	3b01      	subs	r3, #1
 8010d12:	9300      	str	r3, [sp, #0]
 8010d14:	9b00      	ldr	r3, [sp, #0]
 8010d16:	2b16      	cmp	r3, #22
 8010d18:	d85a      	bhi.n	8010dd0 <_dtoa_r+0x240>
 8010d1a:	9a00      	ldr	r2, [sp, #0]
 8010d1c:	4b57      	ldr	r3, [pc, #348]	; (8010e7c <_dtoa_r+0x2ec>)
 8010d1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d26:	ec51 0b19 	vmov	r0, r1, d9
 8010d2a:	f7ef fed7 	bl	8000adc <__aeabi_dcmplt>
 8010d2e:	2800      	cmp	r0, #0
 8010d30:	d050      	beq.n	8010dd4 <_dtoa_r+0x244>
 8010d32:	9b00      	ldr	r3, [sp, #0]
 8010d34:	3b01      	subs	r3, #1
 8010d36:	9300      	str	r3, [sp, #0]
 8010d38:	2300      	movs	r3, #0
 8010d3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8010d3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010d3e:	1b5d      	subs	r5, r3, r5
 8010d40:	1e6b      	subs	r3, r5, #1
 8010d42:	9305      	str	r3, [sp, #20]
 8010d44:	bf45      	ittet	mi
 8010d46:	f1c5 0301 	rsbmi	r3, r5, #1
 8010d4a:	9304      	strmi	r3, [sp, #16]
 8010d4c:	2300      	movpl	r3, #0
 8010d4e:	2300      	movmi	r3, #0
 8010d50:	bf4c      	ite	mi
 8010d52:	9305      	strmi	r3, [sp, #20]
 8010d54:	9304      	strpl	r3, [sp, #16]
 8010d56:	9b00      	ldr	r3, [sp, #0]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	db3d      	blt.n	8010dd8 <_dtoa_r+0x248>
 8010d5c:	9b05      	ldr	r3, [sp, #20]
 8010d5e:	9a00      	ldr	r2, [sp, #0]
 8010d60:	920a      	str	r2, [sp, #40]	; 0x28
 8010d62:	4413      	add	r3, r2
 8010d64:	9305      	str	r3, [sp, #20]
 8010d66:	2300      	movs	r3, #0
 8010d68:	9307      	str	r3, [sp, #28]
 8010d6a:	9b06      	ldr	r3, [sp, #24]
 8010d6c:	2b09      	cmp	r3, #9
 8010d6e:	f200 8089 	bhi.w	8010e84 <_dtoa_r+0x2f4>
 8010d72:	2b05      	cmp	r3, #5
 8010d74:	bfc4      	itt	gt
 8010d76:	3b04      	subgt	r3, #4
 8010d78:	9306      	strgt	r3, [sp, #24]
 8010d7a:	9b06      	ldr	r3, [sp, #24]
 8010d7c:	f1a3 0302 	sub.w	r3, r3, #2
 8010d80:	bfcc      	ite	gt
 8010d82:	2500      	movgt	r5, #0
 8010d84:	2501      	movle	r5, #1
 8010d86:	2b03      	cmp	r3, #3
 8010d88:	f200 8087 	bhi.w	8010e9a <_dtoa_r+0x30a>
 8010d8c:	e8df f003 	tbb	[pc, r3]
 8010d90:	59383a2d 	.word	0x59383a2d
 8010d94:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010d98:	441d      	add	r5, r3
 8010d9a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010d9e:	2b20      	cmp	r3, #32
 8010da0:	bfc1      	itttt	gt
 8010da2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010da6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010daa:	fa0b f303 	lslgt.w	r3, fp, r3
 8010dae:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010db2:	bfda      	itte	le
 8010db4:	f1c3 0320 	rsble	r3, r3, #32
 8010db8:	fa06 f003 	lslle.w	r0, r6, r3
 8010dbc:	4318      	orrgt	r0, r3
 8010dbe:	f7ef fba1 	bl	8000504 <__aeabi_ui2d>
 8010dc2:	2301      	movs	r3, #1
 8010dc4:	4606      	mov	r6, r0
 8010dc6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010dca:	3d01      	subs	r5, #1
 8010dcc:	930e      	str	r3, [sp, #56]	; 0x38
 8010dce:	e76a      	b.n	8010ca6 <_dtoa_r+0x116>
 8010dd0:	2301      	movs	r3, #1
 8010dd2:	e7b2      	b.n	8010d3a <_dtoa_r+0x1aa>
 8010dd4:	900b      	str	r0, [sp, #44]	; 0x2c
 8010dd6:	e7b1      	b.n	8010d3c <_dtoa_r+0x1ac>
 8010dd8:	9b04      	ldr	r3, [sp, #16]
 8010dda:	9a00      	ldr	r2, [sp, #0]
 8010ddc:	1a9b      	subs	r3, r3, r2
 8010dde:	9304      	str	r3, [sp, #16]
 8010de0:	4253      	negs	r3, r2
 8010de2:	9307      	str	r3, [sp, #28]
 8010de4:	2300      	movs	r3, #0
 8010de6:	930a      	str	r3, [sp, #40]	; 0x28
 8010de8:	e7bf      	b.n	8010d6a <_dtoa_r+0x1da>
 8010dea:	2300      	movs	r3, #0
 8010dec:	9308      	str	r3, [sp, #32]
 8010dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	dc55      	bgt.n	8010ea0 <_dtoa_r+0x310>
 8010df4:	2301      	movs	r3, #1
 8010df6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010dfa:	461a      	mov	r2, r3
 8010dfc:	9209      	str	r2, [sp, #36]	; 0x24
 8010dfe:	e00c      	b.n	8010e1a <_dtoa_r+0x28a>
 8010e00:	2301      	movs	r3, #1
 8010e02:	e7f3      	b.n	8010dec <_dtoa_r+0x25c>
 8010e04:	2300      	movs	r3, #0
 8010e06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010e08:	9308      	str	r3, [sp, #32]
 8010e0a:	9b00      	ldr	r3, [sp, #0]
 8010e0c:	4413      	add	r3, r2
 8010e0e:	9302      	str	r3, [sp, #8]
 8010e10:	3301      	adds	r3, #1
 8010e12:	2b01      	cmp	r3, #1
 8010e14:	9303      	str	r3, [sp, #12]
 8010e16:	bfb8      	it	lt
 8010e18:	2301      	movlt	r3, #1
 8010e1a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010e1c:	2200      	movs	r2, #0
 8010e1e:	6042      	str	r2, [r0, #4]
 8010e20:	2204      	movs	r2, #4
 8010e22:	f102 0614 	add.w	r6, r2, #20
 8010e26:	429e      	cmp	r6, r3
 8010e28:	6841      	ldr	r1, [r0, #4]
 8010e2a:	d93d      	bls.n	8010ea8 <_dtoa_r+0x318>
 8010e2c:	4620      	mov	r0, r4
 8010e2e:	f000 fde7 	bl	8011a00 <_Balloc>
 8010e32:	9001      	str	r0, [sp, #4]
 8010e34:	2800      	cmp	r0, #0
 8010e36:	d13b      	bne.n	8010eb0 <_dtoa_r+0x320>
 8010e38:	4b11      	ldr	r3, [pc, #68]	; (8010e80 <_dtoa_r+0x2f0>)
 8010e3a:	4602      	mov	r2, r0
 8010e3c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010e40:	e6c0      	b.n	8010bc4 <_dtoa_r+0x34>
 8010e42:	2301      	movs	r3, #1
 8010e44:	e7df      	b.n	8010e06 <_dtoa_r+0x276>
 8010e46:	bf00      	nop
 8010e48:	636f4361 	.word	0x636f4361
 8010e4c:	3fd287a7 	.word	0x3fd287a7
 8010e50:	8b60c8b3 	.word	0x8b60c8b3
 8010e54:	3fc68a28 	.word	0x3fc68a28
 8010e58:	509f79fb 	.word	0x509f79fb
 8010e5c:	3fd34413 	.word	0x3fd34413
 8010e60:	08013796 	.word	0x08013796
 8010e64:	080137ad 	.word	0x080137ad
 8010e68:	7ff00000 	.word	0x7ff00000
 8010e6c:	08013792 	.word	0x08013792
 8010e70:	08013789 	.word	0x08013789
 8010e74:	08013665 	.word	0x08013665
 8010e78:	3ff80000 	.word	0x3ff80000
 8010e7c:	080138a0 	.word	0x080138a0
 8010e80:	08013808 	.word	0x08013808
 8010e84:	2501      	movs	r5, #1
 8010e86:	2300      	movs	r3, #0
 8010e88:	9306      	str	r3, [sp, #24]
 8010e8a:	9508      	str	r5, [sp, #32]
 8010e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8010e90:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010e94:	2200      	movs	r2, #0
 8010e96:	2312      	movs	r3, #18
 8010e98:	e7b0      	b.n	8010dfc <_dtoa_r+0x26c>
 8010e9a:	2301      	movs	r3, #1
 8010e9c:	9308      	str	r3, [sp, #32]
 8010e9e:	e7f5      	b.n	8010e8c <_dtoa_r+0x2fc>
 8010ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ea2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010ea6:	e7b8      	b.n	8010e1a <_dtoa_r+0x28a>
 8010ea8:	3101      	adds	r1, #1
 8010eaa:	6041      	str	r1, [r0, #4]
 8010eac:	0052      	lsls	r2, r2, #1
 8010eae:	e7b8      	b.n	8010e22 <_dtoa_r+0x292>
 8010eb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010eb2:	9a01      	ldr	r2, [sp, #4]
 8010eb4:	601a      	str	r2, [r3, #0]
 8010eb6:	9b03      	ldr	r3, [sp, #12]
 8010eb8:	2b0e      	cmp	r3, #14
 8010eba:	f200 809d 	bhi.w	8010ff8 <_dtoa_r+0x468>
 8010ebe:	2d00      	cmp	r5, #0
 8010ec0:	f000 809a 	beq.w	8010ff8 <_dtoa_r+0x468>
 8010ec4:	9b00      	ldr	r3, [sp, #0]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	dd32      	ble.n	8010f30 <_dtoa_r+0x3a0>
 8010eca:	4ab7      	ldr	r2, [pc, #732]	; (80111a8 <_dtoa_r+0x618>)
 8010ecc:	f003 030f 	and.w	r3, r3, #15
 8010ed0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010ed4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010ed8:	9b00      	ldr	r3, [sp, #0]
 8010eda:	05d8      	lsls	r0, r3, #23
 8010edc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010ee0:	d516      	bpl.n	8010f10 <_dtoa_r+0x380>
 8010ee2:	4bb2      	ldr	r3, [pc, #712]	; (80111ac <_dtoa_r+0x61c>)
 8010ee4:	ec51 0b19 	vmov	r0, r1, d9
 8010ee8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010eec:	f7ef fcae 	bl	800084c <__aeabi_ddiv>
 8010ef0:	f007 070f 	and.w	r7, r7, #15
 8010ef4:	4682      	mov	sl, r0
 8010ef6:	468b      	mov	fp, r1
 8010ef8:	2503      	movs	r5, #3
 8010efa:	4eac      	ldr	r6, [pc, #688]	; (80111ac <_dtoa_r+0x61c>)
 8010efc:	b957      	cbnz	r7, 8010f14 <_dtoa_r+0x384>
 8010efe:	4642      	mov	r2, r8
 8010f00:	464b      	mov	r3, r9
 8010f02:	4650      	mov	r0, sl
 8010f04:	4659      	mov	r1, fp
 8010f06:	f7ef fca1 	bl	800084c <__aeabi_ddiv>
 8010f0a:	4682      	mov	sl, r0
 8010f0c:	468b      	mov	fp, r1
 8010f0e:	e028      	b.n	8010f62 <_dtoa_r+0x3d2>
 8010f10:	2502      	movs	r5, #2
 8010f12:	e7f2      	b.n	8010efa <_dtoa_r+0x36a>
 8010f14:	07f9      	lsls	r1, r7, #31
 8010f16:	d508      	bpl.n	8010f2a <_dtoa_r+0x39a>
 8010f18:	4640      	mov	r0, r8
 8010f1a:	4649      	mov	r1, r9
 8010f1c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010f20:	f7ef fb6a 	bl	80005f8 <__aeabi_dmul>
 8010f24:	3501      	adds	r5, #1
 8010f26:	4680      	mov	r8, r0
 8010f28:	4689      	mov	r9, r1
 8010f2a:	107f      	asrs	r7, r7, #1
 8010f2c:	3608      	adds	r6, #8
 8010f2e:	e7e5      	b.n	8010efc <_dtoa_r+0x36c>
 8010f30:	f000 809b 	beq.w	801106a <_dtoa_r+0x4da>
 8010f34:	9b00      	ldr	r3, [sp, #0]
 8010f36:	4f9d      	ldr	r7, [pc, #628]	; (80111ac <_dtoa_r+0x61c>)
 8010f38:	425e      	negs	r6, r3
 8010f3a:	4b9b      	ldr	r3, [pc, #620]	; (80111a8 <_dtoa_r+0x618>)
 8010f3c:	f006 020f 	and.w	r2, r6, #15
 8010f40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f48:	ec51 0b19 	vmov	r0, r1, d9
 8010f4c:	f7ef fb54 	bl	80005f8 <__aeabi_dmul>
 8010f50:	1136      	asrs	r6, r6, #4
 8010f52:	4682      	mov	sl, r0
 8010f54:	468b      	mov	fp, r1
 8010f56:	2300      	movs	r3, #0
 8010f58:	2502      	movs	r5, #2
 8010f5a:	2e00      	cmp	r6, #0
 8010f5c:	d17a      	bne.n	8011054 <_dtoa_r+0x4c4>
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d1d3      	bne.n	8010f0a <_dtoa_r+0x37a>
 8010f62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	f000 8082 	beq.w	801106e <_dtoa_r+0x4de>
 8010f6a:	4b91      	ldr	r3, [pc, #580]	; (80111b0 <_dtoa_r+0x620>)
 8010f6c:	2200      	movs	r2, #0
 8010f6e:	4650      	mov	r0, sl
 8010f70:	4659      	mov	r1, fp
 8010f72:	f7ef fdb3 	bl	8000adc <__aeabi_dcmplt>
 8010f76:	2800      	cmp	r0, #0
 8010f78:	d079      	beq.n	801106e <_dtoa_r+0x4de>
 8010f7a:	9b03      	ldr	r3, [sp, #12]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d076      	beq.n	801106e <_dtoa_r+0x4de>
 8010f80:	9b02      	ldr	r3, [sp, #8]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	dd36      	ble.n	8010ff4 <_dtoa_r+0x464>
 8010f86:	9b00      	ldr	r3, [sp, #0]
 8010f88:	4650      	mov	r0, sl
 8010f8a:	4659      	mov	r1, fp
 8010f8c:	1e5f      	subs	r7, r3, #1
 8010f8e:	2200      	movs	r2, #0
 8010f90:	4b88      	ldr	r3, [pc, #544]	; (80111b4 <_dtoa_r+0x624>)
 8010f92:	f7ef fb31 	bl	80005f8 <__aeabi_dmul>
 8010f96:	9e02      	ldr	r6, [sp, #8]
 8010f98:	4682      	mov	sl, r0
 8010f9a:	468b      	mov	fp, r1
 8010f9c:	3501      	adds	r5, #1
 8010f9e:	4628      	mov	r0, r5
 8010fa0:	f7ef fac0 	bl	8000524 <__aeabi_i2d>
 8010fa4:	4652      	mov	r2, sl
 8010fa6:	465b      	mov	r3, fp
 8010fa8:	f7ef fb26 	bl	80005f8 <__aeabi_dmul>
 8010fac:	4b82      	ldr	r3, [pc, #520]	; (80111b8 <_dtoa_r+0x628>)
 8010fae:	2200      	movs	r2, #0
 8010fb0:	f7ef f96c 	bl	800028c <__adddf3>
 8010fb4:	46d0      	mov	r8, sl
 8010fb6:	46d9      	mov	r9, fp
 8010fb8:	4682      	mov	sl, r0
 8010fba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010fbe:	2e00      	cmp	r6, #0
 8010fc0:	d158      	bne.n	8011074 <_dtoa_r+0x4e4>
 8010fc2:	4b7e      	ldr	r3, [pc, #504]	; (80111bc <_dtoa_r+0x62c>)
 8010fc4:	2200      	movs	r2, #0
 8010fc6:	4640      	mov	r0, r8
 8010fc8:	4649      	mov	r1, r9
 8010fca:	f7ef f95d 	bl	8000288 <__aeabi_dsub>
 8010fce:	4652      	mov	r2, sl
 8010fd0:	465b      	mov	r3, fp
 8010fd2:	4680      	mov	r8, r0
 8010fd4:	4689      	mov	r9, r1
 8010fd6:	f7ef fd9f 	bl	8000b18 <__aeabi_dcmpgt>
 8010fda:	2800      	cmp	r0, #0
 8010fdc:	f040 8295 	bne.w	801150a <_dtoa_r+0x97a>
 8010fe0:	4652      	mov	r2, sl
 8010fe2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010fe6:	4640      	mov	r0, r8
 8010fe8:	4649      	mov	r1, r9
 8010fea:	f7ef fd77 	bl	8000adc <__aeabi_dcmplt>
 8010fee:	2800      	cmp	r0, #0
 8010ff0:	f040 8289 	bne.w	8011506 <_dtoa_r+0x976>
 8010ff4:	ec5b ab19 	vmov	sl, fp, d9
 8010ff8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	f2c0 8148 	blt.w	8011290 <_dtoa_r+0x700>
 8011000:	9a00      	ldr	r2, [sp, #0]
 8011002:	2a0e      	cmp	r2, #14
 8011004:	f300 8144 	bgt.w	8011290 <_dtoa_r+0x700>
 8011008:	4b67      	ldr	r3, [pc, #412]	; (80111a8 <_dtoa_r+0x618>)
 801100a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801100e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011014:	2b00      	cmp	r3, #0
 8011016:	f280 80d5 	bge.w	80111c4 <_dtoa_r+0x634>
 801101a:	9b03      	ldr	r3, [sp, #12]
 801101c:	2b00      	cmp	r3, #0
 801101e:	f300 80d1 	bgt.w	80111c4 <_dtoa_r+0x634>
 8011022:	f040 826f 	bne.w	8011504 <_dtoa_r+0x974>
 8011026:	4b65      	ldr	r3, [pc, #404]	; (80111bc <_dtoa_r+0x62c>)
 8011028:	2200      	movs	r2, #0
 801102a:	4640      	mov	r0, r8
 801102c:	4649      	mov	r1, r9
 801102e:	f7ef fae3 	bl	80005f8 <__aeabi_dmul>
 8011032:	4652      	mov	r2, sl
 8011034:	465b      	mov	r3, fp
 8011036:	f7ef fd65 	bl	8000b04 <__aeabi_dcmpge>
 801103a:	9e03      	ldr	r6, [sp, #12]
 801103c:	4637      	mov	r7, r6
 801103e:	2800      	cmp	r0, #0
 8011040:	f040 8245 	bne.w	80114ce <_dtoa_r+0x93e>
 8011044:	9d01      	ldr	r5, [sp, #4]
 8011046:	2331      	movs	r3, #49	; 0x31
 8011048:	f805 3b01 	strb.w	r3, [r5], #1
 801104c:	9b00      	ldr	r3, [sp, #0]
 801104e:	3301      	adds	r3, #1
 8011050:	9300      	str	r3, [sp, #0]
 8011052:	e240      	b.n	80114d6 <_dtoa_r+0x946>
 8011054:	07f2      	lsls	r2, r6, #31
 8011056:	d505      	bpl.n	8011064 <_dtoa_r+0x4d4>
 8011058:	e9d7 2300 	ldrd	r2, r3, [r7]
 801105c:	f7ef facc 	bl	80005f8 <__aeabi_dmul>
 8011060:	3501      	adds	r5, #1
 8011062:	2301      	movs	r3, #1
 8011064:	1076      	asrs	r6, r6, #1
 8011066:	3708      	adds	r7, #8
 8011068:	e777      	b.n	8010f5a <_dtoa_r+0x3ca>
 801106a:	2502      	movs	r5, #2
 801106c:	e779      	b.n	8010f62 <_dtoa_r+0x3d2>
 801106e:	9f00      	ldr	r7, [sp, #0]
 8011070:	9e03      	ldr	r6, [sp, #12]
 8011072:	e794      	b.n	8010f9e <_dtoa_r+0x40e>
 8011074:	9901      	ldr	r1, [sp, #4]
 8011076:	4b4c      	ldr	r3, [pc, #304]	; (80111a8 <_dtoa_r+0x618>)
 8011078:	4431      	add	r1, r6
 801107a:	910d      	str	r1, [sp, #52]	; 0x34
 801107c:	9908      	ldr	r1, [sp, #32]
 801107e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011082:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011086:	2900      	cmp	r1, #0
 8011088:	d043      	beq.n	8011112 <_dtoa_r+0x582>
 801108a:	494d      	ldr	r1, [pc, #308]	; (80111c0 <_dtoa_r+0x630>)
 801108c:	2000      	movs	r0, #0
 801108e:	f7ef fbdd 	bl	800084c <__aeabi_ddiv>
 8011092:	4652      	mov	r2, sl
 8011094:	465b      	mov	r3, fp
 8011096:	f7ef f8f7 	bl	8000288 <__aeabi_dsub>
 801109a:	9d01      	ldr	r5, [sp, #4]
 801109c:	4682      	mov	sl, r0
 801109e:	468b      	mov	fp, r1
 80110a0:	4649      	mov	r1, r9
 80110a2:	4640      	mov	r0, r8
 80110a4:	f7ef fd58 	bl	8000b58 <__aeabi_d2iz>
 80110a8:	4606      	mov	r6, r0
 80110aa:	f7ef fa3b 	bl	8000524 <__aeabi_i2d>
 80110ae:	4602      	mov	r2, r0
 80110b0:	460b      	mov	r3, r1
 80110b2:	4640      	mov	r0, r8
 80110b4:	4649      	mov	r1, r9
 80110b6:	f7ef f8e7 	bl	8000288 <__aeabi_dsub>
 80110ba:	3630      	adds	r6, #48	; 0x30
 80110bc:	f805 6b01 	strb.w	r6, [r5], #1
 80110c0:	4652      	mov	r2, sl
 80110c2:	465b      	mov	r3, fp
 80110c4:	4680      	mov	r8, r0
 80110c6:	4689      	mov	r9, r1
 80110c8:	f7ef fd08 	bl	8000adc <__aeabi_dcmplt>
 80110cc:	2800      	cmp	r0, #0
 80110ce:	d163      	bne.n	8011198 <_dtoa_r+0x608>
 80110d0:	4642      	mov	r2, r8
 80110d2:	464b      	mov	r3, r9
 80110d4:	4936      	ldr	r1, [pc, #216]	; (80111b0 <_dtoa_r+0x620>)
 80110d6:	2000      	movs	r0, #0
 80110d8:	f7ef f8d6 	bl	8000288 <__aeabi_dsub>
 80110dc:	4652      	mov	r2, sl
 80110de:	465b      	mov	r3, fp
 80110e0:	f7ef fcfc 	bl	8000adc <__aeabi_dcmplt>
 80110e4:	2800      	cmp	r0, #0
 80110e6:	f040 80b5 	bne.w	8011254 <_dtoa_r+0x6c4>
 80110ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80110ec:	429d      	cmp	r5, r3
 80110ee:	d081      	beq.n	8010ff4 <_dtoa_r+0x464>
 80110f0:	4b30      	ldr	r3, [pc, #192]	; (80111b4 <_dtoa_r+0x624>)
 80110f2:	2200      	movs	r2, #0
 80110f4:	4650      	mov	r0, sl
 80110f6:	4659      	mov	r1, fp
 80110f8:	f7ef fa7e 	bl	80005f8 <__aeabi_dmul>
 80110fc:	4b2d      	ldr	r3, [pc, #180]	; (80111b4 <_dtoa_r+0x624>)
 80110fe:	4682      	mov	sl, r0
 8011100:	468b      	mov	fp, r1
 8011102:	4640      	mov	r0, r8
 8011104:	4649      	mov	r1, r9
 8011106:	2200      	movs	r2, #0
 8011108:	f7ef fa76 	bl	80005f8 <__aeabi_dmul>
 801110c:	4680      	mov	r8, r0
 801110e:	4689      	mov	r9, r1
 8011110:	e7c6      	b.n	80110a0 <_dtoa_r+0x510>
 8011112:	4650      	mov	r0, sl
 8011114:	4659      	mov	r1, fp
 8011116:	f7ef fa6f 	bl	80005f8 <__aeabi_dmul>
 801111a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801111c:	9d01      	ldr	r5, [sp, #4]
 801111e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011120:	4682      	mov	sl, r0
 8011122:	468b      	mov	fp, r1
 8011124:	4649      	mov	r1, r9
 8011126:	4640      	mov	r0, r8
 8011128:	f7ef fd16 	bl	8000b58 <__aeabi_d2iz>
 801112c:	4606      	mov	r6, r0
 801112e:	f7ef f9f9 	bl	8000524 <__aeabi_i2d>
 8011132:	3630      	adds	r6, #48	; 0x30
 8011134:	4602      	mov	r2, r0
 8011136:	460b      	mov	r3, r1
 8011138:	4640      	mov	r0, r8
 801113a:	4649      	mov	r1, r9
 801113c:	f7ef f8a4 	bl	8000288 <__aeabi_dsub>
 8011140:	f805 6b01 	strb.w	r6, [r5], #1
 8011144:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011146:	429d      	cmp	r5, r3
 8011148:	4680      	mov	r8, r0
 801114a:	4689      	mov	r9, r1
 801114c:	f04f 0200 	mov.w	r2, #0
 8011150:	d124      	bne.n	801119c <_dtoa_r+0x60c>
 8011152:	4b1b      	ldr	r3, [pc, #108]	; (80111c0 <_dtoa_r+0x630>)
 8011154:	4650      	mov	r0, sl
 8011156:	4659      	mov	r1, fp
 8011158:	f7ef f898 	bl	800028c <__adddf3>
 801115c:	4602      	mov	r2, r0
 801115e:	460b      	mov	r3, r1
 8011160:	4640      	mov	r0, r8
 8011162:	4649      	mov	r1, r9
 8011164:	f7ef fcd8 	bl	8000b18 <__aeabi_dcmpgt>
 8011168:	2800      	cmp	r0, #0
 801116a:	d173      	bne.n	8011254 <_dtoa_r+0x6c4>
 801116c:	4652      	mov	r2, sl
 801116e:	465b      	mov	r3, fp
 8011170:	4913      	ldr	r1, [pc, #76]	; (80111c0 <_dtoa_r+0x630>)
 8011172:	2000      	movs	r0, #0
 8011174:	f7ef f888 	bl	8000288 <__aeabi_dsub>
 8011178:	4602      	mov	r2, r0
 801117a:	460b      	mov	r3, r1
 801117c:	4640      	mov	r0, r8
 801117e:	4649      	mov	r1, r9
 8011180:	f7ef fcac 	bl	8000adc <__aeabi_dcmplt>
 8011184:	2800      	cmp	r0, #0
 8011186:	f43f af35 	beq.w	8010ff4 <_dtoa_r+0x464>
 801118a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801118c:	1e6b      	subs	r3, r5, #1
 801118e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011190:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011194:	2b30      	cmp	r3, #48	; 0x30
 8011196:	d0f8      	beq.n	801118a <_dtoa_r+0x5fa>
 8011198:	9700      	str	r7, [sp, #0]
 801119a:	e049      	b.n	8011230 <_dtoa_r+0x6a0>
 801119c:	4b05      	ldr	r3, [pc, #20]	; (80111b4 <_dtoa_r+0x624>)
 801119e:	f7ef fa2b 	bl	80005f8 <__aeabi_dmul>
 80111a2:	4680      	mov	r8, r0
 80111a4:	4689      	mov	r9, r1
 80111a6:	e7bd      	b.n	8011124 <_dtoa_r+0x594>
 80111a8:	080138a0 	.word	0x080138a0
 80111ac:	08013878 	.word	0x08013878
 80111b0:	3ff00000 	.word	0x3ff00000
 80111b4:	40240000 	.word	0x40240000
 80111b8:	401c0000 	.word	0x401c0000
 80111bc:	40140000 	.word	0x40140000
 80111c0:	3fe00000 	.word	0x3fe00000
 80111c4:	9d01      	ldr	r5, [sp, #4]
 80111c6:	4656      	mov	r6, sl
 80111c8:	465f      	mov	r7, fp
 80111ca:	4642      	mov	r2, r8
 80111cc:	464b      	mov	r3, r9
 80111ce:	4630      	mov	r0, r6
 80111d0:	4639      	mov	r1, r7
 80111d2:	f7ef fb3b 	bl	800084c <__aeabi_ddiv>
 80111d6:	f7ef fcbf 	bl	8000b58 <__aeabi_d2iz>
 80111da:	4682      	mov	sl, r0
 80111dc:	f7ef f9a2 	bl	8000524 <__aeabi_i2d>
 80111e0:	4642      	mov	r2, r8
 80111e2:	464b      	mov	r3, r9
 80111e4:	f7ef fa08 	bl	80005f8 <__aeabi_dmul>
 80111e8:	4602      	mov	r2, r0
 80111ea:	460b      	mov	r3, r1
 80111ec:	4630      	mov	r0, r6
 80111ee:	4639      	mov	r1, r7
 80111f0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80111f4:	f7ef f848 	bl	8000288 <__aeabi_dsub>
 80111f8:	f805 6b01 	strb.w	r6, [r5], #1
 80111fc:	9e01      	ldr	r6, [sp, #4]
 80111fe:	9f03      	ldr	r7, [sp, #12]
 8011200:	1bae      	subs	r6, r5, r6
 8011202:	42b7      	cmp	r7, r6
 8011204:	4602      	mov	r2, r0
 8011206:	460b      	mov	r3, r1
 8011208:	d135      	bne.n	8011276 <_dtoa_r+0x6e6>
 801120a:	f7ef f83f 	bl	800028c <__adddf3>
 801120e:	4642      	mov	r2, r8
 8011210:	464b      	mov	r3, r9
 8011212:	4606      	mov	r6, r0
 8011214:	460f      	mov	r7, r1
 8011216:	f7ef fc7f 	bl	8000b18 <__aeabi_dcmpgt>
 801121a:	b9d0      	cbnz	r0, 8011252 <_dtoa_r+0x6c2>
 801121c:	4642      	mov	r2, r8
 801121e:	464b      	mov	r3, r9
 8011220:	4630      	mov	r0, r6
 8011222:	4639      	mov	r1, r7
 8011224:	f7ef fc50 	bl	8000ac8 <__aeabi_dcmpeq>
 8011228:	b110      	cbz	r0, 8011230 <_dtoa_r+0x6a0>
 801122a:	f01a 0f01 	tst.w	sl, #1
 801122e:	d110      	bne.n	8011252 <_dtoa_r+0x6c2>
 8011230:	4620      	mov	r0, r4
 8011232:	ee18 1a10 	vmov	r1, s16
 8011236:	f000 fc23 	bl	8011a80 <_Bfree>
 801123a:	2300      	movs	r3, #0
 801123c:	9800      	ldr	r0, [sp, #0]
 801123e:	702b      	strb	r3, [r5, #0]
 8011240:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011242:	3001      	adds	r0, #1
 8011244:	6018      	str	r0, [r3, #0]
 8011246:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011248:	2b00      	cmp	r3, #0
 801124a:	f43f acf1 	beq.w	8010c30 <_dtoa_r+0xa0>
 801124e:	601d      	str	r5, [r3, #0]
 8011250:	e4ee      	b.n	8010c30 <_dtoa_r+0xa0>
 8011252:	9f00      	ldr	r7, [sp, #0]
 8011254:	462b      	mov	r3, r5
 8011256:	461d      	mov	r5, r3
 8011258:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801125c:	2a39      	cmp	r2, #57	; 0x39
 801125e:	d106      	bne.n	801126e <_dtoa_r+0x6de>
 8011260:	9a01      	ldr	r2, [sp, #4]
 8011262:	429a      	cmp	r2, r3
 8011264:	d1f7      	bne.n	8011256 <_dtoa_r+0x6c6>
 8011266:	9901      	ldr	r1, [sp, #4]
 8011268:	2230      	movs	r2, #48	; 0x30
 801126a:	3701      	adds	r7, #1
 801126c:	700a      	strb	r2, [r1, #0]
 801126e:	781a      	ldrb	r2, [r3, #0]
 8011270:	3201      	adds	r2, #1
 8011272:	701a      	strb	r2, [r3, #0]
 8011274:	e790      	b.n	8011198 <_dtoa_r+0x608>
 8011276:	4ba6      	ldr	r3, [pc, #664]	; (8011510 <_dtoa_r+0x980>)
 8011278:	2200      	movs	r2, #0
 801127a:	f7ef f9bd 	bl	80005f8 <__aeabi_dmul>
 801127e:	2200      	movs	r2, #0
 8011280:	2300      	movs	r3, #0
 8011282:	4606      	mov	r6, r0
 8011284:	460f      	mov	r7, r1
 8011286:	f7ef fc1f 	bl	8000ac8 <__aeabi_dcmpeq>
 801128a:	2800      	cmp	r0, #0
 801128c:	d09d      	beq.n	80111ca <_dtoa_r+0x63a>
 801128e:	e7cf      	b.n	8011230 <_dtoa_r+0x6a0>
 8011290:	9a08      	ldr	r2, [sp, #32]
 8011292:	2a00      	cmp	r2, #0
 8011294:	f000 80d7 	beq.w	8011446 <_dtoa_r+0x8b6>
 8011298:	9a06      	ldr	r2, [sp, #24]
 801129a:	2a01      	cmp	r2, #1
 801129c:	f300 80ba 	bgt.w	8011414 <_dtoa_r+0x884>
 80112a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80112a2:	2a00      	cmp	r2, #0
 80112a4:	f000 80b2 	beq.w	801140c <_dtoa_r+0x87c>
 80112a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80112ac:	9e07      	ldr	r6, [sp, #28]
 80112ae:	9d04      	ldr	r5, [sp, #16]
 80112b0:	9a04      	ldr	r2, [sp, #16]
 80112b2:	441a      	add	r2, r3
 80112b4:	9204      	str	r2, [sp, #16]
 80112b6:	9a05      	ldr	r2, [sp, #20]
 80112b8:	2101      	movs	r1, #1
 80112ba:	441a      	add	r2, r3
 80112bc:	4620      	mov	r0, r4
 80112be:	9205      	str	r2, [sp, #20]
 80112c0:	f000 fc96 	bl	8011bf0 <__i2b>
 80112c4:	4607      	mov	r7, r0
 80112c6:	2d00      	cmp	r5, #0
 80112c8:	dd0c      	ble.n	80112e4 <_dtoa_r+0x754>
 80112ca:	9b05      	ldr	r3, [sp, #20]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	dd09      	ble.n	80112e4 <_dtoa_r+0x754>
 80112d0:	42ab      	cmp	r3, r5
 80112d2:	9a04      	ldr	r2, [sp, #16]
 80112d4:	bfa8      	it	ge
 80112d6:	462b      	movge	r3, r5
 80112d8:	1ad2      	subs	r2, r2, r3
 80112da:	9204      	str	r2, [sp, #16]
 80112dc:	9a05      	ldr	r2, [sp, #20]
 80112de:	1aed      	subs	r5, r5, r3
 80112e0:	1ad3      	subs	r3, r2, r3
 80112e2:	9305      	str	r3, [sp, #20]
 80112e4:	9b07      	ldr	r3, [sp, #28]
 80112e6:	b31b      	cbz	r3, 8011330 <_dtoa_r+0x7a0>
 80112e8:	9b08      	ldr	r3, [sp, #32]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	f000 80af 	beq.w	801144e <_dtoa_r+0x8be>
 80112f0:	2e00      	cmp	r6, #0
 80112f2:	dd13      	ble.n	801131c <_dtoa_r+0x78c>
 80112f4:	4639      	mov	r1, r7
 80112f6:	4632      	mov	r2, r6
 80112f8:	4620      	mov	r0, r4
 80112fa:	f000 fd39 	bl	8011d70 <__pow5mult>
 80112fe:	ee18 2a10 	vmov	r2, s16
 8011302:	4601      	mov	r1, r0
 8011304:	4607      	mov	r7, r0
 8011306:	4620      	mov	r0, r4
 8011308:	f000 fc88 	bl	8011c1c <__multiply>
 801130c:	ee18 1a10 	vmov	r1, s16
 8011310:	4680      	mov	r8, r0
 8011312:	4620      	mov	r0, r4
 8011314:	f000 fbb4 	bl	8011a80 <_Bfree>
 8011318:	ee08 8a10 	vmov	s16, r8
 801131c:	9b07      	ldr	r3, [sp, #28]
 801131e:	1b9a      	subs	r2, r3, r6
 8011320:	d006      	beq.n	8011330 <_dtoa_r+0x7a0>
 8011322:	ee18 1a10 	vmov	r1, s16
 8011326:	4620      	mov	r0, r4
 8011328:	f000 fd22 	bl	8011d70 <__pow5mult>
 801132c:	ee08 0a10 	vmov	s16, r0
 8011330:	2101      	movs	r1, #1
 8011332:	4620      	mov	r0, r4
 8011334:	f000 fc5c 	bl	8011bf0 <__i2b>
 8011338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801133a:	2b00      	cmp	r3, #0
 801133c:	4606      	mov	r6, r0
 801133e:	f340 8088 	ble.w	8011452 <_dtoa_r+0x8c2>
 8011342:	461a      	mov	r2, r3
 8011344:	4601      	mov	r1, r0
 8011346:	4620      	mov	r0, r4
 8011348:	f000 fd12 	bl	8011d70 <__pow5mult>
 801134c:	9b06      	ldr	r3, [sp, #24]
 801134e:	2b01      	cmp	r3, #1
 8011350:	4606      	mov	r6, r0
 8011352:	f340 8081 	ble.w	8011458 <_dtoa_r+0x8c8>
 8011356:	f04f 0800 	mov.w	r8, #0
 801135a:	6933      	ldr	r3, [r6, #16]
 801135c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011360:	6918      	ldr	r0, [r3, #16]
 8011362:	f000 fbf5 	bl	8011b50 <__hi0bits>
 8011366:	f1c0 0020 	rsb	r0, r0, #32
 801136a:	9b05      	ldr	r3, [sp, #20]
 801136c:	4418      	add	r0, r3
 801136e:	f010 001f 	ands.w	r0, r0, #31
 8011372:	f000 8092 	beq.w	801149a <_dtoa_r+0x90a>
 8011376:	f1c0 0320 	rsb	r3, r0, #32
 801137a:	2b04      	cmp	r3, #4
 801137c:	f340 808a 	ble.w	8011494 <_dtoa_r+0x904>
 8011380:	f1c0 001c 	rsb	r0, r0, #28
 8011384:	9b04      	ldr	r3, [sp, #16]
 8011386:	4403      	add	r3, r0
 8011388:	9304      	str	r3, [sp, #16]
 801138a:	9b05      	ldr	r3, [sp, #20]
 801138c:	4403      	add	r3, r0
 801138e:	4405      	add	r5, r0
 8011390:	9305      	str	r3, [sp, #20]
 8011392:	9b04      	ldr	r3, [sp, #16]
 8011394:	2b00      	cmp	r3, #0
 8011396:	dd07      	ble.n	80113a8 <_dtoa_r+0x818>
 8011398:	ee18 1a10 	vmov	r1, s16
 801139c:	461a      	mov	r2, r3
 801139e:	4620      	mov	r0, r4
 80113a0:	f000 fd40 	bl	8011e24 <__lshift>
 80113a4:	ee08 0a10 	vmov	s16, r0
 80113a8:	9b05      	ldr	r3, [sp, #20]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	dd05      	ble.n	80113ba <_dtoa_r+0x82a>
 80113ae:	4631      	mov	r1, r6
 80113b0:	461a      	mov	r2, r3
 80113b2:	4620      	mov	r0, r4
 80113b4:	f000 fd36 	bl	8011e24 <__lshift>
 80113b8:	4606      	mov	r6, r0
 80113ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d06e      	beq.n	801149e <_dtoa_r+0x90e>
 80113c0:	ee18 0a10 	vmov	r0, s16
 80113c4:	4631      	mov	r1, r6
 80113c6:	f000 fd9d 	bl	8011f04 <__mcmp>
 80113ca:	2800      	cmp	r0, #0
 80113cc:	da67      	bge.n	801149e <_dtoa_r+0x90e>
 80113ce:	9b00      	ldr	r3, [sp, #0]
 80113d0:	3b01      	subs	r3, #1
 80113d2:	ee18 1a10 	vmov	r1, s16
 80113d6:	9300      	str	r3, [sp, #0]
 80113d8:	220a      	movs	r2, #10
 80113da:	2300      	movs	r3, #0
 80113dc:	4620      	mov	r0, r4
 80113de:	f000 fb71 	bl	8011ac4 <__multadd>
 80113e2:	9b08      	ldr	r3, [sp, #32]
 80113e4:	ee08 0a10 	vmov	s16, r0
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	f000 81b1 	beq.w	8011750 <_dtoa_r+0xbc0>
 80113ee:	2300      	movs	r3, #0
 80113f0:	4639      	mov	r1, r7
 80113f2:	220a      	movs	r2, #10
 80113f4:	4620      	mov	r0, r4
 80113f6:	f000 fb65 	bl	8011ac4 <__multadd>
 80113fa:	9b02      	ldr	r3, [sp, #8]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	4607      	mov	r7, r0
 8011400:	f300 808e 	bgt.w	8011520 <_dtoa_r+0x990>
 8011404:	9b06      	ldr	r3, [sp, #24]
 8011406:	2b02      	cmp	r3, #2
 8011408:	dc51      	bgt.n	80114ae <_dtoa_r+0x91e>
 801140a:	e089      	b.n	8011520 <_dtoa_r+0x990>
 801140c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801140e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011412:	e74b      	b.n	80112ac <_dtoa_r+0x71c>
 8011414:	9b03      	ldr	r3, [sp, #12]
 8011416:	1e5e      	subs	r6, r3, #1
 8011418:	9b07      	ldr	r3, [sp, #28]
 801141a:	42b3      	cmp	r3, r6
 801141c:	bfbf      	itttt	lt
 801141e:	9b07      	ldrlt	r3, [sp, #28]
 8011420:	9607      	strlt	r6, [sp, #28]
 8011422:	1af2      	sublt	r2, r6, r3
 8011424:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8011426:	bfb6      	itet	lt
 8011428:	189b      	addlt	r3, r3, r2
 801142a:	1b9e      	subge	r6, r3, r6
 801142c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801142e:	9b03      	ldr	r3, [sp, #12]
 8011430:	bfb8      	it	lt
 8011432:	2600      	movlt	r6, #0
 8011434:	2b00      	cmp	r3, #0
 8011436:	bfb7      	itett	lt
 8011438:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801143c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011440:	1a9d      	sublt	r5, r3, r2
 8011442:	2300      	movlt	r3, #0
 8011444:	e734      	b.n	80112b0 <_dtoa_r+0x720>
 8011446:	9e07      	ldr	r6, [sp, #28]
 8011448:	9d04      	ldr	r5, [sp, #16]
 801144a:	9f08      	ldr	r7, [sp, #32]
 801144c:	e73b      	b.n	80112c6 <_dtoa_r+0x736>
 801144e:	9a07      	ldr	r2, [sp, #28]
 8011450:	e767      	b.n	8011322 <_dtoa_r+0x792>
 8011452:	9b06      	ldr	r3, [sp, #24]
 8011454:	2b01      	cmp	r3, #1
 8011456:	dc18      	bgt.n	801148a <_dtoa_r+0x8fa>
 8011458:	f1ba 0f00 	cmp.w	sl, #0
 801145c:	d115      	bne.n	801148a <_dtoa_r+0x8fa>
 801145e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011462:	b993      	cbnz	r3, 801148a <_dtoa_r+0x8fa>
 8011464:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011468:	0d1b      	lsrs	r3, r3, #20
 801146a:	051b      	lsls	r3, r3, #20
 801146c:	b183      	cbz	r3, 8011490 <_dtoa_r+0x900>
 801146e:	9b04      	ldr	r3, [sp, #16]
 8011470:	3301      	adds	r3, #1
 8011472:	9304      	str	r3, [sp, #16]
 8011474:	9b05      	ldr	r3, [sp, #20]
 8011476:	3301      	adds	r3, #1
 8011478:	9305      	str	r3, [sp, #20]
 801147a:	f04f 0801 	mov.w	r8, #1
 801147e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011480:	2b00      	cmp	r3, #0
 8011482:	f47f af6a 	bne.w	801135a <_dtoa_r+0x7ca>
 8011486:	2001      	movs	r0, #1
 8011488:	e76f      	b.n	801136a <_dtoa_r+0x7da>
 801148a:	f04f 0800 	mov.w	r8, #0
 801148e:	e7f6      	b.n	801147e <_dtoa_r+0x8ee>
 8011490:	4698      	mov	r8, r3
 8011492:	e7f4      	b.n	801147e <_dtoa_r+0x8ee>
 8011494:	f43f af7d 	beq.w	8011392 <_dtoa_r+0x802>
 8011498:	4618      	mov	r0, r3
 801149a:	301c      	adds	r0, #28
 801149c:	e772      	b.n	8011384 <_dtoa_r+0x7f4>
 801149e:	9b03      	ldr	r3, [sp, #12]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	dc37      	bgt.n	8011514 <_dtoa_r+0x984>
 80114a4:	9b06      	ldr	r3, [sp, #24]
 80114a6:	2b02      	cmp	r3, #2
 80114a8:	dd34      	ble.n	8011514 <_dtoa_r+0x984>
 80114aa:	9b03      	ldr	r3, [sp, #12]
 80114ac:	9302      	str	r3, [sp, #8]
 80114ae:	9b02      	ldr	r3, [sp, #8]
 80114b0:	b96b      	cbnz	r3, 80114ce <_dtoa_r+0x93e>
 80114b2:	4631      	mov	r1, r6
 80114b4:	2205      	movs	r2, #5
 80114b6:	4620      	mov	r0, r4
 80114b8:	f000 fb04 	bl	8011ac4 <__multadd>
 80114bc:	4601      	mov	r1, r0
 80114be:	4606      	mov	r6, r0
 80114c0:	ee18 0a10 	vmov	r0, s16
 80114c4:	f000 fd1e 	bl	8011f04 <__mcmp>
 80114c8:	2800      	cmp	r0, #0
 80114ca:	f73f adbb 	bgt.w	8011044 <_dtoa_r+0x4b4>
 80114ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80114d0:	9d01      	ldr	r5, [sp, #4]
 80114d2:	43db      	mvns	r3, r3
 80114d4:	9300      	str	r3, [sp, #0]
 80114d6:	f04f 0800 	mov.w	r8, #0
 80114da:	4631      	mov	r1, r6
 80114dc:	4620      	mov	r0, r4
 80114de:	f000 facf 	bl	8011a80 <_Bfree>
 80114e2:	2f00      	cmp	r7, #0
 80114e4:	f43f aea4 	beq.w	8011230 <_dtoa_r+0x6a0>
 80114e8:	f1b8 0f00 	cmp.w	r8, #0
 80114ec:	d005      	beq.n	80114fa <_dtoa_r+0x96a>
 80114ee:	45b8      	cmp	r8, r7
 80114f0:	d003      	beq.n	80114fa <_dtoa_r+0x96a>
 80114f2:	4641      	mov	r1, r8
 80114f4:	4620      	mov	r0, r4
 80114f6:	f000 fac3 	bl	8011a80 <_Bfree>
 80114fa:	4639      	mov	r1, r7
 80114fc:	4620      	mov	r0, r4
 80114fe:	f000 fabf 	bl	8011a80 <_Bfree>
 8011502:	e695      	b.n	8011230 <_dtoa_r+0x6a0>
 8011504:	2600      	movs	r6, #0
 8011506:	4637      	mov	r7, r6
 8011508:	e7e1      	b.n	80114ce <_dtoa_r+0x93e>
 801150a:	9700      	str	r7, [sp, #0]
 801150c:	4637      	mov	r7, r6
 801150e:	e599      	b.n	8011044 <_dtoa_r+0x4b4>
 8011510:	40240000 	.word	0x40240000
 8011514:	9b08      	ldr	r3, [sp, #32]
 8011516:	2b00      	cmp	r3, #0
 8011518:	f000 80ca 	beq.w	80116b0 <_dtoa_r+0xb20>
 801151c:	9b03      	ldr	r3, [sp, #12]
 801151e:	9302      	str	r3, [sp, #8]
 8011520:	2d00      	cmp	r5, #0
 8011522:	dd05      	ble.n	8011530 <_dtoa_r+0x9a0>
 8011524:	4639      	mov	r1, r7
 8011526:	462a      	mov	r2, r5
 8011528:	4620      	mov	r0, r4
 801152a:	f000 fc7b 	bl	8011e24 <__lshift>
 801152e:	4607      	mov	r7, r0
 8011530:	f1b8 0f00 	cmp.w	r8, #0
 8011534:	d05b      	beq.n	80115ee <_dtoa_r+0xa5e>
 8011536:	6879      	ldr	r1, [r7, #4]
 8011538:	4620      	mov	r0, r4
 801153a:	f000 fa61 	bl	8011a00 <_Balloc>
 801153e:	4605      	mov	r5, r0
 8011540:	b928      	cbnz	r0, 801154e <_dtoa_r+0x9be>
 8011542:	4b87      	ldr	r3, [pc, #540]	; (8011760 <_dtoa_r+0xbd0>)
 8011544:	4602      	mov	r2, r0
 8011546:	f240 21ea 	movw	r1, #746	; 0x2ea
 801154a:	f7ff bb3b 	b.w	8010bc4 <_dtoa_r+0x34>
 801154e:	693a      	ldr	r2, [r7, #16]
 8011550:	3202      	adds	r2, #2
 8011552:	0092      	lsls	r2, r2, #2
 8011554:	f107 010c 	add.w	r1, r7, #12
 8011558:	300c      	adds	r0, #12
 801155a:	f7fe f9c3 	bl	800f8e4 <memcpy>
 801155e:	2201      	movs	r2, #1
 8011560:	4629      	mov	r1, r5
 8011562:	4620      	mov	r0, r4
 8011564:	f000 fc5e 	bl	8011e24 <__lshift>
 8011568:	9b01      	ldr	r3, [sp, #4]
 801156a:	f103 0901 	add.w	r9, r3, #1
 801156e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011572:	4413      	add	r3, r2
 8011574:	9305      	str	r3, [sp, #20]
 8011576:	f00a 0301 	and.w	r3, sl, #1
 801157a:	46b8      	mov	r8, r7
 801157c:	9304      	str	r3, [sp, #16]
 801157e:	4607      	mov	r7, r0
 8011580:	4631      	mov	r1, r6
 8011582:	ee18 0a10 	vmov	r0, s16
 8011586:	f7ff fa75 	bl	8010a74 <quorem>
 801158a:	4641      	mov	r1, r8
 801158c:	9002      	str	r0, [sp, #8]
 801158e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011592:	ee18 0a10 	vmov	r0, s16
 8011596:	f000 fcb5 	bl	8011f04 <__mcmp>
 801159a:	463a      	mov	r2, r7
 801159c:	9003      	str	r0, [sp, #12]
 801159e:	4631      	mov	r1, r6
 80115a0:	4620      	mov	r0, r4
 80115a2:	f000 fccb 	bl	8011f3c <__mdiff>
 80115a6:	68c2      	ldr	r2, [r0, #12]
 80115a8:	f109 3bff 	add.w	fp, r9, #4294967295
 80115ac:	4605      	mov	r5, r0
 80115ae:	bb02      	cbnz	r2, 80115f2 <_dtoa_r+0xa62>
 80115b0:	4601      	mov	r1, r0
 80115b2:	ee18 0a10 	vmov	r0, s16
 80115b6:	f000 fca5 	bl	8011f04 <__mcmp>
 80115ba:	4602      	mov	r2, r0
 80115bc:	4629      	mov	r1, r5
 80115be:	4620      	mov	r0, r4
 80115c0:	9207      	str	r2, [sp, #28]
 80115c2:	f000 fa5d 	bl	8011a80 <_Bfree>
 80115c6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80115ca:	ea43 0102 	orr.w	r1, r3, r2
 80115ce:	9b04      	ldr	r3, [sp, #16]
 80115d0:	430b      	orrs	r3, r1
 80115d2:	464d      	mov	r5, r9
 80115d4:	d10f      	bne.n	80115f6 <_dtoa_r+0xa66>
 80115d6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80115da:	d02a      	beq.n	8011632 <_dtoa_r+0xaa2>
 80115dc:	9b03      	ldr	r3, [sp, #12]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	dd02      	ble.n	80115e8 <_dtoa_r+0xa58>
 80115e2:	9b02      	ldr	r3, [sp, #8]
 80115e4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80115e8:	f88b a000 	strb.w	sl, [fp]
 80115ec:	e775      	b.n	80114da <_dtoa_r+0x94a>
 80115ee:	4638      	mov	r0, r7
 80115f0:	e7ba      	b.n	8011568 <_dtoa_r+0x9d8>
 80115f2:	2201      	movs	r2, #1
 80115f4:	e7e2      	b.n	80115bc <_dtoa_r+0xa2c>
 80115f6:	9b03      	ldr	r3, [sp, #12]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	db04      	blt.n	8011606 <_dtoa_r+0xa76>
 80115fc:	9906      	ldr	r1, [sp, #24]
 80115fe:	430b      	orrs	r3, r1
 8011600:	9904      	ldr	r1, [sp, #16]
 8011602:	430b      	orrs	r3, r1
 8011604:	d122      	bne.n	801164c <_dtoa_r+0xabc>
 8011606:	2a00      	cmp	r2, #0
 8011608:	ddee      	ble.n	80115e8 <_dtoa_r+0xa58>
 801160a:	ee18 1a10 	vmov	r1, s16
 801160e:	2201      	movs	r2, #1
 8011610:	4620      	mov	r0, r4
 8011612:	f000 fc07 	bl	8011e24 <__lshift>
 8011616:	4631      	mov	r1, r6
 8011618:	ee08 0a10 	vmov	s16, r0
 801161c:	f000 fc72 	bl	8011f04 <__mcmp>
 8011620:	2800      	cmp	r0, #0
 8011622:	dc03      	bgt.n	801162c <_dtoa_r+0xa9c>
 8011624:	d1e0      	bne.n	80115e8 <_dtoa_r+0xa58>
 8011626:	f01a 0f01 	tst.w	sl, #1
 801162a:	d0dd      	beq.n	80115e8 <_dtoa_r+0xa58>
 801162c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011630:	d1d7      	bne.n	80115e2 <_dtoa_r+0xa52>
 8011632:	2339      	movs	r3, #57	; 0x39
 8011634:	f88b 3000 	strb.w	r3, [fp]
 8011638:	462b      	mov	r3, r5
 801163a:	461d      	mov	r5, r3
 801163c:	3b01      	subs	r3, #1
 801163e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011642:	2a39      	cmp	r2, #57	; 0x39
 8011644:	d071      	beq.n	801172a <_dtoa_r+0xb9a>
 8011646:	3201      	adds	r2, #1
 8011648:	701a      	strb	r2, [r3, #0]
 801164a:	e746      	b.n	80114da <_dtoa_r+0x94a>
 801164c:	2a00      	cmp	r2, #0
 801164e:	dd07      	ble.n	8011660 <_dtoa_r+0xad0>
 8011650:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011654:	d0ed      	beq.n	8011632 <_dtoa_r+0xaa2>
 8011656:	f10a 0301 	add.w	r3, sl, #1
 801165a:	f88b 3000 	strb.w	r3, [fp]
 801165e:	e73c      	b.n	80114da <_dtoa_r+0x94a>
 8011660:	9b05      	ldr	r3, [sp, #20]
 8011662:	f809 ac01 	strb.w	sl, [r9, #-1]
 8011666:	4599      	cmp	r9, r3
 8011668:	d047      	beq.n	80116fa <_dtoa_r+0xb6a>
 801166a:	ee18 1a10 	vmov	r1, s16
 801166e:	2300      	movs	r3, #0
 8011670:	220a      	movs	r2, #10
 8011672:	4620      	mov	r0, r4
 8011674:	f000 fa26 	bl	8011ac4 <__multadd>
 8011678:	45b8      	cmp	r8, r7
 801167a:	ee08 0a10 	vmov	s16, r0
 801167e:	f04f 0300 	mov.w	r3, #0
 8011682:	f04f 020a 	mov.w	r2, #10
 8011686:	4641      	mov	r1, r8
 8011688:	4620      	mov	r0, r4
 801168a:	d106      	bne.n	801169a <_dtoa_r+0xb0a>
 801168c:	f000 fa1a 	bl	8011ac4 <__multadd>
 8011690:	4680      	mov	r8, r0
 8011692:	4607      	mov	r7, r0
 8011694:	f109 0901 	add.w	r9, r9, #1
 8011698:	e772      	b.n	8011580 <_dtoa_r+0x9f0>
 801169a:	f000 fa13 	bl	8011ac4 <__multadd>
 801169e:	4639      	mov	r1, r7
 80116a0:	4680      	mov	r8, r0
 80116a2:	2300      	movs	r3, #0
 80116a4:	220a      	movs	r2, #10
 80116a6:	4620      	mov	r0, r4
 80116a8:	f000 fa0c 	bl	8011ac4 <__multadd>
 80116ac:	4607      	mov	r7, r0
 80116ae:	e7f1      	b.n	8011694 <_dtoa_r+0xb04>
 80116b0:	9b03      	ldr	r3, [sp, #12]
 80116b2:	9302      	str	r3, [sp, #8]
 80116b4:	9d01      	ldr	r5, [sp, #4]
 80116b6:	ee18 0a10 	vmov	r0, s16
 80116ba:	4631      	mov	r1, r6
 80116bc:	f7ff f9da 	bl	8010a74 <quorem>
 80116c0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80116c4:	9b01      	ldr	r3, [sp, #4]
 80116c6:	f805 ab01 	strb.w	sl, [r5], #1
 80116ca:	1aea      	subs	r2, r5, r3
 80116cc:	9b02      	ldr	r3, [sp, #8]
 80116ce:	4293      	cmp	r3, r2
 80116d0:	dd09      	ble.n	80116e6 <_dtoa_r+0xb56>
 80116d2:	ee18 1a10 	vmov	r1, s16
 80116d6:	2300      	movs	r3, #0
 80116d8:	220a      	movs	r2, #10
 80116da:	4620      	mov	r0, r4
 80116dc:	f000 f9f2 	bl	8011ac4 <__multadd>
 80116e0:	ee08 0a10 	vmov	s16, r0
 80116e4:	e7e7      	b.n	80116b6 <_dtoa_r+0xb26>
 80116e6:	9b02      	ldr	r3, [sp, #8]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	bfc8      	it	gt
 80116ec:	461d      	movgt	r5, r3
 80116ee:	9b01      	ldr	r3, [sp, #4]
 80116f0:	bfd8      	it	le
 80116f2:	2501      	movle	r5, #1
 80116f4:	441d      	add	r5, r3
 80116f6:	f04f 0800 	mov.w	r8, #0
 80116fa:	ee18 1a10 	vmov	r1, s16
 80116fe:	2201      	movs	r2, #1
 8011700:	4620      	mov	r0, r4
 8011702:	f000 fb8f 	bl	8011e24 <__lshift>
 8011706:	4631      	mov	r1, r6
 8011708:	ee08 0a10 	vmov	s16, r0
 801170c:	f000 fbfa 	bl	8011f04 <__mcmp>
 8011710:	2800      	cmp	r0, #0
 8011712:	dc91      	bgt.n	8011638 <_dtoa_r+0xaa8>
 8011714:	d102      	bne.n	801171c <_dtoa_r+0xb8c>
 8011716:	f01a 0f01 	tst.w	sl, #1
 801171a:	d18d      	bne.n	8011638 <_dtoa_r+0xaa8>
 801171c:	462b      	mov	r3, r5
 801171e:	461d      	mov	r5, r3
 8011720:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011724:	2a30      	cmp	r2, #48	; 0x30
 8011726:	d0fa      	beq.n	801171e <_dtoa_r+0xb8e>
 8011728:	e6d7      	b.n	80114da <_dtoa_r+0x94a>
 801172a:	9a01      	ldr	r2, [sp, #4]
 801172c:	429a      	cmp	r2, r3
 801172e:	d184      	bne.n	801163a <_dtoa_r+0xaaa>
 8011730:	9b00      	ldr	r3, [sp, #0]
 8011732:	3301      	adds	r3, #1
 8011734:	9300      	str	r3, [sp, #0]
 8011736:	2331      	movs	r3, #49	; 0x31
 8011738:	7013      	strb	r3, [r2, #0]
 801173a:	e6ce      	b.n	80114da <_dtoa_r+0x94a>
 801173c:	4b09      	ldr	r3, [pc, #36]	; (8011764 <_dtoa_r+0xbd4>)
 801173e:	f7ff ba95 	b.w	8010c6c <_dtoa_r+0xdc>
 8011742:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011744:	2b00      	cmp	r3, #0
 8011746:	f47f aa6e 	bne.w	8010c26 <_dtoa_r+0x96>
 801174a:	4b07      	ldr	r3, [pc, #28]	; (8011768 <_dtoa_r+0xbd8>)
 801174c:	f7ff ba8e 	b.w	8010c6c <_dtoa_r+0xdc>
 8011750:	9b02      	ldr	r3, [sp, #8]
 8011752:	2b00      	cmp	r3, #0
 8011754:	dcae      	bgt.n	80116b4 <_dtoa_r+0xb24>
 8011756:	9b06      	ldr	r3, [sp, #24]
 8011758:	2b02      	cmp	r3, #2
 801175a:	f73f aea8 	bgt.w	80114ae <_dtoa_r+0x91e>
 801175e:	e7a9      	b.n	80116b4 <_dtoa_r+0xb24>
 8011760:	08013808 	.word	0x08013808
 8011764:	08013664 	.word	0x08013664
 8011768:	08013789 	.word	0x08013789

0801176c <__sflush_r>:
 801176c:	898a      	ldrh	r2, [r1, #12]
 801176e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011772:	4605      	mov	r5, r0
 8011774:	0710      	lsls	r0, r2, #28
 8011776:	460c      	mov	r4, r1
 8011778:	d458      	bmi.n	801182c <__sflush_r+0xc0>
 801177a:	684b      	ldr	r3, [r1, #4]
 801177c:	2b00      	cmp	r3, #0
 801177e:	dc05      	bgt.n	801178c <__sflush_r+0x20>
 8011780:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011782:	2b00      	cmp	r3, #0
 8011784:	dc02      	bgt.n	801178c <__sflush_r+0x20>
 8011786:	2000      	movs	r0, #0
 8011788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801178c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801178e:	2e00      	cmp	r6, #0
 8011790:	d0f9      	beq.n	8011786 <__sflush_r+0x1a>
 8011792:	2300      	movs	r3, #0
 8011794:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011798:	682f      	ldr	r7, [r5, #0]
 801179a:	602b      	str	r3, [r5, #0]
 801179c:	d032      	beq.n	8011804 <__sflush_r+0x98>
 801179e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80117a0:	89a3      	ldrh	r3, [r4, #12]
 80117a2:	075a      	lsls	r2, r3, #29
 80117a4:	d505      	bpl.n	80117b2 <__sflush_r+0x46>
 80117a6:	6863      	ldr	r3, [r4, #4]
 80117a8:	1ac0      	subs	r0, r0, r3
 80117aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80117ac:	b10b      	cbz	r3, 80117b2 <__sflush_r+0x46>
 80117ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80117b0:	1ac0      	subs	r0, r0, r3
 80117b2:	2300      	movs	r3, #0
 80117b4:	4602      	mov	r2, r0
 80117b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80117b8:	6a21      	ldr	r1, [r4, #32]
 80117ba:	4628      	mov	r0, r5
 80117bc:	47b0      	blx	r6
 80117be:	1c43      	adds	r3, r0, #1
 80117c0:	89a3      	ldrh	r3, [r4, #12]
 80117c2:	d106      	bne.n	80117d2 <__sflush_r+0x66>
 80117c4:	6829      	ldr	r1, [r5, #0]
 80117c6:	291d      	cmp	r1, #29
 80117c8:	d82c      	bhi.n	8011824 <__sflush_r+0xb8>
 80117ca:	4a2a      	ldr	r2, [pc, #168]	; (8011874 <__sflush_r+0x108>)
 80117cc:	40ca      	lsrs	r2, r1
 80117ce:	07d6      	lsls	r6, r2, #31
 80117d0:	d528      	bpl.n	8011824 <__sflush_r+0xb8>
 80117d2:	2200      	movs	r2, #0
 80117d4:	6062      	str	r2, [r4, #4]
 80117d6:	04d9      	lsls	r1, r3, #19
 80117d8:	6922      	ldr	r2, [r4, #16]
 80117da:	6022      	str	r2, [r4, #0]
 80117dc:	d504      	bpl.n	80117e8 <__sflush_r+0x7c>
 80117de:	1c42      	adds	r2, r0, #1
 80117e0:	d101      	bne.n	80117e6 <__sflush_r+0x7a>
 80117e2:	682b      	ldr	r3, [r5, #0]
 80117e4:	b903      	cbnz	r3, 80117e8 <__sflush_r+0x7c>
 80117e6:	6560      	str	r0, [r4, #84]	; 0x54
 80117e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80117ea:	602f      	str	r7, [r5, #0]
 80117ec:	2900      	cmp	r1, #0
 80117ee:	d0ca      	beq.n	8011786 <__sflush_r+0x1a>
 80117f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80117f4:	4299      	cmp	r1, r3
 80117f6:	d002      	beq.n	80117fe <__sflush_r+0x92>
 80117f8:	4628      	mov	r0, r5
 80117fa:	f7fe f889 	bl	800f910 <_free_r>
 80117fe:	2000      	movs	r0, #0
 8011800:	6360      	str	r0, [r4, #52]	; 0x34
 8011802:	e7c1      	b.n	8011788 <__sflush_r+0x1c>
 8011804:	6a21      	ldr	r1, [r4, #32]
 8011806:	2301      	movs	r3, #1
 8011808:	4628      	mov	r0, r5
 801180a:	47b0      	blx	r6
 801180c:	1c41      	adds	r1, r0, #1
 801180e:	d1c7      	bne.n	80117a0 <__sflush_r+0x34>
 8011810:	682b      	ldr	r3, [r5, #0]
 8011812:	2b00      	cmp	r3, #0
 8011814:	d0c4      	beq.n	80117a0 <__sflush_r+0x34>
 8011816:	2b1d      	cmp	r3, #29
 8011818:	d001      	beq.n	801181e <__sflush_r+0xb2>
 801181a:	2b16      	cmp	r3, #22
 801181c:	d101      	bne.n	8011822 <__sflush_r+0xb6>
 801181e:	602f      	str	r7, [r5, #0]
 8011820:	e7b1      	b.n	8011786 <__sflush_r+0x1a>
 8011822:	89a3      	ldrh	r3, [r4, #12]
 8011824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011828:	81a3      	strh	r3, [r4, #12]
 801182a:	e7ad      	b.n	8011788 <__sflush_r+0x1c>
 801182c:	690f      	ldr	r7, [r1, #16]
 801182e:	2f00      	cmp	r7, #0
 8011830:	d0a9      	beq.n	8011786 <__sflush_r+0x1a>
 8011832:	0793      	lsls	r3, r2, #30
 8011834:	680e      	ldr	r6, [r1, #0]
 8011836:	bf08      	it	eq
 8011838:	694b      	ldreq	r3, [r1, #20]
 801183a:	600f      	str	r7, [r1, #0]
 801183c:	bf18      	it	ne
 801183e:	2300      	movne	r3, #0
 8011840:	eba6 0807 	sub.w	r8, r6, r7
 8011844:	608b      	str	r3, [r1, #8]
 8011846:	f1b8 0f00 	cmp.w	r8, #0
 801184a:	dd9c      	ble.n	8011786 <__sflush_r+0x1a>
 801184c:	6a21      	ldr	r1, [r4, #32]
 801184e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011850:	4643      	mov	r3, r8
 8011852:	463a      	mov	r2, r7
 8011854:	4628      	mov	r0, r5
 8011856:	47b0      	blx	r6
 8011858:	2800      	cmp	r0, #0
 801185a:	dc06      	bgt.n	801186a <__sflush_r+0xfe>
 801185c:	89a3      	ldrh	r3, [r4, #12]
 801185e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011862:	81a3      	strh	r3, [r4, #12]
 8011864:	f04f 30ff 	mov.w	r0, #4294967295
 8011868:	e78e      	b.n	8011788 <__sflush_r+0x1c>
 801186a:	4407      	add	r7, r0
 801186c:	eba8 0800 	sub.w	r8, r8, r0
 8011870:	e7e9      	b.n	8011846 <__sflush_r+0xda>
 8011872:	bf00      	nop
 8011874:	20400001 	.word	0x20400001

08011878 <_fflush_r>:
 8011878:	b538      	push	{r3, r4, r5, lr}
 801187a:	690b      	ldr	r3, [r1, #16]
 801187c:	4605      	mov	r5, r0
 801187e:	460c      	mov	r4, r1
 8011880:	b913      	cbnz	r3, 8011888 <_fflush_r+0x10>
 8011882:	2500      	movs	r5, #0
 8011884:	4628      	mov	r0, r5
 8011886:	bd38      	pop	{r3, r4, r5, pc}
 8011888:	b118      	cbz	r0, 8011892 <_fflush_r+0x1a>
 801188a:	6983      	ldr	r3, [r0, #24]
 801188c:	b90b      	cbnz	r3, 8011892 <_fflush_r+0x1a>
 801188e:	f7fd ff5f 	bl	800f750 <__sinit>
 8011892:	4b14      	ldr	r3, [pc, #80]	; (80118e4 <_fflush_r+0x6c>)
 8011894:	429c      	cmp	r4, r3
 8011896:	d11b      	bne.n	80118d0 <_fflush_r+0x58>
 8011898:	686c      	ldr	r4, [r5, #4]
 801189a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d0ef      	beq.n	8011882 <_fflush_r+0xa>
 80118a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80118a4:	07d0      	lsls	r0, r2, #31
 80118a6:	d404      	bmi.n	80118b2 <_fflush_r+0x3a>
 80118a8:	0599      	lsls	r1, r3, #22
 80118aa:	d402      	bmi.n	80118b2 <_fflush_r+0x3a>
 80118ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80118ae:	f7f3 ff4f 	bl	8005750 <__retarget_lock_acquire_recursive>
 80118b2:	4628      	mov	r0, r5
 80118b4:	4621      	mov	r1, r4
 80118b6:	f7ff ff59 	bl	801176c <__sflush_r>
 80118ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80118bc:	07da      	lsls	r2, r3, #31
 80118be:	4605      	mov	r5, r0
 80118c0:	d4e0      	bmi.n	8011884 <_fflush_r+0xc>
 80118c2:	89a3      	ldrh	r3, [r4, #12]
 80118c4:	059b      	lsls	r3, r3, #22
 80118c6:	d4dd      	bmi.n	8011884 <_fflush_r+0xc>
 80118c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80118ca:	f7f3 ff55 	bl	8005778 <__retarget_lock_release_recursive>
 80118ce:	e7d9      	b.n	8011884 <_fflush_r+0xc>
 80118d0:	4b05      	ldr	r3, [pc, #20]	; (80118e8 <_fflush_r+0x70>)
 80118d2:	429c      	cmp	r4, r3
 80118d4:	d101      	bne.n	80118da <_fflush_r+0x62>
 80118d6:	68ac      	ldr	r4, [r5, #8]
 80118d8:	e7df      	b.n	801189a <_fflush_r+0x22>
 80118da:	4b04      	ldr	r3, [pc, #16]	; (80118ec <_fflush_r+0x74>)
 80118dc:	429c      	cmp	r4, r3
 80118de:	bf08      	it	eq
 80118e0:	68ec      	ldreq	r4, [r5, #12]
 80118e2:	e7da      	b.n	801189a <_fflush_r+0x22>
 80118e4:	08013610 	.word	0x08013610
 80118e8:	08013630 	.word	0x08013630
 80118ec:	080135f0 	.word	0x080135f0

080118f0 <_localeconv_r>:
 80118f0:	4800      	ldr	r0, [pc, #0]	; (80118f4 <_localeconv_r+0x4>)
 80118f2:	4770      	bx	lr
 80118f4:	200001c0 	.word	0x200001c0

080118f8 <_lseek_r>:
 80118f8:	b538      	push	{r3, r4, r5, lr}
 80118fa:	4d07      	ldr	r5, [pc, #28]	; (8011918 <_lseek_r+0x20>)
 80118fc:	4604      	mov	r4, r0
 80118fe:	4608      	mov	r0, r1
 8011900:	4611      	mov	r1, r2
 8011902:	2200      	movs	r2, #0
 8011904:	602a      	str	r2, [r5, #0]
 8011906:	461a      	mov	r2, r3
 8011908:	f7f3 fe02 	bl	8005510 <_lseek>
 801190c:	1c43      	adds	r3, r0, #1
 801190e:	d102      	bne.n	8011916 <_lseek_r+0x1e>
 8011910:	682b      	ldr	r3, [r5, #0]
 8011912:	b103      	cbz	r3, 8011916 <_lseek_r+0x1e>
 8011914:	6023      	str	r3, [r4, #0]
 8011916:	bd38      	pop	{r3, r4, r5, pc}
 8011918:	20005c54 	.word	0x20005c54

0801191c <__swhatbuf_r>:
 801191c:	b570      	push	{r4, r5, r6, lr}
 801191e:	460e      	mov	r6, r1
 8011920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011924:	2900      	cmp	r1, #0
 8011926:	b096      	sub	sp, #88	; 0x58
 8011928:	4614      	mov	r4, r2
 801192a:	461d      	mov	r5, r3
 801192c:	da08      	bge.n	8011940 <__swhatbuf_r+0x24>
 801192e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011932:	2200      	movs	r2, #0
 8011934:	602a      	str	r2, [r5, #0]
 8011936:	061a      	lsls	r2, r3, #24
 8011938:	d410      	bmi.n	801195c <__swhatbuf_r+0x40>
 801193a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801193e:	e00e      	b.n	801195e <__swhatbuf_r+0x42>
 8011940:	466a      	mov	r2, sp
 8011942:	f000 ff37 	bl	80127b4 <_fstat_r>
 8011946:	2800      	cmp	r0, #0
 8011948:	dbf1      	blt.n	801192e <__swhatbuf_r+0x12>
 801194a:	9a01      	ldr	r2, [sp, #4]
 801194c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011950:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011954:	425a      	negs	r2, r3
 8011956:	415a      	adcs	r2, r3
 8011958:	602a      	str	r2, [r5, #0]
 801195a:	e7ee      	b.n	801193a <__swhatbuf_r+0x1e>
 801195c:	2340      	movs	r3, #64	; 0x40
 801195e:	2000      	movs	r0, #0
 8011960:	6023      	str	r3, [r4, #0]
 8011962:	b016      	add	sp, #88	; 0x58
 8011964:	bd70      	pop	{r4, r5, r6, pc}
	...

08011968 <__smakebuf_r>:
 8011968:	898b      	ldrh	r3, [r1, #12]
 801196a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801196c:	079d      	lsls	r5, r3, #30
 801196e:	4606      	mov	r6, r0
 8011970:	460c      	mov	r4, r1
 8011972:	d507      	bpl.n	8011984 <__smakebuf_r+0x1c>
 8011974:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011978:	6023      	str	r3, [r4, #0]
 801197a:	6123      	str	r3, [r4, #16]
 801197c:	2301      	movs	r3, #1
 801197e:	6163      	str	r3, [r4, #20]
 8011980:	b002      	add	sp, #8
 8011982:	bd70      	pop	{r4, r5, r6, pc}
 8011984:	ab01      	add	r3, sp, #4
 8011986:	466a      	mov	r2, sp
 8011988:	f7ff ffc8 	bl	801191c <__swhatbuf_r>
 801198c:	9900      	ldr	r1, [sp, #0]
 801198e:	4605      	mov	r5, r0
 8011990:	4630      	mov	r0, r6
 8011992:	f7fe f829 	bl	800f9e8 <_malloc_r>
 8011996:	b948      	cbnz	r0, 80119ac <__smakebuf_r+0x44>
 8011998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801199c:	059a      	lsls	r2, r3, #22
 801199e:	d4ef      	bmi.n	8011980 <__smakebuf_r+0x18>
 80119a0:	f023 0303 	bic.w	r3, r3, #3
 80119a4:	f043 0302 	orr.w	r3, r3, #2
 80119a8:	81a3      	strh	r3, [r4, #12]
 80119aa:	e7e3      	b.n	8011974 <__smakebuf_r+0xc>
 80119ac:	4b0d      	ldr	r3, [pc, #52]	; (80119e4 <__smakebuf_r+0x7c>)
 80119ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80119b0:	89a3      	ldrh	r3, [r4, #12]
 80119b2:	6020      	str	r0, [r4, #0]
 80119b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80119b8:	81a3      	strh	r3, [r4, #12]
 80119ba:	9b00      	ldr	r3, [sp, #0]
 80119bc:	6163      	str	r3, [r4, #20]
 80119be:	9b01      	ldr	r3, [sp, #4]
 80119c0:	6120      	str	r0, [r4, #16]
 80119c2:	b15b      	cbz	r3, 80119dc <__smakebuf_r+0x74>
 80119c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80119c8:	4630      	mov	r0, r6
 80119ca:	f000 ff05 	bl	80127d8 <_isatty_r>
 80119ce:	b128      	cbz	r0, 80119dc <__smakebuf_r+0x74>
 80119d0:	89a3      	ldrh	r3, [r4, #12]
 80119d2:	f023 0303 	bic.w	r3, r3, #3
 80119d6:	f043 0301 	orr.w	r3, r3, #1
 80119da:	81a3      	strh	r3, [r4, #12]
 80119dc:	89a0      	ldrh	r0, [r4, #12]
 80119de:	4305      	orrs	r5, r0
 80119e0:	81a5      	strh	r5, [r4, #12]
 80119e2:	e7cd      	b.n	8011980 <__smakebuf_r+0x18>
 80119e4:	0800f6e9 	.word	0x0800f6e9

080119e8 <__malloc_lock>:
 80119e8:	4801      	ldr	r0, [pc, #4]	; (80119f0 <__malloc_lock+0x8>)
 80119ea:	f7f3 beb1 	b.w	8005750 <__retarget_lock_acquire_recursive>
 80119ee:	bf00      	nop
 80119f0:	20000c28 	.word	0x20000c28

080119f4 <__malloc_unlock>:
 80119f4:	4801      	ldr	r0, [pc, #4]	; (80119fc <__malloc_unlock+0x8>)
 80119f6:	f7f3 bebf 	b.w	8005778 <__retarget_lock_release_recursive>
 80119fa:	bf00      	nop
 80119fc:	20000c28 	.word	0x20000c28

08011a00 <_Balloc>:
 8011a00:	b570      	push	{r4, r5, r6, lr}
 8011a02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011a04:	4604      	mov	r4, r0
 8011a06:	460d      	mov	r5, r1
 8011a08:	b976      	cbnz	r6, 8011a28 <_Balloc+0x28>
 8011a0a:	2010      	movs	r0, #16
 8011a0c:	f7fd ff62 	bl	800f8d4 <malloc>
 8011a10:	4602      	mov	r2, r0
 8011a12:	6260      	str	r0, [r4, #36]	; 0x24
 8011a14:	b920      	cbnz	r0, 8011a20 <_Balloc+0x20>
 8011a16:	4b18      	ldr	r3, [pc, #96]	; (8011a78 <_Balloc+0x78>)
 8011a18:	4818      	ldr	r0, [pc, #96]	; (8011a7c <_Balloc+0x7c>)
 8011a1a:	2166      	movs	r1, #102	; 0x66
 8011a1c:	f000 fe9a 	bl	8012754 <__assert_func>
 8011a20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011a24:	6006      	str	r6, [r0, #0]
 8011a26:	60c6      	str	r6, [r0, #12]
 8011a28:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011a2a:	68f3      	ldr	r3, [r6, #12]
 8011a2c:	b183      	cbz	r3, 8011a50 <_Balloc+0x50>
 8011a2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a30:	68db      	ldr	r3, [r3, #12]
 8011a32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011a36:	b9b8      	cbnz	r0, 8011a68 <_Balloc+0x68>
 8011a38:	2101      	movs	r1, #1
 8011a3a:	fa01 f605 	lsl.w	r6, r1, r5
 8011a3e:	1d72      	adds	r2, r6, #5
 8011a40:	0092      	lsls	r2, r2, #2
 8011a42:	4620      	mov	r0, r4
 8011a44:	f000 fb60 	bl	8012108 <_calloc_r>
 8011a48:	b160      	cbz	r0, 8011a64 <_Balloc+0x64>
 8011a4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011a4e:	e00e      	b.n	8011a6e <_Balloc+0x6e>
 8011a50:	2221      	movs	r2, #33	; 0x21
 8011a52:	2104      	movs	r1, #4
 8011a54:	4620      	mov	r0, r4
 8011a56:	f000 fb57 	bl	8012108 <_calloc_r>
 8011a5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a5c:	60f0      	str	r0, [r6, #12]
 8011a5e:	68db      	ldr	r3, [r3, #12]
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d1e4      	bne.n	8011a2e <_Balloc+0x2e>
 8011a64:	2000      	movs	r0, #0
 8011a66:	bd70      	pop	{r4, r5, r6, pc}
 8011a68:	6802      	ldr	r2, [r0, #0]
 8011a6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011a6e:	2300      	movs	r3, #0
 8011a70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011a74:	e7f7      	b.n	8011a66 <_Balloc+0x66>
 8011a76:	bf00      	nop
 8011a78:	08013796 	.word	0x08013796
 8011a7c:	08013819 	.word	0x08013819

08011a80 <_Bfree>:
 8011a80:	b570      	push	{r4, r5, r6, lr}
 8011a82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011a84:	4605      	mov	r5, r0
 8011a86:	460c      	mov	r4, r1
 8011a88:	b976      	cbnz	r6, 8011aa8 <_Bfree+0x28>
 8011a8a:	2010      	movs	r0, #16
 8011a8c:	f7fd ff22 	bl	800f8d4 <malloc>
 8011a90:	4602      	mov	r2, r0
 8011a92:	6268      	str	r0, [r5, #36]	; 0x24
 8011a94:	b920      	cbnz	r0, 8011aa0 <_Bfree+0x20>
 8011a96:	4b09      	ldr	r3, [pc, #36]	; (8011abc <_Bfree+0x3c>)
 8011a98:	4809      	ldr	r0, [pc, #36]	; (8011ac0 <_Bfree+0x40>)
 8011a9a:	218a      	movs	r1, #138	; 0x8a
 8011a9c:	f000 fe5a 	bl	8012754 <__assert_func>
 8011aa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011aa4:	6006      	str	r6, [r0, #0]
 8011aa6:	60c6      	str	r6, [r0, #12]
 8011aa8:	b13c      	cbz	r4, 8011aba <_Bfree+0x3a>
 8011aaa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011aac:	6862      	ldr	r2, [r4, #4]
 8011aae:	68db      	ldr	r3, [r3, #12]
 8011ab0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011ab4:	6021      	str	r1, [r4, #0]
 8011ab6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011aba:	bd70      	pop	{r4, r5, r6, pc}
 8011abc:	08013796 	.word	0x08013796
 8011ac0:	08013819 	.word	0x08013819

08011ac4 <__multadd>:
 8011ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ac8:	690d      	ldr	r5, [r1, #16]
 8011aca:	4607      	mov	r7, r0
 8011acc:	460c      	mov	r4, r1
 8011ace:	461e      	mov	r6, r3
 8011ad0:	f101 0c14 	add.w	ip, r1, #20
 8011ad4:	2000      	movs	r0, #0
 8011ad6:	f8dc 3000 	ldr.w	r3, [ip]
 8011ada:	b299      	uxth	r1, r3
 8011adc:	fb02 6101 	mla	r1, r2, r1, r6
 8011ae0:	0c1e      	lsrs	r6, r3, #16
 8011ae2:	0c0b      	lsrs	r3, r1, #16
 8011ae4:	fb02 3306 	mla	r3, r2, r6, r3
 8011ae8:	b289      	uxth	r1, r1
 8011aea:	3001      	adds	r0, #1
 8011aec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011af0:	4285      	cmp	r5, r0
 8011af2:	f84c 1b04 	str.w	r1, [ip], #4
 8011af6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011afa:	dcec      	bgt.n	8011ad6 <__multadd+0x12>
 8011afc:	b30e      	cbz	r6, 8011b42 <__multadd+0x7e>
 8011afe:	68a3      	ldr	r3, [r4, #8]
 8011b00:	42ab      	cmp	r3, r5
 8011b02:	dc19      	bgt.n	8011b38 <__multadd+0x74>
 8011b04:	6861      	ldr	r1, [r4, #4]
 8011b06:	4638      	mov	r0, r7
 8011b08:	3101      	adds	r1, #1
 8011b0a:	f7ff ff79 	bl	8011a00 <_Balloc>
 8011b0e:	4680      	mov	r8, r0
 8011b10:	b928      	cbnz	r0, 8011b1e <__multadd+0x5a>
 8011b12:	4602      	mov	r2, r0
 8011b14:	4b0c      	ldr	r3, [pc, #48]	; (8011b48 <__multadd+0x84>)
 8011b16:	480d      	ldr	r0, [pc, #52]	; (8011b4c <__multadd+0x88>)
 8011b18:	21b5      	movs	r1, #181	; 0xb5
 8011b1a:	f000 fe1b 	bl	8012754 <__assert_func>
 8011b1e:	6922      	ldr	r2, [r4, #16]
 8011b20:	3202      	adds	r2, #2
 8011b22:	f104 010c 	add.w	r1, r4, #12
 8011b26:	0092      	lsls	r2, r2, #2
 8011b28:	300c      	adds	r0, #12
 8011b2a:	f7fd fedb 	bl	800f8e4 <memcpy>
 8011b2e:	4621      	mov	r1, r4
 8011b30:	4638      	mov	r0, r7
 8011b32:	f7ff ffa5 	bl	8011a80 <_Bfree>
 8011b36:	4644      	mov	r4, r8
 8011b38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011b3c:	3501      	adds	r5, #1
 8011b3e:	615e      	str	r6, [r3, #20]
 8011b40:	6125      	str	r5, [r4, #16]
 8011b42:	4620      	mov	r0, r4
 8011b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b48:	08013808 	.word	0x08013808
 8011b4c:	08013819 	.word	0x08013819

08011b50 <__hi0bits>:
 8011b50:	0c03      	lsrs	r3, r0, #16
 8011b52:	041b      	lsls	r3, r3, #16
 8011b54:	b9d3      	cbnz	r3, 8011b8c <__hi0bits+0x3c>
 8011b56:	0400      	lsls	r0, r0, #16
 8011b58:	2310      	movs	r3, #16
 8011b5a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011b5e:	bf04      	itt	eq
 8011b60:	0200      	lsleq	r0, r0, #8
 8011b62:	3308      	addeq	r3, #8
 8011b64:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011b68:	bf04      	itt	eq
 8011b6a:	0100      	lsleq	r0, r0, #4
 8011b6c:	3304      	addeq	r3, #4
 8011b6e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011b72:	bf04      	itt	eq
 8011b74:	0080      	lsleq	r0, r0, #2
 8011b76:	3302      	addeq	r3, #2
 8011b78:	2800      	cmp	r0, #0
 8011b7a:	db05      	blt.n	8011b88 <__hi0bits+0x38>
 8011b7c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011b80:	f103 0301 	add.w	r3, r3, #1
 8011b84:	bf08      	it	eq
 8011b86:	2320      	moveq	r3, #32
 8011b88:	4618      	mov	r0, r3
 8011b8a:	4770      	bx	lr
 8011b8c:	2300      	movs	r3, #0
 8011b8e:	e7e4      	b.n	8011b5a <__hi0bits+0xa>

08011b90 <__lo0bits>:
 8011b90:	6803      	ldr	r3, [r0, #0]
 8011b92:	f013 0207 	ands.w	r2, r3, #7
 8011b96:	4601      	mov	r1, r0
 8011b98:	d00b      	beq.n	8011bb2 <__lo0bits+0x22>
 8011b9a:	07da      	lsls	r2, r3, #31
 8011b9c:	d423      	bmi.n	8011be6 <__lo0bits+0x56>
 8011b9e:	0798      	lsls	r0, r3, #30
 8011ba0:	bf49      	itett	mi
 8011ba2:	085b      	lsrmi	r3, r3, #1
 8011ba4:	089b      	lsrpl	r3, r3, #2
 8011ba6:	2001      	movmi	r0, #1
 8011ba8:	600b      	strmi	r3, [r1, #0]
 8011baa:	bf5c      	itt	pl
 8011bac:	600b      	strpl	r3, [r1, #0]
 8011bae:	2002      	movpl	r0, #2
 8011bb0:	4770      	bx	lr
 8011bb2:	b298      	uxth	r0, r3
 8011bb4:	b9a8      	cbnz	r0, 8011be2 <__lo0bits+0x52>
 8011bb6:	0c1b      	lsrs	r3, r3, #16
 8011bb8:	2010      	movs	r0, #16
 8011bba:	b2da      	uxtb	r2, r3
 8011bbc:	b90a      	cbnz	r2, 8011bc2 <__lo0bits+0x32>
 8011bbe:	3008      	adds	r0, #8
 8011bc0:	0a1b      	lsrs	r3, r3, #8
 8011bc2:	071a      	lsls	r2, r3, #28
 8011bc4:	bf04      	itt	eq
 8011bc6:	091b      	lsreq	r3, r3, #4
 8011bc8:	3004      	addeq	r0, #4
 8011bca:	079a      	lsls	r2, r3, #30
 8011bcc:	bf04      	itt	eq
 8011bce:	089b      	lsreq	r3, r3, #2
 8011bd0:	3002      	addeq	r0, #2
 8011bd2:	07da      	lsls	r2, r3, #31
 8011bd4:	d403      	bmi.n	8011bde <__lo0bits+0x4e>
 8011bd6:	085b      	lsrs	r3, r3, #1
 8011bd8:	f100 0001 	add.w	r0, r0, #1
 8011bdc:	d005      	beq.n	8011bea <__lo0bits+0x5a>
 8011bde:	600b      	str	r3, [r1, #0]
 8011be0:	4770      	bx	lr
 8011be2:	4610      	mov	r0, r2
 8011be4:	e7e9      	b.n	8011bba <__lo0bits+0x2a>
 8011be6:	2000      	movs	r0, #0
 8011be8:	4770      	bx	lr
 8011bea:	2020      	movs	r0, #32
 8011bec:	4770      	bx	lr
	...

08011bf0 <__i2b>:
 8011bf0:	b510      	push	{r4, lr}
 8011bf2:	460c      	mov	r4, r1
 8011bf4:	2101      	movs	r1, #1
 8011bf6:	f7ff ff03 	bl	8011a00 <_Balloc>
 8011bfa:	4602      	mov	r2, r0
 8011bfc:	b928      	cbnz	r0, 8011c0a <__i2b+0x1a>
 8011bfe:	4b05      	ldr	r3, [pc, #20]	; (8011c14 <__i2b+0x24>)
 8011c00:	4805      	ldr	r0, [pc, #20]	; (8011c18 <__i2b+0x28>)
 8011c02:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011c06:	f000 fda5 	bl	8012754 <__assert_func>
 8011c0a:	2301      	movs	r3, #1
 8011c0c:	6144      	str	r4, [r0, #20]
 8011c0e:	6103      	str	r3, [r0, #16]
 8011c10:	bd10      	pop	{r4, pc}
 8011c12:	bf00      	nop
 8011c14:	08013808 	.word	0x08013808
 8011c18:	08013819 	.word	0x08013819

08011c1c <__multiply>:
 8011c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c20:	4691      	mov	r9, r2
 8011c22:	690a      	ldr	r2, [r1, #16]
 8011c24:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011c28:	429a      	cmp	r2, r3
 8011c2a:	bfb8      	it	lt
 8011c2c:	460b      	movlt	r3, r1
 8011c2e:	460c      	mov	r4, r1
 8011c30:	bfbc      	itt	lt
 8011c32:	464c      	movlt	r4, r9
 8011c34:	4699      	movlt	r9, r3
 8011c36:	6927      	ldr	r7, [r4, #16]
 8011c38:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011c3c:	68a3      	ldr	r3, [r4, #8]
 8011c3e:	6861      	ldr	r1, [r4, #4]
 8011c40:	eb07 060a 	add.w	r6, r7, sl
 8011c44:	42b3      	cmp	r3, r6
 8011c46:	b085      	sub	sp, #20
 8011c48:	bfb8      	it	lt
 8011c4a:	3101      	addlt	r1, #1
 8011c4c:	f7ff fed8 	bl	8011a00 <_Balloc>
 8011c50:	b930      	cbnz	r0, 8011c60 <__multiply+0x44>
 8011c52:	4602      	mov	r2, r0
 8011c54:	4b44      	ldr	r3, [pc, #272]	; (8011d68 <__multiply+0x14c>)
 8011c56:	4845      	ldr	r0, [pc, #276]	; (8011d6c <__multiply+0x150>)
 8011c58:	f240 115d 	movw	r1, #349	; 0x15d
 8011c5c:	f000 fd7a 	bl	8012754 <__assert_func>
 8011c60:	f100 0514 	add.w	r5, r0, #20
 8011c64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011c68:	462b      	mov	r3, r5
 8011c6a:	2200      	movs	r2, #0
 8011c6c:	4543      	cmp	r3, r8
 8011c6e:	d321      	bcc.n	8011cb4 <__multiply+0x98>
 8011c70:	f104 0314 	add.w	r3, r4, #20
 8011c74:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011c78:	f109 0314 	add.w	r3, r9, #20
 8011c7c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011c80:	9202      	str	r2, [sp, #8]
 8011c82:	1b3a      	subs	r2, r7, r4
 8011c84:	3a15      	subs	r2, #21
 8011c86:	f022 0203 	bic.w	r2, r2, #3
 8011c8a:	3204      	adds	r2, #4
 8011c8c:	f104 0115 	add.w	r1, r4, #21
 8011c90:	428f      	cmp	r7, r1
 8011c92:	bf38      	it	cc
 8011c94:	2204      	movcc	r2, #4
 8011c96:	9201      	str	r2, [sp, #4]
 8011c98:	9a02      	ldr	r2, [sp, #8]
 8011c9a:	9303      	str	r3, [sp, #12]
 8011c9c:	429a      	cmp	r2, r3
 8011c9e:	d80c      	bhi.n	8011cba <__multiply+0x9e>
 8011ca0:	2e00      	cmp	r6, #0
 8011ca2:	dd03      	ble.n	8011cac <__multiply+0x90>
 8011ca4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d05a      	beq.n	8011d62 <__multiply+0x146>
 8011cac:	6106      	str	r6, [r0, #16]
 8011cae:	b005      	add	sp, #20
 8011cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cb4:	f843 2b04 	str.w	r2, [r3], #4
 8011cb8:	e7d8      	b.n	8011c6c <__multiply+0x50>
 8011cba:	f8b3 a000 	ldrh.w	sl, [r3]
 8011cbe:	f1ba 0f00 	cmp.w	sl, #0
 8011cc2:	d024      	beq.n	8011d0e <__multiply+0xf2>
 8011cc4:	f104 0e14 	add.w	lr, r4, #20
 8011cc8:	46a9      	mov	r9, r5
 8011cca:	f04f 0c00 	mov.w	ip, #0
 8011cce:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011cd2:	f8d9 1000 	ldr.w	r1, [r9]
 8011cd6:	fa1f fb82 	uxth.w	fp, r2
 8011cda:	b289      	uxth	r1, r1
 8011cdc:	fb0a 110b 	mla	r1, sl, fp, r1
 8011ce0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011ce4:	f8d9 2000 	ldr.w	r2, [r9]
 8011ce8:	4461      	add	r1, ip
 8011cea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011cee:	fb0a c20b 	mla	r2, sl, fp, ip
 8011cf2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011cf6:	b289      	uxth	r1, r1
 8011cf8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011cfc:	4577      	cmp	r7, lr
 8011cfe:	f849 1b04 	str.w	r1, [r9], #4
 8011d02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011d06:	d8e2      	bhi.n	8011cce <__multiply+0xb2>
 8011d08:	9a01      	ldr	r2, [sp, #4]
 8011d0a:	f845 c002 	str.w	ip, [r5, r2]
 8011d0e:	9a03      	ldr	r2, [sp, #12]
 8011d10:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011d14:	3304      	adds	r3, #4
 8011d16:	f1b9 0f00 	cmp.w	r9, #0
 8011d1a:	d020      	beq.n	8011d5e <__multiply+0x142>
 8011d1c:	6829      	ldr	r1, [r5, #0]
 8011d1e:	f104 0c14 	add.w	ip, r4, #20
 8011d22:	46ae      	mov	lr, r5
 8011d24:	f04f 0a00 	mov.w	sl, #0
 8011d28:	f8bc b000 	ldrh.w	fp, [ip]
 8011d2c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011d30:	fb09 220b 	mla	r2, r9, fp, r2
 8011d34:	4492      	add	sl, r2
 8011d36:	b289      	uxth	r1, r1
 8011d38:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011d3c:	f84e 1b04 	str.w	r1, [lr], #4
 8011d40:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011d44:	f8be 1000 	ldrh.w	r1, [lr]
 8011d48:	0c12      	lsrs	r2, r2, #16
 8011d4a:	fb09 1102 	mla	r1, r9, r2, r1
 8011d4e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011d52:	4567      	cmp	r7, ip
 8011d54:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011d58:	d8e6      	bhi.n	8011d28 <__multiply+0x10c>
 8011d5a:	9a01      	ldr	r2, [sp, #4]
 8011d5c:	50a9      	str	r1, [r5, r2]
 8011d5e:	3504      	adds	r5, #4
 8011d60:	e79a      	b.n	8011c98 <__multiply+0x7c>
 8011d62:	3e01      	subs	r6, #1
 8011d64:	e79c      	b.n	8011ca0 <__multiply+0x84>
 8011d66:	bf00      	nop
 8011d68:	08013808 	.word	0x08013808
 8011d6c:	08013819 	.word	0x08013819

08011d70 <__pow5mult>:
 8011d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d74:	4615      	mov	r5, r2
 8011d76:	f012 0203 	ands.w	r2, r2, #3
 8011d7a:	4606      	mov	r6, r0
 8011d7c:	460f      	mov	r7, r1
 8011d7e:	d007      	beq.n	8011d90 <__pow5mult+0x20>
 8011d80:	4c25      	ldr	r4, [pc, #148]	; (8011e18 <__pow5mult+0xa8>)
 8011d82:	3a01      	subs	r2, #1
 8011d84:	2300      	movs	r3, #0
 8011d86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011d8a:	f7ff fe9b 	bl	8011ac4 <__multadd>
 8011d8e:	4607      	mov	r7, r0
 8011d90:	10ad      	asrs	r5, r5, #2
 8011d92:	d03d      	beq.n	8011e10 <__pow5mult+0xa0>
 8011d94:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011d96:	b97c      	cbnz	r4, 8011db8 <__pow5mult+0x48>
 8011d98:	2010      	movs	r0, #16
 8011d9a:	f7fd fd9b 	bl	800f8d4 <malloc>
 8011d9e:	4602      	mov	r2, r0
 8011da0:	6270      	str	r0, [r6, #36]	; 0x24
 8011da2:	b928      	cbnz	r0, 8011db0 <__pow5mult+0x40>
 8011da4:	4b1d      	ldr	r3, [pc, #116]	; (8011e1c <__pow5mult+0xac>)
 8011da6:	481e      	ldr	r0, [pc, #120]	; (8011e20 <__pow5mult+0xb0>)
 8011da8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011dac:	f000 fcd2 	bl	8012754 <__assert_func>
 8011db0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011db4:	6004      	str	r4, [r0, #0]
 8011db6:	60c4      	str	r4, [r0, #12]
 8011db8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011dbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011dc0:	b94c      	cbnz	r4, 8011dd6 <__pow5mult+0x66>
 8011dc2:	f240 2171 	movw	r1, #625	; 0x271
 8011dc6:	4630      	mov	r0, r6
 8011dc8:	f7ff ff12 	bl	8011bf0 <__i2b>
 8011dcc:	2300      	movs	r3, #0
 8011dce:	f8c8 0008 	str.w	r0, [r8, #8]
 8011dd2:	4604      	mov	r4, r0
 8011dd4:	6003      	str	r3, [r0, #0]
 8011dd6:	f04f 0900 	mov.w	r9, #0
 8011dda:	07eb      	lsls	r3, r5, #31
 8011ddc:	d50a      	bpl.n	8011df4 <__pow5mult+0x84>
 8011dde:	4639      	mov	r1, r7
 8011de0:	4622      	mov	r2, r4
 8011de2:	4630      	mov	r0, r6
 8011de4:	f7ff ff1a 	bl	8011c1c <__multiply>
 8011de8:	4639      	mov	r1, r7
 8011dea:	4680      	mov	r8, r0
 8011dec:	4630      	mov	r0, r6
 8011dee:	f7ff fe47 	bl	8011a80 <_Bfree>
 8011df2:	4647      	mov	r7, r8
 8011df4:	106d      	asrs	r5, r5, #1
 8011df6:	d00b      	beq.n	8011e10 <__pow5mult+0xa0>
 8011df8:	6820      	ldr	r0, [r4, #0]
 8011dfa:	b938      	cbnz	r0, 8011e0c <__pow5mult+0x9c>
 8011dfc:	4622      	mov	r2, r4
 8011dfe:	4621      	mov	r1, r4
 8011e00:	4630      	mov	r0, r6
 8011e02:	f7ff ff0b 	bl	8011c1c <__multiply>
 8011e06:	6020      	str	r0, [r4, #0]
 8011e08:	f8c0 9000 	str.w	r9, [r0]
 8011e0c:	4604      	mov	r4, r0
 8011e0e:	e7e4      	b.n	8011dda <__pow5mult+0x6a>
 8011e10:	4638      	mov	r0, r7
 8011e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e16:	bf00      	nop
 8011e18:	08013968 	.word	0x08013968
 8011e1c:	08013796 	.word	0x08013796
 8011e20:	08013819 	.word	0x08013819

08011e24 <__lshift>:
 8011e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e28:	460c      	mov	r4, r1
 8011e2a:	6849      	ldr	r1, [r1, #4]
 8011e2c:	6923      	ldr	r3, [r4, #16]
 8011e2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011e32:	68a3      	ldr	r3, [r4, #8]
 8011e34:	4607      	mov	r7, r0
 8011e36:	4691      	mov	r9, r2
 8011e38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011e3c:	f108 0601 	add.w	r6, r8, #1
 8011e40:	42b3      	cmp	r3, r6
 8011e42:	db0b      	blt.n	8011e5c <__lshift+0x38>
 8011e44:	4638      	mov	r0, r7
 8011e46:	f7ff fddb 	bl	8011a00 <_Balloc>
 8011e4a:	4605      	mov	r5, r0
 8011e4c:	b948      	cbnz	r0, 8011e62 <__lshift+0x3e>
 8011e4e:	4602      	mov	r2, r0
 8011e50:	4b2a      	ldr	r3, [pc, #168]	; (8011efc <__lshift+0xd8>)
 8011e52:	482b      	ldr	r0, [pc, #172]	; (8011f00 <__lshift+0xdc>)
 8011e54:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011e58:	f000 fc7c 	bl	8012754 <__assert_func>
 8011e5c:	3101      	adds	r1, #1
 8011e5e:	005b      	lsls	r3, r3, #1
 8011e60:	e7ee      	b.n	8011e40 <__lshift+0x1c>
 8011e62:	2300      	movs	r3, #0
 8011e64:	f100 0114 	add.w	r1, r0, #20
 8011e68:	f100 0210 	add.w	r2, r0, #16
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	4553      	cmp	r3, sl
 8011e70:	db37      	blt.n	8011ee2 <__lshift+0xbe>
 8011e72:	6920      	ldr	r0, [r4, #16]
 8011e74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011e78:	f104 0314 	add.w	r3, r4, #20
 8011e7c:	f019 091f 	ands.w	r9, r9, #31
 8011e80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011e84:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011e88:	d02f      	beq.n	8011eea <__lshift+0xc6>
 8011e8a:	f1c9 0e20 	rsb	lr, r9, #32
 8011e8e:	468a      	mov	sl, r1
 8011e90:	f04f 0c00 	mov.w	ip, #0
 8011e94:	681a      	ldr	r2, [r3, #0]
 8011e96:	fa02 f209 	lsl.w	r2, r2, r9
 8011e9a:	ea42 020c 	orr.w	r2, r2, ip
 8011e9e:	f84a 2b04 	str.w	r2, [sl], #4
 8011ea2:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ea6:	4298      	cmp	r0, r3
 8011ea8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011eac:	d8f2      	bhi.n	8011e94 <__lshift+0x70>
 8011eae:	1b03      	subs	r3, r0, r4
 8011eb0:	3b15      	subs	r3, #21
 8011eb2:	f023 0303 	bic.w	r3, r3, #3
 8011eb6:	3304      	adds	r3, #4
 8011eb8:	f104 0215 	add.w	r2, r4, #21
 8011ebc:	4290      	cmp	r0, r2
 8011ebe:	bf38      	it	cc
 8011ec0:	2304      	movcc	r3, #4
 8011ec2:	f841 c003 	str.w	ip, [r1, r3]
 8011ec6:	f1bc 0f00 	cmp.w	ip, #0
 8011eca:	d001      	beq.n	8011ed0 <__lshift+0xac>
 8011ecc:	f108 0602 	add.w	r6, r8, #2
 8011ed0:	3e01      	subs	r6, #1
 8011ed2:	4638      	mov	r0, r7
 8011ed4:	612e      	str	r6, [r5, #16]
 8011ed6:	4621      	mov	r1, r4
 8011ed8:	f7ff fdd2 	bl	8011a80 <_Bfree>
 8011edc:	4628      	mov	r0, r5
 8011ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ee2:	f842 0f04 	str.w	r0, [r2, #4]!
 8011ee6:	3301      	adds	r3, #1
 8011ee8:	e7c1      	b.n	8011e6e <__lshift+0x4a>
 8011eea:	3904      	subs	r1, #4
 8011eec:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ef0:	f841 2f04 	str.w	r2, [r1, #4]!
 8011ef4:	4298      	cmp	r0, r3
 8011ef6:	d8f9      	bhi.n	8011eec <__lshift+0xc8>
 8011ef8:	e7ea      	b.n	8011ed0 <__lshift+0xac>
 8011efa:	bf00      	nop
 8011efc:	08013808 	.word	0x08013808
 8011f00:	08013819 	.word	0x08013819

08011f04 <__mcmp>:
 8011f04:	b530      	push	{r4, r5, lr}
 8011f06:	6902      	ldr	r2, [r0, #16]
 8011f08:	690c      	ldr	r4, [r1, #16]
 8011f0a:	1b12      	subs	r2, r2, r4
 8011f0c:	d10e      	bne.n	8011f2c <__mcmp+0x28>
 8011f0e:	f100 0314 	add.w	r3, r0, #20
 8011f12:	3114      	adds	r1, #20
 8011f14:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011f18:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011f1c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011f20:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011f24:	42a5      	cmp	r5, r4
 8011f26:	d003      	beq.n	8011f30 <__mcmp+0x2c>
 8011f28:	d305      	bcc.n	8011f36 <__mcmp+0x32>
 8011f2a:	2201      	movs	r2, #1
 8011f2c:	4610      	mov	r0, r2
 8011f2e:	bd30      	pop	{r4, r5, pc}
 8011f30:	4283      	cmp	r3, r0
 8011f32:	d3f3      	bcc.n	8011f1c <__mcmp+0x18>
 8011f34:	e7fa      	b.n	8011f2c <__mcmp+0x28>
 8011f36:	f04f 32ff 	mov.w	r2, #4294967295
 8011f3a:	e7f7      	b.n	8011f2c <__mcmp+0x28>

08011f3c <__mdiff>:
 8011f3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f40:	460c      	mov	r4, r1
 8011f42:	4606      	mov	r6, r0
 8011f44:	4611      	mov	r1, r2
 8011f46:	4620      	mov	r0, r4
 8011f48:	4690      	mov	r8, r2
 8011f4a:	f7ff ffdb 	bl	8011f04 <__mcmp>
 8011f4e:	1e05      	subs	r5, r0, #0
 8011f50:	d110      	bne.n	8011f74 <__mdiff+0x38>
 8011f52:	4629      	mov	r1, r5
 8011f54:	4630      	mov	r0, r6
 8011f56:	f7ff fd53 	bl	8011a00 <_Balloc>
 8011f5a:	b930      	cbnz	r0, 8011f6a <__mdiff+0x2e>
 8011f5c:	4b3a      	ldr	r3, [pc, #232]	; (8012048 <__mdiff+0x10c>)
 8011f5e:	4602      	mov	r2, r0
 8011f60:	f240 2132 	movw	r1, #562	; 0x232
 8011f64:	4839      	ldr	r0, [pc, #228]	; (801204c <__mdiff+0x110>)
 8011f66:	f000 fbf5 	bl	8012754 <__assert_func>
 8011f6a:	2301      	movs	r3, #1
 8011f6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011f70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f74:	bfa4      	itt	ge
 8011f76:	4643      	movge	r3, r8
 8011f78:	46a0      	movge	r8, r4
 8011f7a:	4630      	mov	r0, r6
 8011f7c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011f80:	bfa6      	itte	ge
 8011f82:	461c      	movge	r4, r3
 8011f84:	2500      	movge	r5, #0
 8011f86:	2501      	movlt	r5, #1
 8011f88:	f7ff fd3a 	bl	8011a00 <_Balloc>
 8011f8c:	b920      	cbnz	r0, 8011f98 <__mdiff+0x5c>
 8011f8e:	4b2e      	ldr	r3, [pc, #184]	; (8012048 <__mdiff+0x10c>)
 8011f90:	4602      	mov	r2, r0
 8011f92:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011f96:	e7e5      	b.n	8011f64 <__mdiff+0x28>
 8011f98:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011f9c:	6926      	ldr	r6, [r4, #16]
 8011f9e:	60c5      	str	r5, [r0, #12]
 8011fa0:	f104 0914 	add.w	r9, r4, #20
 8011fa4:	f108 0514 	add.w	r5, r8, #20
 8011fa8:	f100 0e14 	add.w	lr, r0, #20
 8011fac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011fb0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011fb4:	f108 0210 	add.w	r2, r8, #16
 8011fb8:	46f2      	mov	sl, lr
 8011fba:	2100      	movs	r1, #0
 8011fbc:	f859 3b04 	ldr.w	r3, [r9], #4
 8011fc0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011fc4:	fa1f f883 	uxth.w	r8, r3
 8011fc8:	fa11 f18b 	uxtah	r1, r1, fp
 8011fcc:	0c1b      	lsrs	r3, r3, #16
 8011fce:	eba1 0808 	sub.w	r8, r1, r8
 8011fd2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011fd6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011fda:	fa1f f888 	uxth.w	r8, r8
 8011fde:	1419      	asrs	r1, r3, #16
 8011fe0:	454e      	cmp	r6, r9
 8011fe2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011fe6:	f84a 3b04 	str.w	r3, [sl], #4
 8011fea:	d8e7      	bhi.n	8011fbc <__mdiff+0x80>
 8011fec:	1b33      	subs	r3, r6, r4
 8011fee:	3b15      	subs	r3, #21
 8011ff0:	f023 0303 	bic.w	r3, r3, #3
 8011ff4:	3304      	adds	r3, #4
 8011ff6:	3415      	adds	r4, #21
 8011ff8:	42a6      	cmp	r6, r4
 8011ffa:	bf38      	it	cc
 8011ffc:	2304      	movcc	r3, #4
 8011ffe:	441d      	add	r5, r3
 8012000:	4473      	add	r3, lr
 8012002:	469e      	mov	lr, r3
 8012004:	462e      	mov	r6, r5
 8012006:	4566      	cmp	r6, ip
 8012008:	d30e      	bcc.n	8012028 <__mdiff+0xec>
 801200a:	f10c 0203 	add.w	r2, ip, #3
 801200e:	1b52      	subs	r2, r2, r5
 8012010:	f022 0203 	bic.w	r2, r2, #3
 8012014:	3d03      	subs	r5, #3
 8012016:	45ac      	cmp	ip, r5
 8012018:	bf38      	it	cc
 801201a:	2200      	movcc	r2, #0
 801201c:	441a      	add	r2, r3
 801201e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012022:	b17b      	cbz	r3, 8012044 <__mdiff+0x108>
 8012024:	6107      	str	r7, [r0, #16]
 8012026:	e7a3      	b.n	8011f70 <__mdiff+0x34>
 8012028:	f856 8b04 	ldr.w	r8, [r6], #4
 801202c:	fa11 f288 	uxtah	r2, r1, r8
 8012030:	1414      	asrs	r4, r2, #16
 8012032:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012036:	b292      	uxth	r2, r2
 8012038:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801203c:	f84e 2b04 	str.w	r2, [lr], #4
 8012040:	1421      	asrs	r1, r4, #16
 8012042:	e7e0      	b.n	8012006 <__mdiff+0xca>
 8012044:	3f01      	subs	r7, #1
 8012046:	e7ea      	b.n	801201e <__mdiff+0xe2>
 8012048:	08013808 	.word	0x08013808
 801204c:	08013819 	.word	0x08013819

08012050 <__d2b>:
 8012050:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012054:	4689      	mov	r9, r1
 8012056:	2101      	movs	r1, #1
 8012058:	ec57 6b10 	vmov	r6, r7, d0
 801205c:	4690      	mov	r8, r2
 801205e:	f7ff fccf 	bl	8011a00 <_Balloc>
 8012062:	4604      	mov	r4, r0
 8012064:	b930      	cbnz	r0, 8012074 <__d2b+0x24>
 8012066:	4602      	mov	r2, r0
 8012068:	4b25      	ldr	r3, [pc, #148]	; (8012100 <__d2b+0xb0>)
 801206a:	4826      	ldr	r0, [pc, #152]	; (8012104 <__d2b+0xb4>)
 801206c:	f240 310a 	movw	r1, #778	; 0x30a
 8012070:	f000 fb70 	bl	8012754 <__assert_func>
 8012074:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012078:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801207c:	bb35      	cbnz	r5, 80120cc <__d2b+0x7c>
 801207e:	2e00      	cmp	r6, #0
 8012080:	9301      	str	r3, [sp, #4]
 8012082:	d028      	beq.n	80120d6 <__d2b+0x86>
 8012084:	4668      	mov	r0, sp
 8012086:	9600      	str	r6, [sp, #0]
 8012088:	f7ff fd82 	bl	8011b90 <__lo0bits>
 801208c:	9900      	ldr	r1, [sp, #0]
 801208e:	b300      	cbz	r0, 80120d2 <__d2b+0x82>
 8012090:	9a01      	ldr	r2, [sp, #4]
 8012092:	f1c0 0320 	rsb	r3, r0, #32
 8012096:	fa02 f303 	lsl.w	r3, r2, r3
 801209a:	430b      	orrs	r3, r1
 801209c:	40c2      	lsrs	r2, r0
 801209e:	6163      	str	r3, [r4, #20]
 80120a0:	9201      	str	r2, [sp, #4]
 80120a2:	9b01      	ldr	r3, [sp, #4]
 80120a4:	61a3      	str	r3, [r4, #24]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	bf14      	ite	ne
 80120aa:	2202      	movne	r2, #2
 80120ac:	2201      	moveq	r2, #1
 80120ae:	6122      	str	r2, [r4, #16]
 80120b0:	b1d5      	cbz	r5, 80120e8 <__d2b+0x98>
 80120b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80120b6:	4405      	add	r5, r0
 80120b8:	f8c9 5000 	str.w	r5, [r9]
 80120bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80120c0:	f8c8 0000 	str.w	r0, [r8]
 80120c4:	4620      	mov	r0, r4
 80120c6:	b003      	add	sp, #12
 80120c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80120cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80120d0:	e7d5      	b.n	801207e <__d2b+0x2e>
 80120d2:	6161      	str	r1, [r4, #20]
 80120d4:	e7e5      	b.n	80120a2 <__d2b+0x52>
 80120d6:	a801      	add	r0, sp, #4
 80120d8:	f7ff fd5a 	bl	8011b90 <__lo0bits>
 80120dc:	9b01      	ldr	r3, [sp, #4]
 80120de:	6163      	str	r3, [r4, #20]
 80120e0:	2201      	movs	r2, #1
 80120e2:	6122      	str	r2, [r4, #16]
 80120e4:	3020      	adds	r0, #32
 80120e6:	e7e3      	b.n	80120b0 <__d2b+0x60>
 80120e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80120ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80120f0:	f8c9 0000 	str.w	r0, [r9]
 80120f4:	6918      	ldr	r0, [r3, #16]
 80120f6:	f7ff fd2b 	bl	8011b50 <__hi0bits>
 80120fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80120fe:	e7df      	b.n	80120c0 <__d2b+0x70>
 8012100:	08013808 	.word	0x08013808
 8012104:	08013819 	.word	0x08013819

08012108 <_calloc_r>:
 8012108:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801210a:	fba1 2402 	umull	r2, r4, r1, r2
 801210e:	b94c      	cbnz	r4, 8012124 <_calloc_r+0x1c>
 8012110:	4611      	mov	r1, r2
 8012112:	9201      	str	r2, [sp, #4]
 8012114:	f7fd fc68 	bl	800f9e8 <_malloc_r>
 8012118:	9a01      	ldr	r2, [sp, #4]
 801211a:	4605      	mov	r5, r0
 801211c:	b930      	cbnz	r0, 801212c <_calloc_r+0x24>
 801211e:	4628      	mov	r0, r5
 8012120:	b003      	add	sp, #12
 8012122:	bd30      	pop	{r4, r5, pc}
 8012124:	220c      	movs	r2, #12
 8012126:	6002      	str	r2, [r0, #0]
 8012128:	2500      	movs	r5, #0
 801212a:	e7f8      	b.n	801211e <_calloc_r+0x16>
 801212c:	4621      	mov	r1, r4
 801212e:	f7fd fbe7 	bl	800f900 <memset>
 8012132:	e7f4      	b.n	801211e <_calloc_r+0x16>

08012134 <__ssputs_r>:
 8012134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012138:	688e      	ldr	r6, [r1, #8]
 801213a:	429e      	cmp	r6, r3
 801213c:	4682      	mov	sl, r0
 801213e:	460c      	mov	r4, r1
 8012140:	4690      	mov	r8, r2
 8012142:	461f      	mov	r7, r3
 8012144:	d838      	bhi.n	80121b8 <__ssputs_r+0x84>
 8012146:	898a      	ldrh	r2, [r1, #12]
 8012148:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801214c:	d032      	beq.n	80121b4 <__ssputs_r+0x80>
 801214e:	6825      	ldr	r5, [r4, #0]
 8012150:	6909      	ldr	r1, [r1, #16]
 8012152:	eba5 0901 	sub.w	r9, r5, r1
 8012156:	6965      	ldr	r5, [r4, #20]
 8012158:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801215c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012160:	3301      	adds	r3, #1
 8012162:	444b      	add	r3, r9
 8012164:	106d      	asrs	r5, r5, #1
 8012166:	429d      	cmp	r5, r3
 8012168:	bf38      	it	cc
 801216a:	461d      	movcc	r5, r3
 801216c:	0553      	lsls	r3, r2, #21
 801216e:	d531      	bpl.n	80121d4 <__ssputs_r+0xa0>
 8012170:	4629      	mov	r1, r5
 8012172:	f7fd fc39 	bl	800f9e8 <_malloc_r>
 8012176:	4606      	mov	r6, r0
 8012178:	b950      	cbnz	r0, 8012190 <__ssputs_r+0x5c>
 801217a:	230c      	movs	r3, #12
 801217c:	f8ca 3000 	str.w	r3, [sl]
 8012180:	89a3      	ldrh	r3, [r4, #12]
 8012182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012186:	81a3      	strh	r3, [r4, #12]
 8012188:	f04f 30ff 	mov.w	r0, #4294967295
 801218c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012190:	6921      	ldr	r1, [r4, #16]
 8012192:	464a      	mov	r2, r9
 8012194:	f7fd fba6 	bl	800f8e4 <memcpy>
 8012198:	89a3      	ldrh	r3, [r4, #12]
 801219a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801219e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80121a2:	81a3      	strh	r3, [r4, #12]
 80121a4:	6126      	str	r6, [r4, #16]
 80121a6:	6165      	str	r5, [r4, #20]
 80121a8:	444e      	add	r6, r9
 80121aa:	eba5 0509 	sub.w	r5, r5, r9
 80121ae:	6026      	str	r6, [r4, #0]
 80121b0:	60a5      	str	r5, [r4, #8]
 80121b2:	463e      	mov	r6, r7
 80121b4:	42be      	cmp	r6, r7
 80121b6:	d900      	bls.n	80121ba <__ssputs_r+0x86>
 80121b8:	463e      	mov	r6, r7
 80121ba:	6820      	ldr	r0, [r4, #0]
 80121bc:	4632      	mov	r2, r6
 80121be:	4641      	mov	r1, r8
 80121c0:	f000 fb2c 	bl	801281c <memmove>
 80121c4:	68a3      	ldr	r3, [r4, #8]
 80121c6:	1b9b      	subs	r3, r3, r6
 80121c8:	60a3      	str	r3, [r4, #8]
 80121ca:	6823      	ldr	r3, [r4, #0]
 80121cc:	4433      	add	r3, r6
 80121ce:	6023      	str	r3, [r4, #0]
 80121d0:	2000      	movs	r0, #0
 80121d2:	e7db      	b.n	801218c <__ssputs_r+0x58>
 80121d4:	462a      	mov	r2, r5
 80121d6:	f000 fb3b 	bl	8012850 <_realloc_r>
 80121da:	4606      	mov	r6, r0
 80121dc:	2800      	cmp	r0, #0
 80121de:	d1e1      	bne.n	80121a4 <__ssputs_r+0x70>
 80121e0:	6921      	ldr	r1, [r4, #16]
 80121e2:	4650      	mov	r0, sl
 80121e4:	f7fd fb94 	bl	800f910 <_free_r>
 80121e8:	e7c7      	b.n	801217a <__ssputs_r+0x46>
	...

080121ec <_svfiprintf_r>:
 80121ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121f0:	4698      	mov	r8, r3
 80121f2:	898b      	ldrh	r3, [r1, #12]
 80121f4:	061b      	lsls	r3, r3, #24
 80121f6:	b09d      	sub	sp, #116	; 0x74
 80121f8:	4607      	mov	r7, r0
 80121fa:	460d      	mov	r5, r1
 80121fc:	4614      	mov	r4, r2
 80121fe:	d50e      	bpl.n	801221e <_svfiprintf_r+0x32>
 8012200:	690b      	ldr	r3, [r1, #16]
 8012202:	b963      	cbnz	r3, 801221e <_svfiprintf_r+0x32>
 8012204:	2140      	movs	r1, #64	; 0x40
 8012206:	f7fd fbef 	bl	800f9e8 <_malloc_r>
 801220a:	6028      	str	r0, [r5, #0]
 801220c:	6128      	str	r0, [r5, #16]
 801220e:	b920      	cbnz	r0, 801221a <_svfiprintf_r+0x2e>
 8012210:	230c      	movs	r3, #12
 8012212:	603b      	str	r3, [r7, #0]
 8012214:	f04f 30ff 	mov.w	r0, #4294967295
 8012218:	e0d1      	b.n	80123be <_svfiprintf_r+0x1d2>
 801221a:	2340      	movs	r3, #64	; 0x40
 801221c:	616b      	str	r3, [r5, #20]
 801221e:	2300      	movs	r3, #0
 8012220:	9309      	str	r3, [sp, #36]	; 0x24
 8012222:	2320      	movs	r3, #32
 8012224:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012228:	f8cd 800c 	str.w	r8, [sp, #12]
 801222c:	2330      	movs	r3, #48	; 0x30
 801222e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80123d8 <_svfiprintf_r+0x1ec>
 8012232:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012236:	f04f 0901 	mov.w	r9, #1
 801223a:	4623      	mov	r3, r4
 801223c:	469a      	mov	sl, r3
 801223e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012242:	b10a      	cbz	r2, 8012248 <_svfiprintf_r+0x5c>
 8012244:	2a25      	cmp	r2, #37	; 0x25
 8012246:	d1f9      	bne.n	801223c <_svfiprintf_r+0x50>
 8012248:	ebba 0b04 	subs.w	fp, sl, r4
 801224c:	d00b      	beq.n	8012266 <_svfiprintf_r+0x7a>
 801224e:	465b      	mov	r3, fp
 8012250:	4622      	mov	r2, r4
 8012252:	4629      	mov	r1, r5
 8012254:	4638      	mov	r0, r7
 8012256:	f7ff ff6d 	bl	8012134 <__ssputs_r>
 801225a:	3001      	adds	r0, #1
 801225c:	f000 80aa 	beq.w	80123b4 <_svfiprintf_r+0x1c8>
 8012260:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012262:	445a      	add	r2, fp
 8012264:	9209      	str	r2, [sp, #36]	; 0x24
 8012266:	f89a 3000 	ldrb.w	r3, [sl]
 801226a:	2b00      	cmp	r3, #0
 801226c:	f000 80a2 	beq.w	80123b4 <_svfiprintf_r+0x1c8>
 8012270:	2300      	movs	r3, #0
 8012272:	f04f 32ff 	mov.w	r2, #4294967295
 8012276:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801227a:	f10a 0a01 	add.w	sl, sl, #1
 801227e:	9304      	str	r3, [sp, #16]
 8012280:	9307      	str	r3, [sp, #28]
 8012282:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012286:	931a      	str	r3, [sp, #104]	; 0x68
 8012288:	4654      	mov	r4, sl
 801228a:	2205      	movs	r2, #5
 801228c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012290:	4851      	ldr	r0, [pc, #324]	; (80123d8 <_svfiprintf_r+0x1ec>)
 8012292:	f7ed ffa5 	bl	80001e0 <memchr>
 8012296:	9a04      	ldr	r2, [sp, #16]
 8012298:	b9d8      	cbnz	r0, 80122d2 <_svfiprintf_r+0xe6>
 801229a:	06d0      	lsls	r0, r2, #27
 801229c:	bf44      	itt	mi
 801229e:	2320      	movmi	r3, #32
 80122a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80122a4:	0711      	lsls	r1, r2, #28
 80122a6:	bf44      	itt	mi
 80122a8:	232b      	movmi	r3, #43	; 0x2b
 80122aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80122ae:	f89a 3000 	ldrb.w	r3, [sl]
 80122b2:	2b2a      	cmp	r3, #42	; 0x2a
 80122b4:	d015      	beq.n	80122e2 <_svfiprintf_r+0xf6>
 80122b6:	9a07      	ldr	r2, [sp, #28]
 80122b8:	4654      	mov	r4, sl
 80122ba:	2000      	movs	r0, #0
 80122bc:	f04f 0c0a 	mov.w	ip, #10
 80122c0:	4621      	mov	r1, r4
 80122c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80122c6:	3b30      	subs	r3, #48	; 0x30
 80122c8:	2b09      	cmp	r3, #9
 80122ca:	d94e      	bls.n	801236a <_svfiprintf_r+0x17e>
 80122cc:	b1b0      	cbz	r0, 80122fc <_svfiprintf_r+0x110>
 80122ce:	9207      	str	r2, [sp, #28]
 80122d0:	e014      	b.n	80122fc <_svfiprintf_r+0x110>
 80122d2:	eba0 0308 	sub.w	r3, r0, r8
 80122d6:	fa09 f303 	lsl.w	r3, r9, r3
 80122da:	4313      	orrs	r3, r2
 80122dc:	9304      	str	r3, [sp, #16]
 80122de:	46a2      	mov	sl, r4
 80122e0:	e7d2      	b.n	8012288 <_svfiprintf_r+0x9c>
 80122e2:	9b03      	ldr	r3, [sp, #12]
 80122e4:	1d19      	adds	r1, r3, #4
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	9103      	str	r1, [sp, #12]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	bfbb      	ittet	lt
 80122ee:	425b      	neglt	r3, r3
 80122f0:	f042 0202 	orrlt.w	r2, r2, #2
 80122f4:	9307      	strge	r3, [sp, #28]
 80122f6:	9307      	strlt	r3, [sp, #28]
 80122f8:	bfb8      	it	lt
 80122fa:	9204      	strlt	r2, [sp, #16]
 80122fc:	7823      	ldrb	r3, [r4, #0]
 80122fe:	2b2e      	cmp	r3, #46	; 0x2e
 8012300:	d10c      	bne.n	801231c <_svfiprintf_r+0x130>
 8012302:	7863      	ldrb	r3, [r4, #1]
 8012304:	2b2a      	cmp	r3, #42	; 0x2a
 8012306:	d135      	bne.n	8012374 <_svfiprintf_r+0x188>
 8012308:	9b03      	ldr	r3, [sp, #12]
 801230a:	1d1a      	adds	r2, r3, #4
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	9203      	str	r2, [sp, #12]
 8012310:	2b00      	cmp	r3, #0
 8012312:	bfb8      	it	lt
 8012314:	f04f 33ff 	movlt.w	r3, #4294967295
 8012318:	3402      	adds	r4, #2
 801231a:	9305      	str	r3, [sp, #20]
 801231c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80123e8 <_svfiprintf_r+0x1fc>
 8012320:	7821      	ldrb	r1, [r4, #0]
 8012322:	2203      	movs	r2, #3
 8012324:	4650      	mov	r0, sl
 8012326:	f7ed ff5b 	bl	80001e0 <memchr>
 801232a:	b140      	cbz	r0, 801233e <_svfiprintf_r+0x152>
 801232c:	2340      	movs	r3, #64	; 0x40
 801232e:	eba0 000a 	sub.w	r0, r0, sl
 8012332:	fa03 f000 	lsl.w	r0, r3, r0
 8012336:	9b04      	ldr	r3, [sp, #16]
 8012338:	4303      	orrs	r3, r0
 801233a:	3401      	adds	r4, #1
 801233c:	9304      	str	r3, [sp, #16]
 801233e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012342:	4826      	ldr	r0, [pc, #152]	; (80123dc <_svfiprintf_r+0x1f0>)
 8012344:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012348:	2206      	movs	r2, #6
 801234a:	f7ed ff49 	bl	80001e0 <memchr>
 801234e:	2800      	cmp	r0, #0
 8012350:	d038      	beq.n	80123c4 <_svfiprintf_r+0x1d8>
 8012352:	4b23      	ldr	r3, [pc, #140]	; (80123e0 <_svfiprintf_r+0x1f4>)
 8012354:	bb1b      	cbnz	r3, 801239e <_svfiprintf_r+0x1b2>
 8012356:	9b03      	ldr	r3, [sp, #12]
 8012358:	3307      	adds	r3, #7
 801235a:	f023 0307 	bic.w	r3, r3, #7
 801235e:	3308      	adds	r3, #8
 8012360:	9303      	str	r3, [sp, #12]
 8012362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012364:	4433      	add	r3, r6
 8012366:	9309      	str	r3, [sp, #36]	; 0x24
 8012368:	e767      	b.n	801223a <_svfiprintf_r+0x4e>
 801236a:	fb0c 3202 	mla	r2, ip, r2, r3
 801236e:	460c      	mov	r4, r1
 8012370:	2001      	movs	r0, #1
 8012372:	e7a5      	b.n	80122c0 <_svfiprintf_r+0xd4>
 8012374:	2300      	movs	r3, #0
 8012376:	3401      	adds	r4, #1
 8012378:	9305      	str	r3, [sp, #20]
 801237a:	4619      	mov	r1, r3
 801237c:	f04f 0c0a 	mov.w	ip, #10
 8012380:	4620      	mov	r0, r4
 8012382:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012386:	3a30      	subs	r2, #48	; 0x30
 8012388:	2a09      	cmp	r2, #9
 801238a:	d903      	bls.n	8012394 <_svfiprintf_r+0x1a8>
 801238c:	2b00      	cmp	r3, #0
 801238e:	d0c5      	beq.n	801231c <_svfiprintf_r+0x130>
 8012390:	9105      	str	r1, [sp, #20]
 8012392:	e7c3      	b.n	801231c <_svfiprintf_r+0x130>
 8012394:	fb0c 2101 	mla	r1, ip, r1, r2
 8012398:	4604      	mov	r4, r0
 801239a:	2301      	movs	r3, #1
 801239c:	e7f0      	b.n	8012380 <_svfiprintf_r+0x194>
 801239e:	ab03      	add	r3, sp, #12
 80123a0:	9300      	str	r3, [sp, #0]
 80123a2:	462a      	mov	r2, r5
 80123a4:	4b0f      	ldr	r3, [pc, #60]	; (80123e4 <_svfiprintf_r+0x1f8>)
 80123a6:	a904      	add	r1, sp, #16
 80123a8:	4638      	mov	r0, r7
 80123aa:	f7fd fc31 	bl	800fc10 <_printf_float>
 80123ae:	1c42      	adds	r2, r0, #1
 80123b0:	4606      	mov	r6, r0
 80123b2:	d1d6      	bne.n	8012362 <_svfiprintf_r+0x176>
 80123b4:	89ab      	ldrh	r3, [r5, #12]
 80123b6:	065b      	lsls	r3, r3, #25
 80123b8:	f53f af2c 	bmi.w	8012214 <_svfiprintf_r+0x28>
 80123bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80123be:	b01d      	add	sp, #116	; 0x74
 80123c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123c4:	ab03      	add	r3, sp, #12
 80123c6:	9300      	str	r3, [sp, #0]
 80123c8:	462a      	mov	r2, r5
 80123ca:	4b06      	ldr	r3, [pc, #24]	; (80123e4 <_svfiprintf_r+0x1f8>)
 80123cc:	a904      	add	r1, sp, #16
 80123ce:	4638      	mov	r0, r7
 80123d0:	f7fd fec2 	bl	8010158 <_printf_i>
 80123d4:	e7eb      	b.n	80123ae <_svfiprintf_r+0x1c2>
 80123d6:	bf00      	nop
 80123d8:	08013974 	.word	0x08013974
 80123dc:	0801397e 	.word	0x0801397e
 80123e0:	0800fc11 	.word	0x0800fc11
 80123e4:	08012135 	.word	0x08012135
 80123e8:	0801397a 	.word	0x0801397a

080123ec <__sfputc_r>:
 80123ec:	6893      	ldr	r3, [r2, #8]
 80123ee:	3b01      	subs	r3, #1
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	b410      	push	{r4}
 80123f4:	6093      	str	r3, [r2, #8]
 80123f6:	da08      	bge.n	801240a <__sfputc_r+0x1e>
 80123f8:	6994      	ldr	r4, [r2, #24]
 80123fa:	42a3      	cmp	r3, r4
 80123fc:	db01      	blt.n	8012402 <__sfputc_r+0x16>
 80123fe:	290a      	cmp	r1, #10
 8012400:	d103      	bne.n	801240a <__sfputc_r+0x1e>
 8012402:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012406:	f7fe ba53 	b.w	80108b0 <__swbuf_r>
 801240a:	6813      	ldr	r3, [r2, #0]
 801240c:	1c58      	adds	r0, r3, #1
 801240e:	6010      	str	r0, [r2, #0]
 8012410:	7019      	strb	r1, [r3, #0]
 8012412:	4608      	mov	r0, r1
 8012414:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012418:	4770      	bx	lr

0801241a <__sfputs_r>:
 801241a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801241c:	4606      	mov	r6, r0
 801241e:	460f      	mov	r7, r1
 8012420:	4614      	mov	r4, r2
 8012422:	18d5      	adds	r5, r2, r3
 8012424:	42ac      	cmp	r4, r5
 8012426:	d101      	bne.n	801242c <__sfputs_r+0x12>
 8012428:	2000      	movs	r0, #0
 801242a:	e007      	b.n	801243c <__sfputs_r+0x22>
 801242c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012430:	463a      	mov	r2, r7
 8012432:	4630      	mov	r0, r6
 8012434:	f7ff ffda 	bl	80123ec <__sfputc_r>
 8012438:	1c43      	adds	r3, r0, #1
 801243a:	d1f3      	bne.n	8012424 <__sfputs_r+0xa>
 801243c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012440 <_vfiprintf_r>:
 8012440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012444:	460d      	mov	r5, r1
 8012446:	b09d      	sub	sp, #116	; 0x74
 8012448:	4614      	mov	r4, r2
 801244a:	4698      	mov	r8, r3
 801244c:	4606      	mov	r6, r0
 801244e:	b118      	cbz	r0, 8012458 <_vfiprintf_r+0x18>
 8012450:	6983      	ldr	r3, [r0, #24]
 8012452:	b90b      	cbnz	r3, 8012458 <_vfiprintf_r+0x18>
 8012454:	f7fd f97c 	bl	800f750 <__sinit>
 8012458:	4b89      	ldr	r3, [pc, #548]	; (8012680 <_vfiprintf_r+0x240>)
 801245a:	429d      	cmp	r5, r3
 801245c:	d11b      	bne.n	8012496 <_vfiprintf_r+0x56>
 801245e:	6875      	ldr	r5, [r6, #4]
 8012460:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012462:	07d9      	lsls	r1, r3, #31
 8012464:	d405      	bmi.n	8012472 <_vfiprintf_r+0x32>
 8012466:	89ab      	ldrh	r3, [r5, #12]
 8012468:	059a      	lsls	r2, r3, #22
 801246a:	d402      	bmi.n	8012472 <_vfiprintf_r+0x32>
 801246c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801246e:	f7f3 f96f 	bl	8005750 <__retarget_lock_acquire_recursive>
 8012472:	89ab      	ldrh	r3, [r5, #12]
 8012474:	071b      	lsls	r3, r3, #28
 8012476:	d501      	bpl.n	801247c <_vfiprintf_r+0x3c>
 8012478:	692b      	ldr	r3, [r5, #16]
 801247a:	b9eb      	cbnz	r3, 80124b8 <_vfiprintf_r+0x78>
 801247c:	4629      	mov	r1, r5
 801247e:	4630      	mov	r0, r6
 8012480:	f7fe fa7a 	bl	8010978 <__swsetup_r>
 8012484:	b1c0      	cbz	r0, 80124b8 <_vfiprintf_r+0x78>
 8012486:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012488:	07dc      	lsls	r4, r3, #31
 801248a:	d50e      	bpl.n	80124aa <_vfiprintf_r+0x6a>
 801248c:	f04f 30ff 	mov.w	r0, #4294967295
 8012490:	b01d      	add	sp, #116	; 0x74
 8012492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012496:	4b7b      	ldr	r3, [pc, #492]	; (8012684 <_vfiprintf_r+0x244>)
 8012498:	429d      	cmp	r5, r3
 801249a:	d101      	bne.n	80124a0 <_vfiprintf_r+0x60>
 801249c:	68b5      	ldr	r5, [r6, #8]
 801249e:	e7df      	b.n	8012460 <_vfiprintf_r+0x20>
 80124a0:	4b79      	ldr	r3, [pc, #484]	; (8012688 <_vfiprintf_r+0x248>)
 80124a2:	429d      	cmp	r5, r3
 80124a4:	bf08      	it	eq
 80124a6:	68f5      	ldreq	r5, [r6, #12]
 80124a8:	e7da      	b.n	8012460 <_vfiprintf_r+0x20>
 80124aa:	89ab      	ldrh	r3, [r5, #12]
 80124ac:	0598      	lsls	r0, r3, #22
 80124ae:	d4ed      	bmi.n	801248c <_vfiprintf_r+0x4c>
 80124b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80124b2:	f7f3 f961 	bl	8005778 <__retarget_lock_release_recursive>
 80124b6:	e7e9      	b.n	801248c <_vfiprintf_r+0x4c>
 80124b8:	2300      	movs	r3, #0
 80124ba:	9309      	str	r3, [sp, #36]	; 0x24
 80124bc:	2320      	movs	r3, #32
 80124be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80124c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80124c6:	2330      	movs	r3, #48	; 0x30
 80124c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801268c <_vfiprintf_r+0x24c>
 80124cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80124d0:	f04f 0901 	mov.w	r9, #1
 80124d4:	4623      	mov	r3, r4
 80124d6:	469a      	mov	sl, r3
 80124d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80124dc:	b10a      	cbz	r2, 80124e2 <_vfiprintf_r+0xa2>
 80124de:	2a25      	cmp	r2, #37	; 0x25
 80124e0:	d1f9      	bne.n	80124d6 <_vfiprintf_r+0x96>
 80124e2:	ebba 0b04 	subs.w	fp, sl, r4
 80124e6:	d00b      	beq.n	8012500 <_vfiprintf_r+0xc0>
 80124e8:	465b      	mov	r3, fp
 80124ea:	4622      	mov	r2, r4
 80124ec:	4629      	mov	r1, r5
 80124ee:	4630      	mov	r0, r6
 80124f0:	f7ff ff93 	bl	801241a <__sfputs_r>
 80124f4:	3001      	adds	r0, #1
 80124f6:	f000 80aa 	beq.w	801264e <_vfiprintf_r+0x20e>
 80124fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80124fc:	445a      	add	r2, fp
 80124fe:	9209      	str	r2, [sp, #36]	; 0x24
 8012500:	f89a 3000 	ldrb.w	r3, [sl]
 8012504:	2b00      	cmp	r3, #0
 8012506:	f000 80a2 	beq.w	801264e <_vfiprintf_r+0x20e>
 801250a:	2300      	movs	r3, #0
 801250c:	f04f 32ff 	mov.w	r2, #4294967295
 8012510:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012514:	f10a 0a01 	add.w	sl, sl, #1
 8012518:	9304      	str	r3, [sp, #16]
 801251a:	9307      	str	r3, [sp, #28]
 801251c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012520:	931a      	str	r3, [sp, #104]	; 0x68
 8012522:	4654      	mov	r4, sl
 8012524:	2205      	movs	r2, #5
 8012526:	f814 1b01 	ldrb.w	r1, [r4], #1
 801252a:	4858      	ldr	r0, [pc, #352]	; (801268c <_vfiprintf_r+0x24c>)
 801252c:	f7ed fe58 	bl	80001e0 <memchr>
 8012530:	9a04      	ldr	r2, [sp, #16]
 8012532:	b9d8      	cbnz	r0, 801256c <_vfiprintf_r+0x12c>
 8012534:	06d1      	lsls	r1, r2, #27
 8012536:	bf44      	itt	mi
 8012538:	2320      	movmi	r3, #32
 801253a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801253e:	0713      	lsls	r3, r2, #28
 8012540:	bf44      	itt	mi
 8012542:	232b      	movmi	r3, #43	; 0x2b
 8012544:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012548:	f89a 3000 	ldrb.w	r3, [sl]
 801254c:	2b2a      	cmp	r3, #42	; 0x2a
 801254e:	d015      	beq.n	801257c <_vfiprintf_r+0x13c>
 8012550:	9a07      	ldr	r2, [sp, #28]
 8012552:	4654      	mov	r4, sl
 8012554:	2000      	movs	r0, #0
 8012556:	f04f 0c0a 	mov.w	ip, #10
 801255a:	4621      	mov	r1, r4
 801255c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012560:	3b30      	subs	r3, #48	; 0x30
 8012562:	2b09      	cmp	r3, #9
 8012564:	d94e      	bls.n	8012604 <_vfiprintf_r+0x1c4>
 8012566:	b1b0      	cbz	r0, 8012596 <_vfiprintf_r+0x156>
 8012568:	9207      	str	r2, [sp, #28]
 801256a:	e014      	b.n	8012596 <_vfiprintf_r+0x156>
 801256c:	eba0 0308 	sub.w	r3, r0, r8
 8012570:	fa09 f303 	lsl.w	r3, r9, r3
 8012574:	4313      	orrs	r3, r2
 8012576:	9304      	str	r3, [sp, #16]
 8012578:	46a2      	mov	sl, r4
 801257a:	e7d2      	b.n	8012522 <_vfiprintf_r+0xe2>
 801257c:	9b03      	ldr	r3, [sp, #12]
 801257e:	1d19      	adds	r1, r3, #4
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	9103      	str	r1, [sp, #12]
 8012584:	2b00      	cmp	r3, #0
 8012586:	bfbb      	ittet	lt
 8012588:	425b      	neglt	r3, r3
 801258a:	f042 0202 	orrlt.w	r2, r2, #2
 801258e:	9307      	strge	r3, [sp, #28]
 8012590:	9307      	strlt	r3, [sp, #28]
 8012592:	bfb8      	it	lt
 8012594:	9204      	strlt	r2, [sp, #16]
 8012596:	7823      	ldrb	r3, [r4, #0]
 8012598:	2b2e      	cmp	r3, #46	; 0x2e
 801259a:	d10c      	bne.n	80125b6 <_vfiprintf_r+0x176>
 801259c:	7863      	ldrb	r3, [r4, #1]
 801259e:	2b2a      	cmp	r3, #42	; 0x2a
 80125a0:	d135      	bne.n	801260e <_vfiprintf_r+0x1ce>
 80125a2:	9b03      	ldr	r3, [sp, #12]
 80125a4:	1d1a      	adds	r2, r3, #4
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	9203      	str	r2, [sp, #12]
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	bfb8      	it	lt
 80125ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80125b2:	3402      	adds	r4, #2
 80125b4:	9305      	str	r3, [sp, #20]
 80125b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801269c <_vfiprintf_r+0x25c>
 80125ba:	7821      	ldrb	r1, [r4, #0]
 80125bc:	2203      	movs	r2, #3
 80125be:	4650      	mov	r0, sl
 80125c0:	f7ed fe0e 	bl	80001e0 <memchr>
 80125c4:	b140      	cbz	r0, 80125d8 <_vfiprintf_r+0x198>
 80125c6:	2340      	movs	r3, #64	; 0x40
 80125c8:	eba0 000a 	sub.w	r0, r0, sl
 80125cc:	fa03 f000 	lsl.w	r0, r3, r0
 80125d0:	9b04      	ldr	r3, [sp, #16]
 80125d2:	4303      	orrs	r3, r0
 80125d4:	3401      	adds	r4, #1
 80125d6:	9304      	str	r3, [sp, #16]
 80125d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80125dc:	482c      	ldr	r0, [pc, #176]	; (8012690 <_vfiprintf_r+0x250>)
 80125de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80125e2:	2206      	movs	r2, #6
 80125e4:	f7ed fdfc 	bl	80001e0 <memchr>
 80125e8:	2800      	cmp	r0, #0
 80125ea:	d03f      	beq.n	801266c <_vfiprintf_r+0x22c>
 80125ec:	4b29      	ldr	r3, [pc, #164]	; (8012694 <_vfiprintf_r+0x254>)
 80125ee:	bb1b      	cbnz	r3, 8012638 <_vfiprintf_r+0x1f8>
 80125f0:	9b03      	ldr	r3, [sp, #12]
 80125f2:	3307      	adds	r3, #7
 80125f4:	f023 0307 	bic.w	r3, r3, #7
 80125f8:	3308      	adds	r3, #8
 80125fa:	9303      	str	r3, [sp, #12]
 80125fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125fe:	443b      	add	r3, r7
 8012600:	9309      	str	r3, [sp, #36]	; 0x24
 8012602:	e767      	b.n	80124d4 <_vfiprintf_r+0x94>
 8012604:	fb0c 3202 	mla	r2, ip, r2, r3
 8012608:	460c      	mov	r4, r1
 801260a:	2001      	movs	r0, #1
 801260c:	e7a5      	b.n	801255a <_vfiprintf_r+0x11a>
 801260e:	2300      	movs	r3, #0
 8012610:	3401      	adds	r4, #1
 8012612:	9305      	str	r3, [sp, #20]
 8012614:	4619      	mov	r1, r3
 8012616:	f04f 0c0a 	mov.w	ip, #10
 801261a:	4620      	mov	r0, r4
 801261c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012620:	3a30      	subs	r2, #48	; 0x30
 8012622:	2a09      	cmp	r2, #9
 8012624:	d903      	bls.n	801262e <_vfiprintf_r+0x1ee>
 8012626:	2b00      	cmp	r3, #0
 8012628:	d0c5      	beq.n	80125b6 <_vfiprintf_r+0x176>
 801262a:	9105      	str	r1, [sp, #20]
 801262c:	e7c3      	b.n	80125b6 <_vfiprintf_r+0x176>
 801262e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012632:	4604      	mov	r4, r0
 8012634:	2301      	movs	r3, #1
 8012636:	e7f0      	b.n	801261a <_vfiprintf_r+0x1da>
 8012638:	ab03      	add	r3, sp, #12
 801263a:	9300      	str	r3, [sp, #0]
 801263c:	462a      	mov	r2, r5
 801263e:	4b16      	ldr	r3, [pc, #88]	; (8012698 <_vfiprintf_r+0x258>)
 8012640:	a904      	add	r1, sp, #16
 8012642:	4630      	mov	r0, r6
 8012644:	f7fd fae4 	bl	800fc10 <_printf_float>
 8012648:	4607      	mov	r7, r0
 801264a:	1c78      	adds	r0, r7, #1
 801264c:	d1d6      	bne.n	80125fc <_vfiprintf_r+0x1bc>
 801264e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012650:	07d9      	lsls	r1, r3, #31
 8012652:	d405      	bmi.n	8012660 <_vfiprintf_r+0x220>
 8012654:	89ab      	ldrh	r3, [r5, #12]
 8012656:	059a      	lsls	r2, r3, #22
 8012658:	d402      	bmi.n	8012660 <_vfiprintf_r+0x220>
 801265a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801265c:	f7f3 f88c 	bl	8005778 <__retarget_lock_release_recursive>
 8012660:	89ab      	ldrh	r3, [r5, #12]
 8012662:	065b      	lsls	r3, r3, #25
 8012664:	f53f af12 	bmi.w	801248c <_vfiprintf_r+0x4c>
 8012668:	9809      	ldr	r0, [sp, #36]	; 0x24
 801266a:	e711      	b.n	8012490 <_vfiprintf_r+0x50>
 801266c:	ab03      	add	r3, sp, #12
 801266e:	9300      	str	r3, [sp, #0]
 8012670:	462a      	mov	r2, r5
 8012672:	4b09      	ldr	r3, [pc, #36]	; (8012698 <_vfiprintf_r+0x258>)
 8012674:	a904      	add	r1, sp, #16
 8012676:	4630      	mov	r0, r6
 8012678:	f7fd fd6e 	bl	8010158 <_printf_i>
 801267c:	e7e4      	b.n	8012648 <_vfiprintf_r+0x208>
 801267e:	bf00      	nop
 8012680:	08013610 	.word	0x08013610
 8012684:	08013630 	.word	0x08013630
 8012688:	080135f0 	.word	0x080135f0
 801268c:	08013974 	.word	0x08013974
 8012690:	0801397e 	.word	0x0801397e
 8012694:	0800fc11 	.word	0x0800fc11
 8012698:	0801241b 	.word	0x0801241b
 801269c:	0801397a 	.word	0x0801397a

080126a0 <_putc_r>:
 80126a0:	b570      	push	{r4, r5, r6, lr}
 80126a2:	460d      	mov	r5, r1
 80126a4:	4614      	mov	r4, r2
 80126a6:	4606      	mov	r6, r0
 80126a8:	b118      	cbz	r0, 80126b2 <_putc_r+0x12>
 80126aa:	6983      	ldr	r3, [r0, #24]
 80126ac:	b90b      	cbnz	r3, 80126b2 <_putc_r+0x12>
 80126ae:	f7fd f84f 	bl	800f750 <__sinit>
 80126b2:	4b1c      	ldr	r3, [pc, #112]	; (8012724 <_putc_r+0x84>)
 80126b4:	429c      	cmp	r4, r3
 80126b6:	d124      	bne.n	8012702 <_putc_r+0x62>
 80126b8:	6874      	ldr	r4, [r6, #4]
 80126ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80126bc:	07d8      	lsls	r0, r3, #31
 80126be:	d405      	bmi.n	80126cc <_putc_r+0x2c>
 80126c0:	89a3      	ldrh	r3, [r4, #12]
 80126c2:	0599      	lsls	r1, r3, #22
 80126c4:	d402      	bmi.n	80126cc <_putc_r+0x2c>
 80126c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80126c8:	f7f3 f842 	bl	8005750 <__retarget_lock_acquire_recursive>
 80126cc:	68a3      	ldr	r3, [r4, #8]
 80126ce:	3b01      	subs	r3, #1
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	60a3      	str	r3, [r4, #8]
 80126d4:	da05      	bge.n	80126e2 <_putc_r+0x42>
 80126d6:	69a2      	ldr	r2, [r4, #24]
 80126d8:	4293      	cmp	r3, r2
 80126da:	db1c      	blt.n	8012716 <_putc_r+0x76>
 80126dc:	b2eb      	uxtb	r3, r5
 80126de:	2b0a      	cmp	r3, #10
 80126e0:	d019      	beq.n	8012716 <_putc_r+0x76>
 80126e2:	6823      	ldr	r3, [r4, #0]
 80126e4:	1c5a      	adds	r2, r3, #1
 80126e6:	6022      	str	r2, [r4, #0]
 80126e8:	701d      	strb	r5, [r3, #0]
 80126ea:	b2ed      	uxtb	r5, r5
 80126ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80126ee:	07da      	lsls	r2, r3, #31
 80126f0:	d405      	bmi.n	80126fe <_putc_r+0x5e>
 80126f2:	89a3      	ldrh	r3, [r4, #12]
 80126f4:	059b      	lsls	r3, r3, #22
 80126f6:	d402      	bmi.n	80126fe <_putc_r+0x5e>
 80126f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80126fa:	f7f3 f83d 	bl	8005778 <__retarget_lock_release_recursive>
 80126fe:	4628      	mov	r0, r5
 8012700:	bd70      	pop	{r4, r5, r6, pc}
 8012702:	4b09      	ldr	r3, [pc, #36]	; (8012728 <_putc_r+0x88>)
 8012704:	429c      	cmp	r4, r3
 8012706:	d101      	bne.n	801270c <_putc_r+0x6c>
 8012708:	68b4      	ldr	r4, [r6, #8]
 801270a:	e7d6      	b.n	80126ba <_putc_r+0x1a>
 801270c:	4b07      	ldr	r3, [pc, #28]	; (801272c <_putc_r+0x8c>)
 801270e:	429c      	cmp	r4, r3
 8012710:	bf08      	it	eq
 8012712:	68f4      	ldreq	r4, [r6, #12]
 8012714:	e7d1      	b.n	80126ba <_putc_r+0x1a>
 8012716:	4629      	mov	r1, r5
 8012718:	4622      	mov	r2, r4
 801271a:	4630      	mov	r0, r6
 801271c:	f7fe f8c8 	bl	80108b0 <__swbuf_r>
 8012720:	4605      	mov	r5, r0
 8012722:	e7e3      	b.n	80126ec <_putc_r+0x4c>
 8012724:	08013610 	.word	0x08013610
 8012728:	08013630 	.word	0x08013630
 801272c:	080135f0 	.word	0x080135f0

08012730 <_read_r>:
 8012730:	b538      	push	{r3, r4, r5, lr}
 8012732:	4d07      	ldr	r5, [pc, #28]	; (8012750 <_read_r+0x20>)
 8012734:	4604      	mov	r4, r0
 8012736:	4608      	mov	r0, r1
 8012738:	4611      	mov	r1, r2
 801273a:	2200      	movs	r2, #0
 801273c:	602a      	str	r2, [r5, #0]
 801273e:	461a      	mov	r2, r3
 8012740:	f7f2 fe86 	bl	8005450 <_read>
 8012744:	1c43      	adds	r3, r0, #1
 8012746:	d102      	bne.n	801274e <_read_r+0x1e>
 8012748:	682b      	ldr	r3, [r5, #0]
 801274a:	b103      	cbz	r3, 801274e <_read_r+0x1e>
 801274c:	6023      	str	r3, [r4, #0]
 801274e:	bd38      	pop	{r3, r4, r5, pc}
 8012750:	20005c54 	.word	0x20005c54

08012754 <__assert_func>:
 8012754:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012756:	4614      	mov	r4, r2
 8012758:	461a      	mov	r2, r3
 801275a:	4b09      	ldr	r3, [pc, #36]	; (8012780 <__assert_func+0x2c>)
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	4605      	mov	r5, r0
 8012760:	68d8      	ldr	r0, [r3, #12]
 8012762:	b14c      	cbz	r4, 8012778 <__assert_func+0x24>
 8012764:	4b07      	ldr	r3, [pc, #28]	; (8012784 <__assert_func+0x30>)
 8012766:	9100      	str	r1, [sp, #0]
 8012768:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801276c:	4906      	ldr	r1, [pc, #24]	; (8012788 <__assert_func+0x34>)
 801276e:	462b      	mov	r3, r5
 8012770:	f000 f80e 	bl	8012790 <fiprintf>
 8012774:	f7fc ff86 	bl	800f684 <abort>
 8012778:	4b04      	ldr	r3, [pc, #16]	; (801278c <__assert_func+0x38>)
 801277a:	461c      	mov	r4, r3
 801277c:	e7f3      	b.n	8012766 <__assert_func+0x12>
 801277e:	bf00      	nop
 8012780:	2000006c 	.word	0x2000006c
 8012784:	08013985 	.word	0x08013985
 8012788:	08013992 	.word	0x08013992
 801278c:	080139c0 	.word	0x080139c0

08012790 <fiprintf>:
 8012790:	b40e      	push	{r1, r2, r3}
 8012792:	b503      	push	{r0, r1, lr}
 8012794:	4601      	mov	r1, r0
 8012796:	ab03      	add	r3, sp, #12
 8012798:	4805      	ldr	r0, [pc, #20]	; (80127b0 <fiprintf+0x20>)
 801279a:	f853 2b04 	ldr.w	r2, [r3], #4
 801279e:	6800      	ldr	r0, [r0, #0]
 80127a0:	9301      	str	r3, [sp, #4]
 80127a2:	f7ff fe4d 	bl	8012440 <_vfiprintf_r>
 80127a6:	b002      	add	sp, #8
 80127a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80127ac:	b003      	add	sp, #12
 80127ae:	4770      	bx	lr
 80127b0:	2000006c 	.word	0x2000006c

080127b4 <_fstat_r>:
 80127b4:	b538      	push	{r3, r4, r5, lr}
 80127b6:	4d07      	ldr	r5, [pc, #28]	; (80127d4 <_fstat_r+0x20>)
 80127b8:	2300      	movs	r3, #0
 80127ba:	4604      	mov	r4, r0
 80127bc:	4608      	mov	r0, r1
 80127be:	4611      	mov	r1, r2
 80127c0:	602b      	str	r3, [r5, #0]
 80127c2:	f7f2 fe8a 	bl	80054da <_fstat>
 80127c6:	1c43      	adds	r3, r0, #1
 80127c8:	d102      	bne.n	80127d0 <_fstat_r+0x1c>
 80127ca:	682b      	ldr	r3, [r5, #0]
 80127cc:	b103      	cbz	r3, 80127d0 <_fstat_r+0x1c>
 80127ce:	6023      	str	r3, [r4, #0]
 80127d0:	bd38      	pop	{r3, r4, r5, pc}
 80127d2:	bf00      	nop
 80127d4:	20005c54 	.word	0x20005c54

080127d8 <_isatty_r>:
 80127d8:	b538      	push	{r3, r4, r5, lr}
 80127da:	4d06      	ldr	r5, [pc, #24]	; (80127f4 <_isatty_r+0x1c>)
 80127dc:	2300      	movs	r3, #0
 80127de:	4604      	mov	r4, r0
 80127e0:	4608      	mov	r0, r1
 80127e2:	602b      	str	r3, [r5, #0]
 80127e4:	f7f2 fe89 	bl	80054fa <_isatty>
 80127e8:	1c43      	adds	r3, r0, #1
 80127ea:	d102      	bne.n	80127f2 <_isatty_r+0x1a>
 80127ec:	682b      	ldr	r3, [r5, #0]
 80127ee:	b103      	cbz	r3, 80127f2 <_isatty_r+0x1a>
 80127f0:	6023      	str	r3, [r4, #0]
 80127f2:	bd38      	pop	{r3, r4, r5, pc}
 80127f4:	20005c54 	.word	0x20005c54

080127f8 <__ascii_mbtowc>:
 80127f8:	b082      	sub	sp, #8
 80127fa:	b901      	cbnz	r1, 80127fe <__ascii_mbtowc+0x6>
 80127fc:	a901      	add	r1, sp, #4
 80127fe:	b142      	cbz	r2, 8012812 <__ascii_mbtowc+0x1a>
 8012800:	b14b      	cbz	r3, 8012816 <__ascii_mbtowc+0x1e>
 8012802:	7813      	ldrb	r3, [r2, #0]
 8012804:	600b      	str	r3, [r1, #0]
 8012806:	7812      	ldrb	r2, [r2, #0]
 8012808:	1e10      	subs	r0, r2, #0
 801280a:	bf18      	it	ne
 801280c:	2001      	movne	r0, #1
 801280e:	b002      	add	sp, #8
 8012810:	4770      	bx	lr
 8012812:	4610      	mov	r0, r2
 8012814:	e7fb      	b.n	801280e <__ascii_mbtowc+0x16>
 8012816:	f06f 0001 	mvn.w	r0, #1
 801281a:	e7f8      	b.n	801280e <__ascii_mbtowc+0x16>

0801281c <memmove>:
 801281c:	4288      	cmp	r0, r1
 801281e:	b510      	push	{r4, lr}
 8012820:	eb01 0402 	add.w	r4, r1, r2
 8012824:	d902      	bls.n	801282c <memmove+0x10>
 8012826:	4284      	cmp	r4, r0
 8012828:	4623      	mov	r3, r4
 801282a:	d807      	bhi.n	801283c <memmove+0x20>
 801282c:	1e43      	subs	r3, r0, #1
 801282e:	42a1      	cmp	r1, r4
 8012830:	d008      	beq.n	8012844 <memmove+0x28>
 8012832:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012836:	f803 2f01 	strb.w	r2, [r3, #1]!
 801283a:	e7f8      	b.n	801282e <memmove+0x12>
 801283c:	4402      	add	r2, r0
 801283e:	4601      	mov	r1, r0
 8012840:	428a      	cmp	r2, r1
 8012842:	d100      	bne.n	8012846 <memmove+0x2a>
 8012844:	bd10      	pop	{r4, pc}
 8012846:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801284a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801284e:	e7f7      	b.n	8012840 <memmove+0x24>

08012850 <_realloc_r>:
 8012850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012854:	4680      	mov	r8, r0
 8012856:	4614      	mov	r4, r2
 8012858:	460e      	mov	r6, r1
 801285a:	b921      	cbnz	r1, 8012866 <_realloc_r+0x16>
 801285c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012860:	4611      	mov	r1, r2
 8012862:	f7fd b8c1 	b.w	800f9e8 <_malloc_r>
 8012866:	b92a      	cbnz	r2, 8012874 <_realloc_r+0x24>
 8012868:	f7fd f852 	bl	800f910 <_free_r>
 801286c:	4625      	mov	r5, r4
 801286e:	4628      	mov	r0, r5
 8012870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012874:	f000 f828 	bl	80128c8 <_malloc_usable_size_r>
 8012878:	4284      	cmp	r4, r0
 801287a:	4607      	mov	r7, r0
 801287c:	d802      	bhi.n	8012884 <_realloc_r+0x34>
 801287e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012882:	d812      	bhi.n	80128aa <_realloc_r+0x5a>
 8012884:	4621      	mov	r1, r4
 8012886:	4640      	mov	r0, r8
 8012888:	f7fd f8ae 	bl	800f9e8 <_malloc_r>
 801288c:	4605      	mov	r5, r0
 801288e:	2800      	cmp	r0, #0
 8012890:	d0ed      	beq.n	801286e <_realloc_r+0x1e>
 8012892:	42bc      	cmp	r4, r7
 8012894:	4622      	mov	r2, r4
 8012896:	4631      	mov	r1, r6
 8012898:	bf28      	it	cs
 801289a:	463a      	movcs	r2, r7
 801289c:	f7fd f822 	bl	800f8e4 <memcpy>
 80128a0:	4631      	mov	r1, r6
 80128a2:	4640      	mov	r0, r8
 80128a4:	f7fd f834 	bl	800f910 <_free_r>
 80128a8:	e7e1      	b.n	801286e <_realloc_r+0x1e>
 80128aa:	4635      	mov	r5, r6
 80128ac:	e7df      	b.n	801286e <_realloc_r+0x1e>

080128ae <__ascii_wctomb>:
 80128ae:	b149      	cbz	r1, 80128c4 <__ascii_wctomb+0x16>
 80128b0:	2aff      	cmp	r2, #255	; 0xff
 80128b2:	bf85      	ittet	hi
 80128b4:	238a      	movhi	r3, #138	; 0x8a
 80128b6:	6003      	strhi	r3, [r0, #0]
 80128b8:	700a      	strbls	r2, [r1, #0]
 80128ba:	f04f 30ff 	movhi.w	r0, #4294967295
 80128be:	bf98      	it	ls
 80128c0:	2001      	movls	r0, #1
 80128c2:	4770      	bx	lr
 80128c4:	4608      	mov	r0, r1
 80128c6:	4770      	bx	lr

080128c8 <_malloc_usable_size_r>:
 80128c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80128cc:	1f18      	subs	r0, r3, #4
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	bfbc      	itt	lt
 80128d2:	580b      	ldrlt	r3, [r1, r0]
 80128d4:	18c0      	addlt	r0, r0, r3
 80128d6:	4770      	bx	lr

080128d8 <_init>:
 80128d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128da:	bf00      	nop
 80128dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80128de:	bc08      	pop	{r3}
 80128e0:	469e      	mov	lr, r3
 80128e2:	4770      	bx	lr

080128e4 <_fini>:
 80128e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128e6:	bf00      	nop
 80128e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80128ea:	bc08      	pop	{r3}
 80128ec:	469e      	mov	lr, r3
 80128ee:	4770      	bx	lr

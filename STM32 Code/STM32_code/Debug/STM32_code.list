
STM32_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e948  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  0800ead8  0800ead8  0001ead8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f02c  0800f02c  00020238  2**0
                  CONTENTS
  4 .ARM          00000008  0800f02c  0800f02c  0001f02c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f034  0800f034  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f034  0800f034  0001f034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800f03c  0800f03c  0001f03c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  0800f044  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020238  2**0
                  CONTENTS
 10 .bss          0000540c  20000238  20000238  00020238  2**2
                  ALLOC
 11 ._user_heap_stack 00000c04  20005644  20005644  00020238  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 13 .debug_info   000275a9  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c8a  00000000  00000000  00047811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ab8  00000000  00000000  0004c4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001950  00000000  00000000  0004df58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029a3f  00000000  00000000  0004f8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002037a  00000000  00000000  000792e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e014f  00000000  00000000  00099661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001797b0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000084ac  00000000  00000000  00179800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000238 	.word	0x20000238
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800eac0 	.word	0x0800eac0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000023c 	.word	0x2000023c
 80001cc:	0800eac0 	.word	0x0800eac0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <IMU_Initialise>:
int16_t gyro_offset[3] = { 0 }; // gyro_offset value calibrated by Gyro_calibrate()

/*
 * INITIALISATION
 */
uint8_t* IMU_Initialise(ICM20948 *dev, I2C_HandleTypeDef *i2cHandle) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]

	char hex[2];
	uint8_t regData;

	dev->i2cHandle = i2cHandle;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	601a      	str	r2, [r3, #0]
	 buf[0] = REG_ADD_REG_BANK_SEL;  // bank select register
	 buf[1] = REG_VAL_REG_BANK_0;           // bank 0
	 ret = HAL_I2C_Master_Transmit(i2cHandle, IMU_ADDR, buf, I2C_MEMADD_SIZE_16BIT, 10);

	 */
	ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	217f      	movs	r1, #127	; 0x7f
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f000 f8af 	bl	80010c4 <IMU_WriteOneByte>
 8000f66:	4603      	mov	r3, r0
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b55      	ldr	r3, [pc, #340]	; (80010c0 <IMU_Initialise+0x174>)
 8000f6c:	701a      	strb	r2, [r3, #0]


	//check ID
	/*	  buf[0] = REG_WHO_AM_I;  //(Should return ID =  0xEA)
	 ret = HAL_I2C_Mem_Read(i2cHandle, IMU_ADDR, REG_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, buf, I2C_MEMADD_SIZE_8BIT, 10);  */
	ret = IMU_ReadOneByte(dev, REG_WHO_AM_I, &regData);
 8000f6e:	2100      	movs	r1, #0
 8000f70:	f107 030b 	add.w	r3, r7, #11
 8000f74:	461a      	mov	r2, r3
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f000 f8c0 	bl	80010fc <IMU_ReadOneByte>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	461a      	mov	r2, r3
 8000f80:	4b4f      	ldr	r3, [pc, #316]	; (80010c0 <IMU_Initialise+0x174>)
 8000f82:	701a      	strb	r2, [r3, #0]

	//return &buf[0];

	// Initialize
	// Bank 0 - Reset the device and then auto selects the best available clock source
	ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 8000f84:	2200      	movs	r2, #0
 8000f86:	217f      	movs	r1, #127	; 0x7f
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f000 f89b 	bl	80010c4 <IMU_WriteOneByte>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	461a      	mov	r2, r3
 8000f92:	4b4b      	ldr	r3, [pc, #300]	; (80010c0 <IMU_Initialise+0x174>)
 8000f94:	701a      	strb	r2, [r3, #0]

	ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_1, REG_VAL_ALL_RGE_RESET); // reset device - check hearder file value should be 0xF1
 8000f96:	22f1      	movs	r2, #241	; 0xf1
 8000f98:	2106      	movs	r1, #6
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f000 f892 	bl	80010c4 <IMU_WriteOneByte>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	4b46      	ldr	r3, [pc, #280]	; (80010c0 <IMU_Initialise+0x174>)
 8000fa6:	701a      	strb	r2, [r3, #0]

	osDelay(10);
 8000fa8:	200a      	movs	r0, #10
 8000faa:	f007 fddb 	bl	8008b64 <osDelay>
	ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_1, REG_VAL_RUN_MODE); // auto selects the best available clock source for device
 8000fae:	2201      	movs	r2, #1
 8000fb0:	2106      	movs	r1, #6
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f000 f886 	bl	80010c4 <IMU_WriteOneByte>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4b40      	ldr	r3, [pc, #256]	; (80010c0 <IMU_Initialise+0x174>)
 8000fbe:	701a      	strb	r2, [r3, #0]

	// Turn off and on Accelator and Gyro - page 28
	osDelay(10);
 8000fc0:	200a      	movs	r0, #10
 8000fc2:	f007 fdcf 	bl	8008b64 <osDelay>
	ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_2, REG_VAL_ACCEL_GYROLL_OFF); // OFF
 8000fc6:	223f      	movs	r2, #63	; 0x3f
 8000fc8:	2107      	movs	r1, #7
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f000 f87a 	bl	80010c4 <IMU_WriteOneByte>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4b3a      	ldr	r3, [pc, #232]	; (80010c0 <IMU_Initialise+0x174>)
 8000fd6:	701a      	strb	r2, [r3, #0]

	osDelay(10);
 8000fd8:	200a      	movs	r0, #10
 8000fda:	f007 fdc3 	bl	8008b64 <osDelay>
	ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_2, REG_VAL_ACCEL_GYROLL_ON); // ON
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2107      	movs	r1, #7
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 f86e 	bl	80010c4 <IMU_WriteOneByte>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	461a      	mov	r2, r3
 8000fec:	4b34      	ldr	r3, [pc, #208]	; (80010c0 <IMU_Initialise+0x174>)
 8000fee:	701a      	strb	r2, [r3, #0]

	ret = IMU_WriteOneByte(dev, REG_ADD_INT_ENABLE_1, REG_VAL_INT_ENABLED); // Turn on inteerup on pin INT1
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	2110      	movs	r1, #16
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f000 f865 	bl	80010c4 <IMU_WriteOneByte>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b30      	ldr	r3, [pc, #192]	; (80010c0 <IMU_Initialise+0x174>)
 8001000:	701a      	strb	r2, [r3, #0]

	uint8_t tmp = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	72bb      	strb	r3, [r7, #10]
	IMU_ReadOneByte(dev, REG_ADD_INT_PIN_CFG, &tmp);
 8001006:	f107 030a 	add.w	r3, r7, #10
 800100a:	461a      	mov	r2, r3
 800100c:	210f      	movs	r1, #15
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 f874 	bl	80010fc <IMU_ReadOneByte>
	IMU_WriteOneByte(dev, REG_ADD_INT_PIN_CFG, tmp | 0x02);
 8001014:	7abb      	ldrb	r3, [r7, #10]
 8001016:	f043 0302 	orr.w	r3, r3, #2
 800101a:	b2db      	uxtb	r3, r3
 800101c:	461a      	mov	r2, r3
 800101e:	210f      	movs	r1, #15
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f000 f84f 	bl	80010c4 <IMU_WriteOneByte>

	// Bank 2 - Gyro and Acce and start running
	/* user bank 2 register */
	ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_2);
 8001026:	2220      	movs	r2, #32
 8001028:	217f      	movs	r1, #127	; 0x7f
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f000 f84a 	bl	80010c4 <IMU_WriteOneByte>
 8001030:	4603      	mov	r3, r0
 8001032:	461a      	mov	r2, r3
 8001034:	4b22      	ldr	r3, [pc, #136]	; (80010c0 <IMU_Initialise+0x174>)
 8001036:	701a      	strb	r2, [r3, #0]

	ret = IMU_WriteOneByte(dev, REG_ADD_GYRO_SMPLRT_DIV, 0x40); //
 8001038:	2240      	movs	r2, #64	; 0x40
 800103a:	2100      	movs	r1, #0
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f000 f841 	bl	80010c4 <IMU_WriteOneByte>
 8001042:	4603      	mov	r3, r0
 8001044:	461a      	mov	r2, r3
 8001046:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <IMU_Initialise+0x174>)
 8001048:	701a      	strb	r2, [r3, #0]

	ret = IMU_WriteOneByte(dev, REG_ADD_GYRO_CONFIG_1,
 800104a:	2233      	movs	r2, #51	; 0x33
 800104c:	2101      	movs	r1, #1
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f000 f838 	bl	80010c4 <IMU_WriteOneByte>
 8001054:	4603      	mov	r3, r0
 8001056:	461a      	mov	r2, r3
 8001058:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <IMU_Initialise+0x174>)
 800105a:	701a      	strb	r2, [r3, #0]
			REG_VAL_BIT_GYRO_DLPCFG_6 | REG_VAL_BIT_GYRO_FS_500DPS
					| REG_VAL_BIT_GYRO_DLPF); // enable low pass filter and set Gyro FS


	ret = IMU_WriteOneByte(dev, REG_ADD_ACCEL_SMPLRT_DIV_2, 0x04); //  pg 63 Acce sample rate divider: ODR = 1.125KHz/7 = 161
 800105c:	2204      	movs	r2, #4
 800105e:	2111      	movs	r1, #17
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f000 f82f 	bl	80010c4 <IMU_WriteOneByte>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <IMU_Initialise+0x174>)
 800106c:	701a      	strb	r2, [r3, #0]
	ret = IMU_WriteOneByte(dev, REG_ADD_ACCEL_SMPLRT_DIV_1, 0x00); // upper 3 bit of sample rate = 0
 800106e:	2200      	movs	r2, #0
 8001070:	2110      	movs	r1, #16
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 f826 	bl	80010c4 <IMU_WriteOneByte>
 8001078:	4603      	mov	r3, r0
 800107a:	461a      	mov	r2, r3
 800107c:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <IMU_Initialise+0x174>)
 800107e:	701a      	strb	r2, [r3, #0]

	// enable LPF and set accel full scale to +/-2G, sensitivity scale factor = 16384 LSB/g
	ret = IMU_WriteOneByte(dev, REG_ADD_ACCEL_CONFIG,
 8001080:	2231      	movs	r2, #49	; 0x31
 8001082:	2114      	movs	r1, #20
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 f81d 	bl	80010c4 <IMU_WriteOneByte>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <IMU_Initialise+0x174>)
 8001090:	701a      	strb	r2, [r3, #0]
			REG_VAL_BIT_ACCEL_DLPCFG_6 | REG_VAL_BIT_ACCEL_FS_2g
					| REG_VAL_BIT_ACCEL_DLPF);

	IMU_WriteOneByte(dev, REG_ADD_TEMP_CONFIG, REG_VAL_TEMP_CONFIG); // Temp configuration pg 67
 8001092:	2200      	movs	r2, #0
 8001094:	2153      	movs	r1, #83	; 0x53
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f000 f814 	bl	80010c4 <IMU_WriteOneByte>

	// back to bank 0
	ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 800109c:	2200      	movs	r2, #0
 800109e:	217f      	movs	r1, #127	; 0x7f
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 f80f 	bl	80010c4 <IMU_WriteOneByte>
 80010a6:	4603      	mov	r3, r0
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <IMU_Initialise+0x174>)
 80010ac:	701a      	strb	r2, [r3, #0]

	osDelay(100);
 80010ae:	2064      	movs	r0, #100	; 0x64
 80010b0:	f007 fd58 	bl	8008b64 <osDelay>
	//Gyro_calibrate(dev);  // calibrate the offset of the gyroscope

	// everthing OK
	//strcpy((char*)buf, "Initialize OK\r\n");
	//return &buf;
	return 0; // 0 means 0 error
 80010b4:	2300      	movs	r3, #0

}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000254 	.word	0x20000254

080010c4 <IMU_WriteOneByte>:

HAL_StatusTypeDef IMU_WriteOneByte(ICM20948 *dev, uint8_t reg, uint8_t data) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af04      	add	r7, sp, #16
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	70fb      	strb	r3, [r7, #3]
 80010d0:	4613      	mov	r3, r2
 80010d2:	70bb      	strb	r3, [r7, #2]

	return HAL_I2C_Mem_Write(dev->i2cHandle, IMU_ADDR, reg, 1, &data, 1, 100);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6818      	ldr	r0, [r3, #0]
 80010d8:	23d0      	movs	r3, #208	; 0xd0
 80010da:	b299      	uxth	r1, r3
 80010dc:	78fb      	ldrb	r3, [r7, #3]
 80010de:	b29a      	uxth	r2, r3
 80010e0:	2364      	movs	r3, #100	; 0x64
 80010e2:	9302      	str	r3, [sp, #8]
 80010e4:	2301      	movs	r3, #1
 80010e6:	9301      	str	r3, [sp, #4]
 80010e8:	1cbb      	adds	r3, r7, #2
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	2301      	movs	r3, #1
 80010ee:	f003 fbd3 	bl	8004898 <HAL_I2C_Mem_Write>
 80010f2:	4603      	mov	r3, r0

}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <IMU_ReadOneByte>:

HAL_StatusTypeDef IMU_ReadOneByte(ICM20948 *dev, uint8_t reg, uint8_t *data) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af04      	add	r7, sp, #16
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	460b      	mov	r3, r1
 8001106:	607a      	str	r2, [r7, #4]
 8001108:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read(dev->i2cHandle, IMU_ADDR, reg, 1, data, 1, 100);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	6818      	ldr	r0, [r3, #0]
 800110e:	23d0      	movs	r3, #208	; 0xd0
 8001110:	b299      	uxth	r1, r3
 8001112:	7afb      	ldrb	r3, [r7, #11]
 8001114:	b29a      	uxth	r2, r3
 8001116:	2364      	movs	r3, #100	; 0x64
 8001118:	9302      	str	r3, [sp, #8]
 800111a:	2301      	movs	r3, #1
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2301      	movs	r3, #1
 8001124:	f003 fcb2 	bl	8004a8c <HAL_I2C_Mem_Read>
 8001128:	4603      	mov	r3, r0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <Mag_WriteOneByte>:

HAL_StatusTypeDef Mag_WriteOneByte(ICM20948 *dev, uint8_t reg, uint8_t data) {
 8001132:	b580      	push	{r7, lr}
 8001134:	b086      	sub	sp, #24
 8001136:	af04      	add	r7, sp, #16
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	460b      	mov	r3, r1
 800113c:	70fb      	strb	r3, [r7, #3]
 800113e:	4613      	mov	r3, r2
 8001140:	70bb      	strb	r3, [r7, #2]

	return HAL_I2C_Mem_Write(dev->i2cHandle, MAG_ADDR, reg, 1, &data, 1, 100);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6818      	ldr	r0, [r3, #0]
 8001146:	2318      	movs	r3, #24
 8001148:	b299      	uxth	r1, r3
 800114a:	78fb      	ldrb	r3, [r7, #3]
 800114c:	b29a      	uxth	r2, r3
 800114e:	2364      	movs	r3, #100	; 0x64
 8001150:	9302      	str	r3, [sp, #8]
 8001152:	2301      	movs	r3, #1
 8001154:	9301      	str	r3, [sp, #4]
 8001156:	1cbb      	adds	r3, r7, #2
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	2301      	movs	r3, #1
 800115c:	f003 fb9c 	bl	8004898 <HAL_I2C_Mem_Write>
 8001160:	4603      	mov	r3, r0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <IMU_AccelRead>:
	ret = IMU_ReadOneByte(dev, REG_ADD_TEMP_OUT_H, &u8Buf[1]);
	tempRaw = (u8Buf[1] << 8) | u8Buf[0];
	dev->temp_C = (tempRaw) / 333.81 + 21; // assuming no further offset apart from 21 dec C
}

HAL_StatusTypeDef IMU_AccelRead(ICM20948 *dev) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	uint8_t u8Buf[2] = { 0 }; // reset to zero
 8001174:	2300      	movs	r3, #0
 8001176:	83bb      	strh	r3, [r7, #28]
	int16_t accRaw[3] = { 0 };  // reset to zero
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	809a      	strh	r2, [r3, #4]

	ret = IMU_ReadOneByte(dev, REG_ADD_ACCEL_XOUT_L, &u8Buf[0]);
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	461a      	mov	r2, r3
 8001188:	212e      	movs	r1, #46	; 0x2e
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff ffb6 	bl	80010fc <IMU_ReadOneByte>
 8001190:	4603      	mov	r3, r0
 8001192:	461a      	mov	r2, r3
 8001194:	4b5e      	ldr	r3, [pc, #376]	; (8001310 <IMU_AccelRead+0x1a4>)
 8001196:	701a      	strb	r2, [r3, #0]
	ret = IMU_ReadOneByte(dev, REG_ADD_ACCEL_XOUT_H, &u8Buf[1]);
 8001198:	f107 031c 	add.w	r3, r7, #28
 800119c:	3301      	adds	r3, #1
 800119e:	461a      	mov	r2, r3
 80011a0:	212d      	movs	r1, #45	; 0x2d
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ffaa 	bl	80010fc <IMU_ReadOneByte>
 80011a8:	4603      	mov	r3, r0
 80011aa:	461a      	mov	r2, r3
 80011ac:	4b58      	ldr	r3, [pc, #352]	; (8001310 <IMU_AccelRead+0x1a4>)
 80011ae:	701a      	strb	r2, [r3, #0]
	accRaw[0] = (u8Buf[1] << 8) | u8Buf[0];
 80011b0:	7f7b      	ldrb	r3, [r7, #29]
 80011b2:	021b      	lsls	r3, r3, #8
 80011b4:	b21a      	sxth	r2, r3
 80011b6:	7f3b      	ldrb	r3, [r7, #28]
 80011b8:	b21b      	sxth	r3, r3
 80011ba:	4313      	orrs	r3, r2
 80011bc:	b21b      	sxth	r3, r3
 80011be:	82bb      	strh	r3, [r7, #20]

	ret = IMU_ReadOneByte(dev, REG_ADD_ACCEL_YOUT_L, &u8Buf[0]);
 80011c0:	f107 031c 	add.w	r3, r7, #28
 80011c4:	461a      	mov	r2, r3
 80011c6:	2130      	movs	r1, #48	; 0x30
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff ff97 	bl	80010fc <IMU_ReadOneByte>
 80011ce:	4603      	mov	r3, r0
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b4f      	ldr	r3, [pc, #316]	; (8001310 <IMU_AccelRead+0x1a4>)
 80011d4:	701a      	strb	r2, [r3, #0]
	ret = IMU_ReadOneByte(dev, REG_ADD_ACCEL_YOUT_H, &u8Buf[1]);
 80011d6:	f107 031c 	add.w	r3, r7, #28
 80011da:	3301      	adds	r3, #1
 80011dc:	461a      	mov	r2, r3
 80011de:	212f      	movs	r1, #47	; 0x2f
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff ff8b 	bl	80010fc <IMU_ReadOneByte>
 80011e6:	4603      	mov	r3, r0
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b49      	ldr	r3, [pc, #292]	; (8001310 <IMU_AccelRead+0x1a4>)
 80011ec:	701a      	strb	r2, [r3, #0]
	accRaw[1] = (u8Buf[1] << 8) | u8Buf[0];
 80011ee:	7f7b      	ldrb	r3, [r7, #29]
 80011f0:	021b      	lsls	r3, r3, #8
 80011f2:	b21a      	sxth	r2, r3
 80011f4:	7f3b      	ldrb	r3, [r7, #28]
 80011f6:	b21b      	sxth	r3, r3
 80011f8:	4313      	orrs	r3, r2
 80011fa:	b21b      	sxth	r3, r3
 80011fc:	82fb      	strh	r3, [r7, #22]

	ret = IMU_ReadOneByte(dev, REG_ADD_ACCEL_ZOUT_L, &u8Buf[0]);
 80011fe:	f107 031c 	add.w	r3, r7, #28
 8001202:	461a      	mov	r2, r3
 8001204:	2132      	movs	r1, #50	; 0x32
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff ff78 	bl	80010fc <IMU_ReadOneByte>
 800120c:	4603      	mov	r3, r0
 800120e:	461a      	mov	r2, r3
 8001210:	4b3f      	ldr	r3, [pc, #252]	; (8001310 <IMU_AccelRead+0x1a4>)
 8001212:	701a      	strb	r2, [r3, #0]
	ret = IMU_ReadOneByte(dev, REG_ADD_ACCEL_ZOUT_H, &u8Buf[1]);
 8001214:	f107 031c 	add.w	r3, r7, #28
 8001218:	3301      	adds	r3, #1
 800121a:	461a      	mov	r2, r3
 800121c:	2131      	movs	r1, #49	; 0x31
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff ff6c 	bl	80010fc <IMU_ReadOneByte>
 8001224:	4603      	mov	r3, r0
 8001226:	461a      	mov	r2, r3
 8001228:	4b39      	ldr	r3, [pc, #228]	; (8001310 <IMU_AccelRead+0x1a4>)
 800122a:	701a      	strb	r2, [r3, #0]
	accRaw[2] = (u8Buf[1] << 8) | u8Buf[0];
 800122c:	7f7b      	ldrb	r3, [r7, #29]
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	b21a      	sxth	r2, r3
 8001232:	7f3b      	ldrb	r3, [r7, #28]
 8001234:	b21b      	sxth	r3, r3
 8001236:	4313      	orrs	r3, r2
 8001238:	b21b      	sxth	r3, r3
 800123a:	833b      	strh	r3, [r7, #24]

	/* Convert to SIGNED integers (two's complement) */
	int32_t accRawSigned[3];

	if ((accRaw[0] & 0x00080000) == 0x00080000)
 800123c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001240:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d007      	beq.n	8001258 <IMU_AccelRead+0xec>
		accRawSigned[0] = accRaw[0] | 0xFFF00000;
 8001248:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800124c:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 8001250:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	e002      	b.n	800125e <IMU_AccelRead+0xf2>
	else
		accRawSigned[0] = accRaw[0];
 8001258:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800125c:	60bb      	str	r3, [r7, #8]

	if ((accRaw[1] & 0x00080000) == 0x00080000)
 800125e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001262:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d007      	beq.n	800127a <IMU_AccelRead+0x10e>
		accRawSigned[1] = accRaw[1] | 0xFFF00000;
 800126a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800126e:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 8001272:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	e002      	b.n	8001280 <IMU_AccelRead+0x114>
	else
		accRawSigned[1] = accRaw[1];
 800127a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800127e:	60fb      	str	r3, [r7, #12]

	if ((accRaw[2] & 0x00080000) == 0x000080000)
 8001280:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001284:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d007      	beq.n	800129c <IMU_AccelRead+0x130>
		accRawSigned[2] = accRaw[2] | 0xFFF00000;
 800128c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001290:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 8001294:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	e002      	b.n	80012a2 <IMU_AccelRead+0x136>
	else
		accRawSigned[2] = accRaw[2];
 800129c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012a0:	613b      	str	r3, [r7, #16]

	// accel full scale set to +/-2G, sensitivity scale factor = 16384 LSB/g
	dev->acc[0] = 0.00006103515625f * accRawSigned[0] * 9.81f;
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	ee07 3a90 	vmov	s15, r3
 80012a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ac:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001314 <IMU_AccelRead+0x1a8>
 80012b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012b4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001318 <IMU_AccelRead+0x1ac>
 80012b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	edc3 7a01 	vstr	s15, [r3, #4]
	dev->acc[1] = 0.00006103515625f * accRawSigned[1] * 9.81f;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	ee07 3a90 	vmov	s15, r3
 80012c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012cc:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001314 <IMU_AccelRead+0x1a8>
 80012d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001318 <IMU_AccelRead+0x1ac>
 80012d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	edc3 7a02 	vstr	s15, [r3, #8]
	dev->acc[2] = 0.00006103515625f * accRawSigned[2] * 9.81f; // * 9.81f
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	ee07 3a90 	vmov	s15, r3
 80012e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ec:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001314 <IMU_AccelRead+0x1a8>
 80012f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012f4:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001318 <IMU_AccelRead+0x1ac>
 80012f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	edc3 7a03 	vstr	s15, [r3, #12]

	return ret;
 8001302:	4b03      	ldr	r3, [pc, #12]	; (8001310 <IMU_AccelRead+0x1a4>)
 8001304:	781b      	ldrb	r3, [r3, #0]

}
 8001306:	4618      	mov	r0, r3
 8001308:	3720      	adds	r7, #32
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000254 	.word	0x20000254
 8001314:	38800000 	.word	0x38800000
 8001318:	411cf5c3 	.word	0x411cf5c3

0800131c <Gyro_calibrate>:

HAL_StatusTypeDef Gyro_calibrate(ICM20948 *dev) // calibrate the offset of the gyro
// store the offset in int16_t gyro_offset[3]
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	uint8_t u8Buf[2] = { 0 }; // reset to zero upon entry
 8001324:	2300      	movs	r3, #0
 8001326:	823b      	strh	r3, [r7, #16]
	int16_t gyroRaw[3] = { 0 }; // reset to zero upon entry
 8001328:	f107 0308 	add.w	r3, r7, #8
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	809a      	strh	r2, [r3, #4]
	int8_t i;
	int16_t temp;

	for (i = 0; i < 32; i++) {
 8001332:	2300      	movs	r3, #0
 8001334:	75fb      	strb	r3, [r7, #23]
 8001336:	e06c      	b.n	8001412 <Gyro_calibrate+0xf6>
		IMU_ReadOneByte(dev, REG_ADD_GYRO_XOUT_L, &u8Buf[0]);
 8001338:	f107 0310 	add.w	r3, r7, #16
 800133c:	461a      	mov	r2, r3
 800133e:	2134      	movs	r1, #52	; 0x34
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7ff fedb 	bl	80010fc <IMU_ReadOneByte>
		IMU_ReadOneByte(dev, REG_ADD_GYRO_XOUT_H, &u8Buf[1]);
 8001346:	f107 0310 	add.w	r3, r7, #16
 800134a:	3301      	adds	r3, #1
 800134c:	461a      	mov	r2, r3
 800134e:	2133      	movs	r1, #51	; 0x33
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff fed3 	bl	80010fc <IMU_ReadOneByte>
		temp = (u8Buf[1] << 8) | u8Buf[0]; // for debugging
 8001356:	7c7b      	ldrb	r3, [r7, #17]
 8001358:	021b      	lsls	r3, r3, #8
 800135a:	b21a      	sxth	r2, r3
 800135c:	7c3b      	ldrb	r3, [r7, #16]
 800135e:	b21b      	sxth	r3, r3
 8001360:	4313      	orrs	r3, r2
 8001362:	82bb      	strh	r3, [r7, #20]
		gyroRaw[0] = temp + gyroRaw[0];
 8001364:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001368:	b29a      	uxth	r2, r3
 800136a:	8abb      	ldrh	r3, [r7, #20]
 800136c:	4413      	add	r3, r2
 800136e:	b29b      	uxth	r3, r3
 8001370:	b21b      	sxth	r3, r3
 8001372:	813b      	strh	r3, [r7, #8]
		//gyroRaw[0] = (u8Buf[1]<<8)|u8Buf[0] + gyroRaw[0];
osDelay(1);
 8001374:	2001      	movs	r0, #1
 8001376:	f007 fbf5 	bl	8008b64 <osDelay>
		IMU_ReadOneByte(dev, REG_ADD_GYRO_YOUT_L, &u8Buf[0]);
 800137a:	f107 0310 	add.w	r3, r7, #16
 800137e:	461a      	mov	r2, r3
 8001380:	2136      	movs	r1, #54	; 0x36
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff feba 	bl	80010fc <IMU_ReadOneByte>
		IMU_ReadOneByte(dev, REG_ADD_GYRO_YOUT_H, &u8Buf[1]);
 8001388:	f107 0310 	add.w	r3, r7, #16
 800138c:	3301      	adds	r3, #1
 800138e:	461a      	mov	r2, r3
 8001390:	2135      	movs	r1, #53	; 0x35
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff feb2 	bl	80010fc <IMU_ReadOneByte>
		gyroRaw[1] = ((u8Buf[1] << 8) | u8Buf[0]) + gyroRaw[1];
 8001398:	7c7b      	ldrb	r3, [r7, #17]
 800139a:	021b      	lsls	r3, r3, #8
 800139c:	b21a      	sxth	r2, r3
 800139e:	7c3b      	ldrb	r3, [r7, #16]
 80013a0:	b21b      	sxth	r3, r3
 80013a2:	4313      	orrs	r3, r2
 80013a4:	b21b      	sxth	r3, r3
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	4413      	add	r3, r2
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	b21b      	sxth	r3, r3
 80013b4:	817b      	strh	r3, [r7, #10]
		osDelay(1);
 80013b6:	2001      	movs	r0, #1
 80013b8:	f007 fbd4 	bl	8008b64 <osDelay>
		IMU_ReadOneByte(dev, REG_ADD_GYRO_ZOUT_L, &u8Buf[0]);
 80013bc:	f107 0310 	add.w	r3, r7, #16
 80013c0:	461a      	mov	r2, r3
 80013c2:	2138      	movs	r1, #56	; 0x38
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff fe99 	bl	80010fc <IMU_ReadOneByte>
		ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_ZOUT_H, &u8Buf[1]);
 80013ca:	f107 0310 	add.w	r3, r7, #16
 80013ce:	3301      	adds	r3, #1
 80013d0:	461a      	mov	r2, r3
 80013d2:	2137      	movs	r1, #55	; 0x37
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff fe91 	bl	80010fc <IMU_ReadOneByte>
 80013da:	4603      	mov	r3, r0
 80013dc:	461a      	mov	r2, r3
 80013de:	4b22      	ldr	r3, [pc, #136]	; (8001468 <Gyro_calibrate+0x14c>)
 80013e0:	701a      	strb	r2, [r3, #0]
		gyroRaw[2] = ((u8Buf[1] << 8) | u8Buf[0]) + gyroRaw[2];
 80013e2:	7c7b      	ldrb	r3, [r7, #17]
 80013e4:	021b      	lsls	r3, r3, #8
 80013e6:	b21a      	sxth	r2, r3
 80013e8:	7c3b      	ldrb	r3, [r7, #16]
 80013ea:	b21b      	sxth	r3, r3
 80013ec:	4313      	orrs	r3, r2
 80013ee:	b21b      	sxth	r3, r3
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	4413      	add	r3, r2
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	81bb      	strh	r3, [r7, #12]

		osDelay(100); // wait for 100msec
 8001400:	2064      	movs	r0, #100	; 0x64
 8001402:	f007 fbaf 	bl	8008b64 <osDelay>
	for (i = 0; i < 32; i++) {
 8001406:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800140a:	b2db      	uxtb	r3, r3
 800140c:	3301      	adds	r3, #1
 800140e:	b2db      	uxtb	r3, r3
 8001410:	75fb      	strb	r3, [r7, #23]
 8001412:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001416:	2b1f      	cmp	r3, #31
 8001418:	dd8e      	ble.n	8001338 <Gyro_calibrate+0x1c>
	}

	dev->gyro_bias[0] = (float)(gyroRaw[0] >> 5);  // average of 32 reads
 800141a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800141e:	115b      	asrs	r3, r3, #5
 8001420:	b21b      	sxth	r3, r3
 8001422:	ee07 3a90 	vmov	s15, r3
 8001426:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	dev->gyro_bias[1] = (float)(gyroRaw[1] >> 5);
 8001430:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001434:	115b      	asrs	r3, r3, #5
 8001436:	b21b      	sxth	r3, r3
 8001438:	ee07 3a90 	vmov	s15, r3
 800143c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	dev->gyro_bias[2] = (float)(gyroRaw[2] >> 5);
 8001446:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800144a:	115b      	asrs	r3, r3, #5
 800144c:	b21b      	sxth	r3, r3
 800144e:	ee07 3a90 	vmov	s15, r3
 8001452:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c


	return ret;
 800145c:	4b02      	ldr	r3, [pc, #8]	; (8001468 <Gyro_calibrate+0x14c>)
 800145e:	781b      	ldrb	r3, [r3, #0]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000254 	.word	0x20000254

0800146c <IMU_GyroRead>:

HAL_StatusTypeDef IMU_GyroRead(ICM20948 *dev) { // return the change in value instead of current value
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	; 0x28
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	uint8_t u8Buf[2] = { 0 }; // reset to zero
 8001474:	2300      	movs	r3, #0
 8001476:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t gyroRaw[3] = { 0 };  // reset to zero
 8001478:	f107 031c 	add.w	r3, r7, #28
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	809a      	strh	r2, [r3, #4]
	int16_t gyroDiff[3];
	int16_t temp;

	ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_YOUT_L, &u8Buf[0]);
 8001482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001486:	461a      	mov	r2, r3
 8001488:	2136      	movs	r1, #54	; 0x36
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff fe36 	bl	80010fc <IMU_ReadOneByte>
 8001490:	4603      	mov	r3, r0
 8001492:	461a      	mov	r2, r3
 8001494:	4b58      	ldr	r3, [pc, #352]	; (80015f8 <IMU_GyroRead+0x18c>)
 8001496:	701a      	strb	r2, [r3, #0]
	ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_YOUT_H, &u8Buf[1]);
 8001498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149c:	3301      	adds	r3, #1
 800149e:	461a      	mov	r2, r3
 80014a0:	2135      	movs	r1, #53	; 0x35
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff fe2a 	bl	80010fc <IMU_ReadOneByte>
 80014a8:	4603      	mov	r3, r0
 80014aa:	461a      	mov	r2, r3
 80014ac:	4b52      	ldr	r3, [pc, #328]	; (80015f8 <IMU_GyroRead+0x18c>)
 80014ae:	701a      	strb	r2, [r3, #0]
	gyroRaw[1] = (u8Buf[1] << 8) | u8Buf[0];
 80014b0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80014b4:	021b      	lsls	r3, r3, #8
 80014b6:	b21a      	sxth	r2, r3
 80014b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014bc:	b21b      	sxth	r3, r3
 80014be:	4313      	orrs	r3, r2
 80014c0:	b21b      	sxth	r3, r3
 80014c2:	83fb      	strh	r3, [r7, #30]


	ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_ZOUT_L, &u8Buf[0]);
 80014c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c8:	461a      	mov	r2, r3
 80014ca:	2138      	movs	r1, #56	; 0x38
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff fe15 	bl	80010fc <IMU_ReadOneByte>
 80014d2:	4603      	mov	r3, r0
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b48      	ldr	r3, [pc, #288]	; (80015f8 <IMU_GyroRead+0x18c>)
 80014d8:	701a      	strb	r2, [r3, #0]
	ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_ZOUT_H, &u8Buf[1]);
 80014da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014de:	3301      	adds	r3, #1
 80014e0:	461a      	mov	r2, r3
 80014e2:	2137      	movs	r1, #55	; 0x37
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff fe09 	bl	80010fc <IMU_ReadOneByte>
 80014ea:	4603      	mov	r3, r0
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b42      	ldr	r3, [pc, #264]	; (80015f8 <IMU_GyroRead+0x18c>)
 80014f0:	701a      	strb	r2, [r3, #0]
	gyroRaw[2] = (u8Buf[1] << 8) | u8Buf[0];
 80014f2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	b21a      	sxth	r2, r3
 80014fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014fe:	b21b      	sxth	r3, r3
 8001500:	4313      	orrs	r3, r2
 8001502:	b21b      	sxth	r3, r3
 8001504:	843b      	strh	r3, [r7, #32]


	ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_XOUT_L, &u8Buf[0]);
 8001506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150a:	461a      	mov	r2, r3
 800150c:	2134      	movs	r1, #52	; 0x34
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff fdf4 	bl	80010fc <IMU_ReadOneByte>
 8001514:	4603      	mov	r3, r0
 8001516:	461a      	mov	r2, r3
 8001518:	4b37      	ldr	r3, [pc, #220]	; (80015f8 <IMU_GyroRead+0x18c>)
 800151a:	701a      	strb	r2, [r3, #0]
	ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_XOUT_H, &u8Buf[1]);
 800151c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001520:	3301      	adds	r3, #1
 8001522:	461a      	mov	r2, r3
 8001524:	2133      	movs	r1, #51	; 0x33
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f7ff fde8 	bl	80010fc <IMU_ReadOneByte>
 800152c:	4603      	mov	r3, r0
 800152e:	461a      	mov	r2, r3
 8001530:	4b31      	ldr	r3, [pc, #196]	; (80015f8 <IMU_GyroRead+0x18c>)
 8001532:	701a      	strb	r2, [r3, #0]
	temp = (u8Buf[1] << 8) | u8Buf[0]; // for debugging
 8001534:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001538:	021b      	lsls	r3, r3, #8
 800153a:	b21a      	sxth	r2, r3
 800153c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001540:	b21b      	sxth	r3, r3
 8001542:	4313      	orrs	r3, r2
 8001544:	84fb      	strh	r3, [r7, #38]	; 0x26
	gyroRaw[0] = (u8Buf[1] << 8) | u8Buf[0];
 8001546:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800154a:	021b      	lsls	r3, r3, #8
 800154c:	b21a      	sxth	r2, r3
 800154e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001552:	b21b      	sxth	r3, r3
 8001554:	4313      	orrs	r3, r2
 8001556:	b21b      	sxth	r3, r3
 8001558:	83bb      	strh	r3, [r7, #28]

	float gyroRawFloat[3] = {0};
 800155a:	f107 0308 	add.w	r3, r7, #8
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
	gyroRawFloat[0] = gyroRaw[0] - dev->gyro_bias[0];
 8001566:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800156a:	ee07 3a90 	vmov	s15, r3
 800156e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001578:	ee77 7a67 	vsub.f32	s15, s14, s15
 800157c:	edc7 7a02 	vstr	s15, [r7, #8]
	gyroRawFloat[1] = gyroRaw[1] - dev->gyro_bias[1];
 8001580:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001584:	ee07 3a90 	vmov	s15, r3
 8001588:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001592:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001596:	edc7 7a03 	vstr	s15, [r7, #12]
	gyroRawFloat[2] = gyroRaw[2] - dev->gyro_bias[2];
 800159a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800159e:	ee07 3a90 	vmov	s15, r3
 80015a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80015ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015b0:	edc7 7a04 	vstr	s15, [r7, #16]
	// gyro full scale set to +/-500 dps, sensitivity scale factor = 65.5 LSB/dps
	// degree per second = value/65.5



	dev->gyro[0] = 0.0152671755725191f * gyroRawFloat[0];
 80015b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80015b8:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80015fc <IMU_GyroRead+0x190>
 80015bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	edc3 7a04 	vstr	s15, [r3, #16]
	dev->gyro[1] = 0.0152671755725191f * gyroRawFloat[1];
 80015c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80015ca:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80015fc <IMU_GyroRead+0x190>
 80015ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	edc3 7a05 	vstr	s15, [r3, #20]
	dev->gyro[2] = 0.0152671755725191f * gyroRawFloat[2];
 80015d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80015dc:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80015fc <IMU_GyroRead+0x190>
 80015e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	edc3 7a06 	vstr	s15, [r3, #24]

	return ret;
 80015ea:	4b03      	ldr	r3, [pc, #12]	; (80015f8 <IMU_GyroRead+0x18c>)
 80015ec:	781b      	ldrb	r3, [r3, #0]

}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3728      	adds	r7, #40	; 0x28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000254 	.word	0x20000254
 80015fc:	3c7a232d 	.word	0x3c7a232d

08001600 <Mag_init>:

HAL_StatusTypeDef Mag_init(ICM20948 *dev) {
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	73fb      	strb	r3, [r7, #15]

	Mag_WriteOneByte(dev, AK09916__CNTL2__REGISTER, REG_VAL_MAG_MODE_10HZ);
 800160c:	2202      	movs	r2, #2
 800160e:	2131      	movs	r1, #49	; 0x31
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7ff fd8e 	bl	8001132 <Mag_WriteOneByte>

}
 8001616:	bf00      	nop
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <_ZN9AppMotion16MotionControllerD1Ev>:
	MotionController(u_ctx *ctx);

	void start();
	static void turn(Motor lmotor, Motor rmotor, Servo servo, bool isRight, bool isFwd,
			uint32_t arg);
	~MotionController() {
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	}
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4618      	mov	r0, r3
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
	...

08001638 <HAL_GPIO_EXTI_Callback>:
#include <cstdio>

sensorData_t sensor_data; // public variables shared across all files.
bool test_run = false;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	80fb      	strh	r3, [r7, #6]
	test_run = true;
 8001642:	4b04      	ldr	r3, [pc, #16]	; (8001654 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001644:	2201      	movs	r2, #1
 8001646:	701a      	strb	r2, [r3, #0]
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	2000026c 	.word	0x2000026c

08001658 <HAL_UART_RxCpltCallback>:
AppParser::Processor processor(&procCtx, &ctrlCtx);
AppParser::Listener listener(&procCtx);
/*****************************************************************************************/


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
	//__HAL_UART_CLEAR_OREFLAG(&huart3);
	if (huart == &huart3) {
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a05      	ldr	r2, [pc, #20]	; (8001678 <HAL_UART_RxCpltCallback+0x20>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d102      	bne.n	800166e <HAL_UART_RxCpltCallback+0x16>
		listener.invoke();
 8001668:	4804      	ldr	r0, [pc, #16]	; (800167c <HAL_UART_RxCpltCallback+0x24>)
 800166a:	f000 fdeb 	bl	8002244 <_ZN9AppParser8Listener6invokeEv>
	}
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000478 	.word	0x20000478
 800167c:	20000288 	.word	0x20000288

08001680 <initializeCPPconstructs>:

/*
 * This function initializes the C++ stuff, called from within main() context.
 */
void initializeCPPconstructs(void) {
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
	//procTaskHandle = osThreadNew(processorTask, NULL, &procTask_attr);

	processor.start();
 8001684:	4803      	ldr	r0, [pc, #12]	; (8001694 <initializeCPPconstructs+0x14>)
 8001686:	f000 fe29 	bl	80022dc <_ZN9AppParser9Processor5startEv>
	//osThreadNew((osThreadFunc_t)&controller.motionTask,
	    		//&ctrlCtx,
	                                   // &(ctrlCtx.attr));
				controller.start();
 800168a:	4803      	ldr	r0, [pc, #12]	; (8001698 <initializeCPPconstructs+0x18>)
 800168c:	f000 f97c 	bl	8001988 <_ZN9AppMotion16MotionController5startEv>
	//htim1.Instance->CCR1 = 153;
}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000280 	.word	0x20000280
 8001698:	2000027c 	.word	0x2000027c

0800169c <sensorTask>:
	} while (1);
	*targetAngle = 0;


}
void sensorTask(void *pv) {
 800169c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016a0:	b0b7      	sub	sp, #220	; 0xdc
 80016a2:	af0e      	add	r7, sp, #56	; 0x38
 80016a4:	61f8      	str	r0, [r7, #28]

	IMU_Initialise(&imu, &hi2c1);
 80016a6:	4968      	ldr	r1, [pc, #416]	; (8001848 <sensorTask+0x1ac>)
 80016a8:	4868      	ldr	r0, [pc, #416]	; (800184c <sensorTask+0x1b0>)
 80016aa:	f7ff fc4f 	bl	8000f4c <IMU_Initialise>

	osDelay(50);
 80016ae:	2032      	movs	r0, #50	; 0x32
 80016b0:	f007 fa58 	bl	8008b64 <osDelay>
	Gyro_calibrate(&imu);
 80016b4:	4865      	ldr	r0, [pc, #404]	; (800184c <sensorTask+0x1b0>)
 80016b6:	f7ff fe31 	bl	800131c <Gyro_calibrate>
	Mag_init(&imu);
 80016ba:	4864      	ldr	r0, [pc, #400]	; (800184c <sensorTask+0x1b0>)
 80016bc:	f7ff ffa0 	bl	8001600 <Mag_init>

	sensor_data.imu = &imu;
 80016c0:	4b63      	ldr	r3, [pc, #396]	; (8001850 <sensorTask+0x1b4>)
 80016c2:	4a62      	ldr	r2, [pc, #392]	; (800184c <sensorTask+0x1b0>)
 80016c4:	601a      	str	r2, [r3, #0]
	uint8_t readGyroZData[2];

	/**I2C scanner for debug purposes **/
	printf("Scanning I2C bus:\r\n");
 80016c6:	4863      	ldr	r0, [pc, #396]	; (8001854 <sensorTask+0x1b8>)
 80016c8:	f00a fffe 	bl	800c6c8 <puts>
	HAL_StatusTypeDef result;
	uint8_t i;
	for (i = 1; i < 128; i++) {
 80016cc:	2301      	movs	r3, #1
 80016ce:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 80016d2:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	db23      	blt.n	8001722 <sensorTask+0x86>
		 * &hi2c1 is the handle
		 * (uint16_t)(i<<1) is the i2c address left aligned
		 * retries 2
		 * timeout 2
		 */
		result = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (i << 1), 2, 2);
 80016da:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80016de:	b29b      	uxth	r3, r3
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	b299      	uxth	r1, r3
 80016e4:	2302      	movs	r3, #2
 80016e6:	2202      	movs	r2, #2
 80016e8:	4857      	ldr	r0, [pc, #348]	; (8001848 <sensorTask+0x1ac>)
 80016ea:	f003 fbf5 	bl	8004ed8 <HAL_I2C_IsDeviceReady>
 80016ee:	4603      	mov	r3, r0
 80016f0:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
		if (result != HAL_OK) // HAL_ERROR or HAL_BUSY or HAL_TIMEOUT
 80016f4:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d002      	beq.n	8001702 <sensorTask+0x66>
				{
			printf("."); // No ACK received at that address
 80016fc:	202e      	movs	r0, #46	; 0x2e
 80016fe:	f00a ff5f 	bl	800c5c0 <putchar>
		}
		if (result == HAL_OK) {
 8001702:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8001706:	2b00      	cmp	r3, #0
 8001708:	d105      	bne.n	8001716 <sensorTask+0x7a>
			printf("0x%X", i); // Received an ACK at that address
 800170a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800170e:	4619      	mov	r1, r3
 8001710:	4851      	ldr	r0, [pc, #324]	; (8001858 <sensorTask+0x1bc>)
 8001712:	f00a ff3d 	bl	800c590 <iprintf>
	for (i = 1; i < 128; i++) {
 8001716:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800171a:	3301      	adds	r3, #1
 800171c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8001720:	e7d7      	b.n	80016d2 <sensorTask+0x36>
		}
	}
	printf("\r\n");
 8001722:	484e      	ldr	r0, [pc, #312]	; (800185c <sensorTask+0x1c0>)
 8001724:	f00a ffd0 	bl	800c6c8 <puts>

	//magCalICM20948(&imu, &imu.mag_bias, &imu.mag_scale);
	char sbuf[100] = { 0 };
 8001728:	2300      	movs	r3, #0
 800172a:	623b      	str	r3, [r7, #32]
 800172c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001730:	2260      	movs	r2, #96	; 0x60
 8001732:	2100      	movs	r1, #0
 8001734:	4618      	mov	r0, r3
 8001736:	f00a f9d9 	bl	800baec <memset>
	printf("%d\n", imu.mag_bias[0]);
 800173a:	4b44      	ldr	r3, [pc, #272]	; (800184c <sensorTask+0x1b0>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	4618      	mov	r0, r3
 8001740:	f7fe ff02 	bl	8000548 <__aeabi_f2d>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4845      	ldr	r0, [pc, #276]	; (8001860 <sensorTask+0x1c4>)
 800174a:	f00a ff21 	bl	800c590 <iprintf>
	printf("%d\n", imu.mag_bias[1]);
 800174e:	4b3f      	ldr	r3, [pc, #252]	; (800184c <sensorTask+0x1b0>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	4618      	mov	r0, r3
 8001754:	f7fe fef8 	bl	8000548 <__aeabi_f2d>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4840      	ldr	r0, [pc, #256]	; (8001860 <sensorTask+0x1c4>)
 800175e:	f00a ff17 	bl	800c590 <iprintf>
	printf("%d\n", imu.mag_bias[2]);
 8001762:	4b3a      	ldr	r3, [pc, #232]	; (800184c <sensorTask+0x1b0>)
 8001764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001766:	4618      	mov	r0, r3
 8001768:	f7fe feee 	bl	8000548 <__aeabi_f2d>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	483b      	ldr	r0, [pc, #236]	; (8001860 <sensorTask+0x1c4>)
 8001772:	f00a ff0d 	bl	800c590 <iprintf>
	uint32_t timeNow = HAL_GetTick();
 8001776:	f002 f873 	bl	8003860 <HAL_GetTick>
 800177a:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
	float dir = 0;
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	float DEG2RAD = 0.017453292519943295769236907684886f;
 8001786:	4b37      	ldr	r3, [pc, #220]	; (8001864 <sensorTask+0x1c8>)
 8001788:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	float mRes = 10.0f * 4912.0f / 32760.0f;
 800178c:	4b36      	ldr	r3, [pc, #216]	; (8001868 <sensorTask+0x1cc>)
 800178e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	for (;;) {

		//setLeftPWM(1000); // was 1000, 2000
		//setRightPWM(2000);
		//robotTurnPID(&targetAngle, 0);
		float angle = 100;
 8001792:	4b36      	ldr	r3, [pc, #216]	; (800186c <sensorTask+0x1d0>)
 8001794:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		//robotTurn(&angle);
		//uint8_t sbuf[60] = { 0 };
		/* USER CODE END WHILE */

		IMU_AccelRead(&imu);
 8001798:	482c      	ldr	r0, [pc, #176]	; (800184c <sensorTask+0x1b0>)
 800179a:	f7ff fce7 	bl	800116c <IMU_AccelRead>
		IMU_GyroRead(&imu);
 800179e:	482b      	ldr	r0, [pc, #172]	; (800184c <sensorTask+0x1b0>)
 80017a0:	f7ff fe64 	bl	800146c <IMU_GyroRead>
		/*float yaw = atan2(2.0f * (imu.q[1] * imu.q[2] + imu.q[0] * imu.q[3]),
		 imu.q[0] * imu.q[0] + imu.q[1] * imu.q[1] - imu.q[2] * imu.q[2]
		 - imu.q[3] * imu.q[3]) * 57.295779513082320876798154814105f;*/
		uint16_t len = sprintf(&sbuf[0],
				"%5.2f,%5.2f,%5.2f,%5.2f,%5.2f,%5.2f,%5.2f,%5.2f,%5.2f\r\n",
				imu.acc[0], imu.acc[1], imu.acc[2], imu.gyro[0], imu.gyro[1],
 80017a4:	4b29      	ldr	r3, [pc, #164]	; (800184c <sensorTask+0x1b0>)
 80017a6:	685b      	ldr	r3, [r3, #4]
		uint16_t len = sprintf(&sbuf[0],
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7fe fecd 	bl	8000548 <__aeabi_f2d>
 80017ae:	e9c7 0104 	strd	r0, r1, [r7, #16]
				imu.acc[0], imu.acc[1], imu.acc[2], imu.gyro[0], imu.gyro[1],
 80017b2:	4b26      	ldr	r3, [pc, #152]	; (800184c <sensorTask+0x1b0>)
 80017b4:	689b      	ldr	r3, [r3, #8]
		uint16_t len = sprintf(&sbuf[0],
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7fe fec6 	bl	8000548 <__aeabi_f2d>
 80017bc:	4680      	mov	r8, r0
 80017be:	4689      	mov	r9, r1
				imu.acc[0], imu.acc[1], imu.acc[2], imu.gyro[0], imu.gyro[1],
 80017c0:	4b22      	ldr	r3, [pc, #136]	; (800184c <sensorTask+0x1b0>)
 80017c2:	68db      	ldr	r3, [r3, #12]
		uint16_t len = sprintf(&sbuf[0],
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe febf 	bl	8000548 <__aeabi_f2d>
 80017ca:	4682      	mov	sl, r0
 80017cc:	468b      	mov	fp, r1
				imu.acc[0], imu.acc[1], imu.acc[2], imu.gyro[0], imu.gyro[1],
 80017ce:	4b1f      	ldr	r3, [pc, #124]	; (800184c <sensorTask+0x1b0>)
 80017d0:	691b      	ldr	r3, [r3, #16]
		uint16_t len = sprintf(&sbuf[0],
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7fe feb8 	bl	8000548 <__aeabi_f2d>
 80017d8:	e9c7 0102 	strd	r0, r1, [r7, #8]
				imu.acc[0], imu.acc[1], imu.acc[2], imu.gyro[0], imu.gyro[1],
 80017dc:	4b1b      	ldr	r3, [pc, #108]	; (800184c <sensorTask+0x1b0>)
 80017de:	695b      	ldr	r3, [r3, #20]
		uint16_t len = sprintf(&sbuf[0],
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7fe feb1 	bl	8000548 <__aeabi_f2d>
 80017e6:	e9c7 0100 	strd	r0, r1, [r7]
				imu.gyro[2], dir, 0, 0);
 80017ea:	4b18      	ldr	r3, [pc, #96]	; (800184c <sensorTask+0x1b0>)
 80017ec:	699b      	ldr	r3, [r3, #24]
		uint16_t len = sprintf(&sbuf[0],
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7fe feaa 	bl	8000548 <__aeabi_f2d>
 80017f4:	4604      	mov	r4, r0
 80017f6:	460d      	mov	r5, r1
 80017f8:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80017fc:	f7fe fea4 	bl	8000548 <__aeabi_f2d>
 8001800:	f107 0620 	add.w	r6, r7, #32
 8001804:	2300      	movs	r3, #0
 8001806:	930d      	str	r3, [sp, #52]	; 0x34
 8001808:	2300      	movs	r3, #0
 800180a:	930c      	str	r3, [sp, #48]	; 0x30
 800180c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8001810:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8001814:	ed97 7b00 	vldr	d7, [r7]
 8001818:	ed8d 7b06 	vstr	d7, [sp, #24]
 800181c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001820:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001824:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001828:	e9cd 8900 	strd	r8, r9, [sp]
 800182c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001830:	490f      	ldr	r1, [pc, #60]	; (8001870 <sensorTask+0x1d4>)
 8001832:	4630      	mov	r0, r6
 8001834:	f00b f842 	bl	800c8bc <siprintf>
 8001838:	4603      	mov	r3, r0
				imu.gyro[2], dir, 0, 0);
 800183a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

	//	HAL_UART_Transmit(&huart3, (uint8_t*) sbuf, len, 10);
		//	HAL_UART_Receive_IT(&huart3, (uint8_t*) aRxBuffer, 5);
		osDelay(65);
 800183e:	2041      	movs	r0, #65	; 0x41
 8001840:	f007 f990 	bl	8008b64 <osDelay>

	}
 8001844:	e7a5      	b.n	8001792 <sensorTask+0xf6>
 8001846:	bf00      	nop
 8001848:	20000304 	.word	0x20000304
 800184c:	2000029c 	.word	0x2000029c
 8001850:	20000258 	.word	0x20000258
 8001854:	0800eaf8 	.word	0x0800eaf8
 8001858:	0800eb0c 	.word	0x0800eb0c
 800185c:	0800eb14 	.word	0x0800eb14
 8001860:	0800eb18 	.word	0x0800eb18
 8001864:	3c8efa35 	.word	0x3c8efa35
 8001868:	3fbfebff 	.word	0x3fbfebff
 800186c:	42c80000 	.word	0x42c80000
 8001870:	0800eb1c 	.word	0x0800eb1c

08001874 <_Z41__static_initialization_and_destruction_0ii>:
}
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d125      	bne.n	80018d0 <_Z41__static_initialization_and_destruction_0ii+0x5c>
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800188a:	4293      	cmp	r3, r2
 800188c:	d120      	bne.n	80018d0 <_Z41__static_initialization_and_destruction_0ii+0x5c>
		.mailbox = { .queue = NULL } };
 800188e:	4b1b      	ldr	r3, [pc, #108]	; (80018fc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a1b      	ldr	r2, [pc, #108]	; (8001900 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001894:	6013      	str	r3, [r2, #0]
osMessageQueueId_t ctrlQueue = osMessageQueueNew(10, sizeof(AppParser::MOTION_PKT_t), NULL);
 8001896:	2200      	movs	r2, #0
 8001898:	210c      	movs	r1, #12
 800189a:	200a      	movs	r0, #10
 800189c:	f007 f97d 	bl	8008b9a <osMessageQueueNew>
 80018a0:	4603      	mov	r3, r0
 80018a2:	4a18      	ldr	r2, [pc, #96]	; (8001904 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80018a4:	6013      	str	r3, [r2, #0]
		.mailbox = { .queue = ctrlQueue } };
 80018a6:	4b18      	ldr	r3, [pc, #96]	; (8001908 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a18      	ldr	r2, [pc, #96]	; (800190c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	4b15      	ldr	r3, [pc, #84]	; (8001904 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a16      	ldr	r2, [pc, #88]	; (800190c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80018b4:	6293      	str	r3, [r2, #40]	; 0x28
AppMotion::MotionController controller(&ctrlCtx);
 80018b6:	4915      	ldr	r1, [pc, #84]	; (800190c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80018b8:	4815      	ldr	r0, [pc, #84]	; (8001910 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80018ba:	f000 f855 	bl	8001968 <_ZN9AppMotion16MotionControllerC1EP5u_ctx>
AppParser::Processor processor(&procCtx, &ctrlCtx);
 80018be:	4a13      	ldr	r2, [pc, #76]	; (800190c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80018c0:	490f      	ldr	r1, [pc, #60]	; (8001900 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80018c2:	4814      	ldr	r0, [pc, #80]	; (8001914 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80018c4:	f000 fce4 	bl	8002290 <_ZN9AppParser9ProcessorC1EP5u_ctxS2_>
AppParser::Listener listener(&procCtx);
 80018c8:	490d      	ldr	r1, [pc, #52]	; (8001900 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80018ca:	4813      	ldr	r0, [pc, #76]	; (8001918 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80018cc:	f000 fc9f 	bl	800220e <_ZN9AppParser8ListenerC1EP5u_ctx>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10d      	bne.n	80018f2 <_Z41__static_initialization_and_destruction_0ii+0x7e>
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018dc:	4293      	cmp	r3, r2
 80018de:	d108      	bne.n	80018f2 <_Z41__static_initialization_and_destruction_0ii+0x7e>
 80018e0:	480d      	ldr	r0, [pc, #52]	; (8001918 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80018e2:	f000 fca3 	bl	800222c <_ZN9AppParser8ListenerD1Ev>
AppParser::Processor processor(&procCtx, &ctrlCtx);
 80018e6:	480b      	ldr	r0, [pc, #44]	; (8001914 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80018e8:	f000 fcec 	bl	80022c4 <_ZN9AppParser9ProcessorD1Ev>
AppMotion::MotionController controller(&ctrlCtx);
 80018ec:	4808      	ldr	r0, [pc, #32]	; (8001910 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80018ee:	f7ff fe97 	bl	8001620 <_ZN9AppMotion16MotionControllerD1Ev>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000270 	.word	0x20000270
 8001900:	20000000 	.word	0x20000000
 8001904:	20000278 	.word	0x20000278
 8001908:	20000274 	.word	0x20000274
 800190c:	2000002c 	.word	0x2000002c
 8001910:	2000027c 	.word	0x2000027c
 8001914:	20000280 	.word	0x20000280
 8001918:	20000288 	.word	0x20000288

0800191c <_GLOBAL__sub_I_sensor_data>:
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
 8001920:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001924:	2001      	movs	r0, #1
 8001926:	f7ff ffa5 	bl	8001874 <_Z41__static_initialization_and_destruction_0ii>
 800192a:	bd80      	pop	{r7, pc}

0800192c <_GLOBAL__sub_D_sensor_data>:
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
 8001930:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001934:	2000      	movs	r0, #0
 8001936:	f7ff ff9d 	bl	8001874 <_Z41__static_initialization_and_destruction_0ii>
 800193a:	bd80      	pop	{r7, pc}

0800193c <_ZN9AppMotion5ServoD1Ev>:
	~Servo() {
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
	}
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4618      	mov	r0, r3
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <_ZN9AppMotion5MotorD1Ev>:
	~Motor() {
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
	}
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <_ZN9AppMotion16MotionControllerC1EP5u_ctx>:
#include <cstdio>
#include <cstring>

namespace AppMotion {

MotionController::MotionController(u_ctx *ctx) {
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
	this->ctx = ctx;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	601a      	str	r2, [r3, #0]

}
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4618      	mov	r0, r3
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
	...

08001988 <_ZN9AppMotion16MotionController5startEv>:

void MotionController::start(void) {
 8001988:	b590      	push	{r4, r7, lr}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]

	this->ctx->runner = osThreadNew(
			(osThreadFunc_t) MotionController::motionTask, ctx, &(ctx->attr));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6819      	ldr	r1, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	1d1a      	adds	r2, r3, #4
	this->ctx->runner = osThreadNew(
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681c      	ldr	r4, [r3, #0]
 800199e:	4804      	ldr	r0, [pc, #16]	; (80019b0 <_ZN9AppMotion16MotionController5startEv+0x28>)
 80019a0:	f007 f82c 	bl	80089fc <osThreadNew>
 80019a4:	4603      	mov	r3, r0
 80019a6:	6023      	str	r3, [r4, #0]
	return;
 80019a8:	bf00      	nop
}
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd90      	pop	{r4, r7, pc}
 80019b0:	080019b5 	.word	0x080019b5

080019b4 <_ZN9AppMotion16MotionController10motionTaskEPv>:

void MotionController::motionTask(void *pv) {
 80019b4:	b5b0      	push	{r4, r5, r7, lr}
 80019b6:	b0ea      	sub	sp, #424	; 0x1a8
 80019b8:	af04      	add	r7, sp, #16
 80019ba:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80019be:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80019c2:	6018      	str	r0, [r3, #0]
	u_ctx *ctx = (u_ctx*) pv;
 80019c4:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80019c8:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194

	/* Instantiate the physical devices */
	Servo servo(&htim1, TIM_CHANNEL_1, CENTER_POS_PWM - LEFT_DELTA,
	CENTER_POS_PWM + RIGHT_DELTA, CENTER_POS_PWM);
 80019d2:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80019d6:	2399      	movs	r3, #153	; 0x99
 80019d8:	9301      	str	r3, [sp, #4]
 80019da:	23f3      	movs	r3, #243	; 0xf3
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	2371      	movs	r3, #113	; 0x71
 80019e0:	2200      	movs	r2, #0
 80019e2:	49d4      	ldr	r1, [pc, #848]	; (8001d34 <_ZN9AppMotion16MotionController10motionTaskEPv+0x380>)
 80019e4:	f000 fafe 	bl	8001fe4 <_ZN9AppMotion5ServoC1EP17TIM_HandleTypeDefmmmm>

	Motor lmotor(&htim8, TIM_CHANNEL_1, GPIOA, GPIOA, GPIO_PIN_5, GPIO_PIN_4,
			7199);
 80019e8:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80019ec:	f641 431f 	movw	r3, #7199	; 0x1c1f
 80019f0:	9303      	str	r3, [sp, #12]
 80019f2:	2310      	movs	r3, #16
 80019f4:	9302      	str	r3, [sp, #8]
 80019f6:	2320      	movs	r3, #32
 80019f8:	9301      	str	r3, [sp, #4]
 80019fa:	4bcf      	ldr	r3, [pc, #828]	; (8001d38 <_ZN9AppMotion16MotionController10motionTaskEPv+0x384>)
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	4bce      	ldr	r3, [pc, #824]	; (8001d38 <_ZN9AppMotion16MotionController10motionTaskEPv+0x384>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	49ce      	ldr	r1, [pc, #824]	; (8001d3c <_ZN9AppMotion16MotionController10motionTaskEPv+0x388>)
 8001a04:	f000 fb40 	bl	8002088 <_ZN9AppMotion5MotorC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefS4_ttm>
	Motor rmotor(&htim8, TIM_CHANNEL_2, GPIOA, GPIOA, GPIO_PIN_2, GPIO_PIN_3,
			7199);
 8001a08:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001a0c:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8001a10:	9303      	str	r3, [sp, #12]
 8001a12:	2308      	movs	r3, #8
 8001a14:	9302      	str	r3, [sp, #8]
 8001a16:	2304      	movs	r3, #4
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	4bc7      	ldr	r3, [pc, #796]	; (8001d38 <_ZN9AppMotion16MotionController10motionTaskEPv+0x384>)
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	4bc6      	ldr	r3, [pc, #792]	; (8001d38 <_ZN9AppMotion16MotionController10motionTaskEPv+0x384>)
 8001a20:	2204      	movs	r2, #4
 8001a22:	49c6      	ldr	r1, [pc, #792]	; (8001d3c <_ZN9AppMotion16MotionController10motionTaskEPv+0x388>)
 8001a24:	f000 fb30 	bl	8002088 <_ZN9AppMotion5MotorC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefS4_ttm>

	for (;;) {
		osDelay(50);
 8001a28:	2032      	movs	r0, #50	; 0x32
 8001a2a:	f007 f89b 	bl	8008b64 <osDelay>
		static int ctr = 0;
		if(test_run)
 8001a2e:	4bc4      	ldr	r3, [pc, #784]	; (8001d40 <_ZN9AppMotion16MotionController10motionTaskEPv+0x38c>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f000 80c4 	beq.w	8001bc0 <_ZN9AppMotion16MotionController10motionTaskEPv+0x20c>
		{
			ctr++;
 8001a38:	4bc2      	ldr	r3, [pc, #776]	; (8001d44 <_ZN9AppMotion16MotionController10motionTaskEPv+0x390>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	4ac1      	ldr	r2, [pc, #772]	; (8001d44 <_ZN9AppMotion16MotionController10motionTaskEPv+0x390>)
 8001a40:	6013      	str	r3, [r2, #0]
			turn(lmotor, rmotor, servo, false, true, 45);
 8001a42:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001a46:	f5a3 7292 	sub.w	r2, r3, #292	; 0x124
 8001a4a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001a4e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001a52:	4614      	mov	r4, r2
 8001a54:	461d      	mov	r5, r3
 8001a56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a5a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a5e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001a62:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001a66:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8001a6a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001a6e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001a72:	4614      	mov	r4, r2
 8001a74:	461d      	mov	r5, r3
 8001a76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a7a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a7e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001a82:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001a86:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001a8a:	f107 04a4 	add.w	r4, r7, #164	; 0xa4
 8001a8e:	461d      	mov	r5, r3
 8001a90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a94:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a98:	e884 0003 	stmia.w	r4, {r0, r1}
 8001a9c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001aa0:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8001aa4:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8001aa8:	232d      	movs	r3, #45	; 0x2d
 8001aaa:	9301      	str	r3, [sp, #4]
 8001aac:	2301      	movs	r3, #1
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f000 f9a5 	bl	8001e00 <_ZN9AppMotion16MotionController4turnENS_5MotorES1_NS_5ServoEbbm>
 8001ab6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff ff3e 	bl	800193c <_ZN9AppMotion5ServoD1Ev>
 8001ac0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ff44 	bl	8001952 <_ZN9AppMotion5MotorD1Ev>
 8001aca:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff ff3f 	bl	8001952 <_ZN9AppMotion5MotorD1Ev>
			turn(lmotor, rmotor, servo, true, false, 45);
 8001ad4:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001ad8:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001adc:	f107 04bc 	add.w	r4, r7, #188	; 0xbc
 8001ae0:	461d      	mov	r5, r3
 8001ae2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ae4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ae6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001aea:	e884 0003 	stmia.w	r4, {r0, r1}
 8001aee:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001af2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001af6:	f107 04d4 	add.w	r4, r7, #212	; 0xd4
 8001afa:	461d      	mov	r5, r3
 8001afc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001afe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b00:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b04:	e884 0003 	stmia.w	r4, {r0, r1}
 8001b08:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001b0c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001b10:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 8001b14:	461d      	mov	r5, r3
 8001b16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b1a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b1e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001b22:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8001b26:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 8001b2a:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
 8001b2e:	232d      	movs	r3, #45	; 0x2d
 8001b30:	9301      	str	r3, [sp, #4]
 8001b32:	2300      	movs	r3, #0
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	2301      	movs	r3, #1
 8001b38:	f000 f962 	bl	8001e00 <_ZN9AppMotion16MotionController4turnENS_5MotorES1_NS_5ServoEbbm>
 8001b3c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff fefb 	bl	800193c <_ZN9AppMotion5ServoD1Ev>
 8001b46:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff ff01 	bl	8001952 <_ZN9AppMotion5MotorD1Ev>
 8001b50:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff fefc 	bl	8001952 <_ZN9AppMotion5MotorD1Ev>
			if(ctr >=4) {
 8001b5a:	4b7a      	ldr	r3, [pc, #488]	; (8001d44 <_ZN9AppMotion16MotionController10motionTaskEPv+0x390>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2b03      	cmp	r3, #3
 8001b60:	dd2e      	ble.n	8001bc0 <_ZN9AppMotion16MotionController10motionTaskEPv+0x20c>
				servo.turnFront();
 8001b62:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b66:	4618      	mov	r0, r3
 8001b68:	f000 fa7d 	bl	8002066 <_ZN9AppMotion5Servo9turnFrontEv>
				lmotor.setSpeed(100);
 8001b6c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b70:	2164      	movs	r1, #100	; 0x64
 8001b72:	4618      	mov	r0, r3
 8001b74:	f000 faae 	bl	80020d4 <_ZN9AppMotion5Motor8setSpeedEm>
								rmotor.setSpeed(100);
 8001b78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b7c:	2164      	movs	r1, #100	; 0x64
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 faa8 	bl	80020d4 <_ZN9AppMotion5Motor8setSpeedEm>
								lmotor.setForward();
 8001b84:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f000 fb10 	bl	80021ae <_ZN9AppMotion5Motor10setForwardEv>
								rmotor.setForward();
 8001b8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b92:	4618      	mov	r0, r3
 8001b94:	f000 fb0b 	bl	80021ae <_ZN9AppMotion5Motor10setForwardEv>
								osDelay(1000);
 8001b98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b9c:	f006 ffe2 	bl	8008b64 <osDelay>
								lmotor.halt();
 8001ba0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f000 fad5 	bl	8002154 <_ZN9AppMotion5Motor4haltEv>
															rmotor.halt();
 8001baa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f000 fad0 	bl	8002154 <_ZN9AppMotion5Motor4haltEv>
test_run = false;
 8001bb4:	4b62      	ldr	r3, [pc, #392]	; (8001d40 <_ZN9AppMotion16MotionController10motionTaskEPv+0x38c>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]
ctr = 0;
 8001bba:	4b62      	ldr	r3, [pc, #392]	; (8001d44 <_ZN9AppMotion16MotionController10motionTaskEPv+0x390>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
			}

		}
		//osThreadYield();
		if (osMessageQueueGetCount(ctx->mailbox.queue) > 0) {
 8001bc0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f007 f918 	bl	8008dfc <osMessageQueueGetCount>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	bf14      	ite	ne
 8001bd2:	2301      	movne	r3, #1
 8001bd4:	2300      	moveq	r3, #0
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f000 8107 	beq.w	8001dec <_ZN9AppMotion16MotionController10motionTaskEPv+0x438>
			AppParser::MOTION_PKT_t pkt;
			osMessageQueueGet(ctx->mailbox.queue, &pkt, 0, 5);
 8001bde:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001be2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001be4:	f107 0120 	add.w	r1, r7, #32
 8001be8:	2305      	movs	r3, #5
 8001bea:	2200      	movs	r2, #0
 8001bec:	f007 f8a8 	bl	8008d40 <osMessageQueueGet>
			char buffer[20] = { 0 };
 8001bf0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001bf4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	605a      	str	r2, [r3, #4]
 8001c04:	609a      	str	r2, [r3, #8]
 8001c06:	60da      	str	r2, [r3, #12]
			sprintf((char*) &buffer, "cmd:%ld, arg:%ld\r\n", (uint32_t) pkt.cmd,
 8001c08:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001c0c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001c16:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f107 000c 	add.w	r0, r7, #12
 8001c20:	4949      	ldr	r1, [pc, #292]	; (8001d48 <_ZN9AppMotion16MotionController10motionTaskEPv+0x394>)
 8001c22:	f00a fe4b 	bl	800c8bc <siprintf>
					pkt.arg);
			HAL_UART_Transmit(&huart3, (uint8_t*) buffer, sizeof(buffer), 10);
 8001c26:	f107 010c 	add.w	r1, r7, #12
 8001c2a:	230a      	movs	r3, #10
 8001c2c:	2214      	movs	r2, #20
 8001c2e:	4847      	ldr	r0, [pc, #284]	; (8001d4c <_ZN9AppMotion16MotionController10motionTaskEPv+0x398>)
 8001c30:	f005 fc34 	bl	800749c <HAL_UART_Transmit>
			if (pkt.cmd == AppParser::MOTION_CMD::MOVE_FWD) {
 8001c34:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001c38:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d129      	bne.n	8001c96 <_ZN9AppMotion16MotionController10motionTaskEPv+0x2e2>
				servo.turnFront();
 8001c42:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 fa0d 	bl	8002066 <_ZN9AppMotion5Servo9turnFrontEv>
				lmotor.setSpeed(30);
 8001c4c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c50:	211e      	movs	r1, #30
 8001c52:	4618      	mov	r0, r3
 8001c54:	f000 fa3e 	bl	80020d4 <_ZN9AppMotion5Motor8setSpeedEm>
				rmotor.setSpeed(30);
 8001c58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c5c:	211e      	movs	r1, #30
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 fa38 	bl	80020d4 <_ZN9AppMotion5Motor8setSpeedEm>
				lmotor.setForward();
 8001c64:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f000 faa0 	bl	80021ae <_ZN9AppMotion5Motor10setForwardEv>
				rmotor.setForward();
 8001c6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c72:	4618      	mov	r0, r3
 8001c74:	f000 fa9b 	bl	80021ae <_ZN9AppMotion5Motor10setForwardEv>
				osDelay(500); // replace delay with tachometer count down
 8001c78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c7c:	f006 ff72 	bl	8008b64 <osDelay>
				lmotor.halt();
 8001c80:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c84:	4618      	mov	r0, r3
 8001c86:	f000 fa65 	bl	8002154 <_ZN9AppMotion5Motor4haltEv>
				rmotor.halt();
 8001c8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f000 fa60 	bl	8002154 <_ZN9AppMotion5Motor4haltEv>
 8001c94:	e0aa      	b.n	8001dec <_ZN9AppMotion16MotionController10motionTaskEPv+0x438>
			} else if (pkt.cmd == AppParser::MOTION_CMD::MOVE_LEFT_FWD) {
 8001c96:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001c9a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b03      	cmp	r3, #3
 8001ca2:	d155      	bne.n	8001d50 <_ZN9AppMotion16MotionController10motionTaskEPv+0x39c>
				turn(lmotor, rmotor, servo, false, true, pkt.arg);
 8001ca4:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001ca8:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001cac:	f507 7482 	add.w	r4, r7, #260	; 0x104
 8001cb0:	461d      	mov	r5, r3
 8001cb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cb6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001cba:	e884 0003 	stmia.w	r4, {r0, r1}
 8001cbe:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001cc2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001cc6:	f507 748e 	add.w	r4, r7, #284	; 0x11c
 8001cca:	461d      	mov	r5, r3
 8001ccc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cd0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001cd4:	e884 0003 	stmia.w	r4, {r0, r1}
 8001cd8:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001cdc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001ce0:	f507 749a 	add.w	r4, r7, #308	; 0x134
 8001ce4:	461d      	mov	r5, r3
 8001ce6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ce8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cea:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001cee:	e884 0003 	stmia.w	r4, {r0, r1}
 8001cf2:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001cf6:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f507 729a 	add.w	r2, r7, #308	; 0x134
 8001d00:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8001d04:	f507 7082 	add.w	r0, r7, #260	; 0x104
 8001d08:	9301      	str	r3, [sp, #4]
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f000 f876 	bl	8001e00 <_ZN9AppMotion16MotionController4turnENS_5MotorES1_NS_5ServoEbbm>
 8001d14:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff fe0f 	bl	800193c <_ZN9AppMotion5ServoD1Ev>
 8001d1e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff fe15 	bl	8001952 <_ZN9AppMotion5MotorD1Ev>
 8001d28:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff fe10 	bl	8001952 <_ZN9AppMotion5MotorD1Ev>
 8001d32:	e05b      	b.n	8001dec <_ZN9AppMotion16MotionController10motionTaskEPv+0x438>
 8001d34:	20000358 	.word	0x20000358
 8001d38:	40020000 	.word	0x40020000
 8001d3c:	20000430 	.word	0x20000430
 8001d40:	2000026c 	.word	0x2000026c
 8001d44:	2000028c 	.word	0x2000028c
 8001d48:	0800eb54 	.word	0x0800eb54
 8001d4c:	20000478 	.word	0x20000478

			} else if (pkt.cmd == AppParser::MOTION_CMD::MOVE_RIGHT_FWD)
 8001d50:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001d54:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d146      	bne.n	8001dec <_ZN9AppMotion16MotionController10motionTaskEPv+0x438>
				turn(lmotor, rmotor, servo, true, true, pkt.arg);
 8001d5e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001d62:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001d66:	f507 74a6 	add.w	r4, r7, #332	; 0x14c
 8001d6a:	461d      	mov	r5, r3
 8001d6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d70:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001d74:	e884 0003 	stmia.w	r4, {r0, r1}
 8001d78:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001d7c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001d80:	f507 74b2 	add.w	r4, r7, #356	; 0x164
 8001d84:	461d      	mov	r5, r3
 8001d86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d8a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001d8e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001d92:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001d96:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001d9a:	f507 74be 	add.w	r4, r7, #380	; 0x17c
 8001d9e:	461d      	mov	r5, r3
 8001da0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001da2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001da4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001da8:	e884 0003 	stmia.w	r4, {r0, r1}
 8001dac:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001db0:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 8001dba:	f507 71b2 	add.w	r1, r7, #356	; 0x164
 8001dbe:	f507 70a6 	add.w	r0, r7, #332	; 0x14c
 8001dc2:	9301      	str	r3, [sp, #4]
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	2301      	movs	r3, #1
 8001dca:	f000 f819 	bl	8001e00 <_ZN9AppMotion16MotionController4turnENS_5MotorES1_NS_5ServoEbbm>
 8001dce:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fdb2 	bl	800193c <_ZN9AppMotion5ServoD1Ev>
 8001dd8:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff fdb8 	bl	8001952 <_ZN9AppMotion5MotorD1Ev>
 8001de2:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff fdb3 	bl	8001952 <_ZN9AppMotion5MotorD1Ev>
		}
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 8001dec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001df0:	4801      	ldr	r0, [pc, #4]	; (8001df8 <_ZN9AppMotion16MotionController10motionTaskEPv+0x444>)
 8001df2:	f002 fbda 	bl	80045aa <HAL_GPIO_TogglePin>

	}
 8001df6:	e617      	b.n	8001a28 <_ZN9AppMotion16MotionController10motionTaskEPv+0x74>
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	00000000 	.word	0x00000000

08001e00 <_ZN9AppMotion16MotionController4turnENS_5MotorES1_NS_5ServoEbbm>:
}

void MotionController::turn(Motor lmotor, Motor rmotor, Servo servo, bool isRight, bool isFwd, uint32_t arg)
{
 8001e00:	b5b0      	push	{r4, r5, r7, lr}
 8001e02:	ed2d 8b02 	vpush	{d8}
 8001e06:	b090      	sub	sp, #64	; 0x40
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
 8001e10:	70fb      	strb	r3, [r7, #3]
	isRight? servo.turnRight(): servo.turnLeft();
 8001e12:	78fb      	ldrb	r3, [r7, #3]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <_ZN9AppMotion16MotionController4turnENS_5MotorES1_NS_5ServoEbbm+0x20>
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 f913 	bl	8002044 <_ZN9AppMotion5Servo9turnRightEv>
 8001e1e:	e002      	b.n	8001e26 <_ZN9AppMotion16MotionController4turnENS_5MotorES1_NS_5ServoEbbm+0x26>
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f8fe 	bl	8002022 <_ZN9AppMotion5Servo8turnLeftEv>

	isFwd ? lmotor.setForward(): lmotor.setBackward();
 8001e26:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <_ZN9AppMotion16MotionController4turnENS_5MotorES1_NS_5ServoEbbm+0x36>
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f000 f9bd 	bl	80021ae <_ZN9AppMotion5Motor10setForwardEv>
 8001e34:	e002      	b.n	8001e3c <_ZN9AppMotion16MotionController4turnENS_5MotorES1_NS_5ServoEbbm+0x3c>
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f000 f9d1 	bl	80021de <_ZN9AppMotion5Motor11setBackwardEv>
	isFwd ? rmotor.setForward(): rmotor.setBackward();
 8001e3c:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d003      	beq.n	8001e4c <_ZN9AppMotion16MotionController4turnENS_5MotorES1_NS_5ServoEbbm+0x4c>
 8001e44:	68b8      	ldr	r0, [r7, #8]
 8001e46:	f000 f9b2 	bl	80021ae <_ZN9AppMotion5Motor10setForwardEv>
 8001e4a:	e002      	b.n	8001e52 <_ZN9AppMotion16MotionController4turnENS_5MotorES1_NS_5ServoEbbm+0x52>
 8001e4c:	68b8      	ldr	r0, [r7, #8]
 8001e4e:	f000 f9c6 	bl	80021de <_ZN9AppMotion5Motor11setBackwardEv>
	isRight ? lmotor.setSpeed(50) : lmotor.setSpeed(10);
 8001e52:	78fb      	ldrb	r3, [r7, #3]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d004      	beq.n	8001e62 <_ZN9AppMotion16MotionController4turnENS_5MotorES1_NS_5ServoEbbm+0x62>
 8001e58:	2132      	movs	r1, #50	; 0x32
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f000 f93a 	bl	80020d4 <_ZN9AppMotion5Motor8setSpeedEm>
 8001e60:	e003      	b.n	8001e6a <_ZN9AppMotion16MotionController4turnENS_5MotorES1_NS_5ServoEbbm+0x6a>
 8001e62:	210a      	movs	r1, #10
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	f000 f935 	bl	80020d4 <_ZN9AppMotion5Motor8setSpeedEm>
	isRight ? rmotor.setSpeed(10) : rmotor.setSpeed(50);
 8001e6a:	78fb      	ldrb	r3, [r7, #3]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d004      	beq.n	8001e7a <_ZN9AppMotion16MotionController4turnENS_5MotorES1_NS_5ServoEbbm+0x7a>
 8001e70:	210a      	movs	r1, #10
 8001e72:	68b8      	ldr	r0, [r7, #8]
 8001e74:	f000 f92e 	bl	80020d4 <_ZN9AppMotion5Motor8setSpeedEm>
 8001e78:	e003      	b.n	8001e82 <_ZN9AppMotion16MotionController4turnENS_5MotorES1_NS_5ServoEbbm+0x82>
 8001e7a:	2132      	movs	r1, #50	; 0x32
 8001e7c:	68b8      	ldr	r0, [r7, #8]
 8001e7e:	f000 f929 	bl	80020d4 <_ZN9AppMotion5Motor8setSpeedEm>
	uint32_t timeNow = HAL_GetTick();
 8001e82:	f001 fced 	bl	8003860 <HAL_GetTick>
 8001e86:	63f8      	str	r0, [r7, #60]	; 0x3c
	uint8_t buf[30] = {0};
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]
 8001e8c:	f107 0318 	add.w	r3, r7, #24
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
 8001e9c:	615a      	str	r2, [r3, #20]
 8001e9e:	831a      	strh	r2, [r3, #24]
	float target = (float) arg;
 8001ea0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ea2:	ee07 3a90 	vmov	s15, r3
 8001ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eaa:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float angle = 0;
 8001eae:	f04f 0300 	mov.w	r3, #0
 8001eb2:	63bb      	str	r3, [r7, #56]	; 0x38
	do {


		angle += sensor_data.imu->gyro[2]
 8001eb4:	4b4a      	ldr	r3, [pc, #296]	; (8001fe0 <_ZN9AppMotion16MotionController4turnENS_5MotorES1_NS_5ServoEbbm+0x1e0>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	ed93 8a06 	vldr	s16, [r3, #24]
				* (HAL_GetTick() - timeNow) * 0.001;
 8001ebc:	f001 fcd0 	bl	8003860 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	ee07 3a90 	vmov	s15, r3
 8001eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ece:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001ed2:	ee17 0a90 	vmov	r0, s15
 8001ed6:	f7fe fb37 	bl	8000548 <__aeabi_f2d>
 8001eda:	a33f      	add	r3, pc, #252	; (adr r3, 8001fd8 <_ZN9AppMotion16MotionController4turnENS_5MotorES1_NS_5ServoEbbm+0x1d8>)
 8001edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee0:	f7fe fb8a 	bl	80005f8 <__aeabi_dmul>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4614      	mov	r4, r2
 8001eea:	461d      	mov	r5, r3
		angle += sensor_data.imu->gyro[2]
 8001eec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001eee:	f7fe fb2b 	bl	8000548 <__aeabi_f2d>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	4620      	mov	r0, r4
 8001ef8:	4629      	mov	r1, r5
 8001efa:	f7fe f9c7 	bl	800028c <__adddf3>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	4610      	mov	r0, r2
 8001f04:	4619      	mov	r1, r3
 8001f06:	f7fe fe4f 	bl	8000ba8 <__aeabi_d2f>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	63bb      	str	r3, [r7, #56]	; 0x38
		if ((!isRight && isFwd && angle > target) || (isRight && isFwd && angle < -target) ||
 8001f0e:	78fb      	ldrb	r3, [r7, #3]
 8001f10:	f083 0301 	eor.w	r3, r3, #1
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00c      	beq.n	8001f34 <_ZN9AppMotion16MotionController4turnENS_5MotorES1_NS_5ServoEbbm+0x134>
 8001f1a:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d008      	beq.n	8001f34 <_ZN9AppMotion16MotionController4turnENS_5MotorES1_NS_5ServoEbbm+0x134>
 8001f22:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001f26:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f32:	dc45      	bgt.n	8001fc0 <_ZN9AppMotion16MotionController4turnENS_5MotorES1_NS_5ServoEbbm+0x1c0>
 8001f34:	78fb      	ldrb	r3, [r7, #3]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00e      	beq.n	8001f58 <_ZN9AppMotion16MotionController4turnENS_5MotorES1_NS_5ServoEbbm+0x158>
 8001f3a:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00a      	beq.n	8001f58 <_ZN9AppMotion16MotionController4turnENS_5MotorES1_NS_5ServoEbbm+0x158>
 8001f42:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f46:	eef1 7a67 	vneg.f32	s15, s15
 8001f4a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001f4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f56:	d433      	bmi.n	8001fc0 <_ZN9AppMotion16MotionController4turnENS_5MotorES1_NS_5ServoEbbm+0x1c0>
				(!isRight && !isFwd && angle < -target) || (isRight && !isFwd && angle > target))
 8001f58:	78fb      	ldrb	r3, [r7, #3]
 8001f5a:	f083 0301 	eor.w	r3, r3, #1
 8001f5e:	b2db      	uxtb	r3, r3
		if ((!isRight && isFwd && angle > target) || (isRight && isFwd && angle < -target) ||
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d011      	beq.n	8001f88 <_ZN9AppMotion16MotionController4turnENS_5MotorES1_NS_5ServoEbbm+0x188>
				(!isRight && !isFwd && angle < -target) || (isRight && !isFwd && angle > target))
 8001f64:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001f68:	f083 0301 	eor.w	r3, r3, #1
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00a      	beq.n	8001f88 <_ZN9AppMotion16MotionController4turnENS_5MotorES1_NS_5ServoEbbm+0x188>
 8001f72:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f76:	eef1 7a67 	vneg.f32	s15, s15
 8001f7a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001f7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f86:	d41b      	bmi.n	8001fc0 <_ZN9AppMotion16MotionController4turnENS_5MotorES1_NS_5ServoEbbm+0x1c0>
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00f      	beq.n	8001fae <_ZN9AppMotion16MotionController4turnENS_5MotorES1_NS_5ServoEbbm+0x1ae>
 8001f8e:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001f92:	f083 0301 	eor.w	r3, r3, #1
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d008      	beq.n	8001fae <_ZN9AppMotion16MotionController4turnENS_5MotorES1_NS_5ServoEbbm+0x1ae>
 8001f9c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001fa0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001fa4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fac:	dc08      	bgt.n	8001fc0 <_ZN9AppMotion16MotionController4turnENS_5MotorES1_NS_5ServoEbbm+0x1c0>
			break;
		timeNow = HAL_GetTick();
 8001fae:	f001 fc57 	bl	8003860 <HAL_GetTick>
 8001fb2:	63f8      	str	r0, [r7, #60]	; 0x3c
		osDelay(50);
 8001fb4:	2032      	movs	r0, #50	; 0x32
 8001fb6:	f006 fdd5 	bl	8008b64 <osDelay>
		osThreadYield();
 8001fba:	f006 fdb3 	bl	8008b24 <osThreadYield>
		angle += sensor_data.imu->gyro[2]
 8001fbe:	e779      	b.n	8001eb4 <_ZN9AppMotion16MotionController4turnENS_5MotorES1_NS_5ServoEbbm+0xb4>

	} while (1);

	lmotor.halt();
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f000 f8c7 	bl	8002154 <_ZN9AppMotion5Motor4haltEv>
	rmotor.halt();
 8001fc6:	68b8      	ldr	r0, [r7, #8]
 8001fc8:	f000 f8c4 	bl	8002154 <_ZN9AppMotion5Motor4haltEv>
}
 8001fcc:	bf00      	nop
 8001fce:	3740      	adds	r7, #64	; 0x40
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	ecbd 8b02 	vpop	{d8}
 8001fd6:	bdb0      	pop	{r4, r5, r7, pc}
 8001fd8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001fdc:	3f50624d 	.word	0x3f50624d
 8001fe0:	20000258 	.word	0x20000258

08001fe4 <_ZN9AppMotion5ServoC1EP17TIM_HandleTypeDefmmmm>:

Servo::Servo(TIM_HandleTypeDef *ctrl, uint32_t channel, uint32_t min,
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
 8001ff0:	603b      	str	r3, [r7, #0]
		uint32_t max, uint32_t center) {
	this->htimer = ctrl;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	68ba      	ldr	r2, [r7, #8]
 8001ff6:	601a      	str	r2, [r3, #0]
	this->channel = channel;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	605a      	str	r2, [r3, #4]
	this->MIN_PWM = min;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	60da      	str	r2, [r3, #12]
	this->MAX_PWM = max;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	611a      	str	r2, [r3, #16]
	this->CTR_PWM = center;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	69fa      	ldr	r2, [r7, #28]
 800200e:	615a      	str	r2, [r3, #20]
	HAL_TIM_PWM_Start(ctrl, channel);
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	68b8      	ldr	r0, [r7, #8]
 8002014:	f004 f9ce 	bl	80063b4 <HAL_TIM_PWM_Start>
}
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <_ZN9AppMotion5Servo8turnLeftEv>:

void Servo::turnLeft() {
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
	this->htimer->Instance->CCR1 = MIN_PWM;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	68d2      	ldr	r2, [r2, #12]
 8002034:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(TURN_DELAY_MS);
 8002036:	20fa      	movs	r0, #250	; 0xfa
 8002038:	f006 fd94 	bl	8008b64 <osDelay>

}
 800203c:	bf00      	nop
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <_ZN9AppMotion5Servo9turnRightEv>:
void Servo::turnRight() {
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
	this->htimer->Instance->CCR1 = MAX_PWM;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6912      	ldr	r2, [r2, #16]
 8002056:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(TURN_DELAY_MS);
 8002058:	20fa      	movs	r0, #250	; 0xfa
 800205a:	f006 fd83 	bl	8008b64 <osDelay>
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <_ZN9AppMotion5Servo9turnFrontEv>:

void Servo::turnFront() {
 8002066:	b580      	push	{r7, lr}
 8002068:	b082      	sub	sp, #8
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
	this->htimer->Instance->CCR1 = CTR_PWM;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	6952      	ldr	r2, [r2, #20]
 8002078:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(TURN_DELAY_MS);
 800207a:	20fa      	movs	r0, #250	; 0xfa
 800207c:	f006 fd72 	bl	8008b64 <osDelay>
}
 8002080:	bf00      	nop
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <_ZN9AppMotion5MotorC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefS4_ttm>:

Motor::Motor(TIM_HandleTypeDef *ctrl, uint32_t channel, GPIO_TypeDef *gpioAPort,
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
 8002094:	603b      	str	r3, [r7, #0]
		GPIO_TypeDef *gpioBPort, uint16_t gpioApin, uint16_t gpioBpin,
		uint32_t pwm_period) {

	this->htimer = ctrl;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	68ba      	ldr	r2, [r7, #8]
 800209a:	601a      	str	r2, [r3, #0]
	this->channel = channel;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	605a      	str	r2, [r3, #4]
	this->period = pwm_period;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020a6:	609a      	str	r2, [r3, #8]
	this->gpioAPort = gpioAPort;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	60da      	str	r2, [r3, #12]
	this->gpioBPort = gpioBPort;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	611a      	str	r2, [r3, #16]
	this->gpioAPin = gpioApin;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8bba      	ldrh	r2, [r7, #28]
 80020b8:	829a      	strh	r2, [r3, #20]
	this->gpioBpin = gpioBpin;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	8c3a      	ldrh	r2, [r7, #32]
 80020be:	82da      	strh	r2, [r3, #22]
	HAL_TIM_PWM_Start(ctrl, channel);
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	68b8      	ldr	r0, [r7, #8]
 80020c4:	f004 f976 	bl	80063b4 <HAL_TIM_PWM_Start>

}
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
	...

080020d4 <_ZN9AppMotion5Motor8setSpeedEm>:

bool Motor::setSpeed(uint32_t percent) {
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
	if (percent > 100)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	2b64      	cmp	r3, #100	; 0x64
 80020e2:	d901      	bls.n	80020e8 <_ZN9AppMotion5Motor8setSpeedEm+0x14>
		return false;
 80020e4:	2300      	movs	r3, #0
 80020e6:	e02c      	b.n	8002142 <_ZN9AppMotion5Motor8setSpeedEm+0x6e>
	uint32_t value = this->period / 100 * percent;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	4a18      	ldr	r2, [pc, #96]	; (8002150 <_ZN9AppMotion5Motor8setSpeedEm+0x7c>)
 80020ee:	fba2 2303 	umull	r2, r3, r2, r3
 80020f2:	095a      	lsrs	r2, r3, #5
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	fb02 f303 	mul.w	r3, r2, r3
 80020fa:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(this->htimer, this->channel, value);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d105      	bne.n	8002110 <_ZN9AppMotion5Motor8setSpeedEm+0x3c>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	635a      	str	r2, [r3, #52]	; 0x34
 800210e:	e018      	b.n	8002142 <_ZN9AppMotion5Motor8setSpeedEm+0x6e>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b04      	cmp	r3, #4
 8002116:	d105      	bne.n	8002124 <_ZN9AppMotion5Motor8setSpeedEm+0x50>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	639a      	str	r2, [r3, #56]	; 0x38
 8002122:	e00e      	b.n	8002142 <_ZN9AppMotion5Motor8setSpeedEm+0x6e>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b08      	cmp	r3, #8
 800212a:	d105      	bne.n	8002138 <_ZN9AppMotion5Motor8setSpeedEm+0x64>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	63da      	str	r2, [r3, #60]	; 0x3c
 8002136:	e004      	b.n	8002142 <_ZN9AppMotion5Motor8setSpeedEm+0x6e>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002142:	4618      	mov	r0, r3
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	51eb851f 	.word	0x51eb851f

08002154 <_ZN9AppMotion5Motor4haltEv>:

void Motor::halt() {
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(this->htimer, this->channel, 0);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d105      	bne.n	8002170 <_ZN9AppMotion5Motor4haltEv+0x1c>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2200      	movs	r2, #0
 800216c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800216e:	e018      	b.n	80021a2 <_ZN9AppMotion5Motor4haltEv+0x4e>
	__HAL_TIM_SET_COMPARE(this->htimer, this->channel, 0);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	2b04      	cmp	r3, #4
 8002176:	d105      	bne.n	8002184 <_ZN9AppMotion5Motor4haltEv+0x30>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2200      	movs	r2, #0
 8002180:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002182:	e00e      	b.n	80021a2 <_ZN9AppMotion5Motor4haltEv+0x4e>
	__HAL_TIM_SET_COMPARE(this->htimer, this->channel, 0);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b08      	cmp	r3, #8
 800218a:	d105      	bne.n	8002198 <_ZN9AppMotion5Motor4haltEv+0x44>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2200      	movs	r2, #0
 8002194:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002196:	e004      	b.n	80021a2 <_ZN9AppMotion5Motor4haltEv+0x4e>
	__HAL_TIM_SET_COMPARE(this->htimer, this->channel, 0);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2200      	movs	r2, #0
 80021a0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <_ZN9AppMotion5Motor10setForwardEv>:

void Motor::setForward() {
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b082      	sub	sp, #8
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->gpioAPort, this->gpioAPin, GPIO_PIN_RESET);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68d8      	ldr	r0, [r3, #12]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	8a9b      	ldrh	r3, [r3, #20]
 80021be:	2200      	movs	r2, #0
 80021c0:	4619      	mov	r1, r3
 80021c2:	f002 f9d9 	bl	8004578 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(this->gpioBPort, this->gpioBpin, GPIO_PIN_SET);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6918      	ldr	r0, [r3, #16]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	8adb      	ldrh	r3, [r3, #22]
 80021ce:	2201      	movs	r2, #1
 80021d0:	4619      	mov	r1, r3
 80021d2:	f002 f9d1 	bl	8004578 <HAL_GPIO_WritePin>
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <_ZN9AppMotion5Motor11setBackwardEv>:

void Motor::setBackward() {
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->gpioAPort, this->gpioAPin, GPIO_PIN_SET);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68d8      	ldr	r0, [r3, #12]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	8a9b      	ldrh	r3, [r3, #20]
 80021ee:	2201      	movs	r2, #1
 80021f0:	4619      	mov	r1, r3
 80021f2:	f002 f9c1 	bl	8004578 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(this->gpioBPort, this->gpioBpin, GPIO_PIN_RESET);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6918      	ldr	r0, [r3, #16]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	8adb      	ldrh	r3, [r3, #22]
 80021fe:	2200      	movs	r2, #0
 8002200:	4619      	mov	r1, r3
 8002202:	f002 f9b9 	bl	8004578 <HAL_GPIO_WritePin>
}
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <_ZN9AppParser8ListenerC1EP5u_ctx>:

namespace AppParser {

static volatile BUF_CMP_t uartRxBuf[10];

Listener::Listener(u_ctx *ctx) {
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
 8002216:	6039      	str	r1, [r7, #0]
	this->ctx = ctx;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	601a      	str	r2, [r3, #0]
}
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4618      	mov	r0, r3
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <_ZN9AppParser8ListenerD1Ev>:

Listener::~Listener() {
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
}
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4618      	mov	r0, r3
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
	...

08002244 <_ZN9AppParser8Listener6invokeEv>:
;
// not needed

/*! called from ISR */
volatile void Listener::invoke() {
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
	//osMutexRelease(this->ctx->mailbox.lock);
	AppMessage_t msg;
	memcpy(&msg.buffer, (const BUF_CMP_t*) &uartRxBuf, 10);
 800224c:	4a0e      	ldr	r2, [pc, #56]	; (8002288 <_ZN9AppParser8Listener6invokeEv+0x44>)
 800224e:	f107 030c 	add.w	r3, r7, #12
 8002252:	ca07      	ldmia	r2, {r0, r1, r2}
 8002254:	c303      	stmia	r3!, {r0, r1}
 8002256:	801a      	strh	r2, [r3, #0]
	memset((BUF_CMP_t*) &uartRxBuf, 0, 10);
 8002258:	220a      	movs	r2, #10
 800225a:	2100      	movs	r1, #0
 800225c:	480a      	ldr	r0, [pc, #40]	; (8002288 <_ZN9AppParser8Listener6invokeEv+0x44>)
 800225e:	f009 fc45 	bl	800baec <memset>
	osStatus_t tmp = osMessageQueuePut(ctx->mailbox.queue, &msg, 0, 0);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002268:	f107 010c 	add.w	r1, r7, #12
 800226c:	2300      	movs	r3, #0
 800226e:	2200      	movs	r2, #0
 8002270:	f006 fd06 	bl	8008c80 <osMessageQueuePut>
 8002274:	61f8      	str	r0, [r7, #28]
	//HAL_UART_Transmit(&huart3, (uint8_t *)ibuf, sizeof(ibuf), 10);
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 8002276:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800227a:	4804      	ldr	r0, [pc, #16]	; (800228c <_ZN9AppParser8Listener6invokeEv+0x48>)
 800227c:	f002 f995 	bl	80045aa <HAL_GPIO_TogglePin>

	//HAL_UART_Receive_DMA(&huart3, (uint8_t *) aRxBuffer, 5);
}
 8002280:	bf00      	nop
 8002282:	3720      	adds	r7, #32
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	20000290 	.word	0x20000290
 800228c:	40021000 	.word	0x40021000

08002290 <_ZN9AppParser9ProcessorC1EP5u_ctxS2_>:

Processor::Processor(u_ctx *rx_ctx, u_ctx *tx_ctx) {
 8002290:	b590      	push	{r4, r7, lr}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
	this->this_ctx = rx_ctx;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	601a      	str	r2, [r3, #0]
	this->o_ctx = tx_ctx;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	605a      	str	r2, [r3, #4]
	this->this_ctx->mailbox.queue = osMessageQueueNew(10, sizeof(AppMessage_t),
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681c      	ldr	r4, [r3, #0]
 80022ac:	2200      	movs	r2, #0
 80022ae:	2110      	movs	r1, #16
 80022b0:	200a      	movs	r0, #10
 80022b2:	f006 fc72 	bl	8008b9a <osMessageQueueNew>
 80022b6:	4603      	mov	r3, r0
 80022b8:	62a3      	str	r3, [r4, #40]	; 0x28
	NULL);
}
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	4618      	mov	r0, r3
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd90      	pop	{r4, r7, pc}

080022c4 <_ZN9AppParser9ProcessorD1Ev>:

Processor::~Processor() {
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
}
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4618      	mov	r0, r3
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
	...

080022dc <_ZN9AppParser9Processor5startEv>:
void Processor::startImpl(void *_this) // hardfaults on queue for some reason so made static
		{
	//static_cast<Processor *>(_this)->processorTask();
}

void Processor::start(void) {
 80022dc:	b590      	push	{r4, r7, lr}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
    ctx_wrapper * wrapper_instance = new ctx_wrapper();
 80022e4:	2008      	movs	r0, #8
 80022e6:	f009 faa9 	bl	800b83c <_Znwj>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	2200      	movs	r2, #0
 80022f2:	605a      	str	r2, [r3, #4]
 80022f4:	60fb      	str	r3, [r7, #12]
    wrapper_instance->rx_ctx = this_ctx;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	601a      	str	r2, [r3, #0]
    wrapper_instance->tx_ctx = o_ctx;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	605a      	str	r2, [r3, #4]

    this->this_ctx->runner = osThreadNew((osThreadFunc_t) Processor::processorTask,
    		wrapper_instance,
                                    &(this_ctx->attr));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	1d1a      	adds	r2, r3, #4
    this->this_ctx->runner = osThreadNew((osThreadFunc_t) Processor::processorTask,
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681c      	ldr	r4, [r3, #0]
 8002310:	68f9      	ldr	r1, [r7, #12]
 8002312:	4804      	ldr	r0, [pc, #16]	; (8002324 <_ZN9AppParser9Processor5startEv+0x48>)
 8002314:	f006 fb72 	bl	80089fc <osThreadNew>
 8002318:	4603      	mov	r3, r0
 800231a:	6023      	str	r3, [r4, #0]

    return;
 800231c:	bf00      	nop
}
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	bd90      	pop	{r4, r7, pc}
 8002324:	08002329 	.word	0x08002329

08002328 <_ZN9AppParser9Processor13processorTaskEPv>:

void Processor::processorTask(void *pv) {
 8002328:	b580      	push	{r7, lr}
 800232a:	b08e      	sub	sp, #56	; 0x38
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart3, (BUF_CMP_t*) uartRxBuf, 10);
 8002330:	220a      	movs	r2, #10
 8002332:	4947      	ldr	r1, [pc, #284]	; (8002450 <_ZN9AppParser9Processor13processorTaskEPv+0x128>)
 8002334:	4847      	ldr	r0, [pc, #284]	; (8002454 <_ZN9AppParser9Processor13processorTaskEPv+0x12c>)
 8002336:	f005 f943 	bl	80075c0 <HAL_UART_Receive_DMA>

	ctx_wrapper *wrapper = static_cast<ctx_wrapper*>(pv);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	637b      	str	r3, [r7, #52]	; 0x34

	    // Access rx_ctx and tx_ctx pointers from the wrapper
	    u_ctx *rx_ctx = wrapper->rx_ctx;
 800233e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	633b      	str	r3, [r7, #48]	; 0x30
	    u_ctx *tx_ctx = wrapper->tx_ctx;
 8002344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	62fb      	str	r3, [r7, #44]	; 0x2c

	for (;;) {

		//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
		osDelay(50);
 800234a:	2032      	movs	r0, #50	; 0x32
 800234c:	f006 fc0a 	bl	8008b64 <osDelay>
				osThreadYield();
 8002350:	f006 fbe8 	bl	8008b24 <osThreadYield>
		 * where (k + Ni) mod N = k for all integers i and k < N.
		 *
		 * Maybe this algorithm can be improved, as up to 2 messages will be lost.
		 *
		 */
		if (uxQueueMessagesWaiting((QueueHandle_t) rx_ctx->mailbox.queue)) {
 8002354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002358:	4618      	mov	r0, r3
 800235a:	f007 fa5d 	bl	8009818 <uxQueueMessagesWaiting>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	bf14      	ite	ne
 8002364:	2301      	movne	r3, #1
 8002366:	2300      	moveq	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0ed      	beq.n	800234a <_ZN9AppParser9Processor13processorTaskEPv+0x22>
			AppMessage_t msg;
			osMessageQueueGet(rx_ctx->mailbox.queue, &msg.buffer, 0, 5);
 800236e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002370:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002372:	f107 0118 	add.w	r1, r7, #24
 8002376:	2305      	movs	r3, #5
 8002378:	2200      	movs	r2, #0
 800237a:	f006 fce1 	bl	8008d40 <osMessageQueueGet>
			// osMessageQueueReset(procCtx.mailbox.queue);

			/* DATA VALIDATION */
			if (!isEq<BUF_CMP_t>(START_CHAR, msg.buffer[0])) {
 800237e:	f107 0318 	add.w	r3, r7, #24
 8002382:	4619      	mov	r1, r3
 8002384:	4834      	ldr	r0, [pc, #208]	; (8002458 <_ZN9AppParser9Processor13processorTaskEPv+0x130>)
 8002386:	f000 f913 	bl	80025b0 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 800238a:	4603      	mov	r3, r0
 800238c:	f083 0301 	eor.w	r3, r3, #1
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d005      	beq.n	80023a2 <_ZN9AppParser9Processor13processorTaskEPv+0x7a>
				HAL_UART_Transmit(&huart3, (BUF_CMP_t*) "WRONG START",
 8002396:	230a      	movs	r3, #10
 8002398:	220c      	movs	r2, #12
 800239a:	4930      	ldr	r1, [pc, #192]	; (800245c <_ZN9AppParser9Processor13processorTaskEPv+0x134>)
 800239c:	482d      	ldr	r0, [pc, #180]	; (8002454 <_ZN9AppParser9Processor13processorTaskEPv+0x12c>)
 800239e:	f005 f87d 	bl	800749c <HAL_UART_Transmit>
						sizeof("WRONG START"), 10);
			}
			if (!isEq<BUF_CMP_t>(END_CHAR, msg.buffer[9])) {
 80023a2:	f107 0318 	add.w	r3, r7, #24
 80023a6:	3309      	adds	r3, #9
 80023a8:	4619      	mov	r1, r3
 80023aa:	482d      	ldr	r0, [pc, #180]	; (8002460 <_ZN9AppParser9Processor13processorTaskEPv+0x138>)
 80023ac:	f000 f900 	bl	80025b0 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 80023b0:	4603      	mov	r3, r0
 80023b2:	f083 0301 	eor.w	r3, r3, #1
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d005      	beq.n	80023c8 <_ZN9AppParser9Processor13processorTaskEPv+0xa0>
				HAL_UART_Transmit(&huart3, (BUF_CMP_t*) "WRONG END",
 80023bc:	230a      	movs	r3, #10
 80023be:	220a      	movs	r2, #10
 80023c0:	4928      	ldr	r1, [pc, #160]	; (8002464 <_ZN9AppParser9Processor13processorTaskEPv+0x13c>)
 80023c2:	4824      	ldr	r0, [pc, #144]	; (8002454 <_ZN9AppParser9Processor13processorTaskEPv+0x12c>)
 80023c4:	f005 f86a 	bl	800749c <HAL_UART_Transmit>
						sizeof("WRONG END"), 10);
			}
			/******************/

			if (isEq<BUF_CMP_t>(REQ_CHAR, msg.buffer[1])) {
 80023c8:	f107 0318 	add.w	r3, r7, #24
 80023cc:	3301      	adds	r3, #1
 80023ce:	4619      	mov	r1, r3
 80023d0:	4825      	ldr	r0, [pc, #148]	; (8002468 <_ZN9AppParser9Processor13processorTaskEPv+0x140>)
 80023d2:	f000 f8ed 	bl	80025b0 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d11b      	bne.n	8002414 <_ZN9AppParser9Processor13processorTaskEPv+0xec>
				// do request stuff
			} else if (isEq<BUF_CMP_t>(CMD_CHAR, msg.buffer[1])) {
 80023dc:	f107 0318 	add.w	r3, r7, #24
 80023e0:	3301      	adds	r3, #1
 80023e2:	4619      	mov	r1, r3
 80023e4:	4821      	ldr	r0, [pc, #132]	; (800246c <_ZN9AppParser9Processor13processorTaskEPv+0x144>)
 80023e6:	f000 f8e3 	bl	80025b0 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d011      	beq.n	8002414 <_ZN9AppParser9Processor13processorTaskEPv+0xec>
				// do command stuff
				switch (msg.buffer[2]) {
 80023f0:	7ebb      	ldrb	r3, [r7, #26]
 80023f2:	2b6d      	cmp	r3, #109	; 0x6d
 80023f4:	d10d      	bne.n	8002412 <_ZN9AppParser9Processor13processorTaskEPv+0xea>
				case MOTOR_CHAR: {
					MOTION_PKT_t *pkt = getMotionCmdFromBytes(
 80023f6:	f107 0318 	add.w	r3, r7, #24
 80023fa:	4618      	mov	r0, r3
 80023fc:	f000 f83a 	bl	8002474 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh>
 8002400:	62b8      	str	r0, [r7, #40]	; 0x28
							(uint8_t*) &msg.buffer);

					osMessageQueuePut(tx_ctx->mailbox.queue, pkt, 0, 0);
 8002402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002404:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002406:	2300      	movs	r3, #0
 8002408:	2200      	movs	r2, #0
 800240a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800240c:	f006 fc38 	bl	8008c80 <osMessageQueuePut>
					break;
 8002410:	e000      	b.n	8002414 <_ZN9AppParser9Processor13processorTaskEPv+0xec>
				}
				default: {
					// something went wrong..
					break;
 8002412:	bf00      	nop
				}
				}
			}
			char buf[11] = { 0 };
 8002414:	2300      	movs	r3, #0
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	f107 0310 	add.w	r3, r7, #16
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	f8c3 2003 	str.w	r2, [r3, #3]

			snprintf((char*) &buf, 11, "%s", msg.buffer);
 8002424:	f107 0318 	add.w	r3, r7, #24
 8002428:	f107 000c 	add.w	r0, r7, #12
 800242c:	4a10      	ldr	r2, [pc, #64]	; (8002470 <_ZN9AppParser9Processor13processorTaskEPv+0x148>)
 800242e:	210b      	movs	r1, #11
 8002430:	f00a fa10 	bl	800c854 <sniprintf>

			HAL_UART_Transmit(&huart3, (BUF_CMP_t*) buf, sizeof(buf), 100);
 8002434:	f107 010c 	add.w	r1, r7, #12
 8002438:	2364      	movs	r3, #100	; 0x64
 800243a:	220b      	movs	r2, #11
 800243c:	4805      	ldr	r0, [pc, #20]	; (8002454 <_ZN9AppParser9Processor13processorTaskEPv+0x12c>)
 800243e:	f005 f82d 	bl	800749c <HAL_UART_Transmit>

			HAL_UART_Receive_DMA(&huart3, (BUF_CMP_t*) uartRxBuf, 10);
 8002442:	220a      	movs	r2, #10
 8002444:	4902      	ldr	r1, [pc, #8]	; (8002450 <_ZN9AppParser9Processor13processorTaskEPv+0x128>)
 8002446:	4803      	ldr	r0, [pc, #12]	; (8002454 <_ZN9AppParser9Processor13processorTaskEPv+0x12c>)
 8002448:	f005 f8ba 	bl	80075c0 <HAL_UART_Receive_DMA>
		}

	}
 800244c:	e77d      	b.n	800234a <_ZN9AppParser9Processor13processorTaskEPv+0x22>
 800244e:	bf00      	nop
 8002450:	20000290 	.word	0x20000290
 8002454:	20000478 	.word	0x20000478
 8002458:	0800ebdd 	.word	0x0800ebdd
 800245c:	0800eb68 	.word	0x0800eb68
 8002460:	0800ebe1 	.word	0x0800ebe1
 8002464:	0800eb74 	.word	0x0800eb74
 8002468:	0800ebdf 	.word	0x0800ebdf
 800246c:	0800ebde 	.word	0x0800ebde
 8002470:	0800eb80 	.word	0x0800eb80

08002474 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh>:

}

MOTION_PKT_t* Processor::getMotionCmdFromBytes(BUF_CMP_t *bytes) {
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]

	uint32_t val = strtol((const char*) &bytes[4], NULL, 10);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3304      	adds	r3, #4
 8002480:	220a      	movs	r2, #10
 8002482:	2100      	movs	r1, #0
 8002484:	4618      	mov	r0, r3
 8002486:	f00a faff 	bl	800ca88 <strtol>
 800248a:	4603      	mov	r3, r0
 800248c:	60fb      	str	r3, [r7, #12]
	if (val == 0)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x24>
		return NULL; // invalid input or no action
 8002494:	2300      	movs	r3, #0
 8002496:	e07a      	b.n	800258e <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x11a>
	MOTION_PKT_t *pkt = new MOTION_PKT_t();
 8002498:	200c      	movs	r0, #12
 800249a:	f009 f9cf 	bl	800b83c <_Znwj>
 800249e:	4603      	mov	r3, r0
 80024a0:	4619      	mov	r1, r3
 80024a2:	460a      	mov	r2, r1
 80024a4:	2300      	movs	r3, #0
 80024a6:	6013      	str	r3, [r2, #0]
 80024a8:	6053      	str	r3, [r2, #4]
 80024aa:	6093      	str	r3, [r2, #8]
 80024ac:	60b9      	str	r1, [r7, #8]
	pkt->arg = val;
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	605a      	str	r2, [r3, #4]
	switch (bytes[3]) {
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3303      	adds	r3, #3
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	3b62      	subs	r3, #98	; 0x62
 80024bc:	2b10      	cmp	r3, #16
 80024be:	d863      	bhi.n	8002588 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x114>
 80024c0:	a201      	add	r2, pc, #4	; (adr r2, 80024c8 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x54>)
 80024c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c6:	bf00      	nop
 80024c8:	08002521 	.word	0x08002521
 80024cc:	08002589 	.word	0x08002589
 80024d0:	08002589 	.word	0x08002589
 80024d4:	08002589 	.word	0x08002589
 80024d8:	0800250d 	.word	0x0800250d
 80024dc:	08002589 	.word	0x08002589
 80024e0:	08002589 	.word	0x08002589
 80024e4:	08002589 	.word	0x08002589
 80024e8:	08002589 	.word	0x08002589
 80024ec:	08002589 	.word	0x08002589
 80024f0:	08002535 	.word	0x08002535
 80024f4:	08002589 	.word	0x08002589
 80024f8:	08002589 	.word	0x08002589
 80024fc:	08002589 	.word	0x08002589
 8002500:	08002589 	.word	0x08002589
 8002504:	08002589 	.word	0x08002589
 8002508:	0800255f 	.word	0x0800255f
	case FWD_CHAR: {
		pkt->cmd = MOVE_FWD;
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (BUF_CMP_t*) "FWD CMD", sizeof("FWD CMD"),
 8002512:	2364      	movs	r3, #100	; 0x64
 8002514:	2208      	movs	r2, #8
 8002516:	4920      	ldr	r1, [pc, #128]	; (8002598 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x124>)
 8002518:	4820      	ldr	r0, [pc, #128]	; (800259c <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x128>)
 800251a:	f004 ffbf 	bl	800749c <HAL_UART_Transmit>
				100);
		break;
 800251e:	e035      	b.n	800258c <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x118>
	}
	case BWD_CHAR: {
		pkt->cmd = MOVE_BWD;
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2201      	movs	r2, #1
 8002524:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (BUF_CMP_t*) "BWD CMD", sizeof("BWD CMD"),
 8002526:	2364      	movs	r3, #100	; 0x64
 8002528:	2208      	movs	r2, #8
 800252a:	491d      	ldr	r1, [pc, #116]	; (80025a0 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x12c>)
 800252c:	481b      	ldr	r0, [pc, #108]	; (800259c <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x128>)
 800252e:	f004 ffb5 	bl	800749c <HAL_UART_Transmit>
				100);
		break;
 8002532:	e02b      	b.n	800258c <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x118>
	}
	case LEFT_CHAR: {
		pkt->cmd =
				(bool) (isEq<BUF_CMP_t>(BWD_CHAR, bytes[7])) ?
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3307      	adds	r3, #7
 8002538:	4619      	mov	r1, r3
 800253a:	481a      	ldr	r0, [pc, #104]	; (80025a4 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x130>)
 800253c:	f000 f838 	bl	80025b0 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0xd6>
 8002546:	2205      	movs	r2, #5
 8002548:	e000      	b.n	800254c <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0xd8>
 800254a:	2203      	movs	r2, #3
		pkt->cmd =
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	601a      	str	r2, [r3, #0]
						MOVE_LEFT_BWD : MOVE_LEFT_FWD;
		HAL_UART_Transmit(&huart3, (BUF_CMP_t*) "L CMD", sizeof("L CMD"), 100);
 8002550:	2364      	movs	r3, #100	; 0x64
 8002552:	2206      	movs	r2, #6
 8002554:	4914      	ldr	r1, [pc, #80]	; (80025a8 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x134>)
 8002556:	4811      	ldr	r0, [pc, #68]	; (800259c <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x128>)
 8002558:	f004 ffa0 	bl	800749c <HAL_UART_Transmit>
		break;
 800255c:	e016      	b.n	800258c <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x118>
	}
	case RIGHT_CHAR: {
		pkt->cmd =
				(bool) (isEq<BUF_CMP_t>(BWD_CHAR, bytes[7])) ?
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	3307      	adds	r3, #7
 8002562:	4619      	mov	r1, r3
 8002564:	480f      	ldr	r0, [pc, #60]	; (80025a4 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x130>)
 8002566:	f000 f823 	bl	80025b0 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x100>
 8002570:	2204      	movs	r2, #4
 8002572:	e000      	b.n	8002576 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x102>
 8002574:	2202      	movs	r2, #2
		pkt->cmd =
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	601a      	str	r2, [r3, #0]
						MOVE_RIGHT_BWD : MOVE_RIGHT_FWD;
		HAL_UART_Transmit(&huart3, (BUF_CMP_t*) "R CMD", sizeof("R CMD"), 100);
 800257a:	2364      	movs	r3, #100	; 0x64
 800257c:	2206      	movs	r2, #6
 800257e:	490b      	ldr	r1, [pc, #44]	; (80025ac <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x138>)
 8002580:	4806      	ldr	r0, [pc, #24]	; (800259c <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x128>)
 8002582:	f004 ff8b 	bl	800749c <HAL_UART_Transmit>
		break;
 8002586:	e001      	b.n	800258c <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x118>

	}
	default:
		// something went wrong..
		return NULL;
 8002588:	2300      	movs	r3, #0
 800258a:	e000      	b.n	800258e <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x11a>
	}

	return pkt;
 800258c:	68bb      	ldr	r3, [r7, #8]

}
 800258e:	4618      	mov	r0, r3
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	0800eb84 	.word	0x0800eb84
 800259c:	20000478 	.word	0x20000478
 80025a0:	0800eb8c 	.word	0x0800eb8c
 80025a4:	0800ebe0 	.word	0x0800ebe0
 80025a8:	0800eb94 	.word	0x0800eb94
 80025ac:	0800eb9c 	.word	0x0800eb9c

080025b0 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>:
	static void processorTask(void *pv);
private:

	static void startImpl(void * _this); //unused
	template <typename T> // no type bounds enforcement, must be uint8_t, char etc.
	static bool isEq(const T &a, const T &b)
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
	{
		return a == b;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	781a      	ldrb	r2, [r3, #0]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	bf0c      	ite	eq
 80025c6:	2301      	moveq	r3, #1
 80025c8:	2300      	movne	r3, #0
 80025ca:	b2db      	uxtb	r3, r3
	}
 80025cc:	4618      	mov	r0, r3
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
PUTCHAR_PROTOTYPE {
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 80025e0:	1d39      	adds	r1, r7, #4
 80025e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025e6:	2201      	movs	r2, #1
 80025e8:	4803      	ldr	r0, [pc, #12]	; (80025f8 <__io_putchar+0x20>)
 80025ea:	f004 ff57 	bl	800749c <HAL_UART_Transmit>

	return ch;
 80025ee:	687b      	ldr	r3, [r7, #4]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	20000478 	.word	0x20000478

080025fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002600:	f001 f8f8 	bl	80037f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002604:	f000 f832 	bl	800266c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002608:	f000 fb00 	bl	8002c0c <MX_GPIO_Init>
  MX_DMA_Init();
 800260c:	f000 fad6 	bl	8002bbc <MX_DMA_Init>
  MX_TIM8_Init();
 8002610:	f000 fa00 	bl	8002a14 <MX_TIM8_Init>
  MX_TIM1_Init();
 8002614:	f000 f8b6 	bl	8002784 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002618:	f000 f954 	bl	80028c4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800261c:	f000 f9a6 	bl	800296c <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8002620:	f000 faa2 	bl	8002b68 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8002624:	f000 f880 	bl	8002728 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8002628:	4a0b      	ldr	r2, [pc, #44]	; (8002658 <main+0x5c>)
 800262a:	2100      	movs	r1, #0
 800262c:	480b      	ldr	r0, [pc, #44]	; (800265c <main+0x60>)
 800262e:	f006 f9e5 	bl	80089fc <osThreadNew>
 8002632:	4603      	mov	r3, r0
 8002634:	4a0a      	ldr	r2, [pc, #40]	; (8002660 <main+0x64>)
 8002636:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	defaultTaskHandle = osThreadNew(sensorTask, NULL, &sensorTask_attr);
 8002638:	4a0a      	ldr	r2, [pc, #40]	; (8002664 <main+0x68>)
 800263a:	2100      	movs	r1, #0
 800263c:	480a      	ldr	r0, [pc, #40]	; (8002668 <main+0x6c>)
 800263e:	f006 f9dd 	bl	80089fc <osThreadNew>
 8002642:	4603      	mov	r3, r0
 8002644:	4a06      	ldr	r2, [pc, #24]	; (8002660 <main+0x64>)
 8002646:	6013      	str	r3, [r2, #0]
	initializeCPPconstructs();
 8002648:	f7ff f81a 	bl	8001680 <initializeCPPconstructs>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800264c:	f006 f98c 	bl	8008968 <osKernelInitialize>
/**
* @}
*/

  /* Start scheduler */
  osKernelStart();
 8002650:	f006 f9ae 	bl	80089b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8002654:	e7fe      	b.n	8002654 <main+0x58>
 8002656:	bf00      	nop
 8002658:	0800ebe4 	.word	0x0800ebe4
 800265c:	08002d61 	.word	0x08002d61
 8002660:	200005ac 	.word	0x200005ac
 8002664:	0800ec08 	.word	0x0800ec08
 8002668:	0800169d 	.word	0x0800169d

0800266c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b094      	sub	sp, #80	; 0x50
 8002670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002672:	f107 0320 	add.w	r3, r7, #32
 8002676:	2230      	movs	r2, #48	; 0x30
 8002678:	2100      	movs	r1, #0
 800267a:	4618      	mov	r0, r3
 800267c:	f009 fa36 	bl	800baec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002680:	f107 030c 	add.w	r3, r7, #12
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	60da      	str	r2, [r3, #12]
 800268e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002690:	2300      	movs	r3, #0
 8002692:	60bb      	str	r3, [r7, #8]
 8002694:	4b22      	ldr	r3, [pc, #136]	; (8002720 <SystemClock_Config+0xb4>)
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	4a21      	ldr	r2, [pc, #132]	; (8002720 <SystemClock_Config+0xb4>)
 800269a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800269e:	6413      	str	r3, [r2, #64]	; 0x40
 80026a0:	4b1f      	ldr	r3, [pc, #124]	; (8002720 <SystemClock_Config+0xb4>)
 80026a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a8:	60bb      	str	r3, [r7, #8]
 80026aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026ac:	2300      	movs	r3, #0
 80026ae:	607b      	str	r3, [r7, #4]
 80026b0:	4b1c      	ldr	r3, [pc, #112]	; (8002724 <SystemClock_Config+0xb8>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a1b      	ldr	r2, [pc, #108]	; (8002724 <SystemClock_Config+0xb8>)
 80026b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	4b19      	ldr	r3, [pc, #100]	; (8002724 <SystemClock_Config+0xb8>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026c4:	607b      	str	r3, [r7, #4]
 80026c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026c8:	2302      	movs	r3, #2
 80026ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026cc:	2301      	movs	r3, #1
 80026ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026d0:	2310      	movs	r3, #16
 80026d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80026d4:	2300      	movs	r3, #0
 80026d6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026d8:	f107 0320 	add.w	r3, r7, #32
 80026dc:	4618      	mov	r0, r3
 80026de:	f003 f885 	bl	80057ec <HAL_RCC_OscConfig>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <SystemClock_Config+0x80>
  {
    Error_Handler();
 80026e8:	f000 fb54 	bl	8002d94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026ec:	230f      	movs	r3, #15
 80026ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80026f0:	2300      	movs	r3, #0
 80026f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026f8:	2300      	movs	r3, #0
 80026fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026fc:	2300      	movs	r3, #0
 80026fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002700:	f107 030c 	add.w	r3, r7, #12
 8002704:	2100      	movs	r1, #0
 8002706:	4618      	mov	r0, r3
 8002708:	f003 fae8 	bl	8005cdc <HAL_RCC_ClockConfig>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002712:	f000 fb3f 	bl	8002d94 <Error_Handler>
  }
}
 8002716:	bf00      	nop
 8002718:	3750      	adds	r7, #80	; 0x50
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40023800 	.word	0x40023800
 8002724:	40007000 	.word	0x40007000

08002728 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800272c:	4b12      	ldr	r3, [pc, #72]	; (8002778 <MX_I2C1_Init+0x50>)
 800272e:	4a13      	ldr	r2, [pc, #76]	; (800277c <MX_I2C1_Init+0x54>)
 8002730:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002732:	4b11      	ldr	r3, [pc, #68]	; (8002778 <MX_I2C1_Init+0x50>)
 8002734:	4a12      	ldr	r2, [pc, #72]	; (8002780 <MX_I2C1_Init+0x58>)
 8002736:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002738:	4b0f      	ldr	r3, [pc, #60]	; (8002778 <MX_I2C1_Init+0x50>)
 800273a:	2200      	movs	r2, #0
 800273c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800273e:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <MX_I2C1_Init+0x50>)
 8002740:	2200      	movs	r2, #0
 8002742:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002744:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <MX_I2C1_Init+0x50>)
 8002746:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800274a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800274c:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <MX_I2C1_Init+0x50>)
 800274e:	2200      	movs	r2, #0
 8002750:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002752:	4b09      	ldr	r3, [pc, #36]	; (8002778 <MX_I2C1_Init+0x50>)
 8002754:	2200      	movs	r2, #0
 8002756:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002758:	4b07      	ldr	r3, [pc, #28]	; (8002778 <MX_I2C1_Init+0x50>)
 800275a:	2200      	movs	r2, #0
 800275c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800275e:	4b06      	ldr	r3, [pc, #24]	; (8002778 <MX_I2C1_Init+0x50>)
 8002760:	2200      	movs	r2, #0
 8002762:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002764:	4804      	ldr	r0, [pc, #16]	; (8002778 <MX_I2C1_Init+0x50>)
 8002766:	f001 ff53 	bl	8004610 <HAL_I2C_Init>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002770:	f000 fb10 	bl	8002d94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002774:	bf00      	nop
 8002776:	bd80      	pop	{r7, pc}
 8002778:	20000304 	.word	0x20000304
 800277c:	40005400 	.word	0x40005400
 8002780:	00061a80 	.word	0x00061a80

08002784 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b096      	sub	sp, #88	; 0x58
 8002788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800278a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800278e:	2200      	movs	r2, #0
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	605a      	str	r2, [r3, #4]
 8002794:	609a      	str	r2, [r3, #8]
 8002796:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002798:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	605a      	str	r2, [r3, #4]
 80027ac:	609a      	str	r2, [r3, #8]
 80027ae:	60da      	str	r2, [r3, #12]
 80027b0:	611a      	str	r2, [r3, #16]
 80027b2:	615a      	str	r2, [r3, #20]
 80027b4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80027b6:	1d3b      	adds	r3, r7, #4
 80027b8:	2220      	movs	r2, #32
 80027ba:	2100      	movs	r1, #0
 80027bc:	4618      	mov	r0, r3
 80027be:	f009 f995 	bl	800baec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80027c2:	4b3e      	ldr	r3, [pc, #248]	; (80028bc <MX_TIM1_Init+0x138>)
 80027c4:	4a3e      	ldr	r2, [pc, #248]	; (80028c0 <MX_TIM1_Init+0x13c>)
 80027c6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 80027c8:	4b3c      	ldr	r3, [pc, #240]	; (80028bc <MX_TIM1_Init+0x138>)
 80027ca:	22a0      	movs	r2, #160	; 0xa0
 80027cc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027ce:	4b3b      	ldr	r3, [pc, #236]	; (80028bc <MX_TIM1_Init+0x138>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80027d4:	4b39      	ldr	r3, [pc, #228]	; (80028bc <MX_TIM1_Init+0x138>)
 80027d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027dc:	4b37      	ldr	r3, [pc, #220]	; (80028bc <MX_TIM1_Init+0x138>)
 80027de:	2200      	movs	r2, #0
 80027e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80027e2:	4b36      	ldr	r3, [pc, #216]	; (80028bc <MX_TIM1_Init+0x138>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80027e8:	4b34      	ldr	r3, [pc, #208]	; (80028bc <MX_TIM1_Init+0x138>)
 80027ea:	2280      	movs	r2, #128	; 0x80
 80027ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80027ee:	4833      	ldr	r0, [pc, #204]	; (80028bc <MX_TIM1_Init+0x138>)
 80027f0:	f003 fcc6 	bl	8006180 <HAL_TIM_Base_Init>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80027fa:	f000 facb 	bl	8002d94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002802:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002804:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002808:	4619      	mov	r1, r3
 800280a:	482c      	ldr	r0, [pc, #176]	; (80028bc <MX_TIM1_Init+0x138>)
 800280c:	f004 f90a 	bl	8006a24 <HAL_TIM_ConfigClockSource>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002816:	f000 fabd 	bl	8002d94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800281a:	4828      	ldr	r0, [pc, #160]	; (80028bc <MX_TIM1_Init+0x138>)
 800281c:	f003 fd70 	bl	8006300 <HAL_TIM_PWM_Init>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002826:	f000 fab5 	bl	8002d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800282a:	2300      	movs	r3, #0
 800282c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800282e:	2300      	movs	r3, #0
 8002830:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002832:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002836:	4619      	mov	r1, r3
 8002838:	4820      	ldr	r0, [pc, #128]	; (80028bc <MX_TIM1_Init+0x138>)
 800283a:	f004 fcf3 	bl	8007224 <HAL_TIMEx_MasterConfigSynchronization>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002844:	f000 faa6 	bl	8002d94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002848:	2360      	movs	r3, #96	; 0x60
 800284a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800284c:	2300      	movs	r3, #0
 800284e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002850:	2300      	movs	r3, #0
 8002852:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002854:	2300      	movs	r3, #0
 8002856:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002858:	2300      	movs	r3, #0
 800285a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800285c:	2300      	movs	r3, #0
 800285e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002860:	2300      	movs	r3, #0
 8002862:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002868:	2200      	movs	r2, #0
 800286a:	4619      	mov	r1, r3
 800286c:	4813      	ldr	r0, [pc, #76]	; (80028bc <MX_TIM1_Init+0x138>)
 800286e:	f004 f817 	bl	80068a0 <HAL_TIM_PWM_ConfigChannel>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002878:	f000 fa8c 	bl	8002d94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800287c:	2300      	movs	r3, #0
 800287e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002880:	2300      	movs	r3, #0
 8002882:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002884:	2300      	movs	r3, #0
 8002886:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002894:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002896:	2300      	movs	r3, #0
 8002898:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800289a:	1d3b      	adds	r3, r7, #4
 800289c:	4619      	mov	r1, r3
 800289e:	4807      	ldr	r0, [pc, #28]	; (80028bc <MX_TIM1_Init+0x138>)
 80028a0:	f004 fd3c 	bl	800731c <HAL_TIMEx_ConfigBreakDeadTime>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80028aa:	f000 fa73 	bl	8002d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80028ae:	4803      	ldr	r0, [pc, #12]	; (80028bc <MX_TIM1_Init+0x138>)
 80028b0:	f000 fc02 	bl	80030b8 <HAL_TIM_MspPostInit>

}
 80028b4:	bf00      	nop
 80028b6:	3758      	adds	r7, #88	; 0x58
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	20000358 	.word	0x20000358
 80028c0:	40010000 	.word	0x40010000

080028c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08c      	sub	sp, #48	; 0x30
 80028c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80028ca:	f107 030c 	add.w	r3, r7, #12
 80028ce:	2224      	movs	r2, #36	; 0x24
 80028d0:	2100      	movs	r1, #0
 80028d2:	4618      	mov	r0, r3
 80028d4:	f009 f90a 	bl	800baec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028d8:	1d3b      	adds	r3, r7, #4
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80028e0:	4b21      	ldr	r3, [pc, #132]	; (8002968 <MX_TIM2_Init+0xa4>)
 80028e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80028e8:	4b1f      	ldr	r3, [pc, #124]	; (8002968 <MX_TIM2_Init+0xa4>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028ee:	4b1e      	ldr	r3, [pc, #120]	; (8002968 <MX_TIM2_Init+0xa4>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80028f4:	4b1c      	ldr	r3, [pc, #112]	; (8002968 <MX_TIM2_Init+0xa4>)
 80028f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028fc:	4b1a      	ldr	r3, [pc, #104]	; (8002968 <MX_TIM2_Init+0xa4>)
 80028fe:	2200      	movs	r2, #0
 8002900:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002902:	4b19      	ldr	r3, [pc, #100]	; (8002968 <MX_TIM2_Init+0xa4>)
 8002904:	2200      	movs	r2, #0
 8002906:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002908:	2303      	movs	r3, #3
 800290a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800290c:	2300      	movs	r3, #0
 800290e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002910:	2301      	movs	r3, #1
 8002912:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002914:	2300      	movs	r3, #0
 8002916:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002918:	230a      	movs	r3, #10
 800291a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800291c:	2300      	movs	r3, #0
 800291e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002920:	2301      	movs	r3, #1
 8002922:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002924:	2300      	movs	r3, #0
 8002926:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002928:	2300      	movs	r3, #0
 800292a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800292c:	f107 030c 	add.w	r3, r7, #12
 8002930:	4619      	mov	r1, r3
 8002932:	480d      	ldr	r0, [pc, #52]	; (8002968 <MX_TIM2_Init+0xa4>)
 8002934:	f003 fe06 	bl	8006544 <HAL_TIM_Encoder_Init>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800293e:	f000 fa29 	bl	8002d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002942:	2300      	movs	r3, #0
 8002944:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002946:	2300      	movs	r3, #0
 8002948:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800294a:	1d3b      	adds	r3, r7, #4
 800294c:	4619      	mov	r1, r3
 800294e:	4806      	ldr	r0, [pc, #24]	; (8002968 <MX_TIM2_Init+0xa4>)
 8002950:	f004 fc68 	bl	8007224 <HAL_TIMEx_MasterConfigSynchronization>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800295a:	f000 fa1b 	bl	8002d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800295e:	bf00      	nop
 8002960:	3730      	adds	r7, #48	; 0x30
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	200003a0 	.word	0x200003a0

0800296c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08c      	sub	sp, #48	; 0x30
 8002970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002972:	f107 030c 	add.w	r3, r7, #12
 8002976:	2224      	movs	r2, #36	; 0x24
 8002978:	2100      	movs	r1, #0
 800297a:	4618      	mov	r0, r3
 800297c:	f009 f8b6 	bl	800baec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002980:	1d3b      	adds	r3, r7, #4
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002988:	4b20      	ldr	r3, [pc, #128]	; (8002a0c <MX_TIM3_Init+0xa0>)
 800298a:	4a21      	ldr	r2, [pc, #132]	; (8002a10 <MX_TIM3_Init+0xa4>)
 800298c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800298e:	4b1f      	ldr	r3, [pc, #124]	; (8002a0c <MX_TIM3_Init+0xa0>)
 8002990:	2200      	movs	r2, #0
 8002992:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002994:	4b1d      	ldr	r3, [pc, #116]	; (8002a0c <MX_TIM3_Init+0xa0>)
 8002996:	2200      	movs	r2, #0
 8002998:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800299a:	4b1c      	ldr	r3, [pc, #112]	; (8002a0c <MX_TIM3_Init+0xa0>)
 800299c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029a2:	4b1a      	ldr	r3, [pc, #104]	; (8002a0c <MX_TIM3_Init+0xa0>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029a8:	4b18      	ldr	r3, [pc, #96]	; (8002a0c <MX_TIM3_Init+0xa0>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80029ae:	2303      	movs	r3, #3
 80029b0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80029b2:	2300      	movs	r3, #0
 80029b4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80029b6:	2301      	movs	r3, #1
 80029b8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80029ba:	2300      	movs	r3, #0
 80029bc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80029be:	230a      	movs	r3, #10
 80029c0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80029c2:	2300      	movs	r3, #0
 80029c4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80029c6:	2301      	movs	r3, #1
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80029ca:	2300      	movs	r3, #0
 80029cc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80029d2:	f107 030c 	add.w	r3, r7, #12
 80029d6:	4619      	mov	r1, r3
 80029d8:	480c      	ldr	r0, [pc, #48]	; (8002a0c <MX_TIM3_Init+0xa0>)
 80029da:	f003 fdb3 	bl	8006544 <HAL_TIM_Encoder_Init>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80029e4:	f000 f9d6 	bl	8002d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029e8:	2300      	movs	r3, #0
 80029ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029ec:	2300      	movs	r3, #0
 80029ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029f0:	1d3b      	adds	r3, r7, #4
 80029f2:	4619      	mov	r1, r3
 80029f4:	4805      	ldr	r0, [pc, #20]	; (8002a0c <MX_TIM3_Init+0xa0>)
 80029f6:	f004 fc15 	bl	8007224 <HAL_TIMEx_MasterConfigSynchronization>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002a00:	f000 f9c8 	bl	8002d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002a04:	bf00      	nop
 8002a06:	3730      	adds	r7, #48	; 0x30
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	200003e8 	.word	0x200003e8
 8002a10:	40000400 	.word	0x40000400

08002a14 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b096      	sub	sp, #88	; 0x58
 8002a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a1a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	605a      	str	r2, [r3, #4]
 8002a24:	609a      	str	r2, [r3, #8]
 8002a26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a28:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	605a      	str	r2, [r3, #4]
 8002a3c:	609a      	str	r2, [r3, #8]
 8002a3e:	60da      	str	r2, [r3, #12]
 8002a40:	611a      	str	r2, [r3, #16]
 8002a42:	615a      	str	r2, [r3, #20]
 8002a44:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002a46:	1d3b      	adds	r3, r7, #4
 8002a48:	2220      	movs	r2, #32
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f009 f84d 	bl	800baec <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002a52:	4b43      	ldr	r3, [pc, #268]	; (8002b60 <MX_TIM8_Init+0x14c>)
 8002a54:	4a43      	ldr	r2, [pc, #268]	; (8002b64 <MX_TIM8_Init+0x150>)
 8002a56:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002a58:	4b41      	ldr	r3, [pc, #260]	; (8002b60 <MX_TIM8_Init+0x14c>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a5e:	4b40      	ldr	r3, [pc, #256]	; (8002b60 <MX_TIM8_Init+0x14c>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8002a64:	4b3e      	ldr	r3, [pc, #248]	; (8002b60 <MX_TIM8_Init+0x14c>)
 8002a66:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002a6a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a6c:	4b3c      	ldr	r3, [pc, #240]	; (8002b60 <MX_TIM8_Init+0x14c>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002a72:	4b3b      	ldr	r3, [pc, #236]	; (8002b60 <MX_TIM8_Init+0x14c>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a78:	4b39      	ldr	r3, [pc, #228]	; (8002b60 <MX_TIM8_Init+0x14c>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002a7e:	4838      	ldr	r0, [pc, #224]	; (8002b60 <MX_TIM8_Init+0x14c>)
 8002a80:	f003 fb7e 	bl	8006180 <HAL_TIM_Base_Init>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002a8a:	f000 f983 	bl	8002d94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a92:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002a94:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4831      	ldr	r0, [pc, #196]	; (8002b60 <MX_TIM8_Init+0x14c>)
 8002a9c:	f003 ffc2 	bl	8006a24 <HAL_TIM_ConfigClockSource>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002aa6:	f000 f975 	bl	8002d94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002aaa:	482d      	ldr	r0, [pc, #180]	; (8002b60 <MX_TIM8_Init+0x14c>)
 8002aac:	f003 fc28 	bl	8006300 <HAL_TIM_PWM_Init>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002ab6:	f000 f96d 	bl	8002d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aba:	2300      	movs	r3, #0
 8002abc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002ac2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4825      	ldr	r0, [pc, #148]	; (8002b60 <MX_TIM8_Init+0x14c>)
 8002aca:	f004 fbab 	bl	8007224 <HAL_TIMEx_MasterConfigSynchronization>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002ad4:	f000 f95e 	bl	8002d94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ad8:	2360      	movs	r3, #96	; 0x60
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002adc:	2300      	movs	r3, #0
 8002ade:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002aec:	2300      	movs	r3, #0
 8002aee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002af0:	2300      	movs	r3, #0
 8002af2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002af8:	2200      	movs	r2, #0
 8002afa:	4619      	mov	r1, r3
 8002afc:	4818      	ldr	r0, [pc, #96]	; (8002b60 <MX_TIM8_Init+0x14c>)
 8002afe:	f003 fecf 	bl	80068a0 <HAL_TIM_PWM_ConfigChannel>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8002b08:	f000 f944 	bl	8002d94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b10:	2204      	movs	r2, #4
 8002b12:	4619      	mov	r1, r3
 8002b14:	4812      	ldr	r0, [pc, #72]	; (8002b60 <MX_TIM8_Init+0x14c>)
 8002b16:	f003 fec3 	bl	80068a0 <HAL_TIM_PWM_ConfigChannel>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8002b20:	f000 f938 	bl	8002d94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b24:	2300      	movs	r3, #0
 8002b26:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b30:	2300      	movs	r3, #0
 8002b32:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b34:	2300      	movs	r3, #0
 8002b36:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b3c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002b42:	1d3b      	adds	r3, r7, #4
 8002b44:	4619      	mov	r1, r3
 8002b46:	4806      	ldr	r0, [pc, #24]	; (8002b60 <MX_TIM8_Init+0x14c>)
 8002b48:	f004 fbe8 	bl	800731c <HAL_TIMEx_ConfigBreakDeadTime>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8002b52:	f000 f91f 	bl	8002d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002b56:	bf00      	nop
 8002b58:	3758      	adds	r7, #88	; 0x58
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000430 	.word	0x20000430
 8002b64:	40010400 	.word	0x40010400

08002b68 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002b6c:	4b11      	ldr	r3, [pc, #68]	; (8002bb4 <MX_USART3_UART_Init+0x4c>)
 8002b6e:	4a12      	ldr	r2, [pc, #72]	; (8002bb8 <MX_USART3_UART_Init+0x50>)
 8002b70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002b72:	4b10      	ldr	r3, [pc, #64]	; (8002bb4 <MX_USART3_UART_Init+0x4c>)
 8002b74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b7a:	4b0e      	ldr	r3, [pc, #56]	; (8002bb4 <MX_USART3_UART_Init+0x4c>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002b80:	4b0c      	ldr	r3, [pc, #48]	; (8002bb4 <MX_USART3_UART_Init+0x4c>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002b86:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <MX_USART3_UART_Init+0x4c>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002b8c:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <MX_USART3_UART_Init+0x4c>)
 8002b8e:	220c      	movs	r2, #12
 8002b90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b92:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <MX_USART3_UART_Init+0x4c>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b98:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <MX_USART3_UART_Init+0x4c>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002b9e:	4805      	ldr	r0, [pc, #20]	; (8002bb4 <MX_USART3_UART_Init+0x4c>)
 8002ba0:	f004 fc22 	bl	80073e8 <HAL_UART_Init>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002baa:	f000 f8f3 	bl	8002d94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002bae:	bf00      	nop
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20000478 	.word	0x20000478
 8002bb8:	40004800 	.word	0x40004800

08002bbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	607b      	str	r3, [r7, #4]
 8002bc6:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <MX_DMA_Init+0x4c>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	4a0f      	ldr	r2, [pc, #60]	; (8002c08 <MX_DMA_Init+0x4c>)
 8002bcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd2:	4b0d      	ldr	r3, [pc, #52]	; (8002c08 <MX_DMA_Init+0x4c>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bda:	607b      	str	r3, [r7, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002bde:	2200      	movs	r2, #0
 8002be0:	2105      	movs	r1, #5
 8002be2:	200c      	movs	r0, #12
 8002be4:	f000 ff00 	bl	80039e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002be8:	200c      	movs	r0, #12
 8002bea:	f000 ff19 	bl	8003a20 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002bee:	2200      	movs	r2, #0
 8002bf0:	2105      	movs	r1, #5
 8002bf2:	200e      	movs	r0, #14
 8002bf4:	f000 fef8 	bl	80039e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002bf8:	200e      	movs	r0, #14
 8002bfa:	f000 ff11 	bl	8003a20 <HAL_NVIC_EnableIRQ>

}
 8002bfe:	bf00      	nop
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40023800 	.word	0x40023800

08002c0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b08a      	sub	sp, #40	; 0x28
 8002c10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c12:	f107 0314 	add.w	r3, r7, #20
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	605a      	str	r2, [r3, #4]
 8002c1c:	609a      	str	r2, [r3, #8]
 8002c1e:	60da      	str	r2, [r3, #12]
 8002c20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	4b4a      	ldr	r3, [pc, #296]	; (8002d50 <MX_GPIO_Init+0x144>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	4a49      	ldr	r2, [pc, #292]	; (8002d50 <MX_GPIO_Init+0x144>)
 8002c2c:	f043 0310 	orr.w	r3, r3, #16
 8002c30:	6313      	str	r3, [r2, #48]	; 0x30
 8002c32:	4b47      	ldr	r3, [pc, #284]	; (8002d50 <MX_GPIO_Init+0x144>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	f003 0310 	and.w	r3, r3, #16
 8002c3a:	613b      	str	r3, [r7, #16]
 8002c3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	4b43      	ldr	r3, [pc, #268]	; (8002d50 <MX_GPIO_Init+0x144>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	4a42      	ldr	r2, [pc, #264]	; (8002d50 <MX_GPIO_Init+0x144>)
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c4e:	4b40      	ldr	r3, [pc, #256]	; (8002d50 <MX_GPIO_Init+0x144>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60bb      	str	r3, [r7, #8]
 8002c5e:	4b3c      	ldr	r3, [pc, #240]	; (8002d50 <MX_GPIO_Init+0x144>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	4a3b      	ldr	r2, [pc, #236]	; (8002d50 <MX_GPIO_Init+0x144>)
 8002c64:	f043 0308 	orr.w	r3, r3, #8
 8002c68:	6313      	str	r3, [r2, #48]	; 0x30
 8002c6a:	4b39      	ldr	r3, [pc, #228]	; (8002d50 <MX_GPIO_Init+0x144>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	f003 0308 	and.w	r3, r3, #8
 8002c72:	60bb      	str	r3, [r7, #8]
 8002c74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	607b      	str	r3, [r7, #4]
 8002c7a:	4b35      	ldr	r3, [pc, #212]	; (8002d50 <MX_GPIO_Init+0x144>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	4a34      	ldr	r2, [pc, #208]	; (8002d50 <MX_GPIO_Init+0x144>)
 8002c80:	f043 0304 	orr.w	r3, r3, #4
 8002c84:	6313      	str	r3, [r2, #48]	; 0x30
 8002c86:	4b32      	ldr	r3, [pc, #200]	; (8002d50 <MX_GPIO_Init+0x144>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	f003 0304 	and.w	r3, r3, #4
 8002c8e:	607b      	str	r3, [r7, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	603b      	str	r3, [r7, #0]
 8002c96:	4b2e      	ldr	r3, [pc, #184]	; (8002d50 <MX_GPIO_Init+0x144>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	4a2d      	ldr	r2, [pc, #180]	; (8002d50 <MX_GPIO_Init+0x144>)
 8002c9c:	f043 0302 	orr.w	r3, r3, #2
 8002ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca2:	4b2b      	ldr	r3, [pc, #172]	; (8002d50 <MX_GPIO_Init+0x144>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	603b      	str	r3, [r7, #0]
 8002cac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCLK_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8002cb4:	4827      	ldr	r0, [pc, #156]	; (8002d54 <MX_GPIO_Init+0x148>)
 8002cb6:	f001 fc5f 	bl	8004578 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8002cba:	2200      	movs	r2, #0
 8002cbc:	213c      	movs	r1, #60	; 0x3c
 8002cbe:	4826      	ldr	r0, [pc, #152]	; (8002d58 <MX_GPIO_Init+0x14c>)
 8002cc0:	f001 fc5a 	bl	8004578 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCLK_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin;
 8002cc4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002cc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cd6:	f107 0314 	add.w	r3, r7, #20
 8002cda:	4619      	mov	r1, r3
 8002cdc:	481d      	ldr	r0, [pc, #116]	; (8002d54 <MX_GPIO_Init+0x148>)
 8002cde:	f001 faaf 	bl	8004240 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8002ce2:	233c      	movs	r3, #60	; 0x3c
 8002ce4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cea:	2300      	movs	r3, #0
 8002cec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cee:	2302      	movs	r3, #2
 8002cf0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf2:	f107 0314 	add.w	r3, r7, #20
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4817      	ldr	r0, [pc, #92]	; (8002d58 <MX_GPIO_Init+0x14c>)
 8002cfa:	f001 faa1 	bl	8004240 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8002cfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d04:	2301      	movs	r3, #1
 8002d06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8002d10:	f107 0314 	add.w	r3, r7, #20
 8002d14:	4619      	mov	r1, r3
 8002d16:	480f      	ldr	r0, [pc, #60]	; (8002d54 <MX_GPIO_Init+0x148>)
 8002d18:	f001 fa92 	bl	8004240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002d1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002d22:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002d26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d2c:	f107 0314 	add.w	r3, r7, #20
 8002d30:	4619      	mov	r1, r3
 8002d32:	480a      	ldr	r0, [pc, #40]	; (8002d5c <MX_GPIO_Init+0x150>)
 8002d34:	f001 fa84 	bl	8004240 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002d38:	2200      	movs	r2, #0
 8002d3a:	2105      	movs	r1, #5
 8002d3c:	2017      	movs	r0, #23
 8002d3e:	f000 fe53 	bl	80039e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002d42:	2017      	movs	r0, #23
 8002d44:	f000 fe6c 	bl	8003a20 <HAL_NVIC_EnableIRQ>

}
 8002d48:	bf00      	nop
 8002d4a:	3728      	adds	r7, #40	; 0x28
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40023800 	.word	0x40023800
 8002d54:	40021000 	.word	0x40021000
 8002d58:	40020000 	.word	0x40020000
 8002d5c:	40020c00 	.word	0x40020c00

08002d60 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
	/* Infinite loop */

	for (;;) {

		//OLED_Refresh_Gram(); // Refresh Ram
		osDelay(50);
 8002d68:	2032      	movs	r0, #50	; 0x32
 8002d6a:	f005 fefb 	bl	8008b64 <osDelay>
 8002d6e:	e7fb      	b.n	8002d68 <StartDefaultTask+0x8>

08002d70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a04      	ldr	r2, [pc, #16]	; (8002d90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d101      	bne.n	8002d86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002d82:	f000 fd59 	bl	8003838 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002d86:	bf00      	nop
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40001400 	.word	0x40001400

08002d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d98:	b672      	cpsid	i
}
 8002d9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002d9c:	e7fe      	b.n	8002d9c <Error_Handler+0x8>
	...

08002da0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002da6:	2300      	movs	r3, #0
 8002da8:	607b      	str	r3, [r7, #4]
 8002daa:	4b12      	ldr	r3, [pc, #72]	; (8002df4 <HAL_MspInit+0x54>)
 8002dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dae:	4a11      	ldr	r2, [pc, #68]	; (8002df4 <HAL_MspInit+0x54>)
 8002db0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002db4:	6453      	str	r3, [r2, #68]	; 0x44
 8002db6:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <HAL_MspInit+0x54>)
 8002db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dbe:	607b      	str	r3, [r7, #4]
 8002dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	603b      	str	r3, [r7, #0]
 8002dc6:	4b0b      	ldr	r3, [pc, #44]	; (8002df4 <HAL_MspInit+0x54>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	4a0a      	ldr	r2, [pc, #40]	; (8002df4 <HAL_MspInit+0x54>)
 8002dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002dd2:	4b08      	ldr	r3, [pc, #32]	; (8002df4 <HAL_MspInit+0x54>)
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dda:	603b      	str	r3, [r7, #0]
 8002ddc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002dde:	2200      	movs	r2, #0
 8002de0:	210f      	movs	r1, #15
 8002de2:	f06f 0001 	mvn.w	r0, #1
 8002de6:	f000 fdff 	bl	80039e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dea:	bf00      	nop
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40023800 	.word	0x40023800

08002df8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b08a      	sub	sp, #40	; 0x28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e00:	f107 0314 	add.w	r3, r7, #20
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	605a      	str	r2, [r3, #4]
 8002e0a:	609a      	str	r2, [r3, #8]
 8002e0c:	60da      	str	r2, [r3, #12]
 8002e0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a19      	ldr	r2, [pc, #100]	; (8002e7c <HAL_I2C_MspInit+0x84>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d12c      	bne.n	8002e74 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	613b      	str	r3, [r7, #16]
 8002e1e:	4b18      	ldr	r3, [pc, #96]	; (8002e80 <HAL_I2C_MspInit+0x88>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	4a17      	ldr	r2, [pc, #92]	; (8002e80 <HAL_I2C_MspInit+0x88>)
 8002e24:	f043 0302 	orr.w	r3, r3, #2
 8002e28:	6313      	str	r3, [r2, #48]	; 0x30
 8002e2a:	4b15      	ldr	r3, [pc, #84]	; (8002e80 <HAL_I2C_MspInit+0x88>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	613b      	str	r3, [r7, #16]
 8002e34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e3c:	2312      	movs	r3, #18
 8002e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e40:	2300      	movs	r3, #0
 8002e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e44:	2303      	movs	r3, #3
 8002e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e48:	2304      	movs	r3, #4
 8002e4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e4c:	f107 0314 	add.w	r3, r7, #20
 8002e50:	4619      	mov	r1, r3
 8002e52:	480c      	ldr	r0, [pc, #48]	; (8002e84 <HAL_I2C_MspInit+0x8c>)
 8002e54:	f001 f9f4 	bl	8004240 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <HAL_I2C_MspInit+0x88>)
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	4a07      	ldr	r2, [pc, #28]	; (8002e80 <HAL_I2C_MspInit+0x88>)
 8002e62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e66:	6413      	str	r3, [r2, #64]	; 0x40
 8002e68:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <HAL_I2C_MspInit+0x88>)
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002e74:	bf00      	nop
 8002e76:	3728      	adds	r7, #40	; 0x28
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40005400 	.word	0x40005400
 8002e80:	40023800 	.word	0x40023800
 8002e84:	40020400 	.word	0x40020400

08002e88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08c      	sub	sp, #48	; 0x30
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e90:	f107 031c 	add.w	r3, r7, #28
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
 8002e9c:	60da      	str	r2, [r3, #12]
 8002e9e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a32      	ldr	r2, [pc, #200]	; (8002f70 <HAL_TIM_Base_MspInit+0xe8>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d12d      	bne.n	8002f06 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002eaa:	2300      	movs	r3, #0
 8002eac:	61bb      	str	r3, [r7, #24]
 8002eae:	4b31      	ldr	r3, [pc, #196]	; (8002f74 <HAL_TIM_Base_MspInit+0xec>)
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb2:	4a30      	ldr	r2, [pc, #192]	; (8002f74 <HAL_TIM_Base_MspInit+0xec>)
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8002eba:	4b2e      	ldr	r3, [pc, #184]	; (8002f74 <HAL_TIM_Base_MspInit+0xec>)
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	61bb      	str	r3, [r7, #24]
 8002ec4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	617b      	str	r3, [r7, #20]
 8002eca:	4b2a      	ldr	r3, [pc, #168]	; (8002f74 <HAL_TIM_Base_MspInit+0xec>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ece:	4a29      	ldr	r2, [pc, #164]	; (8002f74 <HAL_TIM_Base_MspInit+0xec>)
 8002ed0:	f043 0310 	orr.w	r3, r3, #16
 8002ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ed6:	4b27      	ldr	r3, [pc, #156]	; (8002f74 <HAL_TIM_Base_MspInit+0xec>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	f003 0310 	and.w	r3, r3, #16
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Servo_Pin;
 8002ee2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eec:	2300      	movs	r3, #0
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Servo_GPIO_Port, &GPIO_InitStruct);
 8002ef8:	f107 031c 	add.w	r3, r7, #28
 8002efc:	4619      	mov	r1, r3
 8002efe:	481e      	ldr	r0, [pc, #120]	; (8002f78 <HAL_TIM_Base_MspInit+0xf0>)
 8002f00:	f001 f99e 	bl	8004240 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002f04:	e030      	b.n	8002f68 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM8)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a1c      	ldr	r2, [pc, #112]	; (8002f7c <HAL_TIM_Base_MspInit+0xf4>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d12b      	bne.n	8002f68 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002f10:	2300      	movs	r3, #0
 8002f12:	613b      	str	r3, [r7, #16]
 8002f14:	4b17      	ldr	r3, [pc, #92]	; (8002f74 <HAL_TIM_Base_MspInit+0xec>)
 8002f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f18:	4a16      	ldr	r2, [pc, #88]	; (8002f74 <HAL_TIM_Base_MspInit+0xec>)
 8002f1a:	f043 0302 	orr.w	r3, r3, #2
 8002f1e:	6453      	str	r3, [r2, #68]	; 0x44
 8002f20:	4b14      	ldr	r3, [pc, #80]	; (8002f74 <HAL_TIM_Base_MspInit+0xec>)
 8002f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	613b      	str	r3, [r7, #16]
 8002f2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	4b10      	ldr	r3, [pc, #64]	; (8002f74 <HAL_TIM_Base_MspInit+0xec>)
 8002f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f34:	4a0f      	ldr	r2, [pc, #60]	; (8002f74 <HAL_TIM_Base_MspInit+0xec>)
 8002f36:	f043 0304 	orr.w	r3, r3, #4
 8002f3a:	6313      	str	r3, [r2, #48]	; 0x30
 8002f3c:	4b0d      	ldr	r3, [pc, #52]	; (8002f74 <HAL_TIM_Base_MspInit+0xec>)
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8002f48:	23c0      	movs	r3, #192	; 0xc0
 8002f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f50:	2300      	movs	r3, #0
 8002f52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f54:	2300      	movs	r3, #0
 8002f56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f5c:	f107 031c 	add.w	r3, r7, #28
 8002f60:	4619      	mov	r1, r3
 8002f62:	4807      	ldr	r0, [pc, #28]	; (8002f80 <HAL_TIM_Base_MspInit+0xf8>)
 8002f64:	f001 f96c 	bl	8004240 <HAL_GPIO_Init>
}
 8002f68:	bf00      	nop
 8002f6a:	3730      	adds	r7, #48	; 0x30
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40010000 	.word	0x40010000
 8002f74:	40023800 	.word	0x40023800
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	40010400 	.word	0x40010400
 8002f80:	40020800 	.word	0x40020800

08002f84 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b08c      	sub	sp, #48	; 0x30
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f8c:	f107 031c 	add.w	r3, r7, #28
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	609a      	str	r2, [r3, #8]
 8002f98:	60da      	str	r2, [r3, #12]
 8002f9a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa4:	d14b      	bne.n	800303e <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61bb      	str	r3, [r7, #24]
 8002faa:	4b3f      	ldr	r3, [pc, #252]	; (80030a8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	4a3e      	ldr	r2, [pc, #248]	; (80030a8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002fb0:	f043 0301 	orr.w	r3, r3, #1
 8002fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fb6:	4b3c      	ldr	r3, [pc, #240]	; (80030a8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	61bb      	str	r3, [r7, #24]
 8002fc0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	617b      	str	r3, [r7, #20]
 8002fc6:	4b38      	ldr	r3, [pc, #224]	; (80030a8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	4a37      	ldr	r2, [pc, #220]	; (80030a8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002fcc:	f043 0301 	orr.w	r3, r3, #1
 8002fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fd2:	4b35      	ldr	r3, [pc, #212]	; (80030a8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	617b      	str	r3, [r7, #20]
 8002fdc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fde:	2300      	movs	r3, #0
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	4b31      	ldr	r3, [pc, #196]	; (80030a8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	4a30      	ldr	r2, [pc, #192]	; (80030a8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002fe8:	f043 0302 	orr.w	r3, r3, #2
 8002fec:	6313      	str	r3, [r2, #48]	; 0x30
 8002fee:	4b2e      	ldr	r3, [pc, #184]	; (80030a8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	613b      	str	r3, [r7, #16]
 8002ff8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003000:	2302      	movs	r3, #2
 8003002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003004:	2300      	movs	r3, #0
 8003006:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003008:	2300      	movs	r3, #0
 800300a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800300c:	2301      	movs	r3, #1
 800300e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003010:	f107 031c 	add.w	r3, r7, #28
 8003014:	4619      	mov	r1, r3
 8003016:	4825      	ldr	r0, [pc, #148]	; (80030ac <HAL_TIM_Encoder_MspInit+0x128>)
 8003018:	f001 f912 	bl	8004240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800301c:	2308      	movs	r3, #8
 800301e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003020:	2302      	movs	r3, #2
 8003022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003024:	2300      	movs	r3, #0
 8003026:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003028:	2300      	movs	r3, #0
 800302a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800302c:	2301      	movs	r3, #1
 800302e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003030:	f107 031c 	add.w	r3, r7, #28
 8003034:	4619      	mov	r1, r3
 8003036:	481e      	ldr	r0, [pc, #120]	; (80030b0 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003038:	f001 f902 	bl	8004240 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800303c:	e030      	b.n	80030a0 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a1c      	ldr	r2, [pc, #112]	; (80030b4 <HAL_TIM_Encoder_MspInit+0x130>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d12b      	bne.n	80030a0 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003048:	2300      	movs	r3, #0
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	4b16      	ldr	r3, [pc, #88]	; (80030a8 <HAL_TIM_Encoder_MspInit+0x124>)
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	4a15      	ldr	r2, [pc, #84]	; (80030a8 <HAL_TIM_Encoder_MspInit+0x124>)
 8003052:	f043 0302 	orr.w	r3, r3, #2
 8003056:	6413      	str	r3, [r2, #64]	; 0x40
 8003058:	4b13      	ldr	r3, [pc, #76]	; (80030a8 <HAL_TIM_Encoder_MspInit+0x124>)
 800305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003064:	2300      	movs	r3, #0
 8003066:	60bb      	str	r3, [r7, #8]
 8003068:	4b0f      	ldr	r3, [pc, #60]	; (80030a8 <HAL_TIM_Encoder_MspInit+0x124>)
 800306a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306c:	4a0e      	ldr	r2, [pc, #56]	; (80030a8 <HAL_TIM_Encoder_MspInit+0x124>)
 800306e:	f043 0301 	orr.w	r3, r3, #1
 8003072:	6313      	str	r3, [r2, #48]	; 0x30
 8003074:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <HAL_TIM_Encoder_MspInit+0x124>)
 8003076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	60bb      	str	r3, [r7, #8]
 800307e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003080:	23c0      	movs	r3, #192	; 0xc0
 8003082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003084:	2302      	movs	r3, #2
 8003086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003088:	2300      	movs	r3, #0
 800308a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800308c:	2300      	movs	r3, #0
 800308e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003090:	2302      	movs	r3, #2
 8003092:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003094:	f107 031c 	add.w	r3, r7, #28
 8003098:	4619      	mov	r1, r3
 800309a:	4804      	ldr	r0, [pc, #16]	; (80030ac <HAL_TIM_Encoder_MspInit+0x128>)
 800309c:	f001 f8d0 	bl	8004240 <HAL_GPIO_Init>
}
 80030a0:	bf00      	nop
 80030a2:	3730      	adds	r7, #48	; 0x30
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40023800 	.word	0x40023800
 80030ac:	40020000 	.word	0x40020000
 80030b0:	40020400 	.word	0x40020400
 80030b4:	40000400 	.word	0x40000400

080030b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b088      	sub	sp, #32
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c0:	f107 030c 	add.w	r3, r7, #12
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	605a      	str	r2, [r3, #4]
 80030ca:	609a      	str	r2, [r3, #8]
 80030cc:	60da      	str	r2, [r3, #12]
 80030ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a12      	ldr	r2, [pc, #72]	; (8003120 <HAL_TIM_MspPostInit+0x68>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d11e      	bne.n	8003118 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	60bb      	str	r3, [r7, #8]
 80030de:	4b11      	ldr	r3, [pc, #68]	; (8003124 <HAL_TIM_MspPostInit+0x6c>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	4a10      	ldr	r2, [pc, #64]	; (8003124 <HAL_TIM_MspPostInit+0x6c>)
 80030e4:	f043 0310 	orr.w	r3, r3, #16
 80030e8:	6313      	str	r3, [r2, #48]	; 0x30
 80030ea:	4b0e      	ldr	r3, [pc, #56]	; (8003124 <HAL_TIM_MspPostInit+0x6c>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	f003 0310 	and.w	r3, r3, #16
 80030f2:	60bb      	str	r3, [r7, #8]
 80030f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80030f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030fc:	2302      	movs	r3, #2
 80030fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003100:	2300      	movs	r3, #0
 8003102:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003104:	2300      	movs	r3, #0
 8003106:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003108:	2301      	movs	r3, #1
 800310a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800310c:	f107 030c 	add.w	r3, r7, #12
 8003110:	4619      	mov	r1, r3
 8003112:	4805      	ldr	r0, [pc, #20]	; (8003128 <HAL_TIM_MspPostInit+0x70>)
 8003114:	f001 f894 	bl	8004240 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003118:	bf00      	nop
 800311a:	3720      	adds	r7, #32
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40010000 	.word	0x40010000
 8003124:	40023800 	.word	0x40023800
 8003128:	40021000 	.word	0x40021000

0800312c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b08a      	sub	sp, #40	; 0x28
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003134:	f107 0314 	add.w	r3, r7, #20
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	605a      	str	r2, [r3, #4]
 800313e:	609a      	str	r2, [r3, #8]
 8003140:	60da      	str	r2, [r3, #12]
 8003142:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a5d      	ldr	r2, [pc, #372]	; (80032c0 <HAL_UART_MspInit+0x194>)
 800314a:	4293      	cmp	r3, r2
 800314c:	f040 80b4 	bne.w	80032b8 <HAL_UART_MspInit+0x18c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003150:	2300      	movs	r3, #0
 8003152:	613b      	str	r3, [r7, #16]
 8003154:	4b5b      	ldr	r3, [pc, #364]	; (80032c4 <HAL_UART_MspInit+0x198>)
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	4a5a      	ldr	r2, [pc, #360]	; (80032c4 <HAL_UART_MspInit+0x198>)
 800315a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800315e:	6413      	str	r3, [r2, #64]	; 0x40
 8003160:	4b58      	ldr	r3, [pc, #352]	; (80032c4 <HAL_UART_MspInit+0x198>)
 8003162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003164:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003168:	613b      	str	r3, [r7, #16]
 800316a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800316c:	2300      	movs	r3, #0
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	4b54      	ldr	r3, [pc, #336]	; (80032c4 <HAL_UART_MspInit+0x198>)
 8003172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003174:	4a53      	ldr	r2, [pc, #332]	; (80032c4 <HAL_UART_MspInit+0x198>)
 8003176:	f043 0304 	orr.w	r3, r3, #4
 800317a:	6313      	str	r3, [r2, #48]	; 0x30
 800317c:	4b51      	ldr	r3, [pc, #324]	; (80032c4 <HAL_UART_MspInit+0x198>)
 800317e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	60fb      	str	r3, [r7, #12]
 8003186:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800318c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800318e:	2302      	movs	r3, #2
 8003190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003192:	2300      	movs	r3, #0
 8003194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003196:	2302      	movs	r3, #2
 8003198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800319a:	2307      	movs	r3, #7
 800319c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800319e:	f107 0314 	add.w	r3, r7, #20
 80031a2:	4619      	mov	r1, r3
 80031a4:	4848      	ldr	r0, [pc, #288]	; (80032c8 <HAL_UART_MspInit+0x19c>)
 80031a6:	f001 f84b 	bl	8004240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80031aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b0:	2302      	movs	r3, #2
 80031b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80031b4:	2302      	movs	r3, #2
 80031b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031b8:	2302      	movs	r3, #2
 80031ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80031bc:	2307      	movs	r3, #7
 80031be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031c0:	f107 0314 	add.w	r3, r7, #20
 80031c4:	4619      	mov	r1, r3
 80031c6:	4840      	ldr	r0, [pc, #256]	; (80032c8 <HAL_UART_MspInit+0x19c>)
 80031c8:	f001 f83a 	bl	8004240 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80031cc:	4b3f      	ldr	r3, [pc, #252]	; (80032cc <HAL_UART_MspInit+0x1a0>)
 80031ce:	4a40      	ldr	r2, [pc, #256]	; (80032d0 <HAL_UART_MspInit+0x1a4>)
 80031d0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80031d2:	4b3e      	ldr	r3, [pc, #248]	; (80032cc <HAL_UART_MspInit+0x1a0>)
 80031d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031d8:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031da:	4b3c      	ldr	r3, [pc, #240]	; (80032cc <HAL_UART_MspInit+0x1a0>)
 80031dc:	2200      	movs	r2, #0
 80031de:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031e0:	4b3a      	ldr	r3, [pc, #232]	; (80032cc <HAL_UART_MspInit+0x1a0>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031e6:	4b39      	ldr	r3, [pc, #228]	; (80032cc <HAL_UART_MspInit+0x1a0>)
 80031e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031ec:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031ee:	4b37      	ldr	r3, [pc, #220]	; (80032cc <HAL_UART_MspInit+0x1a0>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031f4:	4b35      	ldr	r3, [pc, #212]	; (80032cc <HAL_UART_MspInit+0x1a0>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80031fa:	4b34      	ldr	r3, [pc, #208]	; (80032cc <HAL_UART_MspInit+0x1a0>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003200:	4b32      	ldr	r3, [pc, #200]	; (80032cc <HAL_UART_MspInit+0x1a0>)
 8003202:	2200      	movs	r2, #0
 8003204:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003206:	4b31      	ldr	r3, [pc, #196]	; (80032cc <HAL_UART_MspInit+0x1a0>)
 8003208:	2204      	movs	r2, #4
 800320a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800320c:	4b2f      	ldr	r3, [pc, #188]	; (80032cc <HAL_UART_MspInit+0x1a0>)
 800320e:	2203      	movs	r2, #3
 8003210:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8003212:	4b2e      	ldr	r3, [pc, #184]	; (80032cc <HAL_UART_MspInit+0x1a0>)
 8003214:	2200      	movs	r2, #0
 8003216:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003218:	4b2c      	ldr	r3, [pc, #176]	; (80032cc <HAL_UART_MspInit+0x1a0>)
 800321a:	2200      	movs	r2, #0
 800321c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800321e:	482b      	ldr	r0, [pc, #172]	; (80032cc <HAL_UART_MspInit+0x1a0>)
 8003220:	f000 fc0c 	bl	8003a3c <HAL_DMA_Init>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 800322a:	f7ff fdb3 	bl	8002d94 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a26      	ldr	r2, [pc, #152]	; (80032cc <HAL_UART_MspInit+0x1a0>)
 8003232:	639a      	str	r2, [r3, #56]	; 0x38
 8003234:	4a25      	ldr	r2, [pc, #148]	; (80032cc <HAL_UART_MspInit+0x1a0>)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800323a:	4b26      	ldr	r3, [pc, #152]	; (80032d4 <HAL_UART_MspInit+0x1a8>)
 800323c:	4a26      	ldr	r2, [pc, #152]	; (80032d8 <HAL_UART_MspInit+0x1ac>)
 800323e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8003240:	4b24      	ldr	r3, [pc, #144]	; (80032d4 <HAL_UART_MspInit+0x1a8>)
 8003242:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003246:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003248:	4b22      	ldr	r3, [pc, #136]	; (80032d4 <HAL_UART_MspInit+0x1a8>)
 800324a:	2240      	movs	r2, #64	; 0x40
 800324c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800324e:	4b21      	ldr	r3, [pc, #132]	; (80032d4 <HAL_UART_MspInit+0x1a8>)
 8003250:	2200      	movs	r2, #0
 8003252:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003254:	4b1f      	ldr	r3, [pc, #124]	; (80032d4 <HAL_UART_MspInit+0x1a8>)
 8003256:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800325a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800325c:	4b1d      	ldr	r3, [pc, #116]	; (80032d4 <HAL_UART_MspInit+0x1a8>)
 800325e:	2200      	movs	r2, #0
 8003260:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003262:	4b1c      	ldr	r3, [pc, #112]	; (80032d4 <HAL_UART_MspInit+0x1a8>)
 8003264:	2200      	movs	r2, #0
 8003266:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003268:	4b1a      	ldr	r3, [pc, #104]	; (80032d4 <HAL_UART_MspInit+0x1a8>)
 800326a:	2200      	movs	r2, #0
 800326c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800326e:	4b19      	ldr	r3, [pc, #100]	; (80032d4 <HAL_UART_MspInit+0x1a8>)
 8003270:	2200      	movs	r2, #0
 8003272:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003274:	4b17      	ldr	r3, [pc, #92]	; (80032d4 <HAL_UART_MspInit+0x1a8>)
 8003276:	2204      	movs	r2, #4
 8003278:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800327a:	4b16      	ldr	r3, [pc, #88]	; (80032d4 <HAL_UART_MspInit+0x1a8>)
 800327c:	2203      	movs	r2, #3
 800327e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8003280:	4b14      	ldr	r3, [pc, #80]	; (80032d4 <HAL_UART_MspInit+0x1a8>)
 8003282:	2200      	movs	r2, #0
 8003284:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003286:	4b13      	ldr	r3, [pc, #76]	; (80032d4 <HAL_UART_MspInit+0x1a8>)
 8003288:	2200      	movs	r2, #0
 800328a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800328c:	4811      	ldr	r0, [pc, #68]	; (80032d4 <HAL_UART_MspInit+0x1a8>)
 800328e:	f000 fbd5 	bl	8003a3c <HAL_DMA_Init>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <HAL_UART_MspInit+0x170>
    {
      Error_Handler();
 8003298:	f7ff fd7c 	bl	8002d94 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a0d      	ldr	r2, [pc, #52]	; (80032d4 <HAL_UART_MspInit+0x1a8>)
 80032a0:	635a      	str	r2, [r3, #52]	; 0x34
 80032a2:	4a0c      	ldr	r2, [pc, #48]	; (80032d4 <HAL_UART_MspInit+0x1a8>)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80032a8:	2200      	movs	r2, #0
 80032aa:	2105      	movs	r1, #5
 80032ac:	2027      	movs	r0, #39	; 0x27
 80032ae:	f000 fb9b 	bl	80039e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80032b2:	2027      	movs	r0, #39	; 0x27
 80032b4:	f000 fbb4 	bl	8003a20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80032b8:	bf00      	nop
 80032ba:	3728      	adds	r7, #40	; 0x28
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40004800 	.word	0x40004800
 80032c4:	40023800 	.word	0x40023800
 80032c8:	40020800 	.word	0x40020800
 80032cc:	200004ec 	.word	0x200004ec
 80032d0:	40026028 	.word	0x40026028
 80032d4:	2000054c 	.word	0x2000054c
 80032d8:	40026058 	.word	0x40026058

080032dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b08e      	sub	sp, #56	; 0x38
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80032ec:	2300      	movs	r3, #0
 80032ee:	60fb      	str	r3, [r7, #12]
 80032f0:	4b33      	ldr	r3, [pc, #204]	; (80033c0 <HAL_InitTick+0xe4>)
 80032f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f4:	4a32      	ldr	r2, [pc, #200]	; (80033c0 <HAL_InitTick+0xe4>)
 80032f6:	f043 0320 	orr.w	r3, r3, #32
 80032fa:	6413      	str	r3, [r2, #64]	; 0x40
 80032fc:	4b30      	ldr	r3, [pc, #192]	; (80033c0 <HAL_InitTick+0xe4>)
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	f003 0320 	and.w	r3, r3, #32
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003308:	f107 0210 	add.w	r2, r7, #16
 800330c:	f107 0314 	add.w	r3, r7, #20
 8003310:	4611      	mov	r1, r2
 8003312:	4618      	mov	r0, r3
 8003314:	f002 ff02 	bl	800611c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800331c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800331e:	2b00      	cmp	r3, #0
 8003320:	d103      	bne.n	800332a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003322:	f002 fed3 	bl	80060cc <HAL_RCC_GetPCLK1Freq>
 8003326:	6378      	str	r0, [r7, #52]	; 0x34
 8003328:	e004      	b.n	8003334 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800332a:	f002 fecf 	bl	80060cc <HAL_RCC_GetPCLK1Freq>
 800332e:	4603      	mov	r3, r0
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003336:	4a23      	ldr	r2, [pc, #140]	; (80033c4 <HAL_InitTick+0xe8>)
 8003338:	fba2 2303 	umull	r2, r3, r2, r3
 800333c:	0c9b      	lsrs	r3, r3, #18
 800333e:	3b01      	subs	r3, #1
 8003340:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8003342:	4b21      	ldr	r3, [pc, #132]	; (80033c8 <HAL_InitTick+0xec>)
 8003344:	4a21      	ldr	r2, [pc, #132]	; (80033cc <HAL_InitTick+0xf0>)
 8003346:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8003348:	4b1f      	ldr	r3, [pc, #124]	; (80033c8 <HAL_InitTick+0xec>)
 800334a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800334e:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8003350:	4a1d      	ldr	r2, [pc, #116]	; (80033c8 <HAL_InitTick+0xec>)
 8003352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003354:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8003356:	4b1c      	ldr	r3, [pc, #112]	; (80033c8 <HAL_InitTick+0xec>)
 8003358:	2200      	movs	r2, #0
 800335a:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800335c:	4b1a      	ldr	r3, [pc, #104]	; (80033c8 <HAL_InitTick+0xec>)
 800335e:	2200      	movs	r2, #0
 8003360:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003362:	4b19      	ldr	r3, [pc, #100]	; (80033c8 <HAL_InitTick+0xec>)
 8003364:	2200      	movs	r2, #0
 8003366:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8003368:	4817      	ldr	r0, [pc, #92]	; (80033c8 <HAL_InitTick+0xec>)
 800336a:	f002 ff09 	bl	8006180 <HAL_TIM_Base_Init>
 800336e:	4603      	mov	r3, r0
 8003370:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003374:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003378:	2b00      	cmp	r3, #0
 800337a:	d11b      	bne.n	80033b4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 800337c:	4812      	ldr	r0, [pc, #72]	; (80033c8 <HAL_InitTick+0xec>)
 800337e:	f002 ff4f 	bl	8006220 <HAL_TIM_Base_Start_IT>
 8003382:	4603      	mov	r3, r0
 8003384:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003388:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800338c:	2b00      	cmp	r3, #0
 800338e:	d111      	bne.n	80033b4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003390:	2037      	movs	r0, #55	; 0x37
 8003392:	f000 fb45 	bl	8003a20 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b0f      	cmp	r3, #15
 800339a:	d808      	bhi.n	80033ae <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 800339c:	2200      	movs	r2, #0
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	2037      	movs	r0, #55	; 0x37
 80033a2:	f000 fb21 	bl	80039e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80033a6:	4a0a      	ldr	r2, [pc, #40]	; (80033d0 <HAL_InitTick+0xf4>)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6013      	str	r3, [r2, #0]
 80033ac:	e002      	b.n	80033b4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80033b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3738      	adds	r7, #56	; 0x38
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40023800 	.word	0x40023800
 80033c4:	431bde83 	.word	0x431bde83
 80033c8:	200005b0 	.word	0x200005b0
 80033cc:	40001400 	.word	0x40001400
 80033d0:	2000005c 	.word	0x2000005c

080033d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033d8:	e7fe      	b.n	80033d8 <NMI_Handler+0x4>

080033da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033da:	b480      	push	{r7}
 80033dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033de:	e7fe      	b.n	80033de <HardFault_Handler+0x4>

080033e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033e4:	e7fe      	b.n	80033e4 <MemManage_Handler+0x4>

080033e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033e6:	b480      	push	{r7}
 80033e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033ea:	e7fe      	b.n	80033ea <BusFault_Handler+0x4>

080033ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033f0:	e7fe      	b.n	80033f0 <UsageFault_Handler+0x4>

080033f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033f2:	b480      	push	{r7}
 80033f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033f6:	bf00      	nop
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003404:	4802      	ldr	r0, [pc, #8]	; (8003410 <DMA1_Stream1_IRQHandler+0x10>)
 8003406:	f000 fcb1 	bl	8003d6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800340a:	bf00      	nop
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	200004ec 	.word	0x200004ec

08003414 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003418:	4802      	ldr	r0, [pc, #8]	; (8003424 <DMA1_Stream3_IRQHandler+0x10>)
 800341a:	f000 fca7 	bl	8003d6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800341e:	bf00      	nop
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	2000054c 	.word	0x2000054c

08003428 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800342c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003430:	f001 f8d6 	bl	80045e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003434:	bf00      	nop
 8003436:	bd80      	pop	{r7, pc}

08003438 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800343c:	4802      	ldr	r0, [pc, #8]	; (8003448 <USART3_IRQHandler+0x10>)
 800343e:	f004 f8ef 	bl	8007620 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003442:	bf00      	nop
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	20000478 	.word	0x20000478

0800344c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003450:	4802      	ldr	r0, [pc, #8]	; (800345c <TIM7_IRQHandler+0x10>)
 8003452:	f003 f91d 	bl	8006690 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003456:	bf00      	nop
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	200005b0 	.word	0x200005b0

08003460 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  return 1;
 8003464:	2301      	movs	r3, #1
}
 8003466:	4618      	mov	r0, r3
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <_kill>:

int _kill(int pid, int sig)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800347a:	f008 fa01 	bl	800b880 <__errno>
 800347e:	4603      	mov	r3, r0
 8003480:	2216      	movs	r2, #22
 8003482:	601a      	str	r2, [r3, #0]
  return -1;
 8003484:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003488:	4618      	mov	r0, r3
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <_exit>:

void _exit (int status)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003498:	f04f 31ff 	mov.w	r1, #4294967295
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f7ff ffe7 	bl	8003470 <_kill>
  while (1) {}    /* Make sure we hang here */
 80034a2:	e7fe      	b.n	80034a2 <_exit+0x12>

080034a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034b0:	2300      	movs	r3, #0
 80034b2:	617b      	str	r3, [r7, #20]
 80034b4:	e00a      	b.n	80034cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80034b6:	f3af 8000 	nop.w
 80034ba:	4601      	mov	r1, r0
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	1c5a      	adds	r2, r3, #1
 80034c0:	60ba      	str	r2, [r7, #8]
 80034c2:	b2ca      	uxtb	r2, r1
 80034c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	3301      	adds	r3, #1
 80034ca:	617b      	str	r3, [r7, #20]
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	dbf0      	blt.n	80034b6 <_read+0x12>
  }

  return len;
 80034d4:	687b      	ldr	r3, [r7, #4]
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3718      	adds	r7, #24
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b086      	sub	sp, #24
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	60f8      	str	r0, [r7, #12]
 80034e6:	60b9      	str	r1, [r7, #8]
 80034e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034ea:	2300      	movs	r3, #0
 80034ec:	617b      	str	r3, [r7, #20]
 80034ee:	e009      	b.n	8003504 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	1c5a      	adds	r2, r3, #1
 80034f4:	60ba      	str	r2, [r7, #8]
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff f86d 	bl	80025d8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	3301      	adds	r3, #1
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	429a      	cmp	r2, r3
 800350a:	dbf1      	blt.n	80034f0 <_write+0x12>
  }
  return len;
 800350c:	687b      	ldr	r3, [r7, #4]
}
 800350e:	4618      	mov	r0, r3
 8003510:	3718      	adds	r7, #24
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <_close>:

int _close(int file)
{
 8003516:	b480      	push	{r7}
 8003518:	b083      	sub	sp, #12
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800351e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003522:	4618      	mov	r0, r3
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr

0800352e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800352e:	b480      	push	{r7}
 8003530:	b083      	sub	sp, #12
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
 8003536:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800353e:	605a      	str	r2, [r3, #4]
  return 0;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <_isatty>:

int _isatty(int file)
{
 800354e:	b480      	push	{r7}
 8003550:	b083      	sub	sp, #12
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003556:	2301      	movs	r3, #1
}
 8003558:	4618      	mov	r0, r3
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3714      	adds	r7, #20
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
	...

08003580 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003588:	4a14      	ldr	r2, [pc, #80]	; (80035dc <_sbrk+0x5c>)
 800358a:	4b15      	ldr	r3, [pc, #84]	; (80035e0 <_sbrk+0x60>)
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003594:	4b13      	ldr	r3, [pc, #76]	; (80035e4 <_sbrk+0x64>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d102      	bne.n	80035a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800359c:	4b11      	ldr	r3, [pc, #68]	; (80035e4 <_sbrk+0x64>)
 800359e:	4a12      	ldr	r2, [pc, #72]	; (80035e8 <_sbrk+0x68>)
 80035a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035a2:	4b10      	ldr	r3, [pc, #64]	; (80035e4 <_sbrk+0x64>)
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4413      	add	r3, r2
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d207      	bcs.n	80035c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035b0:	f008 f966 	bl	800b880 <__errno>
 80035b4:	4603      	mov	r3, r0
 80035b6:	220c      	movs	r2, #12
 80035b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035ba:	f04f 33ff 	mov.w	r3, #4294967295
 80035be:	e009      	b.n	80035d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035c0:	4b08      	ldr	r3, [pc, #32]	; (80035e4 <_sbrk+0x64>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035c6:	4b07      	ldr	r3, [pc, #28]	; (80035e4 <_sbrk+0x64>)
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4413      	add	r3, r2
 80035ce:	4a05      	ldr	r2, [pc, #20]	; (80035e4 <_sbrk+0x64>)
 80035d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035d2:	68fb      	ldr	r3, [r7, #12]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	20020000 	.word	0x20020000
 80035e0:	00000800 	.word	0x00000800
 80035e4:	200005f8 	.word	0x200005f8
 80035e8:	20005648 	.word	0x20005648

080035ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035f0:	4b06      	ldr	r3, [pc, #24]	; (800360c <SystemInit+0x20>)
 80035f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f6:	4a05      	ldr	r2, [pc, #20]	; (800360c <SystemInit+0x20>)
 80035f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003600:	bf00      	nop
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	e000ed00 	.word	0xe000ed00

08003610 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003610:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003648 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003614:	480d      	ldr	r0, [pc, #52]	; (800364c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003616:	490e      	ldr	r1, [pc, #56]	; (8003650 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003618:	4a0e      	ldr	r2, [pc, #56]	; (8003654 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800361a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800361c:	e002      	b.n	8003624 <LoopCopyDataInit>

0800361e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800361e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003622:	3304      	adds	r3, #4

08003624 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003628:	d3f9      	bcc.n	800361e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800362a:	4a0b      	ldr	r2, [pc, #44]	; (8003658 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800362c:	4c0b      	ldr	r4, [pc, #44]	; (800365c <LoopFillZerobss+0x26>)
  movs r3, #0
 800362e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003630:	e001      	b.n	8003636 <LoopFillZerobss>

08003632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003634:	3204      	adds	r2, #4

08003636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003638:	d3fb      	bcc.n	8003632 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800363a:	f7ff ffd7 	bl	80035ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800363e:	f008 fa1b 	bl	800ba78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003642:	f7fe ffdb 	bl	80025fc <main>
  bx  lr    
 8003646:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003648:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800364c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003650:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 8003654:	0800f044 	.word	0x0800f044
  ldr r2, =_sbss
 8003658:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 800365c:	20005644 	.word	0x20005644

08003660 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003660:	e7fe      	b.n	8003660 <ADC_IRQHandler>

08003662 <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b084      	sub	sp, #16
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d104      	bne.n	800367a <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003670:	b672      	cpsid	i
}
 8003672:	bf00      	nop
 8003674:	f7ff fb8e 	bl	8002d94 <Error_Handler>
 8003678:	e7fe      	b.n	8003678 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 800367a:	2300      	movs	r3, #0
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	e007      	b.n	8003690 <stm32_lock_init+0x2e>
  {
    lock->basepri[i] = 0;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	2100      	movs	r1, #0
 8003686:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	3301      	adds	r3, #1
 800368e:	60fb      	str	r3, [r7, #12]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d9f4      	bls.n	8003680 <stm32_lock_init+0x1e>
  }
  lock->nesting_level = 0;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	721a      	strb	r2, [r3, #8]
}
 800369c:	bf00      	nop
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d104      	bne.n	80036bc <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80036b2:	b672      	cpsid	i
}
 80036b4:	bf00      	nop
 80036b6:	f7ff fb6d 	bl	8002d94 <Error_Handler>
 80036ba:	e7fe      	b.n	80036ba <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	7a1b      	ldrb	r3, [r3, #8]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d904      	bls.n	80036ce <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 80036c4:	b672      	cpsid	i
}
 80036c6:	bf00      	nop
 80036c8:	f7ff fb64 	bl	8002d94 <Error_Handler>
 80036cc:	e7fe      	b.n	80036cc <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	7a1b      	ldrb	r3, [r3, #8]
 80036d2:	1c5a      	adds	r2, r3, #1
 80036d4:	b2d1      	uxtb	r1, r2
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	7211      	strb	r1, [r2, #8]
 80036da:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80036dc:	f3ef 8211 	mrs	r2, BASEPRI
 80036e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e4:	f383 8811 	msr	BASEPRI, r3
 80036e8:	f3bf 8f6f 	isb	sy
 80036ec:	f3bf 8f4f 	dsb	sy
 80036f0:	60fa      	str	r2, [r7, #12]
 80036f2:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80036fc:	bf00      	nop
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d104      	bne.n	800371c <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003712:	b672      	cpsid	i
}
 8003714:	bf00      	nop
 8003716:	f7ff fb3d 	bl	8002d94 <Error_Handler>
 800371a:	e7fe      	b.n	800371a <stm32_lock_release+0x16>
  lock->nesting_level--;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	7a1b      	ldrb	r3, [r3, #8]
 8003720:	3b01      	subs	r3, #1
 8003722:	b2da      	uxtb	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	7a1b      	ldrb	r3, [r3, #8]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d904      	bls.n	800373a <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8003730:	b672      	cpsid	i
}
 8003732:	bf00      	nop
 8003734:	f7ff fb2e 	bl	8002d94 <Error_Handler>
 8003738:	e7fe      	b.n	8003738 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	7a1b      	ldrb	r3, [r3, #8]
 800373e:	461a      	mov	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003746:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800374e:	bf00      	nop
}
 8003750:	bf00      	nop
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d105      	bne.n	8003772 <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8003766:	f008 f88b 	bl	800b880 <__errno>
 800376a:	4603      	mov	r3, r0
 800376c:	2216      	movs	r2, #22
 800376e:	601a      	str	r2, [r3, #0]
    return;
 8003770:	e015      	b.n	800379e <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8003772:	200c      	movs	r0, #12
 8003774:	f008 f9a4 	bl	800bac0 <malloc>
 8003778:	4603      	mov	r3, r0
 800377a:	461a      	mov	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d005      	beq.n	8003794 <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4618      	mov	r0, r3
 800378e:	f7ff ff68 	bl	8003662 <stm32_lock_init>
    return;
 8003792:	e004      	b.n	800379e <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 8003794:	b672      	cpsid	i
}
 8003796:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8003798:	f7ff fafc 	bl	8002d94 <Error_Handler>
 800379c:	e7fe      	b.n	800379c <__retarget_lock_init_recursive+0x44>
}
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d104      	bne.n	80037bc <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80037b2:	b672      	cpsid	i
}
 80037b4:	bf00      	nop
 80037b6:	f7ff faed 	bl	8002d94 <Error_Handler>
 80037ba:	e7fe      	b.n	80037ba <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4618      	mov	r0, r3
 80037c0:	f7ff ff70 	bl	80036a4 <stm32_lock_acquire>
}
 80037c4:	bf00      	nop
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d104      	bne.n	80037e4 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80037da:	b672      	cpsid	i
}
 80037dc:	bf00      	nop
 80037de:	f7ff fad9 	bl	8002d94 <Error_Handler>
 80037e2:	e7fe      	b.n	80037e2 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff ff8c 	bl	8003704 <stm32_lock_release>
}
 80037ec:	bf00      	nop
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037f8:	4b0e      	ldr	r3, [pc, #56]	; (8003834 <HAL_Init+0x40>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a0d      	ldr	r2, [pc, #52]	; (8003834 <HAL_Init+0x40>)
 80037fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003802:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003804:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <HAL_Init+0x40>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a0a      	ldr	r2, [pc, #40]	; (8003834 <HAL_Init+0x40>)
 800380a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800380e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003810:	4b08      	ldr	r3, [pc, #32]	; (8003834 <HAL_Init+0x40>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a07      	ldr	r2, [pc, #28]	; (8003834 <HAL_Init+0x40>)
 8003816:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800381a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800381c:	2003      	movs	r0, #3
 800381e:	f000 f8d8 	bl	80039d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003822:	200f      	movs	r0, #15
 8003824:	f7ff fd5a 	bl	80032dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003828:	f7ff faba 	bl	8002da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	40023c00 	.word	0x40023c00

08003838 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800383c:	4b06      	ldr	r3, [pc, #24]	; (8003858 <HAL_IncTick+0x20>)
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	461a      	mov	r2, r3
 8003842:	4b06      	ldr	r3, [pc, #24]	; (800385c <HAL_IncTick+0x24>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4413      	add	r3, r2
 8003848:	4a04      	ldr	r2, [pc, #16]	; (800385c <HAL_IncTick+0x24>)
 800384a:	6013      	str	r3, [r2, #0]
}
 800384c:	bf00      	nop
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	20000060 	.word	0x20000060
 800385c:	20000620 	.word	0x20000620

08003860 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  return uwTick;
 8003864:	4b03      	ldr	r3, [pc, #12]	; (8003874 <HAL_GetTick+0x14>)
 8003866:	681b      	ldr	r3, [r3, #0]
}
 8003868:	4618      	mov	r0, r3
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	20000620 	.word	0x20000620

08003878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f003 0307 	and.w	r3, r3, #7
 8003886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003888:	4b0c      	ldr	r3, [pc, #48]	; (80038bc <__NVIC_SetPriorityGrouping+0x44>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800388e:	68ba      	ldr	r2, [r7, #8]
 8003890:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003894:	4013      	ands	r3, r2
 8003896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038aa:	4a04      	ldr	r2, [pc, #16]	; (80038bc <__NVIC_SetPriorityGrouping+0x44>)
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	60d3      	str	r3, [r2, #12]
}
 80038b0:	bf00      	nop
 80038b2:	3714      	adds	r7, #20
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr
 80038bc:	e000ed00 	.word	0xe000ed00

080038c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038c4:	4b04      	ldr	r3, [pc, #16]	; (80038d8 <__NVIC_GetPriorityGrouping+0x18>)
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	0a1b      	lsrs	r3, r3, #8
 80038ca:	f003 0307 	and.w	r3, r3, #7
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr
 80038d8:	e000ed00 	.word	0xe000ed00

080038dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	4603      	mov	r3, r0
 80038e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	db0b      	blt.n	8003906 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038ee:	79fb      	ldrb	r3, [r7, #7]
 80038f0:	f003 021f 	and.w	r2, r3, #31
 80038f4:	4907      	ldr	r1, [pc, #28]	; (8003914 <__NVIC_EnableIRQ+0x38>)
 80038f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fa:	095b      	lsrs	r3, r3, #5
 80038fc:	2001      	movs	r0, #1
 80038fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	e000e100 	.word	0xe000e100

08003918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	4603      	mov	r3, r0
 8003920:	6039      	str	r1, [r7, #0]
 8003922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003928:	2b00      	cmp	r3, #0
 800392a:	db0a      	blt.n	8003942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	b2da      	uxtb	r2, r3
 8003930:	490c      	ldr	r1, [pc, #48]	; (8003964 <__NVIC_SetPriority+0x4c>)
 8003932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003936:	0112      	lsls	r2, r2, #4
 8003938:	b2d2      	uxtb	r2, r2
 800393a:	440b      	add	r3, r1
 800393c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003940:	e00a      	b.n	8003958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	b2da      	uxtb	r2, r3
 8003946:	4908      	ldr	r1, [pc, #32]	; (8003968 <__NVIC_SetPriority+0x50>)
 8003948:	79fb      	ldrb	r3, [r7, #7]
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	3b04      	subs	r3, #4
 8003950:	0112      	lsls	r2, r2, #4
 8003952:	b2d2      	uxtb	r2, r2
 8003954:	440b      	add	r3, r1
 8003956:	761a      	strb	r2, [r3, #24]
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr
 8003964:	e000e100 	.word	0xe000e100
 8003968:	e000ed00 	.word	0xe000ed00

0800396c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800396c:	b480      	push	{r7}
 800396e:	b089      	sub	sp, #36	; 0x24
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	f1c3 0307 	rsb	r3, r3, #7
 8003986:	2b04      	cmp	r3, #4
 8003988:	bf28      	it	cs
 800398a:	2304      	movcs	r3, #4
 800398c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	3304      	adds	r3, #4
 8003992:	2b06      	cmp	r3, #6
 8003994:	d902      	bls.n	800399c <NVIC_EncodePriority+0x30>
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	3b03      	subs	r3, #3
 800399a:	e000      	b.n	800399e <NVIC_EncodePriority+0x32>
 800399c:	2300      	movs	r3, #0
 800399e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039a0:	f04f 32ff 	mov.w	r2, #4294967295
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	43da      	mvns	r2, r3
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	401a      	ands	r2, r3
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039b4:	f04f 31ff 	mov.w	r1, #4294967295
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	fa01 f303 	lsl.w	r3, r1, r3
 80039be:	43d9      	mvns	r1, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039c4:	4313      	orrs	r3, r2
         );
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3724      	adds	r7, #36	; 0x24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b082      	sub	sp, #8
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7ff ff4c 	bl	8003878 <__NVIC_SetPriorityGrouping>
}
 80039e0:	bf00      	nop
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	4603      	mov	r3, r0
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
 80039f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039f6:	2300      	movs	r3, #0
 80039f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039fa:	f7ff ff61 	bl	80038c0 <__NVIC_GetPriorityGrouping>
 80039fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	68b9      	ldr	r1, [r7, #8]
 8003a04:	6978      	ldr	r0, [r7, #20]
 8003a06:	f7ff ffb1 	bl	800396c <NVIC_EncodePriority>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a10:	4611      	mov	r1, r2
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7ff ff80 	bl	8003918 <__NVIC_SetPriority>
}
 8003a18:	bf00      	nop
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	4603      	mov	r3, r0
 8003a28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7ff ff54 	bl	80038dc <__NVIC_EnableIRQ>
}
 8003a34:	bf00      	nop
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a48:	f7ff ff0a 	bl	8003860 <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e099      	b.n	8003b8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0201 	bic.w	r2, r2, #1
 8003a76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a78:	e00f      	b.n	8003a9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a7a:	f7ff fef1 	bl	8003860 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b05      	cmp	r3, #5
 8003a86:	d908      	bls.n	8003a9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2203      	movs	r2, #3
 8003a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e078      	b.n	8003b8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1e8      	bne.n	8003a7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	4b38      	ldr	r3, [pc, #224]	; (8003b94 <HAL_DMA_Init+0x158>)
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ac6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ad2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ade:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	d107      	bne.n	8003b04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afc:	4313      	orrs	r3, r2
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	f023 0307 	bic.w	r3, r3, #7
 8003b1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	d117      	bne.n	8003b5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00e      	beq.n	8003b5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 fb01 	bl	8004148 <DMA_CheckFifoParam>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d008      	beq.n	8003b5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2240      	movs	r2, #64	; 0x40
 8003b50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e016      	b.n	8003b8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 fab8 	bl	80040dc <DMA_CalcBaseAndBitshift>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b74:	223f      	movs	r2, #63	; 0x3f
 8003b76:	409a      	lsls	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3718      	adds	r7, #24
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	f010803f 	.word	0xf010803f

08003b98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
 8003ba4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d101      	bne.n	8003bbe <HAL_DMA_Start_IT+0x26>
 8003bba:	2302      	movs	r3, #2
 8003bbc:	e040      	b.n	8003c40 <HAL_DMA_Start_IT+0xa8>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d12f      	bne.n	8003c32 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2202      	movs	r2, #2
 8003bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	68b9      	ldr	r1, [r7, #8]
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f000 fa4a 	bl	8004080 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf0:	223f      	movs	r2, #63	; 0x3f
 8003bf2:	409a      	lsls	r2, r3
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0216 	orr.w	r2, r2, #22
 8003c06:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d007      	beq.n	8003c20 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 0208 	orr.w	r2, r2, #8
 8003c1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 0201 	orr.w	r2, r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	e005      	b.n	8003c3e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3718      	adds	r7, #24
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c54:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003c56:	f7ff fe03 	bl	8003860 <HAL_GetTick>
 8003c5a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d008      	beq.n	8003c7a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2280      	movs	r2, #128	; 0x80
 8003c6c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e052      	b.n	8003d20 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0216 	bic.w	r2, r2, #22
 8003c88:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	695a      	ldr	r2, [r3, #20]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c98:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d103      	bne.n	8003caa <HAL_DMA_Abort+0x62>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d007      	beq.n	8003cba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 0208 	bic.w	r2, r2, #8
 8003cb8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0201 	bic.w	r2, r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cca:	e013      	b.n	8003cf4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ccc:	f7ff fdc8 	bl	8003860 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b05      	cmp	r3, #5
 8003cd8:	d90c      	bls.n	8003cf4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2220      	movs	r2, #32
 8003cde:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2203      	movs	r2, #3
 8003ce4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e015      	b.n	8003d20 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1e4      	bne.n	8003ccc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d06:	223f      	movs	r2, #63	; 0x3f
 8003d08:	409a      	lsls	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d004      	beq.n	8003d46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2280      	movs	r2, #128	; 0x80
 8003d40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e00c      	b.n	8003d60 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2205      	movs	r2, #5
 8003d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 0201 	bic.w	r2, r2, #1
 8003d5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d74:	2300      	movs	r3, #0
 8003d76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d78:	4b8e      	ldr	r3, [pc, #568]	; (8003fb4 <HAL_DMA_IRQHandler+0x248>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a8e      	ldr	r2, [pc, #568]	; (8003fb8 <HAL_DMA_IRQHandler+0x24c>)
 8003d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d82:	0a9b      	lsrs	r3, r3, #10
 8003d84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d96:	2208      	movs	r2, #8
 8003d98:	409a      	lsls	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d01a      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0304 	and.w	r3, r3, #4
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d013      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f022 0204 	bic.w	r2, r2, #4
 8003dbe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc4:	2208      	movs	r2, #8
 8003dc6:	409a      	lsls	r2, r3
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd0:	f043 0201 	orr.w	r2, r3, #1
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ddc:	2201      	movs	r2, #1
 8003dde:	409a      	lsls	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4013      	ands	r3, r2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d012      	beq.n	8003e0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00b      	beq.n	8003e0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	409a      	lsls	r2, r3
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e06:	f043 0202 	orr.w	r2, r3, #2
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e12:	2204      	movs	r2, #4
 8003e14:	409a      	lsls	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d012      	beq.n	8003e44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00b      	beq.n	8003e44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e30:	2204      	movs	r2, #4
 8003e32:	409a      	lsls	r2, r3
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e3c:	f043 0204 	orr.w	r2, r3, #4
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e48:	2210      	movs	r2, #16
 8003e4a:	409a      	lsls	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d043      	beq.n	8003edc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0308 	and.w	r3, r3, #8
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d03c      	beq.n	8003edc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e66:	2210      	movs	r2, #16
 8003e68:	409a      	lsls	r2, r3
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d018      	beq.n	8003eae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d108      	bne.n	8003e9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d024      	beq.n	8003edc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	4798      	blx	r3
 8003e9a:	e01f      	b.n	8003edc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d01b      	beq.n	8003edc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	4798      	blx	r3
 8003eac:	e016      	b.n	8003edc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d107      	bne.n	8003ecc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0208 	bic.w	r2, r2, #8
 8003eca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d003      	beq.n	8003edc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	409a      	lsls	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f000 808f 	beq.w	800400c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0310 	and.w	r3, r3, #16
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 8087 	beq.w	800400c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f02:	2220      	movs	r2, #32
 8003f04:	409a      	lsls	r2, r3
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b05      	cmp	r3, #5
 8003f14:	d136      	bne.n	8003f84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0216 	bic.w	r2, r2, #22
 8003f24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	695a      	ldr	r2, [r3, #20]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d103      	bne.n	8003f46 <HAL_DMA_IRQHandler+0x1da>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d007      	beq.n	8003f56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0208 	bic.w	r2, r2, #8
 8003f54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f5a:	223f      	movs	r2, #63	; 0x3f
 8003f5c:	409a      	lsls	r2, r3
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d07e      	beq.n	8004078 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	4798      	blx	r3
        }
        return;
 8003f82:	e079      	b.n	8004078 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d01d      	beq.n	8003fce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10d      	bne.n	8003fbc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d031      	beq.n	800400c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	4798      	blx	r3
 8003fb0:	e02c      	b.n	800400c <HAL_DMA_IRQHandler+0x2a0>
 8003fb2:	bf00      	nop
 8003fb4:	20000058 	.word	0x20000058
 8003fb8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d023      	beq.n	800400c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	4798      	blx	r3
 8003fcc:	e01e      	b.n	800400c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d10f      	bne.n	8003ffc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 0210 	bic.w	r2, r2, #16
 8003fea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004000:	2b00      	cmp	r3, #0
 8004002:	d003      	beq.n	800400c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004010:	2b00      	cmp	r3, #0
 8004012:	d032      	beq.n	800407a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	2b00      	cmp	r3, #0
 800401e:	d022      	beq.n	8004066 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2205      	movs	r2, #5
 8004024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 0201 	bic.w	r2, r2, #1
 8004036:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	3301      	adds	r3, #1
 800403c:	60bb      	str	r3, [r7, #8]
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	429a      	cmp	r2, r3
 8004042:	d307      	bcc.n	8004054 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1f2      	bne.n	8004038 <HAL_DMA_IRQHandler+0x2cc>
 8004052:	e000      	b.n	8004056 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004054:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800406a:	2b00      	cmp	r3, #0
 800406c:	d005      	beq.n	800407a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	4798      	blx	r3
 8004076:	e000      	b.n	800407a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004078:	bf00      	nop
    }
  }
}
 800407a:	3718      	adds	r7, #24
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
 800408c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800409c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	2b40      	cmp	r3, #64	; 0x40
 80040ac:	d108      	bne.n	80040c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80040be:	e007      	b.n	80040d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	60da      	str	r2, [r3, #12]
}
 80040d0:	bf00      	nop
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	3b10      	subs	r3, #16
 80040ec:	4a14      	ldr	r2, [pc, #80]	; (8004140 <DMA_CalcBaseAndBitshift+0x64>)
 80040ee:	fba2 2303 	umull	r2, r3, r2, r3
 80040f2:	091b      	lsrs	r3, r3, #4
 80040f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80040f6:	4a13      	ldr	r2, [pc, #76]	; (8004144 <DMA_CalcBaseAndBitshift+0x68>)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4413      	add	r3, r2
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	461a      	mov	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2b03      	cmp	r3, #3
 8004108:	d909      	bls.n	800411e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004112:	f023 0303 	bic.w	r3, r3, #3
 8004116:	1d1a      	adds	r2, r3, #4
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	659a      	str	r2, [r3, #88]	; 0x58
 800411c:	e007      	b.n	800412e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004126:	f023 0303 	bic.w	r3, r3, #3
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004132:	4618      	mov	r0, r3
 8004134:	3714      	adds	r7, #20
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	aaaaaaab 	.word	0xaaaaaaab
 8004144:	0800ec44 	.word	0x0800ec44

08004148 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004150:	2300      	movs	r3, #0
 8004152:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004158:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d11f      	bne.n	80041a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	2b03      	cmp	r3, #3
 8004166:	d856      	bhi.n	8004216 <DMA_CheckFifoParam+0xce>
 8004168:	a201      	add	r2, pc, #4	; (adr r2, 8004170 <DMA_CheckFifoParam+0x28>)
 800416a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416e:	bf00      	nop
 8004170:	08004181 	.word	0x08004181
 8004174:	08004193 	.word	0x08004193
 8004178:	08004181 	.word	0x08004181
 800417c:	08004217 	.word	0x08004217
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004184:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d046      	beq.n	800421a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004190:	e043      	b.n	800421a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004196:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800419a:	d140      	bne.n	800421e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041a0:	e03d      	b.n	800421e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041aa:	d121      	bne.n	80041f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2b03      	cmp	r3, #3
 80041b0:	d837      	bhi.n	8004222 <DMA_CheckFifoParam+0xda>
 80041b2:	a201      	add	r2, pc, #4	; (adr r2, 80041b8 <DMA_CheckFifoParam+0x70>)
 80041b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b8:	080041c9 	.word	0x080041c9
 80041bc:	080041cf 	.word	0x080041cf
 80041c0:	080041c9 	.word	0x080041c9
 80041c4:	080041e1 	.word	0x080041e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	73fb      	strb	r3, [r7, #15]
      break;
 80041cc:	e030      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d025      	beq.n	8004226 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041de:	e022      	b.n	8004226 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041e8:	d11f      	bne.n	800422a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80041ee:	e01c      	b.n	800422a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d903      	bls.n	80041fe <DMA_CheckFifoParam+0xb6>
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	2b03      	cmp	r3, #3
 80041fa:	d003      	beq.n	8004204 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80041fc:	e018      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	73fb      	strb	r3, [r7, #15]
      break;
 8004202:	e015      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004208:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00e      	beq.n	800422e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	73fb      	strb	r3, [r7, #15]
      break;
 8004214:	e00b      	b.n	800422e <DMA_CheckFifoParam+0xe6>
      break;
 8004216:	bf00      	nop
 8004218:	e00a      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
      break;
 800421a:	bf00      	nop
 800421c:	e008      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
      break;
 800421e:	bf00      	nop
 8004220:	e006      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
      break;
 8004222:	bf00      	nop
 8004224:	e004      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
      break;
 8004226:	bf00      	nop
 8004228:	e002      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
      break;   
 800422a:	bf00      	nop
 800422c:	e000      	b.n	8004230 <DMA_CheckFifoParam+0xe8>
      break;
 800422e:	bf00      	nop
    }
  } 
  
  return status; 
 8004230:	7bfb      	ldrb	r3, [r7, #15]
}
 8004232:	4618      	mov	r0, r3
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop

08004240 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004240:	b480      	push	{r7}
 8004242:	b089      	sub	sp, #36	; 0x24
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800424a:	2300      	movs	r3, #0
 800424c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800424e:	2300      	movs	r3, #0
 8004250:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004252:	2300      	movs	r3, #0
 8004254:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004256:	2300      	movs	r3, #0
 8004258:	61fb      	str	r3, [r7, #28]
 800425a:	e16b      	b.n	8004534 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800425c:	2201      	movs	r2, #1
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	fa02 f303 	lsl.w	r3, r2, r3
 8004264:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	4013      	ands	r3, r2
 800426e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	429a      	cmp	r2, r3
 8004276:	f040 815a 	bne.w	800452e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	2b01      	cmp	r3, #1
 8004284:	d005      	beq.n	8004292 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800428e:	2b02      	cmp	r3, #2
 8004290:	d130      	bne.n	80042f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	005b      	lsls	r3, r3, #1
 800429c:	2203      	movs	r2, #3
 800429e:	fa02 f303 	lsl.w	r3, r2, r3
 80042a2:	43db      	mvns	r3, r3
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	4013      	ands	r3, r2
 80042a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	68da      	ldr	r2, [r3, #12]
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	fa02 f303 	lsl.w	r3, r2, r3
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042c8:	2201      	movs	r2, #1
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	fa02 f303 	lsl.w	r3, r2, r3
 80042d0:	43db      	mvns	r3, r3
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	4013      	ands	r3, r2
 80042d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	091b      	lsrs	r3, r3, #4
 80042de:	f003 0201 	and.w	r2, r3, #1
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	fa02 f303 	lsl.w	r3, r2, r3
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f003 0303 	and.w	r3, r3, #3
 80042fc:	2b03      	cmp	r3, #3
 80042fe:	d017      	beq.n	8004330 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	2203      	movs	r2, #3
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	43db      	mvns	r3, r3
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	4013      	ands	r3, r2
 8004316:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	689a      	ldr	r2, [r3, #8]
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	fa02 f303 	lsl.w	r3, r2, r3
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	4313      	orrs	r3, r2
 8004328:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f003 0303 	and.w	r3, r3, #3
 8004338:	2b02      	cmp	r3, #2
 800433a:	d123      	bne.n	8004384 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	08da      	lsrs	r2, r3, #3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3208      	adds	r2, #8
 8004344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004348:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	f003 0307 	and.w	r3, r3, #7
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	220f      	movs	r2, #15
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	43db      	mvns	r3, r3
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	4013      	ands	r3, r2
 800435e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	691a      	ldr	r2, [r3, #16]
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	f003 0307 	and.w	r3, r3, #7
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	fa02 f303 	lsl.w	r3, r2, r3
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	4313      	orrs	r3, r2
 8004374:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	08da      	lsrs	r2, r3, #3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	3208      	adds	r2, #8
 800437e:	69b9      	ldr	r1, [r7, #24]
 8004380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	2203      	movs	r2, #3
 8004390:	fa02 f303 	lsl.w	r3, r2, r3
 8004394:	43db      	mvns	r3, r3
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	4013      	ands	r3, r2
 800439a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f003 0203 	and.w	r2, r3, #3
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	005b      	lsls	r3, r3, #1
 80043a8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f000 80b4 	beq.w	800452e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043c6:	2300      	movs	r3, #0
 80043c8:	60fb      	str	r3, [r7, #12]
 80043ca:	4b60      	ldr	r3, [pc, #384]	; (800454c <HAL_GPIO_Init+0x30c>)
 80043cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ce:	4a5f      	ldr	r2, [pc, #380]	; (800454c <HAL_GPIO_Init+0x30c>)
 80043d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043d4:	6453      	str	r3, [r2, #68]	; 0x44
 80043d6:	4b5d      	ldr	r3, [pc, #372]	; (800454c <HAL_GPIO_Init+0x30c>)
 80043d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043de:	60fb      	str	r3, [r7, #12]
 80043e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043e2:	4a5b      	ldr	r2, [pc, #364]	; (8004550 <HAL_GPIO_Init+0x310>)
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	089b      	lsrs	r3, r3, #2
 80043e8:	3302      	adds	r3, #2
 80043ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	220f      	movs	r2, #15
 80043fa:	fa02 f303 	lsl.w	r3, r2, r3
 80043fe:	43db      	mvns	r3, r3
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	4013      	ands	r3, r2
 8004404:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a52      	ldr	r2, [pc, #328]	; (8004554 <HAL_GPIO_Init+0x314>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d02b      	beq.n	8004466 <HAL_GPIO_Init+0x226>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a51      	ldr	r2, [pc, #324]	; (8004558 <HAL_GPIO_Init+0x318>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d025      	beq.n	8004462 <HAL_GPIO_Init+0x222>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a50      	ldr	r2, [pc, #320]	; (800455c <HAL_GPIO_Init+0x31c>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d01f      	beq.n	800445e <HAL_GPIO_Init+0x21e>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a4f      	ldr	r2, [pc, #316]	; (8004560 <HAL_GPIO_Init+0x320>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d019      	beq.n	800445a <HAL_GPIO_Init+0x21a>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a4e      	ldr	r2, [pc, #312]	; (8004564 <HAL_GPIO_Init+0x324>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d013      	beq.n	8004456 <HAL_GPIO_Init+0x216>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a4d      	ldr	r2, [pc, #308]	; (8004568 <HAL_GPIO_Init+0x328>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d00d      	beq.n	8004452 <HAL_GPIO_Init+0x212>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a4c      	ldr	r2, [pc, #304]	; (800456c <HAL_GPIO_Init+0x32c>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d007      	beq.n	800444e <HAL_GPIO_Init+0x20e>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a4b      	ldr	r2, [pc, #300]	; (8004570 <HAL_GPIO_Init+0x330>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d101      	bne.n	800444a <HAL_GPIO_Init+0x20a>
 8004446:	2307      	movs	r3, #7
 8004448:	e00e      	b.n	8004468 <HAL_GPIO_Init+0x228>
 800444a:	2308      	movs	r3, #8
 800444c:	e00c      	b.n	8004468 <HAL_GPIO_Init+0x228>
 800444e:	2306      	movs	r3, #6
 8004450:	e00a      	b.n	8004468 <HAL_GPIO_Init+0x228>
 8004452:	2305      	movs	r3, #5
 8004454:	e008      	b.n	8004468 <HAL_GPIO_Init+0x228>
 8004456:	2304      	movs	r3, #4
 8004458:	e006      	b.n	8004468 <HAL_GPIO_Init+0x228>
 800445a:	2303      	movs	r3, #3
 800445c:	e004      	b.n	8004468 <HAL_GPIO_Init+0x228>
 800445e:	2302      	movs	r3, #2
 8004460:	e002      	b.n	8004468 <HAL_GPIO_Init+0x228>
 8004462:	2301      	movs	r3, #1
 8004464:	e000      	b.n	8004468 <HAL_GPIO_Init+0x228>
 8004466:	2300      	movs	r3, #0
 8004468:	69fa      	ldr	r2, [r7, #28]
 800446a:	f002 0203 	and.w	r2, r2, #3
 800446e:	0092      	lsls	r2, r2, #2
 8004470:	4093      	lsls	r3, r2
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	4313      	orrs	r3, r2
 8004476:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004478:	4935      	ldr	r1, [pc, #212]	; (8004550 <HAL_GPIO_Init+0x310>)
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	089b      	lsrs	r3, r3, #2
 800447e:	3302      	adds	r3, #2
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004486:	4b3b      	ldr	r3, [pc, #236]	; (8004574 <HAL_GPIO_Init+0x334>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	43db      	mvns	r3, r3
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	4013      	ands	r3, r2
 8004494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044aa:	4a32      	ldr	r2, [pc, #200]	; (8004574 <HAL_GPIO_Init+0x334>)
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044b0:	4b30      	ldr	r3, [pc, #192]	; (8004574 <HAL_GPIO_Init+0x334>)
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	43db      	mvns	r3, r3
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	4013      	ands	r3, r2
 80044be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044d4:	4a27      	ldr	r2, [pc, #156]	; (8004574 <HAL_GPIO_Init+0x334>)
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044da:	4b26      	ldr	r3, [pc, #152]	; (8004574 <HAL_GPIO_Init+0x334>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	43db      	mvns	r3, r3
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	4013      	ands	r3, r2
 80044e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044fe:	4a1d      	ldr	r2, [pc, #116]	; (8004574 <HAL_GPIO_Init+0x334>)
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004504:	4b1b      	ldr	r3, [pc, #108]	; (8004574 <HAL_GPIO_Init+0x334>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	43db      	mvns	r3, r3
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	4013      	ands	r3, r2
 8004512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	4313      	orrs	r3, r2
 8004526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004528:	4a12      	ldr	r2, [pc, #72]	; (8004574 <HAL_GPIO_Init+0x334>)
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	3301      	adds	r3, #1
 8004532:	61fb      	str	r3, [r7, #28]
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	2b0f      	cmp	r3, #15
 8004538:	f67f ae90 	bls.w	800425c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800453c:	bf00      	nop
 800453e:	bf00      	nop
 8004540:	3724      	adds	r7, #36	; 0x24
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	40023800 	.word	0x40023800
 8004550:	40013800 	.word	0x40013800
 8004554:	40020000 	.word	0x40020000
 8004558:	40020400 	.word	0x40020400
 800455c:	40020800 	.word	0x40020800
 8004560:	40020c00 	.word	0x40020c00
 8004564:	40021000 	.word	0x40021000
 8004568:	40021400 	.word	0x40021400
 800456c:	40021800 	.word	0x40021800
 8004570:	40021c00 	.word	0x40021c00
 8004574:	40013c00 	.word	0x40013c00

08004578 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	460b      	mov	r3, r1
 8004582:	807b      	strh	r3, [r7, #2]
 8004584:	4613      	mov	r3, r2
 8004586:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004588:	787b      	ldrb	r3, [r7, #1]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d003      	beq.n	8004596 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800458e:	887a      	ldrh	r2, [r7, #2]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004594:	e003      	b.n	800459e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004596:	887b      	ldrh	r3, [r7, #2]
 8004598:	041a      	lsls	r2, r3, #16
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	619a      	str	r2, [r3, #24]
}
 800459e:	bf00      	nop
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045aa:	b480      	push	{r7}
 80045ac:	b085      	sub	sp, #20
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
 80045b2:	460b      	mov	r3, r1
 80045b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80045bc:	887a      	ldrh	r2, [r7, #2]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	4013      	ands	r3, r2
 80045c2:	041a      	lsls	r2, r3, #16
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	43d9      	mvns	r1, r3
 80045c8:	887b      	ldrh	r3, [r7, #2]
 80045ca:	400b      	ands	r3, r1
 80045cc:	431a      	orrs	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	619a      	str	r2, [r3, #24]
}
 80045d2:	bf00      	nop
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
	...

080045e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	4603      	mov	r3, r0
 80045e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80045ea:	4b08      	ldr	r3, [pc, #32]	; (800460c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045ec:	695a      	ldr	r2, [r3, #20]
 80045ee:	88fb      	ldrh	r3, [r7, #6]
 80045f0:	4013      	ands	r3, r2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d006      	beq.n	8004604 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045f6:	4a05      	ldr	r2, [pc, #20]	; (800460c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045f8:	88fb      	ldrh	r3, [r7, #6]
 80045fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80045fc:	88fb      	ldrh	r3, [r7, #6]
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fd f81a 	bl	8001638 <HAL_GPIO_EXTI_Callback>
  }
}
 8004604:	bf00      	nop
 8004606:	3708      	adds	r7, #8
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	40013c00 	.word	0x40013c00

08004610 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e12b      	b.n	800487a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d106      	bne.n	800463c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7fe fbde 	bl	8002df8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2224      	movs	r2, #36	; 0x24
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f022 0201 	bic.w	r2, r2, #1
 8004652:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004662:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004672:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004674:	f001 fd2a 	bl	80060cc <HAL_RCC_GetPCLK1Freq>
 8004678:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	4a81      	ldr	r2, [pc, #516]	; (8004884 <HAL_I2C_Init+0x274>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d807      	bhi.n	8004694 <HAL_I2C_Init+0x84>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	4a80      	ldr	r2, [pc, #512]	; (8004888 <HAL_I2C_Init+0x278>)
 8004688:	4293      	cmp	r3, r2
 800468a:	bf94      	ite	ls
 800468c:	2301      	movls	r3, #1
 800468e:	2300      	movhi	r3, #0
 8004690:	b2db      	uxtb	r3, r3
 8004692:	e006      	b.n	80046a2 <HAL_I2C_Init+0x92>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	4a7d      	ldr	r2, [pc, #500]	; (800488c <HAL_I2C_Init+0x27c>)
 8004698:	4293      	cmp	r3, r2
 800469a:	bf94      	ite	ls
 800469c:	2301      	movls	r3, #1
 800469e:	2300      	movhi	r3, #0
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e0e7      	b.n	800487a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	4a78      	ldr	r2, [pc, #480]	; (8004890 <HAL_I2C_Init+0x280>)
 80046ae:	fba2 2303 	umull	r2, r3, r2, r3
 80046b2:	0c9b      	lsrs	r3, r3, #18
 80046b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	4a6a      	ldr	r2, [pc, #424]	; (8004884 <HAL_I2C_Init+0x274>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d802      	bhi.n	80046e4 <HAL_I2C_Init+0xd4>
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	3301      	adds	r3, #1
 80046e2:	e009      	b.n	80046f8 <HAL_I2C_Init+0xe8>
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80046ea:	fb02 f303 	mul.w	r3, r2, r3
 80046ee:	4a69      	ldr	r2, [pc, #420]	; (8004894 <HAL_I2C_Init+0x284>)
 80046f0:	fba2 2303 	umull	r2, r3, r2, r3
 80046f4:	099b      	lsrs	r3, r3, #6
 80046f6:	3301      	adds	r3, #1
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6812      	ldr	r2, [r2, #0]
 80046fc:	430b      	orrs	r3, r1
 80046fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800470a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	495c      	ldr	r1, [pc, #368]	; (8004884 <HAL_I2C_Init+0x274>)
 8004714:	428b      	cmp	r3, r1
 8004716:	d819      	bhi.n	800474c <HAL_I2C_Init+0x13c>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	1e59      	subs	r1, r3, #1
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	fbb1 f3f3 	udiv	r3, r1, r3
 8004726:	1c59      	adds	r1, r3, #1
 8004728:	f640 73fc 	movw	r3, #4092	; 0xffc
 800472c:	400b      	ands	r3, r1
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00a      	beq.n	8004748 <HAL_I2C_Init+0x138>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	1e59      	subs	r1, r3, #1
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004740:	3301      	adds	r3, #1
 8004742:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004746:	e051      	b.n	80047ec <HAL_I2C_Init+0x1dc>
 8004748:	2304      	movs	r3, #4
 800474a:	e04f      	b.n	80047ec <HAL_I2C_Init+0x1dc>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d111      	bne.n	8004778 <HAL_I2C_Init+0x168>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	1e58      	subs	r0, r3, #1
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6859      	ldr	r1, [r3, #4]
 800475c:	460b      	mov	r3, r1
 800475e:	005b      	lsls	r3, r3, #1
 8004760:	440b      	add	r3, r1
 8004762:	fbb0 f3f3 	udiv	r3, r0, r3
 8004766:	3301      	adds	r3, #1
 8004768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800476c:	2b00      	cmp	r3, #0
 800476e:	bf0c      	ite	eq
 8004770:	2301      	moveq	r3, #1
 8004772:	2300      	movne	r3, #0
 8004774:	b2db      	uxtb	r3, r3
 8004776:	e012      	b.n	800479e <HAL_I2C_Init+0x18e>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	1e58      	subs	r0, r3, #1
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6859      	ldr	r1, [r3, #4]
 8004780:	460b      	mov	r3, r1
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	440b      	add	r3, r1
 8004786:	0099      	lsls	r1, r3, #2
 8004788:	440b      	add	r3, r1
 800478a:	fbb0 f3f3 	udiv	r3, r0, r3
 800478e:	3301      	adds	r3, #1
 8004790:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004794:	2b00      	cmp	r3, #0
 8004796:	bf0c      	ite	eq
 8004798:	2301      	moveq	r3, #1
 800479a:	2300      	movne	r3, #0
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <HAL_I2C_Init+0x196>
 80047a2:	2301      	movs	r3, #1
 80047a4:	e022      	b.n	80047ec <HAL_I2C_Init+0x1dc>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10e      	bne.n	80047cc <HAL_I2C_Init+0x1bc>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	1e58      	subs	r0, r3, #1
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6859      	ldr	r1, [r3, #4]
 80047b6:	460b      	mov	r3, r1
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	440b      	add	r3, r1
 80047bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80047c0:	3301      	adds	r3, #1
 80047c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047ca:	e00f      	b.n	80047ec <HAL_I2C_Init+0x1dc>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	1e58      	subs	r0, r3, #1
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6859      	ldr	r1, [r3, #4]
 80047d4:	460b      	mov	r3, r1
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	440b      	add	r3, r1
 80047da:	0099      	lsls	r1, r3, #2
 80047dc:	440b      	add	r3, r1
 80047de:	fbb0 f3f3 	udiv	r3, r0, r3
 80047e2:	3301      	adds	r3, #1
 80047e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047ec:	6879      	ldr	r1, [r7, #4]
 80047ee:	6809      	ldr	r1, [r1, #0]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	69da      	ldr	r2, [r3, #28]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	431a      	orrs	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	430a      	orrs	r2, r1
 800480e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800481a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	6911      	ldr	r1, [r2, #16]
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	68d2      	ldr	r2, [r2, #12]
 8004826:	4311      	orrs	r1, r2
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	6812      	ldr	r2, [r2, #0]
 800482c:	430b      	orrs	r3, r1
 800482e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	695a      	ldr	r2, [r3, #20]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	431a      	orrs	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0201 	orr.w	r2, r2, #1
 800485a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2220      	movs	r2, #32
 8004866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	000186a0 	.word	0x000186a0
 8004888:	001e847f 	.word	0x001e847f
 800488c:	003d08ff 	.word	0x003d08ff
 8004890:	431bde83 	.word	0x431bde83
 8004894:	10624dd3 	.word	0x10624dd3

08004898 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b088      	sub	sp, #32
 800489c:	af02      	add	r7, sp, #8
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	4608      	mov	r0, r1
 80048a2:	4611      	mov	r1, r2
 80048a4:	461a      	mov	r2, r3
 80048a6:	4603      	mov	r3, r0
 80048a8:	817b      	strh	r3, [r7, #10]
 80048aa:	460b      	mov	r3, r1
 80048ac:	813b      	strh	r3, [r7, #8]
 80048ae:	4613      	mov	r3, r2
 80048b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048b2:	f7fe ffd5 	bl	8003860 <HAL_GetTick>
 80048b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b20      	cmp	r3, #32
 80048c2:	f040 80d9 	bne.w	8004a78 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	9300      	str	r3, [sp, #0]
 80048ca:	2319      	movs	r3, #25
 80048cc:	2201      	movs	r2, #1
 80048ce:	496d      	ldr	r1, [pc, #436]	; (8004a84 <HAL_I2C_Mem_Write+0x1ec>)
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 fdad 	bl	8005430 <I2C_WaitOnFlagUntilTimeout>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80048dc:	2302      	movs	r3, #2
 80048de:	e0cc      	b.n	8004a7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d101      	bne.n	80048ee <HAL_I2C_Mem_Write+0x56>
 80048ea:	2302      	movs	r3, #2
 80048ec:	e0c5      	b.n	8004a7a <HAL_I2C_Mem_Write+0x1e2>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0301 	and.w	r3, r3, #1
 8004900:	2b01      	cmp	r3, #1
 8004902:	d007      	beq.n	8004914 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f042 0201 	orr.w	r2, r2, #1
 8004912:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004922:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2221      	movs	r2, #33	; 0x21
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2240      	movs	r2, #64	; 0x40
 8004930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6a3a      	ldr	r2, [r7, #32]
 800493e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004944:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800494a:	b29a      	uxth	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4a4d      	ldr	r2, [pc, #308]	; (8004a88 <HAL_I2C_Mem_Write+0x1f0>)
 8004954:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004956:	88f8      	ldrh	r0, [r7, #6]
 8004958:	893a      	ldrh	r2, [r7, #8]
 800495a:	8979      	ldrh	r1, [r7, #10]
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	9301      	str	r3, [sp, #4]
 8004960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	4603      	mov	r3, r0
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 fbe4 	bl	8005134 <I2C_RequestMemoryWrite>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d052      	beq.n	8004a18 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e081      	b.n	8004a7a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f000 fe2e 	bl	80055dc <I2C_WaitOnTXEFlagUntilTimeout>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00d      	beq.n	80049a2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498a:	2b04      	cmp	r3, #4
 800498c:	d107      	bne.n	800499e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800499c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e06b      	b.n	8004a7a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a6:	781a      	ldrb	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b2:	1c5a      	adds	r2, r3, #1
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049bc:	3b01      	subs	r3, #1
 80049be:	b29a      	uxth	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	3b01      	subs	r3, #1
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	2b04      	cmp	r3, #4
 80049de:	d11b      	bne.n	8004a18 <HAL_I2C_Mem_Write+0x180>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d017      	beq.n	8004a18 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	781a      	ldrb	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f8:	1c5a      	adds	r2, r3, #1
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a02:	3b01      	subs	r3, #1
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	3b01      	subs	r3, #1
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1aa      	bne.n	8004976 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f000 fe1a 	bl	800565e <I2C_WaitOnBTFFlagUntilTimeout>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00d      	beq.n	8004a4c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a34:	2b04      	cmp	r3, #4
 8004a36:	d107      	bne.n	8004a48 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a46:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e016      	b.n	8004a7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a74:	2300      	movs	r3, #0
 8004a76:	e000      	b.n	8004a7a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004a78:	2302      	movs	r3, #2
  }
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3718      	adds	r7, #24
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	00100002 	.word	0x00100002
 8004a88:	ffff0000 	.word	0xffff0000

08004a8c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b08c      	sub	sp, #48	; 0x30
 8004a90:	af02      	add	r7, sp, #8
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	4608      	mov	r0, r1
 8004a96:	4611      	mov	r1, r2
 8004a98:	461a      	mov	r2, r3
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	817b      	strh	r3, [r7, #10]
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	813b      	strh	r3, [r7, #8]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004aa6:	f7fe fedb 	bl	8003860 <HAL_GetTick>
 8004aaa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b20      	cmp	r3, #32
 8004ab6:	f040 8208 	bne.w	8004eca <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	2319      	movs	r3, #25
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	497b      	ldr	r1, [pc, #492]	; (8004cb0 <HAL_I2C_Mem_Read+0x224>)
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f000 fcb3 	bl	8005430 <I2C_WaitOnFlagUntilTimeout>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d001      	beq.n	8004ad4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e1fb      	b.n	8004ecc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d101      	bne.n	8004ae2 <HAL_I2C_Mem_Read+0x56>
 8004ade:	2302      	movs	r3, #2
 8004ae0:	e1f4      	b.n	8004ecc <HAL_I2C_Mem_Read+0x440>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d007      	beq.n	8004b08 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0201 	orr.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2222      	movs	r2, #34	; 0x22
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2240      	movs	r2, #64	; 0x40
 8004b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004b38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	4a5b      	ldr	r2, [pc, #364]	; (8004cb4 <HAL_I2C_Mem_Read+0x228>)
 8004b48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b4a:	88f8      	ldrh	r0, [r7, #6]
 8004b4c:	893a      	ldrh	r2, [r7, #8]
 8004b4e:	8979      	ldrh	r1, [r7, #10]
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	9301      	str	r3, [sp, #4]
 8004b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	4603      	mov	r3, r0
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 fb80 	bl	8005260 <I2C_RequestMemoryRead>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e1b0      	b.n	8004ecc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d113      	bne.n	8004b9a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b72:	2300      	movs	r3, #0
 8004b74:	623b      	str	r3, [r7, #32]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	623b      	str	r3, [r7, #32]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	623b      	str	r3, [r7, #32]
 8004b86:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	e184      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d11b      	bne.n	8004bda <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bb0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	61fb      	str	r3, [r7, #28]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	61fb      	str	r3, [r7, #28]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	61fb      	str	r3, [r7, #28]
 8004bc6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	e164      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d11b      	bne.n	8004c1a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bf0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c02:	2300      	movs	r3, #0
 8004c04:	61bb      	str	r3, [r7, #24]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	61bb      	str	r3, [r7, #24]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	61bb      	str	r3, [r7, #24]
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	e144      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	617b      	str	r3, [r7, #20]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	617b      	str	r3, [r7, #20]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	617b      	str	r3, [r7, #20]
 8004c2e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004c30:	e138      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c36:	2b03      	cmp	r3, #3
 8004c38:	f200 80f1 	bhi.w	8004e1e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d123      	bne.n	8004c8c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f000 fd49 	bl	80056e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e139      	b.n	8004ecc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	691a      	ldr	r2, [r3, #16]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c62:	b2d2      	uxtb	r2, r2
 8004c64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6a:	1c5a      	adds	r2, r3, #1
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c74:	3b01      	subs	r3, #1
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	3b01      	subs	r3, #1
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c8a:	e10b      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d14e      	bne.n	8004d32 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c96:	9300      	str	r3, [sp, #0]
 8004c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	4906      	ldr	r1, [pc, #24]	; (8004cb8 <HAL_I2C_Mem_Read+0x22c>)
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 fbc6 	bl	8005430 <I2C_WaitOnFlagUntilTimeout>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d008      	beq.n	8004cbc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e10e      	b.n	8004ecc <HAL_I2C_Mem_Read+0x440>
 8004cae:	bf00      	nop
 8004cb0:	00100002 	.word	0x00100002
 8004cb4:	ffff0000 	.word	0xffff0000
 8004cb8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	691a      	ldr	r2, [r3, #16]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd6:	b2d2      	uxtb	r2, r2
 8004cd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	1c5a      	adds	r2, r3, #1
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	691a      	ldr	r2, [r3, #16]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	b2d2      	uxtb	r2, r2
 8004d0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d10:	1c5a      	adds	r2, r3, #1
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d30:	e0b8      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	9300      	str	r3, [sp, #0]
 8004d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d38:	2200      	movs	r2, #0
 8004d3a:	4966      	ldr	r1, [pc, #408]	; (8004ed4 <HAL_I2C_Mem_Read+0x448>)
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f000 fb77 	bl	8005430 <I2C_WaitOnFlagUntilTimeout>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e0bf      	b.n	8004ecc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	691a      	ldr	r2, [r3, #16]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d66:	b2d2      	uxtb	r2, r2
 8004d68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6e:	1c5a      	adds	r2, r3, #1
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	3b01      	subs	r3, #1
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d94:	2200      	movs	r2, #0
 8004d96:	494f      	ldr	r1, [pc, #316]	; (8004ed4 <HAL_I2C_Mem_Read+0x448>)
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f000 fb49 	bl	8005430 <I2C_WaitOnFlagUntilTimeout>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d001      	beq.n	8004da8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e091      	b.n	8004ecc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004db6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	691a      	ldr	r2, [r3, #16]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc2:	b2d2      	uxtb	r2, r2
 8004dc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dca:	1c5a      	adds	r2, r3, #1
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	3b01      	subs	r3, #1
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	691a      	ldr	r2, [r3, #16]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df4:	b2d2      	uxtb	r2, r2
 8004df6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	1c5a      	adds	r2, r3, #1
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e06:	3b01      	subs	r3, #1
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	3b01      	subs	r3, #1
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e1c:	e042      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f000 fc5c 	bl	80056e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e04c      	b.n	8004ecc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	691a      	ldr	r2, [r3, #16]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	b2d2      	uxtb	r2, r2
 8004e3e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e44:	1c5a      	adds	r2, r3, #1
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	f003 0304 	and.w	r3, r3, #4
 8004e6e:	2b04      	cmp	r3, #4
 8004e70:	d118      	bne.n	8004ea4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	691a      	ldr	r2, [r3, #16]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	b2d2      	uxtb	r2, r2
 8004e7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e84:	1c5a      	adds	r2, r3, #1
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f47f aec2 	bne.w	8004c32 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	e000      	b.n	8004ecc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004eca:	2302      	movs	r3, #2
  }
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3728      	adds	r7, #40	; 0x28
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	00010004 	.word	0x00010004

08004ed8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b08a      	sub	sp, #40	; 0x28
 8004edc:	af02      	add	r7, sp, #8
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	607a      	str	r2, [r7, #4]
 8004ee2:	603b      	str	r3, [r7, #0]
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004ee8:	f7fe fcba 	bl	8003860 <HAL_GetTick>
 8004eec:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b20      	cmp	r3, #32
 8004efc:	f040 8111 	bne.w	8005122 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	9300      	str	r3, [sp, #0]
 8004f04:	2319      	movs	r3, #25
 8004f06:	2201      	movs	r2, #1
 8004f08:	4988      	ldr	r1, [pc, #544]	; (800512c <HAL_I2C_IsDeviceReady+0x254>)
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f000 fa90 	bl	8005430 <I2C_WaitOnFlagUntilTimeout>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d001      	beq.n	8004f1a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004f16:	2302      	movs	r3, #2
 8004f18:	e104      	b.n	8005124 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d101      	bne.n	8004f28 <HAL_I2C_IsDeviceReady+0x50>
 8004f24:	2302      	movs	r3, #2
 8004f26:	e0fd      	b.n	8005124 <HAL_I2C_IsDeviceReady+0x24c>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d007      	beq.n	8004f4e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f042 0201 	orr.w	r2, r2, #1
 8004f4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2224      	movs	r2, #36	; 0x24
 8004f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	4a70      	ldr	r2, [pc, #448]	; (8005130 <HAL_I2C_IsDeviceReady+0x258>)
 8004f70:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f80:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f000 fa4e 	bl	8005430 <I2C_WaitOnFlagUntilTimeout>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00d      	beq.n	8004fb6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fa8:	d103      	bne.n	8004fb2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fb0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e0b6      	b.n	8005124 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fb6:	897b      	ldrh	r3, [r7, #10]
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	461a      	mov	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fc4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004fc6:	f7fe fc4b 	bl	8003860 <HAL_GetTick>
 8004fca:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	bf0c      	ite	eq
 8004fda:	2301      	moveq	r3, #1
 8004fdc:	2300      	movne	r3, #0
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ff0:	bf0c      	ite	eq
 8004ff2:	2301      	moveq	r3, #1
 8004ff4:	2300      	movne	r3, #0
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004ffa:	e025      	b.n	8005048 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004ffc:	f7fe fc30 	bl	8003860 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	429a      	cmp	r2, r3
 800500a:	d302      	bcc.n	8005012 <HAL_I2C_IsDeviceReady+0x13a>
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d103      	bne.n	800501a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	22a0      	movs	r2, #160	; 0xa0
 8005016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	f003 0302 	and.w	r3, r3, #2
 8005024:	2b02      	cmp	r3, #2
 8005026:	bf0c      	ite	eq
 8005028:	2301      	moveq	r3, #1
 800502a:	2300      	movne	r3, #0
 800502c:	b2db      	uxtb	r3, r3
 800502e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800503a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800503e:	bf0c      	ite	eq
 8005040:	2301      	moveq	r3, #1
 8005042:	2300      	movne	r3, #0
 8005044:	b2db      	uxtb	r3, r3
 8005046:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2ba0      	cmp	r3, #160	; 0xa0
 8005052:	d005      	beq.n	8005060 <HAL_I2C_IsDeviceReady+0x188>
 8005054:	7dfb      	ldrb	r3, [r7, #23]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d102      	bne.n	8005060 <HAL_I2C_IsDeviceReady+0x188>
 800505a:	7dbb      	ldrb	r3, [r7, #22]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d0cd      	beq.n	8004ffc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2220      	movs	r2, #32
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b02      	cmp	r3, #2
 8005074:	d129      	bne.n	80050ca <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005084:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005086:	2300      	movs	r3, #0
 8005088:	613b      	str	r3, [r7, #16]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	613b      	str	r3, [r7, #16]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	613b      	str	r3, [r7, #16]
 800509a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	2319      	movs	r3, #25
 80050a2:	2201      	movs	r2, #1
 80050a4:	4921      	ldr	r1, [pc, #132]	; (800512c <HAL_I2C_IsDeviceReady+0x254>)
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f000 f9c2 	bl	8005430 <I2C_WaitOnFlagUntilTimeout>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e036      	b.n	8005124 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2220      	movs	r2, #32
 80050ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80050c6:	2300      	movs	r3, #0
 80050c8:	e02c      	b.n	8005124 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050d8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050e2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	2319      	movs	r3, #25
 80050ea:	2201      	movs	r2, #1
 80050ec:	490f      	ldr	r1, [pc, #60]	; (800512c <HAL_I2C_IsDeviceReady+0x254>)
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 f99e 	bl	8005430 <I2C_WaitOnFlagUntilTimeout>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e012      	b.n	8005124 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	3301      	adds	r3, #1
 8005102:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	429a      	cmp	r2, r3
 800510a:	f4ff af32 	bcc.w	8004f72 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2220      	movs	r2, #32
 8005112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e000      	b.n	8005124 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005122:	2302      	movs	r3, #2
  }
}
 8005124:	4618      	mov	r0, r3
 8005126:	3720      	adds	r7, #32
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	00100002 	.word	0x00100002
 8005130:	ffff0000 	.word	0xffff0000

08005134 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b088      	sub	sp, #32
 8005138:	af02      	add	r7, sp, #8
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	4608      	mov	r0, r1
 800513e:	4611      	mov	r1, r2
 8005140:	461a      	mov	r2, r3
 8005142:	4603      	mov	r3, r0
 8005144:	817b      	strh	r3, [r7, #10]
 8005146:	460b      	mov	r3, r1
 8005148:	813b      	strh	r3, [r7, #8]
 800514a:	4613      	mov	r3, r2
 800514c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800515c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	6a3b      	ldr	r3, [r7, #32]
 8005164:	2200      	movs	r2, #0
 8005166:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 f960 	bl	8005430 <I2C_WaitOnFlagUntilTimeout>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00d      	beq.n	8005192 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005180:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005184:	d103      	bne.n	800518e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f44f 7200 	mov.w	r2, #512	; 0x200
 800518c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e05f      	b.n	8005252 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005192:	897b      	ldrh	r3, [r7, #10]
 8005194:	b2db      	uxtb	r3, r3
 8005196:	461a      	mov	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a4:	6a3a      	ldr	r2, [r7, #32]
 80051a6:	492d      	ldr	r1, [pc, #180]	; (800525c <I2C_RequestMemoryWrite+0x128>)
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 f998 	bl	80054de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e04c      	b.n	8005252 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051b8:	2300      	movs	r3, #0
 80051ba:	617b      	str	r3, [r7, #20]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	617b      	str	r3, [r7, #20]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	617b      	str	r3, [r7, #20]
 80051cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d0:	6a39      	ldr	r1, [r7, #32]
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f000 fa02 	bl	80055dc <I2C_WaitOnTXEFlagUntilTimeout>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00d      	beq.n	80051fa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	d107      	bne.n	80051f6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e02b      	b.n	8005252 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051fa:	88fb      	ldrh	r3, [r7, #6]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d105      	bne.n	800520c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005200:	893b      	ldrh	r3, [r7, #8]
 8005202:	b2da      	uxtb	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	611a      	str	r2, [r3, #16]
 800520a:	e021      	b.n	8005250 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800520c:	893b      	ldrh	r3, [r7, #8]
 800520e:	0a1b      	lsrs	r3, r3, #8
 8005210:	b29b      	uxth	r3, r3
 8005212:	b2da      	uxtb	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800521a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800521c:	6a39      	ldr	r1, [r7, #32]
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f000 f9dc 	bl	80055dc <I2C_WaitOnTXEFlagUntilTimeout>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00d      	beq.n	8005246 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522e:	2b04      	cmp	r3, #4
 8005230:	d107      	bne.n	8005242 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005240:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e005      	b.n	8005252 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005246:	893b      	ldrh	r3, [r7, #8]
 8005248:	b2da      	uxtb	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3718      	adds	r7, #24
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	00010002 	.word	0x00010002

08005260 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b088      	sub	sp, #32
 8005264:	af02      	add	r7, sp, #8
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	4608      	mov	r0, r1
 800526a:	4611      	mov	r1, r2
 800526c:	461a      	mov	r2, r3
 800526e:	4603      	mov	r3, r0
 8005270:	817b      	strh	r3, [r7, #10]
 8005272:	460b      	mov	r3, r1
 8005274:	813b      	strh	r3, [r7, #8]
 8005276:	4613      	mov	r3, r2
 8005278:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005288:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005298:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	6a3b      	ldr	r3, [r7, #32]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f000 f8c2 	bl	8005430 <I2C_WaitOnFlagUntilTimeout>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00d      	beq.n	80052ce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052c0:	d103      	bne.n	80052ca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e0aa      	b.n	8005424 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052ce:	897b      	ldrh	r3, [r7, #10]
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	461a      	mov	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e0:	6a3a      	ldr	r2, [r7, #32]
 80052e2:	4952      	ldr	r1, [pc, #328]	; (800542c <I2C_RequestMemoryRead+0x1cc>)
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f000 f8fa 	bl	80054de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d001      	beq.n	80052f4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e097      	b.n	8005424 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052f4:	2300      	movs	r3, #0
 80052f6:	617b      	str	r3, [r7, #20]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	617b      	str	r3, [r7, #20]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	617b      	str	r3, [r7, #20]
 8005308:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800530a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800530c:	6a39      	ldr	r1, [r7, #32]
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f000 f964 	bl	80055dc <I2C_WaitOnTXEFlagUntilTimeout>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00d      	beq.n	8005336 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531e:	2b04      	cmp	r3, #4
 8005320:	d107      	bne.n	8005332 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005330:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e076      	b.n	8005424 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005336:	88fb      	ldrh	r3, [r7, #6]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d105      	bne.n	8005348 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800533c:	893b      	ldrh	r3, [r7, #8]
 800533e:	b2da      	uxtb	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	611a      	str	r2, [r3, #16]
 8005346:	e021      	b.n	800538c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005348:	893b      	ldrh	r3, [r7, #8]
 800534a:	0a1b      	lsrs	r3, r3, #8
 800534c:	b29b      	uxth	r3, r3
 800534e:	b2da      	uxtb	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005358:	6a39      	ldr	r1, [r7, #32]
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f000 f93e 	bl	80055dc <I2C_WaitOnTXEFlagUntilTimeout>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00d      	beq.n	8005382 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536a:	2b04      	cmp	r3, #4
 800536c:	d107      	bne.n	800537e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800537c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e050      	b.n	8005424 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005382:	893b      	ldrh	r3, [r7, #8]
 8005384:	b2da      	uxtb	r2, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800538c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800538e:	6a39      	ldr	r1, [r7, #32]
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f000 f923 	bl	80055dc <I2C_WaitOnTXEFlagUntilTimeout>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00d      	beq.n	80053b8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a0:	2b04      	cmp	r3, #4
 80053a2:	d107      	bne.n	80053b4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053b2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e035      	b.n	8005424 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053c6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ca:	9300      	str	r3, [sp, #0]
 80053cc:	6a3b      	ldr	r3, [r7, #32]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f000 f82b 	bl	8005430 <I2C_WaitOnFlagUntilTimeout>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00d      	beq.n	80053fc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053ee:	d103      	bne.n	80053f8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e013      	b.n	8005424 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80053fc:	897b      	ldrh	r3, [r7, #10]
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	f043 0301 	orr.w	r3, r3, #1
 8005404:	b2da      	uxtb	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800540c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540e:	6a3a      	ldr	r2, [r7, #32]
 8005410:	4906      	ldr	r1, [pc, #24]	; (800542c <I2C_RequestMemoryRead+0x1cc>)
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f000 f863 	bl	80054de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d001      	beq.n	8005422 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e000      	b.n	8005424 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3718      	adds	r7, #24
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	00010002 	.word	0x00010002

08005430 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	603b      	str	r3, [r7, #0]
 800543c:	4613      	mov	r3, r2
 800543e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005440:	e025      	b.n	800548e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005448:	d021      	beq.n	800548e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800544a:	f7fe fa09 	bl	8003860 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	683a      	ldr	r2, [r7, #0]
 8005456:	429a      	cmp	r2, r3
 8005458:	d302      	bcc.n	8005460 <I2C_WaitOnFlagUntilTimeout+0x30>
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d116      	bne.n	800548e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2220      	movs	r2, #32
 800546a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547a:	f043 0220 	orr.w	r2, r3, #32
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e023      	b.n	80054d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	0c1b      	lsrs	r3, r3, #16
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b01      	cmp	r3, #1
 8005496:	d10d      	bne.n	80054b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	43da      	mvns	r2, r3
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	4013      	ands	r3, r2
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	bf0c      	ite	eq
 80054aa:	2301      	moveq	r3, #1
 80054ac:	2300      	movne	r3, #0
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	461a      	mov	r2, r3
 80054b2:	e00c      	b.n	80054ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	43da      	mvns	r2, r3
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	4013      	ands	r3, r2
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	bf0c      	ite	eq
 80054c6:	2301      	moveq	r3, #1
 80054c8:	2300      	movne	r3, #0
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	461a      	mov	r2, r3
 80054ce:	79fb      	ldrb	r3, [r7, #7]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d0b6      	beq.n	8005442 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80054de:	b580      	push	{r7, lr}
 80054e0:	b084      	sub	sp, #16
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	60f8      	str	r0, [r7, #12]
 80054e6:	60b9      	str	r1, [r7, #8]
 80054e8:	607a      	str	r2, [r7, #4]
 80054ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054ec:	e051      	b.n	8005592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054fc:	d123      	bne.n	8005546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800550c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005516:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2220      	movs	r2, #32
 8005522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005532:	f043 0204 	orr.w	r2, r3, #4
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e046      	b.n	80055d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800554c:	d021      	beq.n	8005592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800554e:	f7fe f987 	bl	8003860 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	429a      	cmp	r2, r3
 800555c:	d302      	bcc.n	8005564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d116      	bne.n	8005592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2220      	movs	r2, #32
 800556e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557e:	f043 0220 	orr.w	r2, r3, #32
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e020      	b.n	80055d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	0c1b      	lsrs	r3, r3, #16
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b01      	cmp	r3, #1
 800559a:	d10c      	bne.n	80055b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	43da      	mvns	r2, r3
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	4013      	ands	r3, r2
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	bf14      	ite	ne
 80055ae:	2301      	movne	r3, #1
 80055b0:	2300      	moveq	r3, #0
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	e00b      	b.n	80055ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	43da      	mvns	r2, r3
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	4013      	ands	r3, r2
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	bf14      	ite	ne
 80055c8:	2301      	movne	r3, #1
 80055ca:	2300      	moveq	r3, #0
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d18d      	bne.n	80054ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055e8:	e02d      	b.n	8005646 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055ea:	68f8      	ldr	r0, [r7, #12]
 80055ec:	f000 f8ce 	bl	800578c <I2C_IsAcknowledgeFailed>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e02d      	b.n	8005656 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005600:	d021      	beq.n	8005646 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005602:	f7fe f92d 	bl	8003860 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	429a      	cmp	r2, r3
 8005610:	d302      	bcc.n	8005618 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d116      	bne.n	8005646 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2220      	movs	r2, #32
 8005622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005632:	f043 0220 	orr.w	r2, r3, #32
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e007      	b.n	8005656 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	695b      	ldr	r3, [r3, #20]
 800564c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005650:	2b80      	cmp	r3, #128	; 0x80
 8005652:	d1ca      	bne.n	80055ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b084      	sub	sp, #16
 8005662:	af00      	add	r7, sp, #0
 8005664:	60f8      	str	r0, [r7, #12]
 8005666:	60b9      	str	r1, [r7, #8]
 8005668:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800566a:	e02d      	b.n	80056c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f000 f88d 	bl	800578c <I2C_IsAcknowledgeFailed>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d001      	beq.n	800567c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e02d      	b.n	80056d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005682:	d021      	beq.n	80056c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005684:	f7fe f8ec 	bl	8003860 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	68ba      	ldr	r2, [r7, #8]
 8005690:	429a      	cmp	r2, r3
 8005692:	d302      	bcc.n	800569a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d116      	bne.n	80056c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2220      	movs	r2, #32
 80056a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b4:	f043 0220 	orr.w	r2, r3, #32
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e007      	b.n	80056d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	f003 0304 	and.w	r3, r3, #4
 80056d2:	2b04      	cmp	r3, #4
 80056d4:	d1ca      	bne.n	800566c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3710      	adds	r7, #16
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056ec:	e042      	b.n	8005774 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	695b      	ldr	r3, [r3, #20]
 80056f4:	f003 0310 	and.w	r3, r3, #16
 80056f8:	2b10      	cmp	r3, #16
 80056fa:	d119      	bne.n	8005730 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f06f 0210 	mvn.w	r2, #16
 8005704:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2220      	movs	r2, #32
 8005710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e029      	b.n	8005784 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005730:	f7fe f896 	bl	8003860 <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	429a      	cmp	r2, r3
 800573e:	d302      	bcc.n	8005746 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d116      	bne.n	8005774 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2220      	movs	r2, #32
 8005750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005760:	f043 0220 	orr.w	r2, r3, #32
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e007      	b.n	8005784 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800577e:	2b40      	cmp	r3, #64	; 0x40
 8005780:	d1b5      	bne.n	80056ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	3710      	adds	r7, #16
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800579e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057a2:	d11b      	bne.n	80057dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2220      	movs	r2, #32
 80057b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c8:	f043 0204 	orr.w	r2, r3, #4
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e000      	b.n	80057de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	370c      	adds	r7, #12
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
	...

080057ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e267      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	2b00      	cmp	r3, #0
 8005808:	d075      	beq.n	80058f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800580a:	4b88      	ldr	r3, [pc, #544]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f003 030c 	and.w	r3, r3, #12
 8005812:	2b04      	cmp	r3, #4
 8005814:	d00c      	beq.n	8005830 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005816:	4b85      	ldr	r3, [pc, #532]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800581e:	2b08      	cmp	r3, #8
 8005820:	d112      	bne.n	8005848 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005822:	4b82      	ldr	r3, [pc, #520]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800582a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800582e:	d10b      	bne.n	8005848 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005830:	4b7e      	ldr	r3, [pc, #504]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d05b      	beq.n	80058f4 <HAL_RCC_OscConfig+0x108>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d157      	bne.n	80058f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e242      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005850:	d106      	bne.n	8005860 <HAL_RCC_OscConfig+0x74>
 8005852:	4b76      	ldr	r3, [pc, #472]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a75      	ldr	r2, [pc, #468]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800585c:	6013      	str	r3, [r2, #0]
 800585e:	e01d      	b.n	800589c <HAL_RCC_OscConfig+0xb0>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005868:	d10c      	bne.n	8005884 <HAL_RCC_OscConfig+0x98>
 800586a:	4b70      	ldr	r3, [pc, #448]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a6f      	ldr	r2, [pc, #444]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005874:	6013      	str	r3, [r2, #0]
 8005876:	4b6d      	ldr	r3, [pc, #436]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a6c      	ldr	r2, [pc, #432]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 800587c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005880:	6013      	str	r3, [r2, #0]
 8005882:	e00b      	b.n	800589c <HAL_RCC_OscConfig+0xb0>
 8005884:	4b69      	ldr	r3, [pc, #420]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a68      	ldr	r2, [pc, #416]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 800588a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800588e:	6013      	str	r3, [r2, #0]
 8005890:	4b66      	ldr	r3, [pc, #408]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a65      	ldr	r2, [pc, #404]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005896:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800589a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d013      	beq.n	80058cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058a4:	f7fd ffdc 	bl	8003860 <HAL_GetTick>
 80058a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058aa:	e008      	b.n	80058be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058ac:	f7fd ffd8 	bl	8003860 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	2b64      	cmp	r3, #100	; 0x64
 80058b8:	d901      	bls.n	80058be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e207      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058be:	4b5b      	ldr	r3, [pc, #364]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d0f0      	beq.n	80058ac <HAL_RCC_OscConfig+0xc0>
 80058ca:	e014      	b.n	80058f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058cc:	f7fd ffc8 	bl	8003860 <HAL_GetTick>
 80058d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058d2:	e008      	b.n	80058e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058d4:	f7fd ffc4 	bl	8003860 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	2b64      	cmp	r3, #100	; 0x64
 80058e0:	d901      	bls.n	80058e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e1f3      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058e6:	4b51      	ldr	r3, [pc, #324]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1f0      	bne.n	80058d4 <HAL_RCC_OscConfig+0xe8>
 80058f2:	e000      	b.n	80058f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0302 	and.w	r3, r3, #2
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d063      	beq.n	80059ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005902:	4b4a      	ldr	r3, [pc, #296]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f003 030c 	and.w	r3, r3, #12
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00b      	beq.n	8005926 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800590e:	4b47      	ldr	r3, [pc, #284]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005916:	2b08      	cmp	r3, #8
 8005918:	d11c      	bne.n	8005954 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800591a:	4b44      	ldr	r3, [pc, #272]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d116      	bne.n	8005954 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005926:	4b41      	ldr	r3, [pc, #260]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0302 	and.w	r3, r3, #2
 800592e:	2b00      	cmp	r3, #0
 8005930:	d005      	beq.n	800593e <HAL_RCC_OscConfig+0x152>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	2b01      	cmp	r3, #1
 8005938:	d001      	beq.n	800593e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e1c7      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800593e:	4b3b      	ldr	r3, [pc, #236]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	00db      	lsls	r3, r3, #3
 800594c:	4937      	ldr	r1, [pc, #220]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 800594e:	4313      	orrs	r3, r2
 8005950:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005952:	e03a      	b.n	80059ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d020      	beq.n	800599e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800595c:	4b34      	ldr	r3, [pc, #208]	; (8005a30 <HAL_RCC_OscConfig+0x244>)
 800595e:	2201      	movs	r2, #1
 8005960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005962:	f7fd ff7d 	bl	8003860 <HAL_GetTick>
 8005966:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005968:	e008      	b.n	800597c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800596a:	f7fd ff79 	bl	8003860 <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	2b02      	cmp	r3, #2
 8005976:	d901      	bls.n	800597c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e1a8      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800597c:	4b2b      	ldr	r3, [pc, #172]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0302 	and.w	r3, r3, #2
 8005984:	2b00      	cmp	r3, #0
 8005986:	d0f0      	beq.n	800596a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005988:	4b28      	ldr	r3, [pc, #160]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	00db      	lsls	r3, r3, #3
 8005996:	4925      	ldr	r1, [pc, #148]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005998:	4313      	orrs	r3, r2
 800599a:	600b      	str	r3, [r1, #0]
 800599c:	e015      	b.n	80059ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800599e:	4b24      	ldr	r3, [pc, #144]	; (8005a30 <HAL_RCC_OscConfig+0x244>)
 80059a0:	2200      	movs	r2, #0
 80059a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a4:	f7fd ff5c 	bl	8003860 <HAL_GetTick>
 80059a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059aa:	e008      	b.n	80059be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059ac:	f7fd ff58 	bl	8003860 <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d901      	bls.n	80059be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e187      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059be:	4b1b      	ldr	r3, [pc, #108]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0302 	and.w	r3, r3, #2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1f0      	bne.n	80059ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0308 	and.w	r3, r3, #8
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d036      	beq.n	8005a44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d016      	beq.n	8005a0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059de:	4b15      	ldr	r3, [pc, #84]	; (8005a34 <HAL_RCC_OscConfig+0x248>)
 80059e0:	2201      	movs	r2, #1
 80059e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059e4:	f7fd ff3c 	bl	8003860 <HAL_GetTick>
 80059e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059ea:	e008      	b.n	80059fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059ec:	f7fd ff38 	bl	8003860 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e167      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059fe:	4b0b      	ldr	r3, [pc, #44]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d0f0      	beq.n	80059ec <HAL_RCC_OscConfig+0x200>
 8005a0a:	e01b      	b.n	8005a44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a0c:	4b09      	ldr	r3, [pc, #36]	; (8005a34 <HAL_RCC_OscConfig+0x248>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a12:	f7fd ff25 	bl	8003860 <HAL_GetTick>
 8005a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a18:	e00e      	b.n	8005a38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a1a:	f7fd ff21 	bl	8003860 <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d907      	bls.n	8005a38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e150      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
 8005a2c:	40023800 	.word	0x40023800
 8005a30:	42470000 	.word	0x42470000
 8005a34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a38:	4b88      	ldr	r3, [pc, #544]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005a3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1ea      	bne.n	8005a1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0304 	and.w	r3, r3, #4
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f000 8097 	beq.w	8005b80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a52:	2300      	movs	r3, #0
 8005a54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a56:	4b81      	ldr	r3, [pc, #516]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10f      	bne.n	8005a82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a62:	2300      	movs	r3, #0
 8005a64:	60bb      	str	r3, [r7, #8]
 8005a66:	4b7d      	ldr	r3, [pc, #500]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6a:	4a7c      	ldr	r2, [pc, #496]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a70:	6413      	str	r3, [r2, #64]	; 0x40
 8005a72:	4b7a      	ldr	r3, [pc, #488]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a7a:	60bb      	str	r3, [r7, #8]
 8005a7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a82:	4b77      	ldr	r3, [pc, #476]	; (8005c60 <HAL_RCC_OscConfig+0x474>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d118      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a8e:	4b74      	ldr	r3, [pc, #464]	; (8005c60 <HAL_RCC_OscConfig+0x474>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a73      	ldr	r2, [pc, #460]	; (8005c60 <HAL_RCC_OscConfig+0x474>)
 8005a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a9a:	f7fd fee1 	bl	8003860 <HAL_GetTick>
 8005a9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aa0:	e008      	b.n	8005ab4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aa2:	f7fd fedd 	bl	8003860 <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d901      	bls.n	8005ab4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	e10c      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ab4:	4b6a      	ldr	r3, [pc, #424]	; (8005c60 <HAL_RCC_OscConfig+0x474>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d0f0      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d106      	bne.n	8005ad6 <HAL_RCC_OscConfig+0x2ea>
 8005ac8:	4b64      	ldr	r3, [pc, #400]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005acc:	4a63      	ldr	r2, [pc, #396]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005ace:	f043 0301 	orr.w	r3, r3, #1
 8005ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ad4:	e01c      	b.n	8005b10 <HAL_RCC_OscConfig+0x324>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	2b05      	cmp	r3, #5
 8005adc:	d10c      	bne.n	8005af8 <HAL_RCC_OscConfig+0x30c>
 8005ade:	4b5f      	ldr	r3, [pc, #380]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae2:	4a5e      	ldr	r2, [pc, #376]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005ae4:	f043 0304 	orr.w	r3, r3, #4
 8005ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8005aea:	4b5c      	ldr	r3, [pc, #368]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aee:	4a5b      	ldr	r2, [pc, #364]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005af0:	f043 0301 	orr.w	r3, r3, #1
 8005af4:	6713      	str	r3, [r2, #112]	; 0x70
 8005af6:	e00b      	b.n	8005b10 <HAL_RCC_OscConfig+0x324>
 8005af8:	4b58      	ldr	r3, [pc, #352]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005afc:	4a57      	ldr	r2, [pc, #348]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005afe:	f023 0301 	bic.w	r3, r3, #1
 8005b02:	6713      	str	r3, [r2, #112]	; 0x70
 8005b04:	4b55      	ldr	r3, [pc, #340]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b08:	4a54      	ldr	r2, [pc, #336]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005b0a:	f023 0304 	bic.w	r3, r3, #4
 8005b0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d015      	beq.n	8005b44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b18:	f7fd fea2 	bl	8003860 <HAL_GetTick>
 8005b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b1e:	e00a      	b.n	8005b36 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b20:	f7fd fe9e 	bl	8003860 <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d901      	bls.n	8005b36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e0cb      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b36:	4b49      	ldr	r3, [pc, #292]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b3a:	f003 0302 	and.w	r3, r3, #2
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d0ee      	beq.n	8005b20 <HAL_RCC_OscConfig+0x334>
 8005b42:	e014      	b.n	8005b6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b44:	f7fd fe8c 	bl	8003860 <HAL_GetTick>
 8005b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b4a:	e00a      	b.n	8005b62 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b4c:	f7fd fe88 	bl	8003860 <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d901      	bls.n	8005b62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e0b5      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b62:	4b3e      	ldr	r3, [pc, #248]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b66:	f003 0302 	and.w	r3, r3, #2
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1ee      	bne.n	8005b4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b6e:	7dfb      	ldrb	r3, [r7, #23]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d105      	bne.n	8005b80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b74:	4b39      	ldr	r3, [pc, #228]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b78:	4a38      	ldr	r2, [pc, #224]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005b7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 80a1 	beq.w	8005ccc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b8a:	4b34      	ldr	r3, [pc, #208]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f003 030c 	and.w	r3, r3, #12
 8005b92:	2b08      	cmp	r3, #8
 8005b94:	d05c      	beq.n	8005c50 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d141      	bne.n	8005c22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b9e:	4b31      	ldr	r3, [pc, #196]	; (8005c64 <HAL_RCC_OscConfig+0x478>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ba4:	f7fd fe5c 	bl	8003860 <HAL_GetTick>
 8005ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005baa:	e008      	b.n	8005bbe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bac:	f7fd fe58 	bl	8003860 <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d901      	bls.n	8005bbe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e087      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bbe:	4b27      	ldr	r3, [pc, #156]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1f0      	bne.n	8005bac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	69da      	ldr	r2, [r3, #28]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	431a      	orrs	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	019b      	lsls	r3, r3, #6
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be0:	085b      	lsrs	r3, r3, #1
 8005be2:	3b01      	subs	r3, #1
 8005be4:	041b      	lsls	r3, r3, #16
 8005be6:	431a      	orrs	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bec:	061b      	lsls	r3, r3, #24
 8005bee:	491b      	ldr	r1, [pc, #108]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bf4:	4b1b      	ldr	r3, [pc, #108]	; (8005c64 <HAL_RCC_OscConfig+0x478>)
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bfa:	f7fd fe31 	bl	8003860 <HAL_GetTick>
 8005bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c00:	e008      	b.n	8005c14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c02:	f7fd fe2d 	bl	8003860 <HAL_GetTick>
 8005c06:	4602      	mov	r2, r0
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d901      	bls.n	8005c14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e05c      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c14:	4b11      	ldr	r3, [pc, #68]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d0f0      	beq.n	8005c02 <HAL_RCC_OscConfig+0x416>
 8005c20:	e054      	b.n	8005ccc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c22:	4b10      	ldr	r3, [pc, #64]	; (8005c64 <HAL_RCC_OscConfig+0x478>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c28:	f7fd fe1a 	bl	8003860 <HAL_GetTick>
 8005c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c2e:	e008      	b.n	8005c42 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c30:	f7fd fe16 	bl	8003860 <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d901      	bls.n	8005c42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e045      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c42:	4b06      	ldr	r3, [pc, #24]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1f0      	bne.n	8005c30 <HAL_RCC_OscConfig+0x444>
 8005c4e:	e03d      	b.n	8005ccc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	699b      	ldr	r3, [r3, #24]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d107      	bne.n	8005c68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e038      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
 8005c5c:	40023800 	.word	0x40023800
 8005c60:	40007000 	.word	0x40007000
 8005c64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c68:	4b1b      	ldr	r3, [pc, #108]	; (8005cd8 <HAL_RCC_OscConfig+0x4ec>)
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d028      	beq.n	8005cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d121      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d11a      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c98:	4013      	ands	r3, r2
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d111      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cae:	085b      	lsrs	r3, r3, #1
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d107      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d001      	beq.n	8005ccc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e000      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3718      	adds	r7, #24
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	40023800 	.word	0x40023800

08005cdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d101      	bne.n	8005cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e0cc      	b.n	8005e8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005cf0:	4b68      	ldr	r3, [pc, #416]	; (8005e94 <HAL_RCC_ClockConfig+0x1b8>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0307 	and.w	r3, r3, #7
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d90c      	bls.n	8005d18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cfe:	4b65      	ldr	r3, [pc, #404]	; (8005e94 <HAL_RCC_ClockConfig+0x1b8>)
 8005d00:	683a      	ldr	r2, [r7, #0]
 8005d02:	b2d2      	uxtb	r2, r2
 8005d04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d06:	4b63      	ldr	r3, [pc, #396]	; (8005e94 <HAL_RCC_ClockConfig+0x1b8>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0307 	and.w	r3, r3, #7
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d001      	beq.n	8005d18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e0b8      	b.n	8005e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0302 	and.w	r3, r3, #2
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d020      	beq.n	8005d66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0304 	and.w	r3, r3, #4
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d005      	beq.n	8005d3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d30:	4b59      	ldr	r3, [pc, #356]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	4a58      	ldr	r2, [pc, #352]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0308 	and.w	r3, r3, #8
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d005      	beq.n	8005d54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d48:	4b53      	ldr	r3, [pc, #332]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	4a52      	ldr	r2, [pc, #328]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d54:	4b50      	ldr	r3, [pc, #320]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	494d      	ldr	r1, [pc, #308]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d044      	beq.n	8005dfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d107      	bne.n	8005d8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d7a:	4b47      	ldr	r3, [pc, #284]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d119      	bne.n	8005dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e07f      	b.n	8005e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d003      	beq.n	8005d9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d96:	2b03      	cmp	r3, #3
 8005d98:	d107      	bne.n	8005daa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d9a:	4b3f      	ldr	r3, [pc, #252]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d109      	bne.n	8005dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e06f      	b.n	8005e8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005daa:	4b3b      	ldr	r3, [pc, #236]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0302 	and.w	r3, r3, #2
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d101      	bne.n	8005dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e067      	b.n	8005e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005dba:	4b37      	ldr	r3, [pc, #220]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f023 0203 	bic.w	r2, r3, #3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	4934      	ldr	r1, [pc, #208]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005dcc:	f7fd fd48 	bl	8003860 <HAL_GetTick>
 8005dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dd2:	e00a      	b.n	8005dea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dd4:	f7fd fd44 	bl	8003860 <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d901      	bls.n	8005dea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e04f      	b.n	8005e8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dea:	4b2b      	ldr	r3, [pc, #172]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f003 020c 	and.w	r2, r3, #12
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d1eb      	bne.n	8005dd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005dfc:	4b25      	ldr	r3, [pc, #148]	; (8005e94 <HAL_RCC_ClockConfig+0x1b8>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0307 	and.w	r3, r3, #7
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d20c      	bcs.n	8005e24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e0a:	4b22      	ldr	r3, [pc, #136]	; (8005e94 <HAL_RCC_ClockConfig+0x1b8>)
 8005e0c:	683a      	ldr	r2, [r7, #0]
 8005e0e:	b2d2      	uxtb	r2, r2
 8005e10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e12:	4b20      	ldr	r3, [pc, #128]	; (8005e94 <HAL_RCC_ClockConfig+0x1b8>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0307 	and.w	r3, r3, #7
 8005e1a:	683a      	ldr	r2, [r7, #0]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d001      	beq.n	8005e24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e032      	b.n	8005e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0304 	and.w	r3, r3, #4
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d008      	beq.n	8005e42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e30:	4b19      	ldr	r3, [pc, #100]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	4916      	ldr	r1, [pc, #88]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0308 	and.w	r3, r3, #8
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d009      	beq.n	8005e62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e4e:	4b12      	ldr	r3, [pc, #72]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	00db      	lsls	r3, r3, #3
 8005e5c:	490e      	ldr	r1, [pc, #56]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e62:	f000 f821 	bl	8005ea8 <HAL_RCC_GetSysClockFreq>
 8005e66:	4602      	mov	r2, r0
 8005e68:	4b0b      	ldr	r3, [pc, #44]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	091b      	lsrs	r3, r3, #4
 8005e6e:	f003 030f 	and.w	r3, r3, #15
 8005e72:	490a      	ldr	r1, [pc, #40]	; (8005e9c <HAL_RCC_ClockConfig+0x1c0>)
 8005e74:	5ccb      	ldrb	r3, [r1, r3]
 8005e76:	fa22 f303 	lsr.w	r3, r2, r3
 8005e7a:	4a09      	ldr	r2, [pc, #36]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005e7e:	4b09      	ldr	r3, [pc, #36]	; (8005ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fd fa2a 	bl	80032dc <HAL_InitTick>

  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	40023c00 	.word	0x40023c00
 8005e98:	40023800 	.word	0x40023800
 8005e9c:	0800ec2c 	.word	0x0800ec2c
 8005ea0:	20000058 	.word	0x20000058
 8005ea4:	2000005c 	.word	0x2000005c

08005ea8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005eac:	b094      	sub	sp, #80	; 0x50
 8005eae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	647b      	str	r3, [r7, #68]	; 0x44
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005eb8:	2300      	movs	r3, #0
 8005eba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ec0:	4b79      	ldr	r3, [pc, #484]	; (80060a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f003 030c 	and.w	r3, r3, #12
 8005ec8:	2b08      	cmp	r3, #8
 8005eca:	d00d      	beq.n	8005ee8 <HAL_RCC_GetSysClockFreq+0x40>
 8005ecc:	2b08      	cmp	r3, #8
 8005ece:	f200 80e1 	bhi.w	8006094 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d002      	beq.n	8005edc <HAL_RCC_GetSysClockFreq+0x34>
 8005ed6:	2b04      	cmp	r3, #4
 8005ed8:	d003      	beq.n	8005ee2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005eda:	e0db      	b.n	8006094 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005edc:	4b73      	ldr	r3, [pc, #460]	; (80060ac <HAL_RCC_GetSysClockFreq+0x204>)
 8005ede:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005ee0:	e0db      	b.n	800609a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ee2:	4b73      	ldr	r3, [pc, #460]	; (80060b0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005ee4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ee6:	e0d8      	b.n	800609a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ee8:	4b6f      	ldr	r3, [pc, #444]	; (80060a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ef0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ef2:	4b6d      	ldr	r3, [pc, #436]	; (80060a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d063      	beq.n	8005fc6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005efe:	4b6a      	ldr	r3, [pc, #424]	; (80060a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	099b      	lsrs	r3, r3, #6
 8005f04:	2200      	movs	r2, #0
 8005f06:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f08:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f10:	633b      	str	r3, [r7, #48]	; 0x30
 8005f12:	2300      	movs	r3, #0
 8005f14:	637b      	str	r3, [r7, #52]	; 0x34
 8005f16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005f1a:	4622      	mov	r2, r4
 8005f1c:	462b      	mov	r3, r5
 8005f1e:	f04f 0000 	mov.w	r0, #0
 8005f22:	f04f 0100 	mov.w	r1, #0
 8005f26:	0159      	lsls	r1, r3, #5
 8005f28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f2c:	0150      	lsls	r0, r2, #5
 8005f2e:	4602      	mov	r2, r0
 8005f30:	460b      	mov	r3, r1
 8005f32:	4621      	mov	r1, r4
 8005f34:	1a51      	subs	r1, r2, r1
 8005f36:	6139      	str	r1, [r7, #16]
 8005f38:	4629      	mov	r1, r5
 8005f3a:	eb63 0301 	sbc.w	r3, r3, r1
 8005f3e:	617b      	str	r3, [r7, #20]
 8005f40:	f04f 0200 	mov.w	r2, #0
 8005f44:	f04f 0300 	mov.w	r3, #0
 8005f48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f4c:	4659      	mov	r1, fp
 8005f4e:	018b      	lsls	r3, r1, #6
 8005f50:	4651      	mov	r1, sl
 8005f52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f56:	4651      	mov	r1, sl
 8005f58:	018a      	lsls	r2, r1, #6
 8005f5a:	4651      	mov	r1, sl
 8005f5c:	ebb2 0801 	subs.w	r8, r2, r1
 8005f60:	4659      	mov	r1, fp
 8005f62:	eb63 0901 	sbc.w	r9, r3, r1
 8005f66:	f04f 0200 	mov.w	r2, #0
 8005f6a:	f04f 0300 	mov.w	r3, #0
 8005f6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f7a:	4690      	mov	r8, r2
 8005f7c:	4699      	mov	r9, r3
 8005f7e:	4623      	mov	r3, r4
 8005f80:	eb18 0303 	adds.w	r3, r8, r3
 8005f84:	60bb      	str	r3, [r7, #8]
 8005f86:	462b      	mov	r3, r5
 8005f88:	eb49 0303 	adc.w	r3, r9, r3
 8005f8c:	60fb      	str	r3, [r7, #12]
 8005f8e:	f04f 0200 	mov.w	r2, #0
 8005f92:	f04f 0300 	mov.w	r3, #0
 8005f96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005f9a:	4629      	mov	r1, r5
 8005f9c:	024b      	lsls	r3, r1, #9
 8005f9e:	4621      	mov	r1, r4
 8005fa0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005fa4:	4621      	mov	r1, r4
 8005fa6:	024a      	lsls	r2, r1, #9
 8005fa8:	4610      	mov	r0, r2
 8005faa:	4619      	mov	r1, r3
 8005fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fae:	2200      	movs	r2, #0
 8005fb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fb4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005fb8:	f7fa fe46 	bl	8000c48 <__aeabi_uldivmod>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fc4:	e058      	b.n	8006078 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fc6:	4b38      	ldr	r3, [pc, #224]	; (80060a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	099b      	lsrs	r3, r3, #6
 8005fcc:	2200      	movs	r2, #0
 8005fce:	4618      	mov	r0, r3
 8005fd0:	4611      	mov	r1, r2
 8005fd2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005fd6:	623b      	str	r3, [r7, #32]
 8005fd8:	2300      	movs	r3, #0
 8005fda:	627b      	str	r3, [r7, #36]	; 0x24
 8005fdc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005fe0:	4642      	mov	r2, r8
 8005fe2:	464b      	mov	r3, r9
 8005fe4:	f04f 0000 	mov.w	r0, #0
 8005fe8:	f04f 0100 	mov.w	r1, #0
 8005fec:	0159      	lsls	r1, r3, #5
 8005fee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ff2:	0150      	lsls	r0, r2, #5
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	4641      	mov	r1, r8
 8005ffa:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ffe:	4649      	mov	r1, r9
 8006000:	eb63 0b01 	sbc.w	fp, r3, r1
 8006004:	f04f 0200 	mov.w	r2, #0
 8006008:	f04f 0300 	mov.w	r3, #0
 800600c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006010:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006014:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006018:	ebb2 040a 	subs.w	r4, r2, sl
 800601c:	eb63 050b 	sbc.w	r5, r3, fp
 8006020:	f04f 0200 	mov.w	r2, #0
 8006024:	f04f 0300 	mov.w	r3, #0
 8006028:	00eb      	lsls	r3, r5, #3
 800602a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800602e:	00e2      	lsls	r2, r4, #3
 8006030:	4614      	mov	r4, r2
 8006032:	461d      	mov	r5, r3
 8006034:	4643      	mov	r3, r8
 8006036:	18e3      	adds	r3, r4, r3
 8006038:	603b      	str	r3, [r7, #0]
 800603a:	464b      	mov	r3, r9
 800603c:	eb45 0303 	adc.w	r3, r5, r3
 8006040:	607b      	str	r3, [r7, #4]
 8006042:	f04f 0200 	mov.w	r2, #0
 8006046:	f04f 0300 	mov.w	r3, #0
 800604a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800604e:	4629      	mov	r1, r5
 8006050:	028b      	lsls	r3, r1, #10
 8006052:	4621      	mov	r1, r4
 8006054:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006058:	4621      	mov	r1, r4
 800605a:	028a      	lsls	r2, r1, #10
 800605c:	4610      	mov	r0, r2
 800605e:	4619      	mov	r1, r3
 8006060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006062:	2200      	movs	r2, #0
 8006064:	61bb      	str	r3, [r7, #24]
 8006066:	61fa      	str	r2, [r7, #28]
 8006068:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800606c:	f7fa fdec 	bl	8000c48 <__aeabi_uldivmod>
 8006070:	4602      	mov	r2, r0
 8006072:	460b      	mov	r3, r1
 8006074:	4613      	mov	r3, r2
 8006076:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006078:	4b0b      	ldr	r3, [pc, #44]	; (80060a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	0c1b      	lsrs	r3, r3, #16
 800607e:	f003 0303 	and.w	r3, r3, #3
 8006082:	3301      	adds	r3, #1
 8006084:	005b      	lsls	r3, r3, #1
 8006086:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006088:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800608a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800608c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006090:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006092:	e002      	b.n	800609a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006094:	4b05      	ldr	r3, [pc, #20]	; (80060ac <HAL_RCC_GetSysClockFreq+0x204>)
 8006096:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006098:	bf00      	nop
    }
  }
  return sysclockfreq;
 800609a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800609c:	4618      	mov	r0, r3
 800609e:	3750      	adds	r7, #80	; 0x50
 80060a0:	46bd      	mov	sp, r7
 80060a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060a6:	bf00      	nop
 80060a8:	40023800 	.word	0x40023800
 80060ac:	00f42400 	.word	0x00f42400
 80060b0:	007a1200 	.word	0x007a1200

080060b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060b4:	b480      	push	{r7}
 80060b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060b8:	4b03      	ldr	r3, [pc, #12]	; (80060c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80060ba:	681b      	ldr	r3, [r3, #0]
}
 80060bc:	4618      	mov	r0, r3
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	20000058 	.word	0x20000058

080060cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80060d0:	f7ff fff0 	bl	80060b4 <HAL_RCC_GetHCLKFreq>
 80060d4:	4602      	mov	r2, r0
 80060d6:	4b05      	ldr	r3, [pc, #20]	; (80060ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	0a9b      	lsrs	r3, r3, #10
 80060dc:	f003 0307 	and.w	r3, r3, #7
 80060e0:	4903      	ldr	r1, [pc, #12]	; (80060f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060e2:	5ccb      	ldrb	r3, [r1, r3]
 80060e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	40023800 	.word	0x40023800
 80060f0:	0800ec3c 	.word	0x0800ec3c

080060f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80060f8:	f7ff ffdc 	bl	80060b4 <HAL_RCC_GetHCLKFreq>
 80060fc:	4602      	mov	r2, r0
 80060fe:	4b05      	ldr	r3, [pc, #20]	; (8006114 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	0b5b      	lsrs	r3, r3, #13
 8006104:	f003 0307 	and.w	r3, r3, #7
 8006108:	4903      	ldr	r1, [pc, #12]	; (8006118 <HAL_RCC_GetPCLK2Freq+0x24>)
 800610a:	5ccb      	ldrb	r3, [r1, r3]
 800610c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006110:	4618      	mov	r0, r3
 8006112:	bd80      	pop	{r7, pc}
 8006114:	40023800 	.word	0x40023800
 8006118:	0800ec3c 	.word	0x0800ec3c

0800611c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	220f      	movs	r2, #15
 800612a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800612c:	4b12      	ldr	r3, [pc, #72]	; (8006178 <HAL_RCC_GetClockConfig+0x5c>)
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f003 0203 	and.w	r2, r3, #3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006138:	4b0f      	ldr	r3, [pc, #60]	; (8006178 <HAL_RCC_GetClockConfig+0x5c>)
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006144:	4b0c      	ldr	r3, [pc, #48]	; (8006178 <HAL_RCC_GetClockConfig+0x5c>)
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006150:	4b09      	ldr	r3, [pc, #36]	; (8006178 <HAL_RCC_GetClockConfig+0x5c>)
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	08db      	lsrs	r3, r3, #3
 8006156:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800615e:	4b07      	ldr	r3, [pc, #28]	; (800617c <HAL_RCC_GetClockConfig+0x60>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 0207 	and.w	r2, r3, #7
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	601a      	str	r2, [r3, #0]
}
 800616a:	bf00      	nop
 800616c:	370c      	adds	r7, #12
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	40023800 	.word	0x40023800
 800617c:	40023c00 	.word	0x40023c00

08006180 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e041      	b.n	8006216 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006198:	b2db      	uxtb	r3, r3
 800619a:	2b00      	cmp	r3, #0
 800619c:	d106      	bne.n	80061ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f7fc fe6e 	bl	8002e88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2202      	movs	r2, #2
 80061b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	3304      	adds	r3, #4
 80061bc:	4619      	mov	r1, r3
 80061be:	4610      	mov	r0, r2
 80061c0:	f000 fd20 	bl	8006c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3708      	adds	r7, #8
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
	...

08006220 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b01      	cmp	r3, #1
 8006232:	d001      	beq.n	8006238 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e04e      	b.n	80062d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2202      	movs	r2, #2
 800623c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68da      	ldr	r2, [r3, #12]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f042 0201 	orr.w	r2, r2, #1
 800624e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a23      	ldr	r2, [pc, #140]	; (80062e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d022      	beq.n	80062a0 <HAL_TIM_Base_Start_IT+0x80>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006262:	d01d      	beq.n	80062a0 <HAL_TIM_Base_Start_IT+0x80>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a1f      	ldr	r2, [pc, #124]	; (80062e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d018      	beq.n	80062a0 <HAL_TIM_Base_Start_IT+0x80>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a1e      	ldr	r2, [pc, #120]	; (80062ec <HAL_TIM_Base_Start_IT+0xcc>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d013      	beq.n	80062a0 <HAL_TIM_Base_Start_IT+0x80>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a1c      	ldr	r2, [pc, #112]	; (80062f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d00e      	beq.n	80062a0 <HAL_TIM_Base_Start_IT+0x80>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a1b      	ldr	r2, [pc, #108]	; (80062f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d009      	beq.n	80062a0 <HAL_TIM_Base_Start_IT+0x80>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a19      	ldr	r2, [pc, #100]	; (80062f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d004      	beq.n	80062a0 <HAL_TIM_Base_Start_IT+0x80>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a18      	ldr	r2, [pc, #96]	; (80062fc <HAL_TIM_Base_Start_IT+0xdc>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d111      	bne.n	80062c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f003 0307 	and.w	r3, r3, #7
 80062aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2b06      	cmp	r3, #6
 80062b0:	d010      	beq.n	80062d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f042 0201 	orr.w	r2, r2, #1
 80062c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062c2:	e007      	b.n	80062d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f042 0201 	orr.w	r2, r2, #1
 80062d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3714      	adds	r7, #20
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	40010000 	.word	0x40010000
 80062e8:	40000400 	.word	0x40000400
 80062ec:	40000800 	.word	0x40000800
 80062f0:	40000c00 	.word	0x40000c00
 80062f4:	40010400 	.word	0x40010400
 80062f8:	40014000 	.word	0x40014000
 80062fc:	40001800 	.word	0x40001800

08006300 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d101      	bne.n	8006312 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e041      	b.n	8006396 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b00      	cmp	r3, #0
 800631c:	d106      	bne.n	800632c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 f839 	bl	800639e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2202      	movs	r2, #2
 8006330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	3304      	adds	r3, #4
 800633c:	4619      	mov	r1, r3
 800633e:	4610      	mov	r0, r2
 8006340:	f000 fc60 	bl	8006c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3708      	adds	r7, #8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800639e:	b480      	push	{r7}
 80063a0:	b083      	sub	sp, #12
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80063a6:	bf00      	nop
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
	...

080063b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d109      	bne.n	80063d8 <HAL_TIM_PWM_Start+0x24>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	bf14      	ite	ne
 80063d0:	2301      	movne	r3, #1
 80063d2:	2300      	moveq	r3, #0
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	e022      	b.n	800641e <HAL_TIM_PWM_Start+0x6a>
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	2b04      	cmp	r3, #4
 80063dc:	d109      	bne.n	80063f2 <HAL_TIM_PWM_Start+0x3e>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	bf14      	ite	ne
 80063ea:	2301      	movne	r3, #1
 80063ec:	2300      	moveq	r3, #0
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	e015      	b.n	800641e <HAL_TIM_PWM_Start+0x6a>
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	2b08      	cmp	r3, #8
 80063f6:	d109      	bne.n	800640c <HAL_TIM_PWM_Start+0x58>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	2b01      	cmp	r3, #1
 8006402:	bf14      	ite	ne
 8006404:	2301      	movne	r3, #1
 8006406:	2300      	moveq	r3, #0
 8006408:	b2db      	uxtb	r3, r3
 800640a:	e008      	b.n	800641e <HAL_TIM_PWM_Start+0x6a>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006412:	b2db      	uxtb	r3, r3
 8006414:	2b01      	cmp	r3, #1
 8006416:	bf14      	ite	ne
 8006418:	2301      	movne	r3, #1
 800641a:	2300      	moveq	r3, #0
 800641c:	b2db      	uxtb	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e07c      	b.n	8006520 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d104      	bne.n	8006436 <HAL_TIM_PWM_Start+0x82>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2202      	movs	r2, #2
 8006430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006434:	e013      	b.n	800645e <HAL_TIM_PWM_Start+0xaa>
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	2b04      	cmp	r3, #4
 800643a:	d104      	bne.n	8006446 <HAL_TIM_PWM_Start+0x92>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2202      	movs	r2, #2
 8006440:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006444:	e00b      	b.n	800645e <HAL_TIM_PWM_Start+0xaa>
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	2b08      	cmp	r3, #8
 800644a:	d104      	bne.n	8006456 <HAL_TIM_PWM_Start+0xa2>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2202      	movs	r2, #2
 8006450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006454:	e003      	b.n	800645e <HAL_TIM_PWM_Start+0xaa>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2202      	movs	r2, #2
 800645a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2201      	movs	r2, #1
 8006464:	6839      	ldr	r1, [r7, #0]
 8006466:	4618      	mov	r0, r3
 8006468:	f000 feb6 	bl	80071d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a2d      	ldr	r2, [pc, #180]	; (8006528 <HAL_TIM_PWM_Start+0x174>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d004      	beq.n	8006480 <HAL_TIM_PWM_Start+0xcc>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a2c      	ldr	r2, [pc, #176]	; (800652c <HAL_TIM_PWM_Start+0x178>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d101      	bne.n	8006484 <HAL_TIM_PWM_Start+0xd0>
 8006480:	2301      	movs	r3, #1
 8006482:	e000      	b.n	8006486 <HAL_TIM_PWM_Start+0xd2>
 8006484:	2300      	movs	r3, #0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d007      	beq.n	800649a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006498:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a22      	ldr	r2, [pc, #136]	; (8006528 <HAL_TIM_PWM_Start+0x174>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d022      	beq.n	80064ea <HAL_TIM_PWM_Start+0x136>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ac:	d01d      	beq.n	80064ea <HAL_TIM_PWM_Start+0x136>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a1f      	ldr	r2, [pc, #124]	; (8006530 <HAL_TIM_PWM_Start+0x17c>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d018      	beq.n	80064ea <HAL_TIM_PWM_Start+0x136>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a1d      	ldr	r2, [pc, #116]	; (8006534 <HAL_TIM_PWM_Start+0x180>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d013      	beq.n	80064ea <HAL_TIM_PWM_Start+0x136>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a1c      	ldr	r2, [pc, #112]	; (8006538 <HAL_TIM_PWM_Start+0x184>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d00e      	beq.n	80064ea <HAL_TIM_PWM_Start+0x136>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a16      	ldr	r2, [pc, #88]	; (800652c <HAL_TIM_PWM_Start+0x178>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d009      	beq.n	80064ea <HAL_TIM_PWM_Start+0x136>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a18      	ldr	r2, [pc, #96]	; (800653c <HAL_TIM_PWM_Start+0x188>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d004      	beq.n	80064ea <HAL_TIM_PWM_Start+0x136>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a16      	ldr	r2, [pc, #88]	; (8006540 <HAL_TIM_PWM_Start+0x18c>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d111      	bne.n	800650e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	f003 0307 	and.w	r3, r3, #7
 80064f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2b06      	cmp	r3, #6
 80064fa:	d010      	beq.n	800651e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f042 0201 	orr.w	r2, r2, #1
 800650a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800650c:	e007      	b.n	800651e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f042 0201 	orr.w	r2, r2, #1
 800651c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	3710      	adds	r7, #16
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	40010000 	.word	0x40010000
 800652c:	40010400 	.word	0x40010400
 8006530:	40000400 	.word	0x40000400
 8006534:	40000800 	.word	0x40000800
 8006538:	40000c00 	.word	0x40000c00
 800653c:	40014000 	.word	0x40014000
 8006540:	40001800 	.word	0x40001800

08006544 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d101      	bne.n	8006558 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e097      	b.n	8006688 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800655e:	b2db      	uxtb	r3, r3
 8006560:	2b00      	cmp	r3, #0
 8006562:	d106      	bne.n	8006572 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f7fc fd09 	bl	8002f84 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2202      	movs	r2, #2
 8006576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	6812      	ldr	r2, [r2, #0]
 8006584:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006588:	f023 0307 	bic.w	r3, r3, #7
 800658c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	3304      	adds	r3, #4
 8006596:	4619      	mov	r1, r3
 8006598:	4610      	mov	r0, r2
 800659a:	f000 fb33 	bl	8006c04 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	699b      	ldr	r3, [r3, #24]
 80065ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	6a1b      	ldr	r3, [r3, #32]
 80065b4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	4313      	orrs	r3, r2
 80065be:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065c6:	f023 0303 	bic.w	r3, r3, #3
 80065ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	689a      	ldr	r2, [r3, #8]
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	021b      	lsls	r3, r3, #8
 80065d6:	4313      	orrs	r3, r2
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	4313      	orrs	r3, r2
 80065dc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80065e4:	f023 030c 	bic.w	r3, r3, #12
 80065e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	68da      	ldr	r2, [r3, #12]
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	69db      	ldr	r3, [r3, #28]
 80065fe:	021b      	lsls	r3, r3, #8
 8006600:	4313      	orrs	r3, r2
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	4313      	orrs	r3, r2
 8006606:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	011a      	lsls	r2, r3, #4
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	031b      	lsls	r3, r3, #12
 8006614:	4313      	orrs	r3, r2
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	4313      	orrs	r3, r2
 800661a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006622:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800662a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	685a      	ldr	r2, [r3, #4]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	011b      	lsls	r3, r3, #4
 8006636:	4313      	orrs	r3, r2
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	4313      	orrs	r3, r2
 800663c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	693a      	ldr	r2, [r7, #16]
 800664c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2201      	movs	r2, #1
 800665a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2201      	movs	r2, #1
 8006662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2201      	movs	r2, #1
 8006672:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2201      	movs	r2, #1
 800667a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	3718      	adds	r7, #24
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	f003 0302 	and.w	r3, r3, #2
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d122      	bne.n	80066ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	f003 0302 	and.w	r3, r3, #2
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d11b      	bne.n	80066ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f06f 0202 	mvn.w	r2, #2
 80066bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2201      	movs	r2, #1
 80066c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	f003 0303 	and.w	r3, r3, #3
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d003      	beq.n	80066da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fa77 	bl	8006bc6 <HAL_TIM_IC_CaptureCallback>
 80066d8:	e005      	b.n	80066e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 fa69 	bl	8006bb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 fa7a 	bl	8006bda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	f003 0304 	and.w	r3, r3, #4
 80066f6:	2b04      	cmp	r3, #4
 80066f8:	d122      	bne.n	8006740 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	f003 0304 	and.w	r3, r3, #4
 8006704:	2b04      	cmp	r3, #4
 8006706:	d11b      	bne.n	8006740 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f06f 0204 	mvn.w	r2, #4
 8006710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2202      	movs	r2, #2
 8006716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006722:	2b00      	cmp	r3, #0
 8006724:	d003      	beq.n	800672e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 fa4d 	bl	8006bc6 <HAL_TIM_IC_CaptureCallback>
 800672c:	e005      	b.n	800673a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 fa3f 	bl	8006bb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 fa50 	bl	8006bda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	f003 0308 	and.w	r3, r3, #8
 800674a:	2b08      	cmp	r3, #8
 800674c:	d122      	bne.n	8006794 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	f003 0308 	and.w	r3, r3, #8
 8006758:	2b08      	cmp	r3, #8
 800675a:	d11b      	bne.n	8006794 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f06f 0208 	mvn.w	r2, #8
 8006764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2204      	movs	r2, #4
 800676a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	69db      	ldr	r3, [r3, #28]
 8006772:	f003 0303 	and.w	r3, r3, #3
 8006776:	2b00      	cmp	r3, #0
 8006778:	d003      	beq.n	8006782 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 fa23 	bl	8006bc6 <HAL_TIM_IC_CaptureCallback>
 8006780:	e005      	b.n	800678e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 fa15 	bl	8006bb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 fa26 	bl	8006bda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	f003 0310 	and.w	r3, r3, #16
 800679e:	2b10      	cmp	r3, #16
 80067a0:	d122      	bne.n	80067e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	f003 0310 	and.w	r3, r3, #16
 80067ac:	2b10      	cmp	r3, #16
 80067ae:	d11b      	bne.n	80067e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f06f 0210 	mvn.w	r2, #16
 80067b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2208      	movs	r2, #8
 80067be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	69db      	ldr	r3, [r3, #28]
 80067c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d003      	beq.n	80067d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 f9f9 	bl	8006bc6 <HAL_TIM_IC_CaptureCallback>
 80067d4:	e005      	b.n	80067e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 f9eb 	bl	8006bb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 f9fc 	bl	8006bda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d10e      	bne.n	8006814 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	f003 0301 	and.w	r3, r3, #1
 8006800:	2b01      	cmp	r3, #1
 8006802:	d107      	bne.n	8006814 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f06f 0201 	mvn.w	r2, #1
 800680c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f7fc faae 	bl	8002d70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800681e:	2b80      	cmp	r3, #128	; 0x80
 8006820:	d10e      	bne.n	8006840 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800682c:	2b80      	cmp	r3, #128	; 0x80
 800682e:	d107      	bne.n	8006840 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fdca 	bl	80073d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800684a:	2b40      	cmp	r3, #64	; 0x40
 800684c:	d10e      	bne.n	800686c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006858:	2b40      	cmp	r3, #64	; 0x40
 800685a:	d107      	bne.n	800686c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 f9c1 	bl	8006bee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	f003 0320 	and.w	r3, r3, #32
 8006876:	2b20      	cmp	r3, #32
 8006878:	d10e      	bne.n	8006898 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	f003 0320 	and.w	r3, r3, #32
 8006884:	2b20      	cmp	r3, #32
 8006886:	d107      	bne.n	8006898 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f06f 0220 	mvn.w	r2, #32
 8006890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 fd94 	bl	80073c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006898:	bf00      	nop
 800689a:	3708      	adds	r7, #8
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b086      	sub	sp, #24
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068ac:	2300      	movs	r3, #0
 80068ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d101      	bne.n	80068be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80068ba:	2302      	movs	r3, #2
 80068bc:	e0ae      	b.n	8006a1c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2b0c      	cmp	r3, #12
 80068ca:	f200 809f 	bhi.w	8006a0c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80068ce:	a201      	add	r2, pc, #4	; (adr r2, 80068d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80068d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d4:	08006909 	.word	0x08006909
 80068d8:	08006a0d 	.word	0x08006a0d
 80068dc:	08006a0d 	.word	0x08006a0d
 80068e0:	08006a0d 	.word	0x08006a0d
 80068e4:	08006949 	.word	0x08006949
 80068e8:	08006a0d 	.word	0x08006a0d
 80068ec:	08006a0d 	.word	0x08006a0d
 80068f0:	08006a0d 	.word	0x08006a0d
 80068f4:	0800698b 	.word	0x0800698b
 80068f8:	08006a0d 	.word	0x08006a0d
 80068fc:	08006a0d 	.word	0x08006a0d
 8006900:	08006a0d 	.word	0x08006a0d
 8006904:	080069cb 	.word	0x080069cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68b9      	ldr	r1, [r7, #8]
 800690e:	4618      	mov	r0, r3
 8006910:	f000 fa18 	bl	8006d44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	699a      	ldr	r2, [r3, #24]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f042 0208 	orr.w	r2, r2, #8
 8006922:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	699a      	ldr	r2, [r3, #24]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f022 0204 	bic.w	r2, r2, #4
 8006932:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6999      	ldr	r1, [r3, #24]
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	691a      	ldr	r2, [r3, #16]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	430a      	orrs	r2, r1
 8006944:	619a      	str	r2, [r3, #24]
      break;
 8006946:	e064      	b.n	8006a12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68b9      	ldr	r1, [r7, #8]
 800694e:	4618      	mov	r0, r3
 8006950:	f000 fa68 	bl	8006e24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	699a      	ldr	r2, [r3, #24]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006962:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	699a      	ldr	r2, [r3, #24]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006972:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6999      	ldr	r1, [r3, #24]
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	021a      	lsls	r2, r3, #8
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	430a      	orrs	r2, r1
 8006986:	619a      	str	r2, [r3, #24]
      break;
 8006988:	e043      	b.n	8006a12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68b9      	ldr	r1, [r7, #8]
 8006990:	4618      	mov	r0, r3
 8006992:	f000 fabd 	bl	8006f10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	69da      	ldr	r2, [r3, #28]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f042 0208 	orr.w	r2, r2, #8
 80069a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	69da      	ldr	r2, [r3, #28]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f022 0204 	bic.w	r2, r2, #4
 80069b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	69d9      	ldr	r1, [r3, #28]
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	691a      	ldr	r2, [r3, #16]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	430a      	orrs	r2, r1
 80069c6:	61da      	str	r2, [r3, #28]
      break;
 80069c8:	e023      	b.n	8006a12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	68b9      	ldr	r1, [r7, #8]
 80069d0:	4618      	mov	r0, r3
 80069d2:	f000 fb11 	bl	8006ff8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	69da      	ldr	r2, [r3, #28]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	69da      	ldr	r2, [r3, #28]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	69d9      	ldr	r1, [r3, #28]
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	021a      	lsls	r2, r3, #8
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	430a      	orrs	r2, r1
 8006a08:	61da      	str	r2, [r3, #28]
      break;
 8006a0a:	e002      	b.n	8006a12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	75fb      	strb	r3, [r7, #23]
      break;
 8006a10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3718      	adds	r7, #24
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d101      	bne.n	8006a40 <HAL_TIM_ConfigClockSource+0x1c>
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	e0b4      	b.n	8006baa <HAL_TIM_ConfigClockSource+0x186>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68ba      	ldr	r2, [r7, #8]
 8006a6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a78:	d03e      	beq.n	8006af8 <HAL_TIM_ConfigClockSource+0xd4>
 8006a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a7e:	f200 8087 	bhi.w	8006b90 <HAL_TIM_ConfigClockSource+0x16c>
 8006a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a86:	f000 8086 	beq.w	8006b96 <HAL_TIM_ConfigClockSource+0x172>
 8006a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a8e:	d87f      	bhi.n	8006b90 <HAL_TIM_ConfigClockSource+0x16c>
 8006a90:	2b70      	cmp	r3, #112	; 0x70
 8006a92:	d01a      	beq.n	8006aca <HAL_TIM_ConfigClockSource+0xa6>
 8006a94:	2b70      	cmp	r3, #112	; 0x70
 8006a96:	d87b      	bhi.n	8006b90 <HAL_TIM_ConfigClockSource+0x16c>
 8006a98:	2b60      	cmp	r3, #96	; 0x60
 8006a9a:	d050      	beq.n	8006b3e <HAL_TIM_ConfigClockSource+0x11a>
 8006a9c:	2b60      	cmp	r3, #96	; 0x60
 8006a9e:	d877      	bhi.n	8006b90 <HAL_TIM_ConfigClockSource+0x16c>
 8006aa0:	2b50      	cmp	r3, #80	; 0x50
 8006aa2:	d03c      	beq.n	8006b1e <HAL_TIM_ConfigClockSource+0xfa>
 8006aa4:	2b50      	cmp	r3, #80	; 0x50
 8006aa6:	d873      	bhi.n	8006b90 <HAL_TIM_ConfigClockSource+0x16c>
 8006aa8:	2b40      	cmp	r3, #64	; 0x40
 8006aaa:	d058      	beq.n	8006b5e <HAL_TIM_ConfigClockSource+0x13a>
 8006aac:	2b40      	cmp	r3, #64	; 0x40
 8006aae:	d86f      	bhi.n	8006b90 <HAL_TIM_ConfigClockSource+0x16c>
 8006ab0:	2b30      	cmp	r3, #48	; 0x30
 8006ab2:	d064      	beq.n	8006b7e <HAL_TIM_ConfigClockSource+0x15a>
 8006ab4:	2b30      	cmp	r3, #48	; 0x30
 8006ab6:	d86b      	bhi.n	8006b90 <HAL_TIM_ConfigClockSource+0x16c>
 8006ab8:	2b20      	cmp	r3, #32
 8006aba:	d060      	beq.n	8006b7e <HAL_TIM_ConfigClockSource+0x15a>
 8006abc:	2b20      	cmp	r3, #32
 8006abe:	d867      	bhi.n	8006b90 <HAL_TIM_ConfigClockSource+0x16c>
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d05c      	beq.n	8006b7e <HAL_TIM_ConfigClockSource+0x15a>
 8006ac4:	2b10      	cmp	r3, #16
 8006ac6:	d05a      	beq.n	8006b7e <HAL_TIM_ConfigClockSource+0x15a>
 8006ac8:	e062      	b.n	8006b90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6818      	ldr	r0, [r3, #0]
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	6899      	ldr	r1, [r3, #8]
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	685a      	ldr	r2, [r3, #4]
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	f000 fb5d 	bl	8007198 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006aec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68ba      	ldr	r2, [r7, #8]
 8006af4:	609a      	str	r2, [r3, #8]
      break;
 8006af6:	e04f      	b.n	8006b98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6818      	ldr	r0, [r3, #0]
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	6899      	ldr	r1, [r3, #8]
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	685a      	ldr	r2, [r3, #4]
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	f000 fb46 	bl	8007198 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	689a      	ldr	r2, [r3, #8]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b1a:	609a      	str	r2, [r3, #8]
      break;
 8006b1c:	e03c      	b.n	8006b98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6818      	ldr	r0, [r3, #0]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	6859      	ldr	r1, [r3, #4]
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	f000 faba 	bl	80070a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2150      	movs	r1, #80	; 0x50
 8006b36:	4618      	mov	r0, r3
 8006b38:	f000 fb13 	bl	8007162 <TIM_ITRx_SetConfig>
      break;
 8006b3c:	e02c      	b.n	8006b98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6818      	ldr	r0, [r3, #0]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	6859      	ldr	r1, [r3, #4]
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	f000 fad9 	bl	8007102 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2160      	movs	r1, #96	; 0x60
 8006b56:	4618      	mov	r0, r3
 8006b58:	f000 fb03 	bl	8007162 <TIM_ITRx_SetConfig>
      break;
 8006b5c:	e01c      	b.n	8006b98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6818      	ldr	r0, [r3, #0]
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	6859      	ldr	r1, [r3, #4]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	f000 fa9a 	bl	80070a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2140      	movs	r1, #64	; 0x40
 8006b76:	4618      	mov	r0, r3
 8006b78:	f000 faf3 	bl	8007162 <TIM_ITRx_SetConfig>
      break;
 8006b7c:	e00c      	b.n	8006b98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4619      	mov	r1, r3
 8006b88:	4610      	mov	r0, r2
 8006b8a:	f000 faea 	bl	8007162 <TIM_ITRx_SetConfig>
      break;
 8006b8e:	e003      	b.n	8006b98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	73fb      	strb	r3, [r7, #15]
      break;
 8006b94:	e000      	b.n	8006b98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006b96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3710      	adds	r7, #16
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bb2:	b480      	push	{r7}
 8006bb4:	b083      	sub	sp, #12
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006bba:	bf00      	nop
 8006bbc:	370c      	adds	r7, #12
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr

08006bc6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006bc6:	b480      	push	{r7}
 8006bc8:	b083      	sub	sp, #12
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006bce:	bf00      	nop
 8006bd0:	370c      	adds	r7, #12
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr

08006bda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006bda:	b480      	push	{r7}
 8006bdc:	b083      	sub	sp, #12
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006be2:	bf00      	nop
 8006be4:	370c      	adds	r7, #12
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr

08006bee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006bee:	b480      	push	{r7}
 8006bf0:	b083      	sub	sp, #12
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006bf6:	bf00      	nop
 8006bf8:	370c      	adds	r7, #12
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
	...

08006c04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b085      	sub	sp, #20
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a40      	ldr	r2, [pc, #256]	; (8006d18 <TIM_Base_SetConfig+0x114>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d013      	beq.n	8006c44 <TIM_Base_SetConfig+0x40>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c22:	d00f      	beq.n	8006c44 <TIM_Base_SetConfig+0x40>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a3d      	ldr	r2, [pc, #244]	; (8006d1c <TIM_Base_SetConfig+0x118>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d00b      	beq.n	8006c44 <TIM_Base_SetConfig+0x40>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a3c      	ldr	r2, [pc, #240]	; (8006d20 <TIM_Base_SetConfig+0x11c>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d007      	beq.n	8006c44 <TIM_Base_SetConfig+0x40>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a3b      	ldr	r2, [pc, #236]	; (8006d24 <TIM_Base_SetConfig+0x120>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d003      	beq.n	8006c44 <TIM_Base_SetConfig+0x40>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a3a      	ldr	r2, [pc, #232]	; (8006d28 <TIM_Base_SetConfig+0x124>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d108      	bne.n	8006c56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a2f      	ldr	r2, [pc, #188]	; (8006d18 <TIM_Base_SetConfig+0x114>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d02b      	beq.n	8006cb6 <TIM_Base_SetConfig+0xb2>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c64:	d027      	beq.n	8006cb6 <TIM_Base_SetConfig+0xb2>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a2c      	ldr	r2, [pc, #176]	; (8006d1c <TIM_Base_SetConfig+0x118>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d023      	beq.n	8006cb6 <TIM_Base_SetConfig+0xb2>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a2b      	ldr	r2, [pc, #172]	; (8006d20 <TIM_Base_SetConfig+0x11c>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d01f      	beq.n	8006cb6 <TIM_Base_SetConfig+0xb2>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4a2a      	ldr	r2, [pc, #168]	; (8006d24 <TIM_Base_SetConfig+0x120>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d01b      	beq.n	8006cb6 <TIM_Base_SetConfig+0xb2>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4a29      	ldr	r2, [pc, #164]	; (8006d28 <TIM_Base_SetConfig+0x124>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d017      	beq.n	8006cb6 <TIM_Base_SetConfig+0xb2>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4a28      	ldr	r2, [pc, #160]	; (8006d2c <TIM_Base_SetConfig+0x128>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d013      	beq.n	8006cb6 <TIM_Base_SetConfig+0xb2>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4a27      	ldr	r2, [pc, #156]	; (8006d30 <TIM_Base_SetConfig+0x12c>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d00f      	beq.n	8006cb6 <TIM_Base_SetConfig+0xb2>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4a26      	ldr	r2, [pc, #152]	; (8006d34 <TIM_Base_SetConfig+0x130>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d00b      	beq.n	8006cb6 <TIM_Base_SetConfig+0xb2>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a25      	ldr	r2, [pc, #148]	; (8006d38 <TIM_Base_SetConfig+0x134>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d007      	beq.n	8006cb6 <TIM_Base_SetConfig+0xb2>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a24      	ldr	r2, [pc, #144]	; (8006d3c <TIM_Base_SetConfig+0x138>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d003      	beq.n	8006cb6 <TIM_Base_SetConfig+0xb2>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a23      	ldr	r2, [pc, #140]	; (8006d40 <TIM_Base_SetConfig+0x13c>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d108      	bne.n	8006cc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	695b      	ldr	r3, [r3, #20]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	689a      	ldr	r2, [r3, #8]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4a0a      	ldr	r2, [pc, #40]	; (8006d18 <TIM_Base_SetConfig+0x114>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d003      	beq.n	8006cfc <TIM_Base_SetConfig+0xf8>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a0c      	ldr	r2, [pc, #48]	; (8006d28 <TIM_Base_SetConfig+0x124>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d103      	bne.n	8006d04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	691a      	ldr	r2, [r3, #16]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	615a      	str	r2, [r3, #20]
}
 8006d0a:	bf00      	nop
 8006d0c:	3714      	adds	r7, #20
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	40010000 	.word	0x40010000
 8006d1c:	40000400 	.word	0x40000400
 8006d20:	40000800 	.word	0x40000800
 8006d24:	40000c00 	.word	0x40000c00
 8006d28:	40010400 	.word	0x40010400
 8006d2c:	40014000 	.word	0x40014000
 8006d30:	40014400 	.word	0x40014400
 8006d34:	40014800 	.word	0x40014800
 8006d38:	40001800 	.word	0x40001800
 8006d3c:	40001c00 	.word	0x40001c00
 8006d40:	40002000 	.word	0x40002000

08006d44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b087      	sub	sp, #28
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	f023 0201 	bic.w	r2, r3, #1
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a1b      	ldr	r3, [r3, #32]
 8006d5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f023 0303 	bic.w	r3, r3, #3
 8006d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	f023 0302 	bic.w	r3, r3, #2
 8006d8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	697a      	ldr	r2, [r7, #20]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4a20      	ldr	r2, [pc, #128]	; (8006e1c <TIM_OC1_SetConfig+0xd8>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d003      	beq.n	8006da8 <TIM_OC1_SetConfig+0x64>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a1f      	ldr	r2, [pc, #124]	; (8006e20 <TIM_OC1_SetConfig+0xdc>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d10c      	bne.n	8006dc2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	f023 0308 	bic.w	r3, r3, #8
 8006dae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	697a      	ldr	r2, [r7, #20]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	f023 0304 	bic.w	r3, r3, #4
 8006dc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a15      	ldr	r2, [pc, #84]	; (8006e1c <TIM_OC1_SetConfig+0xd8>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d003      	beq.n	8006dd2 <TIM_OC1_SetConfig+0x8e>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a14      	ldr	r2, [pc, #80]	; (8006e20 <TIM_OC1_SetConfig+0xdc>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d111      	bne.n	8006df6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006de0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	695b      	ldr	r3, [r3, #20]
 8006de6:	693a      	ldr	r2, [r7, #16]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	693a      	ldr	r2, [r7, #16]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	685a      	ldr	r2, [r3, #4]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	697a      	ldr	r2, [r7, #20]
 8006e0e:	621a      	str	r2, [r3, #32]
}
 8006e10:	bf00      	nop
 8006e12:	371c      	adds	r7, #28
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	40010000 	.word	0x40010000
 8006e20:	40010400 	.word	0x40010400

08006e24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b087      	sub	sp, #28
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a1b      	ldr	r3, [r3, #32]
 8006e32:	f023 0210 	bic.w	r2, r3, #16
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a1b      	ldr	r3, [r3, #32]
 8006e3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	021b      	lsls	r3, r3, #8
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	f023 0320 	bic.w	r3, r3, #32
 8006e6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	011b      	lsls	r3, r3, #4
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a22      	ldr	r2, [pc, #136]	; (8006f08 <TIM_OC2_SetConfig+0xe4>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d003      	beq.n	8006e8c <TIM_OC2_SetConfig+0x68>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a21      	ldr	r2, [pc, #132]	; (8006f0c <TIM_OC2_SetConfig+0xe8>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d10d      	bne.n	8006ea8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	011b      	lsls	r3, r3, #4
 8006e9a:	697a      	ldr	r2, [r7, #20]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ea6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a17      	ldr	r2, [pc, #92]	; (8006f08 <TIM_OC2_SetConfig+0xe4>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d003      	beq.n	8006eb8 <TIM_OC2_SetConfig+0x94>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a16      	ldr	r2, [pc, #88]	; (8006f0c <TIM_OC2_SetConfig+0xe8>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d113      	bne.n	8006ee0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ebe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ec6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	695b      	ldr	r3, [r3, #20]
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	693a      	ldr	r2, [r7, #16]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	699b      	ldr	r3, [r3, #24]
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	693a      	ldr	r2, [r7, #16]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	693a      	ldr	r2, [r7, #16]
 8006ee4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	685a      	ldr	r2, [r3, #4]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	621a      	str	r2, [r3, #32]
}
 8006efa:	bf00      	nop
 8006efc:	371c      	adds	r7, #28
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	40010000 	.word	0x40010000
 8006f0c:	40010400 	.word	0x40010400

08006f10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b087      	sub	sp, #28
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a1b      	ldr	r3, [r3, #32]
 8006f1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a1b      	ldr	r3, [r3, #32]
 8006f2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	69db      	ldr	r3, [r3, #28]
 8006f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f023 0303 	bic.w	r3, r3, #3
 8006f46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	021b      	lsls	r3, r3, #8
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a21      	ldr	r2, [pc, #132]	; (8006ff0 <TIM_OC3_SetConfig+0xe0>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d003      	beq.n	8006f76 <TIM_OC3_SetConfig+0x66>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a20      	ldr	r2, [pc, #128]	; (8006ff4 <TIM_OC3_SetConfig+0xe4>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d10d      	bne.n	8006f92 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	021b      	lsls	r3, r3, #8
 8006f84:	697a      	ldr	r2, [r7, #20]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a16      	ldr	r2, [pc, #88]	; (8006ff0 <TIM_OC3_SetConfig+0xe0>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d003      	beq.n	8006fa2 <TIM_OC3_SetConfig+0x92>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a15      	ldr	r2, [pc, #84]	; (8006ff4 <TIM_OC3_SetConfig+0xe4>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d113      	bne.n	8006fca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	695b      	ldr	r3, [r3, #20]
 8006fb6:	011b      	lsls	r3, r3, #4
 8006fb8:	693a      	ldr	r2, [r7, #16]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	699b      	ldr	r3, [r3, #24]
 8006fc2:	011b      	lsls	r3, r3, #4
 8006fc4:	693a      	ldr	r2, [r7, #16]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	685a      	ldr	r2, [r3, #4]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	697a      	ldr	r2, [r7, #20]
 8006fe2:	621a      	str	r2, [r3, #32]
}
 8006fe4:	bf00      	nop
 8006fe6:	371c      	adds	r7, #28
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr
 8006ff0:	40010000 	.word	0x40010000
 8006ff4:	40010400 	.word	0x40010400

08006ff8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	69db      	ldr	r3, [r3, #28]
 800701e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800702e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	021b      	lsls	r3, r3, #8
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	4313      	orrs	r3, r2
 800703a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007042:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	031b      	lsls	r3, r3, #12
 800704a:	693a      	ldr	r2, [r7, #16]
 800704c:	4313      	orrs	r3, r2
 800704e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a12      	ldr	r2, [pc, #72]	; (800709c <TIM_OC4_SetConfig+0xa4>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d003      	beq.n	8007060 <TIM_OC4_SetConfig+0x68>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a11      	ldr	r2, [pc, #68]	; (80070a0 <TIM_OC4_SetConfig+0xa8>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d109      	bne.n	8007074 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007066:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	695b      	ldr	r3, [r3, #20]
 800706c:	019b      	lsls	r3, r3, #6
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	4313      	orrs	r3, r2
 8007072:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	697a      	ldr	r2, [r7, #20]
 8007078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	685a      	ldr	r2, [r3, #4]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	693a      	ldr	r2, [r7, #16]
 800708c:	621a      	str	r2, [r3, #32]
}
 800708e:	bf00      	nop
 8007090:	371c      	adds	r7, #28
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	40010000 	.word	0x40010000
 80070a0:	40010400 	.word	0x40010400

080070a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b087      	sub	sp, #28
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6a1b      	ldr	r3, [r3, #32]
 80070b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6a1b      	ldr	r3, [r3, #32]
 80070ba:	f023 0201 	bic.w	r2, r3, #1
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	011b      	lsls	r3, r3, #4
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	f023 030a 	bic.w	r3, r3, #10
 80070e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80070e2:	697a      	ldr	r2, [r7, #20]
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	693a      	ldr	r2, [r7, #16]
 80070ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	621a      	str	r2, [r3, #32]
}
 80070f6:	bf00      	nop
 80070f8:	371c      	adds	r7, #28
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr

08007102 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007102:	b480      	push	{r7}
 8007104:	b087      	sub	sp, #28
 8007106:	af00      	add	r7, sp, #0
 8007108:	60f8      	str	r0, [r7, #12]
 800710a:	60b9      	str	r1, [r7, #8]
 800710c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6a1b      	ldr	r3, [r3, #32]
 8007112:	f023 0210 	bic.w	r2, r3, #16
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	699b      	ldr	r3, [r3, #24]
 800711e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6a1b      	ldr	r3, [r3, #32]
 8007124:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800712c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	031b      	lsls	r3, r3, #12
 8007132:	697a      	ldr	r2, [r7, #20]
 8007134:	4313      	orrs	r3, r2
 8007136:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800713e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	011b      	lsls	r3, r3, #4
 8007144:	693a      	ldr	r2, [r7, #16]
 8007146:	4313      	orrs	r3, r2
 8007148:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	697a      	ldr	r2, [r7, #20]
 800714e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	693a      	ldr	r2, [r7, #16]
 8007154:	621a      	str	r2, [r3, #32]
}
 8007156:	bf00      	nop
 8007158:	371c      	adds	r7, #28
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr

08007162 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007162:	b480      	push	{r7}
 8007164:	b085      	sub	sp, #20
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
 800716a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007178:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800717a:	683a      	ldr	r2, [r7, #0]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	4313      	orrs	r3, r2
 8007180:	f043 0307 	orr.w	r3, r3, #7
 8007184:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	609a      	str	r2, [r3, #8]
}
 800718c:	bf00      	nop
 800718e:	3714      	adds	r7, #20
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007198:	b480      	push	{r7}
 800719a:	b087      	sub	sp, #28
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	607a      	str	r2, [r7, #4]
 80071a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	021a      	lsls	r2, r3, #8
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	431a      	orrs	r2, r3
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	4313      	orrs	r3, r2
 80071c0:	697a      	ldr	r2, [r7, #20]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	697a      	ldr	r2, [r7, #20]
 80071ca:	609a      	str	r2, [r3, #8]
}
 80071cc:	bf00      	nop
 80071ce:	371c      	adds	r7, #28
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80071d8:	b480      	push	{r7}
 80071da:	b087      	sub	sp, #28
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	f003 031f 	and.w	r3, r3, #31
 80071ea:	2201      	movs	r2, #1
 80071ec:	fa02 f303 	lsl.w	r3, r2, r3
 80071f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6a1a      	ldr	r2, [r3, #32]
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	43db      	mvns	r3, r3
 80071fa:	401a      	ands	r2, r3
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6a1a      	ldr	r2, [r3, #32]
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	f003 031f 	and.w	r3, r3, #31
 800720a:	6879      	ldr	r1, [r7, #4]
 800720c:	fa01 f303 	lsl.w	r3, r1, r3
 8007210:	431a      	orrs	r2, r3
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	621a      	str	r2, [r3, #32]
}
 8007216:	bf00      	nop
 8007218:	371c      	adds	r7, #28
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr
	...

08007224 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007234:	2b01      	cmp	r3, #1
 8007236:	d101      	bne.n	800723c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007238:	2302      	movs	r3, #2
 800723a:	e05a      	b.n	80072f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2202      	movs	r2, #2
 8007248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007262:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	4313      	orrs	r3, r2
 800726c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a21      	ldr	r2, [pc, #132]	; (8007300 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d022      	beq.n	80072c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007288:	d01d      	beq.n	80072c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a1d      	ldr	r2, [pc, #116]	; (8007304 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d018      	beq.n	80072c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a1b      	ldr	r2, [pc, #108]	; (8007308 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d013      	beq.n	80072c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a1a      	ldr	r2, [pc, #104]	; (800730c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d00e      	beq.n	80072c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a18      	ldr	r2, [pc, #96]	; (8007310 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d009      	beq.n	80072c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a17      	ldr	r2, [pc, #92]	; (8007314 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d004      	beq.n	80072c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a15      	ldr	r2, [pc, #84]	; (8007318 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d10c      	bne.n	80072e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	68ba      	ldr	r2, [r7, #8]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3714      	adds	r7, #20
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr
 80072fe:	bf00      	nop
 8007300:	40010000 	.word	0x40010000
 8007304:	40000400 	.word	0x40000400
 8007308:	40000800 	.word	0x40000800
 800730c:	40000c00 	.word	0x40000c00
 8007310:	40010400 	.word	0x40010400
 8007314:	40014000 	.word	0x40014000
 8007318:	40001800 	.word	0x40001800

0800731c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007326:	2300      	movs	r3, #0
 8007328:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007330:	2b01      	cmp	r3, #1
 8007332:	d101      	bne.n	8007338 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007334:	2302      	movs	r3, #2
 8007336:	e03d      	b.n	80073b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	4313      	orrs	r3, r2
 800734c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	4313      	orrs	r3, r2
 800735a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	4313      	orrs	r3, r2
 8007368:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4313      	orrs	r3, r2
 8007376:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	4313      	orrs	r3, r2
 8007384:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	695b      	ldr	r3, [r3, #20]
 8007390:	4313      	orrs	r3, r2
 8007392:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	69db      	ldr	r3, [r3, #28]
 800739e:	4313      	orrs	r3, r2
 80073a0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3714      	adds	r7, #20
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80073c8:	bf00      	nop
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073dc:	bf00      	nop
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d101      	bne.n	80073fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e04a      	b.n	8007490 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007400:	b2db      	uxtb	r3, r3
 8007402:	2b00      	cmp	r3, #0
 8007404:	d111      	bne.n	800742a <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fbea 	bl	8007be8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007418:	2b00      	cmp	r3, #0
 800741a:	d102      	bne.n	8007422 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	4a1e      	ldr	r2, [pc, #120]	; (8007498 <HAL_UART_Init+0xb0>)
 8007420:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2224      	movs	r2, #36	; 0x24
 800742e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68da      	ldr	r2, [r3, #12]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007440:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 ffd8 	bl	80083f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	691a      	ldr	r2, [r3, #16]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007456:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	695a      	ldr	r2, [r3, #20]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007466:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68da      	ldr	r2, [r3, #12]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007476:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2220      	movs	r2, #32
 8007482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2220      	movs	r2, #32
 800748a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3708      	adds	r7, #8
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	0800312d 	.word	0x0800312d

0800749c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b08a      	sub	sp, #40	; 0x28
 80074a0:	af02      	add	r7, sp, #8
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	603b      	str	r3, [r7, #0]
 80074a8:	4613      	mov	r3, r2
 80074aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80074ac:	2300      	movs	r3, #0
 80074ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	2b20      	cmp	r3, #32
 80074ba:	d17c      	bne.n	80075b6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d002      	beq.n	80074c8 <HAL_UART_Transmit+0x2c>
 80074c2:	88fb      	ldrh	r3, [r7, #6]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d101      	bne.n	80074cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	e075      	b.n	80075b8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d101      	bne.n	80074da <HAL_UART_Transmit+0x3e>
 80074d6:	2302      	movs	r3, #2
 80074d8:	e06e      	b.n	80075b8 <HAL_UART_Transmit+0x11c>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2200      	movs	r2, #0
 80074e6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2221      	movs	r2, #33	; 0x21
 80074ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074f0:	f7fc f9b6 	bl	8003860 <HAL_GetTick>
 80074f4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	88fa      	ldrh	r2, [r7, #6]
 80074fa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	88fa      	ldrh	r2, [r7, #6]
 8007500:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800750a:	d108      	bne.n	800751e <HAL_UART_Transmit+0x82>
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d104      	bne.n	800751e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007514:	2300      	movs	r3, #0
 8007516:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	61bb      	str	r3, [r7, #24]
 800751c:	e003      	b.n	8007526 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007522:	2300      	movs	r3, #0
 8007524:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2200      	movs	r2, #0
 800752a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800752e:	e02a      	b.n	8007586 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	2200      	movs	r2, #0
 8007538:	2180      	movs	r1, #128	; 0x80
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f000 fc89 	bl	8007e52 <UART_WaitOnFlagUntilTimeout>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d001      	beq.n	800754a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007546:	2303      	movs	r3, #3
 8007548:	e036      	b.n	80075b8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10b      	bne.n	8007568 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	881b      	ldrh	r3, [r3, #0]
 8007554:	461a      	mov	r2, r3
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800755e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	3302      	adds	r3, #2
 8007564:	61bb      	str	r3, [r7, #24]
 8007566:	e007      	b.n	8007578 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	781a      	ldrb	r2, [r3, #0]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	3301      	adds	r3, #1
 8007576:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800757c:	b29b      	uxth	r3, r3
 800757e:	3b01      	subs	r3, #1
 8007580:	b29a      	uxth	r2, r3
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800758a:	b29b      	uxth	r3, r3
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1cf      	bne.n	8007530 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	9300      	str	r3, [sp, #0]
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	2200      	movs	r2, #0
 8007598:	2140      	movs	r1, #64	; 0x40
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f000 fc59 	bl	8007e52 <UART_WaitOnFlagUntilTimeout>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d001      	beq.n	80075aa <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80075a6:	2303      	movs	r3, #3
 80075a8:	e006      	b.n	80075b8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2220      	movs	r2, #32
 80075ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80075b2:	2300      	movs	r3, #0
 80075b4:	e000      	b.n	80075b8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80075b6:	2302      	movs	r3, #2
  }
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3720      	adds	r7, #32
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	4613      	mov	r3, r2
 80075cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	2b20      	cmp	r3, #32
 80075d8:	d11d      	bne.n	8007616 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d002      	beq.n	80075e6 <HAL_UART_Receive_DMA+0x26>
 80075e0:	88fb      	ldrh	r3, [r7, #6]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d101      	bne.n	80075ea <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e016      	b.n	8007618 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d101      	bne.n	80075f8 <HAL_UART_Receive_DMA+0x38>
 80075f4:	2302      	movs	r3, #2
 80075f6:	e00f      	b.n	8007618 <HAL_UART_Receive_DMA+0x58>
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2200      	movs	r2, #0
 8007604:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007606:	88fb      	ldrh	r3, [r7, #6]
 8007608:	461a      	mov	r2, r3
 800760a:	68b9      	ldr	r1, [r7, #8]
 800760c:	68f8      	ldr	r0, [r7, #12]
 800760e:	f000 fc8f 	bl	8007f30 <UART_Start_Receive_DMA>
 8007612:	4603      	mov	r3, r0
 8007614:	e000      	b.n	8007618 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007616:	2302      	movs	r3, #2
  }
}
 8007618:	4618      	mov	r0, r3
 800761a:	3710      	adds	r7, #16
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b0ba      	sub	sp, #232	; 0xe8
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007646:	2300      	movs	r3, #0
 8007648:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800764c:	2300      	movs	r3, #0
 800764e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007656:	f003 030f 	and.w	r3, r3, #15
 800765a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800765e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10f      	bne.n	8007686 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800766a:	f003 0320 	and.w	r3, r3, #32
 800766e:	2b00      	cmp	r3, #0
 8007670:	d009      	beq.n	8007686 <HAL_UART_IRQHandler+0x66>
 8007672:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007676:	f003 0320 	and.w	r3, r3, #32
 800767a:	2b00      	cmp	r3, #0
 800767c:	d003      	beq.n	8007686 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 fdfd 	bl	800827e <UART_Receive_IT>
      return;
 8007684:	e25b      	b.n	8007b3e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007686:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800768a:	2b00      	cmp	r3, #0
 800768c:	f000 80e1 	beq.w	8007852 <HAL_UART_IRQHandler+0x232>
 8007690:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007694:	f003 0301 	and.w	r3, r3, #1
 8007698:	2b00      	cmp	r3, #0
 800769a:	d106      	bne.n	80076aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800769c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	f000 80d4 	beq.w	8007852 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80076aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076ae:	f003 0301 	and.w	r3, r3, #1
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00b      	beq.n	80076ce <HAL_UART_IRQHandler+0xae>
 80076b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d005      	beq.n	80076ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c6:	f043 0201 	orr.w	r2, r3, #1
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076d2:	f003 0304 	and.w	r3, r3, #4
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00b      	beq.n	80076f2 <HAL_UART_IRQHandler+0xd2>
 80076da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d005      	beq.n	80076f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ea:	f043 0202 	orr.w	r2, r3, #2
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076f6:	f003 0302 	and.w	r3, r3, #2
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00b      	beq.n	8007716 <HAL_UART_IRQHandler+0xf6>
 80076fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007702:	f003 0301 	and.w	r3, r3, #1
 8007706:	2b00      	cmp	r3, #0
 8007708:	d005      	beq.n	8007716 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770e:	f043 0204 	orr.w	r2, r3, #4
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800771a:	f003 0308 	and.w	r3, r3, #8
 800771e:	2b00      	cmp	r3, #0
 8007720:	d011      	beq.n	8007746 <HAL_UART_IRQHandler+0x126>
 8007722:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007726:	f003 0320 	and.w	r3, r3, #32
 800772a:	2b00      	cmp	r3, #0
 800772c:	d105      	bne.n	800773a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800772e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007732:	f003 0301 	and.w	r3, r3, #1
 8007736:	2b00      	cmp	r3, #0
 8007738:	d005      	beq.n	8007746 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800773e:	f043 0208 	orr.w	r2, r3, #8
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774a:	2b00      	cmp	r3, #0
 800774c:	f000 81f2 	beq.w	8007b34 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007754:	f003 0320 	and.w	r3, r3, #32
 8007758:	2b00      	cmp	r3, #0
 800775a:	d008      	beq.n	800776e <HAL_UART_IRQHandler+0x14e>
 800775c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007760:	f003 0320 	and.w	r3, r3, #32
 8007764:	2b00      	cmp	r3, #0
 8007766:	d002      	beq.n	800776e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 fd88 	bl	800827e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	695b      	ldr	r3, [r3, #20]
 8007774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007778:	2b40      	cmp	r3, #64	; 0x40
 800777a:	bf0c      	ite	eq
 800777c:	2301      	moveq	r3, #1
 800777e:	2300      	movne	r3, #0
 8007780:	b2db      	uxtb	r3, r3
 8007782:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778a:	f003 0308 	and.w	r3, r3, #8
 800778e:	2b00      	cmp	r3, #0
 8007790:	d103      	bne.n	800779a <HAL_UART_IRQHandler+0x17a>
 8007792:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007796:	2b00      	cmp	r3, #0
 8007798:	d051      	beq.n	800783e <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 fc8e 	bl	80080bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	695b      	ldr	r3, [r3, #20]
 80077a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077aa:	2b40      	cmp	r3, #64	; 0x40
 80077ac:	d142      	bne.n	8007834 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	3314      	adds	r3, #20
 80077b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077bc:	e853 3f00 	ldrex	r3, [r3]
 80077c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80077c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	3314      	adds	r3, #20
 80077d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80077da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80077de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80077e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80077ea:	e841 2300 	strex	r3, r2, [r1]
 80077ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80077f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d1d9      	bne.n	80077ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d013      	beq.n	800782a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007806:	4a7f      	ldr	r2, [pc, #508]	; (8007a04 <HAL_UART_IRQHandler+0x3e4>)
 8007808:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800780e:	4618      	mov	r0, r3
 8007810:	f7fc fa8a 	bl	8003d28 <HAL_DMA_Abort_IT>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d019      	beq.n	800784e <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007824:	4610      	mov	r0, r2
 8007826:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007828:	e011      	b.n	800784e <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007832:	e00c      	b.n	800784e <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800783c:	e007      	b.n	800784e <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800784c:	e172      	b.n	8007b34 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800784e:	bf00      	nop
    return;
 8007850:	e170      	b.n	8007b34 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007856:	2b01      	cmp	r3, #1
 8007858:	f040 814c 	bne.w	8007af4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800785c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007860:	f003 0310 	and.w	r3, r3, #16
 8007864:	2b00      	cmp	r3, #0
 8007866:	f000 8145 	beq.w	8007af4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800786a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800786e:	f003 0310 	and.w	r3, r3, #16
 8007872:	2b00      	cmp	r3, #0
 8007874:	f000 813e 	beq.w	8007af4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007878:	2300      	movs	r3, #0
 800787a:	60bb      	str	r3, [r7, #8]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	60bb      	str	r3, [r7, #8]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	60bb      	str	r3, [r7, #8]
 800788c:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	695b      	ldr	r3, [r3, #20]
 8007894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007898:	2b40      	cmp	r3, #64	; 0x40
 800789a:	f040 80b5 	bne.w	8007a08 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80078aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	f000 8142 	beq.w	8007b38 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80078b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80078bc:	429a      	cmp	r2, r3
 80078be:	f080 813b 	bcs.w	8007b38 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80078c8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ce:	69db      	ldr	r3, [r3, #28]
 80078d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078d4:	f000 8088 	beq.w	80079e8 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	330c      	adds	r3, #12
 80078de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80078e6:	e853 3f00 	ldrex	r3, [r3]
 80078ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80078ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	330c      	adds	r3, #12
 8007900:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007904:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007908:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007910:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007914:	e841 2300 	strex	r3, r2, [r1]
 8007918:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800791c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007920:	2b00      	cmp	r3, #0
 8007922:	d1d9      	bne.n	80078d8 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	3314      	adds	r3, #20
 800792a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800792e:	e853 3f00 	ldrex	r3, [r3]
 8007932:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007934:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007936:	f023 0301 	bic.w	r3, r3, #1
 800793a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	3314      	adds	r3, #20
 8007944:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007948:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800794c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800794e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007950:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007954:	e841 2300 	strex	r3, r2, [r1]
 8007958:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800795a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800795c:	2b00      	cmp	r3, #0
 800795e:	d1e1      	bne.n	8007924 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	3314      	adds	r3, #20
 8007966:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007968:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800796a:	e853 3f00 	ldrex	r3, [r3]
 800796e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007970:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007972:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007976:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	3314      	adds	r3, #20
 8007980:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007984:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007986:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007988:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800798a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800798c:	e841 2300 	strex	r3, r2, [r1]
 8007990:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007992:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1e3      	bne.n	8007960 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2220      	movs	r2, #32
 800799c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	330c      	adds	r3, #12
 80079ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079b0:	e853 3f00 	ldrex	r3, [r3]
 80079b4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80079b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079b8:	f023 0310 	bic.w	r3, r3, #16
 80079bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	330c      	adds	r3, #12
 80079c6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80079ca:	65ba      	str	r2, [r7, #88]	; 0x58
 80079cc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80079d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079d2:	e841 2300 	strex	r3, r2, [r1]
 80079d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80079d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1e3      	bne.n	80079a6 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7fc f930 	bl	8003c48 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 80079f4:	b292      	uxth	r2, r2
 80079f6:	1a8a      	subs	r2, r1, r2
 80079f8:	b292      	uxth	r2, r2
 80079fa:	4611      	mov	r1, r2
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007a00:	e09a      	b.n	8007b38 <HAL_UART_IRQHandler+0x518>
 8007a02:	bf00      	nop
 8007a04:	08008183 	.word	0x08008183
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	1ad3      	subs	r3, r2, r3
 8007a14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	f000 808c 	beq.w	8007b3c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007a24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f000 8087 	beq.w	8007b3c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	330c      	adds	r3, #12
 8007a34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a38:	e853 3f00 	ldrex	r3, [r3]
 8007a3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	330c      	adds	r3, #12
 8007a4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007a52:	647a      	str	r2, [r7, #68]	; 0x44
 8007a54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a5a:	e841 2300 	strex	r3, r2, [r1]
 8007a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1e3      	bne.n	8007a2e <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	3314      	adds	r3, #20
 8007a6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a70:	e853 3f00 	ldrex	r3, [r3]
 8007a74:	623b      	str	r3, [r7, #32]
   return(result);
 8007a76:	6a3b      	ldr	r3, [r7, #32]
 8007a78:	f023 0301 	bic.w	r3, r3, #1
 8007a7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	3314      	adds	r3, #20
 8007a86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007a8a:	633a      	str	r2, [r7, #48]	; 0x30
 8007a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a92:	e841 2300 	strex	r3, r2, [r1]
 8007a96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d1e3      	bne.n	8007a66 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2220      	movs	r2, #32
 8007aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	330c      	adds	r3, #12
 8007ab2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	e853 3f00 	ldrex	r3, [r3]
 8007aba:	60fb      	str	r3, [r7, #12]
   return(result);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f023 0310 	bic.w	r3, r3, #16
 8007ac2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	330c      	adds	r3, #12
 8007acc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007ad0:	61fa      	str	r2, [r7, #28]
 8007ad2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad4:	69b9      	ldr	r1, [r7, #24]
 8007ad6:	69fa      	ldr	r2, [r7, #28]
 8007ad8:	e841 2300 	strex	r3, r2, [r1]
 8007adc:	617b      	str	r3, [r7, #20]
   return(result);
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d1e3      	bne.n	8007aac <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ae8:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8007aec:	4611      	mov	r1, r2
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007af2:	e023      	b.n	8007b3c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d009      	beq.n	8007b14 <HAL_UART_IRQHandler+0x4f4>
 8007b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d003      	beq.n	8007b14 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 fb4d 	bl	80081ac <UART_Transmit_IT>
    return;
 8007b12:	e014      	b.n	8007b3e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00e      	beq.n	8007b3e <HAL_UART_IRQHandler+0x51e>
 8007b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d008      	beq.n	8007b3e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 fb8d 	bl	800824c <UART_EndTransmit_IT>
    return;
 8007b32:	e004      	b.n	8007b3e <HAL_UART_IRQHandler+0x51e>
    return;
 8007b34:	bf00      	nop
 8007b36:	e002      	b.n	8007b3e <HAL_UART_IRQHandler+0x51e>
      return;
 8007b38:	bf00      	nop
 8007b3a:	e000      	b.n	8007b3e <HAL_UART_IRQHandler+0x51e>
      return;
 8007b3c:	bf00      	nop
  }
}
 8007b3e:	37e8      	adds	r7, #232	; 0xe8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007b4c:	bf00      	nop
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007b60:	bf00      	nop
 8007b62:	370c      	adds	r7, #12
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007b74:	bf00      	nop
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007b88:	bf00      	nop
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8007b9c:	bf00      	nop
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8007bb0:	bf00      	nop
 8007bb2:	370c      	adds	r7, #12
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr

08007bbc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8007bc4:	bf00      	nop
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	460b      	mov	r3, r1
 8007bda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007bdc:	bf00      	nop
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4a10      	ldr	r2, [pc, #64]	; (8007c34 <UART_InitCallbacksToDefault+0x4c>)
 8007bf4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4a0f      	ldr	r2, [pc, #60]	; (8007c38 <UART_InitCallbacksToDefault+0x50>)
 8007bfa:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4a0f      	ldr	r2, [pc, #60]	; (8007c3c <UART_InitCallbacksToDefault+0x54>)
 8007c00:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a0e      	ldr	r2, [pc, #56]	; (8007c40 <UART_InitCallbacksToDefault+0x58>)
 8007c06:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4a0e      	ldr	r2, [pc, #56]	; (8007c44 <UART_InitCallbacksToDefault+0x5c>)
 8007c0c:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a0d      	ldr	r2, [pc, #52]	; (8007c48 <UART_InitCallbacksToDefault+0x60>)
 8007c12:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4a0d      	ldr	r2, [pc, #52]	; (8007c4c <UART_InitCallbacksToDefault+0x64>)
 8007c18:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a0c      	ldr	r2, [pc, #48]	; (8007c50 <UART_InitCallbacksToDefault+0x68>)
 8007c1e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	4a0c      	ldr	r2, [pc, #48]	; (8007c54 <UART_InitCallbacksToDefault+0x6c>)
 8007c24:	669a      	str	r2, [r3, #104]	; 0x68

}
 8007c26:	bf00      	nop
 8007c28:	370c      	adds	r7, #12
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr
 8007c32:	bf00      	nop
 8007c34:	08007b59 	.word	0x08007b59
 8007c38:	08007b45 	.word	0x08007b45
 8007c3c:	08007b6d 	.word	0x08007b6d
 8007c40:	08001659 	.word	0x08001659
 8007c44:	08007b81 	.word	0x08007b81
 8007c48:	08007b95 	.word	0x08007b95
 8007c4c:	08007ba9 	.word	0x08007ba9
 8007c50:	08007bbd 	.word	0x08007bbd
 8007c54:	08007bd1 	.word	0x08007bd1

08007c58 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b09c      	sub	sp, #112	; 0x70
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c64:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d172      	bne.n	8007d5a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c76:	2200      	movs	r2, #0
 8007c78:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	330c      	adds	r3, #12
 8007c80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c84:	e853 3f00 	ldrex	r3, [r3]
 8007c88:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007c8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c90:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	330c      	adds	r3, #12
 8007c98:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007c9a:	65ba      	str	r2, [r7, #88]	; 0x58
 8007c9c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ca0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ca2:	e841 2300 	strex	r3, r2, [r1]
 8007ca6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007ca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d1e5      	bne.n	8007c7a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	3314      	adds	r3, #20
 8007cb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb8:	e853 3f00 	ldrex	r3, [r3]
 8007cbc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cc0:	f023 0301 	bic.w	r3, r3, #1
 8007cc4:	667b      	str	r3, [r7, #100]	; 0x64
 8007cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	3314      	adds	r3, #20
 8007ccc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007cce:	647a      	str	r2, [r7, #68]	; 0x44
 8007cd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007cd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007cd6:	e841 2300 	strex	r3, r2, [r1]
 8007cda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1e5      	bne.n	8007cae <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	3314      	adds	r3, #20
 8007ce8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cec:	e853 3f00 	ldrex	r3, [r3]
 8007cf0:	623b      	str	r3, [r7, #32]
   return(result);
 8007cf2:	6a3b      	ldr	r3, [r7, #32]
 8007cf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cf8:	663b      	str	r3, [r7, #96]	; 0x60
 8007cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	3314      	adds	r3, #20
 8007d00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d02:	633a      	str	r2, [r7, #48]	; 0x30
 8007d04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d0a:	e841 2300 	strex	r3, r2, [r1]
 8007d0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d1e5      	bne.n	8007ce2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d18:	2220      	movs	r2, #32
 8007d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d119      	bne.n	8007d5a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	330c      	adds	r3, #12
 8007d2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	e853 3f00 	ldrex	r3, [r3]
 8007d34:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f023 0310 	bic.w	r3, r3, #16
 8007d3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	330c      	adds	r3, #12
 8007d44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007d46:	61fa      	str	r2, [r7, #28]
 8007d48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4a:	69b9      	ldr	r1, [r7, #24]
 8007d4c:	69fa      	ldr	r2, [r7, #28]
 8007d4e:	e841 2300 	strex	r3, r2, [r1]
 8007d52:	617b      	str	r3, [r7, #20]
   return(result);
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d1e5      	bne.n	8007d26 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d107      	bne.n	8007d72 <UART_DMAReceiveCplt+0x11a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8007d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d66:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d68:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8007d6a:	4611      	mov	r1, r2
 8007d6c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007d6e:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d70:	e003      	b.n	8007d7a <UART_DMAReceiveCplt+0x122>
    huart->RxCpltCallback(huart);
 8007d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d76:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007d78:	4798      	blx	r3
}
 8007d7a:	bf00      	nop
 8007d7c:	3770      	adds	r7, #112	; 0x70
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b084      	sub	sp, #16
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d8e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d109      	bne.n	8007dac <UART_DMARxHalfCplt+0x2a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d9c:	68fa      	ldr	r2, [r7, #12]
 8007d9e:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8007da0:	0852      	lsrs	r2, r2, #1
 8007da2:	b292      	uxth	r2, r2
 8007da4:	4611      	mov	r1, r2
 8007da6:	68f8      	ldr	r0, [r7, #12]
 8007da8:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007daa:	e003      	b.n	8007db4 <UART_DMARxHalfCplt+0x32>
    huart->RxHalfCpltCallback(huart);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007db0:	68f8      	ldr	r0, [r7, #12]
 8007db2:	4798      	blx	r3
}
 8007db4:	bf00      	nop
 8007db6:	3710      	adds	r7, #16
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dcc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	695b      	ldr	r3, [r3, #20]
 8007dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dd8:	2b80      	cmp	r3, #128	; 0x80
 8007dda:	bf0c      	ite	eq
 8007ddc:	2301      	moveq	r3, #1
 8007dde:	2300      	movne	r3, #0
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	2b21      	cmp	r3, #33	; 0x21
 8007dee:	d108      	bne.n	8007e02 <UART_DMAError+0x46>
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d005      	beq.n	8007e02 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007dfc:	68b8      	ldr	r0, [r7, #8]
 8007dfe:	f000 f935 	bl	800806c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	695b      	ldr	r3, [r3, #20]
 8007e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e0c:	2b40      	cmp	r3, #64	; 0x40
 8007e0e:	bf0c      	ite	eq
 8007e10:	2301      	moveq	r3, #1
 8007e12:	2300      	movne	r3, #0
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	2b22      	cmp	r3, #34	; 0x22
 8007e22:	d108      	bne.n	8007e36 <UART_DMAError+0x7a>
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d005      	beq.n	8007e36 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007e30:	68b8      	ldr	r0, [r7, #8]
 8007e32:	f000 f943 	bl	80080bc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3a:	f043 0210 	orr.w	r2, r3, #16
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e46:	68b8      	ldr	r0, [r7, #8]
 8007e48:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e4a:	bf00      	nop
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b090      	sub	sp, #64	; 0x40
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	60f8      	str	r0, [r7, #12]
 8007e5a:	60b9      	str	r1, [r7, #8]
 8007e5c:	603b      	str	r3, [r7, #0]
 8007e5e:	4613      	mov	r3, r2
 8007e60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e62:	e050      	b.n	8007f06 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e6a:	d04c      	beq.n	8007f06 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007e6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d007      	beq.n	8007e82 <UART_WaitOnFlagUntilTimeout+0x30>
 8007e72:	f7fb fcf5 	bl	8003860 <HAL_GetTick>
 8007e76:	4602      	mov	r2, r0
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	1ad3      	subs	r3, r2, r3
 8007e7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d241      	bcs.n	8007f06 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	330c      	adds	r3, #12
 8007e88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8c:	e853 3f00 	ldrex	r3, [r3]
 8007e90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007e98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	330c      	adds	r3, #12
 8007ea0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007ea2:	637a      	str	r2, [r7, #52]	; 0x34
 8007ea4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ea8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007eaa:	e841 2300 	strex	r3, r2, [r1]
 8007eae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d1e5      	bne.n	8007e82 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	3314      	adds	r3, #20
 8007ebc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	e853 3f00 	ldrex	r3, [r3]
 8007ec4:	613b      	str	r3, [r7, #16]
   return(result);
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	f023 0301 	bic.w	r3, r3, #1
 8007ecc:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	3314      	adds	r3, #20
 8007ed4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ed6:	623a      	str	r2, [r7, #32]
 8007ed8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eda:	69f9      	ldr	r1, [r7, #28]
 8007edc:	6a3a      	ldr	r2, [r7, #32]
 8007ede:	e841 2300 	strex	r3, r2, [r1]
 8007ee2:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d1e5      	bne.n	8007eb6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2220      	movs	r2, #32
 8007eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2220      	movs	r2, #32
 8007ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007f02:	2303      	movs	r3, #3
 8007f04:	e00f      	b.n	8007f26 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	4013      	ands	r3, r2
 8007f10:	68ba      	ldr	r2, [r7, #8]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	bf0c      	ite	eq
 8007f16:	2301      	moveq	r3, #1
 8007f18:	2300      	movne	r3, #0
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	79fb      	ldrb	r3, [r7, #7]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d09f      	beq.n	8007e64 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007f24:	2300      	movs	r3, #0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3740      	adds	r7, #64	; 0x40
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
	...

08007f30 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b098      	sub	sp, #96	; 0x60
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007f3e:	68ba      	ldr	r2, [r7, #8]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	88fa      	ldrh	r2, [r7, #6]
 8007f48:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2222      	movs	r2, #34	; 0x22
 8007f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f5c:	4a40      	ldr	r2, [pc, #256]	; (8008060 <UART_Start_Receive_DMA+0x130>)
 8007f5e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f64:	4a3f      	ldr	r2, [pc, #252]	; (8008064 <UART_Start_Receive_DMA+0x134>)
 8007f66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f6c:	4a3e      	ldr	r2, [pc, #248]	; (8008068 <UART_Start_Receive_DMA+0x138>)
 8007f6e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f74:	2200      	movs	r2, #0
 8007f76:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007f78:	f107 0308 	add.w	r3, r7, #8
 8007f7c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	3304      	adds	r3, #4
 8007f88:	4619      	mov	r1, r3
 8007f8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	88fb      	ldrh	r3, [r7, #6]
 8007f90:	f7fb fe02 	bl	8003b98 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007f94:	2300      	movs	r3, #0
 8007f96:	613b      	str	r3, [r7, #16]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	613b      	str	r3, [r7, #16]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	613b      	str	r3, [r7, #16]
 8007fa8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2200      	movs	r2, #0
 8007fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d019      	beq.n	8007fee <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	330c      	adds	r3, #12
 8007fc0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fc4:	e853 3f00 	ldrex	r3, [r3]
 8007fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fd0:	65bb      	str	r3, [r7, #88]	; 0x58
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	330c      	adds	r3, #12
 8007fd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007fda:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007fdc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fde:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007fe0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007fe2:	e841 2300 	strex	r3, r2, [r1]
 8007fe6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007fe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d1e5      	bne.n	8007fba <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	3314      	adds	r3, #20
 8007ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff8:	e853 3f00 	ldrex	r3, [r3]
 8007ffc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008000:	f043 0301 	orr.w	r3, r3, #1
 8008004:	657b      	str	r3, [r7, #84]	; 0x54
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	3314      	adds	r3, #20
 800800c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800800e:	63ba      	str	r2, [r7, #56]	; 0x38
 8008010:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008012:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008014:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008016:	e841 2300 	strex	r3, r2, [r1]
 800801a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800801c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1e5      	bne.n	8007fee <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	3314      	adds	r3, #20
 8008028:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	e853 3f00 	ldrex	r3, [r3]
 8008030:	617b      	str	r3, [r7, #20]
   return(result);
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008038:	653b      	str	r3, [r7, #80]	; 0x50
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	3314      	adds	r3, #20
 8008040:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008042:	627a      	str	r2, [r7, #36]	; 0x24
 8008044:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008046:	6a39      	ldr	r1, [r7, #32]
 8008048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800804a:	e841 2300 	strex	r3, r2, [r1]
 800804e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d1e5      	bne.n	8008022 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8008056:	2300      	movs	r3, #0
}
 8008058:	4618      	mov	r0, r3
 800805a:	3760      	adds	r7, #96	; 0x60
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}
 8008060:	08007c59 	.word	0x08007c59
 8008064:	08007d83 	.word	0x08007d83
 8008068:	08007dbd 	.word	0x08007dbd

0800806c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800806c:	b480      	push	{r7}
 800806e:	b089      	sub	sp, #36	; 0x24
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	330c      	adds	r3, #12
 800807a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	e853 3f00 	ldrex	r3, [r3]
 8008082:	60bb      	str	r3, [r7, #8]
   return(result);
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800808a:	61fb      	str	r3, [r7, #28]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	330c      	adds	r3, #12
 8008092:	69fa      	ldr	r2, [r7, #28]
 8008094:	61ba      	str	r2, [r7, #24]
 8008096:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008098:	6979      	ldr	r1, [r7, #20]
 800809a:	69ba      	ldr	r2, [r7, #24]
 800809c:	e841 2300 	strex	r3, r2, [r1]
 80080a0:	613b      	str	r3, [r7, #16]
   return(result);
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d1e5      	bne.n	8008074 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2220      	movs	r2, #32
 80080ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80080b0:	bf00      	nop
 80080b2:	3724      	adds	r7, #36	; 0x24
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80080bc:	b480      	push	{r7}
 80080be:	b095      	sub	sp, #84	; 0x54
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	330c      	adds	r3, #12
 80080ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080ce:	e853 3f00 	ldrex	r3, [r3]
 80080d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80080d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	330c      	adds	r3, #12
 80080e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80080e4:	643a      	str	r2, [r7, #64]	; 0x40
 80080e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80080ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080ec:	e841 2300 	strex	r3, r2, [r1]
 80080f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80080f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d1e5      	bne.n	80080c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	3314      	adds	r3, #20
 80080fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008100:	6a3b      	ldr	r3, [r7, #32]
 8008102:	e853 3f00 	ldrex	r3, [r3]
 8008106:	61fb      	str	r3, [r7, #28]
   return(result);
 8008108:	69fb      	ldr	r3, [r7, #28]
 800810a:	f023 0301 	bic.w	r3, r3, #1
 800810e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	3314      	adds	r3, #20
 8008116:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008118:	62fa      	str	r2, [r7, #44]	; 0x2c
 800811a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800811e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008120:	e841 2300 	strex	r3, r2, [r1]
 8008124:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008128:	2b00      	cmp	r3, #0
 800812a:	d1e5      	bne.n	80080f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008130:	2b01      	cmp	r3, #1
 8008132:	d119      	bne.n	8008168 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	330c      	adds	r3, #12
 800813a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	e853 3f00 	ldrex	r3, [r3]
 8008142:	60bb      	str	r3, [r7, #8]
   return(result);
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	f023 0310 	bic.w	r3, r3, #16
 800814a:	647b      	str	r3, [r7, #68]	; 0x44
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	330c      	adds	r3, #12
 8008152:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008154:	61ba      	str	r2, [r7, #24]
 8008156:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008158:	6979      	ldr	r1, [r7, #20]
 800815a:	69ba      	ldr	r2, [r7, #24]
 800815c:	e841 2300 	strex	r3, r2, [r1]
 8008160:	613b      	str	r3, [r7, #16]
   return(result);
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d1e5      	bne.n	8008134 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2220      	movs	r2, #32
 800816c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008176:	bf00      	nop
 8008178:	3754      	adds	r7, #84	; 0x54
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr

08008182 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008182:	b580      	push	{r7, lr}
 8008184:	b084      	sub	sp, #16
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800818e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2200      	movs	r2, #0
 8008194:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2200      	movs	r2, #0
 800819a:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081a4:	bf00      	nop
 80081a6:	3710      	adds	r7, #16
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b085      	sub	sp, #20
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	2b21      	cmp	r3, #33	; 0x21
 80081be:	d13e      	bne.n	800823e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081c8:	d114      	bne.n	80081f4 <UART_Transmit_IT+0x48>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	691b      	ldr	r3, [r3, #16]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d110      	bne.n	80081f4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6a1b      	ldr	r3, [r3, #32]
 80081d6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	881b      	ldrh	r3, [r3, #0]
 80081dc:	461a      	mov	r2, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081e6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6a1b      	ldr	r3, [r3, #32]
 80081ec:	1c9a      	adds	r2, r3, #2
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	621a      	str	r2, [r3, #32]
 80081f2:	e008      	b.n	8008206 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6a1b      	ldr	r3, [r3, #32]
 80081f8:	1c59      	adds	r1, r3, #1
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	6211      	str	r1, [r2, #32]
 80081fe:	781a      	ldrb	r2, [r3, #0]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800820a:	b29b      	uxth	r3, r3
 800820c:	3b01      	subs	r3, #1
 800820e:	b29b      	uxth	r3, r3
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	4619      	mov	r1, r3
 8008214:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008216:	2b00      	cmp	r3, #0
 8008218:	d10f      	bne.n	800823a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	68da      	ldr	r2, [r3, #12]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008228:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	68da      	ldr	r2, [r3, #12]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008238:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800823a:	2300      	movs	r3, #0
 800823c:	e000      	b.n	8008240 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800823e:	2302      	movs	r3, #2
  }
}
 8008240:	4618      	mov	r0, r3
 8008242:	3714      	adds	r7, #20
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	68da      	ldr	r2, [r3, #12]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008262:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2220      	movs	r2, #32
 8008268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3708      	adds	r7, #8
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}

0800827e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b08c      	sub	sp, #48	; 0x30
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800828c:	b2db      	uxtb	r3, r3
 800828e:	2b22      	cmp	r3, #34	; 0x22
 8008290:	f040 80ad 	bne.w	80083ee <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800829c:	d117      	bne.n	80082ce <UART_Receive_IT+0x50>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	691b      	ldr	r3, [r3, #16]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d113      	bne.n	80082ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80082a6:	2300      	movs	r3, #0
 80082a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082bc:	b29a      	uxth	r2, r3
 80082be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c6:	1c9a      	adds	r2, r3, #2
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	629a      	str	r2, [r3, #40]	; 0x28
 80082cc:	e026      	b.n	800831c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80082d4:	2300      	movs	r3, #0
 80082d6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082e0:	d007      	beq.n	80082f2 <UART_Receive_IT+0x74>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d10a      	bne.n	8008300 <UART_Receive_IT+0x82>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	691b      	ldr	r3, [r3, #16]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d106      	bne.n	8008300 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	b2da      	uxtb	r2, r3
 80082fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082fc:	701a      	strb	r2, [r3, #0]
 80082fe:	e008      	b.n	8008312 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	b2db      	uxtb	r3, r3
 8008308:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800830c:	b2da      	uxtb	r2, r3
 800830e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008310:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008316:	1c5a      	adds	r2, r3, #1
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008320:	b29b      	uxth	r3, r3
 8008322:	3b01      	subs	r3, #1
 8008324:	b29b      	uxth	r3, r3
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	4619      	mov	r1, r3
 800832a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800832c:	2b00      	cmp	r3, #0
 800832e:	d15c      	bne.n	80083ea <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	68da      	ldr	r2, [r3, #12]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f022 0220 	bic.w	r2, r2, #32
 800833e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	68da      	ldr	r2, [r3, #12]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800834e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	695a      	ldr	r2, [r3, #20]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f022 0201 	bic.w	r2, r2, #1
 800835e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2220      	movs	r2, #32
 8008364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800836c:	2b01      	cmp	r3, #1
 800836e:	d136      	bne.n	80083de <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	330c      	adds	r3, #12
 800837c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	e853 3f00 	ldrex	r3, [r3]
 8008384:	613b      	str	r3, [r7, #16]
   return(result);
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	f023 0310 	bic.w	r3, r3, #16
 800838c:	627b      	str	r3, [r7, #36]	; 0x24
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	330c      	adds	r3, #12
 8008394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008396:	623a      	str	r2, [r7, #32]
 8008398:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839a:	69f9      	ldr	r1, [r7, #28]
 800839c:	6a3a      	ldr	r2, [r7, #32]
 800839e:	e841 2300 	strex	r3, r2, [r1]
 80083a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80083a4:	69bb      	ldr	r3, [r7, #24]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d1e5      	bne.n	8008376 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f003 0310 	and.w	r3, r3, #16
 80083b4:	2b10      	cmp	r3, #16
 80083b6:	d10a      	bne.n	80083ce <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80083b8:	2300      	movs	r3, #0
 80083ba:	60fb      	str	r3, [r7, #12]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	60fb      	str	r3, [r7, #12]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	60fb      	str	r3, [r7, #12]
 80083cc:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80083d6:	4611      	mov	r1, r2
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	4798      	blx	r3
 80083dc:	e003      	b.n	80083e6 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80083e6:	2300      	movs	r3, #0
 80083e8:	e002      	b.n	80083f0 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 80083ea:	2300      	movs	r3, #0
 80083ec:	e000      	b.n	80083f0 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 80083ee:	2302      	movs	r3, #2
  }
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3730      	adds	r7, #48	; 0x30
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083fc:	b0c0      	sub	sp, #256	; 0x100
 80083fe:	af00      	add	r7, sp, #0
 8008400:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	691b      	ldr	r3, [r3, #16]
 800840c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008414:	68d9      	ldr	r1, [r3, #12]
 8008416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	ea40 0301 	orr.w	r3, r0, r1
 8008420:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008426:	689a      	ldr	r2, [r3, #8]
 8008428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	431a      	orrs	r2, r3
 8008430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008434:	695b      	ldr	r3, [r3, #20]
 8008436:	431a      	orrs	r2, r3
 8008438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800843c:	69db      	ldr	r3, [r3, #28]
 800843e:	4313      	orrs	r3, r2
 8008440:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008450:	f021 010c 	bic.w	r1, r1, #12
 8008454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800845e:	430b      	orrs	r3, r1
 8008460:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	695b      	ldr	r3, [r3, #20]
 800846a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800846e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008472:	6999      	ldr	r1, [r3, #24]
 8008474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	ea40 0301 	orr.w	r3, r0, r1
 800847e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	4b8f      	ldr	r3, [pc, #572]	; (80086c4 <UART_SetConfig+0x2cc>)
 8008488:	429a      	cmp	r2, r3
 800848a:	d005      	beq.n	8008498 <UART_SetConfig+0xa0>
 800848c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	4b8d      	ldr	r3, [pc, #564]	; (80086c8 <UART_SetConfig+0x2d0>)
 8008494:	429a      	cmp	r2, r3
 8008496:	d104      	bne.n	80084a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008498:	f7fd fe2c 	bl	80060f4 <HAL_RCC_GetPCLK2Freq>
 800849c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80084a0:	e003      	b.n	80084aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80084a2:	f7fd fe13 	bl	80060cc <HAL_RCC_GetPCLK1Freq>
 80084a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084ae:	69db      	ldr	r3, [r3, #28]
 80084b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084b4:	f040 810c 	bne.w	80086d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80084b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084bc:	2200      	movs	r2, #0
 80084be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80084c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80084c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80084ca:	4622      	mov	r2, r4
 80084cc:	462b      	mov	r3, r5
 80084ce:	1891      	adds	r1, r2, r2
 80084d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80084d2:	415b      	adcs	r3, r3
 80084d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80084d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80084da:	4621      	mov	r1, r4
 80084dc:	eb12 0801 	adds.w	r8, r2, r1
 80084e0:	4629      	mov	r1, r5
 80084e2:	eb43 0901 	adc.w	r9, r3, r1
 80084e6:	f04f 0200 	mov.w	r2, #0
 80084ea:	f04f 0300 	mov.w	r3, #0
 80084ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80084f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80084f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80084fa:	4690      	mov	r8, r2
 80084fc:	4699      	mov	r9, r3
 80084fe:	4623      	mov	r3, r4
 8008500:	eb18 0303 	adds.w	r3, r8, r3
 8008504:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008508:	462b      	mov	r3, r5
 800850a:	eb49 0303 	adc.w	r3, r9, r3
 800850e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800851e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008522:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008526:	460b      	mov	r3, r1
 8008528:	18db      	adds	r3, r3, r3
 800852a:	653b      	str	r3, [r7, #80]	; 0x50
 800852c:	4613      	mov	r3, r2
 800852e:	eb42 0303 	adc.w	r3, r2, r3
 8008532:	657b      	str	r3, [r7, #84]	; 0x54
 8008534:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008538:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800853c:	f7f8 fb84 	bl	8000c48 <__aeabi_uldivmod>
 8008540:	4602      	mov	r2, r0
 8008542:	460b      	mov	r3, r1
 8008544:	4b61      	ldr	r3, [pc, #388]	; (80086cc <UART_SetConfig+0x2d4>)
 8008546:	fba3 2302 	umull	r2, r3, r3, r2
 800854a:	095b      	lsrs	r3, r3, #5
 800854c:	011c      	lsls	r4, r3, #4
 800854e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008552:	2200      	movs	r2, #0
 8008554:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008558:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800855c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008560:	4642      	mov	r2, r8
 8008562:	464b      	mov	r3, r9
 8008564:	1891      	adds	r1, r2, r2
 8008566:	64b9      	str	r1, [r7, #72]	; 0x48
 8008568:	415b      	adcs	r3, r3
 800856a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800856c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008570:	4641      	mov	r1, r8
 8008572:	eb12 0a01 	adds.w	sl, r2, r1
 8008576:	4649      	mov	r1, r9
 8008578:	eb43 0b01 	adc.w	fp, r3, r1
 800857c:	f04f 0200 	mov.w	r2, #0
 8008580:	f04f 0300 	mov.w	r3, #0
 8008584:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008588:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800858c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008590:	4692      	mov	sl, r2
 8008592:	469b      	mov	fp, r3
 8008594:	4643      	mov	r3, r8
 8008596:	eb1a 0303 	adds.w	r3, sl, r3
 800859a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800859e:	464b      	mov	r3, r9
 80085a0:	eb4b 0303 	adc.w	r3, fp, r3
 80085a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80085a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80085b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80085b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80085bc:	460b      	mov	r3, r1
 80085be:	18db      	adds	r3, r3, r3
 80085c0:	643b      	str	r3, [r7, #64]	; 0x40
 80085c2:	4613      	mov	r3, r2
 80085c4:	eb42 0303 	adc.w	r3, r2, r3
 80085c8:	647b      	str	r3, [r7, #68]	; 0x44
 80085ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80085ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80085d2:	f7f8 fb39 	bl	8000c48 <__aeabi_uldivmod>
 80085d6:	4602      	mov	r2, r0
 80085d8:	460b      	mov	r3, r1
 80085da:	4611      	mov	r1, r2
 80085dc:	4b3b      	ldr	r3, [pc, #236]	; (80086cc <UART_SetConfig+0x2d4>)
 80085de:	fba3 2301 	umull	r2, r3, r3, r1
 80085e2:	095b      	lsrs	r3, r3, #5
 80085e4:	2264      	movs	r2, #100	; 0x64
 80085e6:	fb02 f303 	mul.w	r3, r2, r3
 80085ea:	1acb      	subs	r3, r1, r3
 80085ec:	00db      	lsls	r3, r3, #3
 80085ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80085f2:	4b36      	ldr	r3, [pc, #216]	; (80086cc <UART_SetConfig+0x2d4>)
 80085f4:	fba3 2302 	umull	r2, r3, r3, r2
 80085f8:	095b      	lsrs	r3, r3, #5
 80085fa:	005b      	lsls	r3, r3, #1
 80085fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008600:	441c      	add	r4, r3
 8008602:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008606:	2200      	movs	r2, #0
 8008608:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800860c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008610:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008614:	4642      	mov	r2, r8
 8008616:	464b      	mov	r3, r9
 8008618:	1891      	adds	r1, r2, r2
 800861a:	63b9      	str	r1, [r7, #56]	; 0x38
 800861c:	415b      	adcs	r3, r3
 800861e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008620:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008624:	4641      	mov	r1, r8
 8008626:	1851      	adds	r1, r2, r1
 8008628:	6339      	str	r1, [r7, #48]	; 0x30
 800862a:	4649      	mov	r1, r9
 800862c:	414b      	adcs	r3, r1
 800862e:	637b      	str	r3, [r7, #52]	; 0x34
 8008630:	f04f 0200 	mov.w	r2, #0
 8008634:	f04f 0300 	mov.w	r3, #0
 8008638:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800863c:	4659      	mov	r1, fp
 800863e:	00cb      	lsls	r3, r1, #3
 8008640:	4651      	mov	r1, sl
 8008642:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008646:	4651      	mov	r1, sl
 8008648:	00ca      	lsls	r2, r1, #3
 800864a:	4610      	mov	r0, r2
 800864c:	4619      	mov	r1, r3
 800864e:	4603      	mov	r3, r0
 8008650:	4642      	mov	r2, r8
 8008652:	189b      	adds	r3, r3, r2
 8008654:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008658:	464b      	mov	r3, r9
 800865a:	460a      	mov	r2, r1
 800865c:	eb42 0303 	adc.w	r3, r2, r3
 8008660:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008670:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008674:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008678:	460b      	mov	r3, r1
 800867a:	18db      	adds	r3, r3, r3
 800867c:	62bb      	str	r3, [r7, #40]	; 0x28
 800867e:	4613      	mov	r3, r2
 8008680:	eb42 0303 	adc.w	r3, r2, r3
 8008684:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008686:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800868a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800868e:	f7f8 fadb 	bl	8000c48 <__aeabi_uldivmod>
 8008692:	4602      	mov	r2, r0
 8008694:	460b      	mov	r3, r1
 8008696:	4b0d      	ldr	r3, [pc, #52]	; (80086cc <UART_SetConfig+0x2d4>)
 8008698:	fba3 1302 	umull	r1, r3, r3, r2
 800869c:	095b      	lsrs	r3, r3, #5
 800869e:	2164      	movs	r1, #100	; 0x64
 80086a0:	fb01 f303 	mul.w	r3, r1, r3
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	00db      	lsls	r3, r3, #3
 80086a8:	3332      	adds	r3, #50	; 0x32
 80086aa:	4a08      	ldr	r2, [pc, #32]	; (80086cc <UART_SetConfig+0x2d4>)
 80086ac:	fba2 2303 	umull	r2, r3, r2, r3
 80086b0:	095b      	lsrs	r3, r3, #5
 80086b2:	f003 0207 	and.w	r2, r3, #7
 80086b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4422      	add	r2, r4
 80086be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80086c0:	e105      	b.n	80088ce <UART_SetConfig+0x4d6>
 80086c2:	bf00      	nop
 80086c4:	40011000 	.word	0x40011000
 80086c8:	40011400 	.word	0x40011400
 80086cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80086d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086d4:	2200      	movs	r2, #0
 80086d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80086da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80086de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80086e2:	4642      	mov	r2, r8
 80086e4:	464b      	mov	r3, r9
 80086e6:	1891      	adds	r1, r2, r2
 80086e8:	6239      	str	r1, [r7, #32]
 80086ea:	415b      	adcs	r3, r3
 80086ec:	627b      	str	r3, [r7, #36]	; 0x24
 80086ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80086f2:	4641      	mov	r1, r8
 80086f4:	1854      	adds	r4, r2, r1
 80086f6:	4649      	mov	r1, r9
 80086f8:	eb43 0501 	adc.w	r5, r3, r1
 80086fc:	f04f 0200 	mov.w	r2, #0
 8008700:	f04f 0300 	mov.w	r3, #0
 8008704:	00eb      	lsls	r3, r5, #3
 8008706:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800870a:	00e2      	lsls	r2, r4, #3
 800870c:	4614      	mov	r4, r2
 800870e:	461d      	mov	r5, r3
 8008710:	4643      	mov	r3, r8
 8008712:	18e3      	adds	r3, r4, r3
 8008714:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008718:	464b      	mov	r3, r9
 800871a:	eb45 0303 	adc.w	r3, r5, r3
 800871e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800872e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008732:	f04f 0200 	mov.w	r2, #0
 8008736:	f04f 0300 	mov.w	r3, #0
 800873a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800873e:	4629      	mov	r1, r5
 8008740:	008b      	lsls	r3, r1, #2
 8008742:	4621      	mov	r1, r4
 8008744:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008748:	4621      	mov	r1, r4
 800874a:	008a      	lsls	r2, r1, #2
 800874c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008750:	f7f8 fa7a 	bl	8000c48 <__aeabi_uldivmod>
 8008754:	4602      	mov	r2, r0
 8008756:	460b      	mov	r3, r1
 8008758:	4b60      	ldr	r3, [pc, #384]	; (80088dc <UART_SetConfig+0x4e4>)
 800875a:	fba3 2302 	umull	r2, r3, r3, r2
 800875e:	095b      	lsrs	r3, r3, #5
 8008760:	011c      	lsls	r4, r3, #4
 8008762:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008766:	2200      	movs	r2, #0
 8008768:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800876c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008770:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008774:	4642      	mov	r2, r8
 8008776:	464b      	mov	r3, r9
 8008778:	1891      	adds	r1, r2, r2
 800877a:	61b9      	str	r1, [r7, #24]
 800877c:	415b      	adcs	r3, r3
 800877e:	61fb      	str	r3, [r7, #28]
 8008780:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008784:	4641      	mov	r1, r8
 8008786:	1851      	adds	r1, r2, r1
 8008788:	6139      	str	r1, [r7, #16]
 800878a:	4649      	mov	r1, r9
 800878c:	414b      	adcs	r3, r1
 800878e:	617b      	str	r3, [r7, #20]
 8008790:	f04f 0200 	mov.w	r2, #0
 8008794:	f04f 0300 	mov.w	r3, #0
 8008798:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800879c:	4659      	mov	r1, fp
 800879e:	00cb      	lsls	r3, r1, #3
 80087a0:	4651      	mov	r1, sl
 80087a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80087a6:	4651      	mov	r1, sl
 80087a8:	00ca      	lsls	r2, r1, #3
 80087aa:	4610      	mov	r0, r2
 80087ac:	4619      	mov	r1, r3
 80087ae:	4603      	mov	r3, r0
 80087b0:	4642      	mov	r2, r8
 80087b2:	189b      	adds	r3, r3, r2
 80087b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80087b8:	464b      	mov	r3, r9
 80087ba:	460a      	mov	r2, r1
 80087bc:	eb42 0303 	adc.w	r3, r2, r3
 80087c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80087c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80087ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80087d0:	f04f 0200 	mov.w	r2, #0
 80087d4:	f04f 0300 	mov.w	r3, #0
 80087d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80087dc:	4649      	mov	r1, r9
 80087de:	008b      	lsls	r3, r1, #2
 80087e0:	4641      	mov	r1, r8
 80087e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087e6:	4641      	mov	r1, r8
 80087e8:	008a      	lsls	r2, r1, #2
 80087ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80087ee:	f7f8 fa2b 	bl	8000c48 <__aeabi_uldivmod>
 80087f2:	4602      	mov	r2, r0
 80087f4:	460b      	mov	r3, r1
 80087f6:	4b39      	ldr	r3, [pc, #228]	; (80088dc <UART_SetConfig+0x4e4>)
 80087f8:	fba3 1302 	umull	r1, r3, r3, r2
 80087fc:	095b      	lsrs	r3, r3, #5
 80087fe:	2164      	movs	r1, #100	; 0x64
 8008800:	fb01 f303 	mul.w	r3, r1, r3
 8008804:	1ad3      	subs	r3, r2, r3
 8008806:	011b      	lsls	r3, r3, #4
 8008808:	3332      	adds	r3, #50	; 0x32
 800880a:	4a34      	ldr	r2, [pc, #208]	; (80088dc <UART_SetConfig+0x4e4>)
 800880c:	fba2 2303 	umull	r2, r3, r2, r3
 8008810:	095b      	lsrs	r3, r3, #5
 8008812:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008816:	441c      	add	r4, r3
 8008818:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800881c:	2200      	movs	r2, #0
 800881e:	673b      	str	r3, [r7, #112]	; 0x70
 8008820:	677a      	str	r2, [r7, #116]	; 0x74
 8008822:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008826:	4642      	mov	r2, r8
 8008828:	464b      	mov	r3, r9
 800882a:	1891      	adds	r1, r2, r2
 800882c:	60b9      	str	r1, [r7, #8]
 800882e:	415b      	adcs	r3, r3
 8008830:	60fb      	str	r3, [r7, #12]
 8008832:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008836:	4641      	mov	r1, r8
 8008838:	1851      	adds	r1, r2, r1
 800883a:	6039      	str	r1, [r7, #0]
 800883c:	4649      	mov	r1, r9
 800883e:	414b      	adcs	r3, r1
 8008840:	607b      	str	r3, [r7, #4]
 8008842:	f04f 0200 	mov.w	r2, #0
 8008846:	f04f 0300 	mov.w	r3, #0
 800884a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800884e:	4659      	mov	r1, fp
 8008850:	00cb      	lsls	r3, r1, #3
 8008852:	4651      	mov	r1, sl
 8008854:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008858:	4651      	mov	r1, sl
 800885a:	00ca      	lsls	r2, r1, #3
 800885c:	4610      	mov	r0, r2
 800885e:	4619      	mov	r1, r3
 8008860:	4603      	mov	r3, r0
 8008862:	4642      	mov	r2, r8
 8008864:	189b      	adds	r3, r3, r2
 8008866:	66bb      	str	r3, [r7, #104]	; 0x68
 8008868:	464b      	mov	r3, r9
 800886a:	460a      	mov	r2, r1
 800886c:	eb42 0303 	adc.w	r3, r2, r3
 8008870:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	663b      	str	r3, [r7, #96]	; 0x60
 800887c:	667a      	str	r2, [r7, #100]	; 0x64
 800887e:	f04f 0200 	mov.w	r2, #0
 8008882:	f04f 0300 	mov.w	r3, #0
 8008886:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800888a:	4649      	mov	r1, r9
 800888c:	008b      	lsls	r3, r1, #2
 800888e:	4641      	mov	r1, r8
 8008890:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008894:	4641      	mov	r1, r8
 8008896:	008a      	lsls	r2, r1, #2
 8008898:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800889c:	f7f8 f9d4 	bl	8000c48 <__aeabi_uldivmod>
 80088a0:	4602      	mov	r2, r0
 80088a2:	460b      	mov	r3, r1
 80088a4:	4b0d      	ldr	r3, [pc, #52]	; (80088dc <UART_SetConfig+0x4e4>)
 80088a6:	fba3 1302 	umull	r1, r3, r3, r2
 80088aa:	095b      	lsrs	r3, r3, #5
 80088ac:	2164      	movs	r1, #100	; 0x64
 80088ae:	fb01 f303 	mul.w	r3, r1, r3
 80088b2:	1ad3      	subs	r3, r2, r3
 80088b4:	011b      	lsls	r3, r3, #4
 80088b6:	3332      	adds	r3, #50	; 0x32
 80088b8:	4a08      	ldr	r2, [pc, #32]	; (80088dc <UART_SetConfig+0x4e4>)
 80088ba:	fba2 2303 	umull	r2, r3, r2, r3
 80088be:	095b      	lsrs	r3, r3, #5
 80088c0:	f003 020f 	and.w	r2, r3, #15
 80088c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4422      	add	r2, r4
 80088cc:	609a      	str	r2, [r3, #8]
}
 80088ce:	bf00      	nop
 80088d0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80088d4:	46bd      	mov	sp, r7
 80088d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088da:	bf00      	nop
 80088dc:	51eb851f 	.word	0x51eb851f

080088e0 <__NVIC_SetPriority>:
{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	4603      	mov	r3, r0
 80088e8:	6039      	str	r1, [r7, #0]
 80088ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80088ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	db0a      	blt.n	800890a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	b2da      	uxtb	r2, r3
 80088f8:	490c      	ldr	r1, [pc, #48]	; (800892c <__NVIC_SetPriority+0x4c>)
 80088fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088fe:	0112      	lsls	r2, r2, #4
 8008900:	b2d2      	uxtb	r2, r2
 8008902:	440b      	add	r3, r1
 8008904:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008908:	e00a      	b.n	8008920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	b2da      	uxtb	r2, r3
 800890e:	4908      	ldr	r1, [pc, #32]	; (8008930 <__NVIC_SetPriority+0x50>)
 8008910:	79fb      	ldrb	r3, [r7, #7]
 8008912:	f003 030f 	and.w	r3, r3, #15
 8008916:	3b04      	subs	r3, #4
 8008918:	0112      	lsls	r2, r2, #4
 800891a:	b2d2      	uxtb	r2, r2
 800891c:	440b      	add	r3, r1
 800891e:	761a      	strb	r2, [r3, #24]
}
 8008920:	bf00      	nop
 8008922:	370c      	adds	r7, #12
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr
 800892c:	e000e100 	.word	0xe000e100
 8008930:	e000ed00 	.word	0xe000ed00

08008934 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008934:	b580      	push	{r7, lr}
 8008936:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008938:	4b05      	ldr	r3, [pc, #20]	; (8008950 <SysTick_Handler+0x1c>)
 800893a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800893c:	f001 ff16 	bl	800a76c <xTaskGetSchedulerState>
 8008940:	4603      	mov	r3, r0
 8008942:	2b01      	cmp	r3, #1
 8008944:	d001      	beq.n	800894a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008946:	f002 fcff 	bl	800b348 <xPortSysTickHandler>
  }
}
 800894a:	bf00      	nop
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	e000e010 	.word	0xe000e010

08008954 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008954:	b580      	push	{r7, lr}
 8008956:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008958:	2100      	movs	r1, #0
 800895a:	f06f 0004 	mvn.w	r0, #4
 800895e:	f7ff ffbf 	bl	80088e0 <__NVIC_SetPriority>
#endif
}
 8008962:	bf00      	nop
 8008964:	bd80      	pop	{r7, pc}
	...

08008968 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008968:	b480      	push	{r7}
 800896a:	b083      	sub	sp, #12
 800896c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800896e:	f3ef 8305 	mrs	r3, IPSR
 8008972:	603b      	str	r3, [r7, #0]
  return(result);
 8008974:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008976:	2b00      	cmp	r3, #0
 8008978:	d003      	beq.n	8008982 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800897a:	f06f 0305 	mvn.w	r3, #5
 800897e:	607b      	str	r3, [r7, #4]
 8008980:	e00c      	b.n	800899c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008982:	4b0a      	ldr	r3, [pc, #40]	; (80089ac <osKernelInitialize+0x44>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d105      	bne.n	8008996 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800898a:	4b08      	ldr	r3, [pc, #32]	; (80089ac <osKernelInitialize+0x44>)
 800898c:	2201      	movs	r2, #1
 800898e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008990:	2300      	movs	r3, #0
 8008992:	607b      	str	r3, [r7, #4]
 8008994:	e002      	b.n	800899c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008996:	f04f 33ff 	mov.w	r3, #4294967295
 800899a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800899c:	687b      	ldr	r3, [r7, #4]
}
 800899e:	4618      	mov	r0, r3
 80089a0:	370c      	adds	r7, #12
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr
 80089aa:	bf00      	nop
 80089ac:	20000624 	.word	0x20000624

080089b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b082      	sub	sp, #8
 80089b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089b6:	f3ef 8305 	mrs	r3, IPSR
 80089ba:	603b      	str	r3, [r7, #0]
  return(result);
 80089bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d003      	beq.n	80089ca <osKernelStart+0x1a>
    stat = osErrorISR;
 80089c2:	f06f 0305 	mvn.w	r3, #5
 80089c6:	607b      	str	r3, [r7, #4]
 80089c8:	e010      	b.n	80089ec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80089ca:	4b0b      	ldr	r3, [pc, #44]	; (80089f8 <osKernelStart+0x48>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d109      	bne.n	80089e6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80089d2:	f7ff ffbf 	bl	8008954 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80089d6:	4b08      	ldr	r3, [pc, #32]	; (80089f8 <osKernelStart+0x48>)
 80089d8:	2202      	movs	r2, #2
 80089da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80089dc:	f001 faa2 	bl	8009f24 <vTaskStartScheduler>
      stat = osOK;
 80089e0:	2300      	movs	r3, #0
 80089e2:	607b      	str	r3, [r7, #4]
 80089e4:	e002      	b.n	80089ec <osKernelStart+0x3c>
    } else {
      stat = osError;
 80089e6:	f04f 33ff 	mov.w	r3, #4294967295
 80089ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80089ec:	687b      	ldr	r3, [r7, #4]
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3708      	adds	r7, #8
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	bf00      	nop
 80089f8:	20000624 	.word	0x20000624

080089fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b08e      	sub	sp, #56	; 0x38
 8008a00:	af04      	add	r7, sp, #16
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	60b9      	str	r1, [r7, #8]
 8008a06:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a0c:	f3ef 8305 	mrs	r3, IPSR
 8008a10:	617b      	str	r3, [r7, #20]
  return(result);
 8008a12:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d17f      	bne.n	8008b18 <osThreadNew+0x11c>
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d07c      	beq.n	8008b18 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8008a1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a22:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008a24:	2318      	movs	r3, #24
 8008a26:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8008a30:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d045      	beq.n	8008ac4 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d002      	beq.n	8008a46 <osThreadNew+0x4a>
        name = attr->name;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	699b      	ldr	r3, [r3, #24]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d002      	beq.n	8008a54 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	699b      	ldr	r3, [r3, #24]
 8008a52:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d008      	beq.n	8008a6c <osThreadNew+0x70>
 8008a5a:	69fb      	ldr	r3, [r7, #28]
 8008a5c:	2b38      	cmp	r3, #56	; 0x38
 8008a5e:	d805      	bhi.n	8008a6c <osThreadNew+0x70>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	f003 0301 	and.w	r3, r3, #1
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d001      	beq.n	8008a70 <osThreadNew+0x74>
        return (NULL);
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	e054      	b.n	8008b1a <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	695b      	ldr	r3, [r3, #20]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d003      	beq.n	8008a80 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	695b      	ldr	r3, [r3, #20]
 8008a7c:	089b      	lsrs	r3, r3, #2
 8008a7e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d00e      	beq.n	8008aa6 <osThreadNew+0xaa>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	68db      	ldr	r3, [r3, #12]
 8008a8c:	2bbb      	cmp	r3, #187	; 0xbb
 8008a8e:	d90a      	bls.n	8008aa6 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d006      	beq.n	8008aa6 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	695b      	ldr	r3, [r3, #20]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d002      	beq.n	8008aa6 <osThreadNew+0xaa>
        mem = 1;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	61bb      	str	r3, [r7, #24]
 8008aa4:	e010      	b.n	8008ac8 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d10c      	bne.n	8008ac8 <osThreadNew+0xcc>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d108      	bne.n	8008ac8 <osThreadNew+0xcc>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	691b      	ldr	r3, [r3, #16]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d104      	bne.n	8008ac8 <osThreadNew+0xcc>
          mem = 0;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	61bb      	str	r3, [r7, #24]
 8008ac2:	e001      	b.n	8008ac8 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008ac8:	69bb      	ldr	r3, [r7, #24]
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d110      	bne.n	8008af0 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008ad6:	9202      	str	r2, [sp, #8]
 8008ad8:	9301      	str	r3, [sp, #4]
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	9300      	str	r3, [sp, #0]
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	6a3a      	ldr	r2, [r7, #32]
 8008ae2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f001 f841 	bl	8009b6c <xTaskCreateStatic>
 8008aea:	4603      	mov	r3, r0
 8008aec:	613b      	str	r3, [r7, #16]
 8008aee:	e013      	b.n	8008b18 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8008af0:	69bb      	ldr	r3, [r7, #24]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d110      	bne.n	8008b18 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008af6:	6a3b      	ldr	r3, [r7, #32]
 8008af8:	b29a      	uxth	r2, r3
 8008afa:	f107 0310 	add.w	r3, r7, #16
 8008afe:	9301      	str	r3, [sp, #4]
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	9300      	str	r3, [sp, #0]
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f001 f88c 	bl	8009c26 <xTaskCreate>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d001      	beq.n	8008b18 <osThreadNew+0x11c>
            hTask = NULL;
 8008b14:	2300      	movs	r3, #0
 8008b16:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008b18:	693b      	ldr	r3, [r7, #16]
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3728      	adds	r7, #40	; 0x28
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
	...

08008b24 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8008b24:	b480      	push	{r7}
 8008b26:	b083      	sub	sp, #12
 8008b28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b2a:	f3ef 8305 	mrs	r3, IPSR
 8008b2e:	603b      	str	r3, [r7, #0]
  return(result);
 8008b30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d003      	beq.n	8008b3e <osThreadYield+0x1a>
    stat = osErrorISR;
 8008b36:	f06f 0305 	mvn.w	r3, #5
 8008b3a:	607b      	str	r3, [r7, #4]
 8008b3c:	e009      	b.n	8008b52 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8008b42:	4b07      	ldr	r3, [pc, #28]	; (8008b60 <osThreadYield+0x3c>)
 8008b44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b48:	601a      	str	r2, [r3, #0]
 8008b4a:	f3bf 8f4f 	dsb	sy
 8008b4e:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8008b52:	687b      	ldr	r3, [r7, #4]
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	370c      	adds	r7, #12
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr
 8008b60:	e000ed04 	.word	0xe000ed04

08008b64 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b6c:	f3ef 8305 	mrs	r3, IPSR
 8008b70:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b72:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d003      	beq.n	8008b80 <osDelay+0x1c>
    stat = osErrorISR;
 8008b78:	f06f 0305 	mvn.w	r3, #5
 8008b7c:	60fb      	str	r3, [r7, #12]
 8008b7e:	e007      	b.n	8008b90 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008b80:	2300      	movs	r3, #0
 8008b82:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d002      	beq.n	8008b90 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f001 f996 	bl	8009ebc <vTaskDelay>
    }
  }

  return (stat);
 8008b90:	68fb      	ldr	r3, [r7, #12]
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3710      	adds	r7, #16
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b08a      	sub	sp, #40	; 0x28
 8008b9e:	af02      	add	r7, sp, #8
 8008ba0:	60f8      	str	r0, [r7, #12]
 8008ba2:	60b9      	str	r1, [r7, #8]
 8008ba4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008baa:	f3ef 8305 	mrs	r3, IPSR
 8008bae:	613b      	str	r3, [r7, #16]
  return(result);
 8008bb0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d15f      	bne.n	8008c76 <osMessageQueueNew+0xdc>
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d05c      	beq.n	8008c76 <osMessageQueueNew+0xdc>
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d059      	beq.n	8008c76 <osMessageQueueNew+0xdc>
    mem = -1;
 8008bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8008bc6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d029      	beq.n	8008c22 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d012      	beq.n	8008bfc <osMessageQueueNew+0x62>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	68db      	ldr	r3, [r3, #12]
 8008bda:	2b4f      	cmp	r3, #79	; 0x4f
 8008bdc:	d90e      	bls.n	8008bfc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d00a      	beq.n	8008bfc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	695a      	ldr	r2, [r3, #20]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	68b9      	ldr	r1, [r7, #8]
 8008bee:	fb01 f303 	mul.w	r3, r1, r3
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d302      	bcc.n	8008bfc <osMessageQueueNew+0x62>
        mem = 1;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	61bb      	str	r3, [r7, #24]
 8008bfa:	e014      	b.n	8008c26 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	689b      	ldr	r3, [r3, #8]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d110      	bne.n	8008c26 <osMessageQueueNew+0x8c>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d10c      	bne.n	8008c26 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d108      	bne.n	8008c26 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	695b      	ldr	r3, [r3, #20]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d104      	bne.n	8008c26 <osMessageQueueNew+0x8c>
          mem = 0;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	61bb      	str	r3, [r7, #24]
 8008c20:	e001      	b.n	8008c26 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008c22:	2300      	movs	r3, #0
 8008c24:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d10b      	bne.n	8008c44 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	691a      	ldr	r2, [r3, #16]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	2100      	movs	r1, #0
 8008c36:	9100      	str	r1, [sp, #0]
 8008c38:	68b9      	ldr	r1, [r7, #8]
 8008c3a:	68f8      	ldr	r0, [r7, #12]
 8008c3c:	f000 fa41 	bl	80090c2 <xQueueGenericCreateStatic>
 8008c40:	61f8      	str	r0, [r7, #28]
 8008c42:	e008      	b.n	8008c56 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008c44:	69bb      	ldr	r3, [r7, #24]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d105      	bne.n	8008c56 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	68b9      	ldr	r1, [r7, #8]
 8008c4e:	68f8      	ldr	r0, [r7, #12]
 8008c50:	f000 faaf 	bl	80091b2 <xQueueGenericCreate>
 8008c54:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008c56:	69fb      	ldr	r3, [r7, #28]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d00c      	beq.n	8008c76 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d003      	beq.n	8008c6a <osMessageQueueNew+0xd0>
        name = attr->name;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	617b      	str	r3, [r7, #20]
 8008c68:	e001      	b.n	8008c6e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008c6e:	6979      	ldr	r1, [r7, #20]
 8008c70:	69f8      	ldr	r0, [r7, #28]
 8008c72:	f000 ff1d 	bl	8009ab0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008c76:	69fb      	ldr	r3, [r7, #28]
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3720      	adds	r7, #32
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b088      	sub	sp, #32
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	603b      	str	r3, [r7, #0]
 8008c8c:	4613      	mov	r3, r2
 8008c8e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008c94:	2300      	movs	r3, #0
 8008c96:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c98:	f3ef 8305 	mrs	r3, IPSR
 8008c9c:	617b      	str	r3, [r7, #20]
  return(result);
 8008c9e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d028      	beq.n	8008cf6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008ca4:	69bb      	ldr	r3, [r7, #24]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d005      	beq.n	8008cb6 <osMessageQueuePut+0x36>
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d002      	beq.n	8008cb6 <osMessageQueuePut+0x36>
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d003      	beq.n	8008cbe <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008cb6:	f06f 0303 	mvn.w	r3, #3
 8008cba:	61fb      	str	r3, [r7, #28]
 8008cbc:	e038      	b.n	8008d30 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008cc2:	f107 0210 	add.w	r2, r7, #16
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	68b9      	ldr	r1, [r7, #8]
 8008cca:	69b8      	ldr	r0, [r7, #24]
 8008ccc:	f000 fbb4 	bl	8009438 <xQueueGenericSendFromISR>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d003      	beq.n	8008cde <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008cd6:	f06f 0302 	mvn.w	r3, #2
 8008cda:	61fb      	str	r3, [r7, #28]
 8008cdc:	e028      	b.n	8008d30 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d025      	beq.n	8008d30 <osMessageQueuePut+0xb0>
 8008ce4:	4b15      	ldr	r3, [pc, #84]	; (8008d3c <osMessageQueuePut+0xbc>)
 8008ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cea:	601a      	str	r2, [r3, #0]
 8008cec:	f3bf 8f4f 	dsb	sy
 8008cf0:	f3bf 8f6f 	isb	sy
 8008cf4:	e01c      	b.n	8008d30 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008cf6:	69bb      	ldr	r3, [r7, #24]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d002      	beq.n	8008d02 <osMessageQueuePut+0x82>
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d103      	bne.n	8008d0a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008d02:	f06f 0303 	mvn.w	r3, #3
 8008d06:	61fb      	str	r3, [r7, #28]
 8008d08:	e012      	b.n	8008d30 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	683a      	ldr	r2, [r7, #0]
 8008d0e:	68b9      	ldr	r1, [r7, #8]
 8008d10:	69b8      	ldr	r0, [r7, #24]
 8008d12:	f000 faab 	bl	800926c <xQueueGenericSend>
 8008d16:	4603      	mov	r3, r0
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d009      	beq.n	8008d30 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d003      	beq.n	8008d2a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008d22:	f06f 0301 	mvn.w	r3, #1
 8008d26:	61fb      	str	r3, [r7, #28]
 8008d28:	e002      	b.n	8008d30 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008d2a:	f06f 0302 	mvn.w	r3, #2
 8008d2e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008d30:	69fb      	ldr	r3, [r7, #28]
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3720      	adds	r7, #32
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	e000ed04 	.word	0xe000ed04

08008d40 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b088      	sub	sp, #32
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	607a      	str	r2, [r7, #4]
 8008d4c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008d52:	2300      	movs	r3, #0
 8008d54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d56:	f3ef 8305 	mrs	r3, IPSR
 8008d5a:	617b      	str	r3, [r7, #20]
  return(result);
 8008d5c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d028      	beq.n	8008db4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d005      	beq.n	8008d74 <osMessageQueueGet+0x34>
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d002      	beq.n	8008d74 <osMessageQueueGet+0x34>
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d003      	beq.n	8008d7c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008d74:	f06f 0303 	mvn.w	r3, #3
 8008d78:	61fb      	str	r3, [r7, #28]
 8008d7a:	e037      	b.n	8008dec <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008d80:	f107 0310 	add.w	r3, r7, #16
 8008d84:	461a      	mov	r2, r3
 8008d86:	68b9      	ldr	r1, [r7, #8]
 8008d88:	69b8      	ldr	r0, [r7, #24]
 8008d8a:	f000 fcc5 	bl	8009718 <xQueueReceiveFromISR>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d003      	beq.n	8008d9c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008d94:	f06f 0302 	mvn.w	r3, #2
 8008d98:	61fb      	str	r3, [r7, #28]
 8008d9a:	e027      	b.n	8008dec <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d024      	beq.n	8008dec <osMessageQueueGet+0xac>
 8008da2:	4b15      	ldr	r3, [pc, #84]	; (8008df8 <osMessageQueueGet+0xb8>)
 8008da4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008da8:	601a      	str	r2, [r3, #0]
 8008daa:	f3bf 8f4f 	dsb	sy
 8008dae:	f3bf 8f6f 	isb	sy
 8008db2:	e01b      	b.n	8008dec <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008db4:	69bb      	ldr	r3, [r7, #24]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d002      	beq.n	8008dc0 <osMessageQueueGet+0x80>
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d103      	bne.n	8008dc8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008dc0:	f06f 0303 	mvn.w	r3, #3
 8008dc4:	61fb      	str	r3, [r7, #28]
 8008dc6:	e011      	b.n	8008dec <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008dc8:	683a      	ldr	r2, [r7, #0]
 8008dca:	68b9      	ldr	r1, [r7, #8]
 8008dcc:	69b8      	ldr	r0, [r7, #24]
 8008dce:	f000 fbcf 	bl	8009570 <xQueueReceive>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d009      	beq.n	8008dec <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d003      	beq.n	8008de6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008dde:	f06f 0301 	mvn.w	r3, #1
 8008de2:	61fb      	str	r3, [r7, #28]
 8008de4:	e002      	b.n	8008dec <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008de6:	f06f 0302 	mvn.w	r3, #2
 8008dea:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008dec:	69fb      	ldr	r3, [r7, #28]
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3720      	adds	r7, #32
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	e000ed04 	.word	0xe000ed04

08008dfc <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b086      	sub	sp, #24
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d102      	bne.n	8008e14 <osMessageQueueGetCount+0x18>
    count = 0U;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	617b      	str	r3, [r7, #20]
 8008e12:	e00e      	b.n	8008e32 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e14:	f3ef 8305 	mrs	r3, IPSR
 8008e18:	60fb      	str	r3, [r7, #12]
  return(result);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d004      	beq.n	8008e2a <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8008e20:	6938      	ldr	r0, [r7, #16]
 8008e22:	f000 fd17 	bl	8009854 <uxQueueMessagesWaitingFromISR>
 8008e26:	6178      	str	r0, [r7, #20]
 8008e28:	e003      	b.n	8008e32 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8008e2a:	6938      	ldr	r0, [r7, #16]
 8008e2c:	f000 fcf4 	bl	8009818 <uxQueueMessagesWaiting>
 8008e30:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8008e32:	697b      	ldr	r3, [r7, #20]
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3718      	adds	r7, #24
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008e3c:	b480      	push	{r7}
 8008e3e:	b085      	sub	sp, #20
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	60b9      	str	r1, [r7, #8]
 8008e46:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	4a07      	ldr	r2, [pc, #28]	; (8008e68 <vApplicationGetIdleTaskMemory+0x2c>)
 8008e4c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	4a06      	ldr	r2, [pc, #24]	; (8008e6c <vApplicationGetIdleTaskMemory+0x30>)
 8008e52:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e5a:	601a      	str	r2, [r3, #0]
}
 8008e5c:	bf00      	nop
 8008e5e:	3714      	adds	r7, #20
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr
 8008e68:	20000628 	.word	0x20000628
 8008e6c:	200006e4 	.word	0x200006e4

08008e70 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008e70:	b480      	push	{r7}
 8008e72:	b085      	sub	sp, #20
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	4a07      	ldr	r2, [pc, #28]	; (8008e9c <vApplicationGetTimerTaskMemory+0x2c>)
 8008e80:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	4a06      	ldr	r2, [pc, #24]	; (8008ea0 <vApplicationGetTimerTaskMemory+0x30>)
 8008e86:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e8e:	601a      	str	r2, [r3, #0]
}
 8008e90:	bf00      	nop
 8008e92:	3714      	adds	r7, #20
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr
 8008e9c:	20000ae4 	.word	0x20000ae4
 8008ea0:	20000ba0 	.word	0x20000ba0

08008ea4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f103 0208 	add.w	r2, r3, #8
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8008ebc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f103 0208 	add.w	r2, r3, #8
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f103 0208 	add.w	r2, r3, #8
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008ed8:	bf00      	nop
 8008eda:	370c      	adds	r7, #12
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr

08008ee4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b083      	sub	sp, #12
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008ef2:	bf00      	nop
 8008ef4:	370c      	adds	r7, #12
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr

08008efe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008efe:	b480      	push	{r7}
 8008f00:	b085      	sub	sp, #20
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
 8008f06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	68fa      	ldr	r2, [r7, #12]
 8008f12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	689a      	ldr	r2, [r3, #8]
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	683a      	ldr	r2, [r7, #0]
 8008f22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	683a      	ldr	r2, [r7, #0]
 8008f28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	1c5a      	adds	r2, r3, #1
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	601a      	str	r2, [r3, #0]
}
 8008f3a:	bf00      	nop
 8008f3c:	3714      	adds	r7, #20
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr

08008f46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f46:	b480      	push	{r7}
 8008f48:	b085      	sub	sp, #20
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
 8008f4e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f5c:	d103      	bne.n	8008f66 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	691b      	ldr	r3, [r3, #16]
 8008f62:	60fb      	str	r3, [r7, #12]
 8008f64:	e00c      	b.n	8008f80 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	3308      	adds	r3, #8
 8008f6a:	60fb      	str	r3, [r7, #12]
 8008f6c:	e002      	b.n	8008f74 <vListInsert+0x2e>
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	60fb      	str	r3, [r7, #12]
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	68ba      	ldr	r2, [r7, #8]
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d2f6      	bcs.n	8008f6e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	685a      	ldr	r2, [r3, #4]
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	683a      	ldr	r2, [r7, #0]
 8008f8e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	68fa      	ldr	r2, [r7, #12]
 8008f94:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	683a      	ldr	r2, [r7, #0]
 8008f9a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	687a      	ldr	r2, [r7, #4]
 8008fa0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	1c5a      	adds	r2, r3, #1
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	601a      	str	r2, [r3, #0]
}
 8008fac:	bf00      	nop
 8008fae:	3714      	adds	r7, #20
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr

08008fb8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b085      	sub	sp, #20
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	691b      	ldr	r3, [r3, #16]
 8008fc4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	6892      	ldr	r2, [r2, #8]
 8008fce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	6852      	ldr	r2, [r2, #4]
 8008fd8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d103      	bne.n	8008fec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	689a      	ldr	r2, [r3, #8]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	1e5a      	subs	r2, r3, #1
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
}
 8009000:	4618      	mov	r0, r3
 8009002:	3714      	adds	r7, #20
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr

0800900c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d10a      	bne.n	8009036 <xQueueGenericReset+0x2a>
	__asm volatile
 8009020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009024:	f383 8811 	msr	BASEPRI, r3
 8009028:	f3bf 8f6f 	isb	sy
 800902c:	f3bf 8f4f 	dsb	sy
 8009030:	60bb      	str	r3, [r7, #8]
}
 8009032:	bf00      	nop
 8009034:	e7fe      	b.n	8009034 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009036:	f002 f8f5 	bl	800b224 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681a      	ldr	r2, [r3, #0]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009042:	68f9      	ldr	r1, [r7, #12]
 8009044:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009046:	fb01 f303 	mul.w	r3, r1, r3
 800904a:	441a      	add	r2, r3
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2200      	movs	r2, #0
 8009054:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009066:	3b01      	subs	r3, #1
 8009068:	68f9      	ldr	r1, [r7, #12]
 800906a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800906c:	fb01 f303 	mul.w	r3, r1, r3
 8009070:	441a      	add	r2, r3
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	22ff      	movs	r2, #255	; 0xff
 800907a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	22ff      	movs	r2, #255	; 0xff
 8009082:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d109      	bne.n	80090a0 <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	691b      	ldr	r3, [r3, #16]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d00f      	beq.n	80090b4 <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	3310      	adds	r3, #16
 8009098:	4618      	mov	r0, r3
 800909a:	f001 f9ab 	bl	800a3f4 <xTaskRemoveFromEventList>
 800909e:	e009      	b.n	80090b4 <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	3310      	adds	r3, #16
 80090a4:	4618      	mov	r0, r3
 80090a6:	f7ff fefd 	bl	8008ea4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	3324      	adds	r3, #36	; 0x24
 80090ae:	4618      	mov	r0, r3
 80090b0:	f7ff fef8 	bl	8008ea4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80090b4:	f002 f8e6 	bl	800b284 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80090b8:	2301      	movs	r3, #1
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3710      	adds	r7, #16
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}

080090c2 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80090c2:	b580      	push	{r7, lr}
 80090c4:	b08e      	sub	sp, #56	; 0x38
 80090c6:	af02      	add	r7, sp, #8
 80090c8:	60f8      	str	r0, [r7, #12]
 80090ca:	60b9      	str	r1, [r7, #8]
 80090cc:	607a      	str	r2, [r7, #4]
 80090ce:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d10a      	bne.n	80090ec <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80090d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090da:	f383 8811 	msr	BASEPRI, r3
 80090de:	f3bf 8f6f 	isb	sy
 80090e2:	f3bf 8f4f 	dsb	sy
 80090e6:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80090e8:	bf00      	nop
 80090ea:	e7fe      	b.n	80090ea <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d10a      	bne.n	8009108 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80090f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f6:	f383 8811 	msr	BASEPRI, r3
 80090fa:	f3bf 8f6f 	isb	sy
 80090fe:	f3bf 8f4f 	dsb	sy
 8009102:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009104:	bf00      	nop
 8009106:	e7fe      	b.n	8009106 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d002      	beq.n	8009114 <xQueueGenericCreateStatic+0x52>
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d001      	beq.n	8009118 <xQueueGenericCreateStatic+0x56>
 8009114:	2301      	movs	r3, #1
 8009116:	e000      	b.n	800911a <xQueueGenericCreateStatic+0x58>
 8009118:	2300      	movs	r3, #0
 800911a:	2b00      	cmp	r3, #0
 800911c:	d10a      	bne.n	8009134 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800911e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009122:	f383 8811 	msr	BASEPRI, r3
 8009126:	f3bf 8f6f 	isb	sy
 800912a:	f3bf 8f4f 	dsb	sy
 800912e:	623b      	str	r3, [r7, #32]
}
 8009130:	bf00      	nop
 8009132:	e7fe      	b.n	8009132 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d102      	bne.n	8009140 <xQueueGenericCreateStatic+0x7e>
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d101      	bne.n	8009144 <xQueueGenericCreateStatic+0x82>
 8009140:	2301      	movs	r3, #1
 8009142:	e000      	b.n	8009146 <xQueueGenericCreateStatic+0x84>
 8009144:	2300      	movs	r3, #0
 8009146:	2b00      	cmp	r3, #0
 8009148:	d10a      	bne.n	8009160 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800914a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800914e:	f383 8811 	msr	BASEPRI, r3
 8009152:	f3bf 8f6f 	isb	sy
 8009156:	f3bf 8f4f 	dsb	sy
 800915a:	61fb      	str	r3, [r7, #28]
}
 800915c:	bf00      	nop
 800915e:	e7fe      	b.n	800915e <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009160:	2350      	movs	r3, #80	; 0x50
 8009162:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	2b50      	cmp	r3, #80	; 0x50
 8009168:	d00a      	beq.n	8009180 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800916a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800916e:	f383 8811 	msr	BASEPRI, r3
 8009172:	f3bf 8f6f 	isb	sy
 8009176:	f3bf 8f4f 	dsb	sy
 800917a:	61bb      	str	r3, [r7, #24]
}
 800917c:	bf00      	nop
 800917e:	e7fe      	b.n	800917e <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009180:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009188:	2b00      	cmp	r3, #0
 800918a:	d00d      	beq.n	80091a8 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800918c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800918e:	2201      	movs	r2, #1
 8009190:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009194:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800919a:	9300      	str	r3, [sp, #0]
 800919c:	4613      	mov	r3, r2
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	68b9      	ldr	r1, [r7, #8]
 80091a2:	68f8      	ldr	r0, [r7, #12]
 80091a4:	f000 f83f 	bl	8009226 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80091a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3730      	adds	r7, #48	; 0x30
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b08a      	sub	sp, #40	; 0x28
 80091b6:	af02      	add	r7, sp, #8
 80091b8:	60f8      	str	r0, [r7, #12]
 80091ba:	60b9      	str	r1, [r7, #8]
 80091bc:	4613      	mov	r3, r2
 80091be:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d10a      	bne.n	80091dc <xQueueGenericCreate+0x2a>
	__asm volatile
 80091c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ca:	f383 8811 	msr	BASEPRI, r3
 80091ce:	f3bf 8f6f 	isb	sy
 80091d2:	f3bf 8f4f 	dsb	sy
 80091d6:	613b      	str	r3, [r7, #16]
}
 80091d8:	bf00      	nop
 80091da:	e7fe      	b.n	80091da <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	68ba      	ldr	r2, [r7, #8]
 80091e0:	fb02 f303 	mul.w	r3, r2, r3
 80091e4:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80091e6:	69fb      	ldr	r3, [r7, #28]
 80091e8:	3350      	adds	r3, #80	; 0x50
 80091ea:	4618      	mov	r0, r3
 80091ec:	f002 f93c 	bl	800b468 <pvPortMalloc>
 80091f0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80091f2:	69bb      	ldr	r3, [r7, #24]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d011      	beq.n	800921c <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80091f8:	69bb      	ldr	r3, [r7, #24]
 80091fa:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	3350      	adds	r3, #80	; 0x50
 8009200:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009202:	69bb      	ldr	r3, [r7, #24]
 8009204:	2200      	movs	r2, #0
 8009206:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800920a:	79fa      	ldrb	r2, [r7, #7]
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	9300      	str	r3, [sp, #0]
 8009210:	4613      	mov	r3, r2
 8009212:	697a      	ldr	r2, [r7, #20]
 8009214:	68b9      	ldr	r1, [r7, #8]
 8009216:	68f8      	ldr	r0, [r7, #12]
 8009218:	f000 f805 	bl	8009226 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800921c:	69bb      	ldr	r3, [r7, #24]
	}
 800921e:	4618      	mov	r0, r3
 8009220:	3720      	adds	r7, #32
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}

08009226 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009226:	b580      	push	{r7, lr}
 8009228:	b084      	sub	sp, #16
 800922a:	af00      	add	r7, sp, #0
 800922c:	60f8      	str	r0, [r7, #12]
 800922e:	60b9      	str	r1, [r7, #8]
 8009230:	607a      	str	r2, [r7, #4]
 8009232:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d103      	bne.n	8009242 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800923a:	69bb      	ldr	r3, [r7, #24]
 800923c:	69ba      	ldr	r2, [r7, #24]
 800923e:	601a      	str	r2, [r3, #0]
 8009240:	e002      	b.n	8009248 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009242:	69bb      	ldr	r3, [r7, #24]
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009248:	69bb      	ldr	r3, [r7, #24]
 800924a:	68fa      	ldr	r2, [r7, #12]
 800924c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	68ba      	ldr	r2, [r7, #8]
 8009252:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009254:	2101      	movs	r1, #1
 8009256:	69b8      	ldr	r0, [r7, #24]
 8009258:	f7ff fed8 	bl	800900c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800925c:	69bb      	ldr	r3, [r7, #24]
 800925e:	78fa      	ldrb	r2, [r7, #3]
 8009260:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009264:	bf00      	nop
 8009266:	3710      	adds	r7, #16
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b08e      	sub	sp, #56	; 0x38
 8009270:	af00      	add	r7, sp, #0
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	607a      	str	r2, [r7, #4]
 8009278:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800927a:	2300      	movs	r3, #0
 800927c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009284:	2b00      	cmp	r3, #0
 8009286:	d10a      	bne.n	800929e <xQueueGenericSend+0x32>
	__asm volatile
 8009288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800928c:	f383 8811 	msr	BASEPRI, r3
 8009290:	f3bf 8f6f 	isb	sy
 8009294:	f3bf 8f4f 	dsb	sy
 8009298:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800929a:	bf00      	nop
 800929c:	e7fe      	b.n	800929c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d103      	bne.n	80092ac <xQueueGenericSend+0x40>
 80092a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d101      	bne.n	80092b0 <xQueueGenericSend+0x44>
 80092ac:	2301      	movs	r3, #1
 80092ae:	e000      	b.n	80092b2 <xQueueGenericSend+0x46>
 80092b0:	2300      	movs	r3, #0
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d10a      	bne.n	80092cc <xQueueGenericSend+0x60>
	__asm volatile
 80092b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ba:	f383 8811 	msr	BASEPRI, r3
 80092be:	f3bf 8f6f 	isb	sy
 80092c2:	f3bf 8f4f 	dsb	sy
 80092c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80092c8:	bf00      	nop
 80092ca:	e7fe      	b.n	80092ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	2b02      	cmp	r3, #2
 80092d0:	d103      	bne.n	80092da <xQueueGenericSend+0x6e>
 80092d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	d101      	bne.n	80092de <xQueueGenericSend+0x72>
 80092da:	2301      	movs	r3, #1
 80092dc:	e000      	b.n	80092e0 <xQueueGenericSend+0x74>
 80092de:	2300      	movs	r3, #0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d10a      	bne.n	80092fa <xQueueGenericSend+0x8e>
	__asm volatile
 80092e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e8:	f383 8811 	msr	BASEPRI, r3
 80092ec:	f3bf 8f6f 	isb	sy
 80092f0:	f3bf 8f4f 	dsb	sy
 80092f4:	623b      	str	r3, [r7, #32]
}
 80092f6:	bf00      	nop
 80092f8:	e7fe      	b.n	80092f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80092fa:	f001 fa37 	bl	800a76c <xTaskGetSchedulerState>
 80092fe:	4603      	mov	r3, r0
 8009300:	2b00      	cmp	r3, #0
 8009302:	d102      	bne.n	800930a <xQueueGenericSend+0x9e>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d101      	bne.n	800930e <xQueueGenericSend+0xa2>
 800930a:	2301      	movs	r3, #1
 800930c:	e000      	b.n	8009310 <xQueueGenericSend+0xa4>
 800930e:	2300      	movs	r3, #0
 8009310:	2b00      	cmp	r3, #0
 8009312:	d10a      	bne.n	800932a <xQueueGenericSend+0xbe>
	__asm volatile
 8009314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009318:	f383 8811 	msr	BASEPRI, r3
 800931c:	f3bf 8f6f 	isb	sy
 8009320:	f3bf 8f4f 	dsb	sy
 8009324:	61fb      	str	r3, [r7, #28]
}
 8009326:	bf00      	nop
 8009328:	e7fe      	b.n	8009328 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800932a:	f001 ff7b 	bl	800b224 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800932e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009330:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009336:	429a      	cmp	r2, r3
 8009338:	d302      	bcc.n	8009340 <xQueueGenericSend+0xd4>
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	2b02      	cmp	r3, #2
 800933e:	d112      	bne.n	8009366 <xQueueGenericSend+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009340:	683a      	ldr	r2, [r7, #0]
 8009342:	68b9      	ldr	r1, [r7, #8]
 8009344:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009346:	f000 faa3 	bl	8009890 <prvCopyDataToQueue>
 800934a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800934c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009350:	2b00      	cmp	r3, #0
 8009352:	d004      	beq.n	800935e <xQueueGenericSend+0xf2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009356:	3324      	adds	r3, #36	; 0x24
 8009358:	4618      	mov	r0, r3
 800935a:	f001 f84b 	bl	800a3f4 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800935e:	f001 ff91 	bl	800b284 <vPortExitCritical>
				return pdPASS;
 8009362:	2301      	movs	r3, #1
 8009364:	e062      	b.n	800942c <xQueueGenericSend+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d103      	bne.n	8009374 <xQueueGenericSend+0x108>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800936c:	f001 ff8a 	bl	800b284 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009370:	2300      	movs	r3, #0
 8009372:	e05b      	b.n	800942c <xQueueGenericSend+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009376:	2b00      	cmp	r3, #0
 8009378:	d106      	bne.n	8009388 <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800937a:	f107 0314 	add.w	r3, r7, #20
 800937e:	4618      	mov	r0, r3
 8009380:	f001 f89c 	bl	800a4bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009384:	2301      	movs	r3, #1
 8009386:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009388:	f001 ff7c 	bl	800b284 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800938c:	f000 fe3a 	bl	800a004 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009390:	f001 ff48 	bl	800b224 <vPortEnterCritical>
 8009394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009396:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800939a:	b25b      	sxtb	r3, r3
 800939c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093a0:	d103      	bne.n	80093aa <xQueueGenericSend+0x13e>
 80093a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a4:	2200      	movs	r2, #0
 80093a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093b0:	b25b      	sxtb	r3, r3
 80093b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093b6:	d103      	bne.n	80093c0 <xQueueGenericSend+0x154>
 80093b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ba:	2200      	movs	r2, #0
 80093bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093c0:	f001 ff60 	bl	800b284 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80093c4:	1d3a      	adds	r2, r7, #4
 80093c6:	f107 0314 	add.w	r3, r7, #20
 80093ca:	4611      	mov	r1, r2
 80093cc:	4618      	mov	r0, r3
 80093ce:	f001 f88b 	bl	800a4e8 <xTaskCheckForTimeOut>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d123      	bne.n	8009420 <xQueueGenericSend+0x1b4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80093d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093da:	f000 fb51 	bl	8009a80 <prvIsQueueFull>
 80093de:	4603      	mov	r3, r0
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d017      	beq.n	8009414 <xQueueGenericSend+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80093e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e6:	3310      	adds	r3, #16
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	4611      	mov	r1, r2
 80093ec:	4618      	mov	r0, r3
 80093ee:	f000 ffb1 	bl	800a354 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80093f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093f4:	f000 fadc 	bl	80099b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80093f8:	f000 fe12 	bl	800a020 <xTaskResumeAll>
 80093fc:	4603      	mov	r3, r0
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d193      	bne.n	800932a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009402:	4b0c      	ldr	r3, [pc, #48]	; (8009434 <xQueueGenericSend+0x1c8>)
 8009404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009408:	601a      	str	r2, [r3, #0]
 800940a:	f3bf 8f4f 	dsb	sy
 800940e:	f3bf 8f6f 	isb	sy
 8009412:	e78a      	b.n	800932a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009414:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009416:	f000 facb 	bl	80099b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800941a:	f000 fe01 	bl	800a020 <xTaskResumeAll>
 800941e:	e784      	b.n	800932a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009420:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009422:	f000 fac5 	bl	80099b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009426:	f000 fdfb 	bl	800a020 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800942a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800942c:	4618      	mov	r0, r3
 800942e:	3738      	adds	r7, #56	; 0x38
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}
 8009434:	e000ed04 	.word	0xe000ed04

08009438 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b090      	sub	sp, #64	; 0x40
 800943c:	af00      	add	r7, sp, #0
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	60b9      	str	r1, [r7, #8]
 8009442:	607a      	str	r2, [r7, #4]
 8009444:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800944a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800944c:	2b00      	cmp	r3, #0
 800944e:	d10a      	bne.n	8009466 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009454:	f383 8811 	msr	BASEPRI, r3
 8009458:	f3bf 8f6f 	isb	sy
 800945c:	f3bf 8f4f 	dsb	sy
 8009460:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009462:	bf00      	nop
 8009464:	e7fe      	b.n	8009464 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d103      	bne.n	8009474 <xQueueGenericSendFromISR+0x3c>
 800946c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800946e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009470:	2b00      	cmp	r3, #0
 8009472:	d101      	bne.n	8009478 <xQueueGenericSendFromISR+0x40>
 8009474:	2301      	movs	r3, #1
 8009476:	e000      	b.n	800947a <xQueueGenericSendFromISR+0x42>
 8009478:	2300      	movs	r3, #0
 800947a:	2b00      	cmp	r3, #0
 800947c:	d10a      	bne.n	8009494 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800947e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009482:	f383 8811 	msr	BASEPRI, r3
 8009486:	f3bf 8f6f 	isb	sy
 800948a:	f3bf 8f4f 	dsb	sy
 800948e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009490:	bf00      	nop
 8009492:	e7fe      	b.n	8009492 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	2b02      	cmp	r3, #2
 8009498:	d103      	bne.n	80094a2 <xQueueGenericSendFromISR+0x6a>
 800949a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800949c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d101      	bne.n	80094a6 <xQueueGenericSendFromISR+0x6e>
 80094a2:	2301      	movs	r3, #1
 80094a4:	e000      	b.n	80094a8 <xQueueGenericSendFromISR+0x70>
 80094a6:	2300      	movs	r3, #0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d10a      	bne.n	80094c2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80094ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b0:	f383 8811 	msr	BASEPRI, r3
 80094b4:	f3bf 8f6f 	isb	sy
 80094b8:	f3bf 8f4f 	dsb	sy
 80094bc:	623b      	str	r3, [r7, #32]
}
 80094be:	bf00      	nop
 80094c0:	e7fe      	b.n	80094c0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80094c2:	f001 ff91 	bl	800b3e8 <vPortValidateInterruptPriority>
	__asm volatile
 80094c6:	f3ef 8211 	mrs	r2, BASEPRI
 80094ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ce:	f383 8811 	msr	BASEPRI, r3
 80094d2:	f3bf 8f6f 	isb	sy
 80094d6:	f3bf 8f4f 	dsb	sy
 80094da:	61fa      	str	r2, [r7, #28]
 80094dc:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80094de:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80094e0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80094e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d302      	bcc.n	80094f4 <xQueueGenericSendFromISR+0xbc>
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	2b02      	cmp	r3, #2
 80094f2:	d12f      	bne.n	8009554 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80094f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009502:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009504:	683a      	ldr	r2, [r7, #0]
 8009506:	68b9      	ldr	r1, [r7, #8]
 8009508:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800950a:	f000 f9c1 	bl	8009890 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800950e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009516:	d112      	bne.n	800953e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800951c:	2b00      	cmp	r3, #0
 800951e:	d016      	beq.n	800954e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009522:	3324      	adds	r3, #36	; 0x24
 8009524:	4618      	mov	r0, r3
 8009526:	f000 ff65 	bl	800a3f4 <xTaskRemoveFromEventList>
 800952a:	4603      	mov	r3, r0
 800952c:	2b00      	cmp	r3, #0
 800952e:	d00e      	beq.n	800954e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d00b      	beq.n	800954e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2201      	movs	r2, #1
 800953a:	601a      	str	r2, [r3, #0]
 800953c:	e007      	b.n	800954e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800953e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009542:	3301      	adds	r3, #1
 8009544:	b2db      	uxtb	r3, r3
 8009546:	b25a      	sxtb	r2, r3
 8009548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800954a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800954e:	2301      	movs	r3, #1
 8009550:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009552:	e001      	b.n	8009558 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009554:	2300      	movs	r3, #0
 8009556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800955a:	617b      	str	r3, [r7, #20]
	__asm volatile
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	f383 8811 	msr	BASEPRI, r3
}
 8009562:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009566:	4618      	mov	r0, r3
 8009568:	3740      	adds	r7, #64	; 0x40
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
	...

08009570 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b08c      	sub	sp, #48	; 0x30
 8009574:	af00      	add	r7, sp, #0
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	60b9      	str	r1, [r7, #8]
 800957a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800957c:	2300      	movs	r3, #0
 800957e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009586:	2b00      	cmp	r3, #0
 8009588:	d10a      	bne.n	80095a0 <xQueueReceive+0x30>
	__asm volatile
 800958a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958e:	f383 8811 	msr	BASEPRI, r3
 8009592:	f3bf 8f6f 	isb	sy
 8009596:	f3bf 8f4f 	dsb	sy
 800959a:	623b      	str	r3, [r7, #32]
}
 800959c:	bf00      	nop
 800959e:	e7fe      	b.n	800959e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d103      	bne.n	80095ae <xQueueReceive+0x3e>
 80095a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d101      	bne.n	80095b2 <xQueueReceive+0x42>
 80095ae:	2301      	movs	r3, #1
 80095b0:	e000      	b.n	80095b4 <xQueueReceive+0x44>
 80095b2:	2300      	movs	r3, #0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d10a      	bne.n	80095ce <xQueueReceive+0x5e>
	__asm volatile
 80095b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095bc:	f383 8811 	msr	BASEPRI, r3
 80095c0:	f3bf 8f6f 	isb	sy
 80095c4:	f3bf 8f4f 	dsb	sy
 80095c8:	61fb      	str	r3, [r7, #28]
}
 80095ca:	bf00      	nop
 80095cc:	e7fe      	b.n	80095cc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80095ce:	f001 f8cd 	bl	800a76c <xTaskGetSchedulerState>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d102      	bne.n	80095de <xQueueReceive+0x6e>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d101      	bne.n	80095e2 <xQueueReceive+0x72>
 80095de:	2301      	movs	r3, #1
 80095e0:	e000      	b.n	80095e4 <xQueueReceive+0x74>
 80095e2:	2300      	movs	r3, #0
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d10a      	bne.n	80095fe <xQueueReceive+0x8e>
	__asm volatile
 80095e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ec:	f383 8811 	msr	BASEPRI, r3
 80095f0:	f3bf 8f6f 	isb	sy
 80095f4:	f3bf 8f4f 	dsb	sy
 80095f8:	61bb      	str	r3, [r7, #24]
}
 80095fa:	bf00      	nop
 80095fc:	e7fe      	b.n	80095fc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80095fe:	f001 fe11 	bl	800b224 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009606:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800960a:	2b00      	cmp	r3, #0
 800960c:	d014      	beq.n	8009638 <xQueueReceive+0xc8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800960e:	68b9      	ldr	r1, [r7, #8]
 8009610:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009612:	f000 f9a7 	bl	8009964 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009618:	1e5a      	subs	r2, r3, #1
 800961a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800961e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009620:	691b      	ldr	r3, [r3, #16]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d004      	beq.n	8009630 <xQueueReceive+0xc0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009628:	3310      	adds	r3, #16
 800962a:	4618      	mov	r0, r3
 800962c:	f000 fee2 	bl	800a3f4 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009630:	f001 fe28 	bl	800b284 <vPortExitCritical>
				return pdPASS;
 8009634:	2301      	movs	r3, #1
 8009636:	e069      	b.n	800970c <xQueueReceive+0x19c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d103      	bne.n	8009646 <xQueueReceive+0xd6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800963e:	f001 fe21 	bl	800b284 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009642:	2300      	movs	r3, #0
 8009644:	e062      	b.n	800970c <xQueueReceive+0x19c>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009648:	2b00      	cmp	r3, #0
 800964a:	d106      	bne.n	800965a <xQueueReceive+0xea>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800964c:	f107 0310 	add.w	r3, r7, #16
 8009650:	4618      	mov	r0, r3
 8009652:	f000 ff33 	bl	800a4bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009656:	2301      	movs	r3, #1
 8009658:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800965a:	f001 fe13 	bl	800b284 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800965e:	f000 fcd1 	bl	800a004 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009662:	f001 fddf 	bl	800b224 <vPortEnterCritical>
 8009666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009668:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800966c:	b25b      	sxtb	r3, r3
 800966e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009672:	d103      	bne.n	800967c <xQueueReceive+0x10c>
 8009674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009676:	2200      	movs	r2, #0
 8009678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800967c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009682:	b25b      	sxtb	r3, r3
 8009684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009688:	d103      	bne.n	8009692 <xQueueReceive+0x122>
 800968a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800968c:	2200      	movs	r2, #0
 800968e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009692:	f001 fdf7 	bl	800b284 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009696:	1d3a      	adds	r2, r7, #4
 8009698:	f107 0310 	add.w	r3, r7, #16
 800969c:	4611      	mov	r1, r2
 800969e:	4618      	mov	r0, r3
 80096a0:	f000 ff22 	bl	800a4e8 <xTaskCheckForTimeOut>
 80096a4:	4603      	mov	r3, r0
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d123      	bne.n	80096f2 <xQueueReceive+0x182>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096ac:	f000 f9d2 	bl	8009a54 <prvIsQueueEmpty>
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d017      	beq.n	80096e6 <xQueueReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80096b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b8:	3324      	adds	r3, #36	; 0x24
 80096ba:	687a      	ldr	r2, [r7, #4]
 80096bc:	4611      	mov	r1, r2
 80096be:	4618      	mov	r0, r3
 80096c0:	f000 fe48 	bl	800a354 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80096c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096c6:	f000 f973 	bl	80099b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80096ca:	f000 fca9 	bl	800a020 <xTaskResumeAll>
 80096ce:	4603      	mov	r3, r0
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d194      	bne.n	80095fe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80096d4:	4b0f      	ldr	r3, [pc, #60]	; (8009714 <xQueueReceive+0x1a4>)
 80096d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096da:	601a      	str	r2, [r3, #0]
 80096dc:	f3bf 8f4f 	dsb	sy
 80096e0:	f3bf 8f6f 	isb	sy
 80096e4:	e78b      	b.n	80095fe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80096e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096e8:	f000 f962 	bl	80099b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80096ec:	f000 fc98 	bl	800a020 <xTaskResumeAll>
 80096f0:	e785      	b.n	80095fe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80096f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096f4:	f000 f95c 	bl	80099b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80096f8:	f000 fc92 	bl	800a020 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096fe:	f000 f9a9 	bl	8009a54 <prvIsQueueEmpty>
 8009702:	4603      	mov	r3, r0
 8009704:	2b00      	cmp	r3, #0
 8009706:	f43f af7a 	beq.w	80095fe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800970a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800970c:	4618      	mov	r0, r3
 800970e:	3730      	adds	r7, #48	; 0x30
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	e000ed04 	.word	0xe000ed04

08009718 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b08e      	sub	sp, #56	; 0x38
 800971c:	af00      	add	r7, sp, #0
 800971e:	60f8      	str	r0, [r7, #12]
 8009720:	60b9      	str	r1, [r7, #8]
 8009722:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972a:	2b00      	cmp	r3, #0
 800972c:	d10a      	bne.n	8009744 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800972e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009732:	f383 8811 	msr	BASEPRI, r3
 8009736:	f3bf 8f6f 	isb	sy
 800973a:	f3bf 8f4f 	dsb	sy
 800973e:	623b      	str	r3, [r7, #32]
}
 8009740:	bf00      	nop
 8009742:	e7fe      	b.n	8009742 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d103      	bne.n	8009752 <xQueueReceiveFromISR+0x3a>
 800974a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800974c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800974e:	2b00      	cmp	r3, #0
 8009750:	d101      	bne.n	8009756 <xQueueReceiveFromISR+0x3e>
 8009752:	2301      	movs	r3, #1
 8009754:	e000      	b.n	8009758 <xQueueReceiveFromISR+0x40>
 8009756:	2300      	movs	r3, #0
 8009758:	2b00      	cmp	r3, #0
 800975a:	d10a      	bne.n	8009772 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800975c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009760:	f383 8811 	msr	BASEPRI, r3
 8009764:	f3bf 8f6f 	isb	sy
 8009768:	f3bf 8f4f 	dsb	sy
 800976c:	61fb      	str	r3, [r7, #28]
}
 800976e:	bf00      	nop
 8009770:	e7fe      	b.n	8009770 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009772:	f001 fe39 	bl	800b3e8 <vPortValidateInterruptPriority>
	__asm volatile
 8009776:	f3ef 8211 	mrs	r2, BASEPRI
 800977a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800977e:	f383 8811 	msr	BASEPRI, r3
 8009782:	f3bf 8f6f 	isb	sy
 8009786:	f3bf 8f4f 	dsb	sy
 800978a:	61ba      	str	r2, [r7, #24]
 800978c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800978e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009790:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009796:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800979a:	2b00      	cmp	r3, #0
 800979c:	d02f      	beq.n	80097fe <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800979e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80097a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80097a8:	68b9      	ldr	r1, [r7, #8]
 80097aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097ac:	f000 f8da 	bl	8009964 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80097b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b2:	1e5a      	subs	r2, r3, #1
 80097b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80097b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80097bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097c0:	d112      	bne.n	80097e8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c4:	691b      	ldr	r3, [r3, #16]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d016      	beq.n	80097f8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80097ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097cc:	3310      	adds	r3, #16
 80097ce:	4618      	mov	r0, r3
 80097d0:	f000 fe10 	bl	800a3f4 <xTaskRemoveFromEventList>
 80097d4:	4603      	mov	r3, r0
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d00e      	beq.n	80097f8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d00b      	beq.n	80097f8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2201      	movs	r2, #1
 80097e4:	601a      	str	r2, [r3, #0]
 80097e6:	e007      	b.n	80097f8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80097e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097ec:	3301      	adds	r3, #1
 80097ee:	b2db      	uxtb	r3, r3
 80097f0:	b25a      	sxtb	r2, r3
 80097f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80097f8:	2301      	movs	r3, #1
 80097fa:	637b      	str	r3, [r7, #52]	; 0x34
 80097fc:	e001      	b.n	8009802 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80097fe:	2300      	movs	r3, #0
 8009800:	637b      	str	r3, [r7, #52]	; 0x34
 8009802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009804:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	f383 8811 	msr	BASEPRI, r3
}
 800980c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800980e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009810:	4618      	mov	r0, r3
 8009812:	3738      	adds	r7, #56	; 0x38
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d10a      	bne.n	800983c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8009826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800982a:	f383 8811 	msr	BASEPRI, r3
 800982e:	f3bf 8f6f 	isb	sy
 8009832:	f3bf 8f4f 	dsb	sy
 8009836:	60bb      	str	r3, [r7, #8]
}
 8009838:	bf00      	nop
 800983a:	e7fe      	b.n	800983a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800983c:	f001 fcf2 	bl	800b224 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009844:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8009846:	f001 fd1d 	bl	800b284 <vPortExitCritical>

	return uxReturn;
 800984a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800984c:	4618      	mov	r0, r3
 800984e:	3710      	adds	r7, #16
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8009854:	b480      	push	{r7}
 8009856:	b087      	sub	sp, #28
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d10a      	bne.n	800987c <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8009866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800986a:	f383 8811 	msr	BASEPRI, r3
 800986e:	f3bf 8f6f 	isb	sy
 8009872:	f3bf 8f4f 	dsb	sy
 8009876:	60fb      	str	r3, [r7, #12]
}
 8009878:	bf00      	nop
 800987a:	e7fe      	b.n	800987a <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009880:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8009882:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009884:	4618      	mov	r0, r3
 8009886:	371c      	adds	r7, #28
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b086      	sub	sp, #24
 8009894:	af00      	add	r7, sp, #0
 8009896:	60f8      	str	r0, [r7, #12]
 8009898:	60b9      	str	r1, [r7, #8]
 800989a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800989c:	2300      	movs	r3, #0
 800989e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d10d      	bne.n	80098ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d14d      	bne.n	8009952 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	689b      	ldr	r3, [r3, #8]
 80098ba:	4618      	mov	r0, r3
 80098bc:	f000 ff74 	bl	800a7a8 <xTaskPriorityDisinherit>
 80098c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2200      	movs	r2, #0
 80098c6:	609a      	str	r2, [r3, #8]
 80098c8:	e043      	b.n	8009952 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d119      	bne.n	8009904 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	6858      	ldr	r0, [r3, #4]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098d8:	461a      	mov	r2, r3
 80098da:	68b9      	ldr	r1, [r7, #8]
 80098dc:	f002 f8f8 	bl	800bad0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	685a      	ldr	r2, [r3, #4]
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098e8:	441a      	add	r2, r3
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	685a      	ldr	r2, [r3, #4]
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	689b      	ldr	r3, [r3, #8]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d32b      	bcc.n	8009952 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681a      	ldr	r2, [r3, #0]
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	605a      	str	r2, [r3, #4]
 8009902:	e026      	b.n	8009952 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	68d8      	ldr	r0, [r3, #12]
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800990c:	461a      	mov	r2, r3
 800990e:	68b9      	ldr	r1, [r7, #8]
 8009910:	f002 f8de 	bl	800bad0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	68da      	ldr	r2, [r3, #12]
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800991c:	425b      	negs	r3, r3
 800991e:	441a      	add	r2, r3
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	68da      	ldr	r2, [r3, #12]
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	429a      	cmp	r2, r3
 800992e:	d207      	bcs.n	8009940 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	689a      	ldr	r2, [r3, #8]
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009938:	425b      	negs	r3, r3
 800993a:	441a      	add	r2, r3
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2b02      	cmp	r3, #2
 8009944:	d105      	bne.n	8009952 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d002      	beq.n	8009952 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	3b01      	subs	r3, #1
 8009950:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	1c5a      	adds	r2, r3, #1
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800995a:	697b      	ldr	r3, [r7, #20]
}
 800995c:	4618      	mov	r0, r3
 800995e:	3718      	adds	r7, #24
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009972:	2b00      	cmp	r3, #0
 8009974:	d018      	beq.n	80099a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	68da      	ldr	r2, [r3, #12]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800997e:	441a      	add	r2, r3
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	68da      	ldr	r2, [r3, #12]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	689b      	ldr	r3, [r3, #8]
 800998c:	429a      	cmp	r2, r3
 800998e:	d303      	bcc.n	8009998 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	68d9      	ldr	r1, [r3, #12]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099a0:	461a      	mov	r2, r3
 80099a2:	6838      	ldr	r0, [r7, #0]
 80099a4:	f002 f894 	bl	800bad0 <memcpy>
	}
}
 80099a8:	bf00      	nop
 80099aa:	3708      	adds	r7, #8
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80099b8:	f001 fc34 	bl	800b224 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80099c4:	e011      	b.n	80099ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d012      	beq.n	80099f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	3324      	adds	r3, #36	; 0x24
 80099d2:	4618      	mov	r0, r3
 80099d4:	f000 fd0e 	bl	800a3f4 <xTaskRemoveFromEventList>
 80099d8:	4603      	mov	r3, r0
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d001      	beq.n	80099e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80099de:	f000 fde5 	bl	800a5ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80099e2:	7bfb      	ldrb	r3, [r7, #15]
 80099e4:	3b01      	subs	r3, #1
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80099ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	dce9      	bgt.n	80099c6 <prvUnlockQueue+0x16>
 80099f2:	e000      	b.n	80099f6 <prvUnlockQueue+0x46>
					break;
 80099f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	22ff      	movs	r2, #255	; 0xff
 80099fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80099fe:	f001 fc41 	bl	800b284 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009a02:	f001 fc0f 	bl	800b224 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a0c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a0e:	e011      	b.n	8009a34 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	691b      	ldr	r3, [r3, #16]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d012      	beq.n	8009a3e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	3310      	adds	r3, #16
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f000 fce9 	bl	800a3f4 <xTaskRemoveFromEventList>
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d001      	beq.n	8009a2c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009a28:	f000 fdc0 	bl	800a5ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009a2c:	7bbb      	ldrb	r3, [r7, #14]
 8009a2e:	3b01      	subs	r3, #1
 8009a30:	b2db      	uxtb	r3, r3
 8009a32:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	dce9      	bgt.n	8009a10 <prvUnlockQueue+0x60>
 8009a3c:	e000      	b.n	8009a40 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009a3e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	22ff      	movs	r2, #255	; 0xff
 8009a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009a48:	f001 fc1c 	bl	800b284 <vPortExitCritical>
}
 8009a4c:	bf00      	nop
 8009a4e:	3710      	adds	r7, #16
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b084      	sub	sp, #16
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009a5c:	f001 fbe2 	bl	800b224 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d102      	bne.n	8009a6e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	60fb      	str	r3, [r7, #12]
 8009a6c:	e001      	b.n	8009a72 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009a72:	f001 fc07 	bl	800b284 <vPortExitCritical>

	return xReturn;
 8009a76:	68fb      	ldr	r3, [r7, #12]
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3710      	adds	r7, #16
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b084      	sub	sp, #16
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009a88:	f001 fbcc 	bl	800b224 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d102      	bne.n	8009a9e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	60fb      	str	r3, [r7, #12]
 8009a9c:	e001      	b.n	8009aa2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009aa2:	f001 fbef 	bl	800b284 <vPortExitCritical>

	return xReturn;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3710      	adds	r7, #16
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b085      	sub	sp, #20
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009aba:	2300      	movs	r3, #0
 8009abc:	60fb      	str	r3, [r7, #12]
 8009abe:	e014      	b.n	8009aea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009ac0:	4a0f      	ldr	r2, [pc, #60]	; (8009b00 <vQueueAddToRegistry+0x50>)
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d10b      	bne.n	8009ae4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009acc:	490c      	ldr	r1, [pc, #48]	; (8009b00 <vQueueAddToRegistry+0x50>)
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	683a      	ldr	r2, [r7, #0]
 8009ad2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009ad6:	4a0a      	ldr	r2, [pc, #40]	; (8009b00 <vQueueAddToRegistry+0x50>)
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	00db      	lsls	r3, r3, #3
 8009adc:	4413      	add	r3, r2
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009ae2:	e006      	b.n	8009af2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	60fb      	str	r3, [r7, #12]
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2b07      	cmp	r3, #7
 8009aee:	d9e7      	bls.n	8009ac0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009af0:	bf00      	nop
 8009af2:	bf00      	nop
 8009af4:	3714      	adds	r7, #20
 8009af6:	46bd      	mov	sp, r7
 8009af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afc:	4770      	bx	lr
 8009afe:	bf00      	nop
 8009b00:	200013a0 	.word	0x200013a0

08009b04 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b086      	sub	sp, #24
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	60b9      	str	r1, [r7, #8]
 8009b0e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009b14:	f001 fb86 	bl	800b224 <vPortEnterCritical>
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b1e:	b25b      	sxtb	r3, r3
 8009b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b24:	d103      	bne.n	8009b2e <vQueueWaitForMessageRestricted+0x2a>
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b34:	b25b      	sxtb	r3, r3
 8009b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b3a:	d103      	bne.n	8009b44 <vQueueWaitForMessageRestricted+0x40>
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b44:	f001 fb9e 	bl	800b284 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d106      	bne.n	8009b5e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	3324      	adds	r3, #36	; 0x24
 8009b54:	687a      	ldr	r2, [r7, #4]
 8009b56:	68b9      	ldr	r1, [r7, #8]
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f000 fc1f 	bl	800a39c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009b5e:	6978      	ldr	r0, [r7, #20]
 8009b60:	f7ff ff26 	bl	80099b0 <prvUnlockQueue>
	}
 8009b64:	bf00      	nop
 8009b66:	3718      	adds	r7, #24
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b08e      	sub	sp, #56	; 0x38
 8009b70:	af04      	add	r7, sp, #16
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	60b9      	str	r1, [r7, #8]
 8009b76:	607a      	str	r2, [r7, #4]
 8009b78:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d10a      	bne.n	8009b96 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b84:	f383 8811 	msr	BASEPRI, r3
 8009b88:	f3bf 8f6f 	isb	sy
 8009b8c:	f3bf 8f4f 	dsb	sy
 8009b90:	623b      	str	r3, [r7, #32]
}
 8009b92:	bf00      	nop
 8009b94:	e7fe      	b.n	8009b94 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d10a      	bne.n	8009bb2 <xTaskCreateStatic+0x46>
	__asm volatile
 8009b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba0:	f383 8811 	msr	BASEPRI, r3
 8009ba4:	f3bf 8f6f 	isb	sy
 8009ba8:	f3bf 8f4f 	dsb	sy
 8009bac:	61fb      	str	r3, [r7, #28]
}
 8009bae:	bf00      	nop
 8009bb0:	e7fe      	b.n	8009bb0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009bb2:	23bc      	movs	r3, #188	; 0xbc
 8009bb4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	2bbc      	cmp	r3, #188	; 0xbc
 8009bba:	d00a      	beq.n	8009bd2 <xTaskCreateStatic+0x66>
	__asm volatile
 8009bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc0:	f383 8811 	msr	BASEPRI, r3
 8009bc4:	f3bf 8f6f 	isb	sy
 8009bc8:	f3bf 8f4f 	dsb	sy
 8009bcc:	61bb      	str	r3, [r7, #24]
}
 8009bce:	bf00      	nop
 8009bd0:	e7fe      	b.n	8009bd0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009bd2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d01e      	beq.n	8009c18 <xTaskCreateStatic+0xac>
 8009bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d01b      	beq.n	8009c18 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009be2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009be8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bec:	2202      	movs	r2, #2
 8009bee:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	9303      	str	r3, [sp, #12]
 8009bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf8:	9302      	str	r3, [sp, #8]
 8009bfa:	f107 0314 	add.w	r3, r7, #20
 8009bfe:	9301      	str	r3, [sp, #4]
 8009c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c02:	9300      	str	r3, [sp, #0]
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	687a      	ldr	r2, [r7, #4]
 8009c08:	68b9      	ldr	r1, [r7, #8]
 8009c0a:	68f8      	ldr	r0, [r7, #12]
 8009c0c:	f000 f850 	bl	8009cb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009c10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009c12:	f000 f8f3 	bl	8009dfc <prvAddNewTaskToReadyList>
 8009c16:	e001      	b.n	8009c1c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009c1c:	697b      	ldr	r3, [r7, #20]
	}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3728      	adds	r7, #40	; 0x28
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b08c      	sub	sp, #48	; 0x30
 8009c2a:	af04      	add	r7, sp, #16
 8009c2c:	60f8      	str	r0, [r7, #12]
 8009c2e:	60b9      	str	r1, [r7, #8]
 8009c30:	603b      	str	r3, [r7, #0]
 8009c32:	4613      	mov	r3, r2
 8009c34:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009c36:	88fb      	ldrh	r3, [r7, #6]
 8009c38:	009b      	lsls	r3, r3, #2
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f001 fc14 	bl	800b468 <pvPortMalloc>
 8009c40:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d00e      	beq.n	8009c66 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009c48:	20bc      	movs	r0, #188	; 0xbc
 8009c4a:	f001 fc0d 	bl	800b468 <pvPortMalloc>
 8009c4e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d003      	beq.n	8009c5e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009c56:	69fb      	ldr	r3, [r7, #28]
 8009c58:	697a      	ldr	r2, [r7, #20]
 8009c5a:	631a      	str	r2, [r3, #48]	; 0x30
 8009c5c:	e005      	b.n	8009c6a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009c5e:	6978      	ldr	r0, [r7, #20]
 8009c60:	f001 fcce 	bl	800b600 <vPortFree>
 8009c64:	e001      	b.n	8009c6a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009c66:	2300      	movs	r3, #0
 8009c68:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009c6a:	69fb      	ldr	r3, [r7, #28]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d017      	beq.n	8009ca0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009c70:	69fb      	ldr	r3, [r7, #28]
 8009c72:	2200      	movs	r2, #0
 8009c74:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009c78:	88fa      	ldrh	r2, [r7, #6]
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	9303      	str	r3, [sp, #12]
 8009c7e:	69fb      	ldr	r3, [r7, #28]
 8009c80:	9302      	str	r3, [sp, #8]
 8009c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c84:	9301      	str	r3, [sp, #4]
 8009c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c88:	9300      	str	r3, [sp, #0]
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	68b9      	ldr	r1, [r7, #8]
 8009c8e:	68f8      	ldr	r0, [r7, #12]
 8009c90:	f000 f80e 	bl	8009cb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009c94:	69f8      	ldr	r0, [r7, #28]
 8009c96:	f000 f8b1 	bl	8009dfc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	61bb      	str	r3, [r7, #24]
 8009c9e:	e002      	b.n	8009ca6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ca4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009ca6:	69bb      	ldr	r3, [r7, #24]
	}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3720      	adds	r7, #32
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b088      	sub	sp, #32
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	607a      	str	r2, [r7, #4]
 8009cbc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	009b      	lsls	r3, r3, #2
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	21a5      	movs	r1, #165	; 0xa5
 8009cca:	f001 ff0f 	bl	800baec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009cd8:	3b01      	subs	r3, #1
 8009cda:	009b      	lsls	r3, r3, #2
 8009cdc:	4413      	add	r3, r2
 8009cde:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009ce0:	69bb      	ldr	r3, [r7, #24]
 8009ce2:	f023 0307 	bic.w	r3, r3, #7
 8009ce6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009ce8:	69bb      	ldr	r3, [r7, #24]
 8009cea:	f003 0307 	and.w	r3, r3, #7
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00a      	beq.n	8009d08 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf6:	f383 8811 	msr	BASEPRI, r3
 8009cfa:	f3bf 8f6f 	isb	sy
 8009cfe:	f3bf 8f4f 	dsb	sy
 8009d02:	617b      	str	r3, [r7, #20]
}
 8009d04:	bf00      	nop
 8009d06:	e7fe      	b.n	8009d06 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d01f      	beq.n	8009d4e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d0e:	2300      	movs	r3, #0
 8009d10:	61fb      	str	r3, [r7, #28]
 8009d12:	e012      	b.n	8009d3a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009d14:	68ba      	ldr	r2, [r7, #8]
 8009d16:	69fb      	ldr	r3, [r7, #28]
 8009d18:	4413      	add	r3, r2
 8009d1a:	7819      	ldrb	r1, [r3, #0]
 8009d1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d1e:	69fb      	ldr	r3, [r7, #28]
 8009d20:	4413      	add	r3, r2
 8009d22:	3334      	adds	r3, #52	; 0x34
 8009d24:	460a      	mov	r2, r1
 8009d26:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009d28:	68ba      	ldr	r2, [r7, #8]
 8009d2a:	69fb      	ldr	r3, [r7, #28]
 8009d2c:	4413      	add	r3, r2
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d006      	beq.n	8009d42 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d34:	69fb      	ldr	r3, [r7, #28]
 8009d36:	3301      	adds	r3, #1
 8009d38:	61fb      	str	r3, [r7, #28]
 8009d3a:	69fb      	ldr	r3, [r7, #28]
 8009d3c:	2b0f      	cmp	r3, #15
 8009d3e:	d9e9      	bls.n	8009d14 <prvInitialiseNewTask+0x64>
 8009d40:	e000      	b.n	8009d44 <prvInitialiseNewTask+0x94>
			{
				break;
 8009d42:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d46:	2200      	movs	r2, #0
 8009d48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009d4c:	e003      	b.n	8009d56 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d50:	2200      	movs	r2, #0
 8009d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d58:	2b37      	cmp	r3, #55	; 0x37
 8009d5a:	d901      	bls.n	8009d60 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009d5c:	2337      	movs	r3, #55	; 0x37
 8009d5e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d64:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d6a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d6e:	2200      	movs	r2, #0
 8009d70:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d74:	3304      	adds	r3, #4
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7ff f8b4 	bl	8008ee4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d7e:	3318      	adds	r3, #24
 8009d80:	4618      	mov	r0, r3
 8009d82:	f7ff f8af 	bl	8008ee4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d8a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d8e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d94:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d9a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da6:	2200      	movs	r2, #0
 8009da8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dae:	3354      	adds	r3, #84	; 0x54
 8009db0:	2260      	movs	r2, #96	; 0x60
 8009db2:	2100      	movs	r1, #0
 8009db4:	4618      	mov	r0, r3
 8009db6:	f001 fe99 	bl	800baec <memset>
 8009dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dbc:	4a0c      	ldr	r2, [pc, #48]	; (8009df0 <prvInitialiseNewTask+0x140>)
 8009dbe:	659a      	str	r2, [r3, #88]	; 0x58
 8009dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc2:	4a0c      	ldr	r2, [pc, #48]	; (8009df4 <prvInitialiseNewTask+0x144>)
 8009dc4:	65da      	str	r2, [r3, #92]	; 0x5c
 8009dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc8:	4a0b      	ldr	r2, [pc, #44]	; (8009df8 <prvInitialiseNewTask+0x148>)
 8009dca:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009dcc:	683a      	ldr	r2, [r7, #0]
 8009dce:	68f9      	ldr	r1, [r7, #12]
 8009dd0:	69b8      	ldr	r0, [r7, #24]
 8009dd2:	f001 f8f9 	bl	800afc8 <pxPortInitialiseStack>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dda:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d002      	beq.n	8009de8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009de4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009de6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009de8:	bf00      	nop
 8009dea:	3720      	adds	r7, #32
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}
 8009df0:	0800ec6c 	.word	0x0800ec6c
 8009df4:	0800ec8c 	.word	0x0800ec8c
 8009df8:	0800ec4c 	.word	0x0800ec4c

08009dfc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b082      	sub	sp, #8
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009e04:	f001 fa0e 	bl	800b224 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009e08:	4b26      	ldr	r3, [pc, #152]	; (8009ea4 <prvAddNewTaskToReadyList+0xa8>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	4a25      	ldr	r2, [pc, #148]	; (8009ea4 <prvAddNewTaskToReadyList+0xa8>)
 8009e10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009e12:	4b25      	ldr	r3, [pc, #148]	; (8009ea8 <prvAddNewTaskToReadyList+0xac>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d109      	bne.n	8009e2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009e1a:	4a23      	ldr	r2, [pc, #140]	; (8009ea8 <prvAddNewTaskToReadyList+0xac>)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009e20:	4b20      	ldr	r3, [pc, #128]	; (8009ea4 <prvAddNewTaskToReadyList+0xa8>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	d110      	bne.n	8009e4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009e28:	f000 fbde 	bl	800a5e8 <prvInitialiseTaskLists>
 8009e2c:	e00d      	b.n	8009e4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009e2e:	4b1f      	ldr	r3, [pc, #124]	; (8009eac <prvAddNewTaskToReadyList+0xb0>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d109      	bne.n	8009e4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009e36:	4b1c      	ldr	r3, [pc, #112]	; (8009ea8 <prvAddNewTaskToReadyList+0xac>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d802      	bhi.n	8009e4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009e44:	4a18      	ldr	r2, [pc, #96]	; (8009ea8 <prvAddNewTaskToReadyList+0xac>)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009e4a:	4b19      	ldr	r3, [pc, #100]	; (8009eb0 <prvAddNewTaskToReadyList+0xb4>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	3301      	adds	r3, #1
 8009e50:	4a17      	ldr	r2, [pc, #92]	; (8009eb0 <prvAddNewTaskToReadyList+0xb4>)
 8009e52:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009e54:	4b16      	ldr	r3, [pc, #88]	; (8009eb0 <prvAddNewTaskToReadyList+0xb4>)
 8009e56:	681a      	ldr	r2, [r3, #0]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e60:	4b14      	ldr	r3, [pc, #80]	; (8009eb4 <prvAddNewTaskToReadyList+0xb8>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d903      	bls.n	8009e70 <prvAddNewTaskToReadyList+0x74>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e6c:	4a11      	ldr	r2, [pc, #68]	; (8009eb4 <prvAddNewTaskToReadyList+0xb8>)
 8009e6e:	6013      	str	r3, [r2, #0]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e74:	4613      	mov	r3, r2
 8009e76:	009b      	lsls	r3, r3, #2
 8009e78:	4413      	add	r3, r2
 8009e7a:	009b      	lsls	r3, r3, #2
 8009e7c:	4a0e      	ldr	r2, [pc, #56]	; (8009eb8 <prvAddNewTaskToReadyList+0xbc>)
 8009e7e:	441a      	add	r2, r3
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	3304      	adds	r3, #4
 8009e84:	4619      	mov	r1, r3
 8009e86:	4610      	mov	r0, r2
 8009e88:	f7ff f839 	bl	8008efe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009e8c:	f001 f9fa 	bl	800b284 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009e90:	4b06      	ldr	r3, [pc, #24]	; (8009eac <prvAddNewTaskToReadyList+0xb0>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d001      	beq.n	8009e9c <prvAddNewTaskToReadyList+0xa0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009e98:	4b03      	ldr	r3, [pc, #12]	; (8009ea8 <prvAddNewTaskToReadyList+0xac>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e9c:	bf00      	nop
 8009e9e:	3708      	adds	r7, #8
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}
 8009ea4:	200018b4 	.word	0x200018b4
 8009ea8:	200013e0 	.word	0x200013e0
 8009eac:	200018c0 	.word	0x200018c0
 8009eb0:	200018d0 	.word	0x200018d0
 8009eb4:	200018bc 	.word	0x200018bc
 8009eb8:	200013e4 	.word	0x200013e4

08009ebc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d017      	beq.n	8009efe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009ece:	4b13      	ldr	r3, [pc, #76]	; (8009f1c <vTaskDelay+0x60>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d00a      	beq.n	8009eec <vTaskDelay+0x30>
	__asm volatile
 8009ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eda:	f383 8811 	msr	BASEPRI, r3
 8009ede:	f3bf 8f6f 	isb	sy
 8009ee2:	f3bf 8f4f 	dsb	sy
 8009ee6:	60bb      	str	r3, [r7, #8]
}
 8009ee8:	bf00      	nop
 8009eea:	e7fe      	b.n	8009eea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009eec:	f000 f88a 	bl	800a004 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009ef0:	2100      	movs	r1, #0
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 fcc6 	bl	800a884 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009ef8:	f000 f892 	bl	800a020 <xTaskResumeAll>
 8009efc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d107      	bne.n	8009f14 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009f04:	4b06      	ldr	r3, [pc, #24]	; (8009f20 <vTaskDelay+0x64>)
 8009f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f0a:	601a      	str	r2, [r3, #0]
 8009f0c:	f3bf 8f4f 	dsb	sy
 8009f10:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009f14:	bf00      	nop
 8009f16:	3710      	adds	r7, #16
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}
 8009f1c:	200018dc 	.word	0x200018dc
 8009f20:	e000ed04 	.word	0xe000ed04

08009f24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b08a      	sub	sp, #40	; 0x28
 8009f28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009f32:	463a      	mov	r2, r7
 8009f34:	1d39      	adds	r1, r7, #4
 8009f36:	f107 0308 	add.w	r3, r7, #8
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f7fe ff7e 	bl	8008e3c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009f40:	6839      	ldr	r1, [r7, #0]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	68ba      	ldr	r2, [r7, #8]
 8009f46:	9202      	str	r2, [sp, #8]
 8009f48:	9301      	str	r3, [sp, #4]
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	9300      	str	r3, [sp, #0]
 8009f4e:	2300      	movs	r3, #0
 8009f50:	460a      	mov	r2, r1
 8009f52:	4924      	ldr	r1, [pc, #144]	; (8009fe4 <vTaskStartScheduler+0xc0>)
 8009f54:	4824      	ldr	r0, [pc, #144]	; (8009fe8 <vTaskStartScheduler+0xc4>)
 8009f56:	f7ff fe09 	bl	8009b6c <xTaskCreateStatic>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	4a23      	ldr	r2, [pc, #140]	; (8009fec <vTaskStartScheduler+0xc8>)
 8009f5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009f60:	4b22      	ldr	r3, [pc, #136]	; (8009fec <vTaskStartScheduler+0xc8>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d002      	beq.n	8009f6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	617b      	str	r3, [r7, #20]
 8009f6c:	e001      	b.n	8009f72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d102      	bne.n	8009f7e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009f78:	f000 fcd8 	bl	800a92c <xTimerCreateTimerTask>
 8009f7c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	d11b      	bne.n	8009fbc <vTaskStartScheduler+0x98>
	__asm volatile
 8009f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f88:	f383 8811 	msr	BASEPRI, r3
 8009f8c:	f3bf 8f6f 	isb	sy
 8009f90:	f3bf 8f4f 	dsb	sy
 8009f94:	613b      	str	r3, [r7, #16]
}
 8009f96:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009f98:	4b15      	ldr	r3, [pc, #84]	; (8009ff0 <vTaskStartScheduler+0xcc>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	3354      	adds	r3, #84	; 0x54
 8009f9e:	4a15      	ldr	r2, [pc, #84]	; (8009ff4 <vTaskStartScheduler+0xd0>)
 8009fa0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009fa2:	4b15      	ldr	r3, [pc, #84]	; (8009ff8 <vTaskStartScheduler+0xd4>)
 8009fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8009fa8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009faa:	4b14      	ldr	r3, [pc, #80]	; (8009ffc <vTaskStartScheduler+0xd8>)
 8009fac:	2201      	movs	r2, #1
 8009fae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009fb0:	4b13      	ldr	r3, [pc, #76]	; (800a000 <vTaskStartScheduler+0xdc>)
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009fb6:	f001 f893 	bl	800b0e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009fba:	e00e      	b.n	8009fda <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fc2:	d10a      	bne.n	8009fda <vTaskStartScheduler+0xb6>
	__asm volatile
 8009fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc8:	f383 8811 	msr	BASEPRI, r3
 8009fcc:	f3bf 8f6f 	isb	sy
 8009fd0:	f3bf 8f4f 	dsb	sy
 8009fd4:	60fb      	str	r3, [r7, #12]
}
 8009fd6:	bf00      	nop
 8009fd8:	e7fe      	b.n	8009fd8 <vTaskStartScheduler+0xb4>
}
 8009fda:	bf00      	nop
 8009fdc:	3718      	adds	r7, #24
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	0800ebc8 	.word	0x0800ebc8
 8009fe8:	0800a5c5 	.word	0x0800a5c5
 8009fec:	200018d8 	.word	0x200018d8
 8009ff0:	200013e0 	.word	0x200013e0
 8009ff4:	20000068 	.word	0x20000068
 8009ff8:	200018d4 	.word	0x200018d4
 8009ffc:	200018c0 	.word	0x200018c0
 800a000:	200018b8 	.word	0x200018b8

0800a004 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a004:	b480      	push	{r7}
 800a006:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a008:	4b04      	ldr	r3, [pc, #16]	; (800a01c <vTaskSuspendAll+0x18>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	3301      	adds	r3, #1
 800a00e:	4a03      	ldr	r2, [pc, #12]	; (800a01c <vTaskSuspendAll+0x18>)
 800a010:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a012:	bf00      	nop
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr
 800a01c:	200018dc 	.word	0x200018dc

0800a020 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a026:	2300      	movs	r3, #0
 800a028:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a02a:	2300      	movs	r3, #0
 800a02c:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a02e:	4b3c      	ldr	r3, [pc, #240]	; (800a120 <xTaskResumeAll+0x100>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d10a      	bne.n	800a04c <xTaskResumeAll+0x2c>
	__asm volatile
 800a036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a03a:	f383 8811 	msr	BASEPRI, r3
 800a03e:	f3bf 8f6f 	isb	sy
 800a042:	f3bf 8f4f 	dsb	sy
 800a046:	603b      	str	r3, [r7, #0]
}
 800a048:	bf00      	nop
 800a04a:	e7fe      	b.n	800a04a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a04c:	f001 f8ea 	bl	800b224 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a050:	4b33      	ldr	r3, [pc, #204]	; (800a120 <xTaskResumeAll+0x100>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	3b01      	subs	r3, #1
 800a056:	4a32      	ldr	r2, [pc, #200]	; (800a120 <xTaskResumeAll+0x100>)
 800a058:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a05a:	4b31      	ldr	r3, [pc, #196]	; (800a120 <xTaskResumeAll+0x100>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d156      	bne.n	800a110 <xTaskResumeAll+0xf0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a062:	4b30      	ldr	r3, [pc, #192]	; (800a124 <xTaskResumeAll+0x104>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d052      	beq.n	800a110 <xTaskResumeAll+0xf0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a06a:	e02f      	b.n	800a0cc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a06c:	4b2e      	ldr	r3, [pc, #184]	; (800a128 <xTaskResumeAll+0x108>)
 800a06e:	68db      	ldr	r3, [r3, #12]
 800a070:	68db      	ldr	r3, [r3, #12]
 800a072:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	3318      	adds	r3, #24
 800a078:	4618      	mov	r0, r3
 800a07a:	f7fe ff9d 	bl	8008fb8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	3304      	adds	r3, #4
 800a082:	4618      	mov	r0, r3
 800a084:	f7fe ff98 	bl	8008fb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a08c:	4b27      	ldr	r3, [pc, #156]	; (800a12c <xTaskResumeAll+0x10c>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	429a      	cmp	r2, r3
 800a092:	d903      	bls.n	800a09c <xTaskResumeAll+0x7c>
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a098:	4a24      	ldr	r2, [pc, #144]	; (800a12c <xTaskResumeAll+0x10c>)
 800a09a:	6013      	str	r3, [r2, #0]
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0a0:	4613      	mov	r3, r2
 800a0a2:	009b      	lsls	r3, r3, #2
 800a0a4:	4413      	add	r3, r2
 800a0a6:	009b      	lsls	r3, r3, #2
 800a0a8:	4a21      	ldr	r2, [pc, #132]	; (800a130 <xTaskResumeAll+0x110>)
 800a0aa:	441a      	add	r2, r3
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	3304      	adds	r3, #4
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	4610      	mov	r0, r2
 800a0b4:	f7fe ff23 	bl	8008efe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0bc:	4b1d      	ldr	r3, [pc, #116]	; (800a134 <xTaskResumeAll+0x114>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d302      	bcc.n	800a0cc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a0c6:	4b1c      	ldr	r3, [pc, #112]	; (800a138 <xTaskResumeAll+0x118>)
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a0cc:	4b16      	ldr	r3, [pc, #88]	; (800a128 <xTaskResumeAll+0x108>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d1cb      	bne.n	800a06c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d001      	beq.n	800a0de <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a0da:	f000 fb27 	bl	800a72c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a0de:	4b17      	ldr	r3, [pc, #92]	; (800a13c <xTaskResumeAll+0x11c>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d010      	beq.n	800a10c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a0ea:	f000 f839 	bl	800a160 <xTaskIncrementTick>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d002      	beq.n	800a0fa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a0f4:	4b10      	ldr	r3, [pc, #64]	; (800a138 <xTaskResumeAll+0x118>)
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	3b01      	subs	r3, #1
 800a0fe:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d1f1      	bne.n	800a0ea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a106:	4b0d      	ldr	r3, [pc, #52]	; (800a13c <xTaskResumeAll+0x11c>)
 800a108:	2200      	movs	r2, #0
 800a10a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a10c:	4b0a      	ldr	r3, [pc, #40]	; (800a138 <xTaskResumeAll+0x118>)
 800a10e:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a110:	f001 f8b8 	bl	800b284 <vPortExitCritical>

	return xAlreadyYielded;
 800a114:	687b      	ldr	r3, [r7, #4]
}
 800a116:	4618      	mov	r0, r3
 800a118:	3710      	adds	r7, #16
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	200018dc 	.word	0x200018dc
 800a124:	200018b4 	.word	0x200018b4
 800a128:	20001874 	.word	0x20001874
 800a12c:	200018bc 	.word	0x200018bc
 800a130:	200013e4 	.word	0x200013e4
 800a134:	200013e0 	.word	0x200013e0
 800a138:	200018c8 	.word	0x200018c8
 800a13c:	200018c4 	.word	0x200018c4

0800a140 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a140:	b480      	push	{r7}
 800a142:	b083      	sub	sp, #12
 800a144:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a146:	4b05      	ldr	r3, [pc, #20]	; (800a15c <xTaskGetTickCount+0x1c>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a14c:	687b      	ldr	r3, [r7, #4]
}
 800a14e:	4618      	mov	r0, r3
 800a150:	370c      	adds	r7, #12
 800a152:	46bd      	mov	sp, r7
 800a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a158:	4770      	bx	lr
 800a15a:	bf00      	nop
 800a15c:	200018b8 	.word	0x200018b8

0800a160 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b086      	sub	sp, #24
 800a164:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a166:	2300      	movs	r3, #0
 800a168:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a16a:	4b3f      	ldr	r3, [pc, #252]	; (800a268 <xTaskIncrementTick+0x108>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d170      	bne.n	800a254 <xTaskIncrementTick+0xf4>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a172:	4b3e      	ldr	r3, [pc, #248]	; (800a26c <xTaskIncrementTick+0x10c>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	3301      	adds	r3, #1
 800a178:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a17a:	4a3c      	ldr	r2, [pc, #240]	; (800a26c <xTaskIncrementTick+0x10c>)
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d120      	bne.n	800a1c8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800a186:	4b3a      	ldr	r3, [pc, #232]	; (800a270 <xTaskIncrementTick+0x110>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d00a      	beq.n	800a1a6 <xTaskIncrementTick+0x46>
	__asm volatile
 800a190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a194:	f383 8811 	msr	BASEPRI, r3
 800a198:	f3bf 8f6f 	isb	sy
 800a19c:	f3bf 8f4f 	dsb	sy
 800a1a0:	603b      	str	r3, [r7, #0]
}
 800a1a2:	bf00      	nop
 800a1a4:	e7fe      	b.n	800a1a4 <xTaskIncrementTick+0x44>
 800a1a6:	4b32      	ldr	r3, [pc, #200]	; (800a270 <xTaskIncrementTick+0x110>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	60fb      	str	r3, [r7, #12]
 800a1ac:	4b31      	ldr	r3, [pc, #196]	; (800a274 <xTaskIncrementTick+0x114>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4a2f      	ldr	r2, [pc, #188]	; (800a270 <xTaskIncrementTick+0x110>)
 800a1b2:	6013      	str	r3, [r2, #0]
 800a1b4:	4a2f      	ldr	r2, [pc, #188]	; (800a274 <xTaskIncrementTick+0x114>)
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	6013      	str	r3, [r2, #0]
 800a1ba:	4b2f      	ldr	r3, [pc, #188]	; (800a278 <xTaskIncrementTick+0x118>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	3301      	adds	r3, #1
 800a1c0:	4a2d      	ldr	r2, [pc, #180]	; (800a278 <xTaskIncrementTick+0x118>)
 800a1c2:	6013      	str	r3, [r2, #0]
 800a1c4:	f000 fab2 	bl	800a72c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a1c8:	4b2c      	ldr	r3, [pc, #176]	; (800a27c <xTaskIncrementTick+0x11c>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	693a      	ldr	r2, [r7, #16]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d345      	bcc.n	800a25e <xTaskIncrementTick+0xfe>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1d2:	4b27      	ldr	r3, [pc, #156]	; (800a270 <xTaskIncrementTick+0x110>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d104      	bne.n	800a1e6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1dc:	4b27      	ldr	r3, [pc, #156]	; (800a27c <xTaskIncrementTick+0x11c>)
 800a1de:	f04f 32ff 	mov.w	r2, #4294967295
 800a1e2:	601a      	str	r2, [r3, #0]
					break;
 800a1e4:	e03b      	b.n	800a25e <xTaskIncrementTick+0xfe>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1e6:	4b22      	ldr	r3, [pc, #136]	; (800a270 <xTaskIncrementTick+0x110>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	68db      	ldr	r3, [r3, #12]
 800a1ec:	68db      	ldr	r3, [r3, #12]
 800a1ee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a1f6:	693a      	ldr	r2, [r7, #16]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d203      	bcs.n	800a206 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a1fe:	4a1f      	ldr	r2, [pc, #124]	; (800a27c <xTaskIncrementTick+0x11c>)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a204:	e02b      	b.n	800a25e <xTaskIncrementTick+0xfe>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	3304      	adds	r3, #4
 800a20a:	4618      	mov	r0, r3
 800a20c:	f7fe fed4 	bl	8008fb8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a214:	2b00      	cmp	r3, #0
 800a216:	d004      	beq.n	800a222 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	3318      	adds	r3, #24
 800a21c:	4618      	mov	r0, r3
 800a21e:	f7fe fecb 	bl	8008fb8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a226:	4b16      	ldr	r3, [pc, #88]	; (800a280 <xTaskIncrementTick+0x120>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d903      	bls.n	800a236 <xTaskIncrementTick+0xd6>
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a232:	4a13      	ldr	r2, [pc, #76]	; (800a280 <xTaskIncrementTick+0x120>)
 800a234:	6013      	str	r3, [r2, #0]
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a23a:	4613      	mov	r3, r2
 800a23c:	009b      	lsls	r3, r3, #2
 800a23e:	4413      	add	r3, r2
 800a240:	009b      	lsls	r3, r3, #2
 800a242:	4a10      	ldr	r2, [pc, #64]	; (800a284 <xTaskIncrementTick+0x124>)
 800a244:	441a      	add	r2, r3
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	3304      	adds	r3, #4
 800a24a:	4619      	mov	r1, r3
 800a24c:	4610      	mov	r0, r2
 800a24e:	f7fe fe56 	bl	8008efe <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a252:	e7be      	b.n	800a1d2 <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a254:	4b0c      	ldr	r3, [pc, #48]	; (800a288 <xTaskIncrementTick+0x128>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	3301      	adds	r3, #1
 800a25a:	4a0b      	ldr	r2, [pc, #44]	; (800a288 <xTaskIncrementTick+0x128>)
 800a25c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a25e:	697b      	ldr	r3, [r7, #20]
}
 800a260:	4618      	mov	r0, r3
 800a262:	3718      	adds	r7, #24
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}
 800a268:	200018dc 	.word	0x200018dc
 800a26c:	200018b8 	.word	0x200018b8
 800a270:	2000186c 	.word	0x2000186c
 800a274:	20001870 	.word	0x20001870
 800a278:	200018cc 	.word	0x200018cc
 800a27c:	200018d4 	.word	0x200018d4
 800a280:	200018bc 	.word	0x200018bc
 800a284:	200013e4 	.word	0x200013e4
 800a288:	200018c4 	.word	0x200018c4

0800a28c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a28c:	b480      	push	{r7}
 800a28e:	b085      	sub	sp, #20
 800a290:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a292:	4b2a      	ldr	r3, [pc, #168]	; (800a33c <vTaskSwitchContext+0xb0>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d003      	beq.n	800a2a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a29a:	4b29      	ldr	r3, [pc, #164]	; (800a340 <vTaskSwitchContext+0xb4>)
 800a29c:	2201      	movs	r2, #1
 800a29e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a2a0:	e046      	b.n	800a330 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a2a2:	4b27      	ldr	r3, [pc, #156]	; (800a340 <vTaskSwitchContext+0xb4>)
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2a8:	4b26      	ldr	r3, [pc, #152]	; (800a344 <vTaskSwitchContext+0xb8>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	60fb      	str	r3, [r7, #12]
 800a2ae:	e010      	b.n	800a2d2 <vTaskSwitchContext+0x46>
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d10a      	bne.n	800a2cc <vTaskSwitchContext+0x40>
	__asm volatile
 800a2b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ba:	f383 8811 	msr	BASEPRI, r3
 800a2be:	f3bf 8f6f 	isb	sy
 800a2c2:	f3bf 8f4f 	dsb	sy
 800a2c6:	607b      	str	r3, [r7, #4]
}
 800a2c8:	bf00      	nop
 800a2ca:	e7fe      	b.n	800a2ca <vTaskSwitchContext+0x3e>
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	3b01      	subs	r3, #1
 800a2d0:	60fb      	str	r3, [r7, #12]
 800a2d2:	491d      	ldr	r1, [pc, #116]	; (800a348 <vTaskSwitchContext+0xbc>)
 800a2d4:	68fa      	ldr	r2, [r7, #12]
 800a2d6:	4613      	mov	r3, r2
 800a2d8:	009b      	lsls	r3, r3, #2
 800a2da:	4413      	add	r3, r2
 800a2dc:	009b      	lsls	r3, r3, #2
 800a2de:	440b      	add	r3, r1
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d0e4      	beq.n	800a2b0 <vTaskSwitchContext+0x24>
 800a2e6:	68fa      	ldr	r2, [r7, #12]
 800a2e8:	4613      	mov	r3, r2
 800a2ea:	009b      	lsls	r3, r3, #2
 800a2ec:	4413      	add	r3, r2
 800a2ee:	009b      	lsls	r3, r3, #2
 800a2f0:	4a15      	ldr	r2, [pc, #84]	; (800a348 <vTaskSwitchContext+0xbc>)
 800a2f2:	4413      	add	r3, r2
 800a2f4:	60bb      	str	r3, [r7, #8]
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	685a      	ldr	r2, [r3, #4]
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	605a      	str	r2, [r3, #4]
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	685a      	ldr	r2, [r3, #4]
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	3308      	adds	r3, #8
 800a308:	429a      	cmp	r2, r3
 800a30a:	d104      	bne.n	800a316 <vTaskSwitchContext+0x8a>
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	685a      	ldr	r2, [r3, #4]
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	605a      	str	r2, [r3, #4]
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	68db      	ldr	r3, [r3, #12]
 800a31c:	4a0b      	ldr	r2, [pc, #44]	; (800a34c <vTaskSwitchContext+0xc0>)
 800a31e:	6013      	str	r3, [r2, #0]
 800a320:	4a08      	ldr	r2, [pc, #32]	; (800a344 <vTaskSwitchContext+0xb8>)
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a326:	4b09      	ldr	r3, [pc, #36]	; (800a34c <vTaskSwitchContext+0xc0>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	3354      	adds	r3, #84	; 0x54
 800a32c:	4a08      	ldr	r2, [pc, #32]	; (800a350 <vTaskSwitchContext+0xc4>)
 800a32e:	6013      	str	r3, [r2, #0]
}
 800a330:	bf00      	nop
 800a332:	3714      	adds	r7, #20
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr
 800a33c:	200018dc 	.word	0x200018dc
 800a340:	200018c8 	.word	0x200018c8
 800a344:	200018bc 	.word	0x200018bc
 800a348:	200013e4 	.word	0x200013e4
 800a34c:	200013e0 	.word	0x200013e0
 800a350:	20000068 	.word	0x20000068

0800a354 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b084      	sub	sp, #16
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d10a      	bne.n	800a37a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a368:	f383 8811 	msr	BASEPRI, r3
 800a36c:	f3bf 8f6f 	isb	sy
 800a370:	f3bf 8f4f 	dsb	sy
 800a374:	60fb      	str	r3, [r7, #12]
}
 800a376:	bf00      	nop
 800a378:	e7fe      	b.n	800a378 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a37a:	4b07      	ldr	r3, [pc, #28]	; (800a398 <vTaskPlaceOnEventList+0x44>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	3318      	adds	r3, #24
 800a380:	4619      	mov	r1, r3
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f7fe fddf 	bl	8008f46 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a388:	2101      	movs	r1, #1
 800a38a:	6838      	ldr	r0, [r7, #0]
 800a38c:	f000 fa7a 	bl	800a884 <prvAddCurrentTaskToDelayedList>
}
 800a390:	bf00      	nop
 800a392:	3710      	adds	r7, #16
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}
 800a398:	200013e0 	.word	0x200013e0

0800a39c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b086      	sub	sp, #24
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d10a      	bne.n	800a3c4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b2:	f383 8811 	msr	BASEPRI, r3
 800a3b6:	f3bf 8f6f 	isb	sy
 800a3ba:	f3bf 8f4f 	dsb	sy
 800a3be:	617b      	str	r3, [r7, #20]
}
 800a3c0:	bf00      	nop
 800a3c2:	e7fe      	b.n	800a3c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a3c4:	4b0a      	ldr	r3, [pc, #40]	; (800a3f0 <vTaskPlaceOnEventListRestricted+0x54>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	3318      	adds	r3, #24
 800a3ca:	4619      	mov	r1, r3
 800a3cc:	68f8      	ldr	r0, [r7, #12]
 800a3ce:	f7fe fd96 	bl	8008efe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d002      	beq.n	800a3de <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a3d8:	f04f 33ff 	mov.w	r3, #4294967295
 800a3dc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a3de:	6879      	ldr	r1, [r7, #4]
 800a3e0:	68b8      	ldr	r0, [r7, #8]
 800a3e2:	f000 fa4f 	bl	800a884 <prvAddCurrentTaskToDelayedList>
	}
 800a3e6:	bf00      	nop
 800a3e8:	3718      	adds	r7, #24
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	200013e0 	.word	0x200013e0

0800a3f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b086      	sub	sp, #24
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	68db      	ldr	r3, [r3, #12]
 800a400:	68db      	ldr	r3, [r3, #12]
 800a402:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d10a      	bne.n	800a420 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a40e:	f383 8811 	msr	BASEPRI, r3
 800a412:	f3bf 8f6f 	isb	sy
 800a416:	f3bf 8f4f 	dsb	sy
 800a41a:	60fb      	str	r3, [r7, #12]
}
 800a41c:	bf00      	nop
 800a41e:	e7fe      	b.n	800a41e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	3318      	adds	r3, #24
 800a424:	4618      	mov	r0, r3
 800a426:	f7fe fdc7 	bl	8008fb8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a42a:	4b1e      	ldr	r3, [pc, #120]	; (800a4a4 <xTaskRemoveFromEventList+0xb0>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d11d      	bne.n	800a46e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	3304      	adds	r3, #4
 800a436:	4618      	mov	r0, r3
 800a438:	f7fe fdbe 	bl	8008fb8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a440:	4b19      	ldr	r3, [pc, #100]	; (800a4a8 <xTaskRemoveFromEventList+0xb4>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	429a      	cmp	r2, r3
 800a446:	d903      	bls.n	800a450 <xTaskRemoveFromEventList+0x5c>
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a44c:	4a16      	ldr	r2, [pc, #88]	; (800a4a8 <xTaskRemoveFromEventList+0xb4>)
 800a44e:	6013      	str	r3, [r2, #0]
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a454:	4613      	mov	r3, r2
 800a456:	009b      	lsls	r3, r3, #2
 800a458:	4413      	add	r3, r2
 800a45a:	009b      	lsls	r3, r3, #2
 800a45c:	4a13      	ldr	r2, [pc, #76]	; (800a4ac <xTaskRemoveFromEventList+0xb8>)
 800a45e:	441a      	add	r2, r3
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	3304      	adds	r3, #4
 800a464:	4619      	mov	r1, r3
 800a466:	4610      	mov	r0, r2
 800a468:	f7fe fd49 	bl	8008efe <vListInsertEnd>
 800a46c:	e005      	b.n	800a47a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	3318      	adds	r3, #24
 800a472:	4619      	mov	r1, r3
 800a474:	480e      	ldr	r0, [pc, #56]	; (800a4b0 <xTaskRemoveFromEventList+0xbc>)
 800a476:	f7fe fd42 	bl	8008efe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a47e:	4b0d      	ldr	r3, [pc, #52]	; (800a4b4 <xTaskRemoveFromEventList+0xc0>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a484:	429a      	cmp	r2, r3
 800a486:	d905      	bls.n	800a494 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a488:	2301      	movs	r3, #1
 800a48a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a48c:	4b0a      	ldr	r3, [pc, #40]	; (800a4b8 <xTaskRemoveFromEventList+0xc4>)
 800a48e:	2201      	movs	r2, #1
 800a490:	601a      	str	r2, [r3, #0]
 800a492:	e001      	b.n	800a498 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a494:	2300      	movs	r3, #0
 800a496:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a498:	697b      	ldr	r3, [r7, #20]
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3718      	adds	r7, #24
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	200018dc 	.word	0x200018dc
 800a4a8:	200018bc 	.word	0x200018bc
 800a4ac:	200013e4 	.word	0x200013e4
 800a4b0:	20001874 	.word	0x20001874
 800a4b4:	200013e0 	.word	0x200013e0
 800a4b8:	200018c8 	.word	0x200018c8

0800a4bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b083      	sub	sp, #12
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a4c4:	4b06      	ldr	r3, [pc, #24]	; (800a4e0 <vTaskInternalSetTimeOutState+0x24>)
 800a4c6:	681a      	ldr	r2, [r3, #0]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a4cc:	4b05      	ldr	r3, [pc, #20]	; (800a4e4 <vTaskInternalSetTimeOutState+0x28>)
 800a4ce:	681a      	ldr	r2, [r3, #0]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	605a      	str	r2, [r3, #4]
}
 800a4d4:	bf00      	nop
 800a4d6:	370c      	adds	r7, #12
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr
 800a4e0:	200018cc 	.word	0x200018cc
 800a4e4:	200018b8 	.word	0x200018b8

0800a4e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b088      	sub	sp, #32
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d10a      	bne.n	800a50e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4fc:	f383 8811 	msr	BASEPRI, r3
 800a500:	f3bf 8f6f 	isb	sy
 800a504:	f3bf 8f4f 	dsb	sy
 800a508:	613b      	str	r3, [r7, #16]
}
 800a50a:	bf00      	nop
 800a50c:	e7fe      	b.n	800a50c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d10a      	bne.n	800a52a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a518:	f383 8811 	msr	BASEPRI, r3
 800a51c:	f3bf 8f6f 	isb	sy
 800a520:	f3bf 8f4f 	dsb	sy
 800a524:	60fb      	str	r3, [r7, #12]
}
 800a526:	bf00      	nop
 800a528:	e7fe      	b.n	800a528 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a52a:	f000 fe7b 	bl	800b224 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a52e:	4b1d      	ldr	r3, [pc, #116]	; (800a5a4 <xTaskCheckForTimeOut+0xbc>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	69ba      	ldr	r2, [r7, #24]
 800a53a:	1ad3      	subs	r3, r2, r3
 800a53c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a546:	d102      	bne.n	800a54e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a548:	2300      	movs	r3, #0
 800a54a:	61fb      	str	r3, [r7, #28]
 800a54c:	e023      	b.n	800a596 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681a      	ldr	r2, [r3, #0]
 800a552:	4b15      	ldr	r3, [pc, #84]	; (800a5a8 <xTaskCheckForTimeOut+0xc0>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	429a      	cmp	r2, r3
 800a558:	d007      	beq.n	800a56a <xTaskCheckForTimeOut+0x82>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	685b      	ldr	r3, [r3, #4]
 800a55e:	69ba      	ldr	r2, [r7, #24]
 800a560:	429a      	cmp	r2, r3
 800a562:	d302      	bcc.n	800a56a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a564:	2301      	movs	r3, #1
 800a566:	61fb      	str	r3, [r7, #28]
 800a568:	e015      	b.n	800a596 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	697a      	ldr	r2, [r7, #20]
 800a570:	429a      	cmp	r2, r3
 800a572:	d20b      	bcs.n	800a58c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	681a      	ldr	r2, [r3, #0]
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	1ad2      	subs	r2, r2, r3
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f7ff ff9b 	bl	800a4bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a586:	2300      	movs	r3, #0
 800a588:	61fb      	str	r3, [r7, #28]
 800a58a:	e004      	b.n	800a596 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	2200      	movs	r2, #0
 800a590:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a592:	2301      	movs	r3, #1
 800a594:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a596:	f000 fe75 	bl	800b284 <vPortExitCritical>

	return xReturn;
 800a59a:	69fb      	ldr	r3, [r7, #28]
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3720      	adds	r7, #32
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}
 800a5a4:	200018b8 	.word	0x200018b8
 800a5a8:	200018cc 	.word	0x200018cc

0800a5ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a5b0:	4b03      	ldr	r3, [pc, #12]	; (800a5c0 <vTaskMissedYield+0x14>)
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	601a      	str	r2, [r3, #0]
}
 800a5b6:	bf00      	nop
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr
 800a5c0:	200018c8 	.word	0x200018c8

0800a5c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b082      	sub	sp, #8
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a5cc:	f000 f84c 	bl	800a668 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 800a5d0:	4b04      	ldr	r3, [pc, #16]	; (800a5e4 <prvIdleTask+0x20>)
 800a5d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5d6:	601a      	str	r2, [r3, #0]
 800a5d8:	f3bf 8f4f 	dsb	sy
 800a5dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a5e0:	e7f4      	b.n	800a5cc <prvIdleTask+0x8>
 800a5e2:	bf00      	nop
 800a5e4:	e000ed04 	.word	0xe000ed04

0800a5e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b082      	sub	sp, #8
 800a5ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	607b      	str	r3, [r7, #4]
 800a5f2:	e00c      	b.n	800a60e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a5f4:	687a      	ldr	r2, [r7, #4]
 800a5f6:	4613      	mov	r3, r2
 800a5f8:	009b      	lsls	r3, r3, #2
 800a5fa:	4413      	add	r3, r2
 800a5fc:	009b      	lsls	r3, r3, #2
 800a5fe:	4a12      	ldr	r2, [pc, #72]	; (800a648 <prvInitialiseTaskLists+0x60>)
 800a600:	4413      	add	r3, r2
 800a602:	4618      	mov	r0, r3
 800a604:	f7fe fc4e 	bl	8008ea4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	3301      	adds	r3, #1
 800a60c:	607b      	str	r3, [r7, #4]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2b37      	cmp	r3, #55	; 0x37
 800a612:	d9ef      	bls.n	800a5f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a614:	480d      	ldr	r0, [pc, #52]	; (800a64c <prvInitialiseTaskLists+0x64>)
 800a616:	f7fe fc45 	bl	8008ea4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a61a:	480d      	ldr	r0, [pc, #52]	; (800a650 <prvInitialiseTaskLists+0x68>)
 800a61c:	f7fe fc42 	bl	8008ea4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a620:	480c      	ldr	r0, [pc, #48]	; (800a654 <prvInitialiseTaskLists+0x6c>)
 800a622:	f7fe fc3f 	bl	8008ea4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a626:	480c      	ldr	r0, [pc, #48]	; (800a658 <prvInitialiseTaskLists+0x70>)
 800a628:	f7fe fc3c 	bl	8008ea4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a62c:	480b      	ldr	r0, [pc, #44]	; (800a65c <prvInitialiseTaskLists+0x74>)
 800a62e:	f7fe fc39 	bl	8008ea4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a632:	4b0b      	ldr	r3, [pc, #44]	; (800a660 <prvInitialiseTaskLists+0x78>)
 800a634:	4a05      	ldr	r2, [pc, #20]	; (800a64c <prvInitialiseTaskLists+0x64>)
 800a636:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a638:	4b0a      	ldr	r3, [pc, #40]	; (800a664 <prvInitialiseTaskLists+0x7c>)
 800a63a:	4a05      	ldr	r2, [pc, #20]	; (800a650 <prvInitialiseTaskLists+0x68>)
 800a63c:	601a      	str	r2, [r3, #0]
}
 800a63e:	bf00      	nop
 800a640:	3708      	adds	r7, #8
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}
 800a646:	bf00      	nop
 800a648:	200013e4 	.word	0x200013e4
 800a64c:	20001844 	.word	0x20001844
 800a650:	20001858 	.word	0x20001858
 800a654:	20001874 	.word	0x20001874
 800a658:	20001888 	.word	0x20001888
 800a65c:	200018a0 	.word	0x200018a0
 800a660:	2000186c 	.word	0x2000186c
 800a664:	20001870 	.word	0x20001870

0800a668 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b082      	sub	sp, #8
 800a66c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a66e:	e019      	b.n	800a6a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a670:	f000 fdd8 	bl	800b224 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a674:	4b10      	ldr	r3, [pc, #64]	; (800a6b8 <prvCheckTasksWaitingTermination+0x50>)
 800a676:	68db      	ldr	r3, [r3, #12]
 800a678:	68db      	ldr	r3, [r3, #12]
 800a67a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	3304      	adds	r3, #4
 800a680:	4618      	mov	r0, r3
 800a682:	f7fe fc99 	bl	8008fb8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a686:	4b0d      	ldr	r3, [pc, #52]	; (800a6bc <prvCheckTasksWaitingTermination+0x54>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	3b01      	subs	r3, #1
 800a68c:	4a0b      	ldr	r2, [pc, #44]	; (800a6bc <prvCheckTasksWaitingTermination+0x54>)
 800a68e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a690:	4b0b      	ldr	r3, [pc, #44]	; (800a6c0 <prvCheckTasksWaitingTermination+0x58>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	3b01      	subs	r3, #1
 800a696:	4a0a      	ldr	r2, [pc, #40]	; (800a6c0 <prvCheckTasksWaitingTermination+0x58>)
 800a698:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a69a:	f000 fdf3 	bl	800b284 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f000 f810 	bl	800a6c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a6a4:	4b06      	ldr	r3, [pc, #24]	; (800a6c0 <prvCheckTasksWaitingTermination+0x58>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d1e1      	bne.n	800a670 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a6ac:	bf00      	nop
 800a6ae:	bf00      	nop
 800a6b0:	3708      	adds	r7, #8
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
 800a6b6:	bf00      	nop
 800a6b8:	20001888 	.word	0x20001888
 800a6bc:	200018b4 	.word	0x200018b4
 800a6c0:	2000189c 	.word	0x2000189c

0800a6c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b084      	sub	sp, #16
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	3354      	adds	r3, #84	; 0x54
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f002 f80f 	bl	800c6f4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d108      	bne.n	800a6f2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f000 ff8b 	bl	800b600 <vPortFree>
				vPortFree( pxTCB );
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f000 ff88 	bl	800b600 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a6f0:	e018      	b.n	800a724 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	d103      	bne.n	800a704 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 ff7f 	bl	800b600 <vPortFree>
	}
 800a702:	e00f      	b.n	800a724 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a70a:	2b02      	cmp	r3, #2
 800a70c:	d00a      	beq.n	800a724 <prvDeleteTCB+0x60>
	__asm volatile
 800a70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a712:	f383 8811 	msr	BASEPRI, r3
 800a716:	f3bf 8f6f 	isb	sy
 800a71a:	f3bf 8f4f 	dsb	sy
 800a71e:	60fb      	str	r3, [r7, #12]
}
 800a720:	bf00      	nop
 800a722:	e7fe      	b.n	800a722 <prvDeleteTCB+0x5e>
	}
 800a724:	bf00      	nop
 800a726:	3710      	adds	r7, #16
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}

0800a72c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a72c:	b480      	push	{r7}
 800a72e:	b083      	sub	sp, #12
 800a730:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a732:	4b0c      	ldr	r3, [pc, #48]	; (800a764 <prvResetNextTaskUnblockTime+0x38>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d104      	bne.n	800a746 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a73c:	4b0a      	ldr	r3, [pc, #40]	; (800a768 <prvResetNextTaskUnblockTime+0x3c>)
 800a73e:	f04f 32ff 	mov.w	r2, #4294967295
 800a742:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a744:	e008      	b.n	800a758 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a746:	4b07      	ldr	r3, [pc, #28]	; (800a764 <prvResetNextTaskUnblockTime+0x38>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	68db      	ldr	r3, [r3, #12]
 800a74c:	68db      	ldr	r3, [r3, #12]
 800a74e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	4a04      	ldr	r2, [pc, #16]	; (800a768 <prvResetNextTaskUnblockTime+0x3c>)
 800a756:	6013      	str	r3, [r2, #0]
}
 800a758:	bf00      	nop
 800a75a:	370c      	adds	r7, #12
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr
 800a764:	2000186c 	.word	0x2000186c
 800a768:	200018d4 	.word	0x200018d4

0800a76c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a76c:	b480      	push	{r7}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a772:	4b0b      	ldr	r3, [pc, #44]	; (800a7a0 <xTaskGetSchedulerState+0x34>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d102      	bne.n	800a780 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a77a:	2301      	movs	r3, #1
 800a77c:	607b      	str	r3, [r7, #4]
 800a77e:	e008      	b.n	800a792 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a780:	4b08      	ldr	r3, [pc, #32]	; (800a7a4 <xTaskGetSchedulerState+0x38>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d102      	bne.n	800a78e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a788:	2302      	movs	r3, #2
 800a78a:	607b      	str	r3, [r7, #4]
 800a78c:	e001      	b.n	800a792 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a78e:	2300      	movs	r3, #0
 800a790:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a792:	687b      	ldr	r3, [r7, #4]
	}
 800a794:	4618      	mov	r0, r3
 800a796:	370c      	adds	r7, #12
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr
 800a7a0:	200018c0 	.word	0x200018c0
 800a7a4:	200018dc 	.word	0x200018dc

0800a7a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b086      	sub	sp, #24
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d056      	beq.n	800a86c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a7be:	4b2e      	ldr	r3, [pc, #184]	; (800a878 <xTaskPriorityDisinherit+0xd0>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	693a      	ldr	r2, [r7, #16]
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d00a      	beq.n	800a7de <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7cc:	f383 8811 	msr	BASEPRI, r3
 800a7d0:	f3bf 8f6f 	isb	sy
 800a7d4:	f3bf 8f4f 	dsb	sy
 800a7d8:	60fb      	str	r3, [r7, #12]
}
 800a7da:	bf00      	nop
 800a7dc:	e7fe      	b.n	800a7dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d10a      	bne.n	800a7fc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ea:	f383 8811 	msr	BASEPRI, r3
 800a7ee:	f3bf 8f6f 	isb	sy
 800a7f2:	f3bf 8f4f 	dsb	sy
 800a7f6:	60bb      	str	r3, [r7, #8]
}
 800a7f8:	bf00      	nop
 800a7fa:	e7fe      	b.n	800a7fa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a800:	1e5a      	subs	r2, r3, #1
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a80e:	429a      	cmp	r2, r3
 800a810:	d02c      	beq.n	800a86c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a816:	2b00      	cmp	r3, #0
 800a818:	d128      	bne.n	800a86c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	3304      	adds	r3, #4
 800a81e:	4618      	mov	r0, r3
 800a820:	f7fe fbca 	bl	8008fb8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a830:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a83c:	4b0f      	ldr	r3, [pc, #60]	; (800a87c <xTaskPriorityDisinherit+0xd4>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	429a      	cmp	r2, r3
 800a842:	d903      	bls.n	800a84c <xTaskPriorityDisinherit+0xa4>
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a848:	4a0c      	ldr	r2, [pc, #48]	; (800a87c <xTaskPriorityDisinherit+0xd4>)
 800a84a:	6013      	str	r3, [r2, #0]
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a850:	4613      	mov	r3, r2
 800a852:	009b      	lsls	r3, r3, #2
 800a854:	4413      	add	r3, r2
 800a856:	009b      	lsls	r3, r3, #2
 800a858:	4a09      	ldr	r2, [pc, #36]	; (800a880 <xTaskPriorityDisinherit+0xd8>)
 800a85a:	441a      	add	r2, r3
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	3304      	adds	r3, #4
 800a860:	4619      	mov	r1, r3
 800a862:	4610      	mov	r0, r2
 800a864:	f7fe fb4b 	bl	8008efe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a868:	2301      	movs	r3, #1
 800a86a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a86c:	697b      	ldr	r3, [r7, #20]
	}
 800a86e:	4618      	mov	r0, r3
 800a870:	3718      	adds	r7, #24
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop
 800a878:	200013e0 	.word	0x200013e0
 800a87c:	200018bc 	.word	0x200018bc
 800a880:	200013e4 	.word	0x200013e4

0800a884 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b084      	sub	sp, #16
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a88e:	4b21      	ldr	r3, [pc, #132]	; (800a914 <prvAddCurrentTaskToDelayedList+0x90>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a894:	4b20      	ldr	r3, [pc, #128]	; (800a918 <prvAddCurrentTaskToDelayedList+0x94>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	3304      	adds	r3, #4
 800a89a:	4618      	mov	r0, r3
 800a89c:	f7fe fb8c 	bl	8008fb8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8a6:	d10a      	bne.n	800a8be <prvAddCurrentTaskToDelayedList+0x3a>
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d007      	beq.n	800a8be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a8ae:	4b1a      	ldr	r3, [pc, #104]	; (800a918 <prvAddCurrentTaskToDelayedList+0x94>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	3304      	adds	r3, #4
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	4819      	ldr	r0, [pc, #100]	; (800a91c <prvAddCurrentTaskToDelayedList+0x98>)
 800a8b8:	f7fe fb21 	bl	8008efe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a8bc:	e026      	b.n	800a90c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a8be:	68fa      	ldr	r2, [r7, #12]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	4413      	add	r3, r2
 800a8c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a8c6:	4b14      	ldr	r3, [pc, #80]	; (800a918 <prvAddCurrentTaskToDelayedList+0x94>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	68ba      	ldr	r2, [r7, #8]
 800a8cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a8ce:	68ba      	ldr	r2, [r7, #8]
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	429a      	cmp	r2, r3
 800a8d4:	d209      	bcs.n	800a8ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a8d6:	4b12      	ldr	r3, [pc, #72]	; (800a920 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a8d8:	681a      	ldr	r2, [r3, #0]
 800a8da:	4b0f      	ldr	r3, [pc, #60]	; (800a918 <prvAddCurrentTaskToDelayedList+0x94>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	3304      	adds	r3, #4
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	4610      	mov	r0, r2
 800a8e4:	f7fe fb2f 	bl	8008f46 <vListInsert>
}
 800a8e8:	e010      	b.n	800a90c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a8ea:	4b0e      	ldr	r3, [pc, #56]	; (800a924 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a8ec:	681a      	ldr	r2, [r3, #0]
 800a8ee:	4b0a      	ldr	r3, [pc, #40]	; (800a918 <prvAddCurrentTaskToDelayedList+0x94>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	3304      	adds	r3, #4
 800a8f4:	4619      	mov	r1, r3
 800a8f6:	4610      	mov	r0, r2
 800a8f8:	f7fe fb25 	bl	8008f46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a8fc:	4b0a      	ldr	r3, [pc, #40]	; (800a928 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	68ba      	ldr	r2, [r7, #8]
 800a902:	429a      	cmp	r2, r3
 800a904:	d202      	bcs.n	800a90c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a906:	4a08      	ldr	r2, [pc, #32]	; (800a928 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	6013      	str	r3, [r2, #0]
}
 800a90c:	bf00      	nop
 800a90e:	3710      	adds	r7, #16
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}
 800a914:	200018b8 	.word	0x200018b8
 800a918:	200013e0 	.word	0x200013e0
 800a91c:	200018a0 	.word	0x200018a0
 800a920:	20001870 	.word	0x20001870
 800a924:	2000186c 	.word	0x2000186c
 800a928:	200018d4 	.word	0x200018d4

0800a92c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b08a      	sub	sp, #40	; 0x28
 800a930:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a932:	2300      	movs	r3, #0
 800a934:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a936:	f000 fb07 	bl	800af48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a93a:	4b1c      	ldr	r3, [pc, #112]	; (800a9ac <xTimerCreateTimerTask+0x80>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d021      	beq.n	800a986 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a942:	2300      	movs	r3, #0
 800a944:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a946:	2300      	movs	r3, #0
 800a948:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a94a:	1d3a      	adds	r2, r7, #4
 800a94c:	f107 0108 	add.w	r1, r7, #8
 800a950:	f107 030c 	add.w	r3, r7, #12
 800a954:	4618      	mov	r0, r3
 800a956:	f7fe fa8b 	bl	8008e70 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a95a:	6879      	ldr	r1, [r7, #4]
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	68fa      	ldr	r2, [r7, #12]
 800a960:	9202      	str	r2, [sp, #8]
 800a962:	9301      	str	r3, [sp, #4]
 800a964:	2302      	movs	r3, #2
 800a966:	9300      	str	r3, [sp, #0]
 800a968:	2300      	movs	r3, #0
 800a96a:	460a      	mov	r2, r1
 800a96c:	4910      	ldr	r1, [pc, #64]	; (800a9b0 <xTimerCreateTimerTask+0x84>)
 800a96e:	4811      	ldr	r0, [pc, #68]	; (800a9b4 <xTimerCreateTimerTask+0x88>)
 800a970:	f7ff f8fc 	bl	8009b6c <xTaskCreateStatic>
 800a974:	4603      	mov	r3, r0
 800a976:	4a10      	ldr	r2, [pc, #64]	; (800a9b8 <xTimerCreateTimerTask+0x8c>)
 800a978:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a97a:	4b0f      	ldr	r3, [pc, #60]	; (800a9b8 <xTimerCreateTimerTask+0x8c>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d001      	beq.n	800a986 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a982:	2301      	movs	r3, #1
 800a984:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d10a      	bne.n	800a9a2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a990:	f383 8811 	msr	BASEPRI, r3
 800a994:	f3bf 8f6f 	isb	sy
 800a998:	f3bf 8f4f 	dsb	sy
 800a99c:	613b      	str	r3, [r7, #16]
}
 800a99e:	bf00      	nop
 800a9a0:	e7fe      	b.n	800a9a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a9a2:	697b      	ldr	r3, [r7, #20]
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3718      	adds	r7, #24
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}
 800a9ac:	20001910 	.word	0x20001910
 800a9b0:	0800ebd0 	.word	0x0800ebd0
 800a9b4:	0800aaf1 	.word	0x0800aaf1
 800a9b8:	20001914 	.word	0x20001914

0800a9bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b08a      	sub	sp, #40	; 0x28
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	60f8      	str	r0, [r7, #12]
 800a9c4:	60b9      	str	r1, [r7, #8]
 800a9c6:	607a      	str	r2, [r7, #4]
 800a9c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d10a      	bne.n	800a9ea <xTimerGenericCommand+0x2e>
	__asm volatile
 800a9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d8:	f383 8811 	msr	BASEPRI, r3
 800a9dc:	f3bf 8f6f 	isb	sy
 800a9e0:	f3bf 8f4f 	dsb	sy
 800a9e4:	623b      	str	r3, [r7, #32]
}
 800a9e6:	bf00      	nop
 800a9e8:	e7fe      	b.n	800a9e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a9ea:	4b1a      	ldr	r3, [pc, #104]	; (800aa54 <xTimerGenericCommand+0x98>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d02a      	beq.n	800aa48 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	2b05      	cmp	r3, #5
 800aa02:	dc18      	bgt.n	800aa36 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aa04:	f7ff feb2 	bl	800a76c <xTaskGetSchedulerState>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	2b02      	cmp	r3, #2
 800aa0c:	d109      	bne.n	800aa22 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aa0e:	4b11      	ldr	r3, [pc, #68]	; (800aa54 <xTimerGenericCommand+0x98>)
 800aa10:	6818      	ldr	r0, [r3, #0]
 800aa12:	f107 0110 	add.w	r1, r7, #16
 800aa16:	2300      	movs	r3, #0
 800aa18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa1a:	f7fe fc27 	bl	800926c <xQueueGenericSend>
 800aa1e:	6278      	str	r0, [r7, #36]	; 0x24
 800aa20:	e012      	b.n	800aa48 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aa22:	4b0c      	ldr	r3, [pc, #48]	; (800aa54 <xTimerGenericCommand+0x98>)
 800aa24:	6818      	ldr	r0, [r3, #0]
 800aa26:	f107 0110 	add.w	r1, r7, #16
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	f7fe fc1d 	bl	800926c <xQueueGenericSend>
 800aa32:	6278      	str	r0, [r7, #36]	; 0x24
 800aa34:	e008      	b.n	800aa48 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aa36:	4b07      	ldr	r3, [pc, #28]	; (800aa54 <xTimerGenericCommand+0x98>)
 800aa38:	6818      	ldr	r0, [r3, #0]
 800aa3a:	f107 0110 	add.w	r1, r7, #16
 800aa3e:	2300      	movs	r3, #0
 800aa40:	683a      	ldr	r2, [r7, #0]
 800aa42:	f7fe fcf9 	bl	8009438 <xQueueGenericSendFromISR>
 800aa46:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800aa48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3728      	adds	r7, #40	; 0x28
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	bf00      	nop
 800aa54:	20001910 	.word	0x20001910

0800aa58 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b088      	sub	sp, #32
 800aa5c:	af02      	add	r7, sp, #8
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa62:	4b22      	ldr	r3, [pc, #136]	; (800aaec <prvProcessExpiredTimer+0x94>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	68db      	ldr	r3, [r3, #12]
 800aa68:	68db      	ldr	r3, [r3, #12]
 800aa6a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	3304      	adds	r3, #4
 800aa70:	4618      	mov	r0, r3
 800aa72:	f7fe faa1 	bl	8008fb8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa7c:	f003 0304 	and.w	r3, r3, #4
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d022      	beq.n	800aaca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	699a      	ldr	r2, [r3, #24]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	18d1      	adds	r1, r2, r3
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	683a      	ldr	r2, [r7, #0]
 800aa90:	6978      	ldr	r0, [r7, #20]
 800aa92:	f000 f8d1 	bl	800ac38 <prvInsertTimerInActiveList>
 800aa96:	4603      	mov	r3, r0
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d01f      	beq.n	800aadc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	9300      	str	r3, [sp, #0]
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	687a      	ldr	r2, [r7, #4]
 800aaa4:	2100      	movs	r1, #0
 800aaa6:	6978      	ldr	r0, [r7, #20]
 800aaa8:	f7ff ff88 	bl	800a9bc <xTimerGenericCommand>
 800aaac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d113      	bne.n	800aadc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800aab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab8:	f383 8811 	msr	BASEPRI, r3
 800aabc:	f3bf 8f6f 	isb	sy
 800aac0:	f3bf 8f4f 	dsb	sy
 800aac4:	60fb      	str	r3, [r7, #12]
}
 800aac6:	bf00      	nop
 800aac8:	e7fe      	b.n	800aac8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aad0:	f023 0301 	bic.w	r3, r3, #1
 800aad4:	b2da      	uxtb	r2, r3
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	6a1b      	ldr	r3, [r3, #32]
 800aae0:	6978      	ldr	r0, [r7, #20]
 800aae2:	4798      	blx	r3
}
 800aae4:	bf00      	nop
 800aae6:	3718      	adds	r7, #24
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}
 800aaec:	20001908 	.word	0x20001908

0800aaf0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b084      	sub	sp, #16
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aaf8:	f107 0308 	add.w	r3, r7, #8
 800aafc:	4618      	mov	r0, r3
 800aafe:	f000 f857 	bl	800abb0 <prvGetNextExpireTime>
 800ab02:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	4619      	mov	r1, r3
 800ab08:	68f8      	ldr	r0, [r7, #12]
 800ab0a:	f000 f803 	bl	800ab14 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ab0e:	f000 f8d5 	bl	800acbc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ab12:	e7f1      	b.n	800aaf8 <prvTimerTask+0x8>

0800ab14 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ab1e:	f7ff fa71 	bl	800a004 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ab22:	f107 0308 	add.w	r3, r7, #8
 800ab26:	4618      	mov	r0, r3
 800ab28:	f000 f866 	bl	800abf8 <prvSampleTimeNow>
 800ab2c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d130      	bne.n	800ab96 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d10a      	bne.n	800ab50 <prvProcessTimerOrBlockTask+0x3c>
 800ab3a:	687a      	ldr	r2, [r7, #4]
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	d806      	bhi.n	800ab50 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ab42:	f7ff fa6d 	bl	800a020 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ab46:	68f9      	ldr	r1, [r7, #12]
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f7ff ff85 	bl	800aa58 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ab4e:	e024      	b.n	800ab9a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d008      	beq.n	800ab68 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ab56:	4b13      	ldr	r3, [pc, #76]	; (800aba4 <prvProcessTimerOrBlockTask+0x90>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d101      	bne.n	800ab64 <prvProcessTimerOrBlockTask+0x50>
 800ab60:	2301      	movs	r3, #1
 800ab62:	e000      	b.n	800ab66 <prvProcessTimerOrBlockTask+0x52>
 800ab64:	2300      	movs	r3, #0
 800ab66:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ab68:	4b0f      	ldr	r3, [pc, #60]	; (800aba8 <prvProcessTimerOrBlockTask+0x94>)
 800ab6a:	6818      	ldr	r0, [r3, #0]
 800ab6c:	687a      	ldr	r2, [r7, #4]
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	1ad3      	subs	r3, r2, r3
 800ab72:	683a      	ldr	r2, [r7, #0]
 800ab74:	4619      	mov	r1, r3
 800ab76:	f7fe ffc5 	bl	8009b04 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ab7a:	f7ff fa51 	bl	800a020 <xTaskResumeAll>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d10a      	bne.n	800ab9a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ab84:	4b09      	ldr	r3, [pc, #36]	; (800abac <prvProcessTimerOrBlockTask+0x98>)
 800ab86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab8a:	601a      	str	r2, [r3, #0]
 800ab8c:	f3bf 8f4f 	dsb	sy
 800ab90:	f3bf 8f6f 	isb	sy
}
 800ab94:	e001      	b.n	800ab9a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ab96:	f7ff fa43 	bl	800a020 <xTaskResumeAll>
}
 800ab9a:	bf00      	nop
 800ab9c:	3710      	adds	r7, #16
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop
 800aba4:	2000190c 	.word	0x2000190c
 800aba8:	20001910 	.word	0x20001910
 800abac:	e000ed04 	.word	0xe000ed04

0800abb0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800abb0:	b480      	push	{r7}
 800abb2:	b085      	sub	sp, #20
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800abb8:	4b0e      	ldr	r3, [pc, #56]	; (800abf4 <prvGetNextExpireTime+0x44>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d101      	bne.n	800abc6 <prvGetNextExpireTime+0x16>
 800abc2:	2201      	movs	r2, #1
 800abc4:	e000      	b.n	800abc8 <prvGetNextExpireTime+0x18>
 800abc6:	2200      	movs	r2, #0
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d105      	bne.n	800abe0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800abd4:	4b07      	ldr	r3, [pc, #28]	; (800abf4 <prvGetNextExpireTime+0x44>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	68db      	ldr	r3, [r3, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	60fb      	str	r3, [r7, #12]
 800abde:	e001      	b.n	800abe4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800abe0:	2300      	movs	r3, #0
 800abe2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800abe4:	68fb      	ldr	r3, [r7, #12]
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3714      	adds	r7, #20
 800abea:	46bd      	mov	sp, r7
 800abec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf0:	4770      	bx	lr
 800abf2:	bf00      	nop
 800abf4:	20001908 	.word	0x20001908

0800abf8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b084      	sub	sp, #16
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ac00:	f7ff fa9e 	bl	800a140 <xTaskGetTickCount>
 800ac04:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ac06:	4b0b      	ldr	r3, [pc, #44]	; (800ac34 <prvSampleTimeNow+0x3c>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	68fa      	ldr	r2, [r7, #12]
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	d205      	bcs.n	800ac1c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ac10:	f000 f936 	bl	800ae80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2201      	movs	r2, #1
 800ac18:	601a      	str	r2, [r3, #0]
 800ac1a:	e002      	b.n	800ac22 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ac22:	4a04      	ldr	r2, [pc, #16]	; (800ac34 <prvSampleTimeNow+0x3c>)
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ac28:	68fb      	ldr	r3, [r7, #12]
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3710      	adds	r7, #16
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
 800ac32:	bf00      	nop
 800ac34:	20001918 	.word	0x20001918

0800ac38 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b086      	sub	sp, #24
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	60f8      	str	r0, [r7, #12]
 800ac40:	60b9      	str	r1, [r7, #8]
 800ac42:	607a      	str	r2, [r7, #4]
 800ac44:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ac46:	2300      	movs	r3, #0
 800ac48:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	68ba      	ldr	r2, [r7, #8]
 800ac4e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	68fa      	ldr	r2, [r7, #12]
 800ac54:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ac56:	68ba      	ldr	r2, [r7, #8]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	d812      	bhi.n	800ac84 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac5e:	687a      	ldr	r2, [r7, #4]
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	1ad2      	subs	r2, r2, r3
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	699b      	ldr	r3, [r3, #24]
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d302      	bcc.n	800ac72 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	617b      	str	r3, [r7, #20]
 800ac70:	e01b      	b.n	800acaa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ac72:	4b10      	ldr	r3, [pc, #64]	; (800acb4 <prvInsertTimerInActiveList+0x7c>)
 800ac74:	681a      	ldr	r2, [r3, #0]
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	3304      	adds	r3, #4
 800ac7a:	4619      	mov	r1, r3
 800ac7c:	4610      	mov	r0, r2
 800ac7e:	f7fe f962 	bl	8008f46 <vListInsert>
 800ac82:	e012      	b.n	800acaa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ac84:	687a      	ldr	r2, [r7, #4]
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	d206      	bcs.n	800ac9a <prvInsertTimerInActiveList+0x62>
 800ac8c:	68ba      	ldr	r2, [r7, #8]
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	429a      	cmp	r2, r3
 800ac92:	d302      	bcc.n	800ac9a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ac94:	2301      	movs	r3, #1
 800ac96:	617b      	str	r3, [r7, #20]
 800ac98:	e007      	b.n	800acaa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ac9a:	4b07      	ldr	r3, [pc, #28]	; (800acb8 <prvInsertTimerInActiveList+0x80>)
 800ac9c:	681a      	ldr	r2, [r3, #0]
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	3304      	adds	r3, #4
 800aca2:	4619      	mov	r1, r3
 800aca4:	4610      	mov	r0, r2
 800aca6:	f7fe f94e 	bl	8008f46 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800acaa:	697b      	ldr	r3, [r7, #20]
}
 800acac:	4618      	mov	r0, r3
 800acae:	3718      	adds	r7, #24
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}
 800acb4:	2000190c 	.word	0x2000190c
 800acb8:	20001908 	.word	0x20001908

0800acbc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b08e      	sub	sp, #56	; 0x38
 800acc0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800acc2:	e0ca      	b.n	800ae5a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	da18      	bge.n	800acfc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800acca:	1d3b      	adds	r3, r7, #4
 800accc:	3304      	adds	r3, #4
 800acce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800acd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d10a      	bne.n	800acec <prvProcessReceivedCommands+0x30>
	__asm volatile
 800acd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acda:	f383 8811 	msr	BASEPRI, r3
 800acde:	f3bf 8f6f 	isb	sy
 800ace2:	f3bf 8f4f 	dsb	sy
 800ace6:	61fb      	str	r3, [r7, #28]
}
 800ace8:	bf00      	nop
 800acea:	e7fe      	b.n	800acea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800acec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800acf2:	6850      	ldr	r0, [r2, #4]
 800acf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800acf6:	6892      	ldr	r2, [r2, #8]
 800acf8:	4611      	mov	r1, r2
 800acfa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	f2c0 80aa 	blt.w	800ae58 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ad08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad0a:	695b      	ldr	r3, [r3, #20]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d004      	beq.n	800ad1a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad12:	3304      	adds	r3, #4
 800ad14:	4618      	mov	r0, r3
 800ad16:	f7fe f94f 	bl	8008fb8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ad1a:	463b      	mov	r3, r7
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f7ff ff6b 	bl	800abf8 <prvSampleTimeNow>
 800ad22:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2b09      	cmp	r3, #9
 800ad28:	f200 8097 	bhi.w	800ae5a <prvProcessReceivedCommands+0x19e>
 800ad2c:	a201      	add	r2, pc, #4	; (adr r2, 800ad34 <prvProcessReceivedCommands+0x78>)
 800ad2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad32:	bf00      	nop
 800ad34:	0800ad5d 	.word	0x0800ad5d
 800ad38:	0800ad5d 	.word	0x0800ad5d
 800ad3c:	0800ad5d 	.word	0x0800ad5d
 800ad40:	0800add1 	.word	0x0800add1
 800ad44:	0800ade5 	.word	0x0800ade5
 800ad48:	0800ae2f 	.word	0x0800ae2f
 800ad4c:	0800ad5d 	.word	0x0800ad5d
 800ad50:	0800ad5d 	.word	0x0800ad5d
 800ad54:	0800add1 	.word	0x0800add1
 800ad58:	0800ade5 	.word	0x0800ade5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ad5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad62:	f043 0301 	orr.w	r3, r3, #1
 800ad66:	b2da      	uxtb	r2, r3
 800ad68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ad6e:	68ba      	ldr	r2, [r7, #8]
 800ad70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad72:	699b      	ldr	r3, [r3, #24]
 800ad74:	18d1      	adds	r1, r2, r3
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad7c:	f7ff ff5c 	bl	800ac38 <prvInsertTimerInActiveList>
 800ad80:	4603      	mov	r3, r0
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d069      	beq.n	800ae5a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ad86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad88:	6a1b      	ldr	r3, [r3, #32]
 800ad8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad8c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad94:	f003 0304 	and.w	r3, r3, #4
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d05e      	beq.n	800ae5a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ad9c:	68ba      	ldr	r2, [r7, #8]
 800ad9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada0:	699b      	ldr	r3, [r3, #24]
 800ada2:	441a      	add	r2, r3
 800ada4:	2300      	movs	r3, #0
 800ada6:	9300      	str	r3, [sp, #0]
 800ada8:	2300      	movs	r3, #0
 800adaa:	2100      	movs	r1, #0
 800adac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adae:	f7ff fe05 	bl	800a9bc <xTimerGenericCommand>
 800adb2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800adb4:	6a3b      	ldr	r3, [r7, #32]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d14f      	bne.n	800ae5a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800adba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adbe:	f383 8811 	msr	BASEPRI, r3
 800adc2:	f3bf 8f6f 	isb	sy
 800adc6:	f3bf 8f4f 	dsb	sy
 800adca:	61bb      	str	r3, [r7, #24]
}
 800adcc:	bf00      	nop
 800adce:	e7fe      	b.n	800adce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800add0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800add2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800add6:	f023 0301 	bic.w	r3, r3, #1
 800adda:	b2da      	uxtb	r2, r3
 800addc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ade2:	e03a      	b.n	800ae5a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ade4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800adea:	f043 0301 	orr.w	r3, r3, #1
 800adee:	b2da      	uxtb	r2, r3
 800adf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800adf6:	68ba      	ldr	r2, [r7, #8]
 800adf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adfa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800adfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adfe:	699b      	ldr	r3, [r3, #24]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d10a      	bne.n	800ae1a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ae04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae08:	f383 8811 	msr	BASEPRI, r3
 800ae0c:	f3bf 8f6f 	isb	sy
 800ae10:	f3bf 8f4f 	dsb	sy
 800ae14:	617b      	str	r3, [r7, #20]
}
 800ae16:	bf00      	nop
 800ae18:	e7fe      	b.n	800ae18 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ae1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae1c:	699a      	ldr	r2, [r3, #24]
 800ae1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae20:	18d1      	adds	r1, r2, r3
 800ae22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae28:	f7ff ff06 	bl	800ac38 <prvInsertTimerInActiveList>
					break;
 800ae2c:	e015      	b.n	800ae5a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ae2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae34:	f003 0302 	and.w	r3, r3, #2
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d103      	bne.n	800ae44 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ae3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae3e:	f000 fbdf 	bl	800b600 <vPortFree>
 800ae42:	e00a      	b.n	800ae5a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ae44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae4a:	f023 0301 	bic.w	r3, r3, #1
 800ae4e:	b2da      	uxtb	r2, r3
 800ae50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ae56:	e000      	b.n	800ae5a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ae58:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ae5a:	4b08      	ldr	r3, [pc, #32]	; (800ae7c <prvProcessReceivedCommands+0x1c0>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	1d39      	adds	r1, r7, #4
 800ae60:	2200      	movs	r2, #0
 800ae62:	4618      	mov	r0, r3
 800ae64:	f7fe fb84 	bl	8009570 <xQueueReceive>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	f47f af2a 	bne.w	800acc4 <prvProcessReceivedCommands+0x8>
	}
}
 800ae70:	bf00      	nop
 800ae72:	bf00      	nop
 800ae74:	3730      	adds	r7, #48	; 0x30
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
 800ae7a:	bf00      	nop
 800ae7c:	20001910 	.word	0x20001910

0800ae80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b088      	sub	sp, #32
 800ae84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ae86:	e048      	b.n	800af1a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ae88:	4b2d      	ldr	r3, [pc, #180]	; (800af40 <prvSwitchTimerLists+0xc0>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	68db      	ldr	r3, [r3, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae92:	4b2b      	ldr	r3, [pc, #172]	; (800af40 <prvSwitchTimerLists+0xc0>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	68db      	ldr	r3, [r3, #12]
 800ae98:	68db      	ldr	r3, [r3, #12]
 800ae9a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	3304      	adds	r3, #4
 800aea0:	4618      	mov	r0, r3
 800aea2:	f7fe f889 	bl	8008fb8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	6a1b      	ldr	r3, [r3, #32]
 800aeaa:	68f8      	ldr	r0, [r7, #12]
 800aeac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aeb4:	f003 0304 	and.w	r3, r3, #4
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d02e      	beq.n	800af1a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	699b      	ldr	r3, [r3, #24]
 800aec0:	693a      	ldr	r2, [r7, #16]
 800aec2:	4413      	add	r3, r2
 800aec4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800aec6:	68ba      	ldr	r2, [r7, #8]
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d90e      	bls.n	800aeec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	68ba      	ldr	r2, [r7, #8]
 800aed2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	68fa      	ldr	r2, [r7, #12]
 800aed8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aeda:	4b19      	ldr	r3, [pc, #100]	; (800af40 <prvSwitchTimerLists+0xc0>)
 800aedc:	681a      	ldr	r2, [r3, #0]
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	3304      	adds	r3, #4
 800aee2:	4619      	mov	r1, r3
 800aee4:	4610      	mov	r0, r2
 800aee6:	f7fe f82e 	bl	8008f46 <vListInsert>
 800aeea:	e016      	b.n	800af1a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aeec:	2300      	movs	r3, #0
 800aeee:	9300      	str	r3, [sp, #0]
 800aef0:	2300      	movs	r3, #0
 800aef2:	693a      	ldr	r2, [r7, #16]
 800aef4:	2100      	movs	r1, #0
 800aef6:	68f8      	ldr	r0, [r7, #12]
 800aef8:	f7ff fd60 	bl	800a9bc <xTimerGenericCommand>
 800aefc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d10a      	bne.n	800af1a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800af04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af08:	f383 8811 	msr	BASEPRI, r3
 800af0c:	f3bf 8f6f 	isb	sy
 800af10:	f3bf 8f4f 	dsb	sy
 800af14:	603b      	str	r3, [r7, #0]
}
 800af16:	bf00      	nop
 800af18:	e7fe      	b.n	800af18 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800af1a:	4b09      	ldr	r3, [pc, #36]	; (800af40 <prvSwitchTimerLists+0xc0>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d1b1      	bne.n	800ae88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800af24:	4b06      	ldr	r3, [pc, #24]	; (800af40 <prvSwitchTimerLists+0xc0>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800af2a:	4b06      	ldr	r3, [pc, #24]	; (800af44 <prvSwitchTimerLists+0xc4>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	4a04      	ldr	r2, [pc, #16]	; (800af40 <prvSwitchTimerLists+0xc0>)
 800af30:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800af32:	4a04      	ldr	r2, [pc, #16]	; (800af44 <prvSwitchTimerLists+0xc4>)
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	6013      	str	r3, [r2, #0]
}
 800af38:	bf00      	nop
 800af3a:	3718      	adds	r7, #24
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}
 800af40:	20001908 	.word	0x20001908
 800af44:	2000190c 	.word	0x2000190c

0800af48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b082      	sub	sp, #8
 800af4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800af4e:	f000 f969 	bl	800b224 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800af52:	4b15      	ldr	r3, [pc, #84]	; (800afa8 <prvCheckForValidListAndQueue+0x60>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d120      	bne.n	800af9c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800af5a:	4814      	ldr	r0, [pc, #80]	; (800afac <prvCheckForValidListAndQueue+0x64>)
 800af5c:	f7fd ffa2 	bl	8008ea4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800af60:	4813      	ldr	r0, [pc, #76]	; (800afb0 <prvCheckForValidListAndQueue+0x68>)
 800af62:	f7fd ff9f 	bl	8008ea4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800af66:	4b13      	ldr	r3, [pc, #76]	; (800afb4 <prvCheckForValidListAndQueue+0x6c>)
 800af68:	4a10      	ldr	r2, [pc, #64]	; (800afac <prvCheckForValidListAndQueue+0x64>)
 800af6a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800af6c:	4b12      	ldr	r3, [pc, #72]	; (800afb8 <prvCheckForValidListAndQueue+0x70>)
 800af6e:	4a10      	ldr	r2, [pc, #64]	; (800afb0 <prvCheckForValidListAndQueue+0x68>)
 800af70:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800af72:	2300      	movs	r3, #0
 800af74:	9300      	str	r3, [sp, #0]
 800af76:	4b11      	ldr	r3, [pc, #68]	; (800afbc <prvCheckForValidListAndQueue+0x74>)
 800af78:	4a11      	ldr	r2, [pc, #68]	; (800afc0 <prvCheckForValidListAndQueue+0x78>)
 800af7a:	2110      	movs	r1, #16
 800af7c:	200a      	movs	r0, #10
 800af7e:	f7fe f8a0 	bl	80090c2 <xQueueGenericCreateStatic>
 800af82:	4603      	mov	r3, r0
 800af84:	4a08      	ldr	r2, [pc, #32]	; (800afa8 <prvCheckForValidListAndQueue+0x60>)
 800af86:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800af88:	4b07      	ldr	r3, [pc, #28]	; (800afa8 <prvCheckForValidListAndQueue+0x60>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d005      	beq.n	800af9c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800af90:	4b05      	ldr	r3, [pc, #20]	; (800afa8 <prvCheckForValidListAndQueue+0x60>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	490b      	ldr	r1, [pc, #44]	; (800afc4 <prvCheckForValidListAndQueue+0x7c>)
 800af96:	4618      	mov	r0, r3
 800af98:	f7fe fd8a 	bl	8009ab0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800af9c:	f000 f972 	bl	800b284 <vPortExitCritical>
}
 800afa0:	bf00      	nop
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}
 800afa6:	bf00      	nop
 800afa8:	20001910 	.word	0x20001910
 800afac:	200018e0 	.word	0x200018e0
 800afb0:	200018f4 	.word	0x200018f4
 800afb4:	20001908 	.word	0x20001908
 800afb8:	2000190c 	.word	0x2000190c
 800afbc:	200019bc 	.word	0x200019bc
 800afc0:	2000191c 	.word	0x2000191c
 800afc4:	0800ebd8 	.word	0x0800ebd8

0800afc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800afc8:	b480      	push	{r7}
 800afca:	b085      	sub	sp, #20
 800afcc:	af00      	add	r7, sp, #0
 800afce:	60f8      	str	r0, [r7, #12]
 800afd0:	60b9      	str	r1, [r7, #8]
 800afd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	3b04      	subs	r3, #4
 800afd8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800afe0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	3b04      	subs	r3, #4
 800afe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	f023 0201 	bic.w	r2, r3, #1
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	3b04      	subs	r3, #4
 800aff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aff8:	4a0c      	ldr	r2, [pc, #48]	; (800b02c <pxPortInitialiseStack+0x64>)
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	3b14      	subs	r3, #20
 800b002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b004:	687a      	ldr	r2, [r7, #4]
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	3b04      	subs	r3, #4
 800b00e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	f06f 0202 	mvn.w	r2, #2
 800b016:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	3b20      	subs	r3, #32
 800b01c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b01e:	68fb      	ldr	r3, [r7, #12]
}
 800b020:	4618      	mov	r0, r3
 800b022:	3714      	adds	r7, #20
 800b024:	46bd      	mov	sp, r7
 800b026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02a:	4770      	bx	lr
 800b02c:	0800b031 	.word	0x0800b031

0800b030 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b030:	b480      	push	{r7}
 800b032:	b085      	sub	sp, #20
 800b034:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b036:	2300      	movs	r3, #0
 800b038:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b03a:	4b12      	ldr	r3, [pc, #72]	; (800b084 <prvTaskExitError+0x54>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b042:	d00a      	beq.n	800b05a <prvTaskExitError+0x2a>
	__asm volatile
 800b044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b048:	f383 8811 	msr	BASEPRI, r3
 800b04c:	f3bf 8f6f 	isb	sy
 800b050:	f3bf 8f4f 	dsb	sy
 800b054:	60fb      	str	r3, [r7, #12]
}
 800b056:	bf00      	nop
 800b058:	e7fe      	b.n	800b058 <prvTaskExitError+0x28>
	__asm volatile
 800b05a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b05e:	f383 8811 	msr	BASEPRI, r3
 800b062:	f3bf 8f6f 	isb	sy
 800b066:	f3bf 8f4f 	dsb	sy
 800b06a:	60bb      	str	r3, [r7, #8]
}
 800b06c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b06e:	bf00      	nop
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d0fc      	beq.n	800b070 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b076:	bf00      	nop
 800b078:	bf00      	nop
 800b07a:	3714      	adds	r7, #20
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr
 800b084:	20000064 	.word	0x20000064
	...

0800b090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b090:	4b07      	ldr	r3, [pc, #28]	; (800b0b0 <pxCurrentTCBConst2>)
 800b092:	6819      	ldr	r1, [r3, #0]
 800b094:	6808      	ldr	r0, [r1, #0]
 800b096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b09a:	f380 8809 	msr	PSP, r0
 800b09e:	f3bf 8f6f 	isb	sy
 800b0a2:	f04f 0000 	mov.w	r0, #0
 800b0a6:	f380 8811 	msr	BASEPRI, r0
 800b0aa:	4770      	bx	lr
 800b0ac:	f3af 8000 	nop.w

0800b0b0 <pxCurrentTCBConst2>:
 800b0b0:	200013e0 	.word	0x200013e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b0b4:	bf00      	nop
 800b0b6:	bf00      	nop

0800b0b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b0b8:	4808      	ldr	r0, [pc, #32]	; (800b0dc <prvPortStartFirstTask+0x24>)
 800b0ba:	6800      	ldr	r0, [r0, #0]
 800b0bc:	6800      	ldr	r0, [r0, #0]
 800b0be:	f380 8808 	msr	MSP, r0
 800b0c2:	f04f 0000 	mov.w	r0, #0
 800b0c6:	f380 8814 	msr	CONTROL, r0
 800b0ca:	b662      	cpsie	i
 800b0cc:	b661      	cpsie	f
 800b0ce:	f3bf 8f4f 	dsb	sy
 800b0d2:	f3bf 8f6f 	isb	sy
 800b0d6:	df00      	svc	0
 800b0d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b0da:	bf00      	nop
 800b0dc:	e000ed08 	.word	0xe000ed08

0800b0e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b086      	sub	sp, #24
 800b0e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b0e6:	4b46      	ldr	r3, [pc, #280]	; (800b200 <xPortStartScheduler+0x120>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	4a46      	ldr	r2, [pc, #280]	; (800b204 <xPortStartScheduler+0x124>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d10a      	bne.n	800b106 <xPortStartScheduler+0x26>
	__asm volatile
 800b0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f4:	f383 8811 	msr	BASEPRI, r3
 800b0f8:	f3bf 8f6f 	isb	sy
 800b0fc:	f3bf 8f4f 	dsb	sy
 800b100:	613b      	str	r3, [r7, #16]
}
 800b102:	bf00      	nop
 800b104:	e7fe      	b.n	800b104 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b106:	4b3e      	ldr	r3, [pc, #248]	; (800b200 <xPortStartScheduler+0x120>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	4a3f      	ldr	r2, [pc, #252]	; (800b208 <xPortStartScheduler+0x128>)
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d10a      	bne.n	800b126 <xPortStartScheduler+0x46>
	__asm volatile
 800b110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b114:	f383 8811 	msr	BASEPRI, r3
 800b118:	f3bf 8f6f 	isb	sy
 800b11c:	f3bf 8f4f 	dsb	sy
 800b120:	60fb      	str	r3, [r7, #12]
}
 800b122:	bf00      	nop
 800b124:	e7fe      	b.n	800b124 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b126:	4b39      	ldr	r3, [pc, #228]	; (800b20c <xPortStartScheduler+0x12c>)
 800b128:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	b2db      	uxtb	r3, r3
 800b130:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	22ff      	movs	r2, #255	; 0xff
 800b136:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	b2db      	uxtb	r3, r3
 800b13e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b140:	78fb      	ldrb	r3, [r7, #3]
 800b142:	b2db      	uxtb	r3, r3
 800b144:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b148:	b2da      	uxtb	r2, r3
 800b14a:	4b31      	ldr	r3, [pc, #196]	; (800b210 <xPortStartScheduler+0x130>)
 800b14c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b14e:	4b31      	ldr	r3, [pc, #196]	; (800b214 <xPortStartScheduler+0x134>)
 800b150:	2207      	movs	r2, #7
 800b152:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b154:	e009      	b.n	800b16a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b156:	4b2f      	ldr	r3, [pc, #188]	; (800b214 <xPortStartScheduler+0x134>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	3b01      	subs	r3, #1
 800b15c:	4a2d      	ldr	r2, [pc, #180]	; (800b214 <xPortStartScheduler+0x134>)
 800b15e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b160:	78fb      	ldrb	r3, [r7, #3]
 800b162:	b2db      	uxtb	r3, r3
 800b164:	005b      	lsls	r3, r3, #1
 800b166:	b2db      	uxtb	r3, r3
 800b168:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b16a:	78fb      	ldrb	r3, [r7, #3]
 800b16c:	b2db      	uxtb	r3, r3
 800b16e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b172:	2b80      	cmp	r3, #128	; 0x80
 800b174:	d0ef      	beq.n	800b156 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b176:	4b27      	ldr	r3, [pc, #156]	; (800b214 <xPortStartScheduler+0x134>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f1c3 0307 	rsb	r3, r3, #7
 800b17e:	2b04      	cmp	r3, #4
 800b180:	d00a      	beq.n	800b198 <xPortStartScheduler+0xb8>
	__asm volatile
 800b182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b186:	f383 8811 	msr	BASEPRI, r3
 800b18a:	f3bf 8f6f 	isb	sy
 800b18e:	f3bf 8f4f 	dsb	sy
 800b192:	60bb      	str	r3, [r7, #8]
}
 800b194:	bf00      	nop
 800b196:	e7fe      	b.n	800b196 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b198:	4b1e      	ldr	r3, [pc, #120]	; (800b214 <xPortStartScheduler+0x134>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	021b      	lsls	r3, r3, #8
 800b19e:	4a1d      	ldr	r2, [pc, #116]	; (800b214 <xPortStartScheduler+0x134>)
 800b1a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b1a2:	4b1c      	ldr	r3, [pc, #112]	; (800b214 <xPortStartScheduler+0x134>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b1aa:	4a1a      	ldr	r2, [pc, #104]	; (800b214 <xPortStartScheduler+0x134>)
 800b1ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	b2da      	uxtb	r2, r3
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b1b6:	4b18      	ldr	r3, [pc, #96]	; (800b218 <xPortStartScheduler+0x138>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	4a17      	ldr	r2, [pc, #92]	; (800b218 <xPortStartScheduler+0x138>)
 800b1bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b1c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b1c2:	4b15      	ldr	r3, [pc, #84]	; (800b218 <xPortStartScheduler+0x138>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	4a14      	ldr	r2, [pc, #80]	; (800b218 <xPortStartScheduler+0x138>)
 800b1c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b1cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b1ce:	f000 f8dd 	bl	800b38c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b1d2:	4b12      	ldr	r3, [pc, #72]	; (800b21c <xPortStartScheduler+0x13c>)
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b1d8:	f000 f8fc 	bl	800b3d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b1dc:	4b10      	ldr	r3, [pc, #64]	; (800b220 <xPortStartScheduler+0x140>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	4a0f      	ldr	r2, [pc, #60]	; (800b220 <xPortStartScheduler+0x140>)
 800b1e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b1e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b1e8:	f7ff ff66 	bl	800b0b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b1ec:	f7ff f84e 	bl	800a28c <vTaskSwitchContext>
	prvTaskExitError();
 800b1f0:	f7ff ff1e 	bl	800b030 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b1f4:	2300      	movs	r3, #0
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3718      	adds	r7, #24
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}
 800b1fe:	bf00      	nop
 800b200:	e000ed00 	.word	0xe000ed00
 800b204:	410fc271 	.word	0x410fc271
 800b208:	410fc270 	.word	0x410fc270
 800b20c:	e000e400 	.word	0xe000e400
 800b210:	20001a0c 	.word	0x20001a0c
 800b214:	20001a10 	.word	0x20001a10
 800b218:	e000ed20 	.word	0xe000ed20
 800b21c:	20000064 	.word	0x20000064
 800b220:	e000ef34 	.word	0xe000ef34

0800b224 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b224:	b480      	push	{r7}
 800b226:	b083      	sub	sp, #12
 800b228:	af00      	add	r7, sp, #0
	__asm volatile
 800b22a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b22e:	f383 8811 	msr	BASEPRI, r3
 800b232:	f3bf 8f6f 	isb	sy
 800b236:	f3bf 8f4f 	dsb	sy
 800b23a:	607b      	str	r3, [r7, #4]
}
 800b23c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b23e:	4b0f      	ldr	r3, [pc, #60]	; (800b27c <vPortEnterCritical+0x58>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	3301      	adds	r3, #1
 800b244:	4a0d      	ldr	r2, [pc, #52]	; (800b27c <vPortEnterCritical+0x58>)
 800b246:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b248:	4b0c      	ldr	r3, [pc, #48]	; (800b27c <vPortEnterCritical+0x58>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	2b01      	cmp	r3, #1
 800b24e:	d10f      	bne.n	800b270 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b250:	4b0b      	ldr	r3, [pc, #44]	; (800b280 <vPortEnterCritical+0x5c>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	b2db      	uxtb	r3, r3
 800b256:	2b00      	cmp	r3, #0
 800b258:	d00a      	beq.n	800b270 <vPortEnterCritical+0x4c>
	__asm volatile
 800b25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b25e:	f383 8811 	msr	BASEPRI, r3
 800b262:	f3bf 8f6f 	isb	sy
 800b266:	f3bf 8f4f 	dsb	sy
 800b26a:	603b      	str	r3, [r7, #0]
}
 800b26c:	bf00      	nop
 800b26e:	e7fe      	b.n	800b26e <vPortEnterCritical+0x4a>
	}
}
 800b270:	bf00      	nop
 800b272:	370c      	adds	r7, #12
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr
 800b27c:	20000064 	.word	0x20000064
 800b280:	e000ed04 	.word	0xe000ed04

0800b284 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b284:	b480      	push	{r7}
 800b286:	b083      	sub	sp, #12
 800b288:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b28a:	4b12      	ldr	r3, [pc, #72]	; (800b2d4 <vPortExitCritical+0x50>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d10a      	bne.n	800b2a8 <vPortExitCritical+0x24>
	__asm volatile
 800b292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b296:	f383 8811 	msr	BASEPRI, r3
 800b29a:	f3bf 8f6f 	isb	sy
 800b29e:	f3bf 8f4f 	dsb	sy
 800b2a2:	607b      	str	r3, [r7, #4]
}
 800b2a4:	bf00      	nop
 800b2a6:	e7fe      	b.n	800b2a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b2a8:	4b0a      	ldr	r3, [pc, #40]	; (800b2d4 <vPortExitCritical+0x50>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	3b01      	subs	r3, #1
 800b2ae:	4a09      	ldr	r2, [pc, #36]	; (800b2d4 <vPortExitCritical+0x50>)
 800b2b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b2b2:	4b08      	ldr	r3, [pc, #32]	; (800b2d4 <vPortExitCritical+0x50>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d105      	bne.n	800b2c6 <vPortExitCritical+0x42>
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	f383 8811 	msr	BASEPRI, r3
}
 800b2c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b2c6:	bf00      	nop
 800b2c8:	370c      	adds	r7, #12
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d0:	4770      	bx	lr
 800b2d2:	bf00      	nop
 800b2d4:	20000064 	.word	0x20000064
	...

0800b2e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b2e0:	f3ef 8009 	mrs	r0, PSP
 800b2e4:	f3bf 8f6f 	isb	sy
 800b2e8:	4b15      	ldr	r3, [pc, #84]	; (800b340 <pxCurrentTCBConst>)
 800b2ea:	681a      	ldr	r2, [r3, #0]
 800b2ec:	f01e 0f10 	tst.w	lr, #16
 800b2f0:	bf08      	it	eq
 800b2f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b2f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2fa:	6010      	str	r0, [r2, #0]
 800b2fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b300:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b304:	f380 8811 	msr	BASEPRI, r0
 800b308:	f3bf 8f4f 	dsb	sy
 800b30c:	f3bf 8f6f 	isb	sy
 800b310:	f7fe ffbc 	bl	800a28c <vTaskSwitchContext>
 800b314:	f04f 0000 	mov.w	r0, #0
 800b318:	f380 8811 	msr	BASEPRI, r0
 800b31c:	bc09      	pop	{r0, r3}
 800b31e:	6819      	ldr	r1, [r3, #0]
 800b320:	6808      	ldr	r0, [r1, #0]
 800b322:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b326:	f01e 0f10 	tst.w	lr, #16
 800b32a:	bf08      	it	eq
 800b32c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b330:	f380 8809 	msr	PSP, r0
 800b334:	f3bf 8f6f 	isb	sy
 800b338:	4770      	bx	lr
 800b33a:	bf00      	nop
 800b33c:	f3af 8000 	nop.w

0800b340 <pxCurrentTCBConst>:
 800b340:	200013e0 	.word	0x200013e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b344:	bf00      	nop
 800b346:	bf00      	nop

0800b348 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b082      	sub	sp, #8
 800b34c:	af00      	add	r7, sp, #0
	__asm volatile
 800b34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b352:	f383 8811 	msr	BASEPRI, r3
 800b356:	f3bf 8f6f 	isb	sy
 800b35a:	f3bf 8f4f 	dsb	sy
 800b35e:	607b      	str	r3, [r7, #4]
}
 800b360:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b362:	f7fe fefd 	bl	800a160 <xTaskIncrementTick>
 800b366:	4603      	mov	r3, r0
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d003      	beq.n	800b374 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b36c:	4b06      	ldr	r3, [pc, #24]	; (800b388 <xPortSysTickHandler+0x40>)
 800b36e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b372:	601a      	str	r2, [r3, #0]
 800b374:	2300      	movs	r3, #0
 800b376:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	f383 8811 	msr	BASEPRI, r3
}
 800b37e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b380:	bf00      	nop
 800b382:	3708      	adds	r7, #8
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}
 800b388:	e000ed04 	.word	0xe000ed04

0800b38c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b38c:	b480      	push	{r7}
 800b38e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b390:	4b0b      	ldr	r3, [pc, #44]	; (800b3c0 <vPortSetupTimerInterrupt+0x34>)
 800b392:	2200      	movs	r2, #0
 800b394:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b396:	4b0b      	ldr	r3, [pc, #44]	; (800b3c4 <vPortSetupTimerInterrupt+0x38>)
 800b398:	2200      	movs	r2, #0
 800b39a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b39c:	4b0a      	ldr	r3, [pc, #40]	; (800b3c8 <vPortSetupTimerInterrupt+0x3c>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	4a0a      	ldr	r2, [pc, #40]	; (800b3cc <vPortSetupTimerInterrupt+0x40>)
 800b3a2:	fba2 2303 	umull	r2, r3, r2, r3
 800b3a6:	099b      	lsrs	r3, r3, #6
 800b3a8:	4a09      	ldr	r2, [pc, #36]	; (800b3d0 <vPortSetupTimerInterrupt+0x44>)
 800b3aa:	3b01      	subs	r3, #1
 800b3ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b3ae:	4b04      	ldr	r3, [pc, #16]	; (800b3c0 <vPortSetupTimerInterrupt+0x34>)
 800b3b0:	2207      	movs	r2, #7
 800b3b2:	601a      	str	r2, [r3, #0]
}
 800b3b4:	bf00      	nop
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3bc:	4770      	bx	lr
 800b3be:	bf00      	nop
 800b3c0:	e000e010 	.word	0xe000e010
 800b3c4:	e000e018 	.word	0xe000e018
 800b3c8:	20000058 	.word	0x20000058
 800b3cc:	10624dd3 	.word	0x10624dd3
 800b3d0:	e000e014 	.word	0xe000e014

0800b3d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b3d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b3e4 <vPortEnableVFP+0x10>
 800b3d8:	6801      	ldr	r1, [r0, #0]
 800b3da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b3de:	6001      	str	r1, [r0, #0]
 800b3e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b3e2:	bf00      	nop
 800b3e4:	e000ed88 	.word	0xe000ed88

0800b3e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b085      	sub	sp, #20
 800b3ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b3ee:	f3ef 8305 	mrs	r3, IPSR
 800b3f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	2b0f      	cmp	r3, #15
 800b3f8:	d914      	bls.n	800b424 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b3fa:	4a17      	ldr	r2, [pc, #92]	; (800b458 <vPortValidateInterruptPriority+0x70>)
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	4413      	add	r3, r2
 800b400:	781b      	ldrb	r3, [r3, #0]
 800b402:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b404:	4b15      	ldr	r3, [pc, #84]	; (800b45c <vPortValidateInterruptPriority+0x74>)
 800b406:	781b      	ldrb	r3, [r3, #0]
 800b408:	7afa      	ldrb	r2, [r7, #11]
 800b40a:	429a      	cmp	r2, r3
 800b40c:	d20a      	bcs.n	800b424 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b412:	f383 8811 	msr	BASEPRI, r3
 800b416:	f3bf 8f6f 	isb	sy
 800b41a:	f3bf 8f4f 	dsb	sy
 800b41e:	607b      	str	r3, [r7, #4]
}
 800b420:	bf00      	nop
 800b422:	e7fe      	b.n	800b422 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b424:	4b0e      	ldr	r3, [pc, #56]	; (800b460 <vPortValidateInterruptPriority+0x78>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b42c:	4b0d      	ldr	r3, [pc, #52]	; (800b464 <vPortValidateInterruptPriority+0x7c>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	429a      	cmp	r2, r3
 800b432:	d90a      	bls.n	800b44a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b438:	f383 8811 	msr	BASEPRI, r3
 800b43c:	f3bf 8f6f 	isb	sy
 800b440:	f3bf 8f4f 	dsb	sy
 800b444:	603b      	str	r3, [r7, #0]
}
 800b446:	bf00      	nop
 800b448:	e7fe      	b.n	800b448 <vPortValidateInterruptPriority+0x60>
	}
 800b44a:	bf00      	nop
 800b44c:	3714      	adds	r7, #20
 800b44e:	46bd      	mov	sp, r7
 800b450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b454:	4770      	bx	lr
 800b456:	bf00      	nop
 800b458:	e000e3f0 	.word	0xe000e3f0
 800b45c:	20001a0c 	.word	0x20001a0c
 800b460:	e000ed0c 	.word	0xe000ed0c
 800b464:	20001a10 	.word	0x20001a10

0800b468 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b08a      	sub	sp, #40	; 0x28
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b470:	2300      	movs	r3, #0
 800b472:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b474:	f7fe fdc6 	bl	800a004 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b478:	4b5b      	ldr	r3, [pc, #364]	; (800b5e8 <pvPortMalloc+0x180>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d101      	bne.n	800b484 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b480:	f000 f920 	bl	800b6c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b484:	4b59      	ldr	r3, [pc, #356]	; (800b5ec <pvPortMalloc+0x184>)
 800b486:	681a      	ldr	r2, [r3, #0]
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	4013      	ands	r3, r2
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	f040 8093 	bne.w	800b5b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d01d      	beq.n	800b4d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b498:	2208      	movs	r2, #8
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	4413      	add	r3, r2
 800b49e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f003 0307 	and.w	r3, r3, #7
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d014      	beq.n	800b4d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f023 0307 	bic.w	r3, r3, #7
 800b4b0:	3308      	adds	r3, #8
 800b4b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f003 0307 	and.w	r3, r3, #7
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d00a      	beq.n	800b4d4 <pvPortMalloc+0x6c>
	__asm volatile
 800b4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c2:	f383 8811 	msr	BASEPRI, r3
 800b4c6:	f3bf 8f6f 	isb	sy
 800b4ca:	f3bf 8f4f 	dsb	sy
 800b4ce:	617b      	str	r3, [r7, #20]
}
 800b4d0:	bf00      	nop
 800b4d2:	e7fe      	b.n	800b4d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d06e      	beq.n	800b5b8 <pvPortMalloc+0x150>
 800b4da:	4b45      	ldr	r3, [pc, #276]	; (800b5f0 <pvPortMalloc+0x188>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	687a      	ldr	r2, [r7, #4]
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	d869      	bhi.n	800b5b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b4e4:	4b43      	ldr	r3, [pc, #268]	; (800b5f4 <pvPortMalloc+0x18c>)
 800b4e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b4e8:	4b42      	ldr	r3, [pc, #264]	; (800b5f4 <pvPortMalloc+0x18c>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b4ee:	e004      	b.n	800b4fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4fc:	685b      	ldr	r3, [r3, #4]
 800b4fe:	687a      	ldr	r2, [r7, #4]
 800b500:	429a      	cmp	r2, r3
 800b502:	d903      	bls.n	800b50c <pvPortMalloc+0xa4>
 800b504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d1f1      	bne.n	800b4f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b50c:	4b36      	ldr	r3, [pc, #216]	; (800b5e8 <pvPortMalloc+0x180>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b512:	429a      	cmp	r2, r3
 800b514:	d050      	beq.n	800b5b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b516:	6a3b      	ldr	r3, [r7, #32]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	2208      	movs	r2, #8
 800b51c:	4413      	add	r3, r2
 800b51e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b522:	681a      	ldr	r2, [r3, #0]
 800b524:	6a3b      	ldr	r3, [r7, #32]
 800b526:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b52a:	685a      	ldr	r2, [r3, #4]
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	1ad2      	subs	r2, r2, r3
 800b530:	2308      	movs	r3, #8
 800b532:	005b      	lsls	r3, r3, #1
 800b534:	429a      	cmp	r2, r3
 800b536:	d91f      	bls.n	800b578 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	4413      	add	r3, r2
 800b53e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b540:	69bb      	ldr	r3, [r7, #24]
 800b542:	f003 0307 	and.w	r3, r3, #7
 800b546:	2b00      	cmp	r3, #0
 800b548:	d00a      	beq.n	800b560 <pvPortMalloc+0xf8>
	__asm volatile
 800b54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b54e:	f383 8811 	msr	BASEPRI, r3
 800b552:	f3bf 8f6f 	isb	sy
 800b556:	f3bf 8f4f 	dsb	sy
 800b55a:	613b      	str	r3, [r7, #16]
}
 800b55c:	bf00      	nop
 800b55e:	e7fe      	b.n	800b55e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b562:	685a      	ldr	r2, [r3, #4]
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	1ad2      	subs	r2, r2, r3
 800b568:	69bb      	ldr	r3, [r7, #24]
 800b56a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b56e:	687a      	ldr	r2, [r7, #4]
 800b570:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b572:	69b8      	ldr	r0, [r7, #24]
 800b574:	f000 f908 	bl	800b788 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b578:	4b1d      	ldr	r3, [pc, #116]	; (800b5f0 <pvPortMalloc+0x188>)
 800b57a:	681a      	ldr	r2, [r3, #0]
 800b57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	1ad3      	subs	r3, r2, r3
 800b582:	4a1b      	ldr	r2, [pc, #108]	; (800b5f0 <pvPortMalloc+0x188>)
 800b584:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b586:	4b1a      	ldr	r3, [pc, #104]	; (800b5f0 <pvPortMalloc+0x188>)
 800b588:	681a      	ldr	r2, [r3, #0]
 800b58a:	4b1b      	ldr	r3, [pc, #108]	; (800b5f8 <pvPortMalloc+0x190>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	429a      	cmp	r2, r3
 800b590:	d203      	bcs.n	800b59a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b592:	4b17      	ldr	r3, [pc, #92]	; (800b5f0 <pvPortMalloc+0x188>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	4a18      	ldr	r2, [pc, #96]	; (800b5f8 <pvPortMalloc+0x190>)
 800b598:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b59c:	685a      	ldr	r2, [r3, #4]
 800b59e:	4b13      	ldr	r3, [pc, #76]	; (800b5ec <pvPortMalloc+0x184>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	431a      	orrs	r2, r3
 800b5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b5ae:	4b13      	ldr	r3, [pc, #76]	; (800b5fc <pvPortMalloc+0x194>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	3301      	adds	r3, #1
 800b5b4:	4a11      	ldr	r2, [pc, #68]	; (800b5fc <pvPortMalloc+0x194>)
 800b5b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b5b8:	f7fe fd32 	bl	800a020 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5bc:	69fb      	ldr	r3, [r7, #28]
 800b5be:	f003 0307 	and.w	r3, r3, #7
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d00a      	beq.n	800b5dc <pvPortMalloc+0x174>
	__asm volatile
 800b5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ca:	f383 8811 	msr	BASEPRI, r3
 800b5ce:	f3bf 8f6f 	isb	sy
 800b5d2:	f3bf 8f4f 	dsb	sy
 800b5d6:	60fb      	str	r3, [r7, #12]
}
 800b5d8:	bf00      	nop
 800b5da:	e7fe      	b.n	800b5da <pvPortMalloc+0x172>
	return pvReturn;
 800b5dc:	69fb      	ldr	r3, [r7, #28]
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3728      	adds	r7, #40	; 0x28
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}
 800b5e6:	bf00      	nop
 800b5e8:	2000561c 	.word	0x2000561c
 800b5ec:	20005630 	.word	0x20005630
 800b5f0:	20005620 	.word	0x20005620
 800b5f4:	20005614 	.word	0x20005614
 800b5f8:	20005624 	.word	0x20005624
 800b5fc:	20005628 	.word	0x20005628

0800b600 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b086      	sub	sp, #24
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d04d      	beq.n	800b6ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b612:	2308      	movs	r3, #8
 800b614:	425b      	negs	r3, r3
 800b616:	697a      	ldr	r2, [r7, #20]
 800b618:	4413      	add	r3, r2
 800b61a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b61c:	697b      	ldr	r3, [r7, #20]
 800b61e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	685a      	ldr	r2, [r3, #4]
 800b624:	4b24      	ldr	r3, [pc, #144]	; (800b6b8 <vPortFree+0xb8>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	4013      	ands	r3, r2
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d10a      	bne.n	800b644 <vPortFree+0x44>
	__asm volatile
 800b62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b632:	f383 8811 	msr	BASEPRI, r3
 800b636:	f3bf 8f6f 	isb	sy
 800b63a:	f3bf 8f4f 	dsb	sy
 800b63e:	60fb      	str	r3, [r7, #12]
}
 800b640:	bf00      	nop
 800b642:	e7fe      	b.n	800b642 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d00a      	beq.n	800b662 <vPortFree+0x62>
	__asm volatile
 800b64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b650:	f383 8811 	msr	BASEPRI, r3
 800b654:	f3bf 8f6f 	isb	sy
 800b658:	f3bf 8f4f 	dsb	sy
 800b65c:	60bb      	str	r3, [r7, #8]
}
 800b65e:	bf00      	nop
 800b660:	e7fe      	b.n	800b660 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b662:	693b      	ldr	r3, [r7, #16]
 800b664:	685a      	ldr	r2, [r3, #4]
 800b666:	4b14      	ldr	r3, [pc, #80]	; (800b6b8 <vPortFree+0xb8>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	4013      	ands	r3, r2
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d01e      	beq.n	800b6ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d11a      	bne.n	800b6ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	685a      	ldr	r2, [r3, #4]
 800b67c:	4b0e      	ldr	r3, [pc, #56]	; (800b6b8 <vPortFree+0xb8>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	43db      	mvns	r3, r3
 800b682:	401a      	ands	r2, r3
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b688:	f7fe fcbc 	bl	800a004 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b68c:	693b      	ldr	r3, [r7, #16]
 800b68e:	685a      	ldr	r2, [r3, #4]
 800b690:	4b0a      	ldr	r3, [pc, #40]	; (800b6bc <vPortFree+0xbc>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	4413      	add	r3, r2
 800b696:	4a09      	ldr	r2, [pc, #36]	; (800b6bc <vPortFree+0xbc>)
 800b698:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b69a:	6938      	ldr	r0, [r7, #16]
 800b69c:	f000 f874 	bl	800b788 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b6a0:	4b07      	ldr	r3, [pc, #28]	; (800b6c0 <vPortFree+0xc0>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	3301      	adds	r3, #1
 800b6a6:	4a06      	ldr	r2, [pc, #24]	; (800b6c0 <vPortFree+0xc0>)
 800b6a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b6aa:	f7fe fcb9 	bl	800a020 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b6ae:	bf00      	nop
 800b6b0:	3718      	adds	r7, #24
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	bf00      	nop
 800b6b8:	20005630 	.word	0x20005630
 800b6bc:	20005620 	.word	0x20005620
 800b6c0:	2000562c 	.word	0x2000562c

0800b6c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b085      	sub	sp, #20
 800b6c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b6ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b6ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b6d0:	4b27      	ldr	r3, [pc, #156]	; (800b770 <prvHeapInit+0xac>)
 800b6d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	f003 0307 	and.w	r3, r3, #7
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d00c      	beq.n	800b6f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	3307      	adds	r3, #7
 800b6e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	f023 0307 	bic.w	r3, r3, #7
 800b6ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b6ec:	68ba      	ldr	r2, [r7, #8]
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	1ad3      	subs	r3, r2, r3
 800b6f2:	4a1f      	ldr	r2, [pc, #124]	; (800b770 <prvHeapInit+0xac>)
 800b6f4:	4413      	add	r3, r2
 800b6f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b6fc:	4a1d      	ldr	r2, [pc, #116]	; (800b774 <prvHeapInit+0xb0>)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b702:	4b1c      	ldr	r3, [pc, #112]	; (800b774 <prvHeapInit+0xb0>)
 800b704:	2200      	movs	r2, #0
 800b706:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	68ba      	ldr	r2, [r7, #8]
 800b70c:	4413      	add	r3, r2
 800b70e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b710:	2208      	movs	r2, #8
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	1a9b      	subs	r3, r3, r2
 800b716:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	f023 0307 	bic.w	r3, r3, #7
 800b71e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	4a15      	ldr	r2, [pc, #84]	; (800b778 <prvHeapInit+0xb4>)
 800b724:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b726:	4b14      	ldr	r3, [pc, #80]	; (800b778 <prvHeapInit+0xb4>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	2200      	movs	r2, #0
 800b72c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b72e:	4b12      	ldr	r3, [pc, #72]	; (800b778 <prvHeapInit+0xb4>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	2200      	movs	r2, #0
 800b734:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	68fa      	ldr	r2, [r7, #12]
 800b73e:	1ad2      	subs	r2, r2, r3
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b744:	4b0c      	ldr	r3, [pc, #48]	; (800b778 <prvHeapInit+0xb4>)
 800b746:	681a      	ldr	r2, [r3, #0]
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	685b      	ldr	r3, [r3, #4]
 800b750:	4a0a      	ldr	r2, [pc, #40]	; (800b77c <prvHeapInit+0xb8>)
 800b752:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	685b      	ldr	r3, [r3, #4]
 800b758:	4a09      	ldr	r2, [pc, #36]	; (800b780 <prvHeapInit+0xbc>)
 800b75a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b75c:	4b09      	ldr	r3, [pc, #36]	; (800b784 <prvHeapInit+0xc0>)
 800b75e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b762:	601a      	str	r2, [r3, #0]
}
 800b764:	bf00      	nop
 800b766:	3714      	adds	r7, #20
 800b768:	46bd      	mov	sp, r7
 800b76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76e:	4770      	bx	lr
 800b770:	20001a14 	.word	0x20001a14
 800b774:	20005614 	.word	0x20005614
 800b778:	2000561c 	.word	0x2000561c
 800b77c:	20005624 	.word	0x20005624
 800b780:	20005620 	.word	0x20005620
 800b784:	20005630 	.word	0x20005630

0800b788 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b788:	b480      	push	{r7}
 800b78a:	b085      	sub	sp, #20
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b790:	4b28      	ldr	r3, [pc, #160]	; (800b834 <prvInsertBlockIntoFreeList+0xac>)
 800b792:	60fb      	str	r3, [r7, #12]
 800b794:	e002      	b.n	800b79c <prvInsertBlockIntoFreeList+0x14>
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	60fb      	str	r3, [r7, #12]
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	687a      	ldr	r2, [r7, #4]
 800b7a2:	429a      	cmp	r2, r3
 800b7a4:	d8f7      	bhi.n	800b796 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	685b      	ldr	r3, [r3, #4]
 800b7ae:	68ba      	ldr	r2, [r7, #8]
 800b7b0:	4413      	add	r3, r2
 800b7b2:	687a      	ldr	r2, [r7, #4]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d108      	bne.n	800b7ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	685a      	ldr	r2, [r3, #4]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	441a      	add	r2, r3
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	685b      	ldr	r3, [r3, #4]
 800b7d2:	68ba      	ldr	r2, [r7, #8]
 800b7d4:	441a      	add	r2, r3
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	429a      	cmp	r2, r3
 800b7dc:	d118      	bne.n	800b810 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	681a      	ldr	r2, [r3, #0]
 800b7e2:	4b15      	ldr	r3, [pc, #84]	; (800b838 <prvInsertBlockIntoFreeList+0xb0>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	d00d      	beq.n	800b806 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	685a      	ldr	r2, [r3, #4]
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	685b      	ldr	r3, [r3, #4]
 800b7f4:	441a      	add	r2, r3
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	681a      	ldr	r2, [r3, #0]
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	601a      	str	r2, [r3, #0]
 800b804:	e008      	b.n	800b818 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b806:	4b0c      	ldr	r3, [pc, #48]	; (800b838 <prvInsertBlockIntoFreeList+0xb0>)
 800b808:	681a      	ldr	r2, [r3, #0]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	601a      	str	r2, [r3, #0]
 800b80e:	e003      	b.n	800b818 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681a      	ldr	r2, [r3, #0]
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b818:	68fa      	ldr	r2, [r7, #12]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d002      	beq.n	800b826 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	687a      	ldr	r2, [r7, #4]
 800b824:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b826:	bf00      	nop
 800b828:	3714      	adds	r7, #20
 800b82a:	46bd      	mov	sp, r7
 800b82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b830:	4770      	bx	lr
 800b832:	bf00      	nop
 800b834:	20005614 	.word	0x20005614
 800b838:	2000561c 	.word	0x2000561c

0800b83c <_Znwj>:
 800b83c:	2801      	cmp	r0, #1
 800b83e:	bf38      	it	cc
 800b840:	2001      	movcc	r0, #1
 800b842:	b510      	push	{r4, lr}
 800b844:	4604      	mov	r4, r0
 800b846:	4620      	mov	r0, r4
 800b848:	f000 f93a 	bl	800bac0 <malloc>
 800b84c:	b930      	cbnz	r0, 800b85c <_Znwj+0x20>
 800b84e:	f000 f807 	bl	800b860 <_ZSt15get_new_handlerv>
 800b852:	b908      	cbnz	r0, 800b858 <_Znwj+0x1c>
 800b854:	f000 f80c 	bl	800b870 <abort>
 800b858:	4780      	blx	r0
 800b85a:	e7f4      	b.n	800b846 <_Znwj+0xa>
 800b85c:	bd10      	pop	{r4, pc}
	...

0800b860 <_ZSt15get_new_handlerv>:
 800b860:	4b02      	ldr	r3, [pc, #8]	; (800b86c <_ZSt15get_new_handlerv+0xc>)
 800b862:	6818      	ldr	r0, [r3, #0]
 800b864:	f3bf 8f5b 	dmb	ish
 800b868:	4770      	bx	lr
 800b86a:	bf00      	nop
 800b86c:	20005634 	.word	0x20005634

0800b870 <abort>:
 800b870:	b508      	push	{r3, lr}
 800b872:	2006      	movs	r0, #6
 800b874:	f000 ffd2 	bl	800c81c <raise>
 800b878:	2001      	movs	r0, #1
 800b87a:	f7f7 fe09 	bl	8003490 <_exit>
	...

0800b880 <__errno>:
 800b880:	4b01      	ldr	r3, [pc, #4]	; (800b888 <__errno+0x8>)
 800b882:	6818      	ldr	r0, [r3, #0]
 800b884:	4770      	bx	lr
 800b886:	bf00      	nop
 800b888:	20000068 	.word	0x20000068

0800b88c <std>:
 800b88c:	2300      	movs	r3, #0
 800b88e:	b510      	push	{r4, lr}
 800b890:	4604      	mov	r4, r0
 800b892:	e9c0 3300 	strd	r3, r3, [r0]
 800b896:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b89a:	6083      	str	r3, [r0, #8]
 800b89c:	8181      	strh	r1, [r0, #12]
 800b89e:	6643      	str	r3, [r0, #100]	; 0x64
 800b8a0:	81c2      	strh	r2, [r0, #14]
 800b8a2:	6183      	str	r3, [r0, #24]
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	2208      	movs	r2, #8
 800b8a8:	305c      	adds	r0, #92	; 0x5c
 800b8aa:	f000 f91f 	bl	800baec <memset>
 800b8ae:	4b05      	ldr	r3, [pc, #20]	; (800b8c4 <std+0x38>)
 800b8b0:	6263      	str	r3, [r4, #36]	; 0x24
 800b8b2:	4b05      	ldr	r3, [pc, #20]	; (800b8c8 <std+0x3c>)
 800b8b4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b8b6:	4b05      	ldr	r3, [pc, #20]	; (800b8cc <std+0x40>)
 800b8b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b8ba:	4b05      	ldr	r3, [pc, #20]	; (800b8d0 <std+0x44>)
 800b8bc:	6224      	str	r4, [r4, #32]
 800b8be:	6323      	str	r3, [r4, #48]	; 0x30
 800b8c0:	bd10      	pop	{r4, pc}
 800b8c2:	bf00      	nop
 800b8c4:	0800c8fd 	.word	0x0800c8fd
 800b8c8:	0800c91f 	.word	0x0800c91f
 800b8cc:	0800c957 	.word	0x0800c957
 800b8d0:	0800c97b 	.word	0x0800c97b

0800b8d4 <_cleanup_r>:
 800b8d4:	4901      	ldr	r1, [pc, #4]	; (800b8dc <_cleanup_r+0x8>)
 800b8d6:	f000 b8af 	b.w	800ba38 <_fwalk_reent>
 800b8da:	bf00      	nop
 800b8dc:	0800da61 	.word	0x0800da61

0800b8e0 <__sfmoreglue>:
 800b8e0:	b570      	push	{r4, r5, r6, lr}
 800b8e2:	2268      	movs	r2, #104	; 0x68
 800b8e4:	1e4d      	subs	r5, r1, #1
 800b8e6:	4355      	muls	r5, r2
 800b8e8:	460e      	mov	r6, r1
 800b8ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b8ee:	f000 f971 	bl	800bbd4 <_malloc_r>
 800b8f2:	4604      	mov	r4, r0
 800b8f4:	b140      	cbz	r0, 800b908 <__sfmoreglue+0x28>
 800b8f6:	2100      	movs	r1, #0
 800b8f8:	e9c0 1600 	strd	r1, r6, [r0]
 800b8fc:	300c      	adds	r0, #12
 800b8fe:	60a0      	str	r0, [r4, #8]
 800b900:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b904:	f000 f8f2 	bl	800baec <memset>
 800b908:	4620      	mov	r0, r4
 800b90a:	bd70      	pop	{r4, r5, r6, pc}

0800b90c <__sfp_lock_acquire>:
 800b90c:	4801      	ldr	r0, [pc, #4]	; (800b914 <__sfp_lock_acquire+0x8>)
 800b90e:	f7f7 bf49 	b.w	80037a4 <__retarget_lock_acquire_recursive>
 800b912:	bf00      	nop
 800b914:	20000608 	.word	0x20000608

0800b918 <__sfp_lock_release>:
 800b918:	4801      	ldr	r0, [pc, #4]	; (800b920 <__sfp_lock_release+0x8>)
 800b91a:	f7f7 bf57 	b.w	80037cc <__retarget_lock_release_recursive>
 800b91e:	bf00      	nop
 800b920:	20000608 	.word	0x20000608

0800b924 <__sinit_lock_acquire>:
 800b924:	4801      	ldr	r0, [pc, #4]	; (800b92c <__sinit_lock_acquire+0x8>)
 800b926:	f7f7 bf3d 	b.w	80037a4 <__retarget_lock_acquire_recursive>
 800b92a:	bf00      	nop
 800b92c:	200005fc 	.word	0x200005fc

0800b930 <__sinit_lock_release>:
 800b930:	4801      	ldr	r0, [pc, #4]	; (800b938 <__sinit_lock_release+0x8>)
 800b932:	f7f7 bf4b 	b.w	80037cc <__retarget_lock_release_recursive>
 800b936:	bf00      	nop
 800b938:	200005fc 	.word	0x200005fc

0800b93c <__sinit>:
 800b93c:	b510      	push	{r4, lr}
 800b93e:	4604      	mov	r4, r0
 800b940:	f7ff fff0 	bl	800b924 <__sinit_lock_acquire>
 800b944:	69a3      	ldr	r3, [r4, #24]
 800b946:	b11b      	cbz	r3, 800b950 <__sinit+0x14>
 800b948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b94c:	f7ff bff0 	b.w	800b930 <__sinit_lock_release>
 800b950:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b954:	6523      	str	r3, [r4, #80]	; 0x50
 800b956:	4b13      	ldr	r3, [pc, #76]	; (800b9a4 <__sinit+0x68>)
 800b958:	4a13      	ldr	r2, [pc, #76]	; (800b9a8 <__sinit+0x6c>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b95e:	42a3      	cmp	r3, r4
 800b960:	bf04      	itt	eq
 800b962:	2301      	moveq	r3, #1
 800b964:	61a3      	streq	r3, [r4, #24]
 800b966:	4620      	mov	r0, r4
 800b968:	f000 f820 	bl	800b9ac <__sfp>
 800b96c:	6060      	str	r0, [r4, #4]
 800b96e:	4620      	mov	r0, r4
 800b970:	f000 f81c 	bl	800b9ac <__sfp>
 800b974:	60a0      	str	r0, [r4, #8]
 800b976:	4620      	mov	r0, r4
 800b978:	f000 f818 	bl	800b9ac <__sfp>
 800b97c:	2200      	movs	r2, #0
 800b97e:	60e0      	str	r0, [r4, #12]
 800b980:	2104      	movs	r1, #4
 800b982:	6860      	ldr	r0, [r4, #4]
 800b984:	f7ff ff82 	bl	800b88c <std>
 800b988:	68a0      	ldr	r0, [r4, #8]
 800b98a:	2201      	movs	r2, #1
 800b98c:	2109      	movs	r1, #9
 800b98e:	f7ff ff7d 	bl	800b88c <std>
 800b992:	68e0      	ldr	r0, [r4, #12]
 800b994:	2202      	movs	r2, #2
 800b996:	2112      	movs	r1, #18
 800b998:	f7ff ff78 	bl	800b88c <std>
 800b99c:	2301      	movs	r3, #1
 800b99e:	61a3      	str	r3, [r4, #24]
 800b9a0:	e7d2      	b.n	800b948 <__sinit+0xc>
 800b9a2:	bf00      	nop
 800b9a4:	0800ecac 	.word	0x0800ecac
 800b9a8:	0800b8d5 	.word	0x0800b8d5

0800b9ac <__sfp>:
 800b9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ae:	4607      	mov	r7, r0
 800b9b0:	f7ff ffac 	bl	800b90c <__sfp_lock_acquire>
 800b9b4:	4b1e      	ldr	r3, [pc, #120]	; (800ba30 <__sfp+0x84>)
 800b9b6:	681e      	ldr	r6, [r3, #0]
 800b9b8:	69b3      	ldr	r3, [r6, #24]
 800b9ba:	b913      	cbnz	r3, 800b9c2 <__sfp+0x16>
 800b9bc:	4630      	mov	r0, r6
 800b9be:	f7ff ffbd 	bl	800b93c <__sinit>
 800b9c2:	3648      	adds	r6, #72	; 0x48
 800b9c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b9c8:	3b01      	subs	r3, #1
 800b9ca:	d503      	bpl.n	800b9d4 <__sfp+0x28>
 800b9cc:	6833      	ldr	r3, [r6, #0]
 800b9ce:	b30b      	cbz	r3, 800ba14 <__sfp+0x68>
 800b9d0:	6836      	ldr	r6, [r6, #0]
 800b9d2:	e7f7      	b.n	800b9c4 <__sfp+0x18>
 800b9d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b9d8:	b9d5      	cbnz	r5, 800ba10 <__sfp+0x64>
 800b9da:	4b16      	ldr	r3, [pc, #88]	; (800ba34 <__sfp+0x88>)
 800b9dc:	60e3      	str	r3, [r4, #12]
 800b9de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b9e2:	6665      	str	r5, [r4, #100]	; 0x64
 800b9e4:	f7f7 feb8 	bl	8003758 <__retarget_lock_init_recursive>
 800b9e8:	f7ff ff96 	bl	800b918 <__sfp_lock_release>
 800b9ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b9f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b9f4:	6025      	str	r5, [r4, #0]
 800b9f6:	61a5      	str	r5, [r4, #24]
 800b9f8:	2208      	movs	r2, #8
 800b9fa:	4629      	mov	r1, r5
 800b9fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ba00:	f000 f874 	bl	800baec <memset>
 800ba04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ba08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ba0c:	4620      	mov	r0, r4
 800ba0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba10:	3468      	adds	r4, #104	; 0x68
 800ba12:	e7d9      	b.n	800b9c8 <__sfp+0x1c>
 800ba14:	2104      	movs	r1, #4
 800ba16:	4638      	mov	r0, r7
 800ba18:	f7ff ff62 	bl	800b8e0 <__sfmoreglue>
 800ba1c:	4604      	mov	r4, r0
 800ba1e:	6030      	str	r0, [r6, #0]
 800ba20:	2800      	cmp	r0, #0
 800ba22:	d1d5      	bne.n	800b9d0 <__sfp+0x24>
 800ba24:	f7ff ff78 	bl	800b918 <__sfp_lock_release>
 800ba28:	230c      	movs	r3, #12
 800ba2a:	603b      	str	r3, [r7, #0]
 800ba2c:	e7ee      	b.n	800ba0c <__sfp+0x60>
 800ba2e:	bf00      	nop
 800ba30:	0800ecac 	.word	0x0800ecac
 800ba34:	ffff0001 	.word	0xffff0001

0800ba38 <_fwalk_reent>:
 800ba38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba3c:	4606      	mov	r6, r0
 800ba3e:	4688      	mov	r8, r1
 800ba40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ba44:	2700      	movs	r7, #0
 800ba46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ba4a:	f1b9 0901 	subs.w	r9, r9, #1
 800ba4e:	d505      	bpl.n	800ba5c <_fwalk_reent+0x24>
 800ba50:	6824      	ldr	r4, [r4, #0]
 800ba52:	2c00      	cmp	r4, #0
 800ba54:	d1f7      	bne.n	800ba46 <_fwalk_reent+0xe>
 800ba56:	4638      	mov	r0, r7
 800ba58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba5c:	89ab      	ldrh	r3, [r5, #12]
 800ba5e:	2b01      	cmp	r3, #1
 800ba60:	d907      	bls.n	800ba72 <_fwalk_reent+0x3a>
 800ba62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba66:	3301      	adds	r3, #1
 800ba68:	d003      	beq.n	800ba72 <_fwalk_reent+0x3a>
 800ba6a:	4629      	mov	r1, r5
 800ba6c:	4630      	mov	r0, r6
 800ba6e:	47c0      	blx	r8
 800ba70:	4307      	orrs	r7, r0
 800ba72:	3568      	adds	r5, #104	; 0x68
 800ba74:	e7e9      	b.n	800ba4a <_fwalk_reent+0x12>
	...

0800ba78 <__libc_init_array>:
 800ba78:	b570      	push	{r4, r5, r6, lr}
 800ba7a:	4d0d      	ldr	r5, [pc, #52]	; (800bab0 <__libc_init_array+0x38>)
 800ba7c:	4c0d      	ldr	r4, [pc, #52]	; (800bab4 <__libc_init_array+0x3c>)
 800ba7e:	1b64      	subs	r4, r4, r5
 800ba80:	10a4      	asrs	r4, r4, #2
 800ba82:	2600      	movs	r6, #0
 800ba84:	42a6      	cmp	r6, r4
 800ba86:	d109      	bne.n	800ba9c <__libc_init_array+0x24>
 800ba88:	4d0b      	ldr	r5, [pc, #44]	; (800bab8 <__libc_init_array+0x40>)
 800ba8a:	4c0c      	ldr	r4, [pc, #48]	; (800babc <__libc_init_array+0x44>)
 800ba8c:	f003 f818 	bl	800eac0 <_init>
 800ba90:	1b64      	subs	r4, r4, r5
 800ba92:	10a4      	asrs	r4, r4, #2
 800ba94:	2600      	movs	r6, #0
 800ba96:	42a6      	cmp	r6, r4
 800ba98:	d105      	bne.n	800baa6 <__libc_init_array+0x2e>
 800ba9a:	bd70      	pop	{r4, r5, r6, pc}
 800ba9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800baa0:	4798      	blx	r3
 800baa2:	3601      	adds	r6, #1
 800baa4:	e7ee      	b.n	800ba84 <__libc_init_array+0xc>
 800baa6:	f855 3b04 	ldr.w	r3, [r5], #4
 800baaa:	4798      	blx	r3
 800baac:	3601      	adds	r6, #1
 800baae:	e7f2      	b.n	800ba96 <__libc_init_array+0x1e>
 800bab0:	0800f034 	.word	0x0800f034
 800bab4:	0800f034 	.word	0x0800f034
 800bab8:	0800f034 	.word	0x0800f034
 800babc:	0800f03c 	.word	0x0800f03c

0800bac0 <malloc>:
 800bac0:	4b02      	ldr	r3, [pc, #8]	; (800bacc <malloc+0xc>)
 800bac2:	4601      	mov	r1, r0
 800bac4:	6818      	ldr	r0, [r3, #0]
 800bac6:	f000 b885 	b.w	800bbd4 <_malloc_r>
 800baca:	bf00      	nop
 800bacc:	20000068 	.word	0x20000068

0800bad0 <memcpy>:
 800bad0:	440a      	add	r2, r1
 800bad2:	4291      	cmp	r1, r2
 800bad4:	f100 33ff 	add.w	r3, r0, #4294967295
 800bad8:	d100      	bne.n	800badc <memcpy+0xc>
 800bada:	4770      	bx	lr
 800badc:	b510      	push	{r4, lr}
 800bade:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bae2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bae6:	4291      	cmp	r1, r2
 800bae8:	d1f9      	bne.n	800bade <memcpy+0xe>
 800baea:	bd10      	pop	{r4, pc}

0800baec <memset>:
 800baec:	4402      	add	r2, r0
 800baee:	4603      	mov	r3, r0
 800baf0:	4293      	cmp	r3, r2
 800baf2:	d100      	bne.n	800baf6 <memset+0xa>
 800baf4:	4770      	bx	lr
 800baf6:	f803 1b01 	strb.w	r1, [r3], #1
 800bafa:	e7f9      	b.n	800baf0 <memset+0x4>

0800bafc <_free_r>:
 800bafc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bafe:	2900      	cmp	r1, #0
 800bb00:	d044      	beq.n	800bb8c <_free_r+0x90>
 800bb02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb06:	9001      	str	r0, [sp, #4]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	f1a1 0404 	sub.w	r4, r1, #4
 800bb0e:	bfb8      	it	lt
 800bb10:	18e4      	addlt	r4, r4, r3
 800bb12:	f002 f85d 	bl	800dbd0 <__malloc_lock>
 800bb16:	4a1e      	ldr	r2, [pc, #120]	; (800bb90 <_free_r+0x94>)
 800bb18:	9801      	ldr	r0, [sp, #4]
 800bb1a:	6813      	ldr	r3, [r2, #0]
 800bb1c:	b933      	cbnz	r3, 800bb2c <_free_r+0x30>
 800bb1e:	6063      	str	r3, [r4, #4]
 800bb20:	6014      	str	r4, [r2, #0]
 800bb22:	b003      	add	sp, #12
 800bb24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb28:	f002 b858 	b.w	800dbdc <__malloc_unlock>
 800bb2c:	42a3      	cmp	r3, r4
 800bb2e:	d908      	bls.n	800bb42 <_free_r+0x46>
 800bb30:	6825      	ldr	r5, [r4, #0]
 800bb32:	1961      	adds	r1, r4, r5
 800bb34:	428b      	cmp	r3, r1
 800bb36:	bf01      	itttt	eq
 800bb38:	6819      	ldreq	r1, [r3, #0]
 800bb3a:	685b      	ldreq	r3, [r3, #4]
 800bb3c:	1949      	addeq	r1, r1, r5
 800bb3e:	6021      	streq	r1, [r4, #0]
 800bb40:	e7ed      	b.n	800bb1e <_free_r+0x22>
 800bb42:	461a      	mov	r2, r3
 800bb44:	685b      	ldr	r3, [r3, #4]
 800bb46:	b10b      	cbz	r3, 800bb4c <_free_r+0x50>
 800bb48:	42a3      	cmp	r3, r4
 800bb4a:	d9fa      	bls.n	800bb42 <_free_r+0x46>
 800bb4c:	6811      	ldr	r1, [r2, #0]
 800bb4e:	1855      	adds	r5, r2, r1
 800bb50:	42a5      	cmp	r5, r4
 800bb52:	d10b      	bne.n	800bb6c <_free_r+0x70>
 800bb54:	6824      	ldr	r4, [r4, #0]
 800bb56:	4421      	add	r1, r4
 800bb58:	1854      	adds	r4, r2, r1
 800bb5a:	42a3      	cmp	r3, r4
 800bb5c:	6011      	str	r1, [r2, #0]
 800bb5e:	d1e0      	bne.n	800bb22 <_free_r+0x26>
 800bb60:	681c      	ldr	r4, [r3, #0]
 800bb62:	685b      	ldr	r3, [r3, #4]
 800bb64:	6053      	str	r3, [r2, #4]
 800bb66:	4421      	add	r1, r4
 800bb68:	6011      	str	r1, [r2, #0]
 800bb6a:	e7da      	b.n	800bb22 <_free_r+0x26>
 800bb6c:	d902      	bls.n	800bb74 <_free_r+0x78>
 800bb6e:	230c      	movs	r3, #12
 800bb70:	6003      	str	r3, [r0, #0]
 800bb72:	e7d6      	b.n	800bb22 <_free_r+0x26>
 800bb74:	6825      	ldr	r5, [r4, #0]
 800bb76:	1961      	adds	r1, r4, r5
 800bb78:	428b      	cmp	r3, r1
 800bb7a:	bf04      	itt	eq
 800bb7c:	6819      	ldreq	r1, [r3, #0]
 800bb7e:	685b      	ldreq	r3, [r3, #4]
 800bb80:	6063      	str	r3, [r4, #4]
 800bb82:	bf04      	itt	eq
 800bb84:	1949      	addeq	r1, r1, r5
 800bb86:	6021      	streq	r1, [r4, #0]
 800bb88:	6054      	str	r4, [r2, #4]
 800bb8a:	e7ca      	b.n	800bb22 <_free_r+0x26>
 800bb8c:	b003      	add	sp, #12
 800bb8e:	bd30      	pop	{r4, r5, pc}
 800bb90:	20005638 	.word	0x20005638

0800bb94 <sbrk_aligned>:
 800bb94:	b570      	push	{r4, r5, r6, lr}
 800bb96:	4e0e      	ldr	r6, [pc, #56]	; (800bbd0 <sbrk_aligned+0x3c>)
 800bb98:	460c      	mov	r4, r1
 800bb9a:	6831      	ldr	r1, [r6, #0]
 800bb9c:	4605      	mov	r5, r0
 800bb9e:	b911      	cbnz	r1, 800bba6 <sbrk_aligned+0x12>
 800bba0:	f000 fe04 	bl	800c7ac <_sbrk_r>
 800bba4:	6030      	str	r0, [r6, #0]
 800bba6:	4621      	mov	r1, r4
 800bba8:	4628      	mov	r0, r5
 800bbaa:	f000 fdff 	bl	800c7ac <_sbrk_r>
 800bbae:	1c43      	adds	r3, r0, #1
 800bbb0:	d00a      	beq.n	800bbc8 <sbrk_aligned+0x34>
 800bbb2:	1cc4      	adds	r4, r0, #3
 800bbb4:	f024 0403 	bic.w	r4, r4, #3
 800bbb8:	42a0      	cmp	r0, r4
 800bbba:	d007      	beq.n	800bbcc <sbrk_aligned+0x38>
 800bbbc:	1a21      	subs	r1, r4, r0
 800bbbe:	4628      	mov	r0, r5
 800bbc0:	f000 fdf4 	bl	800c7ac <_sbrk_r>
 800bbc4:	3001      	adds	r0, #1
 800bbc6:	d101      	bne.n	800bbcc <sbrk_aligned+0x38>
 800bbc8:	f04f 34ff 	mov.w	r4, #4294967295
 800bbcc:	4620      	mov	r0, r4
 800bbce:	bd70      	pop	{r4, r5, r6, pc}
 800bbd0:	2000563c 	.word	0x2000563c

0800bbd4 <_malloc_r>:
 800bbd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbd8:	1ccd      	adds	r5, r1, #3
 800bbda:	f025 0503 	bic.w	r5, r5, #3
 800bbde:	3508      	adds	r5, #8
 800bbe0:	2d0c      	cmp	r5, #12
 800bbe2:	bf38      	it	cc
 800bbe4:	250c      	movcc	r5, #12
 800bbe6:	2d00      	cmp	r5, #0
 800bbe8:	4607      	mov	r7, r0
 800bbea:	db01      	blt.n	800bbf0 <_malloc_r+0x1c>
 800bbec:	42a9      	cmp	r1, r5
 800bbee:	d905      	bls.n	800bbfc <_malloc_r+0x28>
 800bbf0:	230c      	movs	r3, #12
 800bbf2:	603b      	str	r3, [r7, #0]
 800bbf4:	2600      	movs	r6, #0
 800bbf6:	4630      	mov	r0, r6
 800bbf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbfc:	4e2e      	ldr	r6, [pc, #184]	; (800bcb8 <_malloc_r+0xe4>)
 800bbfe:	f001 ffe7 	bl	800dbd0 <__malloc_lock>
 800bc02:	6833      	ldr	r3, [r6, #0]
 800bc04:	461c      	mov	r4, r3
 800bc06:	bb34      	cbnz	r4, 800bc56 <_malloc_r+0x82>
 800bc08:	4629      	mov	r1, r5
 800bc0a:	4638      	mov	r0, r7
 800bc0c:	f7ff ffc2 	bl	800bb94 <sbrk_aligned>
 800bc10:	1c43      	adds	r3, r0, #1
 800bc12:	4604      	mov	r4, r0
 800bc14:	d14d      	bne.n	800bcb2 <_malloc_r+0xde>
 800bc16:	6834      	ldr	r4, [r6, #0]
 800bc18:	4626      	mov	r6, r4
 800bc1a:	2e00      	cmp	r6, #0
 800bc1c:	d140      	bne.n	800bca0 <_malloc_r+0xcc>
 800bc1e:	6823      	ldr	r3, [r4, #0]
 800bc20:	4631      	mov	r1, r6
 800bc22:	4638      	mov	r0, r7
 800bc24:	eb04 0803 	add.w	r8, r4, r3
 800bc28:	f000 fdc0 	bl	800c7ac <_sbrk_r>
 800bc2c:	4580      	cmp	r8, r0
 800bc2e:	d13a      	bne.n	800bca6 <_malloc_r+0xd2>
 800bc30:	6821      	ldr	r1, [r4, #0]
 800bc32:	3503      	adds	r5, #3
 800bc34:	1a6d      	subs	r5, r5, r1
 800bc36:	f025 0503 	bic.w	r5, r5, #3
 800bc3a:	3508      	adds	r5, #8
 800bc3c:	2d0c      	cmp	r5, #12
 800bc3e:	bf38      	it	cc
 800bc40:	250c      	movcc	r5, #12
 800bc42:	4629      	mov	r1, r5
 800bc44:	4638      	mov	r0, r7
 800bc46:	f7ff ffa5 	bl	800bb94 <sbrk_aligned>
 800bc4a:	3001      	adds	r0, #1
 800bc4c:	d02b      	beq.n	800bca6 <_malloc_r+0xd2>
 800bc4e:	6823      	ldr	r3, [r4, #0]
 800bc50:	442b      	add	r3, r5
 800bc52:	6023      	str	r3, [r4, #0]
 800bc54:	e00e      	b.n	800bc74 <_malloc_r+0xa0>
 800bc56:	6822      	ldr	r2, [r4, #0]
 800bc58:	1b52      	subs	r2, r2, r5
 800bc5a:	d41e      	bmi.n	800bc9a <_malloc_r+0xc6>
 800bc5c:	2a0b      	cmp	r2, #11
 800bc5e:	d916      	bls.n	800bc8e <_malloc_r+0xba>
 800bc60:	1961      	adds	r1, r4, r5
 800bc62:	42a3      	cmp	r3, r4
 800bc64:	6025      	str	r5, [r4, #0]
 800bc66:	bf18      	it	ne
 800bc68:	6059      	strne	r1, [r3, #4]
 800bc6a:	6863      	ldr	r3, [r4, #4]
 800bc6c:	bf08      	it	eq
 800bc6e:	6031      	streq	r1, [r6, #0]
 800bc70:	5162      	str	r2, [r4, r5]
 800bc72:	604b      	str	r3, [r1, #4]
 800bc74:	4638      	mov	r0, r7
 800bc76:	f104 060b 	add.w	r6, r4, #11
 800bc7a:	f001 ffaf 	bl	800dbdc <__malloc_unlock>
 800bc7e:	f026 0607 	bic.w	r6, r6, #7
 800bc82:	1d23      	adds	r3, r4, #4
 800bc84:	1af2      	subs	r2, r6, r3
 800bc86:	d0b6      	beq.n	800bbf6 <_malloc_r+0x22>
 800bc88:	1b9b      	subs	r3, r3, r6
 800bc8a:	50a3      	str	r3, [r4, r2]
 800bc8c:	e7b3      	b.n	800bbf6 <_malloc_r+0x22>
 800bc8e:	6862      	ldr	r2, [r4, #4]
 800bc90:	42a3      	cmp	r3, r4
 800bc92:	bf0c      	ite	eq
 800bc94:	6032      	streq	r2, [r6, #0]
 800bc96:	605a      	strne	r2, [r3, #4]
 800bc98:	e7ec      	b.n	800bc74 <_malloc_r+0xa0>
 800bc9a:	4623      	mov	r3, r4
 800bc9c:	6864      	ldr	r4, [r4, #4]
 800bc9e:	e7b2      	b.n	800bc06 <_malloc_r+0x32>
 800bca0:	4634      	mov	r4, r6
 800bca2:	6876      	ldr	r6, [r6, #4]
 800bca4:	e7b9      	b.n	800bc1a <_malloc_r+0x46>
 800bca6:	230c      	movs	r3, #12
 800bca8:	603b      	str	r3, [r7, #0]
 800bcaa:	4638      	mov	r0, r7
 800bcac:	f001 ff96 	bl	800dbdc <__malloc_unlock>
 800bcb0:	e7a1      	b.n	800bbf6 <_malloc_r+0x22>
 800bcb2:	6025      	str	r5, [r4, #0]
 800bcb4:	e7de      	b.n	800bc74 <_malloc_r+0xa0>
 800bcb6:	bf00      	nop
 800bcb8:	20005638 	.word	0x20005638

0800bcbc <__cvt>:
 800bcbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bcc0:	ec55 4b10 	vmov	r4, r5, d0
 800bcc4:	2d00      	cmp	r5, #0
 800bcc6:	460e      	mov	r6, r1
 800bcc8:	4619      	mov	r1, r3
 800bcca:	462b      	mov	r3, r5
 800bccc:	bfbb      	ittet	lt
 800bcce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bcd2:	461d      	movlt	r5, r3
 800bcd4:	2300      	movge	r3, #0
 800bcd6:	232d      	movlt	r3, #45	; 0x2d
 800bcd8:	700b      	strb	r3, [r1, #0]
 800bcda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcdc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bce0:	4691      	mov	r9, r2
 800bce2:	f023 0820 	bic.w	r8, r3, #32
 800bce6:	bfbc      	itt	lt
 800bce8:	4622      	movlt	r2, r4
 800bcea:	4614      	movlt	r4, r2
 800bcec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bcf0:	d005      	beq.n	800bcfe <__cvt+0x42>
 800bcf2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bcf6:	d100      	bne.n	800bcfa <__cvt+0x3e>
 800bcf8:	3601      	adds	r6, #1
 800bcfa:	2102      	movs	r1, #2
 800bcfc:	e000      	b.n	800bd00 <__cvt+0x44>
 800bcfe:	2103      	movs	r1, #3
 800bd00:	ab03      	add	r3, sp, #12
 800bd02:	9301      	str	r3, [sp, #4]
 800bd04:	ab02      	add	r3, sp, #8
 800bd06:	9300      	str	r3, [sp, #0]
 800bd08:	ec45 4b10 	vmov	d0, r4, r5
 800bd0c:	4653      	mov	r3, sl
 800bd0e:	4632      	mov	r2, r6
 800bd10:	f001 f832 	bl	800cd78 <_dtoa_r>
 800bd14:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bd18:	4607      	mov	r7, r0
 800bd1a:	d102      	bne.n	800bd22 <__cvt+0x66>
 800bd1c:	f019 0f01 	tst.w	r9, #1
 800bd20:	d022      	beq.n	800bd68 <__cvt+0xac>
 800bd22:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bd26:	eb07 0906 	add.w	r9, r7, r6
 800bd2a:	d110      	bne.n	800bd4e <__cvt+0x92>
 800bd2c:	783b      	ldrb	r3, [r7, #0]
 800bd2e:	2b30      	cmp	r3, #48	; 0x30
 800bd30:	d10a      	bne.n	800bd48 <__cvt+0x8c>
 800bd32:	2200      	movs	r2, #0
 800bd34:	2300      	movs	r3, #0
 800bd36:	4620      	mov	r0, r4
 800bd38:	4629      	mov	r1, r5
 800bd3a:	f7f4 fec5 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd3e:	b918      	cbnz	r0, 800bd48 <__cvt+0x8c>
 800bd40:	f1c6 0601 	rsb	r6, r6, #1
 800bd44:	f8ca 6000 	str.w	r6, [sl]
 800bd48:	f8da 3000 	ldr.w	r3, [sl]
 800bd4c:	4499      	add	r9, r3
 800bd4e:	2200      	movs	r2, #0
 800bd50:	2300      	movs	r3, #0
 800bd52:	4620      	mov	r0, r4
 800bd54:	4629      	mov	r1, r5
 800bd56:	f7f4 feb7 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd5a:	b108      	cbz	r0, 800bd60 <__cvt+0xa4>
 800bd5c:	f8cd 900c 	str.w	r9, [sp, #12]
 800bd60:	2230      	movs	r2, #48	; 0x30
 800bd62:	9b03      	ldr	r3, [sp, #12]
 800bd64:	454b      	cmp	r3, r9
 800bd66:	d307      	bcc.n	800bd78 <__cvt+0xbc>
 800bd68:	9b03      	ldr	r3, [sp, #12]
 800bd6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd6c:	1bdb      	subs	r3, r3, r7
 800bd6e:	4638      	mov	r0, r7
 800bd70:	6013      	str	r3, [r2, #0]
 800bd72:	b004      	add	sp, #16
 800bd74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd78:	1c59      	adds	r1, r3, #1
 800bd7a:	9103      	str	r1, [sp, #12]
 800bd7c:	701a      	strb	r2, [r3, #0]
 800bd7e:	e7f0      	b.n	800bd62 <__cvt+0xa6>

0800bd80 <__exponent>:
 800bd80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd82:	4603      	mov	r3, r0
 800bd84:	2900      	cmp	r1, #0
 800bd86:	bfb8      	it	lt
 800bd88:	4249      	neglt	r1, r1
 800bd8a:	f803 2b02 	strb.w	r2, [r3], #2
 800bd8e:	bfb4      	ite	lt
 800bd90:	222d      	movlt	r2, #45	; 0x2d
 800bd92:	222b      	movge	r2, #43	; 0x2b
 800bd94:	2909      	cmp	r1, #9
 800bd96:	7042      	strb	r2, [r0, #1]
 800bd98:	dd2a      	ble.n	800bdf0 <__exponent+0x70>
 800bd9a:	f10d 0407 	add.w	r4, sp, #7
 800bd9e:	46a4      	mov	ip, r4
 800bda0:	270a      	movs	r7, #10
 800bda2:	46a6      	mov	lr, r4
 800bda4:	460a      	mov	r2, r1
 800bda6:	fb91 f6f7 	sdiv	r6, r1, r7
 800bdaa:	fb07 1516 	mls	r5, r7, r6, r1
 800bdae:	3530      	adds	r5, #48	; 0x30
 800bdb0:	2a63      	cmp	r2, #99	; 0x63
 800bdb2:	f104 34ff 	add.w	r4, r4, #4294967295
 800bdb6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bdba:	4631      	mov	r1, r6
 800bdbc:	dcf1      	bgt.n	800bda2 <__exponent+0x22>
 800bdbe:	3130      	adds	r1, #48	; 0x30
 800bdc0:	f1ae 0502 	sub.w	r5, lr, #2
 800bdc4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bdc8:	1c44      	adds	r4, r0, #1
 800bdca:	4629      	mov	r1, r5
 800bdcc:	4561      	cmp	r1, ip
 800bdce:	d30a      	bcc.n	800bde6 <__exponent+0x66>
 800bdd0:	f10d 0209 	add.w	r2, sp, #9
 800bdd4:	eba2 020e 	sub.w	r2, r2, lr
 800bdd8:	4565      	cmp	r5, ip
 800bdda:	bf88      	it	hi
 800bddc:	2200      	movhi	r2, #0
 800bdde:	4413      	add	r3, r2
 800bde0:	1a18      	subs	r0, r3, r0
 800bde2:	b003      	add	sp, #12
 800bde4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bde6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bdea:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bdee:	e7ed      	b.n	800bdcc <__exponent+0x4c>
 800bdf0:	2330      	movs	r3, #48	; 0x30
 800bdf2:	3130      	adds	r1, #48	; 0x30
 800bdf4:	7083      	strb	r3, [r0, #2]
 800bdf6:	70c1      	strb	r1, [r0, #3]
 800bdf8:	1d03      	adds	r3, r0, #4
 800bdfa:	e7f1      	b.n	800bde0 <__exponent+0x60>

0800bdfc <_printf_float>:
 800bdfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be00:	ed2d 8b02 	vpush	{d8}
 800be04:	b08d      	sub	sp, #52	; 0x34
 800be06:	460c      	mov	r4, r1
 800be08:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800be0c:	4616      	mov	r6, r2
 800be0e:	461f      	mov	r7, r3
 800be10:	4605      	mov	r5, r0
 800be12:	f001 fe61 	bl	800dad8 <_localeconv_r>
 800be16:	f8d0 a000 	ldr.w	sl, [r0]
 800be1a:	4650      	mov	r0, sl
 800be1c:	f7f4 f9d8 	bl	80001d0 <strlen>
 800be20:	2300      	movs	r3, #0
 800be22:	930a      	str	r3, [sp, #40]	; 0x28
 800be24:	6823      	ldr	r3, [r4, #0]
 800be26:	9305      	str	r3, [sp, #20]
 800be28:	f8d8 3000 	ldr.w	r3, [r8]
 800be2c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800be30:	3307      	adds	r3, #7
 800be32:	f023 0307 	bic.w	r3, r3, #7
 800be36:	f103 0208 	add.w	r2, r3, #8
 800be3a:	f8c8 2000 	str.w	r2, [r8]
 800be3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be42:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800be46:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800be4a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800be4e:	9307      	str	r3, [sp, #28]
 800be50:	f8cd 8018 	str.w	r8, [sp, #24]
 800be54:	ee08 0a10 	vmov	s16, r0
 800be58:	4b9f      	ldr	r3, [pc, #636]	; (800c0d8 <_printf_float+0x2dc>)
 800be5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be5e:	f04f 32ff 	mov.w	r2, #4294967295
 800be62:	f7f4 fe63 	bl	8000b2c <__aeabi_dcmpun>
 800be66:	bb88      	cbnz	r0, 800becc <_printf_float+0xd0>
 800be68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be6c:	4b9a      	ldr	r3, [pc, #616]	; (800c0d8 <_printf_float+0x2dc>)
 800be6e:	f04f 32ff 	mov.w	r2, #4294967295
 800be72:	f7f4 fe3d 	bl	8000af0 <__aeabi_dcmple>
 800be76:	bb48      	cbnz	r0, 800becc <_printf_float+0xd0>
 800be78:	2200      	movs	r2, #0
 800be7a:	2300      	movs	r3, #0
 800be7c:	4640      	mov	r0, r8
 800be7e:	4649      	mov	r1, r9
 800be80:	f7f4 fe2c 	bl	8000adc <__aeabi_dcmplt>
 800be84:	b110      	cbz	r0, 800be8c <_printf_float+0x90>
 800be86:	232d      	movs	r3, #45	; 0x2d
 800be88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be8c:	4b93      	ldr	r3, [pc, #588]	; (800c0dc <_printf_float+0x2e0>)
 800be8e:	4894      	ldr	r0, [pc, #592]	; (800c0e0 <_printf_float+0x2e4>)
 800be90:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800be94:	bf94      	ite	ls
 800be96:	4698      	movls	r8, r3
 800be98:	4680      	movhi	r8, r0
 800be9a:	2303      	movs	r3, #3
 800be9c:	6123      	str	r3, [r4, #16]
 800be9e:	9b05      	ldr	r3, [sp, #20]
 800bea0:	f023 0204 	bic.w	r2, r3, #4
 800bea4:	6022      	str	r2, [r4, #0]
 800bea6:	f04f 0900 	mov.w	r9, #0
 800beaa:	9700      	str	r7, [sp, #0]
 800beac:	4633      	mov	r3, r6
 800beae:	aa0b      	add	r2, sp, #44	; 0x2c
 800beb0:	4621      	mov	r1, r4
 800beb2:	4628      	mov	r0, r5
 800beb4:	f000 f9d8 	bl	800c268 <_printf_common>
 800beb8:	3001      	adds	r0, #1
 800beba:	f040 8090 	bne.w	800bfde <_printf_float+0x1e2>
 800bebe:	f04f 30ff 	mov.w	r0, #4294967295
 800bec2:	b00d      	add	sp, #52	; 0x34
 800bec4:	ecbd 8b02 	vpop	{d8}
 800bec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800becc:	4642      	mov	r2, r8
 800bece:	464b      	mov	r3, r9
 800bed0:	4640      	mov	r0, r8
 800bed2:	4649      	mov	r1, r9
 800bed4:	f7f4 fe2a 	bl	8000b2c <__aeabi_dcmpun>
 800bed8:	b140      	cbz	r0, 800beec <_printf_float+0xf0>
 800beda:	464b      	mov	r3, r9
 800bedc:	2b00      	cmp	r3, #0
 800bede:	bfbc      	itt	lt
 800bee0:	232d      	movlt	r3, #45	; 0x2d
 800bee2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bee6:	487f      	ldr	r0, [pc, #508]	; (800c0e4 <_printf_float+0x2e8>)
 800bee8:	4b7f      	ldr	r3, [pc, #508]	; (800c0e8 <_printf_float+0x2ec>)
 800beea:	e7d1      	b.n	800be90 <_printf_float+0x94>
 800beec:	6863      	ldr	r3, [r4, #4]
 800beee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bef2:	9206      	str	r2, [sp, #24]
 800bef4:	1c5a      	adds	r2, r3, #1
 800bef6:	d13f      	bne.n	800bf78 <_printf_float+0x17c>
 800bef8:	2306      	movs	r3, #6
 800befa:	6063      	str	r3, [r4, #4]
 800befc:	9b05      	ldr	r3, [sp, #20]
 800befe:	6861      	ldr	r1, [r4, #4]
 800bf00:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bf04:	2300      	movs	r3, #0
 800bf06:	9303      	str	r3, [sp, #12]
 800bf08:	ab0a      	add	r3, sp, #40	; 0x28
 800bf0a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bf0e:	ab09      	add	r3, sp, #36	; 0x24
 800bf10:	ec49 8b10 	vmov	d0, r8, r9
 800bf14:	9300      	str	r3, [sp, #0]
 800bf16:	6022      	str	r2, [r4, #0]
 800bf18:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bf1c:	4628      	mov	r0, r5
 800bf1e:	f7ff fecd 	bl	800bcbc <__cvt>
 800bf22:	9b06      	ldr	r3, [sp, #24]
 800bf24:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf26:	2b47      	cmp	r3, #71	; 0x47
 800bf28:	4680      	mov	r8, r0
 800bf2a:	d108      	bne.n	800bf3e <_printf_float+0x142>
 800bf2c:	1cc8      	adds	r0, r1, #3
 800bf2e:	db02      	blt.n	800bf36 <_printf_float+0x13a>
 800bf30:	6863      	ldr	r3, [r4, #4]
 800bf32:	4299      	cmp	r1, r3
 800bf34:	dd41      	ble.n	800bfba <_printf_float+0x1be>
 800bf36:	f1ab 0b02 	sub.w	fp, fp, #2
 800bf3a:	fa5f fb8b 	uxtb.w	fp, fp
 800bf3e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bf42:	d820      	bhi.n	800bf86 <_printf_float+0x18a>
 800bf44:	3901      	subs	r1, #1
 800bf46:	465a      	mov	r2, fp
 800bf48:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bf4c:	9109      	str	r1, [sp, #36]	; 0x24
 800bf4e:	f7ff ff17 	bl	800bd80 <__exponent>
 800bf52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf54:	1813      	adds	r3, r2, r0
 800bf56:	2a01      	cmp	r2, #1
 800bf58:	4681      	mov	r9, r0
 800bf5a:	6123      	str	r3, [r4, #16]
 800bf5c:	dc02      	bgt.n	800bf64 <_printf_float+0x168>
 800bf5e:	6822      	ldr	r2, [r4, #0]
 800bf60:	07d2      	lsls	r2, r2, #31
 800bf62:	d501      	bpl.n	800bf68 <_printf_float+0x16c>
 800bf64:	3301      	adds	r3, #1
 800bf66:	6123      	str	r3, [r4, #16]
 800bf68:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d09c      	beq.n	800beaa <_printf_float+0xae>
 800bf70:	232d      	movs	r3, #45	; 0x2d
 800bf72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf76:	e798      	b.n	800beaa <_printf_float+0xae>
 800bf78:	9a06      	ldr	r2, [sp, #24]
 800bf7a:	2a47      	cmp	r2, #71	; 0x47
 800bf7c:	d1be      	bne.n	800befc <_printf_float+0x100>
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d1bc      	bne.n	800befc <_printf_float+0x100>
 800bf82:	2301      	movs	r3, #1
 800bf84:	e7b9      	b.n	800befa <_printf_float+0xfe>
 800bf86:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bf8a:	d118      	bne.n	800bfbe <_printf_float+0x1c2>
 800bf8c:	2900      	cmp	r1, #0
 800bf8e:	6863      	ldr	r3, [r4, #4]
 800bf90:	dd0b      	ble.n	800bfaa <_printf_float+0x1ae>
 800bf92:	6121      	str	r1, [r4, #16]
 800bf94:	b913      	cbnz	r3, 800bf9c <_printf_float+0x1a0>
 800bf96:	6822      	ldr	r2, [r4, #0]
 800bf98:	07d0      	lsls	r0, r2, #31
 800bf9a:	d502      	bpl.n	800bfa2 <_printf_float+0x1a6>
 800bf9c:	3301      	adds	r3, #1
 800bf9e:	440b      	add	r3, r1
 800bfa0:	6123      	str	r3, [r4, #16]
 800bfa2:	65a1      	str	r1, [r4, #88]	; 0x58
 800bfa4:	f04f 0900 	mov.w	r9, #0
 800bfa8:	e7de      	b.n	800bf68 <_printf_float+0x16c>
 800bfaa:	b913      	cbnz	r3, 800bfb2 <_printf_float+0x1b6>
 800bfac:	6822      	ldr	r2, [r4, #0]
 800bfae:	07d2      	lsls	r2, r2, #31
 800bfb0:	d501      	bpl.n	800bfb6 <_printf_float+0x1ba>
 800bfb2:	3302      	adds	r3, #2
 800bfb4:	e7f4      	b.n	800bfa0 <_printf_float+0x1a4>
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	e7f2      	b.n	800bfa0 <_printf_float+0x1a4>
 800bfba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bfbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfc0:	4299      	cmp	r1, r3
 800bfc2:	db05      	blt.n	800bfd0 <_printf_float+0x1d4>
 800bfc4:	6823      	ldr	r3, [r4, #0]
 800bfc6:	6121      	str	r1, [r4, #16]
 800bfc8:	07d8      	lsls	r0, r3, #31
 800bfca:	d5ea      	bpl.n	800bfa2 <_printf_float+0x1a6>
 800bfcc:	1c4b      	adds	r3, r1, #1
 800bfce:	e7e7      	b.n	800bfa0 <_printf_float+0x1a4>
 800bfd0:	2900      	cmp	r1, #0
 800bfd2:	bfd4      	ite	le
 800bfd4:	f1c1 0202 	rsble	r2, r1, #2
 800bfd8:	2201      	movgt	r2, #1
 800bfda:	4413      	add	r3, r2
 800bfdc:	e7e0      	b.n	800bfa0 <_printf_float+0x1a4>
 800bfde:	6823      	ldr	r3, [r4, #0]
 800bfe0:	055a      	lsls	r2, r3, #21
 800bfe2:	d407      	bmi.n	800bff4 <_printf_float+0x1f8>
 800bfe4:	6923      	ldr	r3, [r4, #16]
 800bfe6:	4642      	mov	r2, r8
 800bfe8:	4631      	mov	r1, r6
 800bfea:	4628      	mov	r0, r5
 800bfec:	47b8      	blx	r7
 800bfee:	3001      	adds	r0, #1
 800bff0:	d12c      	bne.n	800c04c <_printf_float+0x250>
 800bff2:	e764      	b.n	800bebe <_printf_float+0xc2>
 800bff4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bff8:	f240 80e0 	bls.w	800c1bc <_printf_float+0x3c0>
 800bffc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c000:	2200      	movs	r2, #0
 800c002:	2300      	movs	r3, #0
 800c004:	f7f4 fd60 	bl	8000ac8 <__aeabi_dcmpeq>
 800c008:	2800      	cmp	r0, #0
 800c00a:	d034      	beq.n	800c076 <_printf_float+0x27a>
 800c00c:	4a37      	ldr	r2, [pc, #220]	; (800c0ec <_printf_float+0x2f0>)
 800c00e:	2301      	movs	r3, #1
 800c010:	4631      	mov	r1, r6
 800c012:	4628      	mov	r0, r5
 800c014:	47b8      	blx	r7
 800c016:	3001      	adds	r0, #1
 800c018:	f43f af51 	beq.w	800bebe <_printf_float+0xc2>
 800c01c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c020:	429a      	cmp	r2, r3
 800c022:	db02      	blt.n	800c02a <_printf_float+0x22e>
 800c024:	6823      	ldr	r3, [r4, #0]
 800c026:	07d8      	lsls	r0, r3, #31
 800c028:	d510      	bpl.n	800c04c <_printf_float+0x250>
 800c02a:	ee18 3a10 	vmov	r3, s16
 800c02e:	4652      	mov	r2, sl
 800c030:	4631      	mov	r1, r6
 800c032:	4628      	mov	r0, r5
 800c034:	47b8      	blx	r7
 800c036:	3001      	adds	r0, #1
 800c038:	f43f af41 	beq.w	800bebe <_printf_float+0xc2>
 800c03c:	f04f 0800 	mov.w	r8, #0
 800c040:	f104 091a 	add.w	r9, r4, #26
 800c044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c046:	3b01      	subs	r3, #1
 800c048:	4543      	cmp	r3, r8
 800c04a:	dc09      	bgt.n	800c060 <_printf_float+0x264>
 800c04c:	6823      	ldr	r3, [r4, #0]
 800c04e:	079b      	lsls	r3, r3, #30
 800c050:	f100 8105 	bmi.w	800c25e <_printf_float+0x462>
 800c054:	68e0      	ldr	r0, [r4, #12]
 800c056:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c058:	4298      	cmp	r0, r3
 800c05a:	bfb8      	it	lt
 800c05c:	4618      	movlt	r0, r3
 800c05e:	e730      	b.n	800bec2 <_printf_float+0xc6>
 800c060:	2301      	movs	r3, #1
 800c062:	464a      	mov	r2, r9
 800c064:	4631      	mov	r1, r6
 800c066:	4628      	mov	r0, r5
 800c068:	47b8      	blx	r7
 800c06a:	3001      	adds	r0, #1
 800c06c:	f43f af27 	beq.w	800bebe <_printf_float+0xc2>
 800c070:	f108 0801 	add.w	r8, r8, #1
 800c074:	e7e6      	b.n	800c044 <_printf_float+0x248>
 800c076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c078:	2b00      	cmp	r3, #0
 800c07a:	dc39      	bgt.n	800c0f0 <_printf_float+0x2f4>
 800c07c:	4a1b      	ldr	r2, [pc, #108]	; (800c0ec <_printf_float+0x2f0>)
 800c07e:	2301      	movs	r3, #1
 800c080:	4631      	mov	r1, r6
 800c082:	4628      	mov	r0, r5
 800c084:	47b8      	blx	r7
 800c086:	3001      	adds	r0, #1
 800c088:	f43f af19 	beq.w	800bebe <_printf_float+0xc2>
 800c08c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c090:	4313      	orrs	r3, r2
 800c092:	d102      	bne.n	800c09a <_printf_float+0x29e>
 800c094:	6823      	ldr	r3, [r4, #0]
 800c096:	07d9      	lsls	r1, r3, #31
 800c098:	d5d8      	bpl.n	800c04c <_printf_float+0x250>
 800c09a:	ee18 3a10 	vmov	r3, s16
 800c09e:	4652      	mov	r2, sl
 800c0a0:	4631      	mov	r1, r6
 800c0a2:	4628      	mov	r0, r5
 800c0a4:	47b8      	blx	r7
 800c0a6:	3001      	adds	r0, #1
 800c0a8:	f43f af09 	beq.w	800bebe <_printf_float+0xc2>
 800c0ac:	f04f 0900 	mov.w	r9, #0
 800c0b0:	f104 0a1a 	add.w	sl, r4, #26
 800c0b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0b6:	425b      	negs	r3, r3
 800c0b8:	454b      	cmp	r3, r9
 800c0ba:	dc01      	bgt.n	800c0c0 <_printf_float+0x2c4>
 800c0bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0be:	e792      	b.n	800bfe6 <_printf_float+0x1ea>
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	4652      	mov	r2, sl
 800c0c4:	4631      	mov	r1, r6
 800c0c6:	4628      	mov	r0, r5
 800c0c8:	47b8      	blx	r7
 800c0ca:	3001      	adds	r0, #1
 800c0cc:	f43f aef7 	beq.w	800bebe <_printf_float+0xc2>
 800c0d0:	f109 0901 	add.w	r9, r9, #1
 800c0d4:	e7ee      	b.n	800c0b4 <_printf_float+0x2b8>
 800c0d6:	bf00      	nop
 800c0d8:	7fefffff 	.word	0x7fefffff
 800c0dc:	0800ecb0 	.word	0x0800ecb0
 800c0e0:	0800ecb4 	.word	0x0800ecb4
 800c0e4:	0800ecbc 	.word	0x0800ecbc
 800c0e8:	0800ecb8 	.word	0x0800ecb8
 800c0ec:	0800ecc0 	.word	0x0800ecc0
 800c0f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c0f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	bfa8      	it	ge
 800c0f8:	461a      	movge	r2, r3
 800c0fa:	2a00      	cmp	r2, #0
 800c0fc:	4691      	mov	r9, r2
 800c0fe:	dc37      	bgt.n	800c170 <_printf_float+0x374>
 800c100:	f04f 0b00 	mov.w	fp, #0
 800c104:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c108:	f104 021a 	add.w	r2, r4, #26
 800c10c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c10e:	9305      	str	r3, [sp, #20]
 800c110:	eba3 0309 	sub.w	r3, r3, r9
 800c114:	455b      	cmp	r3, fp
 800c116:	dc33      	bgt.n	800c180 <_printf_float+0x384>
 800c118:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c11c:	429a      	cmp	r2, r3
 800c11e:	db3b      	blt.n	800c198 <_printf_float+0x39c>
 800c120:	6823      	ldr	r3, [r4, #0]
 800c122:	07da      	lsls	r2, r3, #31
 800c124:	d438      	bmi.n	800c198 <_printf_float+0x39c>
 800c126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c128:	9a05      	ldr	r2, [sp, #20]
 800c12a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c12c:	1a9a      	subs	r2, r3, r2
 800c12e:	eba3 0901 	sub.w	r9, r3, r1
 800c132:	4591      	cmp	r9, r2
 800c134:	bfa8      	it	ge
 800c136:	4691      	movge	r9, r2
 800c138:	f1b9 0f00 	cmp.w	r9, #0
 800c13c:	dc35      	bgt.n	800c1aa <_printf_float+0x3ae>
 800c13e:	f04f 0800 	mov.w	r8, #0
 800c142:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c146:	f104 0a1a 	add.w	sl, r4, #26
 800c14a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c14e:	1a9b      	subs	r3, r3, r2
 800c150:	eba3 0309 	sub.w	r3, r3, r9
 800c154:	4543      	cmp	r3, r8
 800c156:	f77f af79 	ble.w	800c04c <_printf_float+0x250>
 800c15a:	2301      	movs	r3, #1
 800c15c:	4652      	mov	r2, sl
 800c15e:	4631      	mov	r1, r6
 800c160:	4628      	mov	r0, r5
 800c162:	47b8      	blx	r7
 800c164:	3001      	adds	r0, #1
 800c166:	f43f aeaa 	beq.w	800bebe <_printf_float+0xc2>
 800c16a:	f108 0801 	add.w	r8, r8, #1
 800c16e:	e7ec      	b.n	800c14a <_printf_float+0x34e>
 800c170:	4613      	mov	r3, r2
 800c172:	4631      	mov	r1, r6
 800c174:	4642      	mov	r2, r8
 800c176:	4628      	mov	r0, r5
 800c178:	47b8      	blx	r7
 800c17a:	3001      	adds	r0, #1
 800c17c:	d1c0      	bne.n	800c100 <_printf_float+0x304>
 800c17e:	e69e      	b.n	800bebe <_printf_float+0xc2>
 800c180:	2301      	movs	r3, #1
 800c182:	4631      	mov	r1, r6
 800c184:	4628      	mov	r0, r5
 800c186:	9205      	str	r2, [sp, #20]
 800c188:	47b8      	blx	r7
 800c18a:	3001      	adds	r0, #1
 800c18c:	f43f ae97 	beq.w	800bebe <_printf_float+0xc2>
 800c190:	9a05      	ldr	r2, [sp, #20]
 800c192:	f10b 0b01 	add.w	fp, fp, #1
 800c196:	e7b9      	b.n	800c10c <_printf_float+0x310>
 800c198:	ee18 3a10 	vmov	r3, s16
 800c19c:	4652      	mov	r2, sl
 800c19e:	4631      	mov	r1, r6
 800c1a0:	4628      	mov	r0, r5
 800c1a2:	47b8      	blx	r7
 800c1a4:	3001      	adds	r0, #1
 800c1a6:	d1be      	bne.n	800c126 <_printf_float+0x32a>
 800c1a8:	e689      	b.n	800bebe <_printf_float+0xc2>
 800c1aa:	9a05      	ldr	r2, [sp, #20]
 800c1ac:	464b      	mov	r3, r9
 800c1ae:	4442      	add	r2, r8
 800c1b0:	4631      	mov	r1, r6
 800c1b2:	4628      	mov	r0, r5
 800c1b4:	47b8      	blx	r7
 800c1b6:	3001      	adds	r0, #1
 800c1b8:	d1c1      	bne.n	800c13e <_printf_float+0x342>
 800c1ba:	e680      	b.n	800bebe <_printf_float+0xc2>
 800c1bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c1be:	2a01      	cmp	r2, #1
 800c1c0:	dc01      	bgt.n	800c1c6 <_printf_float+0x3ca>
 800c1c2:	07db      	lsls	r3, r3, #31
 800c1c4:	d538      	bpl.n	800c238 <_printf_float+0x43c>
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	4642      	mov	r2, r8
 800c1ca:	4631      	mov	r1, r6
 800c1cc:	4628      	mov	r0, r5
 800c1ce:	47b8      	blx	r7
 800c1d0:	3001      	adds	r0, #1
 800c1d2:	f43f ae74 	beq.w	800bebe <_printf_float+0xc2>
 800c1d6:	ee18 3a10 	vmov	r3, s16
 800c1da:	4652      	mov	r2, sl
 800c1dc:	4631      	mov	r1, r6
 800c1de:	4628      	mov	r0, r5
 800c1e0:	47b8      	blx	r7
 800c1e2:	3001      	adds	r0, #1
 800c1e4:	f43f ae6b 	beq.w	800bebe <_printf_float+0xc2>
 800c1e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	f7f4 fc6a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c1f4:	b9d8      	cbnz	r0, 800c22e <_printf_float+0x432>
 800c1f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1f8:	f108 0201 	add.w	r2, r8, #1
 800c1fc:	3b01      	subs	r3, #1
 800c1fe:	4631      	mov	r1, r6
 800c200:	4628      	mov	r0, r5
 800c202:	47b8      	blx	r7
 800c204:	3001      	adds	r0, #1
 800c206:	d10e      	bne.n	800c226 <_printf_float+0x42a>
 800c208:	e659      	b.n	800bebe <_printf_float+0xc2>
 800c20a:	2301      	movs	r3, #1
 800c20c:	4652      	mov	r2, sl
 800c20e:	4631      	mov	r1, r6
 800c210:	4628      	mov	r0, r5
 800c212:	47b8      	blx	r7
 800c214:	3001      	adds	r0, #1
 800c216:	f43f ae52 	beq.w	800bebe <_printf_float+0xc2>
 800c21a:	f108 0801 	add.w	r8, r8, #1
 800c21e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c220:	3b01      	subs	r3, #1
 800c222:	4543      	cmp	r3, r8
 800c224:	dcf1      	bgt.n	800c20a <_printf_float+0x40e>
 800c226:	464b      	mov	r3, r9
 800c228:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c22c:	e6dc      	b.n	800bfe8 <_printf_float+0x1ec>
 800c22e:	f04f 0800 	mov.w	r8, #0
 800c232:	f104 0a1a 	add.w	sl, r4, #26
 800c236:	e7f2      	b.n	800c21e <_printf_float+0x422>
 800c238:	2301      	movs	r3, #1
 800c23a:	4642      	mov	r2, r8
 800c23c:	e7df      	b.n	800c1fe <_printf_float+0x402>
 800c23e:	2301      	movs	r3, #1
 800c240:	464a      	mov	r2, r9
 800c242:	4631      	mov	r1, r6
 800c244:	4628      	mov	r0, r5
 800c246:	47b8      	blx	r7
 800c248:	3001      	adds	r0, #1
 800c24a:	f43f ae38 	beq.w	800bebe <_printf_float+0xc2>
 800c24e:	f108 0801 	add.w	r8, r8, #1
 800c252:	68e3      	ldr	r3, [r4, #12]
 800c254:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c256:	1a5b      	subs	r3, r3, r1
 800c258:	4543      	cmp	r3, r8
 800c25a:	dcf0      	bgt.n	800c23e <_printf_float+0x442>
 800c25c:	e6fa      	b.n	800c054 <_printf_float+0x258>
 800c25e:	f04f 0800 	mov.w	r8, #0
 800c262:	f104 0919 	add.w	r9, r4, #25
 800c266:	e7f4      	b.n	800c252 <_printf_float+0x456>

0800c268 <_printf_common>:
 800c268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c26c:	4616      	mov	r6, r2
 800c26e:	4699      	mov	r9, r3
 800c270:	688a      	ldr	r2, [r1, #8]
 800c272:	690b      	ldr	r3, [r1, #16]
 800c274:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c278:	4293      	cmp	r3, r2
 800c27a:	bfb8      	it	lt
 800c27c:	4613      	movlt	r3, r2
 800c27e:	6033      	str	r3, [r6, #0]
 800c280:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c284:	4607      	mov	r7, r0
 800c286:	460c      	mov	r4, r1
 800c288:	b10a      	cbz	r2, 800c28e <_printf_common+0x26>
 800c28a:	3301      	adds	r3, #1
 800c28c:	6033      	str	r3, [r6, #0]
 800c28e:	6823      	ldr	r3, [r4, #0]
 800c290:	0699      	lsls	r1, r3, #26
 800c292:	bf42      	ittt	mi
 800c294:	6833      	ldrmi	r3, [r6, #0]
 800c296:	3302      	addmi	r3, #2
 800c298:	6033      	strmi	r3, [r6, #0]
 800c29a:	6825      	ldr	r5, [r4, #0]
 800c29c:	f015 0506 	ands.w	r5, r5, #6
 800c2a0:	d106      	bne.n	800c2b0 <_printf_common+0x48>
 800c2a2:	f104 0a19 	add.w	sl, r4, #25
 800c2a6:	68e3      	ldr	r3, [r4, #12]
 800c2a8:	6832      	ldr	r2, [r6, #0]
 800c2aa:	1a9b      	subs	r3, r3, r2
 800c2ac:	42ab      	cmp	r3, r5
 800c2ae:	dc26      	bgt.n	800c2fe <_printf_common+0x96>
 800c2b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c2b4:	1e13      	subs	r3, r2, #0
 800c2b6:	6822      	ldr	r2, [r4, #0]
 800c2b8:	bf18      	it	ne
 800c2ba:	2301      	movne	r3, #1
 800c2bc:	0692      	lsls	r2, r2, #26
 800c2be:	d42b      	bmi.n	800c318 <_printf_common+0xb0>
 800c2c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c2c4:	4649      	mov	r1, r9
 800c2c6:	4638      	mov	r0, r7
 800c2c8:	47c0      	blx	r8
 800c2ca:	3001      	adds	r0, #1
 800c2cc:	d01e      	beq.n	800c30c <_printf_common+0xa4>
 800c2ce:	6823      	ldr	r3, [r4, #0]
 800c2d0:	68e5      	ldr	r5, [r4, #12]
 800c2d2:	6832      	ldr	r2, [r6, #0]
 800c2d4:	f003 0306 	and.w	r3, r3, #6
 800c2d8:	2b04      	cmp	r3, #4
 800c2da:	bf08      	it	eq
 800c2dc:	1aad      	subeq	r5, r5, r2
 800c2de:	68a3      	ldr	r3, [r4, #8]
 800c2e0:	6922      	ldr	r2, [r4, #16]
 800c2e2:	bf0c      	ite	eq
 800c2e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c2e8:	2500      	movne	r5, #0
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	bfc4      	itt	gt
 800c2ee:	1a9b      	subgt	r3, r3, r2
 800c2f0:	18ed      	addgt	r5, r5, r3
 800c2f2:	2600      	movs	r6, #0
 800c2f4:	341a      	adds	r4, #26
 800c2f6:	42b5      	cmp	r5, r6
 800c2f8:	d11a      	bne.n	800c330 <_printf_common+0xc8>
 800c2fa:	2000      	movs	r0, #0
 800c2fc:	e008      	b.n	800c310 <_printf_common+0xa8>
 800c2fe:	2301      	movs	r3, #1
 800c300:	4652      	mov	r2, sl
 800c302:	4649      	mov	r1, r9
 800c304:	4638      	mov	r0, r7
 800c306:	47c0      	blx	r8
 800c308:	3001      	adds	r0, #1
 800c30a:	d103      	bne.n	800c314 <_printf_common+0xac>
 800c30c:	f04f 30ff 	mov.w	r0, #4294967295
 800c310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c314:	3501      	adds	r5, #1
 800c316:	e7c6      	b.n	800c2a6 <_printf_common+0x3e>
 800c318:	18e1      	adds	r1, r4, r3
 800c31a:	1c5a      	adds	r2, r3, #1
 800c31c:	2030      	movs	r0, #48	; 0x30
 800c31e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c322:	4422      	add	r2, r4
 800c324:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c328:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c32c:	3302      	adds	r3, #2
 800c32e:	e7c7      	b.n	800c2c0 <_printf_common+0x58>
 800c330:	2301      	movs	r3, #1
 800c332:	4622      	mov	r2, r4
 800c334:	4649      	mov	r1, r9
 800c336:	4638      	mov	r0, r7
 800c338:	47c0      	blx	r8
 800c33a:	3001      	adds	r0, #1
 800c33c:	d0e6      	beq.n	800c30c <_printf_common+0xa4>
 800c33e:	3601      	adds	r6, #1
 800c340:	e7d9      	b.n	800c2f6 <_printf_common+0x8e>
	...

0800c344 <_printf_i>:
 800c344:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c348:	7e0f      	ldrb	r7, [r1, #24]
 800c34a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c34c:	2f78      	cmp	r7, #120	; 0x78
 800c34e:	4691      	mov	r9, r2
 800c350:	4680      	mov	r8, r0
 800c352:	460c      	mov	r4, r1
 800c354:	469a      	mov	sl, r3
 800c356:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c35a:	d807      	bhi.n	800c36c <_printf_i+0x28>
 800c35c:	2f62      	cmp	r7, #98	; 0x62
 800c35e:	d80a      	bhi.n	800c376 <_printf_i+0x32>
 800c360:	2f00      	cmp	r7, #0
 800c362:	f000 80d8 	beq.w	800c516 <_printf_i+0x1d2>
 800c366:	2f58      	cmp	r7, #88	; 0x58
 800c368:	f000 80a3 	beq.w	800c4b2 <_printf_i+0x16e>
 800c36c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c370:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c374:	e03a      	b.n	800c3ec <_printf_i+0xa8>
 800c376:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c37a:	2b15      	cmp	r3, #21
 800c37c:	d8f6      	bhi.n	800c36c <_printf_i+0x28>
 800c37e:	a101      	add	r1, pc, #4	; (adr r1, 800c384 <_printf_i+0x40>)
 800c380:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c384:	0800c3dd 	.word	0x0800c3dd
 800c388:	0800c3f1 	.word	0x0800c3f1
 800c38c:	0800c36d 	.word	0x0800c36d
 800c390:	0800c36d 	.word	0x0800c36d
 800c394:	0800c36d 	.word	0x0800c36d
 800c398:	0800c36d 	.word	0x0800c36d
 800c39c:	0800c3f1 	.word	0x0800c3f1
 800c3a0:	0800c36d 	.word	0x0800c36d
 800c3a4:	0800c36d 	.word	0x0800c36d
 800c3a8:	0800c36d 	.word	0x0800c36d
 800c3ac:	0800c36d 	.word	0x0800c36d
 800c3b0:	0800c4fd 	.word	0x0800c4fd
 800c3b4:	0800c421 	.word	0x0800c421
 800c3b8:	0800c4df 	.word	0x0800c4df
 800c3bc:	0800c36d 	.word	0x0800c36d
 800c3c0:	0800c36d 	.word	0x0800c36d
 800c3c4:	0800c51f 	.word	0x0800c51f
 800c3c8:	0800c36d 	.word	0x0800c36d
 800c3cc:	0800c421 	.word	0x0800c421
 800c3d0:	0800c36d 	.word	0x0800c36d
 800c3d4:	0800c36d 	.word	0x0800c36d
 800c3d8:	0800c4e7 	.word	0x0800c4e7
 800c3dc:	682b      	ldr	r3, [r5, #0]
 800c3de:	1d1a      	adds	r2, r3, #4
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	602a      	str	r2, [r5, #0]
 800c3e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c3e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	e0a3      	b.n	800c538 <_printf_i+0x1f4>
 800c3f0:	6820      	ldr	r0, [r4, #0]
 800c3f2:	6829      	ldr	r1, [r5, #0]
 800c3f4:	0606      	lsls	r6, r0, #24
 800c3f6:	f101 0304 	add.w	r3, r1, #4
 800c3fa:	d50a      	bpl.n	800c412 <_printf_i+0xce>
 800c3fc:	680e      	ldr	r6, [r1, #0]
 800c3fe:	602b      	str	r3, [r5, #0]
 800c400:	2e00      	cmp	r6, #0
 800c402:	da03      	bge.n	800c40c <_printf_i+0xc8>
 800c404:	232d      	movs	r3, #45	; 0x2d
 800c406:	4276      	negs	r6, r6
 800c408:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c40c:	485e      	ldr	r0, [pc, #376]	; (800c588 <_printf_i+0x244>)
 800c40e:	230a      	movs	r3, #10
 800c410:	e019      	b.n	800c446 <_printf_i+0x102>
 800c412:	680e      	ldr	r6, [r1, #0]
 800c414:	602b      	str	r3, [r5, #0]
 800c416:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c41a:	bf18      	it	ne
 800c41c:	b236      	sxthne	r6, r6
 800c41e:	e7ef      	b.n	800c400 <_printf_i+0xbc>
 800c420:	682b      	ldr	r3, [r5, #0]
 800c422:	6820      	ldr	r0, [r4, #0]
 800c424:	1d19      	adds	r1, r3, #4
 800c426:	6029      	str	r1, [r5, #0]
 800c428:	0601      	lsls	r1, r0, #24
 800c42a:	d501      	bpl.n	800c430 <_printf_i+0xec>
 800c42c:	681e      	ldr	r6, [r3, #0]
 800c42e:	e002      	b.n	800c436 <_printf_i+0xf2>
 800c430:	0646      	lsls	r6, r0, #25
 800c432:	d5fb      	bpl.n	800c42c <_printf_i+0xe8>
 800c434:	881e      	ldrh	r6, [r3, #0]
 800c436:	4854      	ldr	r0, [pc, #336]	; (800c588 <_printf_i+0x244>)
 800c438:	2f6f      	cmp	r7, #111	; 0x6f
 800c43a:	bf0c      	ite	eq
 800c43c:	2308      	moveq	r3, #8
 800c43e:	230a      	movne	r3, #10
 800c440:	2100      	movs	r1, #0
 800c442:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c446:	6865      	ldr	r5, [r4, #4]
 800c448:	60a5      	str	r5, [r4, #8]
 800c44a:	2d00      	cmp	r5, #0
 800c44c:	bfa2      	ittt	ge
 800c44e:	6821      	ldrge	r1, [r4, #0]
 800c450:	f021 0104 	bicge.w	r1, r1, #4
 800c454:	6021      	strge	r1, [r4, #0]
 800c456:	b90e      	cbnz	r6, 800c45c <_printf_i+0x118>
 800c458:	2d00      	cmp	r5, #0
 800c45a:	d04d      	beq.n	800c4f8 <_printf_i+0x1b4>
 800c45c:	4615      	mov	r5, r2
 800c45e:	fbb6 f1f3 	udiv	r1, r6, r3
 800c462:	fb03 6711 	mls	r7, r3, r1, r6
 800c466:	5dc7      	ldrb	r7, [r0, r7]
 800c468:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c46c:	4637      	mov	r7, r6
 800c46e:	42bb      	cmp	r3, r7
 800c470:	460e      	mov	r6, r1
 800c472:	d9f4      	bls.n	800c45e <_printf_i+0x11a>
 800c474:	2b08      	cmp	r3, #8
 800c476:	d10b      	bne.n	800c490 <_printf_i+0x14c>
 800c478:	6823      	ldr	r3, [r4, #0]
 800c47a:	07de      	lsls	r6, r3, #31
 800c47c:	d508      	bpl.n	800c490 <_printf_i+0x14c>
 800c47e:	6923      	ldr	r3, [r4, #16]
 800c480:	6861      	ldr	r1, [r4, #4]
 800c482:	4299      	cmp	r1, r3
 800c484:	bfde      	ittt	le
 800c486:	2330      	movle	r3, #48	; 0x30
 800c488:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c48c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c490:	1b52      	subs	r2, r2, r5
 800c492:	6122      	str	r2, [r4, #16]
 800c494:	f8cd a000 	str.w	sl, [sp]
 800c498:	464b      	mov	r3, r9
 800c49a:	aa03      	add	r2, sp, #12
 800c49c:	4621      	mov	r1, r4
 800c49e:	4640      	mov	r0, r8
 800c4a0:	f7ff fee2 	bl	800c268 <_printf_common>
 800c4a4:	3001      	adds	r0, #1
 800c4a6:	d14c      	bne.n	800c542 <_printf_i+0x1fe>
 800c4a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c4ac:	b004      	add	sp, #16
 800c4ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4b2:	4835      	ldr	r0, [pc, #212]	; (800c588 <_printf_i+0x244>)
 800c4b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c4b8:	6829      	ldr	r1, [r5, #0]
 800c4ba:	6823      	ldr	r3, [r4, #0]
 800c4bc:	f851 6b04 	ldr.w	r6, [r1], #4
 800c4c0:	6029      	str	r1, [r5, #0]
 800c4c2:	061d      	lsls	r5, r3, #24
 800c4c4:	d514      	bpl.n	800c4f0 <_printf_i+0x1ac>
 800c4c6:	07df      	lsls	r7, r3, #31
 800c4c8:	bf44      	itt	mi
 800c4ca:	f043 0320 	orrmi.w	r3, r3, #32
 800c4ce:	6023      	strmi	r3, [r4, #0]
 800c4d0:	b91e      	cbnz	r6, 800c4da <_printf_i+0x196>
 800c4d2:	6823      	ldr	r3, [r4, #0]
 800c4d4:	f023 0320 	bic.w	r3, r3, #32
 800c4d8:	6023      	str	r3, [r4, #0]
 800c4da:	2310      	movs	r3, #16
 800c4dc:	e7b0      	b.n	800c440 <_printf_i+0xfc>
 800c4de:	6823      	ldr	r3, [r4, #0]
 800c4e0:	f043 0320 	orr.w	r3, r3, #32
 800c4e4:	6023      	str	r3, [r4, #0]
 800c4e6:	2378      	movs	r3, #120	; 0x78
 800c4e8:	4828      	ldr	r0, [pc, #160]	; (800c58c <_printf_i+0x248>)
 800c4ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c4ee:	e7e3      	b.n	800c4b8 <_printf_i+0x174>
 800c4f0:	0659      	lsls	r1, r3, #25
 800c4f2:	bf48      	it	mi
 800c4f4:	b2b6      	uxthmi	r6, r6
 800c4f6:	e7e6      	b.n	800c4c6 <_printf_i+0x182>
 800c4f8:	4615      	mov	r5, r2
 800c4fa:	e7bb      	b.n	800c474 <_printf_i+0x130>
 800c4fc:	682b      	ldr	r3, [r5, #0]
 800c4fe:	6826      	ldr	r6, [r4, #0]
 800c500:	6961      	ldr	r1, [r4, #20]
 800c502:	1d18      	adds	r0, r3, #4
 800c504:	6028      	str	r0, [r5, #0]
 800c506:	0635      	lsls	r5, r6, #24
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	d501      	bpl.n	800c510 <_printf_i+0x1cc>
 800c50c:	6019      	str	r1, [r3, #0]
 800c50e:	e002      	b.n	800c516 <_printf_i+0x1d2>
 800c510:	0670      	lsls	r0, r6, #25
 800c512:	d5fb      	bpl.n	800c50c <_printf_i+0x1c8>
 800c514:	8019      	strh	r1, [r3, #0]
 800c516:	2300      	movs	r3, #0
 800c518:	6123      	str	r3, [r4, #16]
 800c51a:	4615      	mov	r5, r2
 800c51c:	e7ba      	b.n	800c494 <_printf_i+0x150>
 800c51e:	682b      	ldr	r3, [r5, #0]
 800c520:	1d1a      	adds	r2, r3, #4
 800c522:	602a      	str	r2, [r5, #0]
 800c524:	681d      	ldr	r5, [r3, #0]
 800c526:	6862      	ldr	r2, [r4, #4]
 800c528:	2100      	movs	r1, #0
 800c52a:	4628      	mov	r0, r5
 800c52c:	f7f3 fe58 	bl	80001e0 <memchr>
 800c530:	b108      	cbz	r0, 800c536 <_printf_i+0x1f2>
 800c532:	1b40      	subs	r0, r0, r5
 800c534:	6060      	str	r0, [r4, #4]
 800c536:	6863      	ldr	r3, [r4, #4]
 800c538:	6123      	str	r3, [r4, #16]
 800c53a:	2300      	movs	r3, #0
 800c53c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c540:	e7a8      	b.n	800c494 <_printf_i+0x150>
 800c542:	6923      	ldr	r3, [r4, #16]
 800c544:	462a      	mov	r2, r5
 800c546:	4649      	mov	r1, r9
 800c548:	4640      	mov	r0, r8
 800c54a:	47d0      	blx	sl
 800c54c:	3001      	adds	r0, #1
 800c54e:	d0ab      	beq.n	800c4a8 <_printf_i+0x164>
 800c550:	6823      	ldr	r3, [r4, #0]
 800c552:	079b      	lsls	r3, r3, #30
 800c554:	d413      	bmi.n	800c57e <_printf_i+0x23a>
 800c556:	68e0      	ldr	r0, [r4, #12]
 800c558:	9b03      	ldr	r3, [sp, #12]
 800c55a:	4298      	cmp	r0, r3
 800c55c:	bfb8      	it	lt
 800c55e:	4618      	movlt	r0, r3
 800c560:	e7a4      	b.n	800c4ac <_printf_i+0x168>
 800c562:	2301      	movs	r3, #1
 800c564:	4632      	mov	r2, r6
 800c566:	4649      	mov	r1, r9
 800c568:	4640      	mov	r0, r8
 800c56a:	47d0      	blx	sl
 800c56c:	3001      	adds	r0, #1
 800c56e:	d09b      	beq.n	800c4a8 <_printf_i+0x164>
 800c570:	3501      	adds	r5, #1
 800c572:	68e3      	ldr	r3, [r4, #12]
 800c574:	9903      	ldr	r1, [sp, #12]
 800c576:	1a5b      	subs	r3, r3, r1
 800c578:	42ab      	cmp	r3, r5
 800c57a:	dcf2      	bgt.n	800c562 <_printf_i+0x21e>
 800c57c:	e7eb      	b.n	800c556 <_printf_i+0x212>
 800c57e:	2500      	movs	r5, #0
 800c580:	f104 0619 	add.w	r6, r4, #25
 800c584:	e7f5      	b.n	800c572 <_printf_i+0x22e>
 800c586:	bf00      	nop
 800c588:	0800ecc2 	.word	0x0800ecc2
 800c58c:	0800ecd3 	.word	0x0800ecd3

0800c590 <iprintf>:
 800c590:	b40f      	push	{r0, r1, r2, r3}
 800c592:	4b0a      	ldr	r3, [pc, #40]	; (800c5bc <iprintf+0x2c>)
 800c594:	b513      	push	{r0, r1, r4, lr}
 800c596:	681c      	ldr	r4, [r3, #0]
 800c598:	b124      	cbz	r4, 800c5a4 <iprintf+0x14>
 800c59a:	69a3      	ldr	r3, [r4, #24]
 800c59c:	b913      	cbnz	r3, 800c5a4 <iprintf+0x14>
 800c59e:	4620      	mov	r0, r4
 800c5a0:	f7ff f9cc 	bl	800b93c <__sinit>
 800c5a4:	ab05      	add	r3, sp, #20
 800c5a6:	9a04      	ldr	r2, [sp, #16]
 800c5a8:	68a1      	ldr	r1, [r4, #8]
 800c5aa:	9301      	str	r3, [sp, #4]
 800c5ac:	4620      	mov	r0, r4
 800c5ae:	f002 f83b 	bl	800e628 <_vfiprintf_r>
 800c5b2:	b002      	add	sp, #8
 800c5b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5b8:	b004      	add	sp, #16
 800c5ba:	4770      	bx	lr
 800c5bc:	20000068 	.word	0x20000068

0800c5c0 <putchar>:
 800c5c0:	4b09      	ldr	r3, [pc, #36]	; (800c5e8 <putchar+0x28>)
 800c5c2:	b513      	push	{r0, r1, r4, lr}
 800c5c4:	681c      	ldr	r4, [r3, #0]
 800c5c6:	4601      	mov	r1, r0
 800c5c8:	b134      	cbz	r4, 800c5d8 <putchar+0x18>
 800c5ca:	69a3      	ldr	r3, [r4, #24]
 800c5cc:	b923      	cbnz	r3, 800c5d8 <putchar+0x18>
 800c5ce:	9001      	str	r0, [sp, #4]
 800c5d0:	4620      	mov	r0, r4
 800c5d2:	f7ff f9b3 	bl	800b93c <__sinit>
 800c5d6:	9901      	ldr	r1, [sp, #4]
 800c5d8:	68a2      	ldr	r2, [r4, #8]
 800c5da:	4620      	mov	r0, r4
 800c5dc:	b002      	add	sp, #8
 800c5de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5e2:	f002 b951 	b.w	800e888 <_putc_r>
 800c5e6:	bf00      	nop
 800c5e8:	20000068 	.word	0x20000068

0800c5ec <_puts_r>:
 800c5ec:	b570      	push	{r4, r5, r6, lr}
 800c5ee:	460e      	mov	r6, r1
 800c5f0:	4605      	mov	r5, r0
 800c5f2:	b118      	cbz	r0, 800c5fc <_puts_r+0x10>
 800c5f4:	6983      	ldr	r3, [r0, #24]
 800c5f6:	b90b      	cbnz	r3, 800c5fc <_puts_r+0x10>
 800c5f8:	f7ff f9a0 	bl	800b93c <__sinit>
 800c5fc:	69ab      	ldr	r3, [r5, #24]
 800c5fe:	68ac      	ldr	r4, [r5, #8]
 800c600:	b913      	cbnz	r3, 800c608 <_puts_r+0x1c>
 800c602:	4628      	mov	r0, r5
 800c604:	f7ff f99a 	bl	800b93c <__sinit>
 800c608:	4b2c      	ldr	r3, [pc, #176]	; (800c6bc <_puts_r+0xd0>)
 800c60a:	429c      	cmp	r4, r3
 800c60c:	d120      	bne.n	800c650 <_puts_r+0x64>
 800c60e:	686c      	ldr	r4, [r5, #4]
 800c610:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c612:	07db      	lsls	r3, r3, #31
 800c614:	d405      	bmi.n	800c622 <_puts_r+0x36>
 800c616:	89a3      	ldrh	r3, [r4, #12]
 800c618:	0598      	lsls	r0, r3, #22
 800c61a:	d402      	bmi.n	800c622 <_puts_r+0x36>
 800c61c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c61e:	f7f7 f8c1 	bl	80037a4 <__retarget_lock_acquire_recursive>
 800c622:	89a3      	ldrh	r3, [r4, #12]
 800c624:	0719      	lsls	r1, r3, #28
 800c626:	d51d      	bpl.n	800c664 <_puts_r+0x78>
 800c628:	6923      	ldr	r3, [r4, #16]
 800c62a:	b1db      	cbz	r3, 800c664 <_puts_r+0x78>
 800c62c:	3e01      	subs	r6, #1
 800c62e:	68a3      	ldr	r3, [r4, #8]
 800c630:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c634:	3b01      	subs	r3, #1
 800c636:	60a3      	str	r3, [r4, #8]
 800c638:	bb39      	cbnz	r1, 800c68a <_puts_r+0x9e>
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	da38      	bge.n	800c6b0 <_puts_r+0xc4>
 800c63e:	4622      	mov	r2, r4
 800c640:	210a      	movs	r1, #10
 800c642:	4628      	mov	r0, r5
 800c644:	f000 fa2a 	bl	800ca9c <__swbuf_r>
 800c648:	3001      	adds	r0, #1
 800c64a:	d011      	beq.n	800c670 <_puts_r+0x84>
 800c64c:	250a      	movs	r5, #10
 800c64e:	e011      	b.n	800c674 <_puts_r+0x88>
 800c650:	4b1b      	ldr	r3, [pc, #108]	; (800c6c0 <_puts_r+0xd4>)
 800c652:	429c      	cmp	r4, r3
 800c654:	d101      	bne.n	800c65a <_puts_r+0x6e>
 800c656:	68ac      	ldr	r4, [r5, #8]
 800c658:	e7da      	b.n	800c610 <_puts_r+0x24>
 800c65a:	4b1a      	ldr	r3, [pc, #104]	; (800c6c4 <_puts_r+0xd8>)
 800c65c:	429c      	cmp	r4, r3
 800c65e:	bf08      	it	eq
 800c660:	68ec      	ldreq	r4, [r5, #12]
 800c662:	e7d5      	b.n	800c610 <_puts_r+0x24>
 800c664:	4621      	mov	r1, r4
 800c666:	4628      	mov	r0, r5
 800c668:	f000 fa7c 	bl	800cb64 <__swsetup_r>
 800c66c:	2800      	cmp	r0, #0
 800c66e:	d0dd      	beq.n	800c62c <_puts_r+0x40>
 800c670:	f04f 35ff 	mov.w	r5, #4294967295
 800c674:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c676:	07da      	lsls	r2, r3, #31
 800c678:	d405      	bmi.n	800c686 <_puts_r+0x9a>
 800c67a:	89a3      	ldrh	r3, [r4, #12]
 800c67c:	059b      	lsls	r3, r3, #22
 800c67e:	d402      	bmi.n	800c686 <_puts_r+0x9a>
 800c680:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c682:	f7f7 f8a3 	bl	80037cc <__retarget_lock_release_recursive>
 800c686:	4628      	mov	r0, r5
 800c688:	bd70      	pop	{r4, r5, r6, pc}
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	da04      	bge.n	800c698 <_puts_r+0xac>
 800c68e:	69a2      	ldr	r2, [r4, #24]
 800c690:	429a      	cmp	r2, r3
 800c692:	dc06      	bgt.n	800c6a2 <_puts_r+0xb6>
 800c694:	290a      	cmp	r1, #10
 800c696:	d004      	beq.n	800c6a2 <_puts_r+0xb6>
 800c698:	6823      	ldr	r3, [r4, #0]
 800c69a:	1c5a      	adds	r2, r3, #1
 800c69c:	6022      	str	r2, [r4, #0]
 800c69e:	7019      	strb	r1, [r3, #0]
 800c6a0:	e7c5      	b.n	800c62e <_puts_r+0x42>
 800c6a2:	4622      	mov	r2, r4
 800c6a4:	4628      	mov	r0, r5
 800c6a6:	f000 f9f9 	bl	800ca9c <__swbuf_r>
 800c6aa:	3001      	adds	r0, #1
 800c6ac:	d1bf      	bne.n	800c62e <_puts_r+0x42>
 800c6ae:	e7df      	b.n	800c670 <_puts_r+0x84>
 800c6b0:	6823      	ldr	r3, [r4, #0]
 800c6b2:	250a      	movs	r5, #10
 800c6b4:	1c5a      	adds	r2, r3, #1
 800c6b6:	6022      	str	r2, [r4, #0]
 800c6b8:	701d      	strb	r5, [r3, #0]
 800c6ba:	e7db      	b.n	800c674 <_puts_r+0x88>
 800c6bc:	0800ec6c 	.word	0x0800ec6c
 800c6c0:	0800ec8c 	.word	0x0800ec8c
 800c6c4:	0800ec4c 	.word	0x0800ec4c

0800c6c8 <puts>:
 800c6c8:	4b02      	ldr	r3, [pc, #8]	; (800c6d4 <puts+0xc>)
 800c6ca:	4601      	mov	r1, r0
 800c6cc:	6818      	ldr	r0, [r3, #0]
 800c6ce:	f7ff bf8d 	b.w	800c5ec <_puts_r>
 800c6d2:	bf00      	nop
 800c6d4:	20000068 	.word	0x20000068

0800c6d8 <cleanup_glue>:
 800c6d8:	b538      	push	{r3, r4, r5, lr}
 800c6da:	460c      	mov	r4, r1
 800c6dc:	6809      	ldr	r1, [r1, #0]
 800c6de:	4605      	mov	r5, r0
 800c6e0:	b109      	cbz	r1, 800c6e6 <cleanup_glue+0xe>
 800c6e2:	f7ff fff9 	bl	800c6d8 <cleanup_glue>
 800c6e6:	4621      	mov	r1, r4
 800c6e8:	4628      	mov	r0, r5
 800c6ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6ee:	f7ff ba05 	b.w	800bafc <_free_r>
	...

0800c6f4 <_reclaim_reent>:
 800c6f4:	4b2c      	ldr	r3, [pc, #176]	; (800c7a8 <_reclaim_reent+0xb4>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	4283      	cmp	r3, r0
 800c6fa:	b570      	push	{r4, r5, r6, lr}
 800c6fc:	4604      	mov	r4, r0
 800c6fe:	d051      	beq.n	800c7a4 <_reclaim_reent+0xb0>
 800c700:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c702:	b143      	cbz	r3, 800c716 <_reclaim_reent+0x22>
 800c704:	68db      	ldr	r3, [r3, #12]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d14a      	bne.n	800c7a0 <_reclaim_reent+0xac>
 800c70a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c70c:	6819      	ldr	r1, [r3, #0]
 800c70e:	b111      	cbz	r1, 800c716 <_reclaim_reent+0x22>
 800c710:	4620      	mov	r0, r4
 800c712:	f7ff f9f3 	bl	800bafc <_free_r>
 800c716:	6961      	ldr	r1, [r4, #20]
 800c718:	b111      	cbz	r1, 800c720 <_reclaim_reent+0x2c>
 800c71a:	4620      	mov	r0, r4
 800c71c:	f7ff f9ee 	bl	800bafc <_free_r>
 800c720:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c722:	b111      	cbz	r1, 800c72a <_reclaim_reent+0x36>
 800c724:	4620      	mov	r0, r4
 800c726:	f7ff f9e9 	bl	800bafc <_free_r>
 800c72a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c72c:	b111      	cbz	r1, 800c734 <_reclaim_reent+0x40>
 800c72e:	4620      	mov	r0, r4
 800c730:	f7ff f9e4 	bl	800bafc <_free_r>
 800c734:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c736:	b111      	cbz	r1, 800c73e <_reclaim_reent+0x4a>
 800c738:	4620      	mov	r0, r4
 800c73a:	f7ff f9df 	bl	800bafc <_free_r>
 800c73e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c740:	b111      	cbz	r1, 800c748 <_reclaim_reent+0x54>
 800c742:	4620      	mov	r0, r4
 800c744:	f7ff f9da 	bl	800bafc <_free_r>
 800c748:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c74a:	b111      	cbz	r1, 800c752 <_reclaim_reent+0x5e>
 800c74c:	4620      	mov	r0, r4
 800c74e:	f7ff f9d5 	bl	800bafc <_free_r>
 800c752:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c754:	b111      	cbz	r1, 800c75c <_reclaim_reent+0x68>
 800c756:	4620      	mov	r0, r4
 800c758:	f7ff f9d0 	bl	800bafc <_free_r>
 800c75c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c75e:	b111      	cbz	r1, 800c766 <_reclaim_reent+0x72>
 800c760:	4620      	mov	r0, r4
 800c762:	f7ff f9cb 	bl	800bafc <_free_r>
 800c766:	69a3      	ldr	r3, [r4, #24]
 800c768:	b1e3      	cbz	r3, 800c7a4 <_reclaim_reent+0xb0>
 800c76a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c76c:	4620      	mov	r0, r4
 800c76e:	4798      	blx	r3
 800c770:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c772:	b1b9      	cbz	r1, 800c7a4 <_reclaim_reent+0xb0>
 800c774:	4620      	mov	r0, r4
 800c776:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c77a:	f7ff bfad 	b.w	800c6d8 <cleanup_glue>
 800c77e:	5949      	ldr	r1, [r1, r5]
 800c780:	b941      	cbnz	r1, 800c794 <_reclaim_reent+0xa0>
 800c782:	3504      	adds	r5, #4
 800c784:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c786:	2d80      	cmp	r5, #128	; 0x80
 800c788:	68d9      	ldr	r1, [r3, #12]
 800c78a:	d1f8      	bne.n	800c77e <_reclaim_reent+0x8a>
 800c78c:	4620      	mov	r0, r4
 800c78e:	f7ff f9b5 	bl	800bafc <_free_r>
 800c792:	e7ba      	b.n	800c70a <_reclaim_reent+0x16>
 800c794:	680e      	ldr	r6, [r1, #0]
 800c796:	4620      	mov	r0, r4
 800c798:	f7ff f9b0 	bl	800bafc <_free_r>
 800c79c:	4631      	mov	r1, r6
 800c79e:	e7ef      	b.n	800c780 <_reclaim_reent+0x8c>
 800c7a0:	2500      	movs	r5, #0
 800c7a2:	e7ef      	b.n	800c784 <_reclaim_reent+0x90>
 800c7a4:	bd70      	pop	{r4, r5, r6, pc}
 800c7a6:	bf00      	nop
 800c7a8:	20000068 	.word	0x20000068

0800c7ac <_sbrk_r>:
 800c7ac:	b538      	push	{r3, r4, r5, lr}
 800c7ae:	4d06      	ldr	r5, [pc, #24]	; (800c7c8 <_sbrk_r+0x1c>)
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	4604      	mov	r4, r0
 800c7b4:	4608      	mov	r0, r1
 800c7b6:	602b      	str	r3, [r5, #0]
 800c7b8:	f7f6 fee2 	bl	8003580 <_sbrk>
 800c7bc:	1c43      	adds	r3, r0, #1
 800c7be:	d102      	bne.n	800c7c6 <_sbrk_r+0x1a>
 800c7c0:	682b      	ldr	r3, [r5, #0]
 800c7c2:	b103      	cbz	r3, 800c7c6 <_sbrk_r+0x1a>
 800c7c4:	6023      	str	r3, [r4, #0]
 800c7c6:	bd38      	pop	{r3, r4, r5, pc}
 800c7c8:	20005640 	.word	0x20005640

0800c7cc <_raise_r>:
 800c7cc:	291f      	cmp	r1, #31
 800c7ce:	b538      	push	{r3, r4, r5, lr}
 800c7d0:	4604      	mov	r4, r0
 800c7d2:	460d      	mov	r5, r1
 800c7d4:	d904      	bls.n	800c7e0 <_raise_r+0x14>
 800c7d6:	2316      	movs	r3, #22
 800c7d8:	6003      	str	r3, [r0, #0]
 800c7da:	f04f 30ff 	mov.w	r0, #4294967295
 800c7de:	bd38      	pop	{r3, r4, r5, pc}
 800c7e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c7e2:	b112      	cbz	r2, 800c7ea <_raise_r+0x1e>
 800c7e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c7e8:	b94b      	cbnz	r3, 800c7fe <_raise_r+0x32>
 800c7ea:	4620      	mov	r0, r4
 800c7ec:	f000 f830 	bl	800c850 <_getpid_r>
 800c7f0:	462a      	mov	r2, r5
 800c7f2:	4601      	mov	r1, r0
 800c7f4:	4620      	mov	r0, r4
 800c7f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7fa:	f000 b817 	b.w	800c82c <_kill_r>
 800c7fe:	2b01      	cmp	r3, #1
 800c800:	d00a      	beq.n	800c818 <_raise_r+0x4c>
 800c802:	1c59      	adds	r1, r3, #1
 800c804:	d103      	bne.n	800c80e <_raise_r+0x42>
 800c806:	2316      	movs	r3, #22
 800c808:	6003      	str	r3, [r0, #0]
 800c80a:	2001      	movs	r0, #1
 800c80c:	e7e7      	b.n	800c7de <_raise_r+0x12>
 800c80e:	2400      	movs	r4, #0
 800c810:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c814:	4628      	mov	r0, r5
 800c816:	4798      	blx	r3
 800c818:	2000      	movs	r0, #0
 800c81a:	e7e0      	b.n	800c7de <_raise_r+0x12>

0800c81c <raise>:
 800c81c:	4b02      	ldr	r3, [pc, #8]	; (800c828 <raise+0xc>)
 800c81e:	4601      	mov	r1, r0
 800c820:	6818      	ldr	r0, [r3, #0]
 800c822:	f7ff bfd3 	b.w	800c7cc <_raise_r>
 800c826:	bf00      	nop
 800c828:	20000068 	.word	0x20000068

0800c82c <_kill_r>:
 800c82c:	b538      	push	{r3, r4, r5, lr}
 800c82e:	4d07      	ldr	r5, [pc, #28]	; (800c84c <_kill_r+0x20>)
 800c830:	2300      	movs	r3, #0
 800c832:	4604      	mov	r4, r0
 800c834:	4608      	mov	r0, r1
 800c836:	4611      	mov	r1, r2
 800c838:	602b      	str	r3, [r5, #0]
 800c83a:	f7f6 fe19 	bl	8003470 <_kill>
 800c83e:	1c43      	adds	r3, r0, #1
 800c840:	d102      	bne.n	800c848 <_kill_r+0x1c>
 800c842:	682b      	ldr	r3, [r5, #0]
 800c844:	b103      	cbz	r3, 800c848 <_kill_r+0x1c>
 800c846:	6023      	str	r3, [r4, #0]
 800c848:	bd38      	pop	{r3, r4, r5, pc}
 800c84a:	bf00      	nop
 800c84c:	20005640 	.word	0x20005640

0800c850 <_getpid_r>:
 800c850:	f7f6 be06 	b.w	8003460 <_getpid>

0800c854 <sniprintf>:
 800c854:	b40c      	push	{r2, r3}
 800c856:	b530      	push	{r4, r5, lr}
 800c858:	4b17      	ldr	r3, [pc, #92]	; (800c8b8 <sniprintf+0x64>)
 800c85a:	1e0c      	subs	r4, r1, #0
 800c85c:	681d      	ldr	r5, [r3, #0]
 800c85e:	b09d      	sub	sp, #116	; 0x74
 800c860:	da08      	bge.n	800c874 <sniprintf+0x20>
 800c862:	238b      	movs	r3, #139	; 0x8b
 800c864:	602b      	str	r3, [r5, #0]
 800c866:	f04f 30ff 	mov.w	r0, #4294967295
 800c86a:	b01d      	add	sp, #116	; 0x74
 800c86c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c870:	b002      	add	sp, #8
 800c872:	4770      	bx	lr
 800c874:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c878:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c87c:	bf14      	ite	ne
 800c87e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c882:	4623      	moveq	r3, r4
 800c884:	9304      	str	r3, [sp, #16]
 800c886:	9307      	str	r3, [sp, #28]
 800c888:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c88c:	9002      	str	r0, [sp, #8]
 800c88e:	9006      	str	r0, [sp, #24]
 800c890:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c894:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c896:	ab21      	add	r3, sp, #132	; 0x84
 800c898:	a902      	add	r1, sp, #8
 800c89a:	4628      	mov	r0, r5
 800c89c:	9301      	str	r3, [sp, #4]
 800c89e:	f001 fd99 	bl	800e3d4 <_svfiprintf_r>
 800c8a2:	1c43      	adds	r3, r0, #1
 800c8a4:	bfbc      	itt	lt
 800c8a6:	238b      	movlt	r3, #139	; 0x8b
 800c8a8:	602b      	strlt	r3, [r5, #0]
 800c8aa:	2c00      	cmp	r4, #0
 800c8ac:	d0dd      	beq.n	800c86a <sniprintf+0x16>
 800c8ae:	9b02      	ldr	r3, [sp, #8]
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	701a      	strb	r2, [r3, #0]
 800c8b4:	e7d9      	b.n	800c86a <sniprintf+0x16>
 800c8b6:	bf00      	nop
 800c8b8:	20000068 	.word	0x20000068

0800c8bc <siprintf>:
 800c8bc:	b40e      	push	{r1, r2, r3}
 800c8be:	b500      	push	{lr}
 800c8c0:	b09c      	sub	sp, #112	; 0x70
 800c8c2:	ab1d      	add	r3, sp, #116	; 0x74
 800c8c4:	9002      	str	r0, [sp, #8]
 800c8c6:	9006      	str	r0, [sp, #24]
 800c8c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c8cc:	4809      	ldr	r0, [pc, #36]	; (800c8f4 <siprintf+0x38>)
 800c8ce:	9107      	str	r1, [sp, #28]
 800c8d0:	9104      	str	r1, [sp, #16]
 800c8d2:	4909      	ldr	r1, [pc, #36]	; (800c8f8 <siprintf+0x3c>)
 800c8d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8d8:	9105      	str	r1, [sp, #20]
 800c8da:	6800      	ldr	r0, [r0, #0]
 800c8dc:	9301      	str	r3, [sp, #4]
 800c8de:	a902      	add	r1, sp, #8
 800c8e0:	f001 fd78 	bl	800e3d4 <_svfiprintf_r>
 800c8e4:	9b02      	ldr	r3, [sp, #8]
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	701a      	strb	r2, [r3, #0]
 800c8ea:	b01c      	add	sp, #112	; 0x70
 800c8ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800c8f0:	b003      	add	sp, #12
 800c8f2:	4770      	bx	lr
 800c8f4:	20000068 	.word	0x20000068
 800c8f8:	ffff0208 	.word	0xffff0208

0800c8fc <__sread>:
 800c8fc:	b510      	push	{r4, lr}
 800c8fe:	460c      	mov	r4, r1
 800c900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c904:	f002 f808 	bl	800e918 <_read_r>
 800c908:	2800      	cmp	r0, #0
 800c90a:	bfab      	itete	ge
 800c90c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c90e:	89a3      	ldrhlt	r3, [r4, #12]
 800c910:	181b      	addge	r3, r3, r0
 800c912:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c916:	bfac      	ite	ge
 800c918:	6563      	strge	r3, [r4, #84]	; 0x54
 800c91a:	81a3      	strhlt	r3, [r4, #12]
 800c91c:	bd10      	pop	{r4, pc}

0800c91e <__swrite>:
 800c91e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c922:	461f      	mov	r7, r3
 800c924:	898b      	ldrh	r3, [r1, #12]
 800c926:	05db      	lsls	r3, r3, #23
 800c928:	4605      	mov	r5, r0
 800c92a:	460c      	mov	r4, r1
 800c92c:	4616      	mov	r6, r2
 800c92e:	d505      	bpl.n	800c93c <__swrite+0x1e>
 800c930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c934:	2302      	movs	r3, #2
 800c936:	2200      	movs	r2, #0
 800c938:	f001 f8d2 	bl	800dae0 <_lseek_r>
 800c93c:	89a3      	ldrh	r3, [r4, #12]
 800c93e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c942:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c946:	81a3      	strh	r3, [r4, #12]
 800c948:	4632      	mov	r2, r6
 800c94a:	463b      	mov	r3, r7
 800c94c:	4628      	mov	r0, r5
 800c94e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c952:	f000 b8f5 	b.w	800cb40 <_write_r>

0800c956 <__sseek>:
 800c956:	b510      	push	{r4, lr}
 800c958:	460c      	mov	r4, r1
 800c95a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c95e:	f001 f8bf 	bl	800dae0 <_lseek_r>
 800c962:	1c43      	adds	r3, r0, #1
 800c964:	89a3      	ldrh	r3, [r4, #12]
 800c966:	bf15      	itete	ne
 800c968:	6560      	strne	r0, [r4, #84]	; 0x54
 800c96a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c96e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c972:	81a3      	strheq	r3, [r4, #12]
 800c974:	bf18      	it	ne
 800c976:	81a3      	strhne	r3, [r4, #12]
 800c978:	bd10      	pop	{r4, pc}

0800c97a <__sclose>:
 800c97a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c97e:	f000 b95f 	b.w	800cc40 <_close_r>
	...

0800c984 <_strtol_l.constprop.0>:
 800c984:	2b01      	cmp	r3, #1
 800c986:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c98a:	d001      	beq.n	800c990 <_strtol_l.constprop.0+0xc>
 800c98c:	2b24      	cmp	r3, #36	; 0x24
 800c98e:	d906      	bls.n	800c99e <_strtol_l.constprop.0+0x1a>
 800c990:	f7fe ff76 	bl	800b880 <__errno>
 800c994:	2316      	movs	r3, #22
 800c996:	6003      	str	r3, [r0, #0]
 800c998:	2000      	movs	r0, #0
 800c99a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c99e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ca84 <_strtol_l.constprop.0+0x100>
 800c9a2:	460d      	mov	r5, r1
 800c9a4:	462e      	mov	r6, r5
 800c9a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c9aa:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c9ae:	f017 0708 	ands.w	r7, r7, #8
 800c9b2:	d1f7      	bne.n	800c9a4 <_strtol_l.constprop.0+0x20>
 800c9b4:	2c2d      	cmp	r4, #45	; 0x2d
 800c9b6:	d132      	bne.n	800ca1e <_strtol_l.constprop.0+0x9a>
 800c9b8:	782c      	ldrb	r4, [r5, #0]
 800c9ba:	2701      	movs	r7, #1
 800c9bc:	1cb5      	adds	r5, r6, #2
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d05b      	beq.n	800ca7a <_strtol_l.constprop.0+0xf6>
 800c9c2:	2b10      	cmp	r3, #16
 800c9c4:	d109      	bne.n	800c9da <_strtol_l.constprop.0+0x56>
 800c9c6:	2c30      	cmp	r4, #48	; 0x30
 800c9c8:	d107      	bne.n	800c9da <_strtol_l.constprop.0+0x56>
 800c9ca:	782c      	ldrb	r4, [r5, #0]
 800c9cc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c9d0:	2c58      	cmp	r4, #88	; 0x58
 800c9d2:	d14d      	bne.n	800ca70 <_strtol_l.constprop.0+0xec>
 800c9d4:	786c      	ldrb	r4, [r5, #1]
 800c9d6:	2310      	movs	r3, #16
 800c9d8:	3502      	adds	r5, #2
 800c9da:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c9de:	f108 38ff 	add.w	r8, r8, #4294967295
 800c9e2:	f04f 0c00 	mov.w	ip, #0
 800c9e6:	fbb8 f9f3 	udiv	r9, r8, r3
 800c9ea:	4666      	mov	r6, ip
 800c9ec:	fb03 8a19 	mls	sl, r3, r9, r8
 800c9f0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c9f4:	f1be 0f09 	cmp.w	lr, #9
 800c9f8:	d816      	bhi.n	800ca28 <_strtol_l.constprop.0+0xa4>
 800c9fa:	4674      	mov	r4, lr
 800c9fc:	42a3      	cmp	r3, r4
 800c9fe:	dd24      	ble.n	800ca4a <_strtol_l.constprop.0+0xc6>
 800ca00:	f1bc 0f00 	cmp.w	ip, #0
 800ca04:	db1e      	blt.n	800ca44 <_strtol_l.constprop.0+0xc0>
 800ca06:	45b1      	cmp	r9, r6
 800ca08:	d31c      	bcc.n	800ca44 <_strtol_l.constprop.0+0xc0>
 800ca0a:	d101      	bne.n	800ca10 <_strtol_l.constprop.0+0x8c>
 800ca0c:	45a2      	cmp	sl, r4
 800ca0e:	db19      	blt.n	800ca44 <_strtol_l.constprop.0+0xc0>
 800ca10:	fb06 4603 	mla	r6, r6, r3, r4
 800ca14:	f04f 0c01 	mov.w	ip, #1
 800ca18:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca1c:	e7e8      	b.n	800c9f0 <_strtol_l.constprop.0+0x6c>
 800ca1e:	2c2b      	cmp	r4, #43	; 0x2b
 800ca20:	bf04      	itt	eq
 800ca22:	782c      	ldrbeq	r4, [r5, #0]
 800ca24:	1cb5      	addeq	r5, r6, #2
 800ca26:	e7ca      	b.n	800c9be <_strtol_l.constprop.0+0x3a>
 800ca28:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ca2c:	f1be 0f19 	cmp.w	lr, #25
 800ca30:	d801      	bhi.n	800ca36 <_strtol_l.constprop.0+0xb2>
 800ca32:	3c37      	subs	r4, #55	; 0x37
 800ca34:	e7e2      	b.n	800c9fc <_strtol_l.constprop.0+0x78>
 800ca36:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ca3a:	f1be 0f19 	cmp.w	lr, #25
 800ca3e:	d804      	bhi.n	800ca4a <_strtol_l.constprop.0+0xc6>
 800ca40:	3c57      	subs	r4, #87	; 0x57
 800ca42:	e7db      	b.n	800c9fc <_strtol_l.constprop.0+0x78>
 800ca44:	f04f 3cff 	mov.w	ip, #4294967295
 800ca48:	e7e6      	b.n	800ca18 <_strtol_l.constprop.0+0x94>
 800ca4a:	f1bc 0f00 	cmp.w	ip, #0
 800ca4e:	da05      	bge.n	800ca5c <_strtol_l.constprop.0+0xd8>
 800ca50:	2322      	movs	r3, #34	; 0x22
 800ca52:	6003      	str	r3, [r0, #0]
 800ca54:	4646      	mov	r6, r8
 800ca56:	b942      	cbnz	r2, 800ca6a <_strtol_l.constprop.0+0xe6>
 800ca58:	4630      	mov	r0, r6
 800ca5a:	e79e      	b.n	800c99a <_strtol_l.constprop.0+0x16>
 800ca5c:	b107      	cbz	r7, 800ca60 <_strtol_l.constprop.0+0xdc>
 800ca5e:	4276      	negs	r6, r6
 800ca60:	2a00      	cmp	r2, #0
 800ca62:	d0f9      	beq.n	800ca58 <_strtol_l.constprop.0+0xd4>
 800ca64:	f1bc 0f00 	cmp.w	ip, #0
 800ca68:	d000      	beq.n	800ca6c <_strtol_l.constprop.0+0xe8>
 800ca6a:	1e69      	subs	r1, r5, #1
 800ca6c:	6011      	str	r1, [r2, #0]
 800ca6e:	e7f3      	b.n	800ca58 <_strtol_l.constprop.0+0xd4>
 800ca70:	2430      	movs	r4, #48	; 0x30
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d1b1      	bne.n	800c9da <_strtol_l.constprop.0+0x56>
 800ca76:	2308      	movs	r3, #8
 800ca78:	e7af      	b.n	800c9da <_strtol_l.constprop.0+0x56>
 800ca7a:	2c30      	cmp	r4, #48	; 0x30
 800ca7c:	d0a5      	beq.n	800c9ca <_strtol_l.constprop.0+0x46>
 800ca7e:	230a      	movs	r3, #10
 800ca80:	e7ab      	b.n	800c9da <_strtol_l.constprop.0+0x56>
 800ca82:	bf00      	nop
 800ca84:	0800ece5 	.word	0x0800ece5

0800ca88 <strtol>:
 800ca88:	4613      	mov	r3, r2
 800ca8a:	460a      	mov	r2, r1
 800ca8c:	4601      	mov	r1, r0
 800ca8e:	4802      	ldr	r0, [pc, #8]	; (800ca98 <strtol+0x10>)
 800ca90:	6800      	ldr	r0, [r0, #0]
 800ca92:	f7ff bf77 	b.w	800c984 <_strtol_l.constprop.0>
 800ca96:	bf00      	nop
 800ca98:	20000068 	.word	0x20000068

0800ca9c <__swbuf_r>:
 800ca9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca9e:	460e      	mov	r6, r1
 800caa0:	4614      	mov	r4, r2
 800caa2:	4605      	mov	r5, r0
 800caa4:	b118      	cbz	r0, 800caae <__swbuf_r+0x12>
 800caa6:	6983      	ldr	r3, [r0, #24]
 800caa8:	b90b      	cbnz	r3, 800caae <__swbuf_r+0x12>
 800caaa:	f7fe ff47 	bl	800b93c <__sinit>
 800caae:	4b21      	ldr	r3, [pc, #132]	; (800cb34 <__swbuf_r+0x98>)
 800cab0:	429c      	cmp	r4, r3
 800cab2:	d12b      	bne.n	800cb0c <__swbuf_r+0x70>
 800cab4:	686c      	ldr	r4, [r5, #4]
 800cab6:	69a3      	ldr	r3, [r4, #24]
 800cab8:	60a3      	str	r3, [r4, #8]
 800caba:	89a3      	ldrh	r3, [r4, #12]
 800cabc:	071a      	lsls	r2, r3, #28
 800cabe:	d52f      	bpl.n	800cb20 <__swbuf_r+0x84>
 800cac0:	6923      	ldr	r3, [r4, #16]
 800cac2:	b36b      	cbz	r3, 800cb20 <__swbuf_r+0x84>
 800cac4:	6923      	ldr	r3, [r4, #16]
 800cac6:	6820      	ldr	r0, [r4, #0]
 800cac8:	1ac0      	subs	r0, r0, r3
 800caca:	6963      	ldr	r3, [r4, #20]
 800cacc:	b2f6      	uxtb	r6, r6
 800cace:	4283      	cmp	r3, r0
 800cad0:	4637      	mov	r7, r6
 800cad2:	dc04      	bgt.n	800cade <__swbuf_r+0x42>
 800cad4:	4621      	mov	r1, r4
 800cad6:	4628      	mov	r0, r5
 800cad8:	f000 ffc2 	bl	800da60 <_fflush_r>
 800cadc:	bb30      	cbnz	r0, 800cb2c <__swbuf_r+0x90>
 800cade:	68a3      	ldr	r3, [r4, #8]
 800cae0:	3b01      	subs	r3, #1
 800cae2:	60a3      	str	r3, [r4, #8]
 800cae4:	6823      	ldr	r3, [r4, #0]
 800cae6:	1c5a      	adds	r2, r3, #1
 800cae8:	6022      	str	r2, [r4, #0]
 800caea:	701e      	strb	r6, [r3, #0]
 800caec:	6963      	ldr	r3, [r4, #20]
 800caee:	3001      	adds	r0, #1
 800caf0:	4283      	cmp	r3, r0
 800caf2:	d004      	beq.n	800cafe <__swbuf_r+0x62>
 800caf4:	89a3      	ldrh	r3, [r4, #12]
 800caf6:	07db      	lsls	r3, r3, #31
 800caf8:	d506      	bpl.n	800cb08 <__swbuf_r+0x6c>
 800cafa:	2e0a      	cmp	r6, #10
 800cafc:	d104      	bne.n	800cb08 <__swbuf_r+0x6c>
 800cafe:	4621      	mov	r1, r4
 800cb00:	4628      	mov	r0, r5
 800cb02:	f000 ffad 	bl	800da60 <_fflush_r>
 800cb06:	b988      	cbnz	r0, 800cb2c <__swbuf_r+0x90>
 800cb08:	4638      	mov	r0, r7
 800cb0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb0c:	4b0a      	ldr	r3, [pc, #40]	; (800cb38 <__swbuf_r+0x9c>)
 800cb0e:	429c      	cmp	r4, r3
 800cb10:	d101      	bne.n	800cb16 <__swbuf_r+0x7a>
 800cb12:	68ac      	ldr	r4, [r5, #8]
 800cb14:	e7cf      	b.n	800cab6 <__swbuf_r+0x1a>
 800cb16:	4b09      	ldr	r3, [pc, #36]	; (800cb3c <__swbuf_r+0xa0>)
 800cb18:	429c      	cmp	r4, r3
 800cb1a:	bf08      	it	eq
 800cb1c:	68ec      	ldreq	r4, [r5, #12]
 800cb1e:	e7ca      	b.n	800cab6 <__swbuf_r+0x1a>
 800cb20:	4621      	mov	r1, r4
 800cb22:	4628      	mov	r0, r5
 800cb24:	f000 f81e 	bl	800cb64 <__swsetup_r>
 800cb28:	2800      	cmp	r0, #0
 800cb2a:	d0cb      	beq.n	800cac4 <__swbuf_r+0x28>
 800cb2c:	f04f 37ff 	mov.w	r7, #4294967295
 800cb30:	e7ea      	b.n	800cb08 <__swbuf_r+0x6c>
 800cb32:	bf00      	nop
 800cb34:	0800ec6c 	.word	0x0800ec6c
 800cb38:	0800ec8c 	.word	0x0800ec8c
 800cb3c:	0800ec4c 	.word	0x0800ec4c

0800cb40 <_write_r>:
 800cb40:	b538      	push	{r3, r4, r5, lr}
 800cb42:	4d07      	ldr	r5, [pc, #28]	; (800cb60 <_write_r+0x20>)
 800cb44:	4604      	mov	r4, r0
 800cb46:	4608      	mov	r0, r1
 800cb48:	4611      	mov	r1, r2
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	602a      	str	r2, [r5, #0]
 800cb4e:	461a      	mov	r2, r3
 800cb50:	f7f6 fcc5 	bl	80034de <_write>
 800cb54:	1c43      	adds	r3, r0, #1
 800cb56:	d102      	bne.n	800cb5e <_write_r+0x1e>
 800cb58:	682b      	ldr	r3, [r5, #0]
 800cb5a:	b103      	cbz	r3, 800cb5e <_write_r+0x1e>
 800cb5c:	6023      	str	r3, [r4, #0]
 800cb5e:	bd38      	pop	{r3, r4, r5, pc}
 800cb60:	20005640 	.word	0x20005640

0800cb64 <__swsetup_r>:
 800cb64:	4b32      	ldr	r3, [pc, #200]	; (800cc30 <__swsetup_r+0xcc>)
 800cb66:	b570      	push	{r4, r5, r6, lr}
 800cb68:	681d      	ldr	r5, [r3, #0]
 800cb6a:	4606      	mov	r6, r0
 800cb6c:	460c      	mov	r4, r1
 800cb6e:	b125      	cbz	r5, 800cb7a <__swsetup_r+0x16>
 800cb70:	69ab      	ldr	r3, [r5, #24]
 800cb72:	b913      	cbnz	r3, 800cb7a <__swsetup_r+0x16>
 800cb74:	4628      	mov	r0, r5
 800cb76:	f7fe fee1 	bl	800b93c <__sinit>
 800cb7a:	4b2e      	ldr	r3, [pc, #184]	; (800cc34 <__swsetup_r+0xd0>)
 800cb7c:	429c      	cmp	r4, r3
 800cb7e:	d10f      	bne.n	800cba0 <__swsetup_r+0x3c>
 800cb80:	686c      	ldr	r4, [r5, #4]
 800cb82:	89a3      	ldrh	r3, [r4, #12]
 800cb84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb88:	0719      	lsls	r1, r3, #28
 800cb8a:	d42c      	bmi.n	800cbe6 <__swsetup_r+0x82>
 800cb8c:	06dd      	lsls	r5, r3, #27
 800cb8e:	d411      	bmi.n	800cbb4 <__swsetup_r+0x50>
 800cb90:	2309      	movs	r3, #9
 800cb92:	6033      	str	r3, [r6, #0]
 800cb94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cb98:	81a3      	strh	r3, [r4, #12]
 800cb9a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb9e:	e03e      	b.n	800cc1e <__swsetup_r+0xba>
 800cba0:	4b25      	ldr	r3, [pc, #148]	; (800cc38 <__swsetup_r+0xd4>)
 800cba2:	429c      	cmp	r4, r3
 800cba4:	d101      	bne.n	800cbaa <__swsetup_r+0x46>
 800cba6:	68ac      	ldr	r4, [r5, #8]
 800cba8:	e7eb      	b.n	800cb82 <__swsetup_r+0x1e>
 800cbaa:	4b24      	ldr	r3, [pc, #144]	; (800cc3c <__swsetup_r+0xd8>)
 800cbac:	429c      	cmp	r4, r3
 800cbae:	bf08      	it	eq
 800cbb0:	68ec      	ldreq	r4, [r5, #12]
 800cbb2:	e7e6      	b.n	800cb82 <__swsetup_r+0x1e>
 800cbb4:	0758      	lsls	r0, r3, #29
 800cbb6:	d512      	bpl.n	800cbde <__swsetup_r+0x7a>
 800cbb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cbba:	b141      	cbz	r1, 800cbce <__swsetup_r+0x6a>
 800cbbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cbc0:	4299      	cmp	r1, r3
 800cbc2:	d002      	beq.n	800cbca <__swsetup_r+0x66>
 800cbc4:	4630      	mov	r0, r6
 800cbc6:	f7fe ff99 	bl	800bafc <_free_r>
 800cbca:	2300      	movs	r3, #0
 800cbcc:	6363      	str	r3, [r4, #52]	; 0x34
 800cbce:	89a3      	ldrh	r3, [r4, #12]
 800cbd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cbd4:	81a3      	strh	r3, [r4, #12]
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	6063      	str	r3, [r4, #4]
 800cbda:	6923      	ldr	r3, [r4, #16]
 800cbdc:	6023      	str	r3, [r4, #0]
 800cbde:	89a3      	ldrh	r3, [r4, #12]
 800cbe0:	f043 0308 	orr.w	r3, r3, #8
 800cbe4:	81a3      	strh	r3, [r4, #12]
 800cbe6:	6923      	ldr	r3, [r4, #16]
 800cbe8:	b94b      	cbnz	r3, 800cbfe <__swsetup_r+0x9a>
 800cbea:	89a3      	ldrh	r3, [r4, #12]
 800cbec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cbf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbf4:	d003      	beq.n	800cbfe <__swsetup_r+0x9a>
 800cbf6:	4621      	mov	r1, r4
 800cbf8:	4630      	mov	r0, r6
 800cbfa:	f000 ffa9 	bl	800db50 <__smakebuf_r>
 800cbfe:	89a0      	ldrh	r0, [r4, #12]
 800cc00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc04:	f010 0301 	ands.w	r3, r0, #1
 800cc08:	d00a      	beq.n	800cc20 <__swsetup_r+0xbc>
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	60a3      	str	r3, [r4, #8]
 800cc0e:	6963      	ldr	r3, [r4, #20]
 800cc10:	425b      	negs	r3, r3
 800cc12:	61a3      	str	r3, [r4, #24]
 800cc14:	6923      	ldr	r3, [r4, #16]
 800cc16:	b943      	cbnz	r3, 800cc2a <__swsetup_r+0xc6>
 800cc18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cc1c:	d1ba      	bne.n	800cb94 <__swsetup_r+0x30>
 800cc1e:	bd70      	pop	{r4, r5, r6, pc}
 800cc20:	0781      	lsls	r1, r0, #30
 800cc22:	bf58      	it	pl
 800cc24:	6963      	ldrpl	r3, [r4, #20]
 800cc26:	60a3      	str	r3, [r4, #8]
 800cc28:	e7f4      	b.n	800cc14 <__swsetup_r+0xb0>
 800cc2a:	2000      	movs	r0, #0
 800cc2c:	e7f7      	b.n	800cc1e <__swsetup_r+0xba>
 800cc2e:	bf00      	nop
 800cc30:	20000068 	.word	0x20000068
 800cc34:	0800ec6c 	.word	0x0800ec6c
 800cc38:	0800ec8c 	.word	0x0800ec8c
 800cc3c:	0800ec4c 	.word	0x0800ec4c

0800cc40 <_close_r>:
 800cc40:	b538      	push	{r3, r4, r5, lr}
 800cc42:	4d06      	ldr	r5, [pc, #24]	; (800cc5c <_close_r+0x1c>)
 800cc44:	2300      	movs	r3, #0
 800cc46:	4604      	mov	r4, r0
 800cc48:	4608      	mov	r0, r1
 800cc4a:	602b      	str	r3, [r5, #0]
 800cc4c:	f7f6 fc63 	bl	8003516 <_close>
 800cc50:	1c43      	adds	r3, r0, #1
 800cc52:	d102      	bne.n	800cc5a <_close_r+0x1a>
 800cc54:	682b      	ldr	r3, [r5, #0]
 800cc56:	b103      	cbz	r3, 800cc5a <_close_r+0x1a>
 800cc58:	6023      	str	r3, [r4, #0]
 800cc5a:	bd38      	pop	{r3, r4, r5, pc}
 800cc5c:	20005640 	.word	0x20005640

0800cc60 <quorem>:
 800cc60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc64:	6903      	ldr	r3, [r0, #16]
 800cc66:	690c      	ldr	r4, [r1, #16]
 800cc68:	42a3      	cmp	r3, r4
 800cc6a:	4607      	mov	r7, r0
 800cc6c:	f2c0 8081 	blt.w	800cd72 <quorem+0x112>
 800cc70:	3c01      	subs	r4, #1
 800cc72:	f101 0814 	add.w	r8, r1, #20
 800cc76:	f100 0514 	add.w	r5, r0, #20
 800cc7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cc7e:	9301      	str	r3, [sp, #4]
 800cc80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cc84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cc88:	3301      	adds	r3, #1
 800cc8a:	429a      	cmp	r2, r3
 800cc8c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cc90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cc94:	fbb2 f6f3 	udiv	r6, r2, r3
 800cc98:	d331      	bcc.n	800ccfe <quorem+0x9e>
 800cc9a:	f04f 0e00 	mov.w	lr, #0
 800cc9e:	4640      	mov	r0, r8
 800cca0:	46ac      	mov	ip, r5
 800cca2:	46f2      	mov	sl, lr
 800cca4:	f850 2b04 	ldr.w	r2, [r0], #4
 800cca8:	b293      	uxth	r3, r2
 800ccaa:	fb06 e303 	mla	r3, r6, r3, lr
 800ccae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ccb2:	b29b      	uxth	r3, r3
 800ccb4:	ebaa 0303 	sub.w	r3, sl, r3
 800ccb8:	f8dc a000 	ldr.w	sl, [ip]
 800ccbc:	0c12      	lsrs	r2, r2, #16
 800ccbe:	fa13 f38a 	uxtah	r3, r3, sl
 800ccc2:	fb06 e202 	mla	r2, r6, r2, lr
 800ccc6:	9300      	str	r3, [sp, #0]
 800ccc8:	9b00      	ldr	r3, [sp, #0]
 800ccca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ccce:	b292      	uxth	r2, r2
 800ccd0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ccd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ccd8:	f8bd 3000 	ldrh.w	r3, [sp]
 800ccdc:	4581      	cmp	r9, r0
 800ccde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cce2:	f84c 3b04 	str.w	r3, [ip], #4
 800cce6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ccea:	d2db      	bcs.n	800cca4 <quorem+0x44>
 800ccec:	f855 300b 	ldr.w	r3, [r5, fp]
 800ccf0:	b92b      	cbnz	r3, 800ccfe <quorem+0x9e>
 800ccf2:	9b01      	ldr	r3, [sp, #4]
 800ccf4:	3b04      	subs	r3, #4
 800ccf6:	429d      	cmp	r5, r3
 800ccf8:	461a      	mov	r2, r3
 800ccfa:	d32e      	bcc.n	800cd5a <quorem+0xfa>
 800ccfc:	613c      	str	r4, [r7, #16]
 800ccfe:	4638      	mov	r0, r7
 800cd00:	f001 f9f4 	bl	800e0ec <__mcmp>
 800cd04:	2800      	cmp	r0, #0
 800cd06:	db24      	blt.n	800cd52 <quorem+0xf2>
 800cd08:	3601      	adds	r6, #1
 800cd0a:	4628      	mov	r0, r5
 800cd0c:	f04f 0c00 	mov.w	ip, #0
 800cd10:	f858 2b04 	ldr.w	r2, [r8], #4
 800cd14:	f8d0 e000 	ldr.w	lr, [r0]
 800cd18:	b293      	uxth	r3, r2
 800cd1a:	ebac 0303 	sub.w	r3, ip, r3
 800cd1e:	0c12      	lsrs	r2, r2, #16
 800cd20:	fa13 f38e 	uxtah	r3, r3, lr
 800cd24:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cd28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cd2c:	b29b      	uxth	r3, r3
 800cd2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd32:	45c1      	cmp	r9, r8
 800cd34:	f840 3b04 	str.w	r3, [r0], #4
 800cd38:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cd3c:	d2e8      	bcs.n	800cd10 <quorem+0xb0>
 800cd3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cd42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cd46:	b922      	cbnz	r2, 800cd52 <quorem+0xf2>
 800cd48:	3b04      	subs	r3, #4
 800cd4a:	429d      	cmp	r5, r3
 800cd4c:	461a      	mov	r2, r3
 800cd4e:	d30a      	bcc.n	800cd66 <quorem+0x106>
 800cd50:	613c      	str	r4, [r7, #16]
 800cd52:	4630      	mov	r0, r6
 800cd54:	b003      	add	sp, #12
 800cd56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd5a:	6812      	ldr	r2, [r2, #0]
 800cd5c:	3b04      	subs	r3, #4
 800cd5e:	2a00      	cmp	r2, #0
 800cd60:	d1cc      	bne.n	800ccfc <quorem+0x9c>
 800cd62:	3c01      	subs	r4, #1
 800cd64:	e7c7      	b.n	800ccf6 <quorem+0x96>
 800cd66:	6812      	ldr	r2, [r2, #0]
 800cd68:	3b04      	subs	r3, #4
 800cd6a:	2a00      	cmp	r2, #0
 800cd6c:	d1f0      	bne.n	800cd50 <quorem+0xf0>
 800cd6e:	3c01      	subs	r4, #1
 800cd70:	e7eb      	b.n	800cd4a <quorem+0xea>
 800cd72:	2000      	movs	r0, #0
 800cd74:	e7ee      	b.n	800cd54 <quorem+0xf4>
	...

0800cd78 <_dtoa_r>:
 800cd78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd7c:	ed2d 8b04 	vpush	{d8-d9}
 800cd80:	ec57 6b10 	vmov	r6, r7, d0
 800cd84:	b093      	sub	sp, #76	; 0x4c
 800cd86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cd88:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cd8c:	9106      	str	r1, [sp, #24]
 800cd8e:	ee10 aa10 	vmov	sl, s0
 800cd92:	4604      	mov	r4, r0
 800cd94:	9209      	str	r2, [sp, #36]	; 0x24
 800cd96:	930c      	str	r3, [sp, #48]	; 0x30
 800cd98:	46bb      	mov	fp, r7
 800cd9a:	b975      	cbnz	r5, 800cdba <_dtoa_r+0x42>
 800cd9c:	2010      	movs	r0, #16
 800cd9e:	f7fe fe8f 	bl	800bac0 <malloc>
 800cda2:	4602      	mov	r2, r0
 800cda4:	6260      	str	r0, [r4, #36]	; 0x24
 800cda6:	b920      	cbnz	r0, 800cdb2 <_dtoa_r+0x3a>
 800cda8:	4ba7      	ldr	r3, [pc, #668]	; (800d048 <_dtoa_r+0x2d0>)
 800cdaa:	21ea      	movs	r1, #234	; 0xea
 800cdac:	48a7      	ldr	r0, [pc, #668]	; (800d04c <_dtoa_r+0x2d4>)
 800cdae:	f001 fdc5 	bl	800e93c <__assert_func>
 800cdb2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cdb6:	6005      	str	r5, [r0, #0]
 800cdb8:	60c5      	str	r5, [r0, #12]
 800cdba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cdbc:	6819      	ldr	r1, [r3, #0]
 800cdbe:	b151      	cbz	r1, 800cdd6 <_dtoa_r+0x5e>
 800cdc0:	685a      	ldr	r2, [r3, #4]
 800cdc2:	604a      	str	r2, [r1, #4]
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	4093      	lsls	r3, r2
 800cdc8:	608b      	str	r3, [r1, #8]
 800cdca:	4620      	mov	r0, r4
 800cdcc:	f000 ff4c 	bl	800dc68 <_Bfree>
 800cdd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	601a      	str	r2, [r3, #0]
 800cdd6:	1e3b      	subs	r3, r7, #0
 800cdd8:	bfaa      	itet	ge
 800cdda:	2300      	movge	r3, #0
 800cddc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800cde0:	f8c8 3000 	strge.w	r3, [r8]
 800cde4:	4b9a      	ldr	r3, [pc, #616]	; (800d050 <_dtoa_r+0x2d8>)
 800cde6:	bfbc      	itt	lt
 800cde8:	2201      	movlt	r2, #1
 800cdea:	f8c8 2000 	strlt.w	r2, [r8]
 800cdee:	ea33 030b 	bics.w	r3, r3, fp
 800cdf2:	d11b      	bne.n	800ce2c <_dtoa_r+0xb4>
 800cdf4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cdf6:	f242 730f 	movw	r3, #9999	; 0x270f
 800cdfa:	6013      	str	r3, [r2, #0]
 800cdfc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ce00:	4333      	orrs	r3, r6
 800ce02:	f000 8592 	beq.w	800d92a <_dtoa_r+0xbb2>
 800ce06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce08:	b963      	cbnz	r3, 800ce24 <_dtoa_r+0xac>
 800ce0a:	4b92      	ldr	r3, [pc, #584]	; (800d054 <_dtoa_r+0x2dc>)
 800ce0c:	e022      	b.n	800ce54 <_dtoa_r+0xdc>
 800ce0e:	4b92      	ldr	r3, [pc, #584]	; (800d058 <_dtoa_r+0x2e0>)
 800ce10:	9301      	str	r3, [sp, #4]
 800ce12:	3308      	adds	r3, #8
 800ce14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ce16:	6013      	str	r3, [r2, #0]
 800ce18:	9801      	ldr	r0, [sp, #4]
 800ce1a:	b013      	add	sp, #76	; 0x4c
 800ce1c:	ecbd 8b04 	vpop	{d8-d9}
 800ce20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce24:	4b8b      	ldr	r3, [pc, #556]	; (800d054 <_dtoa_r+0x2dc>)
 800ce26:	9301      	str	r3, [sp, #4]
 800ce28:	3303      	adds	r3, #3
 800ce2a:	e7f3      	b.n	800ce14 <_dtoa_r+0x9c>
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	2300      	movs	r3, #0
 800ce30:	4650      	mov	r0, sl
 800ce32:	4659      	mov	r1, fp
 800ce34:	f7f3 fe48 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce38:	ec4b ab19 	vmov	d9, sl, fp
 800ce3c:	4680      	mov	r8, r0
 800ce3e:	b158      	cbz	r0, 800ce58 <_dtoa_r+0xe0>
 800ce40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ce42:	2301      	movs	r3, #1
 800ce44:	6013      	str	r3, [r2, #0]
 800ce46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	f000 856b 	beq.w	800d924 <_dtoa_r+0xbac>
 800ce4e:	4883      	ldr	r0, [pc, #524]	; (800d05c <_dtoa_r+0x2e4>)
 800ce50:	6018      	str	r0, [r3, #0]
 800ce52:	1e43      	subs	r3, r0, #1
 800ce54:	9301      	str	r3, [sp, #4]
 800ce56:	e7df      	b.n	800ce18 <_dtoa_r+0xa0>
 800ce58:	ec4b ab10 	vmov	d0, sl, fp
 800ce5c:	aa10      	add	r2, sp, #64	; 0x40
 800ce5e:	a911      	add	r1, sp, #68	; 0x44
 800ce60:	4620      	mov	r0, r4
 800ce62:	f001 f9e9 	bl	800e238 <__d2b>
 800ce66:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ce6a:	ee08 0a10 	vmov	s16, r0
 800ce6e:	2d00      	cmp	r5, #0
 800ce70:	f000 8084 	beq.w	800cf7c <_dtoa_r+0x204>
 800ce74:	ee19 3a90 	vmov	r3, s19
 800ce78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce7c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ce80:	4656      	mov	r6, sl
 800ce82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ce86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ce8a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ce8e:	4b74      	ldr	r3, [pc, #464]	; (800d060 <_dtoa_r+0x2e8>)
 800ce90:	2200      	movs	r2, #0
 800ce92:	4630      	mov	r0, r6
 800ce94:	4639      	mov	r1, r7
 800ce96:	f7f3 f9f7 	bl	8000288 <__aeabi_dsub>
 800ce9a:	a365      	add	r3, pc, #404	; (adr r3, 800d030 <_dtoa_r+0x2b8>)
 800ce9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cea0:	f7f3 fbaa 	bl	80005f8 <__aeabi_dmul>
 800cea4:	a364      	add	r3, pc, #400	; (adr r3, 800d038 <_dtoa_r+0x2c0>)
 800cea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceaa:	f7f3 f9ef 	bl	800028c <__adddf3>
 800ceae:	4606      	mov	r6, r0
 800ceb0:	4628      	mov	r0, r5
 800ceb2:	460f      	mov	r7, r1
 800ceb4:	f7f3 fb36 	bl	8000524 <__aeabi_i2d>
 800ceb8:	a361      	add	r3, pc, #388	; (adr r3, 800d040 <_dtoa_r+0x2c8>)
 800ceba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cebe:	f7f3 fb9b 	bl	80005f8 <__aeabi_dmul>
 800cec2:	4602      	mov	r2, r0
 800cec4:	460b      	mov	r3, r1
 800cec6:	4630      	mov	r0, r6
 800cec8:	4639      	mov	r1, r7
 800ceca:	f7f3 f9df 	bl	800028c <__adddf3>
 800cece:	4606      	mov	r6, r0
 800ced0:	460f      	mov	r7, r1
 800ced2:	f7f3 fe41 	bl	8000b58 <__aeabi_d2iz>
 800ced6:	2200      	movs	r2, #0
 800ced8:	9000      	str	r0, [sp, #0]
 800ceda:	2300      	movs	r3, #0
 800cedc:	4630      	mov	r0, r6
 800cede:	4639      	mov	r1, r7
 800cee0:	f7f3 fdfc 	bl	8000adc <__aeabi_dcmplt>
 800cee4:	b150      	cbz	r0, 800cefc <_dtoa_r+0x184>
 800cee6:	9800      	ldr	r0, [sp, #0]
 800cee8:	f7f3 fb1c 	bl	8000524 <__aeabi_i2d>
 800ceec:	4632      	mov	r2, r6
 800ceee:	463b      	mov	r3, r7
 800cef0:	f7f3 fdea 	bl	8000ac8 <__aeabi_dcmpeq>
 800cef4:	b910      	cbnz	r0, 800cefc <_dtoa_r+0x184>
 800cef6:	9b00      	ldr	r3, [sp, #0]
 800cef8:	3b01      	subs	r3, #1
 800cefa:	9300      	str	r3, [sp, #0]
 800cefc:	9b00      	ldr	r3, [sp, #0]
 800cefe:	2b16      	cmp	r3, #22
 800cf00:	d85a      	bhi.n	800cfb8 <_dtoa_r+0x240>
 800cf02:	9a00      	ldr	r2, [sp, #0]
 800cf04:	4b57      	ldr	r3, [pc, #348]	; (800d064 <_dtoa_r+0x2ec>)
 800cf06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf0e:	ec51 0b19 	vmov	r0, r1, d9
 800cf12:	f7f3 fde3 	bl	8000adc <__aeabi_dcmplt>
 800cf16:	2800      	cmp	r0, #0
 800cf18:	d050      	beq.n	800cfbc <_dtoa_r+0x244>
 800cf1a:	9b00      	ldr	r3, [sp, #0]
 800cf1c:	3b01      	subs	r3, #1
 800cf1e:	9300      	str	r3, [sp, #0]
 800cf20:	2300      	movs	r3, #0
 800cf22:	930b      	str	r3, [sp, #44]	; 0x2c
 800cf24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf26:	1b5d      	subs	r5, r3, r5
 800cf28:	1e6b      	subs	r3, r5, #1
 800cf2a:	9305      	str	r3, [sp, #20]
 800cf2c:	bf45      	ittet	mi
 800cf2e:	f1c5 0301 	rsbmi	r3, r5, #1
 800cf32:	9304      	strmi	r3, [sp, #16]
 800cf34:	2300      	movpl	r3, #0
 800cf36:	2300      	movmi	r3, #0
 800cf38:	bf4c      	ite	mi
 800cf3a:	9305      	strmi	r3, [sp, #20]
 800cf3c:	9304      	strpl	r3, [sp, #16]
 800cf3e:	9b00      	ldr	r3, [sp, #0]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	db3d      	blt.n	800cfc0 <_dtoa_r+0x248>
 800cf44:	9b05      	ldr	r3, [sp, #20]
 800cf46:	9a00      	ldr	r2, [sp, #0]
 800cf48:	920a      	str	r2, [sp, #40]	; 0x28
 800cf4a:	4413      	add	r3, r2
 800cf4c:	9305      	str	r3, [sp, #20]
 800cf4e:	2300      	movs	r3, #0
 800cf50:	9307      	str	r3, [sp, #28]
 800cf52:	9b06      	ldr	r3, [sp, #24]
 800cf54:	2b09      	cmp	r3, #9
 800cf56:	f200 8089 	bhi.w	800d06c <_dtoa_r+0x2f4>
 800cf5a:	2b05      	cmp	r3, #5
 800cf5c:	bfc4      	itt	gt
 800cf5e:	3b04      	subgt	r3, #4
 800cf60:	9306      	strgt	r3, [sp, #24]
 800cf62:	9b06      	ldr	r3, [sp, #24]
 800cf64:	f1a3 0302 	sub.w	r3, r3, #2
 800cf68:	bfcc      	ite	gt
 800cf6a:	2500      	movgt	r5, #0
 800cf6c:	2501      	movle	r5, #1
 800cf6e:	2b03      	cmp	r3, #3
 800cf70:	f200 8087 	bhi.w	800d082 <_dtoa_r+0x30a>
 800cf74:	e8df f003 	tbb	[pc, r3]
 800cf78:	59383a2d 	.word	0x59383a2d
 800cf7c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800cf80:	441d      	add	r5, r3
 800cf82:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cf86:	2b20      	cmp	r3, #32
 800cf88:	bfc1      	itttt	gt
 800cf8a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cf8e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800cf92:	fa0b f303 	lslgt.w	r3, fp, r3
 800cf96:	fa26 f000 	lsrgt.w	r0, r6, r0
 800cf9a:	bfda      	itte	le
 800cf9c:	f1c3 0320 	rsble	r3, r3, #32
 800cfa0:	fa06 f003 	lslle.w	r0, r6, r3
 800cfa4:	4318      	orrgt	r0, r3
 800cfa6:	f7f3 faad 	bl	8000504 <__aeabi_ui2d>
 800cfaa:	2301      	movs	r3, #1
 800cfac:	4606      	mov	r6, r0
 800cfae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800cfb2:	3d01      	subs	r5, #1
 800cfb4:	930e      	str	r3, [sp, #56]	; 0x38
 800cfb6:	e76a      	b.n	800ce8e <_dtoa_r+0x116>
 800cfb8:	2301      	movs	r3, #1
 800cfba:	e7b2      	b.n	800cf22 <_dtoa_r+0x1aa>
 800cfbc:	900b      	str	r0, [sp, #44]	; 0x2c
 800cfbe:	e7b1      	b.n	800cf24 <_dtoa_r+0x1ac>
 800cfc0:	9b04      	ldr	r3, [sp, #16]
 800cfc2:	9a00      	ldr	r2, [sp, #0]
 800cfc4:	1a9b      	subs	r3, r3, r2
 800cfc6:	9304      	str	r3, [sp, #16]
 800cfc8:	4253      	negs	r3, r2
 800cfca:	9307      	str	r3, [sp, #28]
 800cfcc:	2300      	movs	r3, #0
 800cfce:	930a      	str	r3, [sp, #40]	; 0x28
 800cfd0:	e7bf      	b.n	800cf52 <_dtoa_r+0x1da>
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	9308      	str	r3, [sp, #32]
 800cfd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	dc55      	bgt.n	800d088 <_dtoa_r+0x310>
 800cfdc:	2301      	movs	r3, #1
 800cfde:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cfe2:	461a      	mov	r2, r3
 800cfe4:	9209      	str	r2, [sp, #36]	; 0x24
 800cfe6:	e00c      	b.n	800d002 <_dtoa_r+0x28a>
 800cfe8:	2301      	movs	r3, #1
 800cfea:	e7f3      	b.n	800cfd4 <_dtoa_r+0x25c>
 800cfec:	2300      	movs	r3, #0
 800cfee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cff0:	9308      	str	r3, [sp, #32]
 800cff2:	9b00      	ldr	r3, [sp, #0]
 800cff4:	4413      	add	r3, r2
 800cff6:	9302      	str	r3, [sp, #8]
 800cff8:	3301      	adds	r3, #1
 800cffa:	2b01      	cmp	r3, #1
 800cffc:	9303      	str	r3, [sp, #12]
 800cffe:	bfb8      	it	lt
 800d000:	2301      	movlt	r3, #1
 800d002:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d004:	2200      	movs	r2, #0
 800d006:	6042      	str	r2, [r0, #4]
 800d008:	2204      	movs	r2, #4
 800d00a:	f102 0614 	add.w	r6, r2, #20
 800d00e:	429e      	cmp	r6, r3
 800d010:	6841      	ldr	r1, [r0, #4]
 800d012:	d93d      	bls.n	800d090 <_dtoa_r+0x318>
 800d014:	4620      	mov	r0, r4
 800d016:	f000 fde7 	bl	800dbe8 <_Balloc>
 800d01a:	9001      	str	r0, [sp, #4]
 800d01c:	2800      	cmp	r0, #0
 800d01e:	d13b      	bne.n	800d098 <_dtoa_r+0x320>
 800d020:	4b11      	ldr	r3, [pc, #68]	; (800d068 <_dtoa_r+0x2f0>)
 800d022:	4602      	mov	r2, r0
 800d024:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d028:	e6c0      	b.n	800cdac <_dtoa_r+0x34>
 800d02a:	2301      	movs	r3, #1
 800d02c:	e7df      	b.n	800cfee <_dtoa_r+0x276>
 800d02e:	bf00      	nop
 800d030:	636f4361 	.word	0x636f4361
 800d034:	3fd287a7 	.word	0x3fd287a7
 800d038:	8b60c8b3 	.word	0x8b60c8b3
 800d03c:	3fc68a28 	.word	0x3fc68a28
 800d040:	509f79fb 	.word	0x509f79fb
 800d044:	3fd34413 	.word	0x3fd34413
 800d048:	0800edf2 	.word	0x0800edf2
 800d04c:	0800ee09 	.word	0x0800ee09
 800d050:	7ff00000 	.word	0x7ff00000
 800d054:	0800edee 	.word	0x0800edee
 800d058:	0800ede5 	.word	0x0800ede5
 800d05c:	0800ecc1 	.word	0x0800ecc1
 800d060:	3ff80000 	.word	0x3ff80000
 800d064:	0800ef00 	.word	0x0800ef00
 800d068:	0800ee64 	.word	0x0800ee64
 800d06c:	2501      	movs	r5, #1
 800d06e:	2300      	movs	r3, #0
 800d070:	9306      	str	r3, [sp, #24]
 800d072:	9508      	str	r5, [sp, #32]
 800d074:	f04f 33ff 	mov.w	r3, #4294967295
 800d078:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d07c:	2200      	movs	r2, #0
 800d07e:	2312      	movs	r3, #18
 800d080:	e7b0      	b.n	800cfe4 <_dtoa_r+0x26c>
 800d082:	2301      	movs	r3, #1
 800d084:	9308      	str	r3, [sp, #32]
 800d086:	e7f5      	b.n	800d074 <_dtoa_r+0x2fc>
 800d088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d08a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d08e:	e7b8      	b.n	800d002 <_dtoa_r+0x28a>
 800d090:	3101      	adds	r1, #1
 800d092:	6041      	str	r1, [r0, #4]
 800d094:	0052      	lsls	r2, r2, #1
 800d096:	e7b8      	b.n	800d00a <_dtoa_r+0x292>
 800d098:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d09a:	9a01      	ldr	r2, [sp, #4]
 800d09c:	601a      	str	r2, [r3, #0]
 800d09e:	9b03      	ldr	r3, [sp, #12]
 800d0a0:	2b0e      	cmp	r3, #14
 800d0a2:	f200 809d 	bhi.w	800d1e0 <_dtoa_r+0x468>
 800d0a6:	2d00      	cmp	r5, #0
 800d0a8:	f000 809a 	beq.w	800d1e0 <_dtoa_r+0x468>
 800d0ac:	9b00      	ldr	r3, [sp, #0]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	dd32      	ble.n	800d118 <_dtoa_r+0x3a0>
 800d0b2:	4ab7      	ldr	r2, [pc, #732]	; (800d390 <_dtoa_r+0x618>)
 800d0b4:	f003 030f 	and.w	r3, r3, #15
 800d0b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d0bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d0c0:	9b00      	ldr	r3, [sp, #0]
 800d0c2:	05d8      	lsls	r0, r3, #23
 800d0c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d0c8:	d516      	bpl.n	800d0f8 <_dtoa_r+0x380>
 800d0ca:	4bb2      	ldr	r3, [pc, #712]	; (800d394 <_dtoa_r+0x61c>)
 800d0cc:	ec51 0b19 	vmov	r0, r1, d9
 800d0d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d0d4:	f7f3 fbba 	bl	800084c <__aeabi_ddiv>
 800d0d8:	f007 070f 	and.w	r7, r7, #15
 800d0dc:	4682      	mov	sl, r0
 800d0de:	468b      	mov	fp, r1
 800d0e0:	2503      	movs	r5, #3
 800d0e2:	4eac      	ldr	r6, [pc, #688]	; (800d394 <_dtoa_r+0x61c>)
 800d0e4:	b957      	cbnz	r7, 800d0fc <_dtoa_r+0x384>
 800d0e6:	4642      	mov	r2, r8
 800d0e8:	464b      	mov	r3, r9
 800d0ea:	4650      	mov	r0, sl
 800d0ec:	4659      	mov	r1, fp
 800d0ee:	f7f3 fbad 	bl	800084c <__aeabi_ddiv>
 800d0f2:	4682      	mov	sl, r0
 800d0f4:	468b      	mov	fp, r1
 800d0f6:	e028      	b.n	800d14a <_dtoa_r+0x3d2>
 800d0f8:	2502      	movs	r5, #2
 800d0fa:	e7f2      	b.n	800d0e2 <_dtoa_r+0x36a>
 800d0fc:	07f9      	lsls	r1, r7, #31
 800d0fe:	d508      	bpl.n	800d112 <_dtoa_r+0x39a>
 800d100:	4640      	mov	r0, r8
 800d102:	4649      	mov	r1, r9
 800d104:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d108:	f7f3 fa76 	bl	80005f8 <__aeabi_dmul>
 800d10c:	3501      	adds	r5, #1
 800d10e:	4680      	mov	r8, r0
 800d110:	4689      	mov	r9, r1
 800d112:	107f      	asrs	r7, r7, #1
 800d114:	3608      	adds	r6, #8
 800d116:	e7e5      	b.n	800d0e4 <_dtoa_r+0x36c>
 800d118:	f000 809b 	beq.w	800d252 <_dtoa_r+0x4da>
 800d11c:	9b00      	ldr	r3, [sp, #0]
 800d11e:	4f9d      	ldr	r7, [pc, #628]	; (800d394 <_dtoa_r+0x61c>)
 800d120:	425e      	negs	r6, r3
 800d122:	4b9b      	ldr	r3, [pc, #620]	; (800d390 <_dtoa_r+0x618>)
 800d124:	f006 020f 	and.w	r2, r6, #15
 800d128:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d130:	ec51 0b19 	vmov	r0, r1, d9
 800d134:	f7f3 fa60 	bl	80005f8 <__aeabi_dmul>
 800d138:	1136      	asrs	r6, r6, #4
 800d13a:	4682      	mov	sl, r0
 800d13c:	468b      	mov	fp, r1
 800d13e:	2300      	movs	r3, #0
 800d140:	2502      	movs	r5, #2
 800d142:	2e00      	cmp	r6, #0
 800d144:	d17a      	bne.n	800d23c <_dtoa_r+0x4c4>
 800d146:	2b00      	cmp	r3, #0
 800d148:	d1d3      	bne.n	800d0f2 <_dtoa_r+0x37a>
 800d14a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	f000 8082 	beq.w	800d256 <_dtoa_r+0x4de>
 800d152:	4b91      	ldr	r3, [pc, #580]	; (800d398 <_dtoa_r+0x620>)
 800d154:	2200      	movs	r2, #0
 800d156:	4650      	mov	r0, sl
 800d158:	4659      	mov	r1, fp
 800d15a:	f7f3 fcbf 	bl	8000adc <__aeabi_dcmplt>
 800d15e:	2800      	cmp	r0, #0
 800d160:	d079      	beq.n	800d256 <_dtoa_r+0x4de>
 800d162:	9b03      	ldr	r3, [sp, #12]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d076      	beq.n	800d256 <_dtoa_r+0x4de>
 800d168:	9b02      	ldr	r3, [sp, #8]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	dd36      	ble.n	800d1dc <_dtoa_r+0x464>
 800d16e:	9b00      	ldr	r3, [sp, #0]
 800d170:	4650      	mov	r0, sl
 800d172:	4659      	mov	r1, fp
 800d174:	1e5f      	subs	r7, r3, #1
 800d176:	2200      	movs	r2, #0
 800d178:	4b88      	ldr	r3, [pc, #544]	; (800d39c <_dtoa_r+0x624>)
 800d17a:	f7f3 fa3d 	bl	80005f8 <__aeabi_dmul>
 800d17e:	9e02      	ldr	r6, [sp, #8]
 800d180:	4682      	mov	sl, r0
 800d182:	468b      	mov	fp, r1
 800d184:	3501      	adds	r5, #1
 800d186:	4628      	mov	r0, r5
 800d188:	f7f3 f9cc 	bl	8000524 <__aeabi_i2d>
 800d18c:	4652      	mov	r2, sl
 800d18e:	465b      	mov	r3, fp
 800d190:	f7f3 fa32 	bl	80005f8 <__aeabi_dmul>
 800d194:	4b82      	ldr	r3, [pc, #520]	; (800d3a0 <_dtoa_r+0x628>)
 800d196:	2200      	movs	r2, #0
 800d198:	f7f3 f878 	bl	800028c <__adddf3>
 800d19c:	46d0      	mov	r8, sl
 800d19e:	46d9      	mov	r9, fp
 800d1a0:	4682      	mov	sl, r0
 800d1a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d1a6:	2e00      	cmp	r6, #0
 800d1a8:	d158      	bne.n	800d25c <_dtoa_r+0x4e4>
 800d1aa:	4b7e      	ldr	r3, [pc, #504]	; (800d3a4 <_dtoa_r+0x62c>)
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	4640      	mov	r0, r8
 800d1b0:	4649      	mov	r1, r9
 800d1b2:	f7f3 f869 	bl	8000288 <__aeabi_dsub>
 800d1b6:	4652      	mov	r2, sl
 800d1b8:	465b      	mov	r3, fp
 800d1ba:	4680      	mov	r8, r0
 800d1bc:	4689      	mov	r9, r1
 800d1be:	f7f3 fcab 	bl	8000b18 <__aeabi_dcmpgt>
 800d1c2:	2800      	cmp	r0, #0
 800d1c4:	f040 8295 	bne.w	800d6f2 <_dtoa_r+0x97a>
 800d1c8:	4652      	mov	r2, sl
 800d1ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d1ce:	4640      	mov	r0, r8
 800d1d0:	4649      	mov	r1, r9
 800d1d2:	f7f3 fc83 	bl	8000adc <__aeabi_dcmplt>
 800d1d6:	2800      	cmp	r0, #0
 800d1d8:	f040 8289 	bne.w	800d6ee <_dtoa_r+0x976>
 800d1dc:	ec5b ab19 	vmov	sl, fp, d9
 800d1e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	f2c0 8148 	blt.w	800d478 <_dtoa_r+0x700>
 800d1e8:	9a00      	ldr	r2, [sp, #0]
 800d1ea:	2a0e      	cmp	r2, #14
 800d1ec:	f300 8144 	bgt.w	800d478 <_dtoa_r+0x700>
 800d1f0:	4b67      	ldr	r3, [pc, #412]	; (800d390 <_dtoa_r+0x618>)
 800d1f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d1f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d1fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	f280 80d5 	bge.w	800d3ac <_dtoa_r+0x634>
 800d202:	9b03      	ldr	r3, [sp, #12]
 800d204:	2b00      	cmp	r3, #0
 800d206:	f300 80d1 	bgt.w	800d3ac <_dtoa_r+0x634>
 800d20a:	f040 826f 	bne.w	800d6ec <_dtoa_r+0x974>
 800d20e:	4b65      	ldr	r3, [pc, #404]	; (800d3a4 <_dtoa_r+0x62c>)
 800d210:	2200      	movs	r2, #0
 800d212:	4640      	mov	r0, r8
 800d214:	4649      	mov	r1, r9
 800d216:	f7f3 f9ef 	bl	80005f8 <__aeabi_dmul>
 800d21a:	4652      	mov	r2, sl
 800d21c:	465b      	mov	r3, fp
 800d21e:	f7f3 fc71 	bl	8000b04 <__aeabi_dcmpge>
 800d222:	9e03      	ldr	r6, [sp, #12]
 800d224:	4637      	mov	r7, r6
 800d226:	2800      	cmp	r0, #0
 800d228:	f040 8245 	bne.w	800d6b6 <_dtoa_r+0x93e>
 800d22c:	9d01      	ldr	r5, [sp, #4]
 800d22e:	2331      	movs	r3, #49	; 0x31
 800d230:	f805 3b01 	strb.w	r3, [r5], #1
 800d234:	9b00      	ldr	r3, [sp, #0]
 800d236:	3301      	adds	r3, #1
 800d238:	9300      	str	r3, [sp, #0]
 800d23a:	e240      	b.n	800d6be <_dtoa_r+0x946>
 800d23c:	07f2      	lsls	r2, r6, #31
 800d23e:	d505      	bpl.n	800d24c <_dtoa_r+0x4d4>
 800d240:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d244:	f7f3 f9d8 	bl	80005f8 <__aeabi_dmul>
 800d248:	3501      	adds	r5, #1
 800d24a:	2301      	movs	r3, #1
 800d24c:	1076      	asrs	r6, r6, #1
 800d24e:	3708      	adds	r7, #8
 800d250:	e777      	b.n	800d142 <_dtoa_r+0x3ca>
 800d252:	2502      	movs	r5, #2
 800d254:	e779      	b.n	800d14a <_dtoa_r+0x3d2>
 800d256:	9f00      	ldr	r7, [sp, #0]
 800d258:	9e03      	ldr	r6, [sp, #12]
 800d25a:	e794      	b.n	800d186 <_dtoa_r+0x40e>
 800d25c:	9901      	ldr	r1, [sp, #4]
 800d25e:	4b4c      	ldr	r3, [pc, #304]	; (800d390 <_dtoa_r+0x618>)
 800d260:	4431      	add	r1, r6
 800d262:	910d      	str	r1, [sp, #52]	; 0x34
 800d264:	9908      	ldr	r1, [sp, #32]
 800d266:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d26a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d26e:	2900      	cmp	r1, #0
 800d270:	d043      	beq.n	800d2fa <_dtoa_r+0x582>
 800d272:	494d      	ldr	r1, [pc, #308]	; (800d3a8 <_dtoa_r+0x630>)
 800d274:	2000      	movs	r0, #0
 800d276:	f7f3 fae9 	bl	800084c <__aeabi_ddiv>
 800d27a:	4652      	mov	r2, sl
 800d27c:	465b      	mov	r3, fp
 800d27e:	f7f3 f803 	bl	8000288 <__aeabi_dsub>
 800d282:	9d01      	ldr	r5, [sp, #4]
 800d284:	4682      	mov	sl, r0
 800d286:	468b      	mov	fp, r1
 800d288:	4649      	mov	r1, r9
 800d28a:	4640      	mov	r0, r8
 800d28c:	f7f3 fc64 	bl	8000b58 <__aeabi_d2iz>
 800d290:	4606      	mov	r6, r0
 800d292:	f7f3 f947 	bl	8000524 <__aeabi_i2d>
 800d296:	4602      	mov	r2, r0
 800d298:	460b      	mov	r3, r1
 800d29a:	4640      	mov	r0, r8
 800d29c:	4649      	mov	r1, r9
 800d29e:	f7f2 fff3 	bl	8000288 <__aeabi_dsub>
 800d2a2:	3630      	adds	r6, #48	; 0x30
 800d2a4:	f805 6b01 	strb.w	r6, [r5], #1
 800d2a8:	4652      	mov	r2, sl
 800d2aa:	465b      	mov	r3, fp
 800d2ac:	4680      	mov	r8, r0
 800d2ae:	4689      	mov	r9, r1
 800d2b0:	f7f3 fc14 	bl	8000adc <__aeabi_dcmplt>
 800d2b4:	2800      	cmp	r0, #0
 800d2b6:	d163      	bne.n	800d380 <_dtoa_r+0x608>
 800d2b8:	4642      	mov	r2, r8
 800d2ba:	464b      	mov	r3, r9
 800d2bc:	4936      	ldr	r1, [pc, #216]	; (800d398 <_dtoa_r+0x620>)
 800d2be:	2000      	movs	r0, #0
 800d2c0:	f7f2 ffe2 	bl	8000288 <__aeabi_dsub>
 800d2c4:	4652      	mov	r2, sl
 800d2c6:	465b      	mov	r3, fp
 800d2c8:	f7f3 fc08 	bl	8000adc <__aeabi_dcmplt>
 800d2cc:	2800      	cmp	r0, #0
 800d2ce:	f040 80b5 	bne.w	800d43c <_dtoa_r+0x6c4>
 800d2d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d2d4:	429d      	cmp	r5, r3
 800d2d6:	d081      	beq.n	800d1dc <_dtoa_r+0x464>
 800d2d8:	4b30      	ldr	r3, [pc, #192]	; (800d39c <_dtoa_r+0x624>)
 800d2da:	2200      	movs	r2, #0
 800d2dc:	4650      	mov	r0, sl
 800d2de:	4659      	mov	r1, fp
 800d2e0:	f7f3 f98a 	bl	80005f8 <__aeabi_dmul>
 800d2e4:	4b2d      	ldr	r3, [pc, #180]	; (800d39c <_dtoa_r+0x624>)
 800d2e6:	4682      	mov	sl, r0
 800d2e8:	468b      	mov	fp, r1
 800d2ea:	4640      	mov	r0, r8
 800d2ec:	4649      	mov	r1, r9
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	f7f3 f982 	bl	80005f8 <__aeabi_dmul>
 800d2f4:	4680      	mov	r8, r0
 800d2f6:	4689      	mov	r9, r1
 800d2f8:	e7c6      	b.n	800d288 <_dtoa_r+0x510>
 800d2fa:	4650      	mov	r0, sl
 800d2fc:	4659      	mov	r1, fp
 800d2fe:	f7f3 f97b 	bl	80005f8 <__aeabi_dmul>
 800d302:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d304:	9d01      	ldr	r5, [sp, #4]
 800d306:	930f      	str	r3, [sp, #60]	; 0x3c
 800d308:	4682      	mov	sl, r0
 800d30a:	468b      	mov	fp, r1
 800d30c:	4649      	mov	r1, r9
 800d30e:	4640      	mov	r0, r8
 800d310:	f7f3 fc22 	bl	8000b58 <__aeabi_d2iz>
 800d314:	4606      	mov	r6, r0
 800d316:	f7f3 f905 	bl	8000524 <__aeabi_i2d>
 800d31a:	3630      	adds	r6, #48	; 0x30
 800d31c:	4602      	mov	r2, r0
 800d31e:	460b      	mov	r3, r1
 800d320:	4640      	mov	r0, r8
 800d322:	4649      	mov	r1, r9
 800d324:	f7f2 ffb0 	bl	8000288 <__aeabi_dsub>
 800d328:	f805 6b01 	strb.w	r6, [r5], #1
 800d32c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d32e:	429d      	cmp	r5, r3
 800d330:	4680      	mov	r8, r0
 800d332:	4689      	mov	r9, r1
 800d334:	f04f 0200 	mov.w	r2, #0
 800d338:	d124      	bne.n	800d384 <_dtoa_r+0x60c>
 800d33a:	4b1b      	ldr	r3, [pc, #108]	; (800d3a8 <_dtoa_r+0x630>)
 800d33c:	4650      	mov	r0, sl
 800d33e:	4659      	mov	r1, fp
 800d340:	f7f2 ffa4 	bl	800028c <__adddf3>
 800d344:	4602      	mov	r2, r0
 800d346:	460b      	mov	r3, r1
 800d348:	4640      	mov	r0, r8
 800d34a:	4649      	mov	r1, r9
 800d34c:	f7f3 fbe4 	bl	8000b18 <__aeabi_dcmpgt>
 800d350:	2800      	cmp	r0, #0
 800d352:	d173      	bne.n	800d43c <_dtoa_r+0x6c4>
 800d354:	4652      	mov	r2, sl
 800d356:	465b      	mov	r3, fp
 800d358:	4913      	ldr	r1, [pc, #76]	; (800d3a8 <_dtoa_r+0x630>)
 800d35a:	2000      	movs	r0, #0
 800d35c:	f7f2 ff94 	bl	8000288 <__aeabi_dsub>
 800d360:	4602      	mov	r2, r0
 800d362:	460b      	mov	r3, r1
 800d364:	4640      	mov	r0, r8
 800d366:	4649      	mov	r1, r9
 800d368:	f7f3 fbb8 	bl	8000adc <__aeabi_dcmplt>
 800d36c:	2800      	cmp	r0, #0
 800d36e:	f43f af35 	beq.w	800d1dc <_dtoa_r+0x464>
 800d372:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d374:	1e6b      	subs	r3, r5, #1
 800d376:	930f      	str	r3, [sp, #60]	; 0x3c
 800d378:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d37c:	2b30      	cmp	r3, #48	; 0x30
 800d37e:	d0f8      	beq.n	800d372 <_dtoa_r+0x5fa>
 800d380:	9700      	str	r7, [sp, #0]
 800d382:	e049      	b.n	800d418 <_dtoa_r+0x6a0>
 800d384:	4b05      	ldr	r3, [pc, #20]	; (800d39c <_dtoa_r+0x624>)
 800d386:	f7f3 f937 	bl	80005f8 <__aeabi_dmul>
 800d38a:	4680      	mov	r8, r0
 800d38c:	4689      	mov	r9, r1
 800d38e:	e7bd      	b.n	800d30c <_dtoa_r+0x594>
 800d390:	0800ef00 	.word	0x0800ef00
 800d394:	0800eed8 	.word	0x0800eed8
 800d398:	3ff00000 	.word	0x3ff00000
 800d39c:	40240000 	.word	0x40240000
 800d3a0:	401c0000 	.word	0x401c0000
 800d3a4:	40140000 	.word	0x40140000
 800d3a8:	3fe00000 	.word	0x3fe00000
 800d3ac:	9d01      	ldr	r5, [sp, #4]
 800d3ae:	4656      	mov	r6, sl
 800d3b0:	465f      	mov	r7, fp
 800d3b2:	4642      	mov	r2, r8
 800d3b4:	464b      	mov	r3, r9
 800d3b6:	4630      	mov	r0, r6
 800d3b8:	4639      	mov	r1, r7
 800d3ba:	f7f3 fa47 	bl	800084c <__aeabi_ddiv>
 800d3be:	f7f3 fbcb 	bl	8000b58 <__aeabi_d2iz>
 800d3c2:	4682      	mov	sl, r0
 800d3c4:	f7f3 f8ae 	bl	8000524 <__aeabi_i2d>
 800d3c8:	4642      	mov	r2, r8
 800d3ca:	464b      	mov	r3, r9
 800d3cc:	f7f3 f914 	bl	80005f8 <__aeabi_dmul>
 800d3d0:	4602      	mov	r2, r0
 800d3d2:	460b      	mov	r3, r1
 800d3d4:	4630      	mov	r0, r6
 800d3d6:	4639      	mov	r1, r7
 800d3d8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d3dc:	f7f2 ff54 	bl	8000288 <__aeabi_dsub>
 800d3e0:	f805 6b01 	strb.w	r6, [r5], #1
 800d3e4:	9e01      	ldr	r6, [sp, #4]
 800d3e6:	9f03      	ldr	r7, [sp, #12]
 800d3e8:	1bae      	subs	r6, r5, r6
 800d3ea:	42b7      	cmp	r7, r6
 800d3ec:	4602      	mov	r2, r0
 800d3ee:	460b      	mov	r3, r1
 800d3f0:	d135      	bne.n	800d45e <_dtoa_r+0x6e6>
 800d3f2:	f7f2 ff4b 	bl	800028c <__adddf3>
 800d3f6:	4642      	mov	r2, r8
 800d3f8:	464b      	mov	r3, r9
 800d3fa:	4606      	mov	r6, r0
 800d3fc:	460f      	mov	r7, r1
 800d3fe:	f7f3 fb8b 	bl	8000b18 <__aeabi_dcmpgt>
 800d402:	b9d0      	cbnz	r0, 800d43a <_dtoa_r+0x6c2>
 800d404:	4642      	mov	r2, r8
 800d406:	464b      	mov	r3, r9
 800d408:	4630      	mov	r0, r6
 800d40a:	4639      	mov	r1, r7
 800d40c:	f7f3 fb5c 	bl	8000ac8 <__aeabi_dcmpeq>
 800d410:	b110      	cbz	r0, 800d418 <_dtoa_r+0x6a0>
 800d412:	f01a 0f01 	tst.w	sl, #1
 800d416:	d110      	bne.n	800d43a <_dtoa_r+0x6c2>
 800d418:	4620      	mov	r0, r4
 800d41a:	ee18 1a10 	vmov	r1, s16
 800d41e:	f000 fc23 	bl	800dc68 <_Bfree>
 800d422:	2300      	movs	r3, #0
 800d424:	9800      	ldr	r0, [sp, #0]
 800d426:	702b      	strb	r3, [r5, #0]
 800d428:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d42a:	3001      	adds	r0, #1
 800d42c:	6018      	str	r0, [r3, #0]
 800d42e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d430:	2b00      	cmp	r3, #0
 800d432:	f43f acf1 	beq.w	800ce18 <_dtoa_r+0xa0>
 800d436:	601d      	str	r5, [r3, #0]
 800d438:	e4ee      	b.n	800ce18 <_dtoa_r+0xa0>
 800d43a:	9f00      	ldr	r7, [sp, #0]
 800d43c:	462b      	mov	r3, r5
 800d43e:	461d      	mov	r5, r3
 800d440:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d444:	2a39      	cmp	r2, #57	; 0x39
 800d446:	d106      	bne.n	800d456 <_dtoa_r+0x6de>
 800d448:	9a01      	ldr	r2, [sp, #4]
 800d44a:	429a      	cmp	r2, r3
 800d44c:	d1f7      	bne.n	800d43e <_dtoa_r+0x6c6>
 800d44e:	9901      	ldr	r1, [sp, #4]
 800d450:	2230      	movs	r2, #48	; 0x30
 800d452:	3701      	adds	r7, #1
 800d454:	700a      	strb	r2, [r1, #0]
 800d456:	781a      	ldrb	r2, [r3, #0]
 800d458:	3201      	adds	r2, #1
 800d45a:	701a      	strb	r2, [r3, #0]
 800d45c:	e790      	b.n	800d380 <_dtoa_r+0x608>
 800d45e:	4ba6      	ldr	r3, [pc, #664]	; (800d6f8 <_dtoa_r+0x980>)
 800d460:	2200      	movs	r2, #0
 800d462:	f7f3 f8c9 	bl	80005f8 <__aeabi_dmul>
 800d466:	2200      	movs	r2, #0
 800d468:	2300      	movs	r3, #0
 800d46a:	4606      	mov	r6, r0
 800d46c:	460f      	mov	r7, r1
 800d46e:	f7f3 fb2b 	bl	8000ac8 <__aeabi_dcmpeq>
 800d472:	2800      	cmp	r0, #0
 800d474:	d09d      	beq.n	800d3b2 <_dtoa_r+0x63a>
 800d476:	e7cf      	b.n	800d418 <_dtoa_r+0x6a0>
 800d478:	9a08      	ldr	r2, [sp, #32]
 800d47a:	2a00      	cmp	r2, #0
 800d47c:	f000 80d7 	beq.w	800d62e <_dtoa_r+0x8b6>
 800d480:	9a06      	ldr	r2, [sp, #24]
 800d482:	2a01      	cmp	r2, #1
 800d484:	f300 80ba 	bgt.w	800d5fc <_dtoa_r+0x884>
 800d488:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d48a:	2a00      	cmp	r2, #0
 800d48c:	f000 80b2 	beq.w	800d5f4 <_dtoa_r+0x87c>
 800d490:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d494:	9e07      	ldr	r6, [sp, #28]
 800d496:	9d04      	ldr	r5, [sp, #16]
 800d498:	9a04      	ldr	r2, [sp, #16]
 800d49a:	441a      	add	r2, r3
 800d49c:	9204      	str	r2, [sp, #16]
 800d49e:	9a05      	ldr	r2, [sp, #20]
 800d4a0:	2101      	movs	r1, #1
 800d4a2:	441a      	add	r2, r3
 800d4a4:	4620      	mov	r0, r4
 800d4a6:	9205      	str	r2, [sp, #20]
 800d4a8:	f000 fc96 	bl	800ddd8 <__i2b>
 800d4ac:	4607      	mov	r7, r0
 800d4ae:	2d00      	cmp	r5, #0
 800d4b0:	dd0c      	ble.n	800d4cc <_dtoa_r+0x754>
 800d4b2:	9b05      	ldr	r3, [sp, #20]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	dd09      	ble.n	800d4cc <_dtoa_r+0x754>
 800d4b8:	42ab      	cmp	r3, r5
 800d4ba:	9a04      	ldr	r2, [sp, #16]
 800d4bc:	bfa8      	it	ge
 800d4be:	462b      	movge	r3, r5
 800d4c0:	1ad2      	subs	r2, r2, r3
 800d4c2:	9204      	str	r2, [sp, #16]
 800d4c4:	9a05      	ldr	r2, [sp, #20]
 800d4c6:	1aed      	subs	r5, r5, r3
 800d4c8:	1ad3      	subs	r3, r2, r3
 800d4ca:	9305      	str	r3, [sp, #20]
 800d4cc:	9b07      	ldr	r3, [sp, #28]
 800d4ce:	b31b      	cbz	r3, 800d518 <_dtoa_r+0x7a0>
 800d4d0:	9b08      	ldr	r3, [sp, #32]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	f000 80af 	beq.w	800d636 <_dtoa_r+0x8be>
 800d4d8:	2e00      	cmp	r6, #0
 800d4da:	dd13      	ble.n	800d504 <_dtoa_r+0x78c>
 800d4dc:	4639      	mov	r1, r7
 800d4de:	4632      	mov	r2, r6
 800d4e0:	4620      	mov	r0, r4
 800d4e2:	f000 fd39 	bl	800df58 <__pow5mult>
 800d4e6:	ee18 2a10 	vmov	r2, s16
 800d4ea:	4601      	mov	r1, r0
 800d4ec:	4607      	mov	r7, r0
 800d4ee:	4620      	mov	r0, r4
 800d4f0:	f000 fc88 	bl	800de04 <__multiply>
 800d4f4:	ee18 1a10 	vmov	r1, s16
 800d4f8:	4680      	mov	r8, r0
 800d4fa:	4620      	mov	r0, r4
 800d4fc:	f000 fbb4 	bl	800dc68 <_Bfree>
 800d500:	ee08 8a10 	vmov	s16, r8
 800d504:	9b07      	ldr	r3, [sp, #28]
 800d506:	1b9a      	subs	r2, r3, r6
 800d508:	d006      	beq.n	800d518 <_dtoa_r+0x7a0>
 800d50a:	ee18 1a10 	vmov	r1, s16
 800d50e:	4620      	mov	r0, r4
 800d510:	f000 fd22 	bl	800df58 <__pow5mult>
 800d514:	ee08 0a10 	vmov	s16, r0
 800d518:	2101      	movs	r1, #1
 800d51a:	4620      	mov	r0, r4
 800d51c:	f000 fc5c 	bl	800ddd8 <__i2b>
 800d520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d522:	2b00      	cmp	r3, #0
 800d524:	4606      	mov	r6, r0
 800d526:	f340 8088 	ble.w	800d63a <_dtoa_r+0x8c2>
 800d52a:	461a      	mov	r2, r3
 800d52c:	4601      	mov	r1, r0
 800d52e:	4620      	mov	r0, r4
 800d530:	f000 fd12 	bl	800df58 <__pow5mult>
 800d534:	9b06      	ldr	r3, [sp, #24]
 800d536:	2b01      	cmp	r3, #1
 800d538:	4606      	mov	r6, r0
 800d53a:	f340 8081 	ble.w	800d640 <_dtoa_r+0x8c8>
 800d53e:	f04f 0800 	mov.w	r8, #0
 800d542:	6933      	ldr	r3, [r6, #16]
 800d544:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d548:	6918      	ldr	r0, [r3, #16]
 800d54a:	f000 fbf5 	bl	800dd38 <__hi0bits>
 800d54e:	f1c0 0020 	rsb	r0, r0, #32
 800d552:	9b05      	ldr	r3, [sp, #20]
 800d554:	4418      	add	r0, r3
 800d556:	f010 001f 	ands.w	r0, r0, #31
 800d55a:	f000 8092 	beq.w	800d682 <_dtoa_r+0x90a>
 800d55e:	f1c0 0320 	rsb	r3, r0, #32
 800d562:	2b04      	cmp	r3, #4
 800d564:	f340 808a 	ble.w	800d67c <_dtoa_r+0x904>
 800d568:	f1c0 001c 	rsb	r0, r0, #28
 800d56c:	9b04      	ldr	r3, [sp, #16]
 800d56e:	4403      	add	r3, r0
 800d570:	9304      	str	r3, [sp, #16]
 800d572:	9b05      	ldr	r3, [sp, #20]
 800d574:	4403      	add	r3, r0
 800d576:	4405      	add	r5, r0
 800d578:	9305      	str	r3, [sp, #20]
 800d57a:	9b04      	ldr	r3, [sp, #16]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	dd07      	ble.n	800d590 <_dtoa_r+0x818>
 800d580:	ee18 1a10 	vmov	r1, s16
 800d584:	461a      	mov	r2, r3
 800d586:	4620      	mov	r0, r4
 800d588:	f000 fd40 	bl	800e00c <__lshift>
 800d58c:	ee08 0a10 	vmov	s16, r0
 800d590:	9b05      	ldr	r3, [sp, #20]
 800d592:	2b00      	cmp	r3, #0
 800d594:	dd05      	ble.n	800d5a2 <_dtoa_r+0x82a>
 800d596:	4631      	mov	r1, r6
 800d598:	461a      	mov	r2, r3
 800d59a:	4620      	mov	r0, r4
 800d59c:	f000 fd36 	bl	800e00c <__lshift>
 800d5a0:	4606      	mov	r6, r0
 800d5a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d06e      	beq.n	800d686 <_dtoa_r+0x90e>
 800d5a8:	ee18 0a10 	vmov	r0, s16
 800d5ac:	4631      	mov	r1, r6
 800d5ae:	f000 fd9d 	bl	800e0ec <__mcmp>
 800d5b2:	2800      	cmp	r0, #0
 800d5b4:	da67      	bge.n	800d686 <_dtoa_r+0x90e>
 800d5b6:	9b00      	ldr	r3, [sp, #0]
 800d5b8:	3b01      	subs	r3, #1
 800d5ba:	ee18 1a10 	vmov	r1, s16
 800d5be:	9300      	str	r3, [sp, #0]
 800d5c0:	220a      	movs	r2, #10
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	4620      	mov	r0, r4
 800d5c6:	f000 fb71 	bl	800dcac <__multadd>
 800d5ca:	9b08      	ldr	r3, [sp, #32]
 800d5cc:	ee08 0a10 	vmov	s16, r0
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	f000 81b1 	beq.w	800d938 <_dtoa_r+0xbc0>
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	4639      	mov	r1, r7
 800d5da:	220a      	movs	r2, #10
 800d5dc:	4620      	mov	r0, r4
 800d5de:	f000 fb65 	bl	800dcac <__multadd>
 800d5e2:	9b02      	ldr	r3, [sp, #8]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	4607      	mov	r7, r0
 800d5e8:	f300 808e 	bgt.w	800d708 <_dtoa_r+0x990>
 800d5ec:	9b06      	ldr	r3, [sp, #24]
 800d5ee:	2b02      	cmp	r3, #2
 800d5f0:	dc51      	bgt.n	800d696 <_dtoa_r+0x91e>
 800d5f2:	e089      	b.n	800d708 <_dtoa_r+0x990>
 800d5f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d5f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d5fa:	e74b      	b.n	800d494 <_dtoa_r+0x71c>
 800d5fc:	9b03      	ldr	r3, [sp, #12]
 800d5fe:	1e5e      	subs	r6, r3, #1
 800d600:	9b07      	ldr	r3, [sp, #28]
 800d602:	42b3      	cmp	r3, r6
 800d604:	bfbf      	itttt	lt
 800d606:	9b07      	ldrlt	r3, [sp, #28]
 800d608:	9607      	strlt	r6, [sp, #28]
 800d60a:	1af2      	sublt	r2, r6, r3
 800d60c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d60e:	bfb6      	itet	lt
 800d610:	189b      	addlt	r3, r3, r2
 800d612:	1b9e      	subge	r6, r3, r6
 800d614:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d616:	9b03      	ldr	r3, [sp, #12]
 800d618:	bfb8      	it	lt
 800d61a:	2600      	movlt	r6, #0
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	bfb7      	itett	lt
 800d620:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d624:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d628:	1a9d      	sublt	r5, r3, r2
 800d62a:	2300      	movlt	r3, #0
 800d62c:	e734      	b.n	800d498 <_dtoa_r+0x720>
 800d62e:	9e07      	ldr	r6, [sp, #28]
 800d630:	9d04      	ldr	r5, [sp, #16]
 800d632:	9f08      	ldr	r7, [sp, #32]
 800d634:	e73b      	b.n	800d4ae <_dtoa_r+0x736>
 800d636:	9a07      	ldr	r2, [sp, #28]
 800d638:	e767      	b.n	800d50a <_dtoa_r+0x792>
 800d63a:	9b06      	ldr	r3, [sp, #24]
 800d63c:	2b01      	cmp	r3, #1
 800d63e:	dc18      	bgt.n	800d672 <_dtoa_r+0x8fa>
 800d640:	f1ba 0f00 	cmp.w	sl, #0
 800d644:	d115      	bne.n	800d672 <_dtoa_r+0x8fa>
 800d646:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d64a:	b993      	cbnz	r3, 800d672 <_dtoa_r+0x8fa>
 800d64c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d650:	0d1b      	lsrs	r3, r3, #20
 800d652:	051b      	lsls	r3, r3, #20
 800d654:	b183      	cbz	r3, 800d678 <_dtoa_r+0x900>
 800d656:	9b04      	ldr	r3, [sp, #16]
 800d658:	3301      	adds	r3, #1
 800d65a:	9304      	str	r3, [sp, #16]
 800d65c:	9b05      	ldr	r3, [sp, #20]
 800d65e:	3301      	adds	r3, #1
 800d660:	9305      	str	r3, [sp, #20]
 800d662:	f04f 0801 	mov.w	r8, #1
 800d666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d668:	2b00      	cmp	r3, #0
 800d66a:	f47f af6a 	bne.w	800d542 <_dtoa_r+0x7ca>
 800d66e:	2001      	movs	r0, #1
 800d670:	e76f      	b.n	800d552 <_dtoa_r+0x7da>
 800d672:	f04f 0800 	mov.w	r8, #0
 800d676:	e7f6      	b.n	800d666 <_dtoa_r+0x8ee>
 800d678:	4698      	mov	r8, r3
 800d67a:	e7f4      	b.n	800d666 <_dtoa_r+0x8ee>
 800d67c:	f43f af7d 	beq.w	800d57a <_dtoa_r+0x802>
 800d680:	4618      	mov	r0, r3
 800d682:	301c      	adds	r0, #28
 800d684:	e772      	b.n	800d56c <_dtoa_r+0x7f4>
 800d686:	9b03      	ldr	r3, [sp, #12]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	dc37      	bgt.n	800d6fc <_dtoa_r+0x984>
 800d68c:	9b06      	ldr	r3, [sp, #24]
 800d68e:	2b02      	cmp	r3, #2
 800d690:	dd34      	ble.n	800d6fc <_dtoa_r+0x984>
 800d692:	9b03      	ldr	r3, [sp, #12]
 800d694:	9302      	str	r3, [sp, #8]
 800d696:	9b02      	ldr	r3, [sp, #8]
 800d698:	b96b      	cbnz	r3, 800d6b6 <_dtoa_r+0x93e>
 800d69a:	4631      	mov	r1, r6
 800d69c:	2205      	movs	r2, #5
 800d69e:	4620      	mov	r0, r4
 800d6a0:	f000 fb04 	bl	800dcac <__multadd>
 800d6a4:	4601      	mov	r1, r0
 800d6a6:	4606      	mov	r6, r0
 800d6a8:	ee18 0a10 	vmov	r0, s16
 800d6ac:	f000 fd1e 	bl	800e0ec <__mcmp>
 800d6b0:	2800      	cmp	r0, #0
 800d6b2:	f73f adbb 	bgt.w	800d22c <_dtoa_r+0x4b4>
 800d6b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6b8:	9d01      	ldr	r5, [sp, #4]
 800d6ba:	43db      	mvns	r3, r3
 800d6bc:	9300      	str	r3, [sp, #0]
 800d6be:	f04f 0800 	mov.w	r8, #0
 800d6c2:	4631      	mov	r1, r6
 800d6c4:	4620      	mov	r0, r4
 800d6c6:	f000 facf 	bl	800dc68 <_Bfree>
 800d6ca:	2f00      	cmp	r7, #0
 800d6cc:	f43f aea4 	beq.w	800d418 <_dtoa_r+0x6a0>
 800d6d0:	f1b8 0f00 	cmp.w	r8, #0
 800d6d4:	d005      	beq.n	800d6e2 <_dtoa_r+0x96a>
 800d6d6:	45b8      	cmp	r8, r7
 800d6d8:	d003      	beq.n	800d6e2 <_dtoa_r+0x96a>
 800d6da:	4641      	mov	r1, r8
 800d6dc:	4620      	mov	r0, r4
 800d6de:	f000 fac3 	bl	800dc68 <_Bfree>
 800d6e2:	4639      	mov	r1, r7
 800d6e4:	4620      	mov	r0, r4
 800d6e6:	f000 fabf 	bl	800dc68 <_Bfree>
 800d6ea:	e695      	b.n	800d418 <_dtoa_r+0x6a0>
 800d6ec:	2600      	movs	r6, #0
 800d6ee:	4637      	mov	r7, r6
 800d6f0:	e7e1      	b.n	800d6b6 <_dtoa_r+0x93e>
 800d6f2:	9700      	str	r7, [sp, #0]
 800d6f4:	4637      	mov	r7, r6
 800d6f6:	e599      	b.n	800d22c <_dtoa_r+0x4b4>
 800d6f8:	40240000 	.word	0x40240000
 800d6fc:	9b08      	ldr	r3, [sp, #32]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	f000 80ca 	beq.w	800d898 <_dtoa_r+0xb20>
 800d704:	9b03      	ldr	r3, [sp, #12]
 800d706:	9302      	str	r3, [sp, #8]
 800d708:	2d00      	cmp	r5, #0
 800d70a:	dd05      	ble.n	800d718 <_dtoa_r+0x9a0>
 800d70c:	4639      	mov	r1, r7
 800d70e:	462a      	mov	r2, r5
 800d710:	4620      	mov	r0, r4
 800d712:	f000 fc7b 	bl	800e00c <__lshift>
 800d716:	4607      	mov	r7, r0
 800d718:	f1b8 0f00 	cmp.w	r8, #0
 800d71c:	d05b      	beq.n	800d7d6 <_dtoa_r+0xa5e>
 800d71e:	6879      	ldr	r1, [r7, #4]
 800d720:	4620      	mov	r0, r4
 800d722:	f000 fa61 	bl	800dbe8 <_Balloc>
 800d726:	4605      	mov	r5, r0
 800d728:	b928      	cbnz	r0, 800d736 <_dtoa_r+0x9be>
 800d72a:	4b87      	ldr	r3, [pc, #540]	; (800d948 <_dtoa_r+0xbd0>)
 800d72c:	4602      	mov	r2, r0
 800d72e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d732:	f7ff bb3b 	b.w	800cdac <_dtoa_r+0x34>
 800d736:	693a      	ldr	r2, [r7, #16]
 800d738:	3202      	adds	r2, #2
 800d73a:	0092      	lsls	r2, r2, #2
 800d73c:	f107 010c 	add.w	r1, r7, #12
 800d740:	300c      	adds	r0, #12
 800d742:	f7fe f9c5 	bl	800bad0 <memcpy>
 800d746:	2201      	movs	r2, #1
 800d748:	4629      	mov	r1, r5
 800d74a:	4620      	mov	r0, r4
 800d74c:	f000 fc5e 	bl	800e00c <__lshift>
 800d750:	9b01      	ldr	r3, [sp, #4]
 800d752:	f103 0901 	add.w	r9, r3, #1
 800d756:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d75a:	4413      	add	r3, r2
 800d75c:	9305      	str	r3, [sp, #20]
 800d75e:	f00a 0301 	and.w	r3, sl, #1
 800d762:	46b8      	mov	r8, r7
 800d764:	9304      	str	r3, [sp, #16]
 800d766:	4607      	mov	r7, r0
 800d768:	4631      	mov	r1, r6
 800d76a:	ee18 0a10 	vmov	r0, s16
 800d76e:	f7ff fa77 	bl	800cc60 <quorem>
 800d772:	4641      	mov	r1, r8
 800d774:	9002      	str	r0, [sp, #8]
 800d776:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d77a:	ee18 0a10 	vmov	r0, s16
 800d77e:	f000 fcb5 	bl	800e0ec <__mcmp>
 800d782:	463a      	mov	r2, r7
 800d784:	9003      	str	r0, [sp, #12]
 800d786:	4631      	mov	r1, r6
 800d788:	4620      	mov	r0, r4
 800d78a:	f000 fccb 	bl	800e124 <__mdiff>
 800d78e:	68c2      	ldr	r2, [r0, #12]
 800d790:	f109 3bff 	add.w	fp, r9, #4294967295
 800d794:	4605      	mov	r5, r0
 800d796:	bb02      	cbnz	r2, 800d7da <_dtoa_r+0xa62>
 800d798:	4601      	mov	r1, r0
 800d79a:	ee18 0a10 	vmov	r0, s16
 800d79e:	f000 fca5 	bl	800e0ec <__mcmp>
 800d7a2:	4602      	mov	r2, r0
 800d7a4:	4629      	mov	r1, r5
 800d7a6:	4620      	mov	r0, r4
 800d7a8:	9207      	str	r2, [sp, #28]
 800d7aa:	f000 fa5d 	bl	800dc68 <_Bfree>
 800d7ae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d7b2:	ea43 0102 	orr.w	r1, r3, r2
 800d7b6:	9b04      	ldr	r3, [sp, #16]
 800d7b8:	430b      	orrs	r3, r1
 800d7ba:	464d      	mov	r5, r9
 800d7bc:	d10f      	bne.n	800d7de <_dtoa_r+0xa66>
 800d7be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d7c2:	d02a      	beq.n	800d81a <_dtoa_r+0xaa2>
 800d7c4:	9b03      	ldr	r3, [sp, #12]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	dd02      	ble.n	800d7d0 <_dtoa_r+0xa58>
 800d7ca:	9b02      	ldr	r3, [sp, #8]
 800d7cc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d7d0:	f88b a000 	strb.w	sl, [fp]
 800d7d4:	e775      	b.n	800d6c2 <_dtoa_r+0x94a>
 800d7d6:	4638      	mov	r0, r7
 800d7d8:	e7ba      	b.n	800d750 <_dtoa_r+0x9d8>
 800d7da:	2201      	movs	r2, #1
 800d7dc:	e7e2      	b.n	800d7a4 <_dtoa_r+0xa2c>
 800d7de:	9b03      	ldr	r3, [sp, #12]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	db04      	blt.n	800d7ee <_dtoa_r+0xa76>
 800d7e4:	9906      	ldr	r1, [sp, #24]
 800d7e6:	430b      	orrs	r3, r1
 800d7e8:	9904      	ldr	r1, [sp, #16]
 800d7ea:	430b      	orrs	r3, r1
 800d7ec:	d122      	bne.n	800d834 <_dtoa_r+0xabc>
 800d7ee:	2a00      	cmp	r2, #0
 800d7f0:	ddee      	ble.n	800d7d0 <_dtoa_r+0xa58>
 800d7f2:	ee18 1a10 	vmov	r1, s16
 800d7f6:	2201      	movs	r2, #1
 800d7f8:	4620      	mov	r0, r4
 800d7fa:	f000 fc07 	bl	800e00c <__lshift>
 800d7fe:	4631      	mov	r1, r6
 800d800:	ee08 0a10 	vmov	s16, r0
 800d804:	f000 fc72 	bl	800e0ec <__mcmp>
 800d808:	2800      	cmp	r0, #0
 800d80a:	dc03      	bgt.n	800d814 <_dtoa_r+0xa9c>
 800d80c:	d1e0      	bne.n	800d7d0 <_dtoa_r+0xa58>
 800d80e:	f01a 0f01 	tst.w	sl, #1
 800d812:	d0dd      	beq.n	800d7d0 <_dtoa_r+0xa58>
 800d814:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d818:	d1d7      	bne.n	800d7ca <_dtoa_r+0xa52>
 800d81a:	2339      	movs	r3, #57	; 0x39
 800d81c:	f88b 3000 	strb.w	r3, [fp]
 800d820:	462b      	mov	r3, r5
 800d822:	461d      	mov	r5, r3
 800d824:	3b01      	subs	r3, #1
 800d826:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d82a:	2a39      	cmp	r2, #57	; 0x39
 800d82c:	d071      	beq.n	800d912 <_dtoa_r+0xb9a>
 800d82e:	3201      	adds	r2, #1
 800d830:	701a      	strb	r2, [r3, #0]
 800d832:	e746      	b.n	800d6c2 <_dtoa_r+0x94a>
 800d834:	2a00      	cmp	r2, #0
 800d836:	dd07      	ble.n	800d848 <_dtoa_r+0xad0>
 800d838:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d83c:	d0ed      	beq.n	800d81a <_dtoa_r+0xaa2>
 800d83e:	f10a 0301 	add.w	r3, sl, #1
 800d842:	f88b 3000 	strb.w	r3, [fp]
 800d846:	e73c      	b.n	800d6c2 <_dtoa_r+0x94a>
 800d848:	9b05      	ldr	r3, [sp, #20]
 800d84a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d84e:	4599      	cmp	r9, r3
 800d850:	d047      	beq.n	800d8e2 <_dtoa_r+0xb6a>
 800d852:	ee18 1a10 	vmov	r1, s16
 800d856:	2300      	movs	r3, #0
 800d858:	220a      	movs	r2, #10
 800d85a:	4620      	mov	r0, r4
 800d85c:	f000 fa26 	bl	800dcac <__multadd>
 800d860:	45b8      	cmp	r8, r7
 800d862:	ee08 0a10 	vmov	s16, r0
 800d866:	f04f 0300 	mov.w	r3, #0
 800d86a:	f04f 020a 	mov.w	r2, #10
 800d86e:	4641      	mov	r1, r8
 800d870:	4620      	mov	r0, r4
 800d872:	d106      	bne.n	800d882 <_dtoa_r+0xb0a>
 800d874:	f000 fa1a 	bl	800dcac <__multadd>
 800d878:	4680      	mov	r8, r0
 800d87a:	4607      	mov	r7, r0
 800d87c:	f109 0901 	add.w	r9, r9, #1
 800d880:	e772      	b.n	800d768 <_dtoa_r+0x9f0>
 800d882:	f000 fa13 	bl	800dcac <__multadd>
 800d886:	4639      	mov	r1, r7
 800d888:	4680      	mov	r8, r0
 800d88a:	2300      	movs	r3, #0
 800d88c:	220a      	movs	r2, #10
 800d88e:	4620      	mov	r0, r4
 800d890:	f000 fa0c 	bl	800dcac <__multadd>
 800d894:	4607      	mov	r7, r0
 800d896:	e7f1      	b.n	800d87c <_dtoa_r+0xb04>
 800d898:	9b03      	ldr	r3, [sp, #12]
 800d89a:	9302      	str	r3, [sp, #8]
 800d89c:	9d01      	ldr	r5, [sp, #4]
 800d89e:	ee18 0a10 	vmov	r0, s16
 800d8a2:	4631      	mov	r1, r6
 800d8a4:	f7ff f9dc 	bl	800cc60 <quorem>
 800d8a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d8ac:	9b01      	ldr	r3, [sp, #4]
 800d8ae:	f805 ab01 	strb.w	sl, [r5], #1
 800d8b2:	1aea      	subs	r2, r5, r3
 800d8b4:	9b02      	ldr	r3, [sp, #8]
 800d8b6:	4293      	cmp	r3, r2
 800d8b8:	dd09      	ble.n	800d8ce <_dtoa_r+0xb56>
 800d8ba:	ee18 1a10 	vmov	r1, s16
 800d8be:	2300      	movs	r3, #0
 800d8c0:	220a      	movs	r2, #10
 800d8c2:	4620      	mov	r0, r4
 800d8c4:	f000 f9f2 	bl	800dcac <__multadd>
 800d8c8:	ee08 0a10 	vmov	s16, r0
 800d8cc:	e7e7      	b.n	800d89e <_dtoa_r+0xb26>
 800d8ce:	9b02      	ldr	r3, [sp, #8]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	bfc8      	it	gt
 800d8d4:	461d      	movgt	r5, r3
 800d8d6:	9b01      	ldr	r3, [sp, #4]
 800d8d8:	bfd8      	it	le
 800d8da:	2501      	movle	r5, #1
 800d8dc:	441d      	add	r5, r3
 800d8de:	f04f 0800 	mov.w	r8, #0
 800d8e2:	ee18 1a10 	vmov	r1, s16
 800d8e6:	2201      	movs	r2, #1
 800d8e8:	4620      	mov	r0, r4
 800d8ea:	f000 fb8f 	bl	800e00c <__lshift>
 800d8ee:	4631      	mov	r1, r6
 800d8f0:	ee08 0a10 	vmov	s16, r0
 800d8f4:	f000 fbfa 	bl	800e0ec <__mcmp>
 800d8f8:	2800      	cmp	r0, #0
 800d8fa:	dc91      	bgt.n	800d820 <_dtoa_r+0xaa8>
 800d8fc:	d102      	bne.n	800d904 <_dtoa_r+0xb8c>
 800d8fe:	f01a 0f01 	tst.w	sl, #1
 800d902:	d18d      	bne.n	800d820 <_dtoa_r+0xaa8>
 800d904:	462b      	mov	r3, r5
 800d906:	461d      	mov	r5, r3
 800d908:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d90c:	2a30      	cmp	r2, #48	; 0x30
 800d90e:	d0fa      	beq.n	800d906 <_dtoa_r+0xb8e>
 800d910:	e6d7      	b.n	800d6c2 <_dtoa_r+0x94a>
 800d912:	9a01      	ldr	r2, [sp, #4]
 800d914:	429a      	cmp	r2, r3
 800d916:	d184      	bne.n	800d822 <_dtoa_r+0xaaa>
 800d918:	9b00      	ldr	r3, [sp, #0]
 800d91a:	3301      	adds	r3, #1
 800d91c:	9300      	str	r3, [sp, #0]
 800d91e:	2331      	movs	r3, #49	; 0x31
 800d920:	7013      	strb	r3, [r2, #0]
 800d922:	e6ce      	b.n	800d6c2 <_dtoa_r+0x94a>
 800d924:	4b09      	ldr	r3, [pc, #36]	; (800d94c <_dtoa_r+0xbd4>)
 800d926:	f7ff ba95 	b.w	800ce54 <_dtoa_r+0xdc>
 800d92a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	f47f aa6e 	bne.w	800ce0e <_dtoa_r+0x96>
 800d932:	4b07      	ldr	r3, [pc, #28]	; (800d950 <_dtoa_r+0xbd8>)
 800d934:	f7ff ba8e 	b.w	800ce54 <_dtoa_r+0xdc>
 800d938:	9b02      	ldr	r3, [sp, #8]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	dcae      	bgt.n	800d89c <_dtoa_r+0xb24>
 800d93e:	9b06      	ldr	r3, [sp, #24]
 800d940:	2b02      	cmp	r3, #2
 800d942:	f73f aea8 	bgt.w	800d696 <_dtoa_r+0x91e>
 800d946:	e7a9      	b.n	800d89c <_dtoa_r+0xb24>
 800d948:	0800ee64 	.word	0x0800ee64
 800d94c:	0800ecc0 	.word	0x0800ecc0
 800d950:	0800ede5 	.word	0x0800ede5

0800d954 <__sflush_r>:
 800d954:	898a      	ldrh	r2, [r1, #12]
 800d956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d95a:	4605      	mov	r5, r0
 800d95c:	0710      	lsls	r0, r2, #28
 800d95e:	460c      	mov	r4, r1
 800d960:	d458      	bmi.n	800da14 <__sflush_r+0xc0>
 800d962:	684b      	ldr	r3, [r1, #4]
 800d964:	2b00      	cmp	r3, #0
 800d966:	dc05      	bgt.n	800d974 <__sflush_r+0x20>
 800d968:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	dc02      	bgt.n	800d974 <__sflush_r+0x20>
 800d96e:	2000      	movs	r0, #0
 800d970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d974:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d976:	2e00      	cmp	r6, #0
 800d978:	d0f9      	beq.n	800d96e <__sflush_r+0x1a>
 800d97a:	2300      	movs	r3, #0
 800d97c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d980:	682f      	ldr	r7, [r5, #0]
 800d982:	602b      	str	r3, [r5, #0]
 800d984:	d032      	beq.n	800d9ec <__sflush_r+0x98>
 800d986:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d988:	89a3      	ldrh	r3, [r4, #12]
 800d98a:	075a      	lsls	r2, r3, #29
 800d98c:	d505      	bpl.n	800d99a <__sflush_r+0x46>
 800d98e:	6863      	ldr	r3, [r4, #4]
 800d990:	1ac0      	subs	r0, r0, r3
 800d992:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d994:	b10b      	cbz	r3, 800d99a <__sflush_r+0x46>
 800d996:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d998:	1ac0      	subs	r0, r0, r3
 800d99a:	2300      	movs	r3, #0
 800d99c:	4602      	mov	r2, r0
 800d99e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d9a0:	6a21      	ldr	r1, [r4, #32]
 800d9a2:	4628      	mov	r0, r5
 800d9a4:	47b0      	blx	r6
 800d9a6:	1c43      	adds	r3, r0, #1
 800d9a8:	89a3      	ldrh	r3, [r4, #12]
 800d9aa:	d106      	bne.n	800d9ba <__sflush_r+0x66>
 800d9ac:	6829      	ldr	r1, [r5, #0]
 800d9ae:	291d      	cmp	r1, #29
 800d9b0:	d82c      	bhi.n	800da0c <__sflush_r+0xb8>
 800d9b2:	4a2a      	ldr	r2, [pc, #168]	; (800da5c <__sflush_r+0x108>)
 800d9b4:	40ca      	lsrs	r2, r1
 800d9b6:	07d6      	lsls	r6, r2, #31
 800d9b8:	d528      	bpl.n	800da0c <__sflush_r+0xb8>
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	6062      	str	r2, [r4, #4]
 800d9be:	04d9      	lsls	r1, r3, #19
 800d9c0:	6922      	ldr	r2, [r4, #16]
 800d9c2:	6022      	str	r2, [r4, #0]
 800d9c4:	d504      	bpl.n	800d9d0 <__sflush_r+0x7c>
 800d9c6:	1c42      	adds	r2, r0, #1
 800d9c8:	d101      	bne.n	800d9ce <__sflush_r+0x7a>
 800d9ca:	682b      	ldr	r3, [r5, #0]
 800d9cc:	b903      	cbnz	r3, 800d9d0 <__sflush_r+0x7c>
 800d9ce:	6560      	str	r0, [r4, #84]	; 0x54
 800d9d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d9d2:	602f      	str	r7, [r5, #0]
 800d9d4:	2900      	cmp	r1, #0
 800d9d6:	d0ca      	beq.n	800d96e <__sflush_r+0x1a>
 800d9d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d9dc:	4299      	cmp	r1, r3
 800d9de:	d002      	beq.n	800d9e6 <__sflush_r+0x92>
 800d9e0:	4628      	mov	r0, r5
 800d9e2:	f7fe f88b 	bl	800bafc <_free_r>
 800d9e6:	2000      	movs	r0, #0
 800d9e8:	6360      	str	r0, [r4, #52]	; 0x34
 800d9ea:	e7c1      	b.n	800d970 <__sflush_r+0x1c>
 800d9ec:	6a21      	ldr	r1, [r4, #32]
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	4628      	mov	r0, r5
 800d9f2:	47b0      	blx	r6
 800d9f4:	1c41      	adds	r1, r0, #1
 800d9f6:	d1c7      	bne.n	800d988 <__sflush_r+0x34>
 800d9f8:	682b      	ldr	r3, [r5, #0]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d0c4      	beq.n	800d988 <__sflush_r+0x34>
 800d9fe:	2b1d      	cmp	r3, #29
 800da00:	d001      	beq.n	800da06 <__sflush_r+0xb2>
 800da02:	2b16      	cmp	r3, #22
 800da04:	d101      	bne.n	800da0a <__sflush_r+0xb6>
 800da06:	602f      	str	r7, [r5, #0]
 800da08:	e7b1      	b.n	800d96e <__sflush_r+0x1a>
 800da0a:	89a3      	ldrh	r3, [r4, #12]
 800da0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da10:	81a3      	strh	r3, [r4, #12]
 800da12:	e7ad      	b.n	800d970 <__sflush_r+0x1c>
 800da14:	690f      	ldr	r7, [r1, #16]
 800da16:	2f00      	cmp	r7, #0
 800da18:	d0a9      	beq.n	800d96e <__sflush_r+0x1a>
 800da1a:	0793      	lsls	r3, r2, #30
 800da1c:	680e      	ldr	r6, [r1, #0]
 800da1e:	bf08      	it	eq
 800da20:	694b      	ldreq	r3, [r1, #20]
 800da22:	600f      	str	r7, [r1, #0]
 800da24:	bf18      	it	ne
 800da26:	2300      	movne	r3, #0
 800da28:	eba6 0807 	sub.w	r8, r6, r7
 800da2c:	608b      	str	r3, [r1, #8]
 800da2e:	f1b8 0f00 	cmp.w	r8, #0
 800da32:	dd9c      	ble.n	800d96e <__sflush_r+0x1a>
 800da34:	6a21      	ldr	r1, [r4, #32]
 800da36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800da38:	4643      	mov	r3, r8
 800da3a:	463a      	mov	r2, r7
 800da3c:	4628      	mov	r0, r5
 800da3e:	47b0      	blx	r6
 800da40:	2800      	cmp	r0, #0
 800da42:	dc06      	bgt.n	800da52 <__sflush_r+0xfe>
 800da44:	89a3      	ldrh	r3, [r4, #12]
 800da46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da4a:	81a3      	strh	r3, [r4, #12]
 800da4c:	f04f 30ff 	mov.w	r0, #4294967295
 800da50:	e78e      	b.n	800d970 <__sflush_r+0x1c>
 800da52:	4407      	add	r7, r0
 800da54:	eba8 0800 	sub.w	r8, r8, r0
 800da58:	e7e9      	b.n	800da2e <__sflush_r+0xda>
 800da5a:	bf00      	nop
 800da5c:	20400001 	.word	0x20400001

0800da60 <_fflush_r>:
 800da60:	b538      	push	{r3, r4, r5, lr}
 800da62:	690b      	ldr	r3, [r1, #16]
 800da64:	4605      	mov	r5, r0
 800da66:	460c      	mov	r4, r1
 800da68:	b913      	cbnz	r3, 800da70 <_fflush_r+0x10>
 800da6a:	2500      	movs	r5, #0
 800da6c:	4628      	mov	r0, r5
 800da6e:	bd38      	pop	{r3, r4, r5, pc}
 800da70:	b118      	cbz	r0, 800da7a <_fflush_r+0x1a>
 800da72:	6983      	ldr	r3, [r0, #24]
 800da74:	b90b      	cbnz	r3, 800da7a <_fflush_r+0x1a>
 800da76:	f7fd ff61 	bl	800b93c <__sinit>
 800da7a:	4b14      	ldr	r3, [pc, #80]	; (800dacc <_fflush_r+0x6c>)
 800da7c:	429c      	cmp	r4, r3
 800da7e:	d11b      	bne.n	800dab8 <_fflush_r+0x58>
 800da80:	686c      	ldr	r4, [r5, #4]
 800da82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d0ef      	beq.n	800da6a <_fflush_r+0xa>
 800da8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800da8c:	07d0      	lsls	r0, r2, #31
 800da8e:	d404      	bmi.n	800da9a <_fflush_r+0x3a>
 800da90:	0599      	lsls	r1, r3, #22
 800da92:	d402      	bmi.n	800da9a <_fflush_r+0x3a>
 800da94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da96:	f7f5 fe85 	bl	80037a4 <__retarget_lock_acquire_recursive>
 800da9a:	4628      	mov	r0, r5
 800da9c:	4621      	mov	r1, r4
 800da9e:	f7ff ff59 	bl	800d954 <__sflush_r>
 800daa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800daa4:	07da      	lsls	r2, r3, #31
 800daa6:	4605      	mov	r5, r0
 800daa8:	d4e0      	bmi.n	800da6c <_fflush_r+0xc>
 800daaa:	89a3      	ldrh	r3, [r4, #12]
 800daac:	059b      	lsls	r3, r3, #22
 800daae:	d4dd      	bmi.n	800da6c <_fflush_r+0xc>
 800dab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dab2:	f7f5 fe8b 	bl	80037cc <__retarget_lock_release_recursive>
 800dab6:	e7d9      	b.n	800da6c <_fflush_r+0xc>
 800dab8:	4b05      	ldr	r3, [pc, #20]	; (800dad0 <_fflush_r+0x70>)
 800daba:	429c      	cmp	r4, r3
 800dabc:	d101      	bne.n	800dac2 <_fflush_r+0x62>
 800dabe:	68ac      	ldr	r4, [r5, #8]
 800dac0:	e7df      	b.n	800da82 <_fflush_r+0x22>
 800dac2:	4b04      	ldr	r3, [pc, #16]	; (800dad4 <_fflush_r+0x74>)
 800dac4:	429c      	cmp	r4, r3
 800dac6:	bf08      	it	eq
 800dac8:	68ec      	ldreq	r4, [r5, #12]
 800daca:	e7da      	b.n	800da82 <_fflush_r+0x22>
 800dacc:	0800ec6c 	.word	0x0800ec6c
 800dad0:	0800ec8c 	.word	0x0800ec8c
 800dad4:	0800ec4c 	.word	0x0800ec4c

0800dad8 <_localeconv_r>:
 800dad8:	4800      	ldr	r0, [pc, #0]	; (800dadc <_localeconv_r+0x4>)
 800dada:	4770      	bx	lr
 800dadc:	200001bc 	.word	0x200001bc

0800dae0 <_lseek_r>:
 800dae0:	b538      	push	{r3, r4, r5, lr}
 800dae2:	4d07      	ldr	r5, [pc, #28]	; (800db00 <_lseek_r+0x20>)
 800dae4:	4604      	mov	r4, r0
 800dae6:	4608      	mov	r0, r1
 800dae8:	4611      	mov	r1, r2
 800daea:	2200      	movs	r2, #0
 800daec:	602a      	str	r2, [r5, #0]
 800daee:	461a      	mov	r2, r3
 800daf0:	f7f5 fd38 	bl	8003564 <_lseek>
 800daf4:	1c43      	adds	r3, r0, #1
 800daf6:	d102      	bne.n	800dafe <_lseek_r+0x1e>
 800daf8:	682b      	ldr	r3, [r5, #0]
 800dafa:	b103      	cbz	r3, 800dafe <_lseek_r+0x1e>
 800dafc:	6023      	str	r3, [r4, #0]
 800dafe:	bd38      	pop	{r3, r4, r5, pc}
 800db00:	20005640 	.word	0x20005640

0800db04 <__swhatbuf_r>:
 800db04:	b570      	push	{r4, r5, r6, lr}
 800db06:	460e      	mov	r6, r1
 800db08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db0c:	2900      	cmp	r1, #0
 800db0e:	b096      	sub	sp, #88	; 0x58
 800db10:	4614      	mov	r4, r2
 800db12:	461d      	mov	r5, r3
 800db14:	da08      	bge.n	800db28 <__swhatbuf_r+0x24>
 800db16:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800db1a:	2200      	movs	r2, #0
 800db1c:	602a      	str	r2, [r5, #0]
 800db1e:	061a      	lsls	r2, r3, #24
 800db20:	d410      	bmi.n	800db44 <__swhatbuf_r+0x40>
 800db22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db26:	e00e      	b.n	800db46 <__swhatbuf_r+0x42>
 800db28:	466a      	mov	r2, sp
 800db2a:	f000 ff37 	bl	800e99c <_fstat_r>
 800db2e:	2800      	cmp	r0, #0
 800db30:	dbf1      	blt.n	800db16 <__swhatbuf_r+0x12>
 800db32:	9a01      	ldr	r2, [sp, #4]
 800db34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800db38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800db3c:	425a      	negs	r2, r3
 800db3e:	415a      	adcs	r2, r3
 800db40:	602a      	str	r2, [r5, #0]
 800db42:	e7ee      	b.n	800db22 <__swhatbuf_r+0x1e>
 800db44:	2340      	movs	r3, #64	; 0x40
 800db46:	2000      	movs	r0, #0
 800db48:	6023      	str	r3, [r4, #0]
 800db4a:	b016      	add	sp, #88	; 0x58
 800db4c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800db50 <__smakebuf_r>:
 800db50:	898b      	ldrh	r3, [r1, #12]
 800db52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800db54:	079d      	lsls	r5, r3, #30
 800db56:	4606      	mov	r6, r0
 800db58:	460c      	mov	r4, r1
 800db5a:	d507      	bpl.n	800db6c <__smakebuf_r+0x1c>
 800db5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800db60:	6023      	str	r3, [r4, #0]
 800db62:	6123      	str	r3, [r4, #16]
 800db64:	2301      	movs	r3, #1
 800db66:	6163      	str	r3, [r4, #20]
 800db68:	b002      	add	sp, #8
 800db6a:	bd70      	pop	{r4, r5, r6, pc}
 800db6c:	ab01      	add	r3, sp, #4
 800db6e:	466a      	mov	r2, sp
 800db70:	f7ff ffc8 	bl	800db04 <__swhatbuf_r>
 800db74:	9900      	ldr	r1, [sp, #0]
 800db76:	4605      	mov	r5, r0
 800db78:	4630      	mov	r0, r6
 800db7a:	f7fe f82b 	bl	800bbd4 <_malloc_r>
 800db7e:	b948      	cbnz	r0, 800db94 <__smakebuf_r+0x44>
 800db80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db84:	059a      	lsls	r2, r3, #22
 800db86:	d4ef      	bmi.n	800db68 <__smakebuf_r+0x18>
 800db88:	f023 0303 	bic.w	r3, r3, #3
 800db8c:	f043 0302 	orr.w	r3, r3, #2
 800db90:	81a3      	strh	r3, [r4, #12]
 800db92:	e7e3      	b.n	800db5c <__smakebuf_r+0xc>
 800db94:	4b0d      	ldr	r3, [pc, #52]	; (800dbcc <__smakebuf_r+0x7c>)
 800db96:	62b3      	str	r3, [r6, #40]	; 0x28
 800db98:	89a3      	ldrh	r3, [r4, #12]
 800db9a:	6020      	str	r0, [r4, #0]
 800db9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dba0:	81a3      	strh	r3, [r4, #12]
 800dba2:	9b00      	ldr	r3, [sp, #0]
 800dba4:	6163      	str	r3, [r4, #20]
 800dba6:	9b01      	ldr	r3, [sp, #4]
 800dba8:	6120      	str	r0, [r4, #16]
 800dbaa:	b15b      	cbz	r3, 800dbc4 <__smakebuf_r+0x74>
 800dbac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dbb0:	4630      	mov	r0, r6
 800dbb2:	f000 ff05 	bl	800e9c0 <_isatty_r>
 800dbb6:	b128      	cbz	r0, 800dbc4 <__smakebuf_r+0x74>
 800dbb8:	89a3      	ldrh	r3, [r4, #12]
 800dbba:	f023 0303 	bic.w	r3, r3, #3
 800dbbe:	f043 0301 	orr.w	r3, r3, #1
 800dbc2:	81a3      	strh	r3, [r4, #12]
 800dbc4:	89a0      	ldrh	r0, [r4, #12]
 800dbc6:	4305      	orrs	r5, r0
 800dbc8:	81a5      	strh	r5, [r4, #12]
 800dbca:	e7cd      	b.n	800db68 <__smakebuf_r+0x18>
 800dbcc:	0800b8d5 	.word	0x0800b8d5

0800dbd0 <__malloc_lock>:
 800dbd0:	4801      	ldr	r0, [pc, #4]	; (800dbd8 <__malloc_lock+0x8>)
 800dbd2:	f7f5 bde7 	b.w	80037a4 <__retarget_lock_acquire_recursive>
 800dbd6:	bf00      	nop
 800dbd8:	20000614 	.word	0x20000614

0800dbdc <__malloc_unlock>:
 800dbdc:	4801      	ldr	r0, [pc, #4]	; (800dbe4 <__malloc_unlock+0x8>)
 800dbde:	f7f5 bdf5 	b.w	80037cc <__retarget_lock_release_recursive>
 800dbe2:	bf00      	nop
 800dbe4:	20000614 	.word	0x20000614

0800dbe8 <_Balloc>:
 800dbe8:	b570      	push	{r4, r5, r6, lr}
 800dbea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dbec:	4604      	mov	r4, r0
 800dbee:	460d      	mov	r5, r1
 800dbf0:	b976      	cbnz	r6, 800dc10 <_Balloc+0x28>
 800dbf2:	2010      	movs	r0, #16
 800dbf4:	f7fd ff64 	bl	800bac0 <malloc>
 800dbf8:	4602      	mov	r2, r0
 800dbfa:	6260      	str	r0, [r4, #36]	; 0x24
 800dbfc:	b920      	cbnz	r0, 800dc08 <_Balloc+0x20>
 800dbfe:	4b18      	ldr	r3, [pc, #96]	; (800dc60 <_Balloc+0x78>)
 800dc00:	4818      	ldr	r0, [pc, #96]	; (800dc64 <_Balloc+0x7c>)
 800dc02:	2166      	movs	r1, #102	; 0x66
 800dc04:	f000 fe9a 	bl	800e93c <__assert_func>
 800dc08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dc0c:	6006      	str	r6, [r0, #0]
 800dc0e:	60c6      	str	r6, [r0, #12]
 800dc10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800dc12:	68f3      	ldr	r3, [r6, #12]
 800dc14:	b183      	cbz	r3, 800dc38 <_Balloc+0x50>
 800dc16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc18:	68db      	ldr	r3, [r3, #12]
 800dc1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dc1e:	b9b8      	cbnz	r0, 800dc50 <_Balloc+0x68>
 800dc20:	2101      	movs	r1, #1
 800dc22:	fa01 f605 	lsl.w	r6, r1, r5
 800dc26:	1d72      	adds	r2, r6, #5
 800dc28:	0092      	lsls	r2, r2, #2
 800dc2a:	4620      	mov	r0, r4
 800dc2c:	f000 fb60 	bl	800e2f0 <_calloc_r>
 800dc30:	b160      	cbz	r0, 800dc4c <_Balloc+0x64>
 800dc32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dc36:	e00e      	b.n	800dc56 <_Balloc+0x6e>
 800dc38:	2221      	movs	r2, #33	; 0x21
 800dc3a:	2104      	movs	r1, #4
 800dc3c:	4620      	mov	r0, r4
 800dc3e:	f000 fb57 	bl	800e2f0 <_calloc_r>
 800dc42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc44:	60f0      	str	r0, [r6, #12]
 800dc46:	68db      	ldr	r3, [r3, #12]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d1e4      	bne.n	800dc16 <_Balloc+0x2e>
 800dc4c:	2000      	movs	r0, #0
 800dc4e:	bd70      	pop	{r4, r5, r6, pc}
 800dc50:	6802      	ldr	r2, [r0, #0]
 800dc52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dc56:	2300      	movs	r3, #0
 800dc58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dc5c:	e7f7      	b.n	800dc4e <_Balloc+0x66>
 800dc5e:	bf00      	nop
 800dc60:	0800edf2 	.word	0x0800edf2
 800dc64:	0800ee75 	.word	0x0800ee75

0800dc68 <_Bfree>:
 800dc68:	b570      	push	{r4, r5, r6, lr}
 800dc6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dc6c:	4605      	mov	r5, r0
 800dc6e:	460c      	mov	r4, r1
 800dc70:	b976      	cbnz	r6, 800dc90 <_Bfree+0x28>
 800dc72:	2010      	movs	r0, #16
 800dc74:	f7fd ff24 	bl	800bac0 <malloc>
 800dc78:	4602      	mov	r2, r0
 800dc7a:	6268      	str	r0, [r5, #36]	; 0x24
 800dc7c:	b920      	cbnz	r0, 800dc88 <_Bfree+0x20>
 800dc7e:	4b09      	ldr	r3, [pc, #36]	; (800dca4 <_Bfree+0x3c>)
 800dc80:	4809      	ldr	r0, [pc, #36]	; (800dca8 <_Bfree+0x40>)
 800dc82:	218a      	movs	r1, #138	; 0x8a
 800dc84:	f000 fe5a 	bl	800e93c <__assert_func>
 800dc88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dc8c:	6006      	str	r6, [r0, #0]
 800dc8e:	60c6      	str	r6, [r0, #12]
 800dc90:	b13c      	cbz	r4, 800dca2 <_Bfree+0x3a>
 800dc92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800dc94:	6862      	ldr	r2, [r4, #4]
 800dc96:	68db      	ldr	r3, [r3, #12]
 800dc98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dc9c:	6021      	str	r1, [r4, #0]
 800dc9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dca2:	bd70      	pop	{r4, r5, r6, pc}
 800dca4:	0800edf2 	.word	0x0800edf2
 800dca8:	0800ee75 	.word	0x0800ee75

0800dcac <__multadd>:
 800dcac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcb0:	690d      	ldr	r5, [r1, #16]
 800dcb2:	4607      	mov	r7, r0
 800dcb4:	460c      	mov	r4, r1
 800dcb6:	461e      	mov	r6, r3
 800dcb8:	f101 0c14 	add.w	ip, r1, #20
 800dcbc:	2000      	movs	r0, #0
 800dcbe:	f8dc 3000 	ldr.w	r3, [ip]
 800dcc2:	b299      	uxth	r1, r3
 800dcc4:	fb02 6101 	mla	r1, r2, r1, r6
 800dcc8:	0c1e      	lsrs	r6, r3, #16
 800dcca:	0c0b      	lsrs	r3, r1, #16
 800dccc:	fb02 3306 	mla	r3, r2, r6, r3
 800dcd0:	b289      	uxth	r1, r1
 800dcd2:	3001      	adds	r0, #1
 800dcd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dcd8:	4285      	cmp	r5, r0
 800dcda:	f84c 1b04 	str.w	r1, [ip], #4
 800dcde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dce2:	dcec      	bgt.n	800dcbe <__multadd+0x12>
 800dce4:	b30e      	cbz	r6, 800dd2a <__multadd+0x7e>
 800dce6:	68a3      	ldr	r3, [r4, #8]
 800dce8:	42ab      	cmp	r3, r5
 800dcea:	dc19      	bgt.n	800dd20 <__multadd+0x74>
 800dcec:	6861      	ldr	r1, [r4, #4]
 800dcee:	4638      	mov	r0, r7
 800dcf0:	3101      	adds	r1, #1
 800dcf2:	f7ff ff79 	bl	800dbe8 <_Balloc>
 800dcf6:	4680      	mov	r8, r0
 800dcf8:	b928      	cbnz	r0, 800dd06 <__multadd+0x5a>
 800dcfa:	4602      	mov	r2, r0
 800dcfc:	4b0c      	ldr	r3, [pc, #48]	; (800dd30 <__multadd+0x84>)
 800dcfe:	480d      	ldr	r0, [pc, #52]	; (800dd34 <__multadd+0x88>)
 800dd00:	21b5      	movs	r1, #181	; 0xb5
 800dd02:	f000 fe1b 	bl	800e93c <__assert_func>
 800dd06:	6922      	ldr	r2, [r4, #16]
 800dd08:	3202      	adds	r2, #2
 800dd0a:	f104 010c 	add.w	r1, r4, #12
 800dd0e:	0092      	lsls	r2, r2, #2
 800dd10:	300c      	adds	r0, #12
 800dd12:	f7fd fedd 	bl	800bad0 <memcpy>
 800dd16:	4621      	mov	r1, r4
 800dd18:	4638      	mov	r0, r7
 800dd1a:	f7ff ffa5 	bl	800dc68 <_Bfree>
 800dd1e:	4644      	mov	r4, r8
 800dd20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dd24:	3501      	adds	r5, #1
 800dd26:	615e      	str	r6, [r3, #20]
 800dd28:	6125      	str	r5, [r4, #16]
 800dd2a:	4620      	mov	r0, r4
 800dd2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd30:	0800ee64 	.word	0x0800ee64
 800dd34:	0800ee75 	.word	0x0800ee75

0800dd38 <__hi0bits>:
 800dd38:	0c03      	lsrs	r3, r0, #16
 800dd3a:	041b      	lsls	r3, r3, #16
 800dd3c:	b9d3      	cbnz	r3, 800dd74 <__hi0bits+0x3c>
 800dd3e:	0400      	lsls	r0, r0, #16
 800dd40:	2310      	movs	r3, #16
 800dd42:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800dd46:	bf04      	itt	eq
 800dd48:	0200      	lsleq	r0, r0, #8
 800dd4a:	3308      	addeq	r3, #8
 800dd4c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800dd50:	bf04      	itt	eq
 800dd52:	0100      	lsleq	r0, r0, #4
 800dd54:	3304      	addeq	r3, #4
 800dd56:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800dd5a:	bf04      	itt	eq
 800dd5c:	0080      	lsleq	r0, r0, #2
 800dd5e:	3302      	addeq	r3, #2
 800dd60:	2800      	cmp	r0, #0
 800dd62:	db05      	blt.n	800dd70 <__hi0bits+0x38>
 800dd64:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800dd68:	f103 0301 	add.w	r3, r3, #1
 800dd6c:	bf08      	it	eq
 800dd6e:	2320      	moveq	r3, #32
 800dd70:	4618      	mov	r0, r3
 800dd72:	4770      	bx	lr
 800dd74:	2300      	movs	r3, #0
 800dd76:	e7e4      	b.n	800dd42 <__hi0bits+0xa>

0800dd78 <__lo0bits>:
 800dd78:	6803      	ldr	r3, [r0, #0]
 800dd7a:	f013 0207 	ands.w	r2, r3, #7
 800dd7e:	4601      	mov	r1, r0
 800dd80:	d00b      	beq.n	800dd9a <__lo0bits+0x22>
 800dd82:	07da      	lsls	r2, r3, #31
 800dd84:	d423      	bmi.n	800ddce <__lo0bits+0x56>
 800dd86:	0798      	lsls	r0, r3, #30
 800dd88:	bf49      	itett	mi
 800dd8a:	085b      	lsrmi	r3, r3, #1
 800dd8c:	089b      	lsrpl	r3, r3, #2
 800dd8e:	2001      	movmi	r0, #1
 800dd90:	600b      	strmi	r3, [r1, #0]
 800dd92:	bf5c      	itt	pl
 800dd94:	600b      	strpl	r3, [r1, #0]
 800dd96:	2002      	movpl	r0, #2
 800dd98:	4770      	bx	lr
 800dd9a:	b298      	uxth	r0, r3
 800dd9c:	b9a8      	cbnz	r0, 800ddca <__lo0bits+0x52>
 800dd9e:	0c1b      	lsrs	r3, r3, #16
 800dda0:	2010      	movs	r0, #16
 800dda2:	b2da      	uxtb	r2, r3
 800dda4:	b90a      	cbnz	r2, 800ddaa <__lo0bits+0x32>
 800dda6:	3008      	adds	r0, #8
 800dda8:	0a1b      	lsrs	r3, r3, #8
 800ddaa:	071a      	lsls	r2, r3, #28
 800ddac:	bf04      	itt	eq
 800ddae:	091b      	lsreq	r3, r3, #4
 800ddb0:	3004      	addeq	r0, #4
 800ddb2:	079a      	lsls	r2, r3, #30
 800ddb4:	bf04      	itt	eq
 800ddb6:	089b      	lsreq	r3, r3, #2
 800ddb8:	3002      	addeq	r0, #2
 800ddba:	07da      	lsls	r2, r3, #31
 800ddbc:	d403      	bmi.n	800ddc6 <__lo0bits+0x4e>
 800ddbe:	085b      	lsrs	r3, r3, #1
 800ddc0:	f100 0001 	add.w	r0, r0, #1
 800ddc4:	d005      	beq.n	800ddd2 <__lo0bits+0x5a>
 800ddc6:	600b      	str	r3, [r1, #0]
 800ddc8:	4770      	bx	lr
 800ddca:	4610      	mov	r0, r2
 800ddcc:	e7e9      	b.n	800dda2 <__lo0bits+0x2a>
 800ddce:	2000      	movs	r0, #0
 800ddd0:	4770      	bx	lr
 800ddd2:	2020      	movs	r0, #32
 800ddd4:	4770      	bx	lr
	...

0800ddd8 <__i2b>:
 800ddd8:	b510      	push	{r4, lr}
 800ddda:	460c      	mov	r4, r1
 800dddc:	2101      	movs	r1, #1
 800ddde:	f7ff ff03 	bl	800dbe8 <_Balloc>
 800dde2:	4602      	mov	r2, r0
 800dde4:	b928      	cbnz	r0, 800ddf2 <__i2b+0x1a>
 800dde6:	4b05      	ldr	r3, [pc, #20]	; (800ddfc <__i2b+0x24>)
 800dde8:	4805      	ldr	r0, [pc, #20]	; (800de00 <__i2b+0x28>)
 800ddea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ddee:	f000 fda5 	bl	800e93c <__assert_func>
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	6144      	str	r4, [r0, #20]
 800ddf6:	6103      	str	r3, [r0, #16]
 800ddf8:	bd10      	pop	{r4, pc}
 800ddfa:	bf00      	nop
 800ddfc:	0800ee64 	.word	0x0800ee64
 800de00:	0800ee75 	.word	0x0800ee75

0800de04 <__multiply>:
 800de04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de08:	4691      	mov	r9, r2
 800de0a:	690a      	ldr	r2, [r1, #16]
 800de0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800de10:	429a      	cmp	r2, r3
 800de12:	bfb8      	it	lt
 800de14:	460b      	movlt	r3, r1
 800de16:	460c      	mov	r4, r1
 800de18:	bfbc      	itt	lt
 800de1a:	464c      	movlt	r4, r9
 800de1c:	4699      	movlt	r9, r3
 800de1e:	6927      	ldr	r7, [r4, #16]
 800de20:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800de24:	68a3      	ldr	r3, [r4, #8]
 800de26:	6861      	ldr	r1, [r4, #4]
 800de28:	eb07 060a 	add.w	r6, r7, sl
 800de2c:	42b3      	cmp	r3, r6
 800de2e:	b085      	sub	sp, #20
 800de30:	bfb8      	it	lt
 800de32:	3101      	addlt	r1, #1
 800de34:	f7ff fed8 	bl	800dbe8 <_Balloc>
 800de38:	b930      	cbnz	r0, 800de48 <__multiply+0x44>
 800de3a:	4602      	mov	r2, r0
 800de3c:	4b44      	ldr	r3, [pc, #272]	; (800df50 <__multiply+0x14c>)
 800de3e:	4845      	ldr	r0, [pc, #276]	; (800df54 <__multiply+0x150>)
 800de40:	f240 115d 	movw	r1, #349	; 0x15d
 800de44:	f000 fd7a 	bl	800e93c <__assert_func>
 800de48:	f100 0514 	add.w	r5, r0, #20
 800de4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800de50:	462b      	mov	r3, r5
 800de52:	2200      	movs	r2, #0
 800de54:	4543      	cmp	r3, r8
 800de56:	d321      	bcc.n	800de9c <__multiply+0x98>
 800de58:	f104 0314 	add.w	r3, r4, #20
 800de5c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800de60:	f109 0314 	add.w	r3, r9, #20
 800de64:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800de68:	9202      	str	r2, [sp, #8]
 800de6a:	1b3a      	subs	r2, r7, r4
 800de6c:	3a15      	subs	r2, #21
 800de6e:	f022 0203 	bic.w	r2, r2, #3
 800de72:	3204      	adds	r2, #4
 800de74:	f104 0115 	add.w	r1, r4, #21
 800de78:	428f      	cmp	r7, r1
 800de7a:	bf38      	it	cc
 800de7c:	2204      	movcc	r2, #4
 800de7e:	9201      	str	r2, [sp, #4]
 800de80:	9a02      	ldr	r2, [sp, #8]
 800de82:	9303      	str	r3, [sp, #12]
 800de84:	429a      	cmp	r2, r3
 800de86:	d80c      	bhi.n	800dea2 <__multiply+0x9e>
 800de88:	2e00      	cmp	r6, #0
 800de8a:	dd03      	ble.n	800de94 <__multiply+0x90>
 800de8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800de90:	2b00      	cmp	r3, #0
 800de92:	d05a      	beq.n	800df4a <__multiply+0x146>
 800de94:	6106      	str	r6, [r0, #16]
 800de96:	b005      	add	sp, #20
 800de98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de9c:	f843 2b04 	str.w	r2, [r3], #4
 800dea0:	e7d8      	b.n	800de54 <__multiply+0x50>
 800dea2:	f8b3 a000 	ldrh.w	sl, [r3]
 800dea6:	f1ba 0f00 	cmp.w	sl, #0
 800deaa:	d024      	beq.n	800def6 <__multiply+0xf2>
 800deac:	f104 0e14 	add.w	lr, r4, #20
 800deb0:	46a9      	mov	r9, r5
 800deb2:	f04f 0c00 	mov.w	ip, #0
 800deb6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800deba:	f8d9 1000 	ldr.w	r1, [r9]
 800debe:	fa1f fb82 	uxth.w	fp, r2
 800dec2:	b289      	uxth	r1, r1
 800dec4:	fb0a 110b 	mla	r1, sl, fp, r1
 800dec8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800decc:	f8d9 2000 	ldr.w	r2, [r9]
 800ded0:	4461      	add	r1, ip
 800ded2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ded6:	fb0a c20b 	mla	r2, sl, fp, ip
 800deda:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dede:	b289      	uxth	r1, r1
 800dee0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dee4:	4577      	cmp	r7, lr
 800dee6:	f849 1b04 	str.w	r1, [r9], #4
 800deea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800deee:	d8e2      	bhi.n	800deb6 <__multiply+0xb2>
 800def0:	9a01      	ldr	r2, [sp, #4]
 800def2:	f845 c002 	str.w	ip, [r5, r2]
 800def6:	9a03      	ldr	r2, [sp, #12]
 800def8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800defc:	3304      	adds	r3, #4
 800defe:	f1b9 0f00 	cmp.w	r9, #0
 800df02:	d020      	beq.n	800df46 <__multiply+0x142>
 800df04:	6829      	ldr	r1, [r5, #0]
 800df06:	f104 0c14 	add.w	ip, r4, #20
 800df0a:	46ae      	mov	lr, r5
 800df0c:	f04f 0a00 	mov.w	sl, #0
 800df10:	f8bc b000 	ldrh.w	fp, [ip]
 800df14:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800df18:	fb09 220b 	mla	r2, r9, fp, r2
 800df1c:	4492      	add	sl, r2
 800df1e:	b289      	uxth	r1, r1
 800df20:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800df24:	f84e 1b04 	str.w	r1, [lr], #4
 800df28:	f85c 2b04 	ldr.w	r2, [ip], #4
 800df2c:	f8be 1000 	ldrh.w	r1, [lr]
 800df30:	0c12      	lsrs	r2, r2, #16
 800df32:	fb09 1102 	mla	r1, r9, r2, r1
 800df36:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800df3a:	4567      	cmp	r7, ip
 800df3c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800df40:	d8e6      	bhi.n	800df10 <__multiply+0x10c>
 800df42:	9a01      	ldr	r2, [sp, #4]
 800df44:	50a9      	str	r1, [r5, r2]
 800df46:	3504      	adds	r5, #4
 800df48:	e79a      	b.n	800de80 <__multiply+0x7c>
 800df4a:	3e01      	subs	r6, #1
 800df4c:	e79c      	b.n	800de88 <__multiply+0x84>
 800df4e:	bf00      	nop
 800df50:	0800ee64 	.word	0x0800ee64
 800df54:	0800ee75 	.word	0x0800ee75

0800df58 <__pow5mult>:
 800df58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df5c:	4615      	mov	r5, r2
 800df5e:	f012 0203 	ands.w	r2, r2, #3
 800df62:	4606      	mov	r6, r0
 800df64:	460f      	mov	r7, r1
 800df66:	d007      	beq.n	800df78 <__pow5mult+0x20>
 800df68:	4c25      	ldr	r4, [pc, #148]	; (800e000 <__pow5mult+0xa8>)
 800df6a:	3a01      	subs	r2, #1
 800df6c:	2300      	movs	r3, #0
 800df6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800df72:	f7ff fe9b 	bl	800dcac <__multadd>
 800df76:	4607      	mov	r7, r0
 800df78:	10ad      	asrs	r5, r5, #2
 800df7a:	d03d      	beq.n	800dff8 <__pow5mult+0xa0>
 800df7c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800df7e:	b97c      	cbnz	r4, 800dfa0 <__pow5mult+0x48>
 800df80:	2010      	movs	r0, #16
 800df82:	f7fd fd9d 	bl	800bac0 <malloc>
 800df86:	4602      	mov	r2, r0
 800df88:	6270      	str	r0, [r6, #36]	; 0x24
 800df8a:	b928      	cbnz	r0, 800df98 <__pow5mult+0x40>
 800df8c:	4b1d      	ldr	r3, [pc, #116]	; (800e004 <__pow5mult+0xac>)
 800df8e:	481e      	ldr	r0, [pc, #120]	; (800e008 <__pow5mult+0xb0>)
 800df90:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800df94:	f000 fcd2 	bl	800e93c <__assert_func>
 800df98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800df9c:	6004      	str	r4, [r0, #0]
 800df9e:	60c4      	str	r4, [r0, #12]
 800dfa0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800dfa4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dfa8:	b94c      	cbnz	r4, 800dfbe <__pow5mult+0x66>
 800dfaa:	f240 2171 	movw	r1, #625	; 0x271
 800dfae:	4630      	mov	r0, r6
 800dfb0:	f7ff ff12 	bl	800ddd8 <__i2b>
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	f8c8 0008 	str.w	r0, [r8, #8]
 800dfba:	4604      	mov	r4, r0
 800dfbc:	6003      	str	r3, [r0, #0]
 800dfbe:	f04f 0900 	mov.w	r9, #0
 800dfc2:	07eb      	lsls	r3, r5, #31
 800dfc4:	d50a      	bpl.n	800dfdc <__pow5mult+0x84>
 800dfc6:	4639      	mov	r1, r7
 800dfc8:	4622      	mov	r2, r4
 800dfca:	4630      	mov	r0, r6
 800dfcc:	f7ff ff1a 	bl	800de04 <__multiply>
 800dfd0:	4639      	mov	r1, r7
 800dfd2:	4680      	mov	r8, r0
 800dfd4:	4630      	mov	r0, r6
 800dfd6:	f7ff fe47 	bl	800dc68 <_Bfree>
 800dfda:	4647      	mov	r7, r8
 800dfdc:	106d      	asrs	r5, r5, #1
 800dfde:	d00b      	beq.n	800dff8 <__pow5mult+0xa0>
 800dfe0:	6820      	ldr	r0, [r4, #0]
 800dfe2:	b938      	cbnz	r0, 800dff4 <__pow5mult+0x9c>
 800dfe4:	4622      	mov	r2, r4
 800dfe6:	4621      	mov	r1, r4
 800dfe8:	4630      	mov	r0, r6
 800dfea:	f7ff ff0b 	bl	800de04 <__multiply>
 800dfee:	6020      	str	r0, [r4, #0]
 800dff0:	f8c0 9000 	str.w	r9, [r0]
 800dff4:	4604      	mov	r4, r0
 800dff6:	e7e4      	b.n	800dfc2 <__pow5mult+0x6a>
 800dff8:	4638      	mov	r0, r7
 800dffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dffe:	bf00      	nop
 800e000:	0800efc8 	.word	0x0800efc8
 800e004:	0800edf2 	.word	0x0800edf2
 800e008:	0800ee75 	.word	0x0800ee75

0800e00c <__lshift>:
 800e00c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e010:	460c      	mov	r4, r1
 800e012:	6849      	ldr	r1, [r1, #4]
 800e014:	6923      	ldr	r3, [r4, #16]
 800e016:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e01a:	68a3      	ldr	r3, [r4, #8]
 800e01c:	4607      	mov	r7, r0
 800e01e:	4691      	mov	r9, r2
 800e020:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e024:	f108 0601 	add.w	r6, r8, #1
 800e028:	42b3      	cmp	r3, r6
 800e02a:	db0b      	blt.n	800e044 <__lshift+0x38>
 800e02c:	4638      	mov	r0, r7
 800e02e:	f7ff fddb 	bl	800dbe8 <_Balloc>
 800e032:	4605      	mov	r5, r0
 800e034:	b948      	cbnz	r0, 800e04a <__lshift+0x3e>
 800e036:	4602      	mov	r2, r0
 800e038:	4b2a      	ldr	r3, [pc, #168]	; (800e0e4 <__lshift+0xd8>)
 800e03a:	482b      	ldr	r0, [pc, #172]	; (800e0e8 <__lshift+0xdc>)
 800e03c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e040:	f000 fc7c 	bl	800e93c <__assert_func>
 800e044:	3101      	adds	r1, #1
 800e046:	005b      	lsls	r3, r3, #1
 800e048:	e7ee      	b.n	800e028 <__lshift+0x1c>
 800e04a:	2300      	movs	r3, #0
 800e04c:	f100 0114 	add.w	r1, r0, #20
 800e050:	f100 0210 	add.w	r2, r0, #16
 800e054:	4618      	mov	r0, r3
 800e056:	4553      	cmp	r3, sl
 800e058:	db37      	blt.n	800e0ca <__lshift+0xbe>
 800e05a:	6920      	ldr	r0, [r4, #16]
 800e05c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e060:	f104 0314 	add.w	r3, r4, #20
 800e064:	f019 091f 	ands.w	r9, r9, #31
 800e068:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e06c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e070:	d02f      	beq.n	800e0d2 <__lshift+0xc6>
 800e072:	f1c9 0e20 	rsb	lr, r9, #32
 800e076:	468a      	mov	sl, r1
 800e078:	f04f 0c00 	mov.w	ip, #0
 800e07c:	681a      	ldr	r2, [r3, #0]
 800e07e:	fa02 f209 	lsl.w	r2, r2, r9
 800e082:	ea42 020c 	orr.w	r2, r2, ip
 800e086:	f84a 2b04 	str.w	r2, [sl], #4
 800e08a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e08e:	4298      	cmp	r0, r3
 800e090:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e094:	d8f2      	bhi.n	800e07c <__lshift+0x70>
 800e096:	1b03      	subs	r3, r0, r4
 800e098:	3b15      	subs	r3, #21
 800e09a:	f023 0303 	bic.w	r3, r3, #3
 800e09e:	3304      	adds	r3, #4
 800e0a0:	f104 0215 	add.w	r2, r4, #21
 800e0a4:	4290      	cmp	r0, r2
 800e0a6:	bf38      	it	cc
 800e0a8:	2304      	movcc	r3, #4
 800e0aa:	f841 c003 	str.w	ip, [r1, r3]
 800e0ae:	f1bc 0f00 	cmp.w	ip, #0
 800e0b2:	d001      	beq.n	800e0b8 <__lshift+0xac>
 800e0b4:	f108 0602 	add.w	r6, r8, #2
 800e0b8:	3e01      	subs	r6, #1
 800e0ba:	4638      	mov	r0, r7
 800e0bc:	612e      	str	r6, [r5, #16]
 800e0be:	4621      	mov	r1, r4
 800e0c0:	f7ff fdd2 	bl	800dc68 <_Bfree>
 800e0c4:	4628      	mov	r0, r5
 800e0c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0ca:	f842 0f04 	str.w	r0, [r2, #4]!
 800e0ce:	3301      	adds	r3, #1
 800e0d0:	e7c1      	b.n	800e056 <__lshift+0x4a>
 800e0d2:	3904      	subs	r1, #4
 800e0d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0d8:	f841 2f04 	str.w	r2, [r1, #4]!
 800e0dc:	4298      	cmp	r0, r3
 800e0de:	d8f9      	bhi.n	800e0d4 <__lshift+0xc8>
 800e0e0:	e7ea      	b.n	800e0b8 <__lshift+0xac>
 800e0e2:	bf00      	nop
 800e0e4:	0800ee64 	.word	0x0800ee64
 800e0e8:	0800ee75 	.word	0x0800ee75

0800e0ec <__mcmp>:
 800e0ec:	b530      	push	{r4, r5, lr}
 800e0ee:	6902      	ldr	r2, [r0, #16]
 800e0f0:	690c      	ldr	r4, [r1, #16]
 800e0f2:	1b12      	subs	r2, r2, r4
 800e0f4:	d10e      	bne.n	800e114 <__mcmp+0x28>
 800e0f6:	f100 0314 	add.w	r3, r0, #20
 800e0fa:	3114      	adds	r1, #20
 800e0fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e100:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e104:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e108:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e10c:	42a5      	cmp	r5, r4
 800e10e:	d003      	beq.n	800e118 <__mcmp+0x2c>
 800e110:	d305      	bcc.n	800e11e <__mcmp+0x32>
 800e112:	2201      	movs	r2, #1
 800e114:	4610      	mov	r0, r2
 800e116:	bd30      	pop	{r4, r5, pc}
 800e118:	4283      	cmp	r3, r0
 800e11a:	d3f3      	bcc.n	800e104 <__mcmp+0x18>
 800e11c:	e7fa      	b.n	800e114 <__mcmp+0x28>
 800e11e:	f04f 32ff 	mov.w	r2, #4294967295
 800e122:	e7f7      	b.n	800e114 <__mcmp+0x28>

0800e124 <__mdiff>:
 800e124:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e128:	460c      	mov	r4, r1
 800e12a:	4606      	mov	r6, r0
 800e12c:	4611      	mov	r1, r2
 800e12e:	4620      	mov	r0, r4
 800e130:	4690      	mov	r8, r2
 800e132:	f7ff ffdb 	bl	800e0ec <__mcmp>
 800e136:	1e05      	subs	r5, r0, #0
 800e138:	d110      	bne.n	800e15c <__mdiff+0x38>
 800e13a:	4629      	mov	r1, r5
 800e13c:	4630      	mov	r0, r6
 800e13e:	f7ff fd53 	bl	800dbe8 <_Balloc>
 800e142:	b930      	cbnz	r0, 800e152 <__mdiff+0x2e>
 800e144:	4b3a      	ldr	r3, [pc, #232]	; (800e230 <__mdiff+0x10c>)
 800e146:	4602      	mov	r2, r0
 800e148:	f240 2132 	movw	r1, #562	; 0x232
 800e14c:	4839      	ldr	r0, [pc, #228]	; (800e234 <__mdiff+0x110>)
 800e14e:	f000 fbf5 	bl	800e93c <__assert_func>
 800e152:	2301      	movs	r3, #1
 800e154:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e158:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e15c:	bfa4      	itt	ge
 800e15e:	4643      	movge	r3, r8
 800e160:	46a0      	movge	r8, r4
 800e162:	4630      	mov	r0, r6
 800e164:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e168:	bfa6      	itte	ge
 800e16a:	461c      	movge	r4, r3
 800e16c:	2500      	movge	r5, #0
 800e16e:	2501      	movlt	r5, #1
 800e170:	f7ff fd3a 	bl	800dbe8 <_Balloc>
 800e174:	b920      	cbnz	r0, 800e180 <__mdiff+0x5c>
 800e176:	4b2e      	ldr	r3, [pc, #184]	; (800e230 <__mdiff+0x10c>)
 800e178:	4602      	mov	r2, r0
 800e17a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e17e:	e7e5      	b.n	800e14c <__mdiff+0x28>
 800e180:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e184:	6926      	ldr	r6, [r4, #16]
 800e186:	60c5      	str	r5, [r0, #12]
 800e188:	f104 0914 	add.w	r9, r4, #20
 800e18c:	f108 0514 	add.w	r5, r8, #20
 800e190:	f100 0e14 	add.w	lr, r0, #20
 800e194:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e198:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e19c:	f108 0210 	add.w	r2, r8, #16
 800e1a0:	46f2      	mov	sl, lr
 800e1a2:	2100      	movs	r1, #0
 800e1a4:	f859 3b04 	ldr.w	r3, [r9], #4
 800e1a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e1ac:	fa1f f883 	uxth.w	r8, r3
 800e1b0:	fa11 f18b 	uxtah	r1, r1, fp
 800e1b4:	0c1b      	lsrs	r3, r3, #16
 800e1b6:	eba1 0808 	sub.w	r8, r1, r8
 800e1ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e1be:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e1c2:	fa1f f888 	uxth.w	r8, r8
 800e1c6:	1419      	asrs	r1, r3, #16
 800e1c8:	454e      	cmp	r6, r9
 800e1ca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e1ce:	f84a 3b04 	str.w	r3, [sl], #4
 800e1d2:	d8e7      	bhi.n	800e1a4 <__mdiff+0x80>
 800e1d4:	1b33      	subs	r3, r6, r4
 800e1d6:	3b15      	subs	r3, #21
 800e1d8:	f023 0303 	bic.w	r3, r3, #3
 800e1dc:	3304      	adds	r3, #4
 800e1de:	3415      	adds	r4, #21
 800e1e0:	42a6      	cmp	r6, r4
 800e1e2:	bf38      	it	cc
 800e1e4:	2304      	movcc	r3, #4
 800e1e6:	441d      	add	r5, r3
 800e1e8:	4473      	add	r3, lr
 800e1ea:	469e      	mov	lr, r3
 800e1ec:	462e      	mov	r6, r5
 800e1ee:	4566      	cmp	r6, ip
 800e1f0:	d30e      	bcc.n	800e210 <__mdiff+0xec>
 800e1f2:	f10c 0203 	add.w	r2, ip, #3
 800e1f6:	1b52      	subs	r2, r2, r5
 800e1f8:	f022 0203 	bic.w	r2, r2, #3
 800e1fc:	3d03      	subs	r5, #3
 800e1fe:	45ac      	cmp	ip, r5
 800e200:	bf38      	it	cc
 800e202:	2200      	movcc	r2, #0
 800e204:	441a      	add	r2, r3
 800e206:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e20a:	b17b      	cbz	r3, 800e22c <__mdiff+0x108>
 800e20c:	6107      	str	r7, [r0, #16]
 800e20e:	e7a3      	b.n	800e158 <__mdiff+0x34>
 800e210:	f856 8b04 	ldr.w	r8, [r6], #4
 800e214:	fa11 f288 	uxtah	r2, r1, r8
 800e218:	1414      	asrs	r4, r2, #16
 800e21a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e21e:	b292      	uxth	r2, r2
 800e220:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e224:	f84e 2b04 	str.w	r2, [lr], #4
 800e228:	1421      	asrs	r1, r4, #16
 800e22a:	e7e0      	b.n	800e1ee <__mdiff+0xca>
 800e22c:	3f01      	subs	r7, #1
 800e22e:	e7ea      	b.n	800e206 <__mdiff+0xe2>
 800e230:	0800ee64 	.word	0x0800ee64
 800e234:	0800ee75 	.word	0x0800ee75

0800e238 <__d2b>:
 800e238:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e23c:	4689      	mov	r9, r1
 800e23e:	2101      	movs	r1, #1
 800e240:	ec57 6b10 	vmov	r6, r7, d0
 800e244:	4690      	mov	r8, r2
 800e246:	f7ff fccf 	bl	800dbe8 <_Balloc>
 800e24a:	4604      	mov	r4, r0
 800e24c:	b930      	cbnz	r0, 800e25c <__d2b+0x24>
 800e24e:	4602      	mov	r2, r0
 800e250:	4b25      	ldr	r3, [pc, #148]	; (800e2e8 <__d2b+0xb0>)
 800e252:	4826      	ldr	r0, [pc, #152]	; (800e2ec <__d2b+0xb4>)
 800e254:	f240 310a 	movw	r1, #778	; 0x30a
 800e258:	f000 fb70 	bl	800e93c <__assert_func>
 800e25c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e260:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e264:	bb35      	cbnz	r5, 800e2b4 <__d2b+0x7c>
 800e266:	2e00      	cmp	r6, #0
 800e268:	9301      	str	r3, [sp, #4]
 800e26a:	d028      	beq.n	800e2be <__d2b+0x86>
 800e26c:	4668      	mov	r0, sp
 800e26e:	9600      	str	r6, [sp, #0]
 800e270:	f7ff fd82 	bl	800dd78 <__lo0bits>
 800e274:	9900      	ldr	r1, [sp, #0]
 800e276:	b300      	cbz	r0, 800e2ba <__d2b+0x82>
 800e278:	9a01      	ldr	r2, [sp, #4]
 800e27a:	f1c0 0320 	rsb	r3, r0, #32
 800e27e:	fa02 f303 	lsl.w	r3, r2, r3
 800e282:	430b      	orrs	r3, r1
 800e284:	40c2      	lsrs	r2, r0
 800e286:	6163      	str	r3, [r4, #20]
 800e288:	9201      	str	r2, [sp, #4]
 800e28a:	9b01      	ldr	r3, [sp, #4]
 800e28c:	61a3      	str	r3, [r4, #24]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	bf14      	ite	ne
 800e292:	2202      	movne	r2, #2
 800e294:	2201      	moveq	r2, #1
 800e296:	6122      	str	r2, [r4, #16]
 800e298:	b1d5      	cbz	r5, 800e2d0 <__d2b+0x98>
 800e29a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e29e:	4405      	add	r5, r0
 800e2a0:	f8c9 5000 	str.w	r5, [r9]
 800e2a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e2a8:	f8c8 0000 	str.w	r0, [r8]
 800e2ac:	4620      	mov	r0, r4
 800e2ae:	b003      	add	sp, #12
 800e2b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e2b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e2b8:	e7d5      	b.n	800e266 <__d2b+0x2e>
 800e2ba:	6161      	str	r1, [r4, #20]
 800e2bc:	e7e5      	b.n	800e28a <__d2b+0x52>
 800e2be:	a801      	add	r0, sp, #4
 800e2c0:	f7ff fd5a 	bl	800dd78 <__lo0bits>
 800e2c4:	9b01      	ldr	r3, [sp, #4]
 800e2c6:	6163      	str	r3, [r4, #20]
 800e2c8:	2201      	movs	r2, #1
 800e2ca:	6122      	str	r2, [r4, #16]
 800e2cc:	3020      	adds	r0, #32
 800e2ce:	e7e3      	b.n	800e298 <__d2b+0x60>
 800e2d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e2d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e2d8:	f8c9 0000 	str.w	r0, [r9]
 800e2dc:	6918      	ldr	r0, [r3, #16]
 800e2de:	f7ff fd2b 	bl	800dd38 <__hi0bits>
 800e2e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e2e6:	e7df      	b.n	800e2a8 <__d2b+0x70>
 800e2e8:	0800ee64 	.word	0x0800ee64
 800e2ec:	0800ee75 	.word	0x0800ee75

0800e2f0 <_calloc_r>:
 800e2f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e2f2:	fba1 2402 	umull	r2, r4, r1, r2
 800e2f6:	b94c      	cbnz	r4, 800e30c <_calloc_r+0x1c>
 800e2f8:	4611      	mov	r1, r2
 800e2fa:	9201      	str	r2, [sp, #4]
 800e2fc:	f7fd fc6a 	bl	800bbd4 <_malloc_r>
 800e300:	9a01      	ldr	r2, [sp, #4]
 800e302:	4605      	mov	r5, r0
 800e304:	b930      	cbnz	r0, 800e314 <_calloc_r+0x24>
 800e306:	4628      	mov	r0, r5
 800e308:	b003      	add	sp, #12
 800e30a:	bd30      	pop	{r4, r5, pc}
 800e30c:	220c      	movs	r2, #12
 800e30e:	6002      	str	r2, [r0, #0]
 800e310:	2500      	movs	r5, #0
 800e312:	e7f8      	b.n	800e306 <_calloc_r+0x16>
 800e314:	4621      	mov	r1, r4
 800e316:	f7fd fbe9 	bl	800baec <memset>
 800e31a:	e7f4      	b.n	800e306 <_calloc_r+0x16>

0800e31c <__ssputs_r>:
 800e31c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e320:	688e      	ldr	r6, [r1, #8]
 800e322:	429e      	cmp	r6, r3
 800e324:	4682      	mov	sl, r0
 800e326:	460c      	mov	r4, r1
 800e328:	4690      	mov	r8, r2
 800e32a:	461f      	mov	r7, r3
 800e32c:	d838      	bhi.n	800e3a0 <__ssputs_r+0x84>
 800e32e:	898a      	ldrh	r2, [r1, #12]
 800e330:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e334:	d032      	beq.n	800e39c <__ssputs_r+0x80>
 800e336:	6825      	ldr	r5, [r4, #0]
 800e338:	6909      	ldr	r1, [r1, #16]
 800e33a:	eba5 0901 	sub.w	r9, r5, r1
 800e33e:	6965      	ldr	r5, [r4, #20]
 800e340:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e344:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e348:	3301      	adds	r3, #1
 800e34a:	444b      	add	r3, r9
 800e34c:	106d      	asrs	r5, r5, #1
 800e34e:	429d      	cmp	r5, r3
 800e350:	bf38      	it	cc
 800e352:	461d      	movcc	r5, r3
 800e354:	0553      	lsls	r3, r2, #21
 800e356:	d531      	bpl.n	800e3bc <__ssputs_r+0xa0>
 800e358:	4629      	mov	r1, r5
 800e35a:	f7fd fc3b 	bl	800bbd4 <_malloc_r>
 800e35e:	4606      	mov	r6, r0
 800e360:	b950      	cbnz	r0, 800e378 <__ssputs_r+0x5c>
 800e362:	230c      	movs	r3, #12
 800e364:	f8ca 3000 	str.w	r3, [sl]
 800e368:	89a3      	ldrh	r3, [r4, #12]
 800e36a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e36e:	81a3      	strh	r3, [r4, #12]
 800e370:	f04f 30ff 	mov.w	r0, #4294967295
 800e374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e378:	6921      	ldr	r1, [r4, #16]
 800e37a:	464a      	mov	r2, r9
 800e37c:	f7fd fba8 	bl	800bad0 <memcpy>
 800e380:	89a3      	ldrh	r3, [r4, #12]
 800e382:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e38a:	81a3      	strh	r3, [r4, #12]
 800e38c:	6126      	str	r6, [r4, #16]
 800e38e:	6165      	str	r5, [r4, #20]
 800e390:	444e      	add	r6, r9
 800e392:	eba5 0509 	sub.w	r5, r5, r9
 800e396:	6026      	str	r6, [r4, #0]
 800e398:	60a5      	str	r5, [r4, #8]
 800e39a:	463e      	mov	r6, r7
 800e39c:	42be      	cmp	r6, r7
 800e39e:	d900      	bls.n	800e3a2 <__ssputs_r+0x86>
 800e3a0:	463e      	mov	r6, r7
 800e3a2:	6820      	ldr	r0, [r4, #0]
 800e3a4:	4632      	mov	r2, r6
 800e3a6:	4641      	mov	r1, r8
 800e3a8:	f000 fb2c 	bl	800ea04 <memmove>
 800e3ac:	68a3      	ldr	r3, [r4, #8]
 800e3ae:	1b9b      	subs	r3, r3, r6
 800e3b0:	60a3      	str	r3, [r4, #8]
 800e3b2:	6823      	ldr	r3, [r4, #0]
 800e3b4:	4433      	add	r3, r6
 800e3b6:	6023      	str	r3, [r4, #0]
 800e3b8:	2000      	movs	r0, #0
 800e3ba:	e7db      	b.n	800e374 <__ssputs_r+0x58>
 800e3bc:	462a      	mov	r2, r5
 800e3be:	f000 fb3b 	bl	800ea38 <_realloc_r>
 800e3c2:	4606      	mov	r6, r0
 800e3c4:	2800      	cmp	r0, #0
 800e3c6:	d1e1      	bne.n	800e38c <__ssputs_r+0x70>
 800e3c8:	6921      	ldr	r1, [r4, #16]
 800e3ca:	4650      	mov	r0, sl
 800e3cc:	f7fd fb96 	bl	800bafc <_free_r>
 800e3d0:	e7c7      	b.n	800e362 <__ssputs_r+0x46>
	...

0800e3d4 <_svfiprintf_r>:
 800e3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3d8:	4698      	mov	r8, r3
 800e3da:	898b      	ldrh	r3, [r1, #12]
 800e3dc:	061b      	lsls	r3, r3, #24
 800e3de:	b09d      	sub	sp, #116	; 0x74
 800e3e0:	4607      	mov	r7, r0
 800e3e2:	460d      	mov	r5, r1
 800e3e4:	4614      	mov	r4, r2
 800e3e6:	d50e      	bpl.n	800e406 <_svfiprintf_r+0x32>
 800e3e8:	690b      	ldr	r3, [r1, #16]
 800e3ea:	b963      	cbnz	r3, 800e406 <_svfiprintf_r+0x32>
 800e3ec:	2140      	movs	r1, #64	; 0x40
 800e3ee:	f7fd fbf1 	bl	800bbd4 <_malloc_r>
 800e3f2:	6028      	str	r0, [r5, #0]
 800e3f4:	6128      	str	r0, [r5, #16]
 800e3f6:	b920      	cbnz	r0, 800e402 <_svfiprintf_r+0x2e>
 800e3f8:	230c      	movs	r3, #12
 800e3fa:	603b      	str	r3, [r7, #0]
 800e3fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e400:	e0d1      	b.n	800e5a6 <_svfiprintf_r+0x1d2>
 800e402:	2340      	movs	r3, #64	; 0x40
 800e404:	616b      	str	r3, [r5, #20]
 800e406:	2300      	movs	r3, #0
 800e408:	9309      	str	r3, [sp, #36]	; 0x24
 800e40a:	2320      	movs	r3, #32
 800e40c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e410:	f8cd 800c 	str.w	r8, [sp, #12]
 800e414:	2330      	movs	r3, #48	; 0x30
 800e416:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e5c0 <_svfiprintf_r+0x1ec>
 800e41a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e41e:	f04f 0901 	mov.w	r9, #1
 800e422:	4623      	mov	r3, r4
 800e424:	469a      	mov	sl, r3
 800e426:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e42a:	b10a      	cbz	r2, 800e430 <_svfiprintf_r+0x5c>
 800e42c:	2a25      	cmp	r2, #37	; 0x25
 800e42e:	d1f9      	bne.n	800e424 <_svfiprintf_r+0x50>
 800e430:	ebba 0b04 	subs.w	fp, sl, r4
 800e434:	d00b      	beq.n	800e44e <_svfiprintf_r+0x7a>
 800e436:	465b      	mov	r3, fp
 800e438:	4622      	mov	r2, r4
 800e43a:	4629      	mov	r1, r5
 800e43c:	4638      	mov	r0, r7
 800e43e:	f7ff ff6d 	bl	800e31c <__ssputs_r>
 800e442:	3001      	adds	r0, #1
 800e444:	f000 80aa 	beq.w	800e59c <_svfiprintf_r+0x1c8>
 800e448:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e44a:	445a      	add	r2, fp
 800e44c:	9209      	str	r2, [sp, #36]	; 0x24
 800e44e:	f89a 3000 	ldrb.w	r3, [sl]
 800e452:	2b00      	cmp	r3, #0
 800e454:	f000 80a2 	beq.w	800e59c <_svfiprintf_r+0x1c8>
 800e458:	2300      	movs	r3, #0
 800e45a:	f04f 32ff 	mov.w	r2, #4294967295
 800e45e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e462:	f10a 0a01 	add.w	sl, sl, #1
 800e466:	9304      	str	r3, [sp, #16]
 800e468:	9307      	str	r3, [sp, #28]
 800e46a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e46e:	931a      	str	r3, [sp, #104]	; 0x68
 800e470:	4654      	mov	r4, sl
 800e472:	2205      	movs	r2, #5
 800e474:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e478:	4851      	ldr	r0, [pc, #324]	; (800e5c0 <_svfiprintf_r+0x1ec>)
 800e47a:	f7f1 feb1 	bl	80001e0 <memchr>
 800e47e:	9a04      	ldr	r2, [sp, #16]
 800e480:	b9d8      	cbnz	r0, 800e4ba <_svfiprintf_r+0xe6>
 800e482:	06d0      	lsls	r0, r2, #27
 800e484:	bf44      	itt	mi
 800e486:	2320      	movmi	r3, #32
 800e488:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e48c:	0711      	lsls	r1, r2, #28
 800e48e:	bf44      	itt	mi
 800e490:	232b      	movmi	r3, #43	; 0x2b
 800e492:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e496:	f89a 3000 	ldrb.w	r3, [sl]
 800e49a:	2b2a      	cmp	r3, #42	; 0x2a
 800e49c:	d015      	beq.n	800e4ca <_svfiprintf_r+0xf6>
 800e49e:	9a07      	ldr	r2, [sp, #28]
 800e4a0:	4654      	mov	r4, sl
 800e4a2:	2000      	movs	r0, #0
 800e4a4:	f04f 0c0a 	mov.w	ip, #10
 800e4a8:	4621      	mov	r1, r4
 800e4aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e4ae:	3b30      	subs	r3, #48	; 0x30
 800e4b0:	2b09      	cmp	r3, #9
 800e4b2:	d94e      	bls.n	800e552 <_svfiprintf_r+0x17e>
 800e4b4:	b1b0      	cbz	r0, 800e4e4 <_svfiprintf_r+0x110>
 800e4b6:	9207      	str	r2, [sp, #28]
 800e4b8:	e014      	b.n	800e4e4 <_svfiprintf_r+0x110>
 800e4ba:	eba0 0308 	sub.w	r3, r0, r8
 800e4be:	fa09 f303 	lsl.w	r3, r9, r3
 800e4c2:	4313      	orrs	r3, r2
 800e4c4:	9304      	str	r3, [sp, #16]
 800e4c6:	46a2      	mov	sl, r4
 800e4c8:	e7d2      	b.n	800e470 <_svfiprintf_r+0x9c>
 800e4ca:	9b03      	ldr	r3, [sp, #12]
 800e4cc:	1d19      	adds	r1, r3, #4
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	9103      	str	r1, [sp, #12]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	bfbb      	ittet	lt
 800e4d6:	425b      	neglt	r3, r3
 800e4d8:	f042 0202 	orrlt.w	r2, r2, #2
 800e4dc:	9307      	strge	r3, [sp, #28]
 800e4de:	9307      	strlt	r3, [sp, #28]
 800e4e0:	bfb8      	it	lt
 800e4e2:	9204      	strlt	r2, [sp, #16]
 800e4e4:	7823      	ldrb	r3, [r4, #0]
 800e4e6:	2b2e      	cmp	r3, #46	; 0x2e
 800e4e8:	d10c      	bne.n	800e504 <_svfiprintf_r+0x130>
 800e4ea:	7863      	ldrb	r3, [r4, #1]
 800e4ec:	2b2a      	cmp	r3, #42	; 0x2a
 800e4ee:	d135      	bne.n	800e55c <_svfiprintf_r+0x188>
 800e4f0:	9b03      	ldr	r3, [sp, #12]
 800e4f2:	1d1a      	adds	r2, r3, #4
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	9203      	str	r2, [sp, #12]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	bfb8      	it	lt
 800e4fc:	f04f 33ff 	movlt.w	r3, #4294967295
 800e500:	3402      	adds	r4, #2
 800e502:	9305      	str	r3, [sp, #20]
 800e504:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e5d0 <_svfiprintf_r+0x1fc>
 800e508:	7821      	ldrb	r1, [r4, #0]
 800e50a:	2203      	movs	r2, #3
 800e50c:	4650      	mov	r0, sl
 800e50e:	f7f1 fe67 	bl	80001e0 <memchr>
 800e512:	b140      	cbz	r0, 800e526 <_svfiprintf_r+0x152>
 800e514:	2340      	movs	r3, #64	; 0x40
 800e516:	eba0 000a 	sub.w	r0, r0, sl
 800e51a:	fa03 f000 	lsl.w	r0, r3, r0
 800e51e:	9b04      	ldr	r3, [sp, #16]
 800e520:	4303      	orrs	r3, r0
 800e522:	3401      	adds	r4, #1
 800e524:	9304      	str	r3, [sp, #16]
 800e526:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e52a:	4826      	ldr	r0, [pc, #152]	; (800e5c4 <_svfiprintf_r+0x1f0>)
 800e52c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e530:	2206      	movs	r2, #6
 800e532:	f7f1 fe55 	bl	80001e0 <memchr>
 800e536:	2800      	cmp	r0, #0
 800e538:	d038      	beq.n	800e5ac <_svfiprintf_r+0x1d8>
 800e53a:	4b23      	ldr	r3, [pc, #140]	; (800e5c8 <_svfiprintf_r+0x1f4>)
 800e53c:	bb1b      	cbnz	r3, 800e586 <_svfiprintf_r+0x1b2>
 800e53e:	9b03      	ldr	r3, [sp, #12]
 800e540:	3307      	adds	r3, #7
 800e542:	f023 0307 	bic.w	r3, r3, #7
 800e546:	3308      	adds	r3, #8
 800e548:	9303      	str	r3, [sp, #12]
 800e54a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e54c:	4433      	add	r3, r6
 800e54e:	9309      	str	r3, [sp, #36]	; 0x24
 800e550:	e767      	b.n	800e422 <_svfiprintf_r+0x4e>
 800e552:	fb0c 3202 	mla	r2, ip, r2, r3
 800e556:	460c      	mov	r4, r1
 800e558:	2001      	movs	r0, #1
 800e55a:	e7a5      	b.n	800e4a8 <_svfiprintf_r+0xd4>
 800e55c:	2300      	movs	r3, #0
 800e55e:	3401      	adds	r4, #1
 800e560:	9305      	str	r3, [sp, #20]
 800e562:	4619      	mov	r1, r3
 800e564:	f04f 0c0a 	mov.w	ip, #10
 800e568:	4620      	mov	r0, r4
 800e56a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e56e:	3a30      	subs	r2, #48	; 0x30
 800e570:	2a09      	cmp	r2, #9
 800e572:	d903      	bls.n	800e57c <_svfiprintf_r+0x1a8>
 800e574:	2b00      	cmp	r3, #0
 800e576:	d0c5      	beq.n	800e504 <_svfiprintf_r+0x130>
 800e578:	9105      	str	r1, [sp, #20]
 800e57a:	e7c3      	b.n	800e504 <_svfiprintf_r+0x130>
 800e57c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e580:	4604      	mov	r4, r0
 800e582:	2301      	movs	r3, #1
 800e584:	e7f0      	b.n	800e568 <_svfiprintf_r+0x194>
 800e586:	ab03      	add	r3, sp, #12
 800e588:	9300      	str	r3, [sp, #0]
 800e58a:	462a      	mov	r2, r5
 800e58c:	4b0f      	ldr	r3, [pc, #60]	; (800e5cc <_svfiprintf_r+0x1f8>)
 800e58e:	a904      	add	r1, sp, #16
 800e590:	4638      	mov	r0, r7
 800e592:	f7fd fc33 	bl	800bdfc <_printf_float>
 800e596:	1c42      	adds	r2, r0, #1
 800e598:	4606      	mov	r6, r0
 800e59a:	d1d6      	bne.n	800e54a <_svfiprintf_r+0x176>
 800e59c:	89ab      	ldrh	r3, [r5, #12]
 800e59e:	065b      	lsls	r3, r3, #25
 800e5a0:	f53f af2c 	bmi.w	800e3fc <_svfiprintf_r+0x28>
 800e5a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e5a6:	b01d      	add	sp, #116	; 0x74
 800e5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5ac:	ab03      	add	r3, sp, #12
 800e5ae:	9300      	str	r3, [sp, #0]
 800e5b0:	462a      	mov	r2, r5
 800e5b2:	4b06      	ldr	r3, [pc, #24]	; (800e5cc <_svfiprintf_r+0x1f8>)
 800e5b4:	a904      	add	r1, sp, #16
 800e5b6:	4638      	mov	r0, r7
 800e5b8:	f7fd fec4 	bl	800c344 <_printf_i>
 800e5bc:	e7eb      	b.n	800e596 <_svfiprintf_r+0x1c2>
 800e5be:	bf00      	nop
 800e5c0:	0800efd4 	.word	0x0800efd4
 800e5c4:	0800efde 	.word	0x0800efde
 800e5c8:	0800bdfd 	.word	0x0800bdfd
 800e5cc:	0800e31d 	.word	0x0800e31d
 800e5d0:	0800efda 	.word	0x0800efda

0800e5d4 <__sfputc_r>:
 800e5d4:	6893      	ldr	r3, [r2, #8]
 800e5d6:	3b01      	subs	r3, #1
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	b410      	push	{r4}
 800e5dc:	6093      	str	r3, [r2, #8]
 800e5de:	da08      	bge.n	800e5f2 <__sfputc_r+0x1e>
 800e5e0:	6994      	ldr	r4, [r2, #24]
 800e5e2:	42a3      	cmp	r3, r4
 800e5e4:	db01      	blt.n	800e5ea <__sfputc_r+0x16>
 800e5e6:	290a      	cmp	r1, #10
 800e5e8:	d103      	bne.n	800e5f2 <__sfputc_r+0x1e>
 800e5ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5ee:	f7fe ba55 	b.w	800ca9c <__swbuf_r>
 800e5f2:	6813      	ldr	r3, [r2, #0]
 800e5f4:	1c58      	adds	r0, r3, #1
 800e5f6:	6010      	str	r0, [r2, #0]
 800e5f8:	7019      	strb	r1, [r3, #0]
 800e5fa:	4608      	mov	r0, r1
 800e5fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e600:	4770      	bx	lr

0800e602 <__sfputs_r>:
 800e602:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e604:	4606      	mov	r6, r0
 800e606:	460f      	mov	r7, r1
 800e608:	4614      	mov	r4, r2
 800e60a:	18d5      	adds	r5, r2, r3
 800e60c:	42ac      	cmp	r4, r5
 800e60e:	d101      	bne.n	800e614 <__sfputs_r+0x12>
 800e610:	2000      	movs	r0, #0
 800e612:	e007      	b.n	800e624 <__sfputs_r+0x22>
 800e614:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e618:	463a      	mov	r2, r7
 800e61a:	4630      	mov	r0, r6
 800e61c:	f7ff ffda 	bl	800e5d4 <__sfputc_r>
 800e620:	1c43      	adds	r3, r0, #1
 800e622:	d1f3      	bne.n	800e60c <__sfputs_r+0xa>
 800e624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e628 <_vfiprintf_r>:
 800e628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e62c:	460d      	mov	r5, r1
 800e62e:	b09d      	sub	sp, #116	; 0x74
 800e630:	4614      	mov	r4, r2
 800e632:	4698      	mov	r8, r3
 800e634:	4606      	mov	r6, r0
 800e636:	b118      	cbz	r0, 800e640 <_vfiprintf_r+0x18>
 800e638:	6983      	ldr	r3, [r0, #24]
 800e63a:	b90b      	cbnz	r3, 800e640 <_vfiprintf_r+0x18>
 800e63c:	f7fd f97e 	bl	800b93c <__sinit>
 800e640:	4b89      	ldr	r3, [pc, #548]	; (800e868 <_vfiprintf_r+0x240>)
 800e642:	429d      	cmp	r5, r3
 800e644:	d11b      	bne.n	800e67e <_vfiprintf_r+0x56>
 800e646:	6875      	ldr	r5, [r6, #4]
 800e648:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e64a:	07d9      	lsls	r1, r3, #31
 800e64c:	d405      	bmi.n	800e65a <_vfiprintf_r+0x32>
 800e64e:	89ab      	ldrh	r3, [r5, #12]
 800e650:	059a      	lsls	r2, r3, #22
 800e652:	d402      	bmi.n	800e65a <_vfiprintf_r+0x32>
 800e654:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e656:	f7f5 f8a5 	bl	80037a4 <__retarget_lock_acquire_recursive>
 800e65a:	89ab      	ldrh	r3, [r5, #12]
 800e65c:	071b      	lsls	r3, r3, #28
 800e65e:	d501      	bpl.n	800e664 <_vfiprintf_r+0x3c>
 800e660:	692b      	ldr	r3, [r5, #16]
 800e662:	b9eb      	cbnz	r3, 800e6a0 <_vfiprintf_r+0x78>
 800e664:	4629      	mov	r1, r5
 800e666:	4630      	mov	r0, r6
 800e668:	f7fe fa7c 	bl	800cb64 <__swsetup_r>
 800e66c:	b1c0      	cbz	r0, 800e6a0 <_vfiprintf_r+0x78>
 800e66e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e670:	07dc      	lsls	r4, r3, #31
 800e672:	d50e      	bpl.n	800e692 <_vfiprintf_r+0x6a>
 800e674:	f04f 30ff 	mov.w	r0, #4294967295
 800e678:	b01d      	add	sp, #116	; 0x74
 800e67a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e67e:	4b7b      	ldr	r3, [pc, #492]	; (800e86c <_vfiprintf_r+0x244>)
 800e680:	429d      	cmp	r5, r3
 800e682:	d101      	bne.n	800e688 <_vfiprintf_r+0x60>
 800e684:	68b5      	ldr	r5, [r6, #8]
 800e686:	e7df      	b.n	800e648 <_vfiprintf_r+0x20>
 800e688:	4b79      	ldr	r3, [pc, #484]	; (800e870 <_vfiprintf_r+0x248>)
 800e68a:	429d      	cmp	r5, r3
 800e68c:	bf08      	it	eq
 800e68e:	68f5      	ldreq	r5, [r6, #12]
 800e690:	e7da      	b.n	800e648 <_vfiprintf_r+0x20>
 800e692:	89ab      	ldrh	r3, [r5, #12]
 800e694:	0598      	lsls	r0, r3, #22
 800e696:	d4ed      	bmi.n	800e674 <_vfiprintf_r+0x4c>
 800e698:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e69a:	f7f5 f897 	bl	80037cc <__retarget_lock_release_recursive>
 800e69e:	e7e9      	b.n	800e674 <_vfiprintf_r+0x4c>
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	9309      	str	r3, [sp, #36]	; 0x24
 800e6a4:	2320      	movs	r3, #32
 800e6a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e6aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800e6ae:	2330      	movs	r3, #48	; 0x30
 800e6b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e874 <_vfiprintf_r+0x24c>
 800e6b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e6b8:	f04f 0901 	mov.w	r9, #1
 800e6bc:	4623      	mov	r3, r4
 800e6be:	469a      	mov	sl, r3
 800e6c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e6c4:	b10a      	cbz	r2, 800e6ca <_vfiprintf_r+0xa2>
 800e6c6:	2a25      	cmp	r2, #37	; 0x25
 800e6c8:	d1f9      	bne.n	800e6be <_vfiprintf_r+0x96>
 800e6ca:	ebba 0b04 	subs.w	fp, sl, r4
 800e6ce:	d00b      	beq.n	800e6e8 <_vfiprintf_r+0xc0>
 800e6d0:	465b      	mov	r3, fp
 800e6d2:	4622      	mov	r2, r4
 800e6d4:	4629      	mov	r1, r5
 800e6d6:	4630      	mov	r0, r6
 800e6d8:	f7ff ff93 	bl	800e602 <__sfputs_r>
 800e6dc:	3001      	adds	r0, #1
 800e6de:	f000 80aa 	beq.w	800e836 <_vfiprintf_r+0x20e>
 800e6e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e6e4:	445a      	add	r2, fp
 800e6e6:	9209      	str	r2, [sp, #36]	; 0x24
 800e6e8:	f89a 3000 	ldrb.w	r3, [sl]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	f000 80a2 	beq.w	800e836 <_vfiprintf_r+0x20e>
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	f04f 32ff 	mov.w	r2, #4294967295
 800e6f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e6fc:	f10a 0a01 	add.w	sl, sl, #1
 800e700:	9304      	str	r3, [sp, #16]
 800e702:	9307      	str	r3, [sp, #28]
 800e704:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e708:	931a      	str	r3, [sp, #104]	; 0x68
 800e70a:	4654      	mov	r4, sl
 800e70c:	2205      	movs	r2, #5
 800e70e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e712:	4858      	ldr	r0, [pc, #352]	; (800e874 <_vfiprintf_r+0x24c>)
 800e714:	f7f1 fd64 	bl	80001e0 <memchr>
 800e718:	9a04      	ldr	r2, [sp, #16]
 800e71a:	b9d8      	cbnz	r0, 800e754 <_vfiprintf_r+0x12c>
 800e71c:	06d1      	lsls	r1, r2, #27
 800e71e:	bf44      	itt	mi
 800e720:	2320      	movmi	r3, #32
 800e722:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e726:	0713      	lsls	r3, r2, #28
 800e728:	bf44      	itt	mi
 800e72a:	232b      	movmi	r3, #43	; 0x2b
 800e72c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e730:	f89a 3000 	ldrb.w	r3, [sl]
 800e734:	2b2a      	cmp	r3, #42	; 0x2a
 800e736:	d015      	beq.n	800e764 <_vfiprintf_r+0x13c>
 800e738:	9a07      	ldr	r2, [sp, #28]
 800e73a:	4654      	mov	r4, sl
 800e73c:	2000      	movs	r0, #0
 800e73e:	f04f 0c0a 	mov.w	ip, #10
 800e742:	4621      	mov	r1, r4
 800e744:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e748:	3b30      	subs	r3, #48	; 0x30
 800e74a:	2b09      	cmp	r3, #9
 800e74c:	d94e      	bls.n	800e7ec <_vfiprintf_r+0x1c4>
 800e74e:	b1b0      	cbz	r0, 800e77e <_vfiprintf_r+0x156>
 800e750:	9207      	str	r2, [sp, #28]
 800e752:	e014      	b.n	800e77e <_vfiprintf_r+0x156>
 800e754:	eba0 0308 	sub.w	r3, r0, r8
 800e758:	fa09 f303 	lsl.w	r3, r9, r3
 800e75c:	4313      	orrs	r3, r2
 800e75e:	9304      	str	r3, [sp, #16]
 800e760:	46a2      	mov	sl, r4
 800e762:	e7d2      	b.n	800e70a <_vfiprintf_r+0xe2>
 800e764:	9b03      	ldr	r3, [sp, #12]
 800e766:	1d19      	adds	r1, r3, #4
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	9103      	str	r1, [sp, #12]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	bfbb      	ittet	lt
 800e770:	425b      	neglt	r3, r3
 800e772:	f042 0202 	orrlt.w	r2, r2, #2
 800e776:	9307      	strge	r3, [sp, #28]
 800e778:	9307      	strlt	r3, [sp, #28]
 800e77a:	bfb8      	it	lt
 800e77c:	9204      	strlt	r2, [sp, #16]
 800e77e:	7823      	ldrb	r3, [r4, #0]
 800e780:	2b2e      	cmp	r3, #46	; 0x2e
 800e782:	d10c      	bne.n	800e79e <_vfiprintf_r+0x176>
 800e784:	7863      	ldrb	r3, [r4, #1]
 800e786:	2b2a      	cmp	r3, #42	; 0x2a
 800e788:	d135      	bne.n	800e7f6 <_vfiprintf_r+0x1ce>
 800e78a:	9b03      	ldr	r3, [sp, #12]
 800e78c:	1d1a      	adds	r2, r3, #4
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	9203      	str	r2, [sp, #12]
 800e792:	2b00      	cmp	r3, #0
 800e794:	bfb8      	it	lt
 800e796:	f04f 33ff 	movlt.w	r3, #4294967295
 800e79a:	3402      	adds	r4, #2
 800e79c:	9305      	str	r3, [sp, #20]
 800e79e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e884 <_vfiprintf_r+0x25c>
 800e7a2:	7821      	ldrb	r1, [r4, #0]
 800e7a4:	2203      	movs	r2, #3
 800e7a6:	4650      	mov	r0, sl
 800e7a8:	f7f1 fd1a 	bl	80001e0 <memchr>
 800e7ac:	b140      	cbz	r0, 800e7c0 <_vfiprintf_r+0x198>
 800e7ae:	2340      	movs	r3, #64	; 0x40
 800e7b0:	eba0 000a 	sub.w	r0, r0, sl
 800e7b4:	fa03 f000 	lsl.w	r0, r3, r0
 800e7b8:	9b04      	ldr	r3, [sp, #16]
 800e7ba:	4303      	orrs	r3, r0
 800e7bc:	3401      	adds	r4, #1
 800e7be:	9304      	str	r3, [sp, #16]
 800e7c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7c4:	482c      	ldr	r0, [pc, #176]	; (800e878 <_vfiprintf_r+0x250>)
 800e7c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e7ca:	2206      	movs	r2, #6
 800e7cc:	f7f1 fd08 	bl	80001e0 <memchr>
 800e7d0:	2800      	cmp	r0, #0
 800e7d2:	d03f      	beq.n	800e854 <_vfiprintf_r+0x22c>
 800e7d4:	4b29      	ldr	r3, [pc, #164]	; (800e87c <_vfiprintf_r+0x254>)
 800e7d6:	bb1b      	cbnz	r3, 800e820 <_vfiprintf_r+0x1f8>
 800e7d8:	9b03      	ldr	r3, [sp, #12]
 800e7da:	3307      	adds	r3, #7
 800e7dc:	f023 0307 	bic.w	r3, r3, #7
 800e7e0:	3308      	adds	r3, #8
 800e7e2:	9303      	str	r3, [sp, #12]
 800e7e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7e6:	443b      	add	r3, r7
 800e7e8:	9309      	str	r3, [sp, #36]	; 0x24
 800e7ea:	e767      	b.n	800e6bc <_vfiprintf_r+0x94>
 800e7ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800e7f0:	460c      	mov	r4, r1
 800e7f2:	2001      	movs	r0, #1
 800e7f4:	e7a5      	b.n	800e742 <_vfiprintf_r+0x11a>
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	3401      	adds	r4, #1
 800e7fa:	9305      	str	r3, [sp, #20]
 800e7fc:	4619      	mov	r1, r3
 800e7fe:	f04f 0c0a 	mov.w	ip, #10
 800e802:	4620      	mov	r0, r4
 800e804:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e808:	3a30      	subs	r2, #48	; 0x30
 800e80a:	2a09      	cmp	r2, #9
 800e80c:	d903      	bls.n	800e816 <_vfiprintf_r+0x1ee>
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d0c5      	beq.n	800e79e <_vfiprintf_r+0x176>
 800e812:	9105      	str	r1, [sp, #20]
 800e814:	e7c3      	b.n	800e79e <_vfiprintf_r+0x176>
 800e816:	fb0c 2101 	mla	r1, ip, r1, r2
 800e81a:	4604      	mov	r4, r0
 800e81c:	2301      	movs	r3, #1
 800e81e:	e7f0      	b.n	800e802 <_vfiprintf_r+0x1da>
 800e820:	ab03      	add	r3, sp, #12
 800e822:	9300      	str	r3, [sp, #0]
 800e824:	462a      	mov	r2, r5
 800e826:	4b16      	ldr	r3, [pc, #88]	; (800e880 <_vfiprintf_r+0x258>)
 800e828:	a904      	add	r1, sp, #16
 800e82a:	4630      	mov	r0, r6
 800e82c:	f7fd fae6 	bl	800bdfc <_printf_float>
 800e830:	4607      	mov	r7, r0
 800e832:	1c78      	adds	r0, r7, #1
 800e834:	d1d6      	bne.n	800e7e4 <_vfiprintf_r+0x1bc>
 800e836:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e838:	07d9      	lsls	r1, r3, #31
 800e83a:	d405      	bmi.n	800e848 <_vfiprintf_r+0x220>
 800e83c:	89ab      	ldrh	r3, [r5, #12]
 800e83e:	059a      	lsls	r2, r3, #22
 800e840:	d402      	bmi.n	800e848 <_vfiprintf_r+0x220>
 800e842:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e844:	f7f4 ffc2 	bl	80037cc <__retarget_lock_release_recursive>
 800e848:	89ab      	ldrh	r3, [r5, #12]
 800e84a:	065b      	lsls	r3, r3, #25
 800e84c:	f53f af12 	bmi.w	800e674 <_vfiprintf_r+0x4c>
 800e850:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e852:	e711      	b.n	800e678 <_vfiprintf_r+0x50>
 800e854:	ab03      	add	r3, sp, #12
 800e856:	9300      	str	r3, [sp, #0]
 800e858:	462a      	mov	r2, r5
 800e85a:	4b09      	ldr	r3, [pc, #36]	; (800e880 <_vfiprintf_r+0x258>)
 800e85c:	a904      	add	r1, sp, #16
 800e85e:	4630      	mov	r0, r6
 800e860:	f7fd fd70 	bl	800c344 <_printf_i>
 800e864:	e7e4      	b.n	800e830 <_vfiprintf_r+0x208>
 800e866:	bf00      	nop
 800e868:	0800ec6c 	.word	0x0800ec6c
 800e86c:	0800ec8c 	.word	0x0800ec8c
 800e870:	0800ec4c 	.word	0x0800ec4c
 800e874:	0800efd4 	.word	0x0800efd4
 800e878:	0800efde 	.word	0x0800efde
 800e87c:	0800bdfd 	.word	0x0800bdfd
 800e880:	0800e603 	.word	0x0800e603
 800e884:	0800efda 	.word	0x0800efda

0800e888 <_putc_r>:
 800e888:	b570      	push	{r4, r5, r6, lr}
 800e88a:	460d      	mov	r5, r1
 800e88c:	4614      	mov	r4, r2
 800e88e:	4606      	mov	r6, r0
 800e890:	b118      	cbz	r0, 800e89a <_putc_r+0x12>
 800e892:	6983      	ldr	r3, [r0, #24]
 800e894:	b90b      	cbnz	r3, 800e89a <_putc_r+0x12>
 800e896:	f7fd f851 	bl	800b93c <__sinit>
 800e89a:	4b1c      	ldr	r3, [pc, #112]	; (800e90c <_putc_r+0x84>)
 800e89c:	429c      	cmp	r4, r3
 800e89e:	d124      	bne.n	800e8ea <_putc_r+0x62>
 800e8a0:	6874      	ldr	r4, [r6, #4]
 800e8a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e8a4:	07d8      	lsls	r0, r3, #31
 800e8a6:	d405      	bmi.n	800e8b4 <_putc_r+0x2c>
 800e8a8:	89a3      	ldrh	r3, [r4, #12]
 800e8aa:	0599      	lsls	r1, r3, #22
 800e8ac:	d402      	bmi.n	800e8b4 <_putc_r+0x2c>
 800e8ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e8b0:	f7f4 ff78 	bl	80037a4 <__retarget_lock_acquire_recursive>
 800e8b4:	68a3      	ldr	r3, [r4, #8]
 800e8b6:	3b01      	subs	r3, #1
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	60a3      	str	r3, [r4, #8]
 800e8bc:	da05      	bge.n	800e8ca <_putc_r+0x42>
 800e8be:	69a2      	ldr	r2, [r4, #24]
 800e8c0:	4293      	cmp	r3, r2
 800e8c2:	db1c      	blt.n	800e8fe <_putc_r+0x76>
 800e8c4:	b2eb      	uxtb	r3, r5
 800e8c6:	2b0a      	cmp	r3, #10
 800e8c8:	d019      	beq.n	800e8fe <_putc_r+0x76>
 800e8ca:	6823      	ldr	r3, [r4, #0]
 800e8cc:	1c5a      	adds	r2, r3, #1
 800e8ce:	6022      	str	r2, [r4, #0]
 800e8d0:	701d      	strb	r5, [r3, #0]
 800e8d2:	b2ed      	uxtb	r5, r5
 800e8d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e8d6:	07da      	lsls	r2, r3, #31
 800e8d8:	d405      	bmi.n	800e8e6 <_putc_r+0x5e>
 800e8da:	89a3      	ldrh	r3, [r4, #12]
 800e8dc:	059b      	lsls	r3, r3, #22
 800e8de:	d402      	bmi.n	800e8e6 <_putc_r+0x5e>
 800e8e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e8e2:	f7f4 ff73 	bl	80037cc <__retarget_lock_release_recursive>
 800e8e6:	4628      	mov	r0, r5
 800e8e8:	bd70      	pop	{r4, r5, r6, pc}
 800e8ea:	4b09      	ldr	r3, [pc, #36]	; (800e910 <_putc_r+0x88>)
 800e8ec:	429c      	cmp	r4, r3
 800e8ee:	d101      	bne.n	800e8f4 <_putc_r+0x6c>
 800e8f0:	68b4      	ldr	r4, [r6, #8]
 800e8f2:	e7d6      	b.n	800e8a2 <_putc_r+0x1a>
 800e8f4:	4b07      	ldr	r3, [pc, #28]	; (800e914 <_putc_r+0x8c>)
 800e8f6:	429c      	cmp	r4, r3
 800e8f8:	bf08      	it	eq
 800e8fa:	68f4      	ldreq	r4, [r6, #12]
 800e8fc:	e7d1      	b.n	800e8a2 <_putc_r+0x1a>
 800e8fe:	4629      	mov	r1, r5
 800e900:	4622      	mov	r2, r4
 800e902:	4630      	mov	r0, r6
 800e904:	f7fe f8ca 	bl	800ca9c <__swbuf_r>
 800e908:	4605      	mov	r5, r0
 800e90a:	e7e3      	b.n	800e8d4 <_putc_r+0x4c>
 800e90c:	0800ec6c 	.word	0x0800ec6c
 800e910:	0800ec8c 	.word	0x0800ec8c
 800e914:	0800ec4c 	.word	0x0800ec4c

0800e918 <_read_r>:
 800e918:	b538      	push	{r3, r4, r5, lr}
 800e91a:	4d07      	ldr	r5, [pc, #28]	; (800e938 <_read_r+0x20>)
 800e91c:	4604      	mov	r4, r0
 800e91e:	4608      	mov	r0, r1
 800e920:	4611      	mov	r1, r2
 800e922:	2200      	movs	r2, #0
 800e924:	602a      	str	r2, [r5, #0]
 800e926:	461a      	mov	r2, r3
 800e928:	f7f4 fdbc 	bl	80034a4 <_read>
 800e92c:	1c43      	adds	r3, r0, #1
 800e92e:	d102      	bne.n	800e936 <_read_r+0x1e>
 800e930:	682b      	ldr	r3, [r5, #0]
 800e932:	b103      	cbz	r3, 800e936 <_read_r+0x1e>
 800e934:	6023      	str	r3, [r4, #0]
 800e936:	bd38      	pop	{r3, r4, r5, pc}
 800e938:	20005640 	.word	0x20005640

0800e93c <__assert_func>:
 800e93c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e93e:	4614      	mov	r4, r2
 800e940:	461a      	mov	r2, r3
 800e942:	4b09      	ldr	r3, [pc, #36]	; (800e968 <__assert_func+0x2c>)
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	4605      	mov	r5, r0
 800e948:	68d8      	ldr	r0, [r3, #12]
 800e94a:	b14c      	cbz	r4, 800e960 <__assert_func+0x24>
 800e94c:	4b07      	ldr	r3, [pc, #28]	; (800e96c <__assert_func+0x30>)
 800e94e:	9100      	str	r1, [sp, #0]
 800e950:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e954:	4906      	ldr	r1, [pc, #24]	; (800e970 <__assert_func+0x34>)
 800e956:	462b      	mov	r3, r5
 800e958:	f000 f80e 	bl	800e978 <fiprintf>
 800e95c:	f7fc ff88 	bl	800b870 <abort>
 800e960:	4b04      	ldr	r3, [pc, #16]	; (800e974 <__assert_func+0x38>)
 800e962:	461c      	mov	r4, r3
 800e964:	e7f3      	b.n	800e94e <__assert_func+0x12>
 800e966:	bf00      	nop
 800e968:	20000068 	.word	0x20000068
 800e96c:	0800efe5 	.word	0x0800efe5
 800e970:	0800eff2 	.word	0x0800eff2
 800e974:	0800f020 	.word	0x0800f020

0800e978 <fiprintf>:
 800e978:	b40e      	push	{r1, r2, r3}
 800e97a:	b503      	push	{r0, r1, lr}
 800e97c:	4601      	mov	r1, r0
 800e97e:	ab03      	add	r3, sp, #12
 800e980:	4805      	ldr	r0, [pc, #20]	; (800e998 <fiprintf+0x20>)
 800e982:	f853 2b04 	ldr.w	r2, [r3], #4
 800e986:	6800      	ldr	r0, [r0, #0]
 800e988:	9301      	str	r3, [sp, #4]
 800e98a:	f7ff fe4d 	bl	800e628 <_vfiprintf_r>
 800e98e:	b002      	add	sp, #8
 800e990:	f85d eb04 	ldr.w	lr, [sp], #4
 800e994:	b003      	add	sp, #12
 800e996:	4770      	bx	lr
 800e998:	20000068 	.word	0x20000068

0800e99c <_fstat_r>:
 800e99c:	b538      	push	{r3, r4, r5, lr}
 800e99e:	4d07      	ldr	r5, [pc, #28]	; (800e9bc <_fstat_r+0x20>)
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	4604      	mov	r4, r0
 800e9a4:	4608      	mov	r0, r1
 800e9a6:	4611      	mov	r1, r2
 800e9a8:	602b      	str	r3, [r5, #0]
 800e9aa:	f7f4 fdc0 	bl	800352e <_fstat>
 800e9ae:	1c43      	adds	r3, r0, #1
 800e9b0:	d102      	bne.n	800e9b8 <_fstat_r+0x1c>
 800e9b2:	682b      	ldr	r3, [r5, #0]
 800e9b4:	b103      	cbz	r3, 800e9b8 <_fstat_r+0x1c>
 800e9b6:	6023      	str	r3, [r4, #0]
 800e9b8:	bd38      	pop	{r3, r4, r5, pc}
 800e9ba:	bf00      	nop
 800e9bc:	20005640 	.word	0x20005640

0800e9c0 <_isatty_r>:
 800e9c0:	b538      	push	{r3, r4, r5, lr}
 800e9c2:	4d06      	ldr	r5, [pc, #24]	; (800e9dc <_isatty_r+0x1c>)
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	4604      	mov	r4, r0
 800e9c8:	4608      	mov	r0, r1
 800e9ca:	602b      	str	r3, [r5, #0]
 800e9cc:	f7f4 fdbf 	bl	800354e <_isatty>
 800e9d0:	1c43      	adds	r3, r0, #1
 800e9d2:	d102      	bne.n	800e9da <_isatty_r+0x1a>
 800e9d4:	682b      	ldr	r3, [r5, #0]
 800e9d6:	b103      	cbz	r3, 800e9da <_isatty_r+0x1a>
 800e9d8:	6023      	str	r3, [r4, #0]
 800e9da:	bd38      	pop	{r3, r4, r5, pc}
 800e9dc:	20005640 	.word	0x20005640

0800e9e0 <__ascii_mbtowc>:
 800e9e0:	b082      	sub	sp, #8
 800e9e2:	b901      	cbnz	r1, 800e9e6 <__ascii_mbtowc+0x6>
 800e9e4:	a901      	add	r1, sp, #4
 800e9e6:	b142      	cbz	r2, 800e9fa <__ascii_mbtowc+0x1a>
 800e9e8:	b14b      	cbz	r3, 800e9fe <__ascii_mbtowc+0x1e>
 800e9ea:	7813      	ldrb	r3, [r2, #0]
 800e9ec:	600b      	str	r3, [r1, #0]
 800e9ee:	7812      	ldrb	r2, [r2, #0]
 800e9f0:	1e10      	subs	r0, r2, #0
 800e9f2:	bf18      	it	ne
 800e9f4:	2001      	movne	r0, #1
 800e9f6:	b002      	add	sp, #8
 800e9f8:	4770      	bx	lr
 800e9fa:	4610      	mov	r0, r2
 800e9fc:	e7fb      	b.n	800e9f6 <__ascii_mbtowc+0x16>
 800e9fe:	f06f 0001 	mvn.w	r0, #1
 800ea02:	e7f8      	b.n	800e9f6 <__ascii_mbtowc+0x16>

0800ea04 <memmove>:
 800ea04:	4288      	cmp	r0, r1
 800ea06:	b510      	push	{r4, lr}
 800ea08:	eb01 0402 	add.w	r4, r1, r2
 800ea0c:	d902      	bls.n	800ea14 <memmove+0x10>
 800ea0e:	4284      	cmp	r4, r0
 800ea10:	4623      	mov	r3, r4
 800ea12:	d807      	bhi.n	800ea24 <memmove+0x20>
 800ea14:	1e43      	subs	r3, r0, #1
 800ea16:	42a1      	cmp	r1, r4
 800ea18:	d008      	beq.n	800ea2c <memmove+0x28>
 800ea1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ea1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ea22:	e7f8      	b.n	800ea16 <memmove+0x12>
 800ea24:	4402      	add	r2, r0
 800ea26:	4601      	mov	r1, r0
 800ea28:	428a      	cmp	r2, r1
 800ea2a:	d100      	bne.n	800ea2e <memmove+0x2a>
 800ea2c:	bd10      	pop	{r4, pc}
 800ea2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ea32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ea36:	e7f7      	b.n	800ea28 <memmove+0x24>

0800ea38 <_realloc_r>:
 800ea38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea3c:	4680      	mov	r8, r0
 800ea3e:	4614      	mov	r4, r2
 800ea40:	460e      	mov	r6, r1
 800ea42:	b921      	cbnz	r1, 800ea4e <_realloc_r+0x16>
 800ea44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea48:	4611      	mov	r1, r2
 800ea4a:	f7fd b8c3 	b.w	800bbd4 <_malloc_r>
 800ea4e:	b92a      	cbnz	r2, 800ea5c <_realloc_r+0x24>
 800ea50:	f7fd f854 	bl	800bafc <_free_r>
 800ea54:	4625      	mov	r5, r4
 800ea56:	4628      	mov	r0, r5
 800ea58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea5c:	f000 f828 	bl	800eab0 <_malloc_usable_size_r>
 800ea60:	4284      	cmp	r4, r0
 800ea62:	4607      	mov	r7, r0
 800ea64:	d802      	bhi.n	800ea6c <_realloc_r+0x34>
 800ea66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ea6a:	d812      	bhi.n	800ea92 <_realloc_r+0x5a>
 800ea6c:	4621      	mov	r1, r4
 800ea6e:	4640      	mov	r0, r8
 800ea70:	f7fd f8b0 	bl	800bbd4 <_malloc_r>
 800ea74:	4605      	mov	r5, r0
 800ea76:	2800      	cmp	r0, #0
 800ea78:	d0ed      	beq.n	800ea56 <_realloc_r+0x1e>
 800ea7a:	42bc      	cmp	r4, r7
 800ea7c:	4622      	mov	r2, r4
 800ea7e:	4631      	mov	r1, r6
 800ea80:	bf28      	it	cs
 800ea82:	463a      	movcs	r2, r7
 800ea84:	f7fd f824 	bl	800bad0 <memcpy>
 800ea88:	4631      	mov	r1, r6
 800ea8a:	4640      	mov	r0, r8
 800ea8c:	f7fd f836 	bl	800bafc <_free_r>
 800ea90:	e7e1      	b.n	800ea56 <_realloc_r+0x1e>
 800ea92:	4635      	mov	r5, r6
 800ea94:	e7df      	b.n	800ea56 <_realloc_r+0x1e>

0800ea96 <__ascii_wctomb>:
 800ea96:	b149      	cbz	r1, 800eaac <__ascii_wctomb+0x16>
 800ea98:	2aff      	cmp	r2, #255	; 0xff
 800ea9a:	bf85      	ittet	hi
 800ea9c:	238a      	movhi	r3, #138	; 0x8a
 800ea9e:	6003      	strhi	r3, [r0, #0]
 800eaa0:	700a      	strbls	r2, [r1, #0]
 800eaa2:	f04f 30ff 	movhi.w	r0, #4294967295
 800eaa6:	bf98      	it	ls
 800eaa8:	2001      	movls	r0, #1
 800eaaa:	4770      	bx	lr
 800eaac:	4608      	mov	r0, r1
 800eaae:	4770      	bx	lr

0800eab0 <_malloc_usable_size_r>:
 800eab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eab4:	1f18      	subs	r0, r3, #4
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	bfbc      	itt	lt
 800eaba:	580b      	ldrlt	r3, [r1, r0]
 800eabc:	18c0      	addlt	r0, r0, r3
 800eabe:	4770      	bx	lr

0800eac0 <_init>:
 800eac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eac2:	bf00      	nop
 800eac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eac6:	bc08      	pop	{r3}
 800eac8:	469e      	mov	lr, r3
 800eaca:	4770      	bx	lr

0800eacc <_fini>:
 800eacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eace:	bf00      	nop
 800ead0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ead2:	bc08      	pop	{r3}
 800ead4:	469e      	mov	lr, r3
 800ead6:	4770      	bx	lr


STM32_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e0f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  0800e288  0800e288  0001e288  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e7dc  0800e7dc  00020238  2**0
                  CONTENTS
  4 .ARM          00000008  0800e7dc  0800e7dc  0001e7dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e7e4  0800e7e4  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800e7e4  0800e7e4  0001e7e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800e7ec  0800e7ec  0001e7ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  0800e7f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020238  2**0
                  CONTENTS
 10 .bss          00005400  20000238  20000238  00020238  2**2
                  ALLOC
 11 ._user_heap_stack 00000c00  20005638  20005638  00020238  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026769  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b90  00000000  00000000  000469d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a70  00000000  00000000  0004b568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001908  00000000  00000000  0004cfd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000298fe  00000000  00000000  0004e8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020121  00000000  00000000  000781de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfeaf  00000000  00000000  000982ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001781ae  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008350  00000000  00000000  00178200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000238 	.word	0x20000238
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e270 	.word	0x0800e270

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000023c 	.word	0x2000023c
 80001cc:	0800e270 	.word	0x0800e270

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <IMU_Initialise>:
int16_t gyro_offset[3] = { 0 }; // gyro_offset value calibrated by Gyro_calibrate()

/*
 * INITIALISATION
 */
uint8_t* IMU_Initialise(ICM20948 *dev, I2C_HandleTypeDef *i2cHandle) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]

	char hex[2];
	uint8_t regData;

	dev->i2cHandle = i2cHandle;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	601a      	str	r2, [r3, #0]
	 buf[0] = REG_ADD_REG_BANK_SEL;  // bank select register
	 buf[1] = REG_VAL_REG_BANK_0;           // bank 0
	 ret = HAL_I2C_Master_Transmit(i2cHandle, IMU_ADDR, buf, I2C_MEMADD_SIZE_16BIT, 10);

	 */
	ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	217f      	movs	r1, #127	; 0x7f
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f000 f8af 	bl	80010c4 <IMU_WriteOneByte>
 8000f66:	4603      	mov	r3, r0
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b55      	ldr	r3, [pc, #340]	; (80010c0 <IMU_Initialise+0x174>)
 8000f6c:	701a      	strb	r2, [r3, #0]


	//check ID
	/*	  buf[0] = REG_WHO_AM_I;  //(Should return ID =  0xEA)
	 ret = HAL_I2C_Mem_Read(i2cHandle, IMU_ADDR, REG_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, buf, I2C_MEMADD_SIZE_8BIT, 10);  */
	ret = IMU_ReadOneByte(dev, REG_WHO_AM_I, &regData);
 8000f6e:	2100      	movs	r1, #0
 8000f70:	f107 030b 	add.w	r3, r7, #11
 8000f74:	461a      	mov	r2, r3
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f000 f8c0 	bl	80010fc <IMU_ReadOneByte>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	461a      	mov	r2, r3
 8000f80:	4b4f      	ldr	r3, [pc, #316]	; (80010c0 <IMU_Initialise+0x174>)
 8000f82:	701a      	strb	r2, [r3, #0]

	//return &buf[0];

	// Initialize
	// Bank 0 - Reset the device and then auto selects the best available clock source
	ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 8000f84:	2200      	movs	r2, #0
 8000f86:	217f      	movs	r1, #127	; 0x7f
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f000 f89b 	bl	80010c4 <IMU_WriteOneByte>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	461a      	mov	r2, r3
 8000f92:	4b4b      	ldr	r3, [pc, #300]	; (80010c0 <IMU_Initialise+0x174>)
 8000f94:	701a      	strb	r2, [r3, #0]

	ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_1, REG_VAL_ALL_RGE_RESET); // reset device - check hearder file value should be 0xF1
 8000f96:	22f1      	movs	r2, #241	; 0xf1
 8000f98:	2106      	movs	r1, #6
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f000 f892 	bl	80010c4 <IMU_WriteOneByte>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	4b46      	ldr	r3, [pc, #280]	; (80010c0 <IMU_Initialise+0x174>)
 8000fa6:	701a      	strb	r2, [r3, #0]

	osDelay(10);
 8000fa8:	200a      	movs	r0, #10
 8000faa:	f007 f9b7 	bl	800831c <osDelay>
	ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_1, REG_VAL_RUN_MODE); // auto selects the best available clock source for device
 8000fae:	2201      	movs	r2, #1
 8000fb0:	2106      	movs	r1, #6
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f000 f886 	bl	80010c4 <IMU_WriteOneByte>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4b40      	ldr	r3, [pc, #256]	; (80010c0 <IMU_Initialise+0x174>)
 8000fbe:	701a      	strb	r2, [r3, #0]

	// Turn off and on Accelator and Gyro - page 28
	osDelay(10);
 8000fc0:	200a      	movs	r0, #10
 8000fc2:	f007 f9ab 	bl	800831c <osDelay>
	ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_2, REG_VAL_ACCEL_GYROLL_OFF); // OFF
 8000fc6:	223f      	movs	r2, #63	; 0x3f
 8000fc8:	2107      	movs	r1, #7
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f000 f87a 	bl	80010c4 <IMU_WriteOneByte>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4b3a      	ldr	r3, [pc, #232]	; (80010c0 <IMU_Initialise+0x174>)
 8000fd6:	701a      	strb	r2, [r3, #0]

	osDelay(10);
 8000fd8:	200a      	movs	r0, #10
 8000fda:	f007 f99f 	bl	800831c <osDelay>
	ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_2, REG_VAL_ACCEL_GYROLL_ON); // ON
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2107      	movs	r1, #7
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 f86e 	bl	80010c4 <IMU_WriteOneByte>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	461a      	mov	r2, r3
 8000fec:	4b34      	ldr	r3, [pc, #208]	; (80010c0 <IMU_Initialise+0x174>)
 8000fee:	701a      	strb	r2, [r3, #0]

	ret = IMU_WriteOneByte(dev, REG_ADD_INT_ENABLE_1, REG_VAL_INT_ENABLED); // Turn on inteerup on pin INT1
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	2110      	movs	r1, #16
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f000 f865 	bl	80010c4 <IMU_WriteOneByte>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b30      	ldr	r3, [pc, #192]	; (80010c0 <IMU_Initialise+0x174>)
 8001000:	701a      	strb	r2, [r3, #0]

	uint8_t tmp = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	72bb      	strb	r3, [r7, #10]
	IMU_ReadOneByte(dev, REG_ADD_INT_PIN_CFG, &tmp);
 8001006:	f107 030a 	add.w	r3, r7, #10
 800100a:	461a      	mov	r2, r3
 800100c:	210f      	movs	r1, #15
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 f874 	bl	80010fc <IMU_ReadOneByte>
	IMU_WriteOneByte(dev, REG_ADD_INT_PIN_CFG, tmp | 0x02);
 8001014:	7abb      	ldrb	r3, [r7, #10]
 8001016:	f043 0302 	orr.w	r3, r3, #2
 800101a:	b2db      	uxtb	r3, r3
 800101c:	461a      	mov	r2, r3
 800101e:	210f      	movs	r1, #15
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f000 f84f 	bl	80010c4 <IMU_WriteOneByte>

	// Bank 2 - Gyro and Acce and start running
	/* user bank 2 register */
	ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_2);
 8001026:	2220      	movs	r2, #32
 8001028:	217f      	movs	r1, #127	; 0x7f
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f000 f84a 	bl	80010c4 <IMU_WriteOneByte>
 8001030:	4603      	mov	r3, r0
 8001032:	461a      	mov	r2, r3
 8001034:	4b22      	ldr	r3, [pc, #136]	; (80010c0 <IMU_Initialise+0x174>)
 8001036:	701a      	strb	r2, [r3, #0]

	ret = IMU_WriteOneByte(dev, REG_ADD_GYRO_SMPLRT_DIV, 0x07); // pg 59  Gyro sample rate divider Output data rate = 1.11K/7 = 157 Hz
 8001038:	2207      	movs	r2, #7
 800103a:	2100      	movs	r1, #0
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f000 f841 	bl	80010c4 <IMU_WriteOneByte>
 8001042:	4603      	mov	r3, r0
 8001044:	461a      	mov	r2, r3
 8001046:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <IMU_Initialise+0x174>)
 8001048:	701a      	strb	r2, [r3, #0]

	ret = IMU_WriteOneByte(dev, REG_ADD_GYRO_CONFIG_1,
 800104a:	2233      	movs	r2, #51	; 0x33
 800104c:	2101      	movs	r1, #1
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f000 f838 	bl	80010c4 <IMU_WriteOneByte>
 8001054:	4603      	mov	r3, r0
 8001056:	461a      	mov	r2, r3
 8001058:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <IMU_Initialise+0x174>)
 800105a:	701a      	strb	r2, [r3, #0]
			REG_VAL_BIT_GYRO_DLPCFG_6 | REG_VAL_BIT_GYRO_FS_500DPS
					| REG_VAL_BIT_GYRO_DLPF); // enable low pass filter and set Gyro FS


	ret = IMU_WriteOneByte(dev, REG_ADD_ACCEL_SMPLRT_DIV_2, 0x07); //  pg 63 Acce sample rate divider: ODR = 1.125KHz/7 = 161
 800105c:	2207      	movs	r2, #7
 800105e:	2111      	movs	r1, #17
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f000 f82f 	bl	80010c4 <IMU_WriteOneByte>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <IMU_Initialise+0x174>)
 800106c:	701a      	strb	r2, [r3, #0]
	ret = IMU_WriteOneByte(dev, REG_ADD_ACCEL_SMPLRT_DIV_1, 0x00); // upper 3 bit of sample rate = 0
 800106e:	2200      	movs	r2, #0
 8001070:	2110      	movs	r1, #16
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 f826 	bl	80010c4 <IMU_WriteOneByte>
 8001078:	4603      	mov	r3, r0
 800107a:	461a      	mov	r2, r3
 800107c:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <IMU_Initialise+0x174>)
 800107e:	701a      	strb	r2, [r3, #0]

	// enable LPF and set accel full scale to +/-2G, sensitivity scale factor = 16384 LSB/g
	ret = IMU_WriteOneByte(dev, REG_ADD_ACCEL_CONFIG,
 8001080:	2231      	movs	r2, #49	; 0x31
 8001082:	2114      	movs	r1, #20
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 f81d 	bl	80010c4 <IMU_WriteOneByte>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <IMU_Initialise+0x174>)
 8001090:	701a      	strb	r2, [r3, #0]
			REG_VAL_BIT_ACCEL_DLPCFG_6 | REG_VAL_BIT_ACCEL_FS_2g
					| REG_VAL_BIT_ACCEL_DLPF);

	IMU_WriteOneByte(dev, REG_ADD_TEMP_CONFIG, REG_VAL_TEMP_CONFIG); // Temp configuration pg 67
 8001092:	2200      	movs	r2, #0
 8001094:	2153      	movs	r1, #83	; 0x53
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f000 f814 	bl	80010c4 <IMU_WriteOneByte>

	// back to bank 0
	ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 800109c:	2200      	movs	r2, #0
 800109e:	217f      	movs	r1, #127	; 0x7f
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 f80f 	bl	80010c4 <IMU_WriteOneByte>
 80010a6:	4603      	mov	r3, r0
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <IMU_Initialise+0x174>)
 80010ac:	701a      	strb	r2, [r3, #0]

	osDelay(100);
 80010ae:	2064      	movs	r0, #100	; 0x64
 80010b0:	f007 f934 	bl	800831c <osDelay>
	//Gyro_calibrate(dev);  // calibrate the offset of the gyroscope

	// everthing OK
	//strcpy((char*)buf, "Initialize OK\r\n");
	//return &buf;
	return 0; // 0 means 0 error
 80010b4:	2300      	movs	r3, #0

}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000254 	.word	0x20000254

080010c4 <IMU_WriteOneByte>:

HAL_StatusTypeDef IMU_WriteOneByte(ICM20948 *dev, uint8_t reg, uint8_t data) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af04      	add	r7, sp, #16
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	70fb      	strb	r3, [r7, #3]
 80010d0:	4613      	mov	r3, r2
 80010d2:	70bb      	strb	r3, [r7, #2]

	return HAL_I2C_Mem_Write(dev->i2cHandle, IMU_ADDR, reg, 1, &data, 1, 100);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6818      	ldr	r0, [r3, #0]
 80010d8:	23d0      	movs	r3, #208	; 0xd0
 80010da:	b299      	uxth	r1, r3
 80010dc:	78fb      	ldrb	r3, [r7, #3]
 80010de:	b29a      	uxth	r2, r3
 80010e0:	2364      	movs	r3, #100	; 0x64
 80010e2:	9302      	str	r3, [sp, #8]
 80010e4:	2301      	movs	r3, #1
 80010e6:	9301      	str	r3, [sp, #4]
 80010e8:	1cbb      	adds	r3, r7, #2
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	2301      	movs	r3, #1
 80010ee:	f002 ffaf 	bl	8004050 <HAL_I2C_Mem_Write>
 80010f2:	4603      	mov	r3, r0

}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <IMU_ReadOneByte>:

HAL_StatusTypeDef IMU_ReadOneByte(ICM20948 *dev, uint8_t reg, uint8_t *data) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af04      	add	r7, sp, #16
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	460b      	mov	r3, r1
 8001106:	607a      	str	r2, [r7, #4]
 8001108:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read(dev->i2cHandle, IMU_ADDR, reg, 1, data, 1, 100);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	6818      	ldr	r0, [r3, #0]
 800110e:	23d0      	movs	r3, #208	; 0xd0
 8001110:	b299      	uxth	r1, r3
 8001112:	7afb      	ldrb	r3, [r7, #11]
 8001114:	b29a      	uxth	r2, r3
 8001116:	2364      	movs	r3, #100	; 0x64
 8001118:	9302      	str	r3, [sp, #8]
 800111a:	2301      	movs	r3, #1
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2301      	movs	r3, #1
 8001124:	f003 f88e 	bl	8004244 <HAL_I2C_Mem_Read>
 8001128:	4603      	mov	r3, r0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <IMU_AccelRead>:
	ret = IMU_ReadOneByte(dev, REG_ADD_TEMP_OUT_H, &u8Buf[1]);
	tempRaw = (u8Buf[1] << 8) | u8Buf[0];
	dev->temp_C = (tempRaw) / 333.81 + 21; // assuming no further offset apart from 21 dec C
}

HAL_StatusTypeDef IMU_AccelRead(ICM20948 *dev) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
	uint8_t u8Buf[2] = { 0 }; // reset to zero
 800113c:	2300      	movs	r3, #0
 800113e:	83bb      	strh	r3, [r7, #28]
	int16_t accRaw[3] = { 0 };  // reset to zero
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	809a      	strh	r2, [r3, #4]

	ret = IMU_ReadOneByte(dev, REG_ADD_ACCEL_XOUT_L, &u8Buf[0]);
 800114a:	f107 031c 	add.w	r3, r7, #28
 800114e:	461a      	mov	r2, r3
 8001150:	212e      	movs	r1, #46	; 0x2e
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff ffd2 	bl	80010fc <IMU_ReadOneByte>
 8001158:	4603      	mov	r3, r0
 800115a:	461a      	mov	r2, r3
 800115c:	4b5e      	ldr	r3, [pc, #376]	; (80012d8 <IMU_AccelRead+0x1a4>)
 800115e:	701a      	strb	r2, [r3, #0]
	ret = IMU_ReadOneByte(dev, REG_ADD_ACCEL_XOUT_H, &u8Buf[1]);
 8001160:	f107 031c 	add.w	r3, r7, #28
 8001164:	3301      	adds	r3, #1
 8001166:	461a      	mov	r2, r3
 8001168:	212d      	movs	r1, #45	; 0x2d
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff ffc6 	bl	80010fc <IMU_ReadOneByte>
 8001170:	4603      	mov	r3, r0
 8001172:	461a      	mov	r2, r3
 8001174:	4b58      	ldr	r3, [pc, #352]	; (80012d8 <IMU_AccelRead+0x1a4>)
 8001176:	701a      	strb	r2, [r3, #0]
	accRaw[0] = (u8Buf[1] << 8) | u8Buf[0];
 8001178:	7f7b      	ldrb	r3, [r7, #29]
 800117a:	021b      	lsls	r3, r3, #8
 800117c:	b21a      	sxth	r2, r3
 800117e:	7f3b      	ldrb	r3, [r7, #28]
 8001180:	b21b      	sxth	r3, r3
 8001182:	4313      	orrs	r3, r2
 8001184:	b21b      	sxth	r3, r3
 8001186:	82bb      	strh	r3, [r7, #20]

	ret = IMU_ReadOneByte(dev, REG_ADD_ACCEL_YOUT_L, &u8Buf[0]);
 8001188:	f107 031c 	add.w	r3, r7, #28
 800118c:	461a      	mov	r2, r3
 800118e:	2130      	movs	r1, #48	; 0x30
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff ffb3 	bl	80010fc <IMU_ReadOneByte>
 8001196:	4603      	mov	r3, r0
 8001198:	461a      	mov	r2, r3
 800119a:	4b4f      	ldr	r3, [pc, #316]	; (80012d8 <IMU_AccelRead+0x1a4>)
 800119c:	701a      	strb	r2, [r3, #0]
	ret = IMU_ReadOneByte(dev, REG_ADD_ACCEL_YOUT_H, &u8Buf[1]);
 800119e:	f107 031c 	add.w	r3, r7, #28
 80011a2:	3301      	adds	r3, #1
 80011a4:	461a      	mov	r2, r3
 80011a6:	212f      	movs	r1, #47	; 0x2f
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff ffa7 	bl	80010fc <IMU_ReadOneByte>
 80011ae:	4603      	mov	r3, r0
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b49      	ldr	r3, [pc, #292]	; (80012d8 <IMU_AccelRead+0x1a4>)
 80011b4:	701a      	strb	r2, [r3, #0]
	accRaw[1] = (u8Buf[1] << 8) | u8Buf[0];
 80011b6:	7f7b      	ldrb	r3, [r7, #29]
 80011b8:	021b      	lsls	r3, r3, #8
 80011ba:	b21a      	sxth	r2, r3
 80011bc:	7f3b      	ldrb	r3, [r7, #28]
 80011be:	b21b      	sxth	r3, r3
 80011c0:	4313      	orrs	r3, r2
 80011c2:	b21b      	sxth	r3, r3
 80011c4:	82fb      	strh	r3, [r7, #22]

	ret = IMU_ReadOneByte(dev, REG_ADD_ACCEL_ZOUT_L, &u8Buf[0]);
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	461a      	mov	r2, r3
 80011cc:	2132      	movs	r1, #50	; 0x32
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff ff94 	bl	80010fc <IMU_ReadOneByte>
 80011d4:	4603      	mov	r3, r0
 80011d6:	461a      	mov	r2, r3
 80011d8:	4b3f      	ldr	r3, [pc, #252]	; (80012d8 <IMU_AccelRead+0x1a4>)
 80011da:	701a      	strb	r2, [r3, #0]
	ret = IMU_ReadOneByte(dev, REG_ADD_ACCEL_ZOUT_H, &u8Buf[1]);
 80011dc:	f107 031c 	add.w	r3, r7, #28
 80011e0:	3301      	adds	r3, #1
 80011e2:	461a      	mov	r2, r3
 80011e4:	2131      	movs	r1, #49	; 0x31
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ff88 	bl	80010fc <IMU_ReadOneByte>
 80011ec:	4603      	mov	r3, r0
 80011ee:	461a      	mov	r2, r3
 80011f0:	4b39      	ldr	r3, [pc, #228]	; (80012d8 <IMU_AccelRead+0x1a4>)
 80011f2:	701a      	strb	r2, [r3, #0]
	accRaw[2] = (u8Buf[1] << 8) | u8Buf[0];
 80011f4:	7f7b      	ldrb	r3, [r7, #29]
 80011f6:	021b      	lsls	r3, r3, #8
 80011f8:	b21a      	sxth	r2, r3
 80011fa:	7f3b      	ldrb	r3, [r7, #28]
 80011fc:	b21b      	sxth	r3, r3
 80011fe:	4313      	orrs	r3, r2
 8001200:	b21b      	sxth	r3, r3
 8001202:	833b      	strh	r3, [r7, #24]

	/* Convert to SIGNED integers (two's complement) */
	int32_t accRawSigned[3];

	if ((accRaw[0] & 0x00080000) == 0x00080000)
 8001204:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001208:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d007      	beq.n	8001220 <IMU_AccelRead+0xec>
		accRawSigned[0] = accRaw[0] | 0xFFF00000;
 8001210:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001214:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 8001218:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	e002      	b.n	8001226 <IMU_AccelRead+0xf2>
	else
		accRawSigned[0] = accRaw[0];
 8001220:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001224:	60bb      	str	r3, [r7, #8]

	if ((accRaw[1] & 0x00080000) == 0x00080000)
 8001226:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800122a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d007      	beq.n	8001242 <IMU_AccelRead+0x10e>
		accRawSigned[1] = accRaw[1] | 0xFFF00000;
 8001232:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001236:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 800123a:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	e002      	b.n	8001248 <IMU_AccelRead+0x114>
	else
		accRawSigned[1] = accRaw[1];
 8001242:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001246:	60fb      	str	r3, [r7, #12]

	if ((accRaw[2] & 0x00080000) == 0x000080000)
 8001248:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800124c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d007      	beq.n	8001264 <IMU_AccelRead+0x130>
		accRawSigned[2] = accRaw[2] | 0xFFF00000;
 8001254:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001258:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 800125c:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 8001260:	613b      	str	r3, [r7, #16]
 8001262:	e002      	b.n	800126a <IMU_AccelRead+0x136>
	else
		accRawSigned[2] = accRaw[2];
 8001264:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001268:	613b      	str	r3, [r7, #16]

	// accel full scale set to +/-2G, sensitivity scale factor = 16384 LSB/g
	dev->acc[0] = 0.00006103515625f * accRawSigned[0] * 9.81f;
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	ee07 3a90 	vmov	s15, r3
 8001270:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001274:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80012dc <IMU_AccelRead+0x1a8>
 8001278:	ee67 7a87 	vmul.f32	s15, s15, s14
 800127c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80012e0 <IMU_AccelRead+0x1ac>
 8001280:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	edc3 7a01 	vstr	s15, [r3, #4]
	dev->acc[1] = 0.00006103515625f * accRawSigned[1] * 9.81f;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	ee07 3a90 	vmov	s15, r3
 8001290:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001294:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80012dc <IMU_AccelRead+0x1a8>
 8001298:	ee67 7a87 	vmul.f32	s15, s15, s14
 800129c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80012e0 <IMU_AccelRead+0x1ac>
 80012a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	edc3 7a02 	vstr	s15, [r3, #8]
	dev->acc[2] = 0.00006103515625f * accRawSigned[2] * 9.81f; // * 9.81f
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	ee07 3a90 	vmov	s15, r3
 80012b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80012dc <IMU_AccelRead+0x1a8>
 80012b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012bc:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80012e0 <IMU_AccelRead+0x1ac>
 80012c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	edc3 7a03 	vstr	s15, [r3, #12]

	return ret;
 80012ca:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <IMU_AccelRead+0x1a4>)
 80012cc:	781b      	ldrb	r3, [r3, #0]

}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3720      	adds	r7, #32
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000254 	.word	0x20000254
 80012dc:	38800000 	.word	0x38800000
 80012e0:	411cf5c3 	.word	0x411cf5c3

080012e4 <IMU_GyroRead>:
	gyro_offset[2] = gyroRaw[2] >> 5;

	return ret;
}

HAL_StatusTypeDef IMU_GyroRead(ICM20948 *dev) { // return the change in value instead of current value
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08a      	sub	sp, #40	; 0x28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	uint8_t u8Buf[2] = { 0 }; // reset to zero
 80012ec:	2300      	movs	r3, #0
 80012ee:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t gyroRaw[3] = { 0 };  // reset to zero
 80012f0:	f107 031c 	add.w	r3, r7, #28
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	809a      	strh	r2, [r3, #4]
	int16_t gyroDiff[3];
	int16_t temp;
	static int16_t gyroOld[3] = { 0, 0, 0 };  // previous value

	ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_YOUT_L, &u8Buf[0]);
 80012fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fe:	461a      	mov	r2, r3
 8001300:	2136      	movs	r1, #54	; 0x36
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff fefa 	bl	80010fc <IMU_ReadOneByte>
 8001308:	4603      	mov	r3, r0
 800130a:	461a      	mov	r2, r3
 800130c:	4b7c      	ldr	r3, [pc, #496]	; (8001500 <IMU_GyroRead+0x21c>)
 800130e:	701a      	strb	r2, [r3, #0]
	ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_YOUT_H, &u8Buf[1]);
 8001310:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001314:	3301      	adds	r3, #1
 8001316:	461a      	mov	r2, r3
 8001318:	2135      	movs	r1, #53	; 0x35
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff feee 	bl	80010fc <IMU_ReadOneByte>
 8001320:	4603      	mov	r3, r0
 8001322:	461a      	mov	r2, r3
 8001324:	4b76      	ldr	r3, [pc, #472]	; (8001500 <IMU_GyroRead+0x21c>)
 8001326:	701a      	strb	r2, [r3, #0]
	gyroRaw[1] = (u8Buf[1] << 8) | u8Buf[0] - gyro_offset[1];
 8001328:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800132c:	021b      	lsls	r3, r3, #8
 800132e:	b21a      	sxth	r2, r3
 8001330:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001334:	b299      	uxth	r1, r3
 8001336:	4b73      	ldr	r3, [pc, #460]	; (8001504 <IMU_GyroRead+0x220>)
 8001338:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800133c:	b29b      	uxth	r3, r3
 800133e:	1acb      	subs	r3, r1, r3
 8001340:	b29b      	uxth	r3, r3
 8001342:	b21b      	sxth	r3, r3
 8001344:	4313      	orrs	r3, r2
 8001346:	b21b      	sxth	r3, r3
 8001348:	83fb      	strh	r3, [r7, #30]
	gyroDiff[1] = gyroRaw[1] - gyroOld[1];  // change in value
 800134a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800134e:	b29a      	uxth	r2, r3
 8001350:	4b6d      	ldr	r3, [pc, #436]	; (8001508 <IMU_GyroRead+0x224>)
 8001352:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001356:	b29b      	uxth	r3, r3
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	b29b      	uxth	r3, r3
 800135c:	b21b      	sxth	r3, r3
 800135e:	82fb      	strh	r3, [r7, #22]
	gyroOld[1] = gyroRaw[1];
 8001360:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001364:	4b68      	ldr	r3, [pc, #416]	; (8001508 <IMU_GyroRead+0x224>)
 8001366:	805a      	strh	r2, [r3, #2]

	ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_ZOUT_L, &u8Buf[0]);
 8001368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136c:	461a      	mov	r2, r3
 800136e:	2138      	movs	r1, #56	; 0x38
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff fec3 	bl	80010fc <IMU_ReadOneByte>
 8001376:	4603      	mov	r3, r0
 8001378:	461a      	mov	r2, r3
 800137a:	4b61      	ldr	r3, [pc, #388]	; (8001500 <IMU_GyroRead+0x21c>)
 800137c:	701a      	strb	r2, [r3, #0]
	ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_ZOUT_H, &u8Buf[1]);
 800137e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001382:	3301      	adds	r3, #1
 8001384:	461a      	mov	r2, r3
 8001386:	2137      	movs	r1, #55	; 0x37
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff feb7 	bl	80010fc <IMU_ReadOneByte>
 800138e:	4603      	mov	r3, r0
 8001390:	461a      	mov	r2, r3
 8001392:	4b5b      	ldr	r3, [pc, #364]	; (8001500 <IMU_GyroRead+0x21c>)
 8001394:	701a      	strb	r2, [r3, #0]
	gyroRaw[2] = (u8Buf[1] << 8) | u8Buf[0] - gyro_offset[2];
 8001396:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800139a:	021b      	lsls	r3, r3, #8
 800139c:	b21a      	sxth	r2, r3
 800139e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80013a2:	b299      	uxth	r1, r3
 80013a4:	4b57      	ldr	r3, [pc, #348]	; (8001504 <IMU_GyroRead+0x220>)
 80013a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	1acb      	subs	r3, r1, r3
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	4313      	orrs	r3, r2
 80013b4:	b21b      	sxth	r3, r3
 80013b6:	843b      	strh	r3, [r7, #32]
	gyroDiff[2] = gyroRaw[2] - gyroOld[2];  // change in value
 80013b8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80013bc:	b29a      	uxth	r2, r3
 80013be:	4b52      	ldr	r3, [pc, #328]	; (8001508 <IMU_GyroRead+0x224>)
 80013c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	b21b      	sxth	r3, r3
 80013cc:	833b      	strh	r3, [r7, #24]
	gyroOld[2] = gyroRaw[2];
 80013ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80013d2:	4b4d      	ldr	r3, [pc, #308]	; (8001508 <IMU_GyroRead+0x224>)
 80013d4:	809a      	strh	r2, [r3, #4]

	ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_XOUT_L, &u8Buf[0]);
 80013d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013da:	461a      	mov	r2, r3
 80013dc:	2134      	movs	r1, #52	; 0x34
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff fe8c 	bl	80010fc <IMU_ReadOneByte>
 80013e4:	4603      	mov	r3, r0
 80013e6:	461a      	mov	r2, r3
 80013e8:	4b45      	ldr	r3, [pc, #276]	; (8001500 <IMU_GyroRead+0x21c>)
 80013ea:	701a      	strb	r2, [r3, #0]
	ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_XOUT_H, &u8Buf[1]);
 80013ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f0:	3301      	adds	r3, #1
 80013f2:	461a      	mov	r2, r3
 80013f4:	2133      	movs	r1, #51	; 0x33
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff fe80 	bl	80010fc <IMU_ReadOneByte>
 80013fc:	4603      	mov	r3, r0
 80013fe:	461a      	mov	r2, r3
 8001400:	4b3f      	ldr	r3, [pc, #252]	; (8001500 <IMU_GyroRead+0x21c>)
 8001402:	701a      	strb	r2, [r3, #0]
	temp = (u8Buf[1] << 8) | u8Buf[0]; // for debugging
 8001404:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001408:	021b      	lsls	r3, r3, #8
 800140a:	b21a      	sxth	r2, r3
 800140c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001410:	b21b      	sxth	r3, r3
 8001412:	4313      	orrs	r3, r2
 8001414:	84fb      	strh	r3, [r7, #38]	; 0x26
	gyroRaw[0] = (u8Buf[1] << 8) | u8Buf[0] - gyro_offset[0];
 8001416:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800141a:	021b      	lsls	r3, r3, #8
 800141c:	b21a      	sxth	r2, r3
 800141e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001422:	b299      	uxth	r1, r3
 8001424:	4b37      	ldr	r3, [pc, #220]	; (8001504 <IMU_GyroRead+0x220>)
 8001426:	f9b3 3000 	ldrsh.w	r3, [r3]
 800142a:	b29b      	uxth	r3, r3
 800142c:	1acb      	subs	r3, r1, r3
 800142e:	b29b      	uxth	r3, r3
 8001430:	b21b      	sxth	r3, r3
 8001432:	4313      	orrs	r3, r2
 8001434:	b21b      	sxth	r3, r3
 8001436:	83bb      	strh	r3, [r7, #28]
	gyroDiff[0] = gyroRaw[0] - gyroOld[0];  // change in value
 8001438:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800143c:	b29a      	uxth	r2, r3
 800143e:	4b32      	ldr	r3, [pc, #200]	; (8001508 <IMU_GyroRead+0x224>)
 8001440:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001444:	b29b      	uxth	r3, r3
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	b29b      	uxth	r3, r3
 800144a:	b21b      	sxth	r3, r3
 800144c:	82bb      	strh	r3, [r7, #20]
	gyroOld[0] = gyroRaw[0];
 800144e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001452:	4b2d      	ldr	r3, [pc, #180]	; (8001508 <IMU_GyroRead+0x224>)
 8001454:	801a      	strh	r2, [r3, #0]
	int32_t gyroRawSigned[3];

	//if ( (gyroDiff[0] & 0x00008000) == 0x00008000 )  //32 bit - no need to check
	//	gyroRawSigned[0] = gyroRaw[0] | 0xFFFF0000;
	//else
	gyroRawSigned[0] = gyroRaw[0];
 8001456:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800145a:	60bb      	str	r3, [r7, #8]

	//if ( (gyroDiff[1] & 0x00008000) == 0x00008000 )
	//	gyroRawSigned[1] = gyroRaw[1] | 0xFFFF0000;
	//else
	gyroRawSigned[1] = gyroRaw[1];
 800145c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001460:	60fb      	str	r3, [r7, #12]

	//if ( (gyroDiff[2] & 0x00008000) == 0x800008000 )
	//	gyroRawSigned[2] = gyroRaw[2] | 0xFFFF0000;
	//else
	gyroRawSigned[2] = gyroRaw[2];
 8001462:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001466:	613b      	str	r3, [r7, #16]

	// gyro full scale set to +/-500 dps, sensitivity scale factor = 65.5 LSB/dps
	// degree per second = value/65.5
	dev->gyro[0] = 0.0152671755725191f * gyroRawSigned[0];
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	ee07 3a90 	vmov	s15, r3
 800146e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001472:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800150c <IMU_GyroRead+0x228>
 8001476:	ee67 7a87 	vmul.f32	s15, s15, s14
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	edc3 7a04 	vstr	s15, [r3, #16]
	dev->gyro[1] = 0.0152671755725191f * gyroRawSigned[1];
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	ee07 3a90 	vmov	s15, r3
 8001486:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800148a:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800150c <IMU_GyroRead+0x228>
 800148e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	edc3 7a05 	vstr	s15, [r3, #20]
	dev->gyro[2] = 0.0152671755725191f * gyroRawSigned[2];
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	ee07 3a90 	vmov	s15, r3
 800149e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014a2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800150c <IMU_GyroRead+0x228>
 80014a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	edc3 7a06 	vstr	s15, [r3, #24]

	dev->gyro[0] -= dev->gyro_bias[0];
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	ed93 7a04 	vldr	s14, [r3, #16]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80014bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	edc3 7a04 	vstr	s15, [r3, #16]
	dev->gyro[1] -= dev->gyro_bias[1];
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	ed93 7a05 	vldr	s14, [r3, #20]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80014d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	edc3 7a05 	vstr	s15, [r3, #20]
	dev->gyro[2] -= dev->gyro_bias[2];
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	ed93 7a06 	vldr	s14, [r3, #24]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80014e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	edc3 7a06 	vstr	s15, [r3, #24]
	return ret;
 80014f2:	4b03      	ldr	r3, [pc, #12]	; (8001500 <IMU_GyroRead+0x21c>)
 80014f4:	781b      	ldrb	r3, [r3, #0]

}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3728      	adds	r7, #40	; 0x28
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000254 	.word	0x20000254
 8001504:	20000258 	.word	0x20000258
 8001508:	20000260 	.word	0x20000260
 800150c:	3c7a232d 	.word	0x3c7a232d

08001510 <HAL_UART_RxCpltCallback>:

AppMotion::MotionController controller(&ctrlCtx);
AppParser::Processor processor(&procCtx, &ctrlCtx);
AppParser::Listener listener(&procCtx);

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	//__HAL_UART_CLEAR_OREFLAG(&huart3);
	if (huart == &huart3) {
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a05      	ldr	r2, [pc, #20]	; (8001530 <HAL_UART_RxCpltCallback+0x20>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d102      	bne.n	8001526 <HAL_UART_RxCpltCallback+0x16>
		listener.invoke();
 8001520:	4804      	ldr	r0, [pc, #16]	; (8001534 <HAL_UART_RxCpltCallback+0x24>)
 8001522:	f000 fab1 	bl	8001a88 <_ZN9AppParser8Listener6invokeEv>
	}
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	2000046c 	.word	0x2000046c
 8001534:	20000280 	.word	0x20000280

08001538 <initializeCPPconstructs>:

/*
 * This function initializes the C++ stuff, called from within main() context.
 */
void initializeCPPconstructs(void) {
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
	//procTaskHandle = osThreadNew(processorTask, NULL, &procTask_attr);
	//controller.start();
	processor.start();
 800153c:	4804      	ldr	r0, [pc, #16]	; (8001550 <initializeCPPconstructs+0x18>)
 800153e:	f000 faef 	bl	8001b20 <_ZN9AppParser9Processor5startEv>
	osThreadNew((osThreadFunc_t)&controller.motionTask,
 8001542:	4a04      	ldr	r2, [pc, #16]	; (8001554 <initializeCPPconstructs+0x1c>)
 8001544:	4904      	ldr	r1, [pc, #16]	; (8001558 <initializeCPPconstructs+0x20>)
 8001546:	4805      	ldr	r0, [pc, #20]	; (800155c <initializeCPPconstructs+0x24>)
 8001548:	f006 fe34 	bl	80081b4 <osThreadNew>
	    		&ctrlCtx,
	                                    &(ctrlCtx.attr));
	//htim1.Instance->CCR1 = 153;
}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000278 	.word	0x20000278
 8001554:	20000030 	.word	0x20000030
 8001558:	2000002c 	.word	0x2000002c
 800155c:	080018d9 	.word	0x080018d9

08001560 <sensorTask>:
	} while (1);
	*targetAngle = 0;


}
void sensorTask(void *pv) {
 8001560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001564:	b0b8      	sub	sp, #224	; 0xe0
 8001566:	af0e      	add	r7, sp, #56	; 0x38
 8001568:	61f8      	str	r0, [r7, #28]

	IMU_Initialise(&imu, &hi2c1);
 800156a:	498d      	ldr	r1, [pc, #564]	; (80017a0 <sensorTask+0x240>)
 800156c:	488d      	ldr	r0, [pc, #564]	; (80017a4 <sensorTask+0x244>)
 800156e:	f7ff fced 	bl	8000f4c <IMU_Initialise>

	osDelay(50);
 8001572:	2032      	movs	r0, #50	; 0x32
 8001574:	f006 fed2 	bl	800831c <osDelay>
//	Gyro_calibrate(&imu);
	//Mag_init(&imu);

	uint8_t readGyroZData[2];
	printf("Scanning I2C bus:\r\n");
 8001578:	488b      	ldr	r0, [pc, #556]	; (80017a8 <sensorTask+0x248>)
 800157a:	f00a fc7d 	bl	800be78 <puts>
	HAL_StatusTypeDef result;
	uint8_t i;
	for (i = 1; i < 128; i++) {
 800157e:	2301      	movs	r3, #1
 8001580:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8001584:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8001588:	2b00      	cmp	r3, #0
 800158a:	db23      	blt.n	80015d4 <sensorTask+0x74>
		 * &hi2c1 is the handle
		 * (uint16_t)(i<<1) is the i2c address left aligned
		 * retries 2
		 * timeout 2
		 */
		result = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (i << 1), 2, 2);
 800158c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8001590:	b29b      	uxth	r3, r3
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	b299      	uxth	r1, r3
 8001596:	2302      	movs	r3, #2
 8001598:	2202      	movs	r2, #2
 800159a:	4881      	ldr	r0, [pc, #516]	; (80017a0 <sensorTask+0x240>)
 800159c:	f003 f878 	bl	8004690 <HAL_I2C_IsDeviceReady>
 80015a0:	4603      	mov	r3, r0
 80015a2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		if (result != HAL_OK) // HAL_ERROR or HAL_BUSY or HAL_TIMEOUT
 80015a6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d002      	beq.n	80015b4 <sensorTask+0x54>
				{
			printf("."); // No ACK received at that address
 80015ae:	202e      	movs	r0, #46	; 0x2e
 80015b0:	f00a fbde 	bl	800bd70 <putchar>
		}
		if (result == HAL_OK) {
 80015b4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d105      	bne.n	80015c8 <sensorTask+0x68>
			printf("0x%X", i); // Received an ACK at that address
 80015bc:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80015c0:	4619      	mov	r1, r3
 80015c2:	487a      	ldr	r0, [pc, #488]	; (80017ac <sensorTask+0x24c>)
 80015c4:	f00a fbbc 	bl	800bd40 <iprintf>
	for (i = 1; i < 128; i++) {
 80015c8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80015cc:	3301      	adds	r3, #1
 80015ce:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80015d2:	e7d7      	b.n	8001584 <sensorTask+0x24>
		}
	}
	printf("\r\n");
 80015d4:	4876      	ldr	r0, [pc, #472]	; (80017b0 <sensorTask+0x250>)
 80015d6:	f00a fc4f 	bl	800be78 <puts>

	//magCalICM20948(&imu, &imu.mag_bias, &imu.mag_scale);
	char sbuf[100] = { 0 };
 80015da:	2300      	movs	r3, #0
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
 80015de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015e2:	2260      	movs	r2, #96	; 0x60
 80015e4:	2100      	movs	r1, #0
 80015e6:	4618      	mov	r0, r3
 80015e8:	f009 fe58 	bl	800b29c <memset>
	printf("%d\n", imu.mag_bias[0]);
 80015ec:	4b6d      	ldr	r3, [pc, #436]	; (80017a4 <sensorTask+0x244>)
 80015ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7fe ffa9 	bl	8000548 <__aeabi_f2d>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	486e      	ldr	r0, [pc, #440]	; (80017b4 <sensorTask+0x254>)
 80015fc:	f00a fba0 	bl	800bd40 <iprintf>
	printf("%d\n", imu.mag_bias[1]);
 8001600:	4b68      	ldr	r3, [pc, #416]	; (80017a4 <sensorTask+0x244>)
 8001602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe ff9f 	bl	8000548 <__aeabi_f2d>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4869      	ldr	r0, [pc, #420]	; (80017b4 <sensorTask+0x254>)
 8001610:	f00a fb96 	bl	800bd40 <iprintf>
	printf("%d\n", imu.mag_bias[2]);
 8001614:	4b63      	ldr	r3, [pc, #396]	; (80017a4 <sensorTask+0x244>)
 8001616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001618:	4618      	mov	r0, r3
 800161a:	f7fe ff95 	bl	8000548 <__aeabi_f2d>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	4864      	ldr	r0, [pc, #400]	; (80017b4 <sensorTask+0x254>)
 8001624:	f00a fb8c 	bl	800bd40 <iprintf>
	uint32_t timeNow = HAL_GetTick();
 8001628:	f001 fd0e 	bl	8003048 <HAL_GetTick>
 800162c:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
	float dir = 0;
 8001630:	f04f 0300 	mov.w	r3, #0
 8001634:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001638:	2100      	movs	r1, #0
 800163a:	485f      	ldr	r0, [pc, #380]	; (80017b8 <sensorTask+0x258>)
 800163c:	f004 fa96 	bl	8005b6c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001640:	2104      	movs	r1, #4
 8001642:	485d      	ldr	r0, [pc, #372]	; (80017b8 <sensorTask+0x258>)
 8001644:	f004 fa92 	bl	8005b6c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001648:	2100      	movs	r1, #0
 800164a:	485c      	ldr	r0, [pc, #368]	; (80017bc <sensorTask+0x25c>)
 800164c:	f004 fa8e 	bl	8005b6c <HAL_TIM_PWM_Start>

	// ------- left motor
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001650:	2200      	movs	r2, #0
 8001652:	2110      	movs	r1, #16
 8001654:	485a      	ldr	r0, [pc, #360]	; (80017c0 <sensorTask+0x260>)
 8001656:	f002 fb83 	bl	8003d60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800165a:	2201      	movs	r2, #1
 800165c:	2120      	movs	r1, #32
 800165e:	4858      	ldr	r0, [pc, #352]	; (80017c0 <sensorTask+0x260>)
 8001660:	f002 fb7e 	bl	8003d60 <HAL_GPIO_WritePin>
	// ------- right motor
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001664:	2200      	movs	r2, #0
 8001666:	2104      	movs	r1, #4
 8001668:	4855      	ldr	r0, [pc, #340]	; (80017c0 <sensorTask+0x260>)
 800166a:	f002 fb79 	bl	8003d60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800166e:	2201      	movs	r2, #1
 8001670:	2108      	movs	r1, #8
 8001672:	4853      	ldr	r0, [pc, #332]	; (80017c0 <sensorTask+0x260>)
 8001674:	f002 fb74 	bl	8003d60 <HAL_GPIO_WritePin>
	// drive the motor

	float DEG2RAD = 0.017453292519943295769236907684886f;
 8001678:	4b52      	ldr	r3, [pc, #328]	; (80017c4 <sensorTask+0x264>)
 800167a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	float mRes = 10.0f * 4912.0f / 32760.0f;
 800167e:	4b52      	ldr	r3, [pc, #328]	; (80017c8 <sensorTask+0x268>)
 8001680:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	for (;;) {
		controller.motionTask(&ctrlCtx);
 8001684:	4851      	ldr	r0, [pc, #324]	; (80017cc <sensorTask+0x26c>)
 8001686:	f000 f927 	bl	80018d8 <_ZN9AppMotion16MotionController10motionTaskEPv>
		//setLeftPWM(1000); // was 1000, 2000
		//setRightPWM(2000);
		//robotTurnPID(&targetAngle, 0);
		float angle = 100;
 800168a:	4b51      	ldr	r3, [pc, #324]	; (80017d0 <sensorTask+0x270>)
 800168c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		//robotTurn(&angle);
		//uint8_t sbuf[60] = { 0 };
		/* USER CODE END WHILE */

		IMU_AccelRead(&imu);
 8001690:	4844      	ldr	r0, [pc, #272]	; (80017a4 <sensorTask+0x244>)
 8001692:	f7ff fd4f 	bl	8001134 <IMU_AccelRead>
		IMU_GyroRead(&imu);
 8001696:	4843      	ldr	r0, [pc, #268]	; (80017a4 <sensorTask+0x244>)
 8001698:	f7ff fe24 	bl	80012e4 <IMU_GyroRead>
		//float yaw = atan2(Yh, Xh);
		//timeNow = HAL_GetTick();
		/*float yaw = atan2(2.0f * (imu.q[1] * imu.q[2] + imu.q[0] * imu.q[3]),
		 imu.q[0] * imu.q[0] + imu.q[1] * imu.q[1] - imu.q[2] * imu.q[2]
		 - imu.q[3] * imu.q[3]) * 57.295779513082320876798154814105f;*/
		dir += ((float) imu.gyro[2]) * 0.1;
 800169c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80016a0:	f7fe ff52 	bl	8000548 <__aeabi_f2d>
 80016a4:	4604      	mov	r4, r0
 80016a6:	460d      	mov	r5, r1
 80016a8:	4b3e      	ldr	r3, [pc, #248]	; (80017a4 <sensorTask+0x244>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe ff4b 	bl	8000548 <__aeabi_f2d>
 80016b2:	a339      	add	r3, pc, #228	; (adr r3, 8001798 <sensorTask+0x238>)
 80016b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b8:	f7fe ff9e 	bl	80005f8 <__aeabi_dmul>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4620      	mov	r0, r4
 80016c2:	4629      	mov	r1, r5
 80016c4:	f7fe fde2 	bl	800028c <__adddf3>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4610      	mov	r0, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	f7ff fa6a 	bl	8000ba8 <__aeabi_d2f>
 80016d4:	4603      	mov	r3, r0
 80016d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		uint16_t len = sprintf(&sbuf[0],
				"%5.2f,%5.2f,%5.2f,%5.2f,%5.2f,%5.2f,%5.2f,%5.2f,%5.2f\r\n",
				imu.acc[0], imu.acc[1], imu.acc[2], imu.gyro[0], imu.gyro[1],
 80016da:	4b32      	ldr	r3, [pc, #200]	; (80017a4 <sensorTask+0x244>)
 80016dc:	685b      	ldr	r3, [r3, #4]
		uint16_t len = sprintf(&sbuf[0],
 80016de:	4618      	mov	r0, r3
 80016e0:	f7fe ff32 	bl	8000548 <__aeabi_f2d>
 80016e4:	e9c7 0104 	strd	r0, r1, [r7, #16]
				imu.acc[0], imu.acc[1], imu.acc[2], imu.gyro[0], imu.gyro[1],
 80016e8:	4b2e      	ldr	r3, [pc, #184]	; (80017a4 <sensorTask+0x244>)
 80016ea:	689b      	ldr	r3, [r3, #8]
		uint16_t len = sprintf(&sbuf[0],
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7fe ff2b 	bl	8000548 <__aeabi_f2d>
 80016f2:	4680      	mov	r8, r0
 80016f4:	4689      	mov	r9, r1
				imu.acc[0], imu.acc[1], imu.acc[2], imu.gyro[0], imu.gyro[1],
 80016f6:	4b2b      	ldr	r3, [pc, #172]	; (80017a4 <sensorTask+0x244>)
 80016f8:	68db      	ldr	r3, [r3, #12]
		uint16_t len = sprintf(&sbuf[0],
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe ff24 	bl	8000548 <__aeabi_f2d>
 8001700:	4682      	mov	sl, r0
 8001702:	468b      	mov	fp, r1
				imu.acc[0], imu.acc[1], imu.acc[2], imu.gyro[0], imu.gyro[1],
 8001704:	4b27      	ldr	r3, [pc, #156]	; (80017a4 <sensorTask+0x244>)
 8001706:	691b      	ldr	r3, [r3, #16]
		uint16_t len = sprintf(&sbuf[0],
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe ff1d 	bl	8000548 <__aeabi_f2d>
 800170e:	e9c7 0102 	strd	r0, r1, [r7, #8]
				imu.acc[0], imu.acc[1], imu.acc[2], imu.gyro[0], imu.gyro[1],
 8001712:	4b24      	ldr	r3, [pc, #144]	; (80017a4 <sensorTask+0x244>)
 8001714:	695b      	ldr	r3, [r3, #20]
		uint16_t len = sprintf(&sbuf[0],
 8001716:	4618      	mov	r0, r3
 8001718:	f7fe ff16 	bl	8000548 <__aeabi_f2d>
 800171c:	e9c7 0100 	strd	r0, r1, [r7]
				imu.gyro[2], imu.mag[0], imu.mag[1], imu.mag[2]);
 8001720:	4b20      	ldr	r3, [pc, #128]	; (80017a4 <sensorTask+0x244>)
 8001722:	699b      	ldr	r3, [r3, #24]
		uint16_t len = sprintf(&sbuf[0],
 8001724:	4618      	mov	r0, r3
 8001726:	f7fe ff0f 	bl	8000548 <__aeabi_f2d>
 800172a:	4604      	mov	r4, r0
 800172c:	460d      	mov	r5, r1
				imu.gyro[2], imu.mag[0], imu.mag[1], imu.mag[2]);
 800172e:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <sensorTask+0x244>)
 8001730:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
		uint16_t len = sprintf(&sbuf[0],
 8001734:	4619      	mov	r1, r3
				imu.gyro[2], imu.mag[0], imu.mag[1], imu.mag[2]);
 8001736:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <sensorTask+0x244>)
 8001738:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
		uint16_t len = sprintf(&sbuf[0],
 800173c:	461a      	mov	r2, r3
				imu.gyro[2], imu.mag[0], imu.mag[1], imu.mag[2]);
 800173e:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <sensorTask+0x244>)
 8001740:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
		uint16_t len = sprintf(&sbuf[0],
 8001744:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001748:	930c      	str	r3, [sp, #48]	; 0x30
 800174a:	920b      	str	r2, [sp, #44]	; 0x2c
 800174c:	910a      	str	r1, [sp, #40]	; 0x28
 800174e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8001752:	ed97 7b00 	vldr	d7, [r7]
 8001756:	ed8d 7b06 	vstr	d7, [sp, #24]
 800175a:	ed97 7b02 	vldr	d7, [r7, #8]
 800175e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001762:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001766:	e9cd 8900 	strd	r8, r9, [sp]
 800176a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800176e:	4919      	ldr	r1, [pc, #100]	; (80017d4 <sensorTask+0x274>)
 8001770:	f00a fc7c 	bl	800c06c <siprintf>
 8001774:	4603      	mov	r3, r0
				imu.gyro[2], imu.mag[0], imu.mag[1], imu.mag[2]);
 8001776:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		HAL_UART_Transmit(&huart3, (uint8_t*) sbuf, len, 10);
 800177a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800177e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001782:	230a      	movs	r3, #10
 8001784:	4814      	ldr	r0, [pc, #80]	; (80017d8 <sensorTask+0x278>)
 8001786:	f005 fa65 	bl	8006c54 <HAL_UART_Transmit>
		//	HAL_UART_Receive_IT(&huart3, (uint8_t*) aRxBuffer, 5);
		osDelay(150);
 800178a:	2096      	movs	r0, #150	; 0x96
 800178c:	f006 fdc6 	bl	800831c <osDelay>

	}
 8001790:	e778      	b.n	8001684 <sensorTask+0x124>
 8001792:	bf00      	nop
 8001794:	f3af 8000 	nop.w
 8001798:	9999999a 	.word	0x9999999a
 800179c:	3fb99999 	.word	0x3fb99999
 80017a0:	200002f8 	.word	0x200002f8
 80017a4:	20000290 	.word	0x20000290
 80017a8:	0800e2a8 	.word	0x0800e2a8
 80017ac:	0800e2bc 	.word	0x0800e2bc
 80017b0:	0800e2c4 	.word	0x0800e2c4
 80017b4:	0800e2c8 	.word	0x0800e2c8
 80017b8:	20000424 	.word	0x20000424
 80017bc:	2000034c 	.word	0x2000034c
 80017c0:	40020000 	.word	0x40020000
 80017c4:	3c8efa35 	.word	0x3c8efa35
 80017c8:	3fbfebff 	.word	0x3fbfebff
 80017cc:	2000002c 	.word	0x2000002c
 80017d0:	42c80000 	.word	0x42c80000
 80017d4:	0800e2cc 	.word	0x0800e2cc
 80017d8:	2000046c 	.word	0x2000046c

080017dc <_Z41__static_initialization_and_destruction_0ii>:
}
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d125      	bne.n	8001838 <_Z41__static_initialization_and_destruction_0ii+0x5c>
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d120      	bne.n	8001838 <_Z41__static_initialization_and_destruction_0ii+0x5c>
		.mailbox = { .queue = NULL } };
 80017f6:	4b1b      	ldr	r3, [pc, #108]	; (8001864 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a1b      	ldr	r2, [pc, #108]	; (8001868 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80017fc:	6013      	str	r3, [r2, #0]
osMessageQueueId_t ctrlQueue = osMessageQueueNew(10, sizeof(AppParser::MOTION_PKT_t), NULL);
 80017fe:	2200      	movs	r2, #0
 8001800:	210c      	movs	r1, #12
 8001802:	200a      	movs	r0, #10
 8001804:	f006 fda5 	bl	8008352 <osMessageQueueNew>
 8001808:	4603      	mov	r3, r0
 800180a:	4a18      	ldr	r2, [pc, #96]	; (800186c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800180c:	6013      	str	r3, [r2, #0]
		.mailbox = { .queue = ctrlQueue } };
 800180e:	4b18      	ldr	r3, [pc, #96]	; (8001870 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a18      	ldr	r2, [pc, #96]	; (8001874 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a16      	ldr	r2, [pc, #88]	; (8001874 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800181c:	6293      	str	r3, [r2, #40]	; 0x28
AppMotion::MotionController controller(&ctrlCtx);
 800181e:	4915      	ldr	r1, [pc, #84]	; (8001874 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8001820:	4815      	ldr	r0, [pc, #84]	; (8001878 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8001822:	f000 f83f 	bl	80018a4 <_ZN9AppMotion16MotionControllerC1EP5u_ctx>
AppParser::Processor processor(&procCtx, &ctrlCtx);
 8001826:	4a13      	ldr	r2, [pc, #76]	; (8001874 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8001828:	490f      	ldr	r1, [pc, #60]	; (8001868 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800182a:	4814      	ldr	r0, [pc, #80]	; (800187c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800182c:	f000 f952 	bl	8001ad4 <_ZN9AppParser9ProcessorC1EP5u_ctxS2_>
AppParser::Listener listener(&procCtx);
 8001830:	490d      	ldr	r1, [pc, #52]	; (8001868 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001832:	4813      	ldr	r0, [pc, #76]	; (8001880 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8001834:	f000 f90e 	bl	8001a54 <_ZN9AppParser8ListenerC1EP5u_ctx>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d10d      	bne.n	800185a <_Z41__static_initialization_and_destruction_0ii+0x7e>
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001844:	4293      	cmp	r3, r2
 8001846:	d108      	bne.n	800185a <_Z41__static_initialization_and_destruction_0ii+0x7e>
 8001848:	480d      	ldr	r0, [pc, #52]	; (8001880 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800184a:	f000 f912 	bl	8001a72 <_ZN9AppParser8ListenerD1Ev>
AppParser::Processor processor(&procCtx, &ctrlCtx);
 800184e:	480b      	ldr	r0, [pc, #44]	; (800187c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8001850:	f000 f95a 	bl	8001b08 <_ZN9AppParser9ProcessorD1Ev>
AppMotion::MotionController controller(&ctrlCtx);
 8001854:	4808      	ldr	r0, [pc, #32]	; (8001878 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8001856:	f000 f834 	bl	80018c2 <_ZN9AppMotion16MotionControllerD1Ev>
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000268 	.word	0x20000268
 8001868:	20000000 	.word	0x20000000
 800186c:	20000270 	.word	0x20000270
 8001870:	2000026c 	.word	0x2000026c
 8001874:	2000002c 	.word	0x2000002c
 8001878:	20000274 	.word	0x20000274
 800187c:	20000278 	.word	0x20000278
 8001880:	20000280 	.word	0x20000280

08001884 <_GLOBAL__sub_I_lock>:
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
 8001888:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800188c:	2001      	movs	r0, #1
 800188e:	f7ff ffa5 	bl	80017dc <_Z41__static_initialization_and_destruction_0ii>
 8001892:	bd80      	pop	{r7, pc}

08001894 <_GLOBAL__sub_D_lock>:
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
 8001898:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800189c:	2000      	movs	r0, #0
 800189e:	f7ff ff9d 	bl	80017dc <_Z41__static_initialization_and_destruction_0ii>
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <_ZN9AppMotion16MotionControllerC1EP5u_ctx>:
#include <cstring>


namespace AppMotion {

MotionController::MotionController(u_ctx *ctx) {
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
	this->ctx = ctx;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	601a      	str	r2, [r3, #0]

}
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4618      	mov	r0, r3
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <_ZN9AppMotion16MotionControllerD1Ev>:
MotionController::~MotionController() {
 80018c2:	b480      	push	{r7}
 80018c4:	b083      	sub	sp, #12
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
}
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4618      	mov	r0, r3
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <_ZN9AppMotion16MotionController10motionTaskEPv>:

	this->ctx->runner = osThreadNew((osThreadFunc_t) &MotionController::motionTask, ctx,
			&(ctx->attr));
}

void MotionController::motionTask(void *pv) {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b092      	sub	sp, #72	; 0x48
 80018dc:	af02      	add	r7, sp, #8
 80018de:	6078      	str	r0, [r7, #4]
	u_ctx *ctx = (u_ctx*) pv;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	63fb      	str	r3, [r7, #60]	; 0x3c
	Servo servo(&htim1, CENTER_POS_PWM - LEFT_DELTA,
			CENTER_POS_PWM + RIGHT_DELTA, CENTER_POS_PWM);
 80018e4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80018e8:	2399      	movs	r3, #153	; 0x99
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	23f3      	movs	r3, #243	; 0xf3
 80018ee:	2271      	movs	r2, #113	; 0x71
 80018f0:	4928      	ldr	r1, [pc, #160]	; (8001994 <_ZN9AppMotion16MotionController10motionTaskEPv+0xbc>)
 80018f2:	f000 f855 	bl	80019a0 <_ZN9AppMotion5ServoC1EP17TIM_HandleTypeDefmmm>
	//for (;;) {
		//osDelay(50);
		//osThreadYield();
		if (osMessageQueueGetCount(ctx->mailbox.queue) > 0) {
 80018f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fa:	4618      	mov	r0, r3
 80018fc:	f006 fe5a 	bl	80085b4 <osMessageQueueGetCount>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	bf14      	ite	ne
 8001906:	2301      	movne	r3, #1
 8001908:	2300      	moveq	r3, #0
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b00      	cmp	r3, #0
 800190e:	d038      	beq.n	8001982 <_ZN9AppMotion16MotionController10motionTaskEPv+0xaa>
			AppParser::MOTION_PKT_t pkt;
			osMessageQueueGet(ctx->mailbox.queue, &pkt, 0, 5);
 8001910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001912:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001914:	f107 011c 	add.w	r1, r7, #28
 8001918:	2305      	movs	r3, #5
 800191a:	2200      	movs	r2, #0
 800191c:	f006 fdec 	bl	80084f8 <osMessageQueueGet>
			char buffer[20] = { 0 };
 8001920:	2300      	movs	r3, #0
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	f107 030c 	add.w	r3, r7, #12
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
			sprintf((char*) &buffer, "cmd:%ld, arg:%ld\r\n",
					(uint32_t) pkt.cmd, pkt.arg);
 8001932:	69fa      	ldr	r2, [r7, #28]
			sprintf((char*) &buffer, "cmd:%ld, arg:%ld\r\n",
 8001934:	6a3b      	ldr	r3, [r7, #32]
 8001936:	f107 0008 	add.w	r0, r7, #8
 800193a:	4917      	ldr	r1, [pc, #92]	; (8001998 <_ZN9AppMotion16MotionController10motionTaskEPv+0xc0>)
 800193c:	f00a fb96 	bl	800c06c <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) buffer, sizeof(buffer), 10);
 8001940:	f107 0108 	add.w	r1, r7, #8
 8001944:	230a      	movs	r3, #10
 8001946:	2214      	movs	r2, #20
 8001948:	4814      	ldr	r0, [pc, #80]	; (800199c <_ZN9AppMotion16MotionController10motionTaskEPv+0xc4>)
 800194a:	f005 f983 	bl	8006c54 <HAL_UART_Transmit>
			if(pkt.cmd == AppParser::MOTION_CMD::MOVE_FWD) servo.turnFront();
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d105      	bne.n	8001960 <_ZN9AppMotion16MotionController10motionTaskEPv+0x88>
 8001954:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001958:	4618      	mov	r0, r3
 800195a:	f000 f86a 	bl	8001a32 <_ZN9AppMotion5Servo9turnFrontEv>
 800195e:	e010      	b.n	8001982 <_ZN9AppMotion16MotionController10motionTaskEPv+0xaa>
			else if(pkt.cmd == AppParser::MOTION_CMD::MOVE_LEFT_BWD) servo.turnLeft();
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	2b05      	cmp	r3, #5
 8001964:	d105      	bne.n	8001972 <_ZN9AppMotion16MotionController10motionTaskEPv+0x9a>
 8001966:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800196a:	4618      	mov	r0, r3
 800196c:	f000 f83f 	bl	80019ee <_ZN9AppMotion5Servo8turnLeftEv>
 8001970:	e007      	b.n	8001982 <_ZN9AppMotion16MotionController10motionTaskEPv+0xaa>
			else if(pkt.cmd == AppParser::MOTION_CMD::MOVE_RIGHT_BWD) servo.turnRight();
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	2b04      	cmp	r3, #4
 8001976:	d104      	bne.n	8001982 <_ZN9AppMotion16MotionController10motionTaskEPv+0xaa>
 8001978:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800197c:	4618      	mov	r0, r3
 800197e:	f000 f847 	bl	8001a10 <_ZN9AppMotion5Servo9turnRightEv>
			CENTER_POS_PWM + RIGHT_DELTA, CENTER_POS_PWM);
 8001982:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001986:	4618      	mov	r0, r3
 8001988:	f000 f826 	bl	80019d8 <_ZN9AppMotion5ServoD1Ev>
		}
		//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);

	//}
}
 800198c:	bf00      	nop
 800198e:	3740      	adds	r7, #64	; 0x40
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	2000034c 	.word	0x2000034c
 8001998:	0800e304 	.word	0x0800e304
 800199c:	2000046c 	.word	0x2000046c

080019a0 <_ZN9AppMotion5ServoC1EP17TIM_HandleTypeDefmmm>:

Servo::Servo(TIM_HandleTypeDef *ctrl, uint32_t min, uint32_t max,
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
 80019ac:	603b      	str	r3, [r7, #0]
		uint32_t center) {
	this->htimer = ctrl;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	68ba      	ldr	r2, [r7, #8]
 80019b2:	601a      	str	r2, [r3, #0]
	this->MIN_PWM = min;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	609a      	str	r2, [r3, #8]
	this->MAX_PWM = max;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	60da      	str	r2, [r3, #12]
	this->CTR_PWM = center;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	611a      	str	r2, [r3, #16]
	HAL_TIM_PWM_Start(ctrl, TIM_CHANNEL_1);
 80019c6:	2100      	movs	r1, #0
 80019c8:	68b8      	ldr	r0, [r7, #8]
 80019ca:	f004 f8cf 	bl	8005b6c <HAL_TIM_PWM_Start>
}
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	4618      	mov	r0, r3
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <_ZN9AppMotion5ServoD1Ev>:
Servo::~Servo(){};
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4618      	mov	r0, r3
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <_ZN9AppMotion5Servo8turnLeftEv>:
void Servo::turnLeft() {
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b082      	sub	sp, #8
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
	this->htimer->Instance->CCR1 = MIN_PWM;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	6892      	ldr	r2, [r2, #8]
 8001a00:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(TURN_DELAY_MS);
 8001a02:	20fa      	movs	r0, #250	; 0xfa
 8001a04:	f006 fc8a 	bl	800831c <osDelay>

}
 8001a08:	bf00      	nop
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <_ZN9AppMotion5Servo9turnRightEv>:
void Servo::turnRight() {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
	this->htimer->Instance->CCR1 = MAX_PWM;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	68d2      	ldr	r2, [r2, #12]
 8001a22:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(TURN_DELAY_MS);
 8001a24:	20fa      	movs	r0, #250	; 0xfa
 8001a26:	f006 fc79 	bl	800831c <osDelay>
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <_ZN9AppMotion5Servo9turnFrontEv>:

void Servo::turnFront() {
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
	this->htimer->Instance->CCR1 = CTR_PWM;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6912      	ldr	r2, [r2, #16]
 8001a44:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(TURN_DELAY_MS);
 8001a46:	20fa      	movs	r0, #250	; 0xfa
 8001a48:	f006 fc68 	bl	800831c <osDelay>
}
 8001a4c:	bf00      	nop
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <_ZN9AppParser8ListenerC1EP5u_ctx>:

namespace AppParser {

static volatile BUF_CMP_t uartRxBuf[10];

Listener::Listener(u_ctx *ctx) {
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
	this->ctx = ctx;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	601a      	str	r2, [r3, #0]
}
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4618      	mov	r0, r3
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <_ZN9AppParser8ListenerD1Ev>:

Listener::~Listener() {
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
}
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <_ZN9AppParser8Listener6invokeEv>:
;
// not needed

/*! called from ISR */
volatile void Listener::invoke() {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	//osMutexRelease(this->ctx->mailbox.lock);
	AppMessage_t msg;
	memcpy(&msg.buffer, (const BUF_CMP_t*) &uartRxBuf, 10);
 8001a90:	4a0e      	ldr	r2, [pc, #56]	; (8001acc <_ZN9AppParser8Listener6invokeEv+0x44>)
 8001a92:	f107 030c 	add.w	r3, r7, #12
 8001a96:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a98:	c303      	stmia	r3!, {r0, r1}
 8001a9a:	801a      	strh	r2, [r3, #0]
	memset((BUF_CMP_t*) &uartRxBuf, 0, 10);
 8001a9c:	220a      	movs	r2, #10
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	480a      	ldr	r0, [pc, #40]	; (8001acc <_ZN9AppParser8Listener6invokeEv+0x44>)
 8001aa2:	f009 fbfb 	bl	800b29c <memset>
	osStatus_t tmp = osMessageQueuePut(ctx->mailbox.queue, &msg, 0, 0);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001aac:	f107 010c 	add.w	r1, r7, #12
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f006 fcc0 	bl	8008438 <osMessageQueuePut>
 8001ab8:	61f8      	str	r0, [r7, #28]
	//HAL_UART_Transmit(&huart3, (uint8_t *)ibuf, sizeof(ibuf), 10);
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 8001aba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001abe:	4804      	ldr	r0, [pc, #16]	; (8001ad0 <_ZN9AppParser8Listener6invokeEv+0x48>)
 8001ac0:	f002 f967 	bl	8003d92 <HAL_GPIO_TogglePin>

	//HAL_UART_Receive_DMA(&huart3, (uint8_t *) aRxBuffer, 5);
}
 8001ac4:	bf00      	nop
 8001ac6:	3720      	adds	r7, #32
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20000284 	.word	0x20000284
 8001ad0:	40021000 	.word	0x40021000

08001ad4 <_ZN9AppParser9ProcessorC1EP5u_ctxS2_>:

Processor::Processor(u_ctx *rx_ctx, u_ctx *tx_ctx) {
 8001ad4:	b590      	push	{r4, r7, lr}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
	this->this_ctx = rx_ctx;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	68ba      	ldr	r2, [r7, #8]
 8001ae4:	601a      	str	r2, [r3, #0]
	this->o_ctx = tx_ctx;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	605a      	str	r2, [r3, #4]
	this->this_ctx->mailbox.queue = osMessageQueueNew(10, sizeof(AppMessage_t),
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681c      	ldr	r4, [r3, #0]
 8001af0:	2200      	movs	r2, #0
 8001af2:	2110      	movs	r1, #16
 8001af4:	200a      	movs	r0, #10
 8001af6:	f006 fc2c 	bl	8008352 <osMessageQueueNew>
 8001afa:	4603      	mov	r3, r0
 8001afc:	62a3      	str	r3, [r4, #40]	; 0x28
	NULL);
}
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	4618      	mov	r0, r3
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd90      	pop	{r4, r7, pc}

08001b08 <_ZN9AppParser9ProcessorD1Ev>:

Processor::~Processor() {
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
}
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
	...

08001b20 <_ZN9AppParser9Processor5startEv>:
void Processor::startImpl(void *_this) // hardfaults on queue for some reason so made static
		{
	//static_cast<Processor *>(_this)->processorTask();
}

void Processor::start(void) {
 8001b20:	b590      	push	{r4, r7, lr}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
    ctx_wrapper * wrapper_instance = new ctx_wrapper();
 8001b28:	2008      	movs	r0, #8
 8001b2a:	f009 fa5f 	bl	800afec <_Znwj>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	2200      	movs	r2, #0
 8001b36:	605a      	str	r2, [r3, #4]
 8001b38:	60fb      	str	r3, [r7, #12]
    wrapper_instance->rx_ctx = this_ctx;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	601a      	str	r2, [r3, #0]
    wrapper_instance->tx_ctx = o_ctx;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	605a      	str	r2, [r3, #4]

    this->this_ctx->runner = osThreadNew((osThreadFunc_t)&Processor::processorTask,
    		wrapper_instance,
                                    &(this_ctx->attr));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	1d1a      	adds	r2, r3, #4
    this->this_ctx->runner = osThreadNew((osThreadFunc_t)&Processor::processorTask,
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681c      	ldr	r4, [r3, #0]
 8001b54:	68f9      	ldr	r1, [r7, #12]
 8001b56:	4804      	ldr	r0, [pc, #16]	; (8001b68 <_ZN9AppParser9Processor5startEv+0x48>)
 8001b58:	f006 fb2c 	bl	80081b4 <osThreadNew>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	6023      	str	r3, [r4, #0]
}
 8001b60:	bf00      	nop
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd90      	pop	{r4, r7, pc}
 8001b68:	08001b6d 	.word	0x08001b6d

08001b6c <_ZN9AppParser9Processor13processorTaskEPv>:

void Processor::processorTask(void *pv) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08e      	sub	sp, #56	; 0x38
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart3, (BUF_CMP_t*) uartRxBuf, 10);
 8001b74:	220a      	movs	r2, #10
 8001b76:	4947      	ldr	r1, [pc, #284]	; (8001c94 <_ZN9AppParser9Processor13processorTaskEPv+0x128>)
 8001b78:	4847      	ldr	r0, [pc, #284]	; (8001c98 <_ZN9AppParser9Processor13processorTaskEPv+0x12c>)
 8001b7a:	f005 f8fd 	bl	8006d78 <HAL_UART_Receive_DMA>

	ctx_wrapper *wrapper = static_cast<ctx_wrapper*>(pv);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	637b      	str	r3, [r7, #52]	; 0x34

	    // Access rx_ctx and tx_ctx pointers from the wrapper
	    u_ctx *rx_ctx = wrapper->rx_ctx;
 8001b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	633b      	str	r3, [r7, #48]	; 0x30
	    u_ctx *tx_ctx = wrapper->tx_ctx;
 8001b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	62fb      	str	r3, [r7, #44]	; 0x2c

	for (;;) {

		//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
		osDelay(50);
 8001b8e:	2032      	movs	r0, #50	; 0x32
 8001b90:	f006 fbc4 	bl	800831c <osDelay>
				osThreadYield();
 8001b94:	f006 fba2 	bl	80082dc <osThreadYield>
		 * where (k + Ni) mod N = k for all integers i and k < N.
		 *
		 * Maybe this algorithm can be improved, as up to 2 messages will be lost.
		 *
		 */
		if (uxQueueMessagesWaiting((QueueHandle_t) rx_ctx->mailbox.queue)) {
 8001b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f007 fa17 	bl	8008fd0 <uxQueueMessagesWaiting>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	bf14      	ite	ne
 8001ba8:	2301      	movne	r3, #1
 8001baa:	2300      	moveq	r3, #0
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0ed      	beq.n	8001b8e <_ZN9AppParser9Processor13processorTaskEPv+0x22>
			AppMessage_t msg;
			osMessageQueueGet(rx_ctx->mailbox.queue, &msg.buffer, 0, 5);
 8001bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001bb6:	f107 0118 	add.w	r1, r7, #24
 8001bba:	2305      	movs	r3, #5
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f006 fc9b 	bl	80084f8 <osMessageQueueGet>
			// osMessageQueueReset(procCtx.mailbox.queue);

			/* DATA VALIDATION */
			if (!isEq<BUF_CMP_t>(START_CHAR, msg.buffer[0])) {
 8001bc2:	f107 0318 	add.w	r3, r7, #24
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4834      	ldr	r0, [pc, #208]	; (8001c9c <_ZN9AppParser9Processor13processorTaskEPv+0x130>)
 8001bca:	f000 f913 	bl	8001df4 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	f083 0301 	eor.w	r3, r3, #1
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d005      	beq.n	8001be6 <_ZN9AppParser9Processor13processorTaskEPv+0x7a>
				HAL_UART_Transmit(&huart3, (BUF_CMP_t*) "WRONG START",
 8001bda:	230a      	movs	r3, #10
 8001bdc:	220c      	movs	r2, #12
 8001bde:	4930      	ldr	r1, [pc, #192]	; (8001ca0 <_ZN9AppParser9Processor13processorTaskEPv+0x134>)
 8001be0:	482d      	ldr	r0, [pc, #180]	; (8001c98 <_ZN9AppParser9Processor13processorTaskEPv+0x12c>)
 8001be2:	f005 f837 	bl	8006c54 <HAL_UART_Transmit>
						sizeof("WRONG START"), 10);
			}
			if (!isEq<BUF_CMP_t>(END_CHAR, msg.buffer[9])) {
 8001be6:	f107 0318 	add.w	r3, r7, #24
 8001bea:	3309      	adds	r3, #9
 8001bec:	4619      	mov	r1, r3
 8001bee:	482d      	ldr	r0, [pc, #180]	; (8001ca4 <_ZN9AppParser9Processor13processorTaskEPv+0x138>)
 8001bf0:	f000 f900 	bl	8001df4 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	f083 0301 	eor.w	r3, r3, #1
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d005      	beq.n	8001c0c <_ZN9AppParser9Processor13processorTaskEPv+0xa0>
				HAL_UART_Transmit(&huart3, (BUF_CMP_t*) "WRONG END",
 8001c00:	230a      	movs	r3, #10
 8001c02:	220a      	movs	r2, #10
 8001c04:	4928      	ldr	r1, [pc, #160]	; (8001ca8 <_ZN9AppParser9Processor13processorTaskEPv+0x13c>)
 8001c06:	4824      	ldr	r0, [pc, #144]	; (8001c98 <_ZN9AppParser9Processor13processorTaskEPv+0x12c>)
 8001c08:	f005 f824 	bl	8006c54 <HAL_UART_Transmit>
						sizeof("WRONG END"), 10);
			}
			/******************/

			if (isEq<BUF_CMP_t>(REQ_CHAR, msg.buffer[1])) {
 8001c0c:	f107 0318 	add.w	r3, r7, #24
 8001c10:	3301      	adds	r3, #1
 8001c12:	4619      	mov	r1, r3
 8001c14:	4825      	ldr	r0, [pc, #148]	; (8001cac <_ZN9AppParser9Processor13processorTaskEPv+0x140>)
 8001c16:	f000 f8ed 	bl	8001df4 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d11b      	bne.n	8001c58 <_ZN9AppParser9Processor13processorTaskEPv+0xec>
				// do request stuff
			} else if (isEq<BUF_CMP_t>(CMD_CHAR, msg.buffer[1])) {
 8001c20:	f107 0318 	add.w	r3, r7, #24
 8001c24:	3301      	adds	r3, #1
 8001c26:	4619      	mov	r1, r3
 8001c28:	4821      	ldr	r0, [pc, #132]	; (8001cb0 <_ZN9AppParser9Processor13processorTaskEPv+0x144>)
 8001c2a:	f000 f8e3 	bl	8001df4 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d011      	beq.n	8001c58 <_ZN9AppParser9Processor13processorTaskEPv+0xec>
				// do command stuff
				switch (msg.buffer[2]) {
 8001c34:	7ebb      	ldrb	r3, [r7, #26]
 8001c36:	2b6d      	cmp	r3, #109	; 0x6d
 8001c38:	d10d      	bne.n	8001c56 <_ZN9AppParser9Processor13processorTaskEPv+0xea>
				case MOTOR_CHAR: {
					MOTION_PKT_t *pkt = getMotionCmdFromBytes(
 8001c3a:	f107 0318 	add.w	r3, r7, #24
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 f83a 	bl	8001cb8 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh>
 8001c44:	62b8      	str	r0, [r7, #40]	; 0x28
							(uint8_t*) &msg.buffer);

					osMessageQueuePut(tx_ctx->mailbox.queue, pkt, 0, 0);
 8001c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c48:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c50:	f006 fbf2 	bl	8008438 <osMessageQueuePut>
					break;
 8001c54:	e000      	b.n	8001c58 <_ZN9AppParser9Processor13processorTaskEPv+0xec>
				}
				default: {
					// something went wrong..
					break;
 8001c56:	bf00      	nop
				}
				}
			}
			char buf[11] = { 0 };
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	f107 0310 	add.w	r3, r7, #16
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	f8c3 2003 	str.w	r2, [r3, #3]

			snprintf((char*) &buf, 11, "%s", msg.buffer);
 8001c68:	f107 0318 	add.w	r3, r7, #24
 8001c6c:	f107 000c 	add.w	r0, r7, #12
 8001c70:	4a10      	ldr	r2, [pc, #64]	; (8001cb4 <_ZN9AppParser9Processor13processorTaskEPv+0x148>)
 8001c72:	210b      	movs	r1, #11
 8001c74:	f00a f9c6 	bl	800c004 <sniprintf>

			HAL_UART_Transmit(&huart3, (BUF_CMP_t*) buf, sizeof(buf), 100);
 8001c78:	f107 010c 	add.w	r1, r7, #12
 8001c7c:	2364      	movs	r3, #100	; 0x64
 8001c7e:	220b      	movs	r2, #11
 8001c80:	4805      	ldr	r0, [pc, #20]	; (8001c98 <_ZN9AppParser9Processor13processorTaskEPv+0x12c>)
 8001c82:	f004 ffe7 	bl	8006c54 <HAL_UART_Transmit>

			HAL_UART_Receive_DMA(&huart3, (BUF_CMP_t*) uartRxBuf, 10);
 8001c86:	220a      	movs	r2, #10
 8001c88:	4902      	ldr	r1, [pc, #8]	; (8001c94 <_ZN9AppParser9Processor13processorTaskEPv+0x128>)
 8001c8a:	4803      	ldr	r0, [pc, #12]	; (8001c98 <_ZN9AppParser9Processor13processorTaskEPv+0x12c>)
 8001c8c:	f005 f874 	bl	8006d78 <HAL_UART_Receive_DMA>
		}

	}
 8001c90:	e77d      	b.n	8001b8e <_ZN9AppParser9Processor13processorTaskEPv+0x22>
 8001c92:	bf00      	nop
 8001c94:	20000284 	.word	0x20000284
 8001c98:	2000046c 	.word	0x2000046c
 8001c9c:	0800e38d 	.word	0x0800e38d
 8001ca0:	0800e318 	.word	0x0800e318
 8001ca4:	0800e391 	.word	0x0800e391
 8001ca8:	0800e324 	.word	0x0800e324
 8001cac:	0800e38f 	.word	0x0800e38f
 8001cb0:	0800e38e 	.word	0x0800e38e
 8001cb4:	0800e330 	.word	0x0800e330

08001cb8 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh>:

}

MOTION_PKT_t* Processor::getMotionCmdFromBytes(BUF_CMP_t *bytes) {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]

	uint32_t val = strtol((const char*) &bytes[4], NULL, 10);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3304      	adds	r3, #4
 8001cc4:	220a      	movs	r2, #10
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f00a fab5 	bl	800c238 <strtol>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	60fb      	str	r3, [r7, #12]
	if (val == 0)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x24>
		return NULL; // invalid input or no action
 8001cd8:	2300      	movs	r3, #0
 8001cda:	e07a      	b.n	8001dd2 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x11a>
	MOTION_PKT_t *pkt = new MOTION_PKT_t();
 8001cdc:	200c      	movs	r0, #12
 8001cde:	f009 f985 	bl	800afec <_Znwj>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	460a      	mov	r2, r1
 8001ce8:	2300      	movs	r3, #0
 8001cea:	6013      	str	r3, [r2, #0]
 8001cec:	6053      	str	r3, [r2, #4]
 8001cee:	6093      	str	r3, [r2, #8]
 8001cf0:	60b9      	str	r1, [r7, #8]
	pkt->arg = val;
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	605a      	str	r2, [r3, #4]
	switch (bytes[3]) {
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3303      	adds	r3, #3
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	3b62      	subs	r3, #98	; 0x62
 8001d00:	2b10      	cmp	r3, #16
 8001d02:	d863      	bhi.n	8001dcc <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x114>
 8001d04:	a201      	add	r2, pc, #4	; (adr r2, 8001d0c <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x54>)
 8001d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d0a:	bf00      	nop
 8001d0c:	08001d65 	.word	0x08001d65
 8001d10:	08001dcd 	.word	0x08001dcd
 8001d14:	08001dcd 	.word	0x08001dcd
 8001d18:	08001dcd 	.word	0x08001dcd
 8001d1c:	08001d51 	.word	0x08001d51
 8001d20:	08001dcd 	.word	0x08001dcd
 8001d24:	08001dcd 	.word	0x08001dcd
 8001d28:	08001dcd 	.word	0x08001dcd
 8001d2c:	08001dcd 	.word	0x08001dcd
 8001d30:	08001dcd 	.word	0x08001dcd
 8001d34:	08001d79 	.word	0x08001d79
 8001d38:	08001dcd 	.word	0x08001dcd
 8001d3c:	08001dcd 	.word	0x08001dcd
 8001d40:	08001dcd 	.word	0x08001dcd
 8001d44:	08001dcd 	.word	0x08001dcd
 8001d48:	08001dcd 	.word	0x08001dcd
 8001d4c:	08001da3 	.word	0x08001da3
	case FWD_CHAR: {
		pkt->cmd = MOVE_FWD;
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (BUF_CMP_t*) "FWD CMD", sizeof("FWD CMD"),
 8001d56:	2364      	movs	r3, #100	; 0x64
 8001d58:	2208      	movs	r2, #8
 8001d5a:	4920      	ldr	r1, [pc, #128]	; (8001ddc <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x124>)
 8001d5c:	4820      	ldr	r0, [pc, #128]	; (8001de0 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x128>)
 8001d5e:	f004 ff79 	bl	8006c54 <HAL_UART_Transmit>
				100);
		break;
 8001d62:	e035      	b.n	8001dd0 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x118>
	}
	case BWD_CHAR: {
		pkt->cmd = MOVE_BWD;
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	2201      	movs	r2, #1
 8001d68:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (BUF_CMP_t*) "BWD CMD", sizeof("BWD CMD"),
 8001d6a:	2364      	movs	r3, #100	; 0x64
 8001d6c:	2208      	movs	r2, #8
 8001d6e:	491d      	ldr	r1, [pc, #116]	; (8001de4 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x12c>)
 8001d70:	481b      	ldr	r0, [pc, #108]	; (8001de0 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x128>)
 8001d72:	f004 ff6f 	bl	8006c54 <HAL_UART_Transmit>
				100);
		break;
 8001d76:	e02b      	b.n	8001dd0 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x118>
	}
	case LEFT_CHAR: {
		pkt->cmd =
				(bool) (isEq<BUF_CMP_t>(BWD_CHAR, bytes[7])) ?
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3307      	adds	r3, #7
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	481a      	ldr	r0, [pc, #104]	; (8001de8 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x130>)
 8001d80:	f000 f838 	bl	8001df4 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0xd6>
 8001d8a:	2205      	movs	r2, #5
 8001d8c:	e000      	b.n	8001d90 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0xd8>
 8001d8e:	2203      	movs	r2, #3
		pkt->cmd =
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	601a      	str	r2, [r3, #0]
						MOVE_LEFT_BWD : MOVE_LEFT_FWD;
		HAL_UART_Transmit(&huart3, (BUF_CMP_t*) "L CMD", sizeof("L CMD"), 100);
 8001d94:	2364      	movs	r3, #100	; 0x64
 8001d96:	2206      	movs	r2, #6
 8001d98:	4914      	ldr	r1, [pc, #80]	; (8001dec <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x134>)
 8001d9a:	4811      	ldr	r0, [pc, #68]	; (8001de0 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x128>)
 8001d9c:	f004 ff5a 	bl	8006c54 <HAL_UART_Transmit>
		break;
 8001da0:	e016      	b.n	8001dd0 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x118>
	}
	case RIGHT_CHAR: {
		pkt->cmd =
				(bool) (isEq<BUF_CMP_t>(BWD_CHAR, bytes[7])) ?
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	3307      	adds	r3, #7
 8001da6:	4619      	mov	r1, r3
 8001da8:	480f      	ldr	r0, [pc, #60]	; (8001de8 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x130>)
 8001daa:	f000 f823 	bl	8001df4 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x100>
 8001db4:	2204      	movs	r2, #4
 8001db6:	e000      	b.n	8001dba <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x102>
 8001db8:	2202      	movs	r2, #2
		pkt->cmd =
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	601a      	str	r2, [r3, #0]
						MOVE_RIGHT_BWD : MOVE_RIGHT_FWD;
		HAL_UART_Transmit(&huart3, (BUF_CMP_t*) "R CMD", sizeof("R CMD"), 100);
 8001dbe:	2364      	movs	r3, #100	; 0x64
 8001dc0:	2206      	movs	r2, #6
 8001dc2:	490b      	ldr	r1, [pc, #44]	; (8001df0 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x138>)
 8001dc4:	4806      	ldr	r0, [pc, #24]	; (8001de0 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x128>)
 8001dc6:	f004 ff45 	bl	8006c54 <HAL_UART_Transmit>
		break;
 8001dca:	e001      	b.n	8001dd0 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x118>

	}
	default:
		// something went wrong..
		return NULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	e000      	b.n	8001dd2 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x11a>
	}

	return pkt;
 8001dd0:	68bb      	ldr	r3, [r7, #8]

}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	0800e334 	.word	0x0800e334
 8001de0:	2000046c 	.word	0x2000046c
 8001de4:	0800e33c 	.word	0x0800e33c
 8001de8:	0800e390 	.word	0x0800e390
 8001dec:	0800e344 	.word	0x0800e344
 8001df0:	0800e34c 	.word	0x0800e34c

08001df4 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>:
	static void processorTask(void *pv);
private:

	static void startImpl(void * _this); //unused
	template <typename T> // no type bounds enforcement, must be uint8_t, char etc.
	static bool isEq(const T &a, const T &b)
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
	{
		return a == b;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	781a      	ldrb	r2, [r3, #0]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	bf0c      	ite	eq
 8001e0a:	2301      	moveq	r3, #1
 8001e0c:	2300      	movne	r3, #0
 8001e0e:	b2db      	uxtb	r3, r3
	}
 8001e10:	4618      	mov	r0, r3
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
PUTCHAR_PROTOTYPE {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8001e24:	1d39      	adds	r1, r7, #4
 8001e26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	4803      	ldr	r0, [pc, #12]	; (8001e3c <__io_putchar+0x20>)
 8001e2e:	f004 ff11 	bl	8006c54 <HAL_UART_Transmit>

	return ch;
 8001e32:	687b      	ldr	r3, [r7, #4]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	2000046c 	.word	0x2000046c

08001e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e44:	f001 f8ca 	bl	8002fdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e48:	f000 f832 	bl	8001eb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e4c:	f000 fb00 	bl	8002450 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e50:	f000 fad6 	bl	8002400 <MX_DMA_Init>
  MX_TIM8_Init();
 8001e54:	f000 fa00 	bl	8002258 <MX_TIM8_Init>
  MX_TIM1_Init();
 8001e58:	f000 f8b6 	bl	8001fc8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001e5c:	f000 f954 	bl	8002108 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001e60:	f000 f9a6 	bl	80021b0 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8001e64:	f000 faa2 	bl	80023ac <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001e68:	f000 f880 	bl	8001f6c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */



	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8001e6c:	4a0b      	ldr	r2, [pc, #44]	; (8001e9c <main+0x5c>)
 8001e6e:	2100      	movs	r1, #0
 8001e70:	480b      	ldr	r0, [pc, #44]	; (8001ea0 <main+0x60>)
 8001e72:	f006 f99f 	bl	80081b4 <osThreadNew>
 8001e76:	4603      	mov	r3, r0
 8001e78:	4a0a      	ldr	r2, [pc, #40]	; (8001ea4 <main+0x64>)
 8001e7a:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	defaultTaskHandle = osThreadNew(sensorTask, NULL, &sensorTask_attr);
 8001e7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ea8 <main+0x68>)
 8001e7e:	2100      	movs	r1, #0
 8001e80:	480a      	ldr	r0, [pc, #40]	; (8001eac <main+0x6c>)
 8001e82:	f006 f997 	bl	80081b4 <osThreadNew>
 8001e86:	4603      	mov	r3, r0
 8001e88:	4a06      	ldr	r2, [pc, #24]	; (8001ea4 <main+0x64>)
 8001e8a:	6013      	str	r3, [r2, #0]
	initializeCPPconstructs();
 8001e8c:	f7ff fb54 	bl	8001538 <initializeCPPconstructs>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001e90:	f006 f946 	bl	8008120 <osKernelInitialize>
/**
* @}
*/

  /* Start scheduler */
  osKernelStart();
 8001e94:	f006 f968 	bl	8008168 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001e98:	e7fe      	b.n	8001e98 <main+0x58>
 8001e9a:	bf00      	nop
 8001e9c:	0800e394 	.word	0x0800e394
 8001ea0:	08002559 	.word	0x08002559
 8001ea4:	200005a0 	.word	0x200005a0
 8001ea8:	0800e3b8 	.word	0x0800e3b8
 8001eac:	08001561 	.word	0x08001561

08001eb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b094      	sub	sp, #80	; 0x50
 8001eb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eb6:	f107 0320 	add.w	r3, r7, #32
 8001eba:	2230      	movs	r2, #48	; 0x30
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f009 f9ec 	bl	800b29c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ec4:	f107 030c 	add.w	r3, r7, #12
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60bb      	str	r3, [r7, #8]
 8001ed8:	4b22      	ldr	r3, [pc, #136]	; (8001f64 <SystemClock_Config+0xb4>)
 8001eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001edc:	4a21      	ldr	r2, [pc, #132]	; (8001f64 <SystemClock_Config+0xb4>)
 8001ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee4:	4b1f      	ldr	r3, [pc, #124]	; (8001f64 <SystemClock_Config+0xb4>)
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	4b1c      	ldr	r3, [pc, #112]	; (8001f68 <SystemClock_Config+0xb8>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a1b      	ldr	r2, [pc, #108]	; (8001f68 <SystemClock_Config+0xb8>)
 8001efa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001efe:	6013      	str	r3, [r2, #0]
 8001f00:	4b19      	ldr	r3, [pc, #100]	; (8001f68 <SystemClock_Config+0xb8>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f10:	2301      	movs	r3, #1
 8001f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f14:	2310      	movs	r3, #16
 8001f16:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f1c:	f107 0320 	add.w	r3, r7, #32
 8001f20:	4618      	mov	r0, r3
 8001f22:	f003 f83f 	bl	8004fa4 <HAL_RCC_OscConfig>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001f2c:	f000 fb2e 	bl	800258c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f30:	230f      	movs	r3, #15
 8001f32:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001f34:	2300      	movs	r3, #0
 8001f36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f40:	2300      	movs	r3, #0
 8001f42:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f44:	f107 030c 	add.w	r3, r7, #12
 8001f48:	2100      	movs	r1, #0
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f003 faa2 	bl	8005494 <HAL_RCC_ClockConfig>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001f56:	f000 fb19 	bl	800258c <Error_Handler>
  }
}
 8001f5a:	bf00      	nop
 8001f5c:	3750      	adds	r7, #80	; 0x50
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40023800 	.word	0x40023800
 8001f68:	40007000 	.word	0x40007000

08001f6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f70:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <MX_I2C1_Init+0x50>)
 8001f72:	4a13      	ldr	r2, [pc, #76]	; (8001fc0 <MX_I2C1_Init+0x54>)
 8001f74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001f76:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <MX_I2C1_Init+0x50>)
 8001f78:	4a12      	ldr	r2, [pc, #72]	; (8001fc4 <MX_I2C1_Init+0x58>)
 8001f7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f7c:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <MX_I2C1_Init+0x50>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f82:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <MX_I2C1_Init+0x50>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <MX_I2C1_Init+0x50>)
 8001f8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f8e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f90:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <MX_I2C1_Init+0x50>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f96:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <MX_I2C1_Init+0x50>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f9c:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <MX_I2C1_Init+0x50>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fa2:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <MX_I2C1_Init+0x50>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fa8:	4804      	ldr	r0, [pc, #16]	; (8001fbc <MX_I2C1_Init+0x50>)
 8001faa:	f001 ff0d 	bl	8003dc8 <HAL_I2C_Init>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001fb4:	f000 faea 	bl	800258c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fb8:	bf00      	nop
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	200002f8 	.word	0x200002f8
 8001fc0:	40005400 	.word	0x40005400
 8001fc4:	00061a80 	.word	0x00061a80

08001fc8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b096      	sub	sp, #88	; 0x58
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	605a      	str	r2, [r3, #4]
 8001fd8:	609a      	str	r2, [r3, #8]
 8001fda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fdc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]
 8001ff0:	609a      	str	r2, [r3, #8]
 8001ff2:	60da      	str	r2, [r3, #12]
 8001ff4:	611a      	str	r2, [r3, #16]
 8001ff6:	615a      	str	r2, [r3, #20]
 8001ff8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ffa:	1d3b      	adds	r3, r7, #4
 8001ffc:	2220      	movs	r2, #32
 8001ffe:	2100      	movs	r1, #0
 8002000:	4618      	mov	r0, r3
 8002002:	f009 f94b 	bl	800b29c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002006:	4b3e      	ldr	r3, [pc, #248]	; (8002100 <MX_TIM1_Init+0x138>)
 8002008:	4a3e      	ldr	r2, [pc, #248]	; (8002104 <MX_TIM1_Init+0x13c>)
 800200a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 800200c:	4b3c      	ldr	r3, [pc, #240]	; (8002100 <MX_TIM1_Init+0x138>)
 800200e:	22a0      	movs	r2, #160	; 0xa0
 8002010:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002012:	4b3b      	ldr	r3, [pc, #236]	; (8002100 <MX_TIM1_Init+0x138>)
 8002014:	2200      	movs	r2, #0
 8002016:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8002018:	4b39      	ldr	r3, [pc, #228]	; (8002100 <MX_TIM1_Init+0x138>)
 800201a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800201e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002020:	4b37      	ldr	r3, [pc, #220]	; (8002100 <MX_TIM1_Init+0x138>)
 8002022:	2200      	movs	r2, #0
 8002024:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002026:	4b36      	ldr	r3, [pc, #216]	; (8002100 <MX_TIM1_Init+0x138>)
 8002028:	2200      	movs	r2, #0
 800202a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800202c:	4b34      	ldr	r3, [pc, #208]	; (8002100 <MX_TIM1_Init+0x138>)
 800202e:	2280      	movs	r2, #128	; 0x80
 8002030:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002032:	4833      	ldr	r0, [pc, #204]	; (8002100 <MX_TIM1_Init+0x138>)
 8002034:	f003 fc80 	bl	8005938 <HAL_TIM_Base_Init>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800203e:	f000 faa5 	bl	800258c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002042:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002046:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002048:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800204c:	4619      	mov	r1, r3
 800204e:	482c      	ldr	r0, [pc, #176]	; (8002100 <MX_TIM1_Init+0x138>)
 8002050:	f004 f8c4 	bl	80061dc <HAL_TIM_ConfigClockSource>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800205a:	f000 fa97 	bl	800258c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800205e:	4828      	ldr	r0, [pc, #160]	; (8002100 <MX_TIM1_Init+0x138>)
 8002060:	f003 fd2a 	bl	8005ab8 <HAL_TIM_PWM_Init>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800206a:	f000 fa8f 	bl	800258c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800206e:	2300      	movs	r3, #0
 8002070:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002072:	2300      	movs	r3, #0
 8002074:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002076:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800207a:	4619      	mov	r1, r3
 800207c:	4820      	ldr	r0, [pc, #128]	; (8002100 <MX_TIM1_Init+0x138>)
 800207e:	f004 fcad 	bl	80069dc <HAL_TIMEx_MasterConfigSynchronization>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002088:	f000 fa80 	bl	800258c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800208c:	2360      	movs	r3, #96	; 0x60
 800208e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002094:	2300      	movs	r3, #0
 8002096:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002098:	2300      	movs	r3, #0
 800209a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800209c:	2300      	movs	r3, #0
 800209e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020a0:	2300      	movs	r3, #0
 80020a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020a4:	2300      	movs	r3, #0
 80020a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ac:	2200      	movs	r2, #0
 80020ae:	4619      	mov	r1, r3
 80020b0:	4813      	ldr	r0, [pc, #76]	; (8002100 <MX_TIM1_Init+0x138>)
 80020b2:	f003 ffd1 	bl	8006058 <HAL_TIM_PWM_ConfigChannel>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80020bc:	f000 fa66 	bl	800258c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020c0:	2300      	movs	r3, #0
 80020c2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020c4:	2300      	movs	r3, #0
 80020c6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020c8:	2300      	movs	r3, #0
 80020ca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020d8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020da:	2300      	movs	r3, #0
 80020dc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80020de:	1d3b      	adds	r3, r7, #4
 80020e0:	4619      	mov	r1, r3
 80020e2:	4807      	ldr	r0, [pc, #28]	; (8002100 <MX_TIM1_Init+0x138>)
 80020e4:	f004 fcf6 	bl	8006ad4 <HAL_TIMEx_ConfigBreakDeadTime>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80020ee:	f000 fa4d 	bl	800258c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80020f2:	4803      	ldr	r0, [pc, #12]	; (8002100 <MX_TIM1_Init+0x138>)
 80020f4:	f000 fbdc 	bl	80028b0 <HAL_TIM_MspPostInit>

}
 80020f8:	bf00      	nop
 80020fa:	3758      	adds	r7, #88	; 0x58
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	2000034c 	.word	0x2000034c
 8002104:	40010000 	.word	0x40010000

08002108 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08c      	sub	sp, #48	; 0x30
 800210c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800210e:	f107 030c 	add.w	r3, r7, #12
 8002112:	2224      	movs	r2, #36	; 0x24
 8002114:	2100      	movs	r1, #0
 8002116:	4618      	mov	r0, r3
 8002118:	f009 f8c0 	bl	800b29c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800211c:	1d3b      	adds	r3, r7, #4
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002124:	4b21      	ldr	r3, [pc, #132]	; (80021ac <MX_TIM2_Init+0xa4>)
 8002126:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800212a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800212c:	4b1f      	ldr	r3, [pc, #124]	; (80021ac <MX_TIM2_Init+0xa4>)
 800212e:	2200      	movs	r2, #0
 8002130:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002132:	4b1e      	ldr	r3, [pc, #120]	; (80021ac <MX_TIM2_Init+0xa4>)
 8002134:	2200      	movs	r2, #0
 8002136:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002138:	4b1c      	ldr	r3, [pc, #112]	; (80021ac <MX_TIM2_Init+0xa4>)
 800213a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800213e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002140:	4b1a      	ldr	r3, [pc, #104]	; (80021ac <MX_TIM2_Init+0xa4>)
 8002142:	2200      	movs	r2, #0
 8002144:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002146:	4b19      	ldr	r3, [pc, #100]	; (80021ac <MX_TIM2_Init+0xa4>)
 8002148:	2200      	movs	r2, #0
 800214a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800214c:	2303      	movs	r3, #3
 800214e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002150:	2300      	movs	r3, #0
 8002152:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002154:	2301      	movs	r3, #1
 8002156:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002158:	2300      	movs	r3, #0
 800215a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800215c:	230a      	movs	r3, #10
 800215e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002160:	2300      	movs	r3, #0
 8002162:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002164:	2301      	movs	r3, #1
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002168:	2300      	movs	r3, #0
 800216a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800216c:	2300      	movs	r3, #0
 800216e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002170:	f107 030c 	add.w	r3, r7, #12
 8002174:	4619      	mov	r1, r3
 8002176:	480d      	ldr	r0, [pc, #52]	; (80021ac <MX_TIM2_Init+0xa4>)
 8002178:	f003 fdc0 	bl	8005cfc <HAL_TIM_Encoder_Init>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002182:	f000 fa03 	bl	800258c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002186:	2300      	movs	r3, #0
 8002188:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800218a:	2300      	movs	r3, #0
 800218c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800218e:	1d3b      	adds	r3, r7, #4
 8002190:	4619      	mov	r1, r3
 8002192:	4806      	ldr	r0, [pc, #24]	; (80021ac <MX_TIM2_Init+0xa4>)
 8002194:	f004 fc22 	bl	80069dc <HAL_TIMEx_MasterConfigSynchronization>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800219e:	f000 f9f5 	bl	800258c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80021a2:	bf00      	nop
 80021a4:	3730      	adds	r7, #48	; 0x30
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20000394 	.word	0x20000394

080021b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08c      	sub	sp, #48	; 0x30
 80021b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80021b6:	f107 030c 	add.w	r3, r7, #12
 80021ba:	2224      	movs	r2, #36	; 0x24
 80021bc:	2100      	movs	r1, #0
 80021be:	4618      	mov	r0, r3
 80021c0:	f009 f86c 	bl	800b29c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021c4:	1d3b      	adds	r3, r7, #4
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021cc:	4b20      	ldr	r3, [pc, #128]	; (8002250 <MX_TIM3_Init+0xa0>)
 80021ce:	4a21      	ldr	r2, [pc, #132]	; (8002254 <MX_TIM3_Init+0xa4>)
 80021d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80021d2:	4b1f      	ldr	r3, [pc, #124]	; (8002250 <MX_TIM3_Init+0xa0>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d8:	4b1d      	ldr	r3, [pc, #116]	; (8002250 <MX_TIM3_Init+0xa0>)
 80021da:	2200      	movs	r2, #0
 80021dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80021de:	4b1c      	ldr	r3, [pc, #112]	; (8002250 <MX_TIM3_Init+0xa0>)
 80021e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021e6:	4b1a      	ldr	r3, [pc, #104]	; (8002250 <MX_TIM3_Init+0xa0>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ec:	4b18      	ldr	r3, [pc, #96]	; (8002250 <MX_TIM3_Init+0xa0>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80021f2:	2303      	movs	r3, #3
 80021f4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80021f6:	2300      	movs	r3, #0
 80021f8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80021fa:	2301      	movs	r3, #1
 80021fc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80021fe:	2300      	movs	r3, #0
 8002200:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002202:	230a      	movs	r3, #10
 8002204:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002206:	2300      	movs	r3, #0
 8002208:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800220a:	2301      	movs	r3, #1
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800220e:	2300      	movs	r3, #0
 8002210:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002212:	2300      	movs	r3, #0
 8002214:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002216:	f107 030c 	add.w	r3, r7, #12
 800221a:	4619      	mov	r1, r3
 800221c:	480c      	ldr	r0, [pc, #48]	; (8002250 <MX_TIM3_Init+0xa0>)
 800221e:	f003 fd6d 	bl	8005cfc <HAL_TIM_Encoder_Init>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002228:	f000 f9b0 	bl	800258c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800222c:	2300      	movs	r3, #0
 800222e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002230:	2300      	movs	r3, #0
 8002232:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002234:	1d3b      	adds	r3, r7, #4
 8002236:	4619      	mov	r1, r3
 8002238:	4805      	ldr	r0, [pc, #20]	; (8002250 <MX_TIM3_Init+0xa0>)
 800223a:	f004 fbcf 	bl	80069dc <HAL_TIMEx_MasterConfigSynchronization>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002244:	f000 f9a2 	bl	800258c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002248:	bf00      	nop
 800224a:	3730      	adds	r7, #48	; 0x30
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	200003dc 	.word	0x200003dc
 8002254:	40000400 	.word	0x40000400

08002258 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b096      	sub	sp, #88	; 0x58
 800225c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800225e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	605a      	str	r2, [r3, #4]
 8002268:	609a      	str	r2, [r3, #8]
 800226a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800226c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	605a      	str	r2, [r3, #4]
 8002280:	609a      	str	r2, [r3, #8]
 8002282:	60da      	str	r2, [r3, #12]
 8002284:	611a      	str	r2, [r3, #16]
 8002286:	615a      	str	r2, [r3, #20]
 8002288:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800228a:	1d3b      	adds	r3, r7, #4
 800228c:	2220      	movs	r2, #32
 800228e:	2100      	movs	r1, #0
 8002290:	4618      	mov	r0, r3
 8002292:	f009 f803 	bl	800b29c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002296:	4b43      	ldr	r3, [pc, #268]	; (80023a4 <MX_TIM8_Init+0x14c>)
 8002298:	4a43      	ldr	r2, [pc, #268]	; (80023a8 <MX_TIM8_Init+0x150>)
 800229a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800229c:	4b41      	ldr	r3, [pc, #260]	; (80023a4 <MX_TIM8_Init+0x14c>)
 800229e:	2200      	movs	r2, #0
 80022a0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a2:	4b40      	ldr	r3, [pc, #256]	; (80023a4 <MX_TIM8_Init+0x14c>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 80022a8:	4b3e      	ldr	r3, [pc, #248]	; (80023a4 <MX_TIM8_Init+0x14c>)
 80022aa:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80022ae:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022b0:	4b3c      	ldr	r3, [pc, #240]	; (80023a4 <MX_TIM8_Init+0x14c>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80022b6:	4b3b      	ldr	r3, [pc, #236]	; (80023a4 <MX_TIM8_Init+0x14c>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022bc:	4b39      	ldr	r3, [pc, #228]	; (80023a4 <MX_TIM8_Init+0x14c>)
 80022be:	2200      	movs	r2, #0
 80022c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80022c2:	4838      	ldr	r0, [pc, #224]	; (80023a4 <MX_TIM8_Init+0x14c>)
 80022c4:	f003 fb38 	bl	8005938 <HAL_TIM_Base_Init>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80022ce:	f000 f95d 	bl	800258c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022d6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80022d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80022dc:	4619      	mov	r1, r3
 80022de:	4831      	ldr	r0, [pc, #196]	; (80023a4 <MX_TIM8_Init+0x14c>)
 80022e0:	f003 ff7c 	bl	80061dc <HAL_TIM_ConfigClockSource>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80022ea:	f000 f94f 	bl	800258c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80022ee:	482d      	ldr	r0, [pc, #180]	; (80023a4 <MX_TIM8_Init+0x14c>)
 80022f0:	f003 fbe2 	bl	8005ab8 <HAL_TIM_PWM_Init>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80022fa:	f000 f947 	bl	800258c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022fe:	2300      	movs	r3, #0
 8002300:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002302:	2300      	movs	r3, #0
 8002304:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002306:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800230a:	4619      	mov	r1, r3
 800230c:	4825      	ldr	r0, [pc, #148]	; (80023a4 <MX_TIM8_Init+0x14c>)
 800230e:	f004 fb65 	bl	80069dc <HAL_TIMEx_MasterConfigSynchronization>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002318:	f000 f938 	bl	800258c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800231c:	2360      	movs	r3, #96	; 0x60
 800231e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002320:	2300      	movs	r3, #0
 8002322:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002324:	2300      	movs	r3, #0
 8002326:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002328:	2300      	movs	r3, #0
 800232a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800232c:	2300      	movs	r3, #0
 800232e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002330:	2300      	movs	r3, #0
 8002332:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002334:	2300      	movs	r3, #0
 8002336:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002338:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800233c:	2200      	movs	r2, #0
 800233e:	4619      	mov	r1, r3
 8002340:	4818      	ldr	r0, [pc, #96]	; (80023a4 <MX_TIM8_Init+0x14c>)
 8002342:	f003 fe89 	bl	8006058 <HAL_TIM_PWM_ConfigChannel>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 800234c:	f000 f91e 	bl	800258c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002350:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002354:	2204      	movs	r2, #4
 8002356:	4619      	mov	r1, r3
 8002358:	4812      	ldr	r0, [pc, #72]	; (80023a4 <MX_TIM8_Init+0x14c>)
 800235a:	f003 fe7d 	bl	8006058 <HAL_TIM_PWM_ConfigChannel>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8002364:	f000 f912 	bl	800258c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002368:	2300      	movs	r3, #0
 800236a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800236c:	2300      	movs	r3, #0
 800236e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002370:	2300      	movs	r3, #0
 8002372:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002374:	2300      	movs	r3, #0
 8002376:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800237c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002380:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002382:	2300      	movs	r3, #0
 8002384:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002386:	1d3b      	adds	r3, r7, #4
 8002388:	4619      	mov	r1, r3
 800238a:	4806      	ldr	r0, [pc, #24]	; (80023a4 <MX_TIM8_Init+0x14c>)
 800238c:	f004 fba2 	bl	8006ad4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8002396:	f000 f8f9 	bl	800258c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800239a:	bf00      	nop
 800239c:	3758      	adds	r7, #88	; 0x58
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20000424 	.word	0x20000424
 80023a8:	40010400 	.word	0x40010400

080023ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <MX_USART3_UART_Init+0x4c>)
 80023b2:	4a12      	ldr	r2, [pc, #72]	; (80023fc <MX_USART3_UART_Init+0x50>)
 80023b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80023b6:	4b10      	ldr	r3, [pc, #64]	; (80023f8 <MX_USART3_UART_Init+0x4c>)
 80023b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80023be:	4b0e      	ldr	r3, [pc, #56]	; (80023f8 <MX_USART3_UART_Init+0x4c>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80023c4:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <MX_USART3_UART_Init+0x4c>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80023ca:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <MX_USART3_UART_Init+0x4c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023d0:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <MX_USART3_UART_Init+0x4c>)
 80023d2:	220c      	movs	r2, #12
 80023d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023d6:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <MX_USART3_UART_Init+0x4c>)
 80023d8:	2200      	movs	r2, #0
 80023da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80023dc:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <MX_USART3_UART_Init+0x4c>)
 80023de:	2200      	movs	r2, #0
 80023e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023e2:	4805      	ldr	r0, [pc, #20]	; (80023f8 <MX_USART3_UART_Init+0x4c>)
 80023e4:	f004 fbdc 	bl	8006ba0 <HAL_UART_Init>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80023ee:	f000 f8cd 	bl	800258c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	2000046c 	.word	0x2000046c
 80023fc:	40004800 	.word	0x40004800

08002400 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	607b      	str	r3, [r7, #4]
 800240a:	4b10      	ldr	r3, [pc, #64]	; (800244c <MX_DMA_Init+0x4c>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	4a0f      	ldr	r2, [pc, #60]	; (800244c <MX_DMA_Init+0x4c>)
 8002410:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002414:	6313      	str	r3, [r2, #48]	; 0x30
 8002416:	4b0d      	ldr	r3, [pc, #52]	; (800244c <MX_DMA_Init+0x4c>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800241e:	607b      	str	r3, [r7, #4]
 8002420:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002422:	2200      	movs	r2, #0
 8002424:	2105      	movs	r1, #5
 8002426:	200c      	movs	r0, #12
 8002428:	f000 fed2 	bl	80031d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800242c:	200c      	movs	r0, #12
 800242e:	f000 feeb 	bl	8003208 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002432:	2200      	movs	r2, #0
 8002434:	2105      	movs	r1, #5
 8002436:	200e      	movs	r0, #14
 8002438:	f000 feca 	bl	80031d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800243c:	200e      	movs	r0, #14
 800243e:	f000 fee3 	bl	8003208 <HAL_NVIC_EnableIRQ>

}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40023800 	.word	0x40023800

08002450 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b08a      	sub	sp, #40	; 0x28
 8002454:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002456:	f107 0314 	add.w	r3, r7, #20
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	605a      	str	r2, [r3, #4]
 8002460:	609a      	str	r2, [r3, #8]
 8002462:	60da      	str	r2, [r3, #12]
 8002464:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	613b      	str	r3, [r7, #16]
 800246a:	4b38      	ldr	r3, [pc, #224]	; (800254c <MX_GPIO_Init+0xfc>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	4a37      	ldr	r2, [pc, #220]	; (800254c <MX_GPIO_Init+0xfc>)
 8002470:	f043 0310 	orr.w	r3, r3, #16
 8002474:	6313      	str	r3, [r2, #48]	; 0x30
 8002476:	4b35      	ldr	r3, [pc, #212]	; (800254c <MX_GPIO_Init+0xfc>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	f003 0310 	and.w	r3, r3, #16
 800247e:	613b      	str	r3, [r7, #16]
 8002480:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	4b31      	ldr	r3, [pc, #196]	; (800254c <MX_GPIO_Init+0xfc>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	4a30      	ldr	r2, [pc, #192]	; (800254c <MX_GPIO_Init+0xfc>)
 800248c:	f043 0301 	orr.w	r3, r3, #1
 8002490:	6313      	str	r3, [r2, #48]	; 0x30
 8002492:	4b2e      	ldr	r3, [pc, #184]	; (800254c <MX_GPIO_Init+0xfc>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	4b2a      	ldr	r3, [pc, #168]	; (800254c <MX_GPIO_Init+0xfc>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	4a29      	ldr	r2, [pc, #164]	; (800254c <MX_GPIO_Init+0xfc>)
 80024a8:	f043 0304 	orr.w	r3, r3, #4
 80024ac:	6313      	str	r3, [r2, #48]	; 0x30
 80024ae:	4b27      	ldr	r3, [pc, #156]	; (800254c <MX_GPIO_Init+0xfc>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	f003 0304 	and.w	r3, r3, #4
 80024b6:	60bb      	str	r3, [r7, #8]
 80024b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	607b      	str	r3, [r7, #4]
 80024be:	4b23      	ldr	r3, [pc, #140]	; (800254c <MX_GPIO_Init+0xfc>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	4a22      	ldr	r2, [pc, #136]	; (800254c <MX_GPIO_Init+0xfc>)
 80024c4:	f043 0302 	orr.w	r3, r3, #2
 80024c8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ca:	4b20      	ldr	r3, [pc, #128]	; (800254c <MX_GPIO_Init+0xfc>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	607b      	str	r3, [r7, #4]
 80024d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCLK_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 80024d6:	2200      	movs	r2, #0
 80024d8:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 80024dc:	481c      	ldr	r0, [pc, #112]	; (8002550 <MX_GPIO_Init+0x100>)
 80024de:	f001 fc3f 	bl	8003d60 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 80024e2:	2200      	movs	r2, #0
 80024e4:	213c      	movs	r1, #60	; 0x3c
 80024e6:	481b      	ldr	r0, [pc, #108]	; (8002554 <MX_GPIO_Init+0x104>)
 80024e8:	f001 fc3a 	bl	8003d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCLK_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin;
 80024ec:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80024f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024f2:	2301      	movs	r3, #1
 80024f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fa:	2300      	movs	r3, #0
 80024fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024fe:	f107 0314 	add.w	r3, r7, #20
 8002502:	4619      	mov	r1, r3
 8002504:	4812      	ldr	r0, [pc, #72]	; (8002550 <MX_GPIO_Init+0x100>)
 8002506:	f001 fa8f 	bl	8003a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 800250a:	233c      	movs	r3, #60	; 0x3c
 800250c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800250e:	2301      	movs	r3, #1
 8002510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002512:	2300      	movs	r3, #0
 8002514:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002516:	2302      	movs	r3, #2
 8002518:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251a:	f107 0314 	add.w	r3, r7, #20
 800251e:	4619      	mov	r1, r3
 8002520:	480c      	ldr	r0, [pc, #48]	; (8002554 <MX_GPIO_Init+0x104>)
 8002522:	f001 fa81 	bl	8003a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8002526:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800252a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800252c:	2301      	movs	r3, #1
 800252e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	2300      	movs	r3, #0
 8002532:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002534:	2301      	movs	r3, #1
 8002536:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8002538:	f107 0314 	add.w	r3, r7, #20
 800253c:	4619      	mov	r1, r3
 800253e:	4804      	ldr	r0, [pc, #16]	; (8002550 <MX_GPIO_Init+0x100>)
 8002540:	f001 fa72 	bl	8003a28 <HAL_GPIO_Init>

}
 8002544:	bf00      	nop
 8002546:	3728      	adds	r7, #40	; 0x28
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40023800 	.word	0x40023800
 8002550:	40021000 	.word	0x40021000
 8002554:	40020000 	.word	0x40020000

08002558 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]

	for (;;) {


		//OLED_Refresh_Gram(); // Refresh Ram
		osDelay(50);
 8002560:	2032      	movs	r0, #50	; 0x32
 8002562:	f005 fedb 	bl	800831c <osDelay>
 8002566:	e7fb      	b.n	8002560 <StartDefaultTask+0x8>

08002568 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a04      	ldr	r2, [pc, #16]	; (8002588 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d101      	bne.n	800257e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800257a:	f000 fd51 	bl	8003020 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40001400 	.word	0x40001400

0800258c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002590:	b672      	cpsid	i
}
 8002592:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002594:	e7fe      	b.n	8002594 <Error_Handler+0x8>
	...

08002598 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	607b      	str	r3, [r7, #4]
 80025a2:	4b12      	ldr	r3, [pc, #72]	; (80025ec <HAL_MspInit+0x54>)
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	4a11      	ldr	r2, [pc, #68]	; (80025ec <HAL_MspInit+0x54>)
 80025a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025ac:	6453      	str	r3, [r2, #68]	; 0x44
 80025ae:	4b0f      	ldr	r3, [pc, #60]	; (80025ec <HAL_MspInit+0x54>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025b6:	607b      	str	r3, [r7, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	603b      	str	r3, [r7, #0]
 80025be:	4b0b      	ldr	r3, [pc, #44]	; (80025ec <HAL_MspInit+0x54>)
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	4a0a      	ldr	r2, [pc, #40]	; (80025ec <HAL_MspInit+0x54>)
 80025c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c8:	6413      	str	r3, [r2, #64]	; 0x40
 80025ca:	4b08      	ldr	r3, [pc, #32]	; (80025ec <HAL_MspInit+0x54>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d2:	603b      	str	r3, [r7, #0]
 80025d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80025d6:	2200      	movs	r2, #0
 80025d8:	210f      	movs	r1, #15
 80025da:	f06f 0001 	mvn.w	r0, #1
 80025de:	f000 fdf7 	bl	80031d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025e2:	bf00      	nop
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40023800 	.word	0x40023800

080025f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08a      	sub	sp, #40	; 0x28
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f8:	f107 0314 	add.w	r3, r7, #20
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	605a      	str	r2, [r3, #4]
 8002602:	609a      	str	r2, [r3, #8]
 8002604:	60da      	str	r2, [r3, #12]
 8002606:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a19      	ldr	r2, [pc, #100]	; (8002674 <HAL_I2C_MspInit+0x84>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d12c      	bne.n	800266c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	613b      	str	r3, [r7, #16]
 8002616:	4b18      	ldr	r3, [pc, #96]	; (8002678 <HAL_I2C_MspInit+0x88>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	4a17      	ldr	r2, [pc, #92]	; (8002678 <HAL_I2C_MspInit+0x88>)
 800261c:	f043 0302 	orr.w	r3, r3, #2
 8002620:	6313      	str	r3, [r2, #48]	; 0x30
 8002622:	4b15      	ldr	r3, [pc, #84]	; (8002678 <HAL_I2C_MspInit+0x88>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	613b      	str	r3, [r7, #16]
 800262c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800262e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002632:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002634:	2312      	movs	r3, #18
 8002636:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002638:	2300      	movs	r3, #0
 800263a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800263c:	2303      	movs	r3, #3
 800263e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002640:	2304      	movs	r3, #4
 8002642:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002644:	f107 0314 	add.w	r3, r7, #20
 8002648:	4619      	mov	r1, r3
 800264a:	480c      	ldr	r0, [pc, #48]	; (800267c <HAL_I2C_MspInit+0x8c>)
 800264c:	f001 f9ec 	bl	8003a28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002650:	2300      	movs	r3, #0
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	4b08      	ldr	r3, [pc, #32]	; (8002678 <HAL_I2C_MspInit+0x88>)
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	4a07      	ldr	r2, [pc, #28]	; (8002678 <HAL_I2C_MspInit+0x88>)
 800265a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800265e:	6413      	str	r3, [r2, #64]	; 0x40
 8002660:	4b05      	ldr	r3, [pc, #20]	; (8002678 <HAL_I2C_MspInit+0x88>)
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800266c:	bf00      	nop
 800266e:	3728      	adds	r7, #40	; 0x28
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40005400 	.word	0x40005400
 8002678:	40023800 	.word	0x40023800
 800267c:	40020400 	.word	0x40020400

08002680 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b08c      	sub	sp, #48	; 0x30
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002688:	f107 031c 	add.w	r3, r7, #28
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	605a      	str	r2, [r3, #4]
 8002692:	609a      	str	r2, [r3, #8]
 8002694:	60da      	str	r2, [r3, #12]
 8002696:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a32      	ldr	r2, [pc, #200]	; (8002768 <HAL_TIM_Base_MspInit+0xe8>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d12d      	bne.n	80026fe <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	61bb      	str	r3, [r7, #24]
 80026a6:	4b31      	ldr	r3, [pc, #196]	; (800276c <HAL_TIM_Base_MspInit+0xec>)
 80026a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026aa:	4a30      	ldr	r2, [pc, #192]	; (800276c <HAL_TIM_Base_MspInit+0xec>)
 80026ac:	f043 0301 	orr.w	r3, r3, #1
 80026b0:	6453      	str	r3, [r2, #68]	; 0x44
 80026b2:	4b2e      	ldr	r3, [pc, #184]	; (800276c <HAL_TIM_Base_MspInit+0xec>)
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	61bb      	str	r3, [r7, #24]
 80026bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	617b      	str	r3, [r7, #20]
 80026c2:	4b2a      	ldr	r3, [pc, #168]	; (800276c <HAL_TIM_Base_MspInit+0xec>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	4a29      	ldr	r2, [pc, #164]	; (800276c <HAL_TIM_Base_MspInit+0xec>)
 80026c8:	f043 0310 	orr.w	r3, r3, #16
 80026cc:	6313      	str	r3, [r2, #48]	; 0x30
 80026ce:	4b27      	ldr	r3, [pc, #156]	; (800276c <HAL_TIM_Base_MspInit+0xec>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	f003 0310 	and.w	r3, r3, #16
 80026d6:	617b      	str	r3, [r7, #20]
 80026d8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Servo_Pin;
 80026da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e0:	2302      	movs	r3, #2
 80026e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e8:	2300      	movs	r3, #0
 80026ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80026ec:	2301      	movs	r3, #1
 80026ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Servo_GPIO_Port, &GPIO_InitStruct);
 80026f0:	f107 031c 	add.w	r3, r7, #28
 80026f4:	4619      	mov	r1, r3
 80026f6:	481e      	ldr	r0, [pc, #120]	; (8002770 <HAL_TIM_Base_MspInit+0xf0>)
 80026f8:	f001 f996 	bl	8003a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80026fc:	e030      	b.n	8002760 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM8)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a1c      	ldr	r2, [pc, #112]	; (8002774 <HAL_TIM_Base_MspInit+0xf4>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d12b      	bne.n	8002760 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002708:	2300      	movs	r3, #0
 800270a:	613b      	str	r3, [r7, #16]
 800270c:	4b17      	ldr	r3, [pc, #92]	; (800276c <HAL_TIM_Base_MspInit+0xec>)
 800270e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002710:	4a16      	ldr	r2, [pc, #88]	; (800276c <HAL_TIM_Base_MspInit+0xec>)
 8002712:	f043 0302 	orr.w	r3, r3, #2
 8002716:	6453      	str	r3, [r2, #68]	; 0x44
 8002718:	4b14      	ldr	r3, [pc, #80]	; (800276c <HAL_TIM_Base_MspInit+0xec>)
 800271a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002724:	2300      	movs	r3, #0
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	4b10      	ldr	r3, [pc, #64]	; (800276c <HAL_TIM_Base_MspInit+0xec>)
 800272a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272c:	4a0f      	ldr	r2, [pc, #60]	; (800276c <HAL_TIM_Base_MspInit+0xec>)
 800272e:	f043 0304 	orr.w	r3, r3, #4
 8002732:	6313      	str	r3, [r2, #48]	; 0x30
 8002734:	4b0d      	ldr	r3, [pc, #52]	; (800276c <HAL_TIM_Base_MspInit+0xec>)
 8002736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8002740:	23c0      	movs	r3, #192	; 0xc0
 8002742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002744:	2302      	movs	r3, #2
 8002746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002748:	2300      	movs	r3, #0
 800274a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274c:	2300      	movs	r3, #0
 800274e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002750:	2303      	movs	r3, #3
 8002752:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002754:	f107 031c 	add.w	r3, r7, #28
 8002758:	4619      	mov	r1, r3
 800275a:	4807      	ldr	r0, [pc, #28]	; (8002778 <HAL_TIM_Base_MspInit+0xf8>)
 800275c:	f001 f964 	bl	8003a28 <HAL_GPIO_Init>
}
 8002760:	bf00      	nop
 8002762:	3730      	adds	r7, #48	; 0x30
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40010000 	.word	0x40010000
 800276c:	40023800 	.word	0x40023800
 8002770:	40021000 	.word	0x40021000
 8002774:	40010400 	.word	0x40010400
 8002778:	40020800 	.word	0x40020800

0800277c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08c      	sub	sp, #48	; 0x30
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002784:	f107 031c 	add.w	r3, r7, #28
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	60da      	str	r2, [r3, #12]
 8002792:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800279c:	d14b      	bne.n	8002836 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	61bb      	str	r3, [r7, #24]
 80027a2:	4b3f      	ldr	r3, [pc, #252]	; (80028a0 <HAL_TIM_Encoder_MspInit+0x124>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	4a3e      	ldr	r2, [pc, #248]	; (80028a0 <HAL_TIM_Encoder_MspInit+0x124>)
 80027a8:	f043 0301 	orr.w	r3, r3, #1
 80027ac:	6413      	str	r3, [r2, #64]	; 0x40
 80027ae:	4b3c      	ldr	r3, [pc, #240]	; (80028a0 <HAL_TIM_Encoder_MspInit+0x124>)
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	61bb      	str	r3, [r7, #24]
 80027b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
 80027be:	4b38      	ldr	r3, [pc, #224]	; (80028a0 <HAL_TIM_Encoder_MspInit+0x124>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	4a37      	ldr	r2, [pc, #220]	; (80028a0 <HAL_TIM_Encoder_MspInit+0x124>)
 80027c4:	f043 0301 	orr.w	r3, r3, #1
 80027c8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ca:	4b35      	ldr	r3, [pc, #212]	; (80028a0 <HAL_TIM_Encoder_MspInit+0x124>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	4b31      	ldr	r3, [pc, #196]	; (80028a0 <HAL_TIM_Encoder_MspInit+0x124>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	4a30      	ldr	r2, [pc, #192]	; (80028a0 <HAL_TIM_Encoder_MspInit+0x124>)
 80027e0:	f043 0302 	orr.w	r3, r3, #2
 80027e4:	6313      	str	r3, [r2, #48]	; 0x30
 80027e6:	4b2e      	ldr	r3, [pc, #184]	; (80028a0 <HAL_TIM_Encoder_MspInit+0x124>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	613b      	str	r3, [r7, #16]
 80027f0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80027f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f8:	2302      	movs	r3, #2
 80027fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002800:	2300      	movs	r3, #0
 8002802:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002804:	2301      	movs	r3, #1
 8002806:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002808:	f107 031c 	add.w	r3, r7, #28
 800280c:	4619      	mov	r1, r3
 800280e:	4825      	ldr	r0, [pc, #148]	; (80028a4 <HAL_TIM_Encoder_MspInit+0x128>)
 8002810:	f001 f90a 	bl	8003a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002814:	2308      	movs	r3, #8
 8002816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002818:	2302      	movs	r3, #2
 800281a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281c:	2300      	movs	r3, #0
 800281e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002820:	2300      	movs	r3, #0
 8002822:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002824:	2301      	movs	r3, #1
 8002826:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002828:	f107 031c 	add.w	r3, r7, #28
 800282c:	4619      	mov	r1, r3
 800282e:	481e      	ldr	r0, [pc, #120]	; (80028a8 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002830:	f001 f8fa 	bl	8003a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002834:	e030      	b.n	8002898 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a1c      	ldr	r2, [pc, #112]	; (80028ac <HAL_TIM_Encoder_MspInit+0x130>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d12b      	bne.n	8002898 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002840:	2300      	movs	r3, #0
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	4b16      	ldr	r3, [pc, #88]	; (80028a0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002848:	4a15      	ldr	r2, [pc, #84]	; (80028a0 <HAL_TIM_Encoder_MspInit+0x124>)
 800284a:	f043 0302 	orr.w	r3, r3, #2
 800284e:	6413      	str	r3, [r2, #64]	; 0x40
 8002850:	4b13      	ldr	r3, [pc, #76]	; (80028a0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800285c:	2300      	movs	r3, #0
 800285e:	60bb      	str	r3, [r7, #8]
 8002860:	4b0f      	ldr	r3, [pc, #60]	; (80028a0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002864:	4a0e      	ldr	r2, [pc, #56]	; (80028a0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002866:	f043 0301 	orr.w	r3, r3, #1
 800286a:	6313      	str	r3, [r2, #48]	; 0x30
 800286c:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <HAL_TIM_Encoder_MspInit+0x124>)
 800286e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002878:	23c0      	movs	r3, #192	; 0xc0
 800287a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287c:	2302      	movs	r3, #2
 800287e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002880:	2300      	movs	r3, #0
 8002882:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002884:	2300      	movs	r3, #0
 8002886:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002888:	2302      	movs	r3, #2
 800288a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800288c:	f107 031c 	add.w	r3, r7, #28
 8002890:	4619      	mov	r1, r3
 8002892:	4804      	ldr	r0, [pc, #16]	; (80028a4 <HAL_TIM_Encoder_MspInit+0x128>)
 8002894:	f001 f8c8 	bl	8003a28 <HAL_GPIO_Init>
}
 8002898:	bf00      	nop
 800289a:	3730      	adds	r7, #48	; 0x30
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40023800 	.word	0x40023800
 80028a4:	40020000 	.word	0x40020000
 80028a8:	40020400 	.word	0x40020400
 80028ac:	40000400 	.word	0x40000400

080028b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b8:	f107 030c 	add.w	r3, r7, #12
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	60da      	str	r2, [r3, #12]
 80028c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a12      	ldr	r2, [pc, #72]	; (8002918 <HAL_TIM_MspPostInit+0x68>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d11e      	bne.n	8002910 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	60bb      	str	r3, [r7, #8]
 80028d6:	4b11      	ldr	r3, [pc, #68]	; (800291c <HAL_TIM_MspPostInit+0x6c>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	4a10      	ldr	r2, [pc, #64]	; (800291c <HAL_TIM_MspPostInit+0x6c>)
 80028dc:	f043 0310 	orr.w	r3, r3, #16
 80028e0:	6313      	str	r3, [r2, #48]	; 0x30
 80028e2:	4b0e      	ldr	r3, [pc, #56]	; (800291c <HAL_TIM_MspPostInit+0x6c>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	f003 0310 	and.w	r3, r3, #16
 80028ea:	60bb      	str	r3, [r7, #8]
 80028ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f4:	2302      	movs	r3, #2
 80028f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fc:	2300      	movs	r3, #0
 80028fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002900:	2301      	movs	r3, #1
 8002902:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002904:	f107 030c 	add.w	r3, r7, #12
 8002908:	4619      	mov	r1, r3
 800290a:	4805      	ldr	r0, [pc, #20]	; (8002920 <HAL_TIM_MspPostInit+0x70>)
 800290c:	f001 f88c 	bl	8003a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002910:	bf00      	nop
 8002912:	3720      	adds	r7, #32
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40010000 	.word	0x40010000
 800291c:	40023800 	.word	0x40023800
 8002920:	40021000 	.word	0x40021000

08002924 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b08a      	sub	sp, #40	; 0x28
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800292c:	f107 0314 	add.w	r3, r7, #20
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	605a      	str	r2, [r3, #4]
 8002936:	609a      	str	r2, [r3, #8]
 8002938:	60da      	str	r2, [r3, #12]
 800293a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a5d      	ldr	r2, [pc, #372]	; (8002ab8 <HAL_UART_MspInit+0x194>)
 8002942:	4293      	cmp	r3, r2
 8002944:	f040 80b4 	bne.w	8002ab0 <HAL_UART_MspInit+0x18c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002948:	2300      	movs	r3, #0
 800294a:	613b      	str	r3, [r7, #16]
 800294c:	4b5b      	ldr	r3, [pc, #364]	; (8002abc <HAL_UART_MspInit+0x198>)
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002950:	4a5a      	ldr	r2, [pc, #360]	; (8002abc <HAL_UART_MspInit+0x198>)
 8002952:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002956:	6413      	str	r3, [r2, #64]	; 0x40
 8002958:	4b58      	ldr	r3, [pc, #352]	; (8002abc <HAL_UART_MspInit+0x198>)
 800295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002964:	2300      	movs	r3, #0
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	4b54      	ldr	r3, [pc, #336]	; (8002abc <HAL_UART_MspInit+0x198>)
 800296a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296c:	4a53      	ldr	r2, [pc, #332]	; (8002abc <HAL_UART_MspInit+0x198>)
 800296e:	f043 0304 	orr.w	r3, r3, #4
 8002972:	6313      	str	r3, [r2, #48]	; 0x30
 8002974:	4b51      	ldr	r3, [pc, #324]	; (8002abc <HAL_UART_MspInit+0x198>)
 8002976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002980:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002986:	2302      	movs	r3, #2
 8002988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298a:	2300      	movs	r3, #0
 800298c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800298e:	2302      	movs	r3, #2
 8002990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002992:	2307      	movs	r3, #7
 8002994:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002996:	f107 0314 	add.w	r3, r7, #20
 800299a:	4619      	mov	r1, r3
 800299c:	4848      	ldr	r0, [pc, #288]	; (8002ac0 <HAL_UART_MspInit+0x19c>)
 800299e:	f001 f843 	bl	8003a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80029a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a8:	2302      	movs	r3, #2
 80029aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80029ac:	2302      	movs	r3, #2
 80029ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029b0:	2302      	movs	r3, #2
 80029b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80029b4:	2307      	movs	r3, #7
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029b8:	f107 0314 	add.w	r3, r7, #20
 80029bc:	4619      	mov	r1, r3
 80029be:	4840      	ldr	r0, [pc, #256]	; (8002ac0 <HAL_UART_MspInit+0x19c>)
 80029c0:	f001 f832 	bl	8003a28 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80029c4:	4b3f      	ldr	r3, [pc, #252]	; (8002ac4 <HAL_UART_MspInit+0x1a0>)
 80029c6:	4a40      	ldr	r2, [pc, #256]	; (8002ac8 <HAL_UART_MspInit+0x1a4>)
 80029c8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80029ca:	4b3e      	ldr	r3, [pc, #248]	; (8002ac4 <HAL_UART_MspInit+0x1a0>)
 80029cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029d0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029d2:	4b3c      	ldr	r3, [pc, #240]	; (8002ac4 <HAL_UART_MspInit+0x1a0>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029d8:	4b3a      	ldr	r3, [pc, #232]	; (8002ac4 <HAL_UART_MspInit+0x1a0>)
 80029da:	2200      	movs	r2, #0
 80029dc:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029de:	4b39      	ldr	r3, [pc, #228]	; (8002ac4 <HAL_UART_MspInit+0x1a0>)
 80029e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029e4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029e6:	4b37      	ldr	r3, [pc, #220]	; (8002ac4 <HAL_UART_MspInit+0x1a0>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029ec:	4b35      	ldr	r3, [pc, #212]	; (8002ac4 <HAL_UART_MspInit+0x1a0>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80029f2:	4b34      	ldr	r3, [pc, #208]	; (8002ac4 <HAL_UART_MspInit+0x1a0>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029f8:	4b32      	ldr	r3, [pc, #200]	; (8002ac4 <HAL_UART_MspInit+0x1a0>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80029fe:	4b31      	ldr	r3, [pc, #196]	; (8002ac4 <HAL_UART_MspInit+0x1a0>)
 8002a00:	2204      	movs	r2, #4
 8002a02:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002a04:	4b2f      	ldr	r3, [pc, #188]	; (8002ac4 <HAL_UART_MspInit+0x1a0>)
 8002a06:	2203      	movs	r2, #3
 8002a08:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002a0a:	4b2e      	ldr	r3, [pc, #184]	; (8002ac4 <HAL_UART_MspInit+0x1a0>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002a10:	4b2c      	ldr	r3, [pc, #176]	; (8002ac4 <HAL_UART_MspInit+0x1a0>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002a16:	482b      	ldr	r0, [pc, #172]	; (8002ac4 <HAL_UART_MspInit+0x1a0>)
 8002a18:	f000 fc04 	bl	8003224 <HAL_DMA_Init>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 8002a22:	f7ff fdb3 	bl	800258c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a26      	ldr	r2, [pc, #152]	; (8002ac4 <HAL_UART_MspInit+0x1a0>)
 8002a2a:	639a      	str	r2, [r3, #56]	; 0x38
 8002a2c:	4a25      	ldr	r2, [pc, #148]	; (8002ac4 <HAL_UART_MspInit+0x1a0>)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002a32:	4b26      	ldr	r3, [pc, #152]	; (8002acc <HAL_UART_MspInit+0x1a8>)
 8002a34:	4a26      	ldr	r2, [pc, #152]	; (8002ad0 <HAL_UART_MspInit+0x1ac>)
 8002a36:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002a38:	4b24      	ldr	r3, [pc, #144]	; (8002acc <HAL_UART_MspInit+0x1a8>)
 8002a3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a3e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a40:	4b22      	ldr	r3, [pc, #136]	; (8002acc <HAL_UART_MspInit+0x1a8>)
 8002a42:	2240      	movs	r2, #64	; 0x40
 8002a44:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a46:	4b21      	ldr	r3, [pc, #132]	; (8002acc <HAL_UART_MspInit+0x1a8>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a4c:	4b1f      	ldr	r3, [pc, #124]	; (8002acc <HAL_UART_MspInit+0x1a8>)
 8002a4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a52:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a54:	4b1d      	ldr	r3, [pc, #116]	; (8002acc <HAL_UART_MspInit+0x1a8>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a5a:	4b1c      	ldr	r3, [pc, #112]	; (8002acc <HAL_UART_MspInit+0x1a8>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002a60:	4b1a      	ldr	r3, [pc, #104]	; (8002acc <HAL_UART_MspInit+0x1a8>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a66:	4b19      	ldr	r3, [pc, #100]	; (8002acc <HAL_UART_MspInit+0x1a8>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002a6c:	4b17      	ldr	r3, [pc, #92]	; (8002acc <HAL_UART_MspInit+0x1a8>)
 8002a6e:	2204      	movs	r2, #4
 8002a70:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002a72:	4b16      	ldr	r3, [pc, #88]	; (8002acc <HAL_UART_MspInit+0x1a8>)
 8002a74:	2203      	movs	r2, #3
 8002a76:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002a78:	4b14      	ldr	r3, [pc, #80]	; (8002acc <HAL_UART_MspInit+0x1a8>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002a7e:	4b13      	ldr	r3, [pc, #76]	; (8002acc <HAL_UART_MspInit+0x1a8>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002a84:	4811      	ldr	r0, [pc, #68]	; (8002acc <HAL_UART_MspInit+0x1a8>)
 8002a86:	f000 fbcd 	bl	8003224 <HAL_DMA_Init>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <HAL_UART_MspInit+0x170>
    {
      Error_Handler();
 8002a90:	f7ff fd7c 	bl	800258c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a0d      	ldr	r2, [pc, #52]	; (8002acc <HAL_UART_MspInit+0x1a8>)
 8002a98:	635a      	str	r2, [r3, #52]	; 0x34
 8002a9a:	4a0c      	ldr	r2, [pc, #48]	; (8002acc <HAL_UART_MspInit+0x1a8>)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	2105      	movs	r1, #5
 8002aa4:	2027      	movs	r0, #39	; 0x27
 8002aa6:	f000 fb93 	bl	80031d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002aaa:	2027      	movs	r0, #39	; 0x27
 8002aac:	f000 fbac 	bl	8003208 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002ab0:	bf00      	nop
 8002ab2:	3728      	adds	r7, #40	; 0x28
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40004800 	.word	0x40004800
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	40020800 	.word	0x40020800
 8002ac4:	200004e0 	.word	0x200004e0
 8002ac8:	40026028 	.word	0x40026028
 8002acc:	20000540 	.word	0x20000540
 8002ad0:	40026058 	.word	0x40026058

08002ad4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b08e      	sub	sp, #56	; 0x38
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	4b33      	ldr	r3, [pc, #204]	; (8002bb8 <HAL_InitTick+0xe4>)
 8002aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aec:	4a32      	ldr	r2, [pc, #200]	; (8002bb8 <HAL_InitTick+0xe4>)
 8002aee:	f043 0320 	orr.w	r3, r3, #32
 8002af2:	6413      	str	r3, [r2, #64]	; 0x40
 8002af4:	4b30      	ldr	r3, [pc, #192]	; (8002bb8 <HAL_InitTick+0xe4>)
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	f003 0320 	and.w	r3, r3, #32
 8002afc:	60fb      	str	r3, [r7, #12]
 8002afe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b00:	f107 0210 	add.w	r2, r7, #16
 8002b04:	f107 0314 	add.w	r3, r7, #20
 8002b08:	4611      	mov	r1, r2
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f002 fee2 	bl	80058d4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002b10:	6a3b      	ldr	r3, [r7, #32]
 8002b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d103      	bne.n	8002b22 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002b1a:	f002 feb3 	bl	8005884 <HAL_RCC_GetPCLK1Freq>
 8002b1e:	6378      	str	r0, [r7, #52]	; 0x34
 8002b20:	e004      	b.n	8002b2c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002b22:	f002 feaf 	bl	8005884 <HAL_RCC_GetPCLK1Freq>
 8002b26:	4603      	mov	r3, r0
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b2e:	4a23      	ldr	r2, [pc, #140]	; (8002bbc <HAL_InitTick+0xe8>)
 8002b30:	fba2 2303 	umull	r2, r3, r2, r3
 8002b34:	0c9b      	lsrs	r3, r3, #18
 8002b36:	3b01      	subs	r3, #1
 8002b38:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8002b3a:	4b21      	ldr	r3, [pc, #132]	; (8002bc0 <HAL_InitTick+0xec>)
 8002b3c:	4a21      	ldr	r2, [pc, #132]	; (8002bc4 <HAL_InitTick+0xf0>)
 8002b3e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8002b40:	4b1f      	ldr	r3, [pc, #124]	; (8002bc0 <HAL_InitTick+0xec>)
 8002b42:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b46:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002b48:	4a1d      	ldr	r2, [pc, #116]	; (8002bc0 <HAL_InitTick+0xec>)
 8002b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4c:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002b4e:	4b1c      	ldr	r3, [pc, #112]	; (8002bc0 <HAL_InitTick+0xec>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b54:	4b1a      	ldr	r3, [pc, #104]	; (8002bc0 <HAL_InitTick+0xec>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b5a:	4b19      	ldr	r3, [pc, #100]	; (8002bc0 <HAL_InitTick+0xec>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8002b60:	4817      	ldr	r0, [pc, #92]	; (8002bc0 <HAL_InitTick+0xec>)
 8002b62:	f002 fee9 	bl	8005938 <HAL_TIM_Base_Init>
 8002b66:	4603      	mov	r3, r0
 8002b68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002b6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d11b      	bne.n	8002bac <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8002b74:	4812      	ldr	r0, [pc, #72]	; (8002bc0 <HAL_InitTick+0xec>)
 8002b76:	f002 ff2f 	bl	80059d8 <HAL_TIM_Base_Start_IT>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002b80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d111      	bne.n	8002bac <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002b88:	2037      	movs	r0, #55	; 0x37
 8002b8a:	f000 fb3d 	bl	8003208 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2b0f      	cmp	r3, #15
 8002b92:	d808      	bhi.n	8002ba6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8002b94:	2200      	movs	r2, #0
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	2037      	movs	r0, #55	; 0x37
 8002b9a:	f000 fb19 	bl	80031d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b9e:	4a0a      	ldr	r2, [pc, #40]	; (8002bc8 <HAL_InitTick+0xf4>)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6013      	str	r3, [r2, #0]
 8002ba4:	e002      	b.n	8002bac <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002bac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3738      	adds	r7, #56	; 0x38
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	431bde83 	.word	0x431bde83
 8002bc0:	200005a4 	.word	0x200005a4
 8002bc4:	40001400 	.word	0x40001400
 8002bc8:	2000005c 	.word	0x2000005c

08002bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bd0:	e7fe      	b.n	8002bd0 <NMI_Handler+0x4>

08002bd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bd6:	e7fe      	b.n	8002bd6 <HardFault_Handler+0x4>

08002bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bdc:	e7fe      	b.n	8002bdc <MemManage_Handler+0x4>

08002bde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bde:	b480      	push	{r7}
 8002be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002be2:	e7fe      	b.n	8002be2 <BusFault_Handler+0x4>

08002be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002be8:	e7fe      	b.n	8002be8 <UsageFault_Handler+0x4>

08002bea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bea:	b480      	push	{r7}
 8002bec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bee:	bf00      	nop
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002bfc:	4802      	ldr	r0, [pc, #8]	; (8002c08 <DMA1_Stream1_IRQHandler+0x10>)
 8002bfe:	f000 fca9 	bl	8003554 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002c02:	bf00      	nop
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	200004e0 	.word	0x200004e0

08002c0c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002c10:	4802      	ldr	r0, [pc, #8]	; (8002c1c <DMA1_Stream3_IRQHandler+0x10>)
 8002c12:	f000 fc9f 	bl	8003554 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002c16:	bf00      	nop
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	20000540 	.word	0x20000540

08002c20 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002c24:	4802      	ldr	r0, [pc, #8]	; (8002c30 <USART3_IRQHandler+0x10>)
 8002c26:	f004 f8d7 	bl	8006dd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002c2a:	bf00      	nop
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	2000046c 	.word	0x2000046c

08002c34 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002c38:	4802      	ldr	r0, [pc, #8]	; (8002c44 <TIM7_IRQHandler+0x10>)
 8002c3a:	f003 f905 	bl	8005e48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002c3e:	bf00      	nop
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	200005a4 	.word	0x200005a4

08002c48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  return 1;
 8002c4c:	2301      	movs	r3, #1
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <_kill>:

int _kill(int pid, int sig)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c62:	f008 f9e5 	bl	800b030 <__errno>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2216      	movs	r2, #22
 8002c6a:	601a      	str	r2, [r3, #0]
  return -1;
 8002c6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <_exit>:

void _exit (int status)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c80:	f04f 31ff 	mov.w	r1, #4294967295
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f7ff ffe7 	bl	8002c58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c8a:	e7fe      	b.n	8002c8a <_exit+0x12>

08002c8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	e00a      	b.n	8002cb4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c9e:	f3af 8000 	nop.w
 8002ca2:	4601      	mov	r1, r0
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	1c5a      	adds	r2, r3, #1
 8002ca8:	60ba      	str	r2, [r7, #8]
 8002caa:	b2ca      	uxtb	r2, r1
 8002cac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	617b      	str	r3, [r7, #20]
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	dbf0      	blt.n	8002c9e <_read+0x12>
  }

  return len;
 8002cbc:	687b      	ldr	r3, [r7, #4]
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3718      	adds	r7, #24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b086      	sub	sp, #24
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	60f8      	str	r0, [r7, #12]
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	617b      	str	r3, [r7, #20]
 8002cd6:	e009      	b.n	8002cec <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	1c5a      	adds	r2, r3, #1
 8002cdc:	60ba      	str	r2, [r7, #8]
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff f89b 	bl	8001e1c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	dbf1      	blt.n	8002cd8 <_write+0x12>
  }
  return len;
 8002cf4:	687b      	ldr	r3, [r7, #4]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <_close>:

int _close(int file)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
 8002d1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d26:	605a      	str	r2, [r3, #4]
  return 0;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <_isatty>:

int _isatty(int file)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d3e:	2301      	movs	r3, #1
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
	...

08002d68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d70:	4a14      	ldr	r2, [pc, #80]	; (8002dc4 <_sbrk+0x5c>)
 8002d72:	4b15      	ldr	r3, [pc, #84]	; (8002dc8 <_sbrk+0x60>)
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d7c:	4b13      	ldr	r3, [pc, #76]	; (8002dcc <_sbrk+0x64>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d102      	bne.n	8002d8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d84:	4b11      	ldr	r3, [pc, #68]	; (8002dcc <_sbrk+0x64>)
 8002d86:	4a12      	ldr	r2, [pc, #72]	; (8002dd0 <_sbrk+0x68>)
 8002d88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d8a:	4b10      	ldr	r3, [pc, #64]	; (8002dcc <_sbrk+0x64>)
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4413      	add	r3, r2
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d207      	bcs.n	8002da8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d98:	f008 f94a 	bl	800b030 <__errno>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	220c      	movs	r2, #12
 8002da0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002da2:	f04f 33ff 	mov.w	r3, #4294967295
 8002da6:	e009      	b.n	8002dbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002da8:	4b08      	ldr	r3, [pc, #32]	; (8002dcc <_sbrk+0x64>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dae:	4b07      	ldr	r3, [pc, #28]	; (8002dcc <_sbrk+0x64>)
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4413      	add	r3, r2
 8002db6:	4a05      	ldr	r2, [pc, #20]	; (8002dcc <_sbrk+0x64>)
 8002db8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dba:	68fb      	ldr	r3, [r7, #12]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	20020000 	.word	0x20020000
 8002dc8:	00000800 	.word	0x00000800
 8002dcc:	200005ec 	.word	0x200005ec
 8002dd0:	20005638 	.word	0x20005638

08002dd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002dd8:	4b06      	ldr	r3, [pc, #24]	; (8002df4 <SystemInit+0x20>)
 8002dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dde:	4a05      	ldr	r2, [pc, #20]	; (8002df4 <SystemInit+0x20>)
 8002de0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002de4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002de8:	bf00      	nop
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	e000ed00 	.word	0xe000ed00

08002df8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002df8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002dfc:	480d      	ldr	r0, [pc, #52]	; (8002e34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002dfe:	490e      	ldr	r1, [pc, #56]	; (8002e38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e00:	4a0e      	ldr	r2, [pc, #56]	; (8002e3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e04:	e002      	b.n	8002e0c <LoopCopyDataInit>

08002e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e0a:	3304      	adds	r3, #4

08002e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e10:	d3f9      	bcc.n	8002e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e12:	4a0b      	ldr	r2, [pc, #44]	; (8002e40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e14:	4c0b      	ldr	r4, [pc, #44]	; (8002e44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e18:	e001      	b.n	8002e1e <LoopFillZerobss>

08002e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e1c:	3204      	adds	r2, #4

08002e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e20:	d3fb      	bcc.n	8002e1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e22:	f7ff ffd7 	bl	8002dd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e26:	f008 f9ff 	bl	800b228 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e2a:	f7ff f809 	bl	8001e40 <main>
  bx  lr    
 8002e2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002e30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e38:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 8002e3c:	0800e7f4 	.word	0x0800e7f4
  ldr r2, =_sbss
 8002e40:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8002e44:	20005638 	.word	0x20005638

08002e48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e48:	e7fe      	b.n	8002e48 <ADC_IRQHandler>

08002e4a <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b084      	sub	sp, #16
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d104      	bne.n	8002e62 <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002e58:	b672      	cpsid	i
}
 8002e5a:	bf00      	nop
 8002e5c:	f7ff fb96 	bl	800258c <Error_Handler>
 8002e60:	e7fe      	b.n	8002e60 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8002e62:	2300      	movs	r3, #0
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	e007      	b.n	8002e78 <stm32_lock_init+0x2e>
  {
    lock->basepri[i] = 0;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	3301      	adds	r3, #1
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d9f4      	bls.n	8002e68 <stm32_lock_init+0x1e>
  }
  lock->nesting_level = 0;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	721a      	strb	r2, [r3, #8]
}
 8002e84:	bf00      	nop
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d104      	bne.n	8002ea4 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002e9a:	b672      	cpsid	i
}
 8002e9c:	bf00      	nop
 8002e9e:	f7ff fb75 	bl	800258c <Error_Handler>
 8002ea2:	e7fe      	b.n	8002ea2 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	7a1b      	ldrb	r3, [r3, #8]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d904      	bls.n	8002eb6 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002eac:	b672      	cpsid	i
}
 8002eae:	bf00      	nop
 8002eb0:	f7ff fb6c 	bl	800258c <Error_Handler>
 8002eb4:	e7fe      	b.n	8002eb4 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	7a1b      	ldrb	r3, [r3, #8]
 8002eba:	1c5a      	adds	r2, r3, #1
 8002ebc:	b2d1      	uxtb	r1, r2
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	7211      	strb	r1, [r2, #8]
 8002ec2:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002ec4:	f3ef 8211 	mrs	r2, BASEPRI
 8002ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ecc:	f383 8811 	msr	BASEPRI, r3
 8002ed0:	f3bf 8f6f 	isb	sy
 8002ed4:	f3bf 8f4f 	dsb	sy
 8002ed8:	60fa      	str	r2, [r7, #12]
 8002eda:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8002ee4:	bf00      	nop
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d104      	bne.n	8002f04 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002efa:	b672      	cpsid	i
}
 8002efc:	bf00      	nop
 8002efe:	f7ff fb45 	bl	800258c <Error_Handler>
 8002f02:	e7fe      	b.n	8002f02 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	7a1b      	ldrb	r3, [r3, #8]
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	b2da      	uxtb	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	7a1b      	ldrb	r3, [r3, #8]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d904      	bls.n	8002f22 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8002f18:	b672      	cpsid	i
}
 8002f1a:	bf00      	nop
 8002f1c:	f7ff fb36 	bl	800258c <Error_Handler>
 8002f20:	e7fe      	b.n	8002f20 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	7a1b      	ldrb	r3, [r3, #8]
 8002f26:	461a      	mov	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f2e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002f36:	bf00      	nop
}
 8002f38:	bf00      	nop
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d105      	bne.n	8002f5a <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8002f4e:	f008 f86f 	bl	800b030 <__errno>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2216      	movs	r2, #22
 8002f56:	601a      	str	r2, [r3, #0]
    return;
 8002f58:	e015      	b.n	8002f86 <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8002f5a:	200c      	movs	r0, #12
 8002f5c:	f008 f988 	bl	800b270 <malloc>
 8002f60:	4603      	mov	r3, r0
 8002f62:	461a      	mov	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d005      	beq.n	8002f7c <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff ff68 	bl	8002e4a <stm32_lock_init>
    return;
 8002f7a:	e004      	b.n	8002f86 <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 8002f7c:	b672      	cpsid	i
}
 8002f7e:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8002f80:	f7ff fb04 	bl	800258c <Error_Handler>
 8002f84:	e7fe      	b.n	8002f84 <__retarget_lock_init_recursive+0x44>
}
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d104      	bne.n	8002fa4 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002f9a:	b672      	cpsid	i
}
 8002f9c:	bf00      	nop
 8002f9e:	f7ff faf5 	bl	800258c <Error_Handler>
 8002fa2:	e7fe      	b.n	8002fa2 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7ff ff70 	bl	8002e8c <stm32_lock_acquire>
}
 8002fac:	bf00      	nop
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d104      	bne.n	8002fcc <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002fc2:	b672      	cpsid	i
}
 8002fc4:	bf00      	nop
 8002fc6:	f7ff fae1 	bl	800258c <Error_Handler>
 8002fca:	e7fe      	b.n	8002fca <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff ff8c 	bl	8002eec <stm32_lock_release>
}
 8002fd4:	bf00      	nop
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fe0:	4b0e      	ldr	r3, [pc, #56]	; (800301c <HAL_Init+0x40>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a0d      	ldr	r2, [pc, #52]	; (800301c <HAL_Init+0x40>)
 8002fe6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fec:	4b0b      	ldr	r3, [pc, #44]	; (800301c <HAL_Init+0x40>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a0a      	ldr	r2, [pc, #40]	; (800301c <HAL_Init+0x40>)
 8002ff2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ff6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ff8:	4b08      	ldr	r3, [pc, #32]	; (800301c <HAL_Init+0x40>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a07      	ldr	r2, [pc, #28]	; (800301c <HAL_Init+0x40>)
 8002ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003002:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003004:	2003      	movs	r0, #3
 8003006:	f000 f8d8 	bl	80031ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800300a:	200f      	movs	r0, #15
 800300c:	f7ff fd62 	bl	8002ad4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003010:	f7ff fac2 	bl	8002598 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40023c00 	.word	0x40023c00

08003020 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003024:	4b06      	ldr	r3, [pc, #24]	; (8003040 <HAL_IncTick+0x20>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	461a      	mov	r2, r3
 800302a:	4b06      	ldr	r3, [pc, #24]	; (8003044 <HAL_IncTick+0x24>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4413      	add	r3, r2
 8003030:	4a04      	ldr	r2, [pc, #16]	; (8003044 <HAL_IncTick+0x24>)
 8003032:	6013      	str	r3, [r2, #0]
}
 8003034:	bf00      	nop
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	20000060 	.word	0x20000060
 8003044:	20000614 	.word	0x20000614

08003048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  return uwTick;
 800304c:	4b03      	ldr	r3, [pc, #12]	; (800305c <HAL_GetTick+0x14>)
 800304e:	681b      	ldr	r3, [r3, #0]
}
 8003050:	4618      	mov	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	20000614 	.word	0x20000614

08003060 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003070:	4b0c      	ldr	r3, [pc, #48]	; (80030a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800307c:	4013      	ands	r3, r2
 800307e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003088:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800308c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003090:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003092:	4a04      	ldr	r2, [pc, #16]	; (80030a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	60d3      	str	r3, [r2, #12]
}
 8003098:	bf00      	nop
 800309a:	3714      	adds	r7, #20
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr
 80030a4:	e000ed00 	.word	0xe000ed00

080030a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030ac:	4b04      	ldr	r3, [pc, #16]	; (80030c0 <__NVIC_GetPriorityGrouping+0x18>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	0a1b      	lsrs	r3, r3, #8
 80030b2:	f003 0307 	and.w	r3, r3, #7
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	e000ed00 	.word	0xe000ed00

080030c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	4603      	mov	r3, r0
 80030cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	db0b      	blt.n	80030ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030d6:	79fb      	ldrb	r3, [r7, #7]
 80030d8:	f003 021f 	and.w	r2, r3, #31
 80030dc:	4907      	ldr	r1, [pc, #28]	; (80030fc <__NVIC_EnableIRQ+0x38>)
 80030de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e2:	095b      	lsrs	r3, r3, #5
 80030e4:	2001      	movs	r0, #1
 80030e6:	fa00 f202 	lsl.w	r2, r0, r2
 80030ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	e000e100 	.word	0xe000e100

08003100 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	4603      	mov	r3, r0
 8003108:	6039      	str	r1, [r7, #0]
 800310a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800310c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003110:	2b00      	cmp	r3, #0
 8003112:	db0a      	blt.n	800312a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	b2da      	uxtb	r2, r3
 8003118:	490c      	ldr	r1, [pc, #48]	; (800314c <__NVIC_SetPriority+0x4c>)
 800311a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311e:	0112      	lsls	r2, r2, #4
 8003120:	b2d2      	uxtb	r2, r2
 8003122:	440b      	add	r3, r1
 8003124:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003128:	e00a      	b.n	8003140 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	b2da      	uxtb	r2, r3
 800312e:	4908      	ldr	r1, [pc, #32]	; (8003150 <__NVIC_SetPriority+0x50>)
 8003130:	79fb      	ldrb	r3, [r7, #7]
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	3b04      	subs	r3, #4
 8003138:	0112      	lsls	r2, r2, #4
 800313a:	b2d2      	uxtb	r2, r2
 800313c:	440b      	add	r3, r1
 800313e:	761a      	strb	r2, [r3, #24]
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	e000e100 	.word	0xe000e100
 8003150:	e000ed00 	.word	0xe000ed00

08003154 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003154:	b480      	push	{r7}
 8003156:	b089      	sub	sp, #36	; 0x24
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	f1c3 0307 	rsb	r3, r3, #7
 800316e:	2b04      	cmp	r3, #4
 8003170:	bf28      	it	cs
 8003172:	2304      	movcs	r3, #4
 8003174:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	3304      	adds	r3, #4
 800317a:	2b06      	cmp	r3, #6
 800317c:	d902      	bls.n	8003184 <NVIC_EncodePriority+0x30>
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	3b03      	subs	r3, #3
 8003182:	e000      	b.n	8003186 <NVIC_EncodePriority+0x32>
 8003184:	2300      	movs	r3, #0
 8003186:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003188:	f04f 32ff 	mov.w	r2, #4294967295
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	fa02 f303 	lsl.w	r3, r2, r3
 8003192:	43da      	mvns	r2, r3
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	401a      	ands	r2, r3
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800319c:	f04f 31ff 	mov.w	r1, #4294967295
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	fa01 f303 	lsl.w	r3, r1, r3
 80031a6:	43d9      	mvns	r1, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031ac:	4313      	orrs	r3, r2
         );
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3724      	adds	r7, #36	; 0x24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b082      	sub	sp, #8
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7ff ff4c 	bl	8003060 <__NVIC_SetPriorityGrouping>
}
 80031c8:	bf00      	nop
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
 80031dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031de:	2300      	movs	r3, #0
 80031e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031e2:	f7ff ff61 	bl	80030a8 <__NVIC_GetPriorityGrouping>
 80031e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	68b9      	ldr	r1, [r7, #8]
 80031ec:	6978      	ldr	r0, [r7, #20]
 80031ee:	f7ff ffb1 	bl	8003154 <NVIC_EncodePriority>
 80031f2:	4602      	mov	r2, r0
 80031f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031f8:	4611      	mov	r1, r2
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff ff80 	bl	8003100 <__NVIC_SetPriority>
}
 8003200:	bf00      	nop
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff ff54 	bl	80030c4 <__NVIC_EnableIRQ>
}
 800321c:	bf00      	nop
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800322c:	2300      	movs	r3, #0
 800322e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003230:	f7ff ff0a 	bl	8003048 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d101      	bne.n	8003240 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e099      	b.n	8003374 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2202      	movs	r2, #2
 8003244:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0201 	bic.w	r2, r2, #1
 800325e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003260:	e00f      	b.n	8003282 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003262:	f7ff fef1 	bl	8003048 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b05      	cmp	r3, #5
 800326e:	d908      	bls.n	8003282 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2220      	movs	r2, #32
 8003274:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2203      	movs	r2, #3
 800327a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e078      	b.n	8003374 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1e8      	bne.n	8003262 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	4b38      	ldr	r3, [pc, #224]	; (800337c <HAL_DMA_Init+0x158>)
 800329c:	4013      	ands	r3, r2
 800329e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d107      	bne.n	80032ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e4:	4313      	orrs	r3, r2
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f023 0307 	bic.w	r3, r3, #7
 8003302:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	4313      	orrs	r3, r2
 800330c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	2b04      	cmp	r3, #4
 8003314:	d117      	bne.n	8003346 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	4313      	orrs	r3, r2
 800331e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00e      	beq.n	8003346 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 fb01 	bl	8003930 <DMA_CheckFifoParam>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d008      	beq.n	8003346 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2240      	movs	r2, #64	; 0x40
 8003338:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003342:	2301      	movs	r3, #1
 8003344:	e016      	b.n	8003374 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 fab8 	bl	80038c4 <DMA_CalcBaseAndBitshift>
 8003354:	4603      	mov	r3, r0
 8003356:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335c:	223f      	movs	r2, #63	; 0x3f
 800335e:	409a      	lsls	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3718      	adds	r7, #24
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	f010803f 	.word	0xf010803f

08003380 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
 800338c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800338e:	2300      	movs	r3, #0
 8003390:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003396:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d101      	bne.n	80033a6 <HAL_DMA_Start_IT+0x26>
 80033a2:	2302      	movs	r3, #2
 80033a4:	e040      	b.n	8003428 <HAL_DMA_Start_IT+0xa8>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d12f      	bne.n	800341a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2202      	movs	r2, #2
 80033be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	68b9      	ldr	r1, [r7, #8]
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f000 fa4a 	bl	8003868 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d8:	223f      	movs	r2, #63	; 0x3f
 80033da:	409a      	lsls	r2, r3
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f042 0216 	orr.w	r2, r2, #22
 80033ee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d007      	beq.n	8003408 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0208 	orr.w	r2, r2, #8
 8003406:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0201 	orr.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	e005      	b.n	8003426 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003422:	2302      	movs	r3, #2
 8003424:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003426:	7dfb      	ldrb	r3, [r7, #23]
}
 8003428:	4618      	mov	r0, r3
 800342a:	3718      	adds	r7, #24
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800343e:	f7ff fe03 	bl	8003048 <HAL_GetTick>
 8003442:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d008      	beq.n	8003462 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2280      	movs	r2, #128	; 0x80
 8003454:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e052      	b.n	8003508 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0216 	bic.w	r2, r2, #22
 8003470:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	695a      	ldr	r2, [r3, #20]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003480:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	2b00      	cmp	r3, #0
 8003488:	d103      	bne.n	8003492 <HAL_DMA_Abort+0x62>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800348e:	2b00      	cmp	r3, #0
 8003490:	d007      	beq.n	80034a2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 0208 	bic.w	r2, r2, #8
 80034a0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0201 	bic.w	r2, r2, #1
 80034b0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034b2:	e013      	b.n	80034dc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034b4:	f7ff fdc8 	bl	8003048 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b05      	cmp	r3, #5
 80034c0:	d90c      	bls.n	80034dc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2220      	movs	r2, #32
 80034c6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2203      	movs	r2, #3
 80034cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e015      	b.n	8003508 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1e4      	bne.n	80034b4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ee:	223f      	movs	r2, #63	; 0x3f
 80034f0:	409a      	lsls	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d004      	beq.n	800352e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2280      	movs	r2, #128	; 0x80
 8003528:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e00c      	b.n	8003548 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2205      	movs	r2, #5
 8003532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0201 	bic.w	r2, r2, #1
 8003544:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800355c:	2300      	movs	r3, #0
 800355e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003560:	4b8e      	ldr	r3, [pc, #568]	; (800379c <HAL_DMA_IRQHandler+0x248>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a8e      	ldr	r2, [pc, #568]	; (80037a0 <HAL_DMA_IRQHandler+0x24c>)
 8003566:	fba2 2303 	umull	r2, r3, r2, r3
 800356a:	0a9b      	lsrs	r3, r3, #10
 800356c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003572:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357e:	2208      	movs	r2, #8
 8003580:	409a      	lsls	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	4013      	ands	r3, r2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d01a      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0304 	and.w	r3, r3, #4
 8003594:	2b00      	cmp	r3, #0
 8003596:	d013      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 0204 	bic.w	r2, r2, #4
 80035a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ac:	2208      	movs	r2, #8
 80035ae:	409a      	lsls	r2, r3
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b8:	f043 0201 	orr.w	r2, r3, #1
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c4:	2201      	movs	r2, #1
 80035c6:	409a      	lsls	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4013      	ands	r3, r2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d012      	beq.n	80035f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00b      	beq.n	80035f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e2:	2201      	movs	r2, #1
 80035e4:	409a      	lsls	r2, r3
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ee:	f043 0202 	orr.w	r2, r3, #2
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035fa:	2204      	movs	r2, #4
 80035fc:	409a      	lsls	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	4013      	ands	r3, r2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d012      	beq.n	800362c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00b      	beq.n	800362c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003618:	2204      	movs	r2, #4
 800361a:	409a      	lsls	r2, r3
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003624:	f043 0204 	orr.w	r2, r3, #4
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003630:	2210      	movs	r2, #16
 8003632:	409a      	lsls	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	4013      	ands	r3, r2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d043      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0308 	and.w	r3, r3, #8
 8003646:	2b00      	cmp	r3, #0
 8003648:	d03c      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800364e:	2210      	movs	r2, #16
 8003650:	409a      	lsls	r2, r3
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d018      	beq.n	8003696 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d108      	bne.n	8003684 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	2b00      	cmp	r3, #0
 8003678:	d024      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	4798      	blx	r3
 8003682:	e01f      	b.n	80036c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003688:	2b00      	cmp	r3, #0
 800368a:	d01b      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	4798      	blx	r3
 8003694:	e016      	b.n	80036c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d107      	bne.n	80036b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0208 	bic.w	r2, r2, #8
 80036b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c8:	2220      	movs	r2, #32
 80036ca:	409a      	lsls	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	4013      	ands	r3, r2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 808f 	beq.w	80037f4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0310 	and.w	r3, r3, #16
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 8087 	beq.w	80037f4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ea:	2220      	movs	r2, #32
 80036ec:	409a      	lsls	r2, r3
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b05      	cmp	r3, #5
 80036fc:	d136      	bne.n	800376c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 0216 	bic.w	r2, r2, #22
 800370c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	695a      	ldr	r2, [r3, #20]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800371c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	2b00      	cmp	r3, #0
 8003724:	d103      	bne.n	800372e <HAL_DMA_IRQHandler+0x1da>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800372a:	2b00      	cmp	r3, #0
 800372c:	d007      	beq.n	800373e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 0208 	bic.w	r2, r2, #8
 800373c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003742:	223f      	movs	r2, #63	; 0x3f
 8003744:	409a      	lsls	r2, r3
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800375e:	2b00      	cmp	r3, #0
 8003760:	d07e      	beq.n	8003860 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	4798      	blx	r3
        }
        return;
 800376a:	e079      	b.n	8003860 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d01d      	beq.n	80037b6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10d      	bne.n	80037a4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378c:	2b00      	cmp	r3, #0
 800378e:	d031      	beq.n	80037f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	4798      	blx	r3
 8003798:	e02c      	b.n	80037f4 <HAL_DMA_IRQHandler+0x2a0>
 800379a:	bf00      	nop
 800379c:	20000058 	.word	0x20000058
 80037a0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d023      	beq.n	80037f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	4798      	blx	r3
 80037b4:	e01e      	b.n	80037f4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d10f      	bne.n	80037e4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 0210 	bic.w	r2, r2, #16
 80037d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d032      	beq.n	8003862 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	2b00      	cmp	r3, #0
 8003806:	d022      	beq.n	800384e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2205      	movs	r2, #5
 800380c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0201 	bic.w	r2, r2, #1
 800381e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	3301      	adds	r3, #1
 8003824:	60bb      	str	r3, [r7, #8]
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	429a      	cmp	r2, r3
 800382a:	d307      	bcc.n	800383c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1f2      	bne.n	8003820 <HAL_DMA_IRQHandler+0x2cc>
 800383a:	e000      	b.n	800383e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800383c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003852:	2b00      	cmp	r3, #0
 8003854:	d005      	beq.n	8003862 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	4798      	blx	r3
 800385e:	e000      	b.n	8003862 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003860:	bf00      	nop
    }
  }
}
 8003862:	3718      	adds	r7, #24
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
 8003874:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003884:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	2b40      	cmp	r3, #64	; 0x40
 8003894:	d108      	bne.n	80038a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80038a6:	e007      	b.n	80038b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	60da      	str	r2, [r3, #12]
}
 80038b8:	bf00      	nop
 80038ba:	3714      	adds	r7, #20
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	3b10      	subs	r3, #16
 80038d4:	4a14      	ldr	r2, [pc, #80]	; (8003928 <DMA_CalcBaseAndBitshift+0x64>)
 80038d6:	fba2 2303 	umull	r2, r3, r2, r3
 80038da:	091b      	lsrs	r3, r3, #4
 80038dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80038de:	4a13      	ldr	r2, [pc, #76]	; (800392c <DMA_CalcBaseAndBitshift+0x68>)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4413      	add	r3, r2
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	461a      	mov	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2b03      	cmp	r3, #3
 80038f0:	d909      	bls.n	8003906 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038fa:	f023 0303 	bic.w	r3, r3, #3
 80038fe:	1d1a      	adds	r2, r3, #4
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	659a      	str	r2, [r3, #88]	; 0x58
 8003904:	e007      	b.n	8003916 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800390e:	f023 0303 	bic.w	r3, r3, #3
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800391a:	4618      	mov	r0, r3
 800391c:	3714      	adds	r7, #20
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	aaaaaaab 	.word	0xaaaaaaab
 800392c:	0800e3f4 	.word	0x0800e3f4

08003930 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003938:	2300      	movs	r3, #0
 800393a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003940:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d11f      	bne.n	800398a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	2b03      	cmp	r3, #3
 800394e:	d856      	bhi.n	80039fe <DMA_CheckFifoParam+0xce>
 8003950:	a201      	add	r2, pc, #4	; (adr r2, 8003958 <DMA_CheckFifoParam+0x28>)
 8003952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003956:	bf00      	nop
 8003958:	08003969 	.word	0x08003969
 800395c:	0800397b 	.word	0x0800397b
 8003960:	08003969 	.word	0x08003969
 8003964:	080039ff 	.word	0x080039ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d046      	beq.n	8003a02 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003978:	e043      	b.n	8003a02 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003982:	d140      	bne.n	8003a06 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003988:	e03d      	b.n	8003a06 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003992:	d121      	bne.n	80039d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	2b03      	cmp	r3, #3
 8003998:	d837      	bhi.n	8003a0a <DMA_CheckFifoParam+0xda>
 800399a:	a201      	add	r2, pc, #4	; (adr r2, 80039a0 <DMA_CheckFifoParam+0x70>)
 800399c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a0:	080039b1 	.word	0x080039b1
 80039a4:	080039b7 	.word	0x080039b7
 80039a8:	080039b1 	.word	0x080039b1
 80039ac:	080039c9 	.word	0x080039c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	73fb      	strb	r3, [r7, #15]
      break;
 80039b4:	e030      	b.n	8003a18 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d025      	beq.n	8003a0e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039c6:	e022      	b.n	8003a0e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039d0:	d11f      	bne.n	8003a12 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80039d6:	e01c      	b.n	8003a12 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d903      	bls.n	80039e6 <DMA_CheckFifoParam+0xb6>
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2b03      	cmp	r3, #3
 80039e2:	d003      	beq.n	80039ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80039e4:	e018      	b.n	8003a18 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	73fb      	strb	r3, [r7, #15]
      break;
 80039ea:	e015      	b.n	8003a18 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00e      	beq.n	8003a16 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	73fb      	strb	r3, [r7, #15]
      break;
 80039fc:	e00b      	b.n	8003a16 <DMA_CheckFifoParam+0xe6>
      break;
 80039fe:	bf00      	nop
 8003a00:	e00a      	b.n	8003a18 <DMA_CheckFifoParam+0xe8>
      break;
 8003a02:	bf00      	nop
 8003a04:	e008      	b.n	8003a18 <DMA_CheckFifoParam+0xe8>
      break;
 8003a06:	bf00      	nop
 8003a08:	e006      	b.n	8003a18 <DMA_CheckFifoParam+0xe8>
      break;
 8003a0a:	bf00      	nop
 8003a0c:	e004      	b.n	8003a18 <DMA_CheckFifoParam+0xe8>
      break;
 8003a0e:	bf00      	nop
 8003a10:	e002      	b.n	8003a18 <DMA_CheckFifoParam+0xe8>
      break;   
 8003a12:	bf00      	nop
 8003a14:	e000      	b.n	8003a18 <DMA_CheckFifoParam+0xe8>
      break;
 8003a16:	bf00      	nop
    }
  } 
  
  return status; 
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3714      	adds	r7, #20
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop

08003a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b089      	sub	sp, #36	; 0x24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a36:	2300      	movs	r3, #0
 8003a38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61fb      	str	r3, [r7, #28]
 8003a42:	e16b      	b.n	8003d1c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a44:	2201      	movs	r2, #1
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	4013      	ands	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	f040 815a 	bne.w	8003d16 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f003 0303 	and.w	r3, r3, #3
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d005      	beq.n	8003a7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d130      	bne.n	8003adc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	2203      	movs	r2, #3
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	68da      	ldr	r2, [r3, #12]
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	4013      	ands	r3, r2
 8003abe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	091b      	lsrs	r3, r3, #4
 8003ac6:	f003 0201 	and.w	r2, r3, #1
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f003 0303 	and.w	r3, r3, #3
 8003ae4:	2b03      	cmp	r3, #3
 8003ae6:	d017      	beq.n	8003b18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	2203      	movs	r2, #3
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	43db      	mvns	r3, r3
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	4013      	ands	r3, r2
 8003afe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f003 0303 	and.w	r3, r3, #3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d123      	bne.n	8003b6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	08da      	lsrs	r2, r3, #3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3208      	adds	r2, #8
 8003b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	220f      	movs	r2, #15
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	43db      	mvns	r3, r3
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	4013      	ands	r3, r2
 8003b46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	691a      	ldr	r2, [r3, #16]
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	f003 0307 	and.w	r3, r3, #7
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	08da      	lsrs	r2, r3, #3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	3208      	adds	r2, #8
 8003b66:	69b9      	ldr	r1, [r7, #24]
 8003b68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	2203      	movs	r2, #3
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	43db      	mvns	r3, r3
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	4013      	ands	r3, r2
 8003b82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f003 0203 	and.w	r2, r3, #3
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 80b4 	beq.w	8003d16 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60fb      	str	r3, [r7, #12]
 8003bb2:	4b60      	ldr	r3, [pc, #384]	; (8003d34 <HAL_GPIO_Init+0x30c>)
 8003bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb6:	4a5f      	ldr	r2, [pc, #380]	; (8003d34 <HAL_GPIO_Init+0x30c>)
 8003bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8003bbe:	4b5d      	ldr	r3, [pc, #372]	; (8003d34 <HAL_GPIO_Init+0x30c>)
 8003bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bca:	4a5b      	ldr	r2, [pc, #364]	; (8003d38 <HAL_GPIO_Init+0x310>)
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	089b      	lsrs	r3, r3, #2
 8003bd0:	3302      	adds	r3, #2
 8003bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	f003 0303 	and.w	r3, r3, #3
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	220f      	movs	r2, #15
 8003be2:	fa02 f303 	lsl.w	r3, r2, r3
 8003be6:	43db      	mvns	r3, r3
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	4013      	ands	r3, r2
 8003bec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a52      	ldr	r2, [pc, #328]	; (8003d3c <HAL_GPIO_Init+0x314>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d02b      	beq.n	8003c4e <HAL_GPIO_Init+0x226>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a51      	ldr	r2, [pc, #324]	; (8003d40 <HAL_GPIO_Init+0x318>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d025      	beq.n	8003c4a <HAL_GPIO_Init+0x222>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a50      	ldr	r2, [pc, #320]	; (8003d44 <HAL_GPIO_Init+0x31c>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d01f      	beq.n	8003c46 <HAL_GPIO_Init+0x21e>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a4f      	ldr	r2, [pc, #316]	; (8003d48 <HAL_GPIO_Init+0x320>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d019      	beq.n	8003c42 <HAL_GPIO_Init+0x21a>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a4e      	ldr	r2, [pc, #312]	; (8003d4c <HAL_GPIO_Init+0x324>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d013      	beq.n	8003c3e <HAL_GPIO_Init+0x216>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a4d      	ldr	r2, [pc, #308]	; (8003d50 <HAL_GPIO_Init+0x328>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d00d      	beq.n	8003c3a <HAL_GPIO_Init+0x212>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a4c      	ldr	r2, [pc, #304]	; (8003d54 <HAL_GPIO_Init+0x32c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d007      	beq.n	8003c36 <HAL_GPIO_Init+0x20e>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a4b      	ldr	r2, [pc, #300]	; (8003d58 <HAL_GPIO_Init+0x330>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d101      	bne.n	8003c32 <HAL_GPIO_Init+0x20a>
 8003c2e:	2307      	movs	r3, #7
 8003c30:	e00e      	b.n	8003c50 <HAL_GPIO_Init+0x228>
 8003c32:	2308      	movs	r3, #8
 8003c34:	e00c      	b.n	8003c50 <HAL_GPIO_Init+0x228>
 8003c36:	2306      	movs	r3, #6
 8003c38:	e00a      	b.n	8003c50 <HAL_GPIO_Init+0x228>
 8003c3a:	2305      	movs	r3, #5
 8003c3c:	e008      	b.n	8003c50 <HAL_GPIO_Init+0x228>
 8003c3e:	2304      	movs	r3, #4
 8003c40:	e006      	b.n	8003c50 <HAL_GPIO_Init+0x228>
 8003c42:	2303      	movs	r3, #3
 8003c44:	e004      	b.n	8003c50 <HAL_GPIO_Init+0x228>
 8003c46:	2302      	movs	r3, #2
 8003c48:	e002      	b.n	8003c50 <HAL_GPIO_Init+0x228>
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e000      	b.n	8003c50 <HAL_GPIO_Init+0x228>
 8003c4e:	2300      	movs	r3, #0
 8003c50:	69fa      	ldr	r2, [r7, #28]
 8003c52:	f002 0203 	and.w	r2, r2, #3
 8003c56:	0092      	lsls	r2, r2, #2
 8003c58:	4093      	lsls	r3, r2
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c60:	4935      	ldr	r1, [pc, #212]	; (8003d38 <HAL_GPIO_Init+0x310>)
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	089b      	lsrs	r3, r3, #2
 8003c66:	3302      	adds	r3, #2
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c6e:	4b3b      	ldr	r3, [pc, #236]	; (8003d5c <HAL_GPIO_Init+0x334>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	43db      	mvns	r3, r3
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d003      	beq.n	8003c92 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c92:	4a32      	ldr	r2, [pc, #200]	; (8003d5c <HAL_GPIO_Init+0x334>)
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c98:	4b30      	ldr	r3, [pc, #192]	; (8003d5c <HAL_GPIO_Init+0x334>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	43db      	mvns	r3, r3
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d003      	beq.n	8003cbc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cbc:	4a27      	ldr	r2, [pc, #156]	; (8003d5c <HAL_GPIO_Init+0x334>)
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cc2:	4b26      	ldr	r3, [pc, #152]	; (8003d5c <HAL_GPIO_Init+0x334>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	43db      	mvns	r3, r3
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ce6:	4a1d      	ldr	r2, [pc, #116]	; (8003d5c <HAL_GPIO_Init+0x334>)
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cec:	4b1b      	ldr	r3, [pc, #108]	; (8003d5c <HAL_GPIO_Init+0x334>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	43db      	mvns	r3, r3
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d003      	beq.n	8003d10 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d10:	4a12      	ldr	r2, [pc, #72]	; (8003d5c <HAL_GPIO_Init+0x334>)
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	61fb      	str	r3, [r7, #28]
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	2b0f      	cmp	r3, #15
 8003d20:	f67f ae90 	bls.w	8003a44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d24:	bf00      	nop
 8003d26:	bf00      	nop
 8003d28:	3724      	adds	r7, #36	; 0x24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	40023800 	.word	0x40023800
 8003d38:	40013800 	.word	0x40013800
 8003d3c:	40020000 	.word	0x40020000
 8003d40:	40020400 	.word	0x40020400
 8003d44:	40020800 	.word	0x40020800
 8003d48:	40020c00 	.word	0x40020c00
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	40021400 	.word	0x40021400
 8003d54:	40021800 	.word	0x40021800
 8003d58:	40021c00 	.word	0x40021c00
 8003d5c:	40013c00 	.word	0x40013c00

08003d60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	807b      	strh	r3, [r7, #2]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d70:	787b      	ldrb	r3, [r7, #1]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d76:	887a      	ldrh	r2, [r7, #2]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d7c:	e003      	b.n	8003d86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d7e:	887b      	ldrh	r3, [r7, #2]
 8003d80:	041a      	lsls	r2, r3, #16
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	619a      	str	r2, [r3, #24]
}
 8003d86:	bf00      	nop
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b085      	sub	sp, #20
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003da4:	887a      	ldrh	r2, [r7, #2]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	4013      	ands	r3, r2
 8003daa:	041a      	lsls	r2, r3, #16
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	43d9      	mvns	r1, r3
 8003db0:	887b      	ldrh	r3, [r7, #2]
 8003db2:	400b      	ands	r3, r1
 8003db4:	431a      	orrs	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	619a      	str	r2, [r3, #24]
}
 8003dba:	bf00      	nop
 8003dbc:	3714      	adds	r7, #20
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
	...

08003dc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e12b      	b.n	8004032 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d106      	bne.n	8003df4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7fe fbfe 	bl	80025f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2224      	movs	r2, #36	; 0x24
 8003df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 0201 	bic.w	r2, r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e2c:	f001 fd2a 	bl	8005884 <HAL_RCC_GetPCLK1Freq>
 8003e30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	4a81      	ldr	r2, [pc, #516]	; (800403c <HAL_I2C_Init+0x274>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d807      	bhi.n	8003e4c <HAL_I2C_Init+0x84>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4a80      	ldr	r2, [pc, #512]	; (8004040 <HAL_I2C_Init+0x278>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	bf94      	ite	ls
 8003e44:	2301      	movls	r3, #1
 8003e46:	2300      	movhi	r3, #0
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	e006      	b.n	8003e5a <HAL_I2C_Init+0x92>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4a7d      	ldr	r2, [pc, #500]	; (8004044 <HAL_I2C_Init+0x27c>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	bf94      	ite	ls
 8003e54:	2301      	movls	r3, #1
 8003e56:	2300      	movhi	r3, #0
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e0e7      	b.n	8004032 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4a78      	ldr	r2, [pc, #480]	; (8004048 <HAL_I2C_Init+0x280>)
 8003e66:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6a:	0c9b      	lsrs	r3, r3, #18
 8003e6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	4a6a      	ldr	r2, [pc, #424]	; (800403c <HAL_I2C_Init+0x274>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d802      	bhi.n	8003e9c <HAL_I2C_Init+0xd4>
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	e009      	b.n	8003eb0 <HAL_I2C_Init+0xe8>
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ea2:	fb02 f303 	mul.w	r3, r2, r3
 8003ea6:	4a69      	ldr	r2, [pc, #420]	; (800404c <HAL_I2C_Init+0x284>)
 8003ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8003eac:	099b      	lsrs	r3, r3, #6
 8003eae:	3301      	adds	r3, #1
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	6812      	ldr	r2, [r2, #0]
 8003eb4:	430b      	orrs	r3, r1
 8003eb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ec2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	495c      	ldr	r1, [pc, #368]	; (800403c <HAL_I2C_Init+0x274>)
 8003ecc:	428b      	cmp	r3, r1
 8003ece:	d819      	bhi.n	8003f04 <HAL_I2C_Init+0x13c>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	1e59      	subs	r1, r3, #1
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ede:	1c59      	adds	r1, r3, #1
 8003ee0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ee4:	400b      	ands	r3, r1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00a      	beq.n	8003f00 <HAL_I2C_Init+0x138>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	1e59      	subs	r1, r3, #1
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ef8:	3301      	adds	r3, #1
 8003efa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003efe:	e051      	b.n	8003fa4 <HAL_I2C_Init+0x1dc>
 8003f00:	2304      	movs	r3, #4
 8003f02:	e04f      	b.n	8003fa4 <HAL_I2C_Init+0x1dc>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d111      	bne.n	8003f30 <HAL_I2C_Init+0x168>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	1e58      	subs	r0, r3, #1
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6859      	ldr	r1, [r3, #4]
 8003f14:	460b      	mov	r3, r1
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	440b      	add	r3, r1
 8003f1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f1e:	3301      	adds	r3, #1
 8003f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	bf0c      	ite	eq
 8003f28:	2301      	moveq	r3, #1
 8003f2a:	2300      	movne	r3, #0
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	e012      	b.n	8003f56 <HAL_I2C_Init+0x18e>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	1e58      	subs	r0, r3, #1
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6859      	ldr	r1, [r3, #4]
 8003f38:	460b      	mov	r3, r1
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	440b      	add	r3, r1
 8003f3e:	0099      	lsls	r1, r3, #2
 8003f40:	440b      	add	r3, r1
 8003f42:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f46:	3301      	adds	r3, #1
 8003f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	bf0c      	ite	eq
 8003f50:	2301      	moveq	r3, #1
 8003f52:	2300      	movne	r3, #0
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <HAL_I2C_Init+0x196>
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e022      	b.n	8003fa4 <HAL_I2C_Init+0x1dc>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10e      	bne.n	8003f84 <HAL_I2C_Init+0x1bc>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	1e58      	subs	r0, r3, #1
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6859      	ldr	r1, [r3, #4]
 8003f6e:	460b      	mov	r3, r1
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	440b      	add	r3, r1
 8003f74:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f78:	3301      	adds	r3, #1
 8003f7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f82:	e00f      	b.n	8003fa4 <HAL_I2C_Init+0x1dc>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	1e58      	subs	r0, r3, #1
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6859      	ldr	r1, [r3, #4]
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	440b      	add	r3, r1
 8003f92:	0099      	lsls	r1, r3, #2
 8003f94:	440b      	add	r3, r1
 8003f96:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fa0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fa4:	6879      	ldr	r1, [r7, #4]
 8003fa6:	6809      	ldr	r1, [r1, #0]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69da      	ldr	r2, [r3, #28]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003fd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	6911      	ldr	r1, [r2, #16]
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	68d2      	ldr	r2, [r2, #12]
 8003fde:	4311      	orrs	r1, r2
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	6812      	ldr	r2, [r2, #0]
 8003fe4:	430b      	orrs	r3, r1
 8003fe6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	695a      	ldr	r2, [r3, #20]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f042 0201 	orr.w	r2, r2, #1
 8004012:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2220      	movs	r2, #32
 800401e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	000186a0 	.word	0x000186a0
 8004040:	001e847f 	.word	0x001e847f
 8004044:	003d08ff 	.word	0x003d08ff
 8004048:	431bde83 	.word	0x431bde83
 800404c:	10624dd3 	.word	0x10624dd3

08004050 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b088      	sub	sp, #32
 8004054:	af02      	add	r7, sp, #8
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	4608      	mov	r0, r1
 800405a:	4611      	mov	r1, r2
 800405c:	461a      	mov	r2, r3
 800405e:	4603      	mov	r3, r0
 8004060:	817b      	strh	r3, [r7, #10]
 8004062:	460b      	mov	r3, r1
 8004064:	813b      	strh	r3, [r7, #8]
 8004066:	4613      	mov	r3, r2
 8004068:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800406a:	f7fe ffed 	bl	8003048 <HAL_GetTick>
 800406e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b20      	cmp	r3, #32
 800407a:	f040 80d9 	bne.w	8004230 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	2319      	movs	r3, #25
 8004084:	2201      	movs	r2, #1
 8004086:	496d      	ldr	r1, [pc, #436]	; (800423c <HAL_I2C_Mem_Write+0x1ec>)
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f000 fdad 	bl	8004be8 <I2C_WaitOnFlagUntilTimeout>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004094:	2302      	movs	r3, #2
 8004096:	e0cc      	b.n	8004232 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d101      	bne.n	80040a6 <HAL_I2C_Mem_Write+0x56>
 80040a2:	2302      	movs	r3, #2
 80040a4:	e0c5      	b.n	8004232 <HAL_I2C_Mem_Write+0x1e2>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d007      	beq.n	80040cc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f042 0201 	orr.w	r2, r2, #1
 80040ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2221      	movs	r2, #33	; 0x21
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2240      	movs	r2, #64	; 0x40
 80040e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6a3a      	ldr	r2, [r7, #32]
 80040f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80040fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004102:	b29a      	uxth	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4a4d      	ldr	r2, [pc, #308]	; (8004240 <HAL_I2C_Mem_Write+0x1f0>)
 800410c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800410e:	88f8      	ldrh	r0, [r7, #6]
 8004110:	893a      	ldrh	r2, [r7, #8]
 8004112:	8979      	ldrh	r1, [r7, #10]
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	9301      	str	r3, [sp, #4]
 8004118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	4603      	mov	r3, r0
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 fbe4 	bl	80048ec <I2C_RequestMemoryWrite>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d052      	beq.n	80041d0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e081      	b.n	8004232 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f000 fe2e 	bl	8004d94 <I2C_WaitOnTXEFlagUntilTimeout>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00d      	beq.n	800415a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	2b04      	cmp	r3, #4
 8004144:	d107      	bne.n	8004156 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004154:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e06b      	b.n	8004232 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415e:	781a      	ldrb	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416a:	1c5a      	adds	r2, r3, #1
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004174:	3b01      	subs	r3, #1
 8004176:	b29a      	uxth	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004180:	b29b      	uxth	r3, r3
 8004182:	3b01      	subs	r3, #1
 8004184:	b29a      	uxth	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b04      	cmp	r3, #4
 8004196:	d11b      	bne.n	80041d0 <HAL_I2C_Mem_Write+0x180>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419c:	2b00      	cmp	r3, #0
 800419e:	d017      	beq.n	80041d0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	781a      	ldrb	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	1c5a      	adds	r2, r3, #1
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ba:	3b01      	subs	r3, #1
 80041bc:	b29a      	uxth	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	3b01      	subs	r3, #1
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1aa      	bne.n	800412e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 fe1a 	bl	8004e16 <I2C_WaitOnBTFFlagUntilTimeout>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00d      	beq.n	8004204 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ec:	2b04      	cmp	r3, #4
 80041ee:	d107      	bne.n	8004200 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041fe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e016      	b.n	8004232 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004212:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2220      	movs	r2, #32
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800422c:	2300      	movs	r3, #0
 800422e:	e000      	b.n	8004232 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004230:	2302      	movs	r3, #2
  }
}
 8004232:	4618      	mov	r0, r3
 8004234:	3718      	adds	r7, #24
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	00100002 	.word	0x00100002
 8004240:	ffff0000 	.word	0xffff0000

08004244 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b08c      	sub	sp, #48	; 0x30
 8004248:	af02      	add	r7, sp, #8
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	4608      	mov	r0, r1
 800424e:	4611      	mov	r1, r2
 8004250:	461a      	mov	r2, r3
 8004252:	4603      	mov	r3, r0
 8004254:	817b      	strh	r3, [r7, #10]
 8004256:	460b      	mov	r3, r1
 8004258:	813b      	strh	r3, [r7, #8]
 800425a:	4613      	mov	r3, r2
 800425c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800425e:	f7fe fef3 	bl	8003048 <HAL_GetTick>
 8004262:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b20      	cmp	r3, #32
 800426e:	f040 8208 	bne.w	8004682 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	2319      	movs	r3, #25
 8004278:	2201      	movs	r2, #1
 800427a:	497b      	ldr	r1, [pc, #492]	; (8004468 <HAL_I2C_Mem_Read+0x224>)
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f000 fcb3 	bl	8004be8 <I2C_WaitOnFlagUntilTimeout>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004288:	2302      	movs	r3, #2
 800428a:	e1fb      	b.n	8004684 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004292:	2b01      	cmp	r3, #1
 8004294:	d101      	bne.n	800429a <HAL_I2C_Mem_Read+0x56>
 8004296:	2302      	movs	r3, #2
 8004298:	e1f4      	b.n	8004684 <HAL_I2C_Mem_Read+0x440>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d007      	beq.n	80042c0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0201 	orr.w	r2, r2, #1
 80042be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2222      	movs	r2, #34	; 0x22
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2240      	movs	r2, #64	; 0x40
 80042dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80042f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	4a5b      	ldr	r2, [pc, #364]	; (800446c <HAL_I2C_Mem_Read+0x228>)
 8004300:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004302:	88f8      	ldrh	r0, [r7, #6]
 8004304:	893a      	ldrh	r2, [r7, #8]
 8004306:	8979      	ldrh	r1, [r7, #10]
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	9301      	str	r3, [sp, #4]
 800430c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	4603      	mov	r3, r0
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f000 fb80 	bl	8004a18 <I2C_RequestMemoryRead>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e1b0      	b.n	8004684 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004326:	2b00      	cmp	r3, #0
 8004328:	d113      	bne.n	8004352 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800432a:	2300      	movs	r3, #0
 800432c:	623b      	str	r3, [r7, #32]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	623b      	str	r3, [r7, #32]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	623b      	str	r3, [r7, #32]
 800433e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800434e:	601a      	str	r2, [r3, #0]
 8004350:	e184      	b.n	800465c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004356:	2b01      	cmp	r3, #1
 8004358:	d11b      	bne.n	8004392 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004368:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800436a:	2300      	movs	r3, #0
 800436c:	61fb      	str	r3, [r7, #28]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	61fb      	str	r3, [r7, #28]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	61fb      	str	r3, [r7, #28]
 800437e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800438e:	601a      	str	r2, [r3, #0]
 8004390:	e164      	b.n	800465c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004396:	2b02      	cmp	r3, #2
 8004398:	d11b      	bne.n	80043d2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043a8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ba:	2300      	movs	r3, #0
 80043bc:	61bb      	str	r3, [r7, #24]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	61bb      	str	r3, [r7, #24]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	61bb      	str	r3, [r7, #24]
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	e144      	b.n	800465c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043d2:	2300      	movs	r3, #0
 80043d4:	617b      	str	r3, [r7, #20]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	617b      	str	r3, [r7, #20]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	617b      	str	r3, [r7, #20]
 80043e6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80043e8:	e138      	b.n	800465c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ee:	2b03      	cmp	r3, #3
 80043f0:	f200 80f1 	bhi.w	80045d6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d123      	bne.n	8004444 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 fd49 	bl	8004e98 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e139      	b.n	8004684 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	691a      	ldr	r2, [r3, #16]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	b2d2      	uxtb	r2, r2
 800441c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	1c5a      	adds	r2, r3, #1
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800442c:	3b01      	subs	r3, #1
 800442e:	b29a      	uxth	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004438:	b29b      	uxth	r3, r3
 800443a:	3b01      	subs	r3, #1
 800443c:	b29a      	uxth	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004442:	e10b      	b.n	800465c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004448:	2b02      	cmp	r3, #2
 800444a:	d14e      	bne.n	80044ea <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004452:	2200      	movs	r2, #0
 8004454:	4906      	ldr	r1, [pc, #24]	; (8004470 <HAL_I2C_Mem_Read+0x22c>)
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 fbc6 	bl	8004be8 <I2C_WaitOnFlagUntilTimeout>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d008      	beq.n	8004474 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e10e      	b.n	8004684 <HAL_I2C_Mem_Read+0x440>
 8004466:	bf00      	nop
 8004468:	00100002 	.word	0x00100002
 800446c:	ffff0000 	.word	0xffff0000
 8004470:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004482:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	691a      	ldr	r2, [r3, #16]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	b2d2      	uxtb	r2, r2
 8004490:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004496:	1c5a      	adds	r2, r3, #1
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a0:	3b01      	subs	r3, #1
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	3b01      	subs	r3, #1
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	691a      	ldr	r2, [r3, #16]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c0:	b2d2      	uxtb	r2, r2
 80044c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c8:	1c5a      	adds	r2, r3, #1
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d2:	3b01      	subs	r3, #1
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044de:	b29b      	uxth	r3, r3
 80044e0:	3b01      	subs	r3, #1
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044e8:	e0b8      	b.n	800465c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f0:	2200      	movs	r2, #0
 80044f2:	4966      	ldr	r1, [pc, #408]	; (800468c <HAL_I2C_Mem_Read+0x448>)
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 fb77 	bl	8004be8 <I2C_WaitOnFlagUntilTimeout>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e0bf      	b.n	8004684 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004512:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	691a      	ldr	r2, [r3, #16]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451e:	b2d2      	uxtb	r2, r2
 8004520:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004526:	1c5a      	adds	r2, r3, #1
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004530:	3b01      	subs	r3, #1
 8004532:	b29a      	uxth	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453c:	b29b      	uxth	r3, r3
 800453e:	3b01      	subs	r3, #1
 8004540:	b29a      	uxth	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004548:	9300      	str	r3, [sp, #0]
 800454a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800454c:	2200      	movs	r2, #0
 800454e:	494f      	ldr	r1, [pc, #316]	; (800468c <HAL_I2C_Mem_Read+0x448>)
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 fb49 	bl	8004be8 <I2C_WaitOnFlagUntilTimeout>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d001      	beq.n	8004560 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e091      	b.n	8004684 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800456e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	691a      	ldr	r2, [r3, #16]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457a:	b2d2      	uxtb	r2, r2
 800457c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004582:	1c5a      	adds	r2, r3, #1
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800458c:	3b01      	subs	r3, #1
 800458e:	b29a      	uxth	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004598:	b29b      	uxth	r3, r3
 800459a:	3b01      	subs	r3, #1
 800459c:	b29a      	uxth	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	691a      	ldr	r2, [r3, #16]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ac:	b2d2      	uxtb	r2, r2
 80045ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b4:	1c5a      	adds	r2, r3, #1
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045be:	3b01      	subs	r3, #1
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	3b01      	subs	r3, #1
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045d4:	e042      	b.n	800465c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 fc5c 	bl	8004e98 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e04c      	b.n	8004684 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	691a      	ldr	r2, [r3, #16]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f4:	b2d2      	uxtb	r2, r2
 80045f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fc:	1c5a      	adds	r2, r3, #1
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004606:	3b01      	subs	r3, #1
 8004608:	b29a      	uxth	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004612:	b29b      	uxth	r3, r3
 8004614:	3b01      	subs	r3, #1
 8004616:	b29a      	uxth	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	f003 0304 	and.w	r3, r3, #4
 8004626:	2b04      	cmp	r3, #4
 8004628:	d118      	bne.n	800465c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	691a      	ldr	r2, [r3, #16]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	b2d2      	uxtb	r2, r2
 8004636:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	1c5a      	adds	r2, r3, #1
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004646:	3b01      	subs	r3, #1
 8004648:	b29a      	uxth	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004652:	b29b      	uxth	r3, r3
 8004654:	3b01      	subs	r3, #1
 8004656:	b29a      	uxth	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004660:	2b00      	cmp	r3, #0
 8004662:	f47f aec2 	bne.w	80043ea <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2220      	movs	r2, #32
 800466a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800467e:	2300      	movs	r3, #0
 8004680:	e000      	b.n	8004684 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004682:	2302      	movs	r3, #2
  }
}
 8004684:	4618      	mov	r0, r3
 8004686:	3728      	adds	r7, #40	; 0x28
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	00010004 	.word	0x00010004

08004690 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b08a      	sub	sp, #40	; 0x28
 8004694:	af02      	add	r7, sp, #8
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	607a      	str	r2, [r7, #4]
 800469a:	603b      	str	r3, [r7, #0]
 800469c:	460b      	mov	r3, r1
 800469e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80046a0:	f7fe fcd2 	bl	8003048 <HAL_GetTick>
 80046a4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80046a6:	2300      	movs	r3, #0
 80046a8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b20      	cmp	r3, #32
 80046b4:	f040 8111 	bne.w	80048da <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	9300      	str	r3, [sp, #0]
 80046bc:	2319      	movs	r3, #25
 80046be:	2201      	movs	r2, #1
 80046c0:	4988      	ldr	r1, [pc, #544]	; (80048e4 <HAL_I2C_IsDeviceReady+0x254>)
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f000 fa90 	bl	8004be8 <I2C_WaitOnFlagUntilTimeout>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80046ce:	2302      	movs	r3, #2
 80046d0:	e104      	b.n	80048dc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d101      	bne.n	80046e0 <HAL_I2C_IsDeviceReady+0x50>
 80046dc:	2302      	movs	r3, #2
 80046de:	e0fd      	b.n	80048dc <HAL_I2C_IsDeviceReady+0x24c>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d007      	beq.n	8004706 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f042 0201 	orr.w	r2, r2, #1
 8004704:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004714:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2224      	movs	r2, #36	; 0x24
 800471a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4a70      	ldr	r2, [pc, #448]	; (80048e8 <HAL_I2C_IsDeviceReady+0x258>)
 8004728:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004738:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2200      	movs	r2, #0
 8004742:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 fa4e 	bl	8004be8 <I2C_WaitOnFlagUntilTimeout>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00d      	beq.n	800476e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800475c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004760:	d103      	bne.n	800476a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004768:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e0b6      	b.n	80048dc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800476e:	897b      	ldrh	r3, [r7, #10]
 8004770:	b2db      	uxtb	r3, r3
 8004772:	461a      	mov	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800477c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800477e:	f7fe fc63 	bl	8003048 <HAL_GetTick>
 8004782:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b02      	cmp	r3, #2
 8004790:	bf0c      	ite	eq
 8004792:	2301      	moveq	r3, #1
 8004794:	2300      	movne	r3, #0
 8004796:	b2db      	uxtb	r3, r3
 8004798:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047a8:	bf0c      	ite	eq
 80047aa:	2301      	moveq	r3, #1
 80047ac:	2300      	movne	r3, #0
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80047b2:	e025      	b.n	8004800 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80047b4:	f7fe fc48 	bl	8003048 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d302      	bcc.n	80047ca <HAL_I2C_IsDeviceReady+0x13a>
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d103      	bne.n	80047d2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	22a0      	movs	r2, #160	; 0xa0
 80047ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b02      	cmp	r3, #2
 80047de:	bf0c      	ite	eq
 80047e0:	2301      	moveq	r3, #1
 80047e2:	2300      	movne	r3, #0
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047f6:	bf0c      	ite	eq
 80047f8:	2301      	moveq	r3, #1
 80047fa:	2300      	movne	r3, #0
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2ba0      	cmp	r3, #160	; 0xa0
 800480a:	d005      	beq.n	8004818 <HAL_I2C_IsDeviceReady+0x188>
 800480c:	7dfb      	ldrb	r3, [r7, #23]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d102      	bne.n	8004818 <HAL_I2C_IsDeviceReady+0x188>
 8004812:	7dbb      	ldrb	r3, [r7, #22]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d0cd      	beq.n	80047b4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2220      	movs	r2, #32
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b02      	cmp	r3, #2
 800482c:	d129      	bne.n	8004882 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800483c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800483e:	2300      	movs	r3, #0
 8004840:	613b      	str	r3, [r7, #16]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	613b      	str	r3, [r7, #16]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	613b      	str	r3, [r7, #16]
 8004852:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	9300      	str	r3, [sp, #0]
 8004858:	2319      	movs	r3, #25
 800485a:	2201      	movs	r2, #1
 800485c:	4921      	ldr	r1, [pc, #132]	; (80048e4 <HAL_I2C_IsDeviceReady+0x254>)
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f000 f9c2 	bl	8004be8 <I2C_WaitOnFlagUntilTimeout>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e036      	b.n	80048dc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2220      	movs	r2, #32
 8004872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800487e:	2300      	movs	r3, #0
 8004880:	e02c      	b.n	80048dc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004890:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800489a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	9300      	str	r3, [sp, #0]
 80048a0:	2319      	movs	r3, #25
 80048a2:	2201      	movs	r2, #1
 80048a4:	490f      	ldr	r1, [pc, #60]	; (80048e4 <HAL_I2C_IsDeviceReady+0x254>)
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f000 f99e 	bl	8004be8 <I2C_WaitOnFlagUntilTimeout>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e012      	b.n	80048dc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	3301      	adds	r3, #1
 80048ba:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	f4ff af32 	bcc.w	800472a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2220      	movs	r2, #32
 80048ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e000      	b.n	80048dc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80048da:	2302      	movs	r3, #2
  }
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3720      	adds	r7, #32
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	00100002 	.word	0x00100002
 80048e8:	ffff0000 	.word	0xffff0000

080048ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b088      	sub	sp, #32
 80048f0:	af02      	add	r7, sp, #8
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	4608      	mov	r0, r1
 80048f6:	4611      	mov	r1, r2
 80048f8:	461a      	mov	r2, r3
 80048fa:	4603      	mov	r3, r0
 80048fc:	817b      	strh	r3, [r7, #10]
 80048fe:	460b      	mov	r3, r1
 8004900:	813b      	strh	r3, [r7, #8]
 8004902:	4613      	mov	r3, r2
 8004904:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004914:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	6a3b      	ldr	r3, [r7, #32]
 800491c:	2200      	movs	r2, #0
 800491e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 f960 	bl	8004be8 <I2C_WaitOnFlagUntilTimeout>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00d      	beq.n	800494a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004938:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800493c:	d103      	bne.n	8004946 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004944:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e05f      	b.n	8004a0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800494a:	897b      	ldrh	r3, [r7, #10]
 800494c:	b2db      	uxtb	r3, r3
 800494e:	461a      	mov	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004958:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	6a3a      	ldr	r2, [r7, #32]
 800495e:	492d      	ldr	r1, [pc, #180]	; (8004a14 <I2C_RequestMemoryWrite+0x128>)
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 f998 	bl	8004c96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e04c      	b.n	8004a0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004970:	2300      	movs	r3, #0
 8004972:	617b      	str	r3, [r7, #20]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	617b      	str	r3, [r7, #20]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	617b      	str	r3, [r7, #20]
 8004984:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004988:	6a39      	ldr	r1, [r7, #32]
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f000 fa02 	bl	8004d94 <I2C_WaitOnTXEFlagUntilTimeout>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00d      	beq.n	80049b2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499a:	2b04      	cmp	r3, #4
 800499c:	d107      	bne.n	80049ae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e02b      	b.n	8004a0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049b2:	88fb      	ldrh	r3, [r7, #6]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d105      	bne.n	80049c4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049b8:	893b      	ldrh	r3, [r7, #8]
 80049ba:	b2da      	uxtb	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	611a      	str	r2, [r3, #16]
 80049c2:	e021      	b.n	8004a08 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80049c4:	893b      	ldrh	r3, [r7, #8]
 80049c6:	0a1b      	lsrs	r3, r3, #8
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	b2da      	uxtb	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d4:	6a39      	ldr	r1, [r7, #32]
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f000 f9dc 	bl	8004d94 <I2C_WaitOnTXEFlagUntilTimeout>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00d      	beq.n	80049fe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d107      	bne.n	80049fa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e005      	b.n	8004a0a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049fe:	893b      	ldrh	r3, [r7, #8]
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3718      	adds	r7, #24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	00010002 	.word	0x00010002

08004a18 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b088      	sub	sp, #32
 8004a1c:	af02      	add	r7, sp, #8
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	4608      	mov	r0, r1
 8004a22:	4611      	mov	r1, r2
 8004a24:	461a      	mov	r2, r3
 8004a26:	4603      	mov	r3, r0
 8004a28:	817b      	strh	r3, [r7, #10]
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	813b      	strh	r3, [r7, #8]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a40:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	6a3b      	ldr	r3, [r7, #32]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f000 f8c2 	bl	8004be8 <I2C_WaitOnFlagUntilTimeout>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00d      	beq.n	8004a86 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a78:	d103      	bne.n	8004a82 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a80:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e0aa      	b.n	8004bdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a86:	897b      	ldrh	r3, [r7, #10]
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	6a3a      	ldr	r2, [r7, #32]
 8004a9a:	4952      	ldr	r1, [pc, #328]	; (8004be4 <I2C_RequestMemoryRead+0x1cc>)
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 f8fa 	bl	8004c96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e097      	b.n	8004bdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aac:	2300      	movs	r3, #0
 8004aae:	617b      	str	r3, [r7, #20]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	617b      	str	r3, [r7, #20]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	617b      	str	r3, [r7, #20]
 8004ac0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ac4:	6a39      	ldr	r1, [r7, #32]
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f000 f964 	bl	8004d94 <I2C_WaitOnTXEFlagUntilTimeout>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00d      	beq.n	8004aee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	d107      	bne.n	8004aea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ae8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e076      	b.n	8004bdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004aee:	88fb      	ldrh	r3, [r7, #6]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d105      	bne.n	8004b00 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004af4:	893b      	ldrh	r3, [r7, #8]
 8004af6:	b2da      	uxtb	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	611a      	str	r2, [r3, #16]
 8004afe:	e021      	b.n	8004b44 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b00:	893b      	ldrh	r3, [r7, #8]
 8004b02:	0a1b      	lsrs	r3, r3, #8
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b10:	6a39      	ldr	r1, [r7, #32]
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f000 f93e 	bl	8004d94 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00d      	beq.n	8004b3a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	2b04      	cmp	r3, #4
 8004b24:	d107      	bne.n	8004b36 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e050      	b.n	8004bdc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b3a:	893b      	ldrh	r3, [r7, #8]
 8004b3c:	b2da      	uxtb	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b46:	6a39      	ldr	r1, [r7, #32]
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f000 f923 	bl	8004d94 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00d      	beq.n	8004b70 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d107      	bne.n	8004b6c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b6a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e035      	b.n	8004bdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b7e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	9300      	str	r3, [sp, #0]
 8004b84:	6a3b      	ldr	r3, [r7, #32]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f000 f82b 	bl	8004be8 <I2C_WaitOnFlagUntilTimeout>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00d      	beq.n	8004bb4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ba6:	d103      	bne.n	8004bb0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e013      	b.n	8004bdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004bb4:	897b      	ldrh	r3, [r7, #10]
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	f043 0301 	orr.w	r3, r3, #1
 8004bbc:	b2da      	uxtb	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc6:	6a3a      	ldr	r2, [r7, #32]
 8004bc8:	4906      	ldr	r1, [pc, #24]	; (8004be4 <I2C_RequestMemoryRead+0x1cc>)
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f000 f863 	bl	8004c96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e000      	b.n	8004bdc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3718      	adds	r7, #24
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	00010002 	.word	0x00010002

08004be8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	603b      	str	r3, [r7, #0]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bf8:	e025      	b.n	8004c46 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c00:	d021      	beq.n	8004c46 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c02:	f7fe fa21 	bl	8003048 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d302      	bcc.n	8004c18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d116      	bne.n	8004c46 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2220      	movs	r2, #32
 8004c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c32:	f043 0220 	orr.w	r2, r3, #32
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e023      	b.n	8004c8e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	0c1b      	lsrs	r3, r3, #16
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d10d      	bne.n	8004c6c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	43da      	mvns	r2, r3
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	bf0c      	ite	eq
 8004c62:	2301      	moveq	r3, #1
 8004c64:	2300      	movne	r3, #0
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	461a      	mov	r2, r3
 8004c6a:	e00c      	b.n	8004c86 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	43da      	mvns	r2, r3
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	4013      	ands	r3, r2
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	bf0c      	ite	eq
 8004c7e:	2301      	moveq	r3, #1
 8004c80:	2300      	movne	r3, #0
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	461a      	mov	r2, r3
 8004c86:	79fb      	ldrb	r3, [r7, #7]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d0b6      	beq.n	8004bfa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b084      	sub	sp, #16
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	60f8      	str	r0, [r7, #12]
 8004c9e:	60b9      	str	r1, [r7, #8]
 8004ca0:	607a      	str	r2, [r7, #4]
 8004ca2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ca4:	e051      	b.n	8004d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cb4:	d123      	bne.n	8004cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cc4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004cce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2220      	movs	r2, #32
 8004cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cea:	f043 0204 	orr.w	r2, r3, #4
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e046      	b.n	8004d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d04:	d021      	beq.n	8004d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d06:	f7fe f99f 	bl	8003048 <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d302      	bcc.n	8004d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d116      	bne.n	8004d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2220      	movs	r2, #32
 8004d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d36:	f043 0220 	orr.w	r2, r3, #32
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e020      	b.n	8004d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	0c1b      	lsrs	r3, r3, #16
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d10c      	bne.n	8004d6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	43da      	mvns	r2, r3
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	4013      	ands	r3, r2
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	bf14      	ite	ne
 8004d66:	2301      	movne	r3, #1
 8004d68:	2300      	moveq	r3, #0
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	e00b      	b.n	8004d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	43da      	mvns	r2, r3
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	bf14      	ite	ne
 8004d80:	2301      	movne	r3, #1
 8004d82:	2300      	moveq	r3, #0
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d18d      	bne.n	8004ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004da0:	e02d      	b.n	8004dfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f000 f8ce 	bl	8004f44 <I2C_IsAcknowledgeFailed>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e02d      	b.n	8004e0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db8:	d021      	beq.n	8004dfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dba:	f7fe f945 	bl	8003048 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d302      	bcc.n	8004dd0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d116      	bne.n	8004dfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dea:	f043 0220 	orr.w	r2, r3, #32
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e007      	b.n	8004e0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	695b      	ldr	r3, [r3, #20]
 8004e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e08:	2b80      	cmp	r3, #128	; 0x80
 8004e0a:	d1ca      	bne.n	8004da2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b084      	sub	sp, #16
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	60f8      	str	r0, [r7, #12]
 8004e1e:	60b9      	str	r1, [r7, #8]
 8004e20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e22:	e02d      	b.n	8004e80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f000 f88d 	bl	8004f44 <I2C_IsAcknowledgeFailed>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d001      	beq.n	8004e34 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e02d      	b.n	8004e90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e3a:	d021      	beq.n	8004e80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e3c:	f7fe f904 	bl	8003048 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d302      	bcc.n	8004e52 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d116      	bne.n	8004e80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6c:	f043 0220 	orr.w	r2, r3, #32
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e007      	b.n	8004e90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	f003 0304 	and.w	r3, r3, #4
 8004e8a:	2b04      	cmp	r3, #4
 8004e8c:	d1ca      	bne.n	8004e24 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ea4:	e042      	b.n	8004f2c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	f003 0310 	and.w	r3, r3, #16
 8004eb0:	2b10      	cmp	r3, #16
 8004eb2:	d119      	bne.n	8004ee8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f06f 0210 	mvn.w	r2, #16
 8004ebc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e029      	b.n	8004f3c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ee8:	f7fe f8ae 	bl	8003048 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d302      	bcc.n	8004efe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d116      	bne.n	8004f2c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2220      	movs	r2, #32
 8004f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f18:	f043 0220 	orr.w	r2, r3, #32
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e007      	b.n	8004f3c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f36:	2b40      	cmp	r3, #64	; 0x40
 8004f38:	d1b5      	bne.n	8004ea6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f5a:	d11b      	bne.n	8004f94 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f64:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2220      	movs	r2, #32
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f80:	f043 0204 	orr.w	r2, r3, #4
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e000      	b.n	8004f96 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
	...

08004fa4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e267      	b.n	8005486 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d075      	beq.n	80050ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fc2:	4b88      	ldr	r3, [pc, #544]	; (80051e4 <HAL_RCC_OscConfig+0x240>)
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f003 030c 	and.w	r3, r3, #12
 8004fca:	2b04      	cmp	r3, #4
 8004fcc:	d00c      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fce:	4b85      	ldr	r3, [pc, #532]	; (80051e4 <HAL_RCC_OscConfig+0x240>)
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fd6:	2b08      	cmp	r3, #8
 8004fd8:	d112      	bne.n	8005000 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fda:	4b82      	ldr	r3, [pc, #520]	; (80051e4 <HAL_RCC_OscConfig+0x240>)
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fe2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fe6:	d10b      	bne.n	8005000 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fe8:	4b7e      	ldr	r3, [pc, #504]	; (80051e4 <HAL_RCC_OscConfig+0x240>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d05b      	beq.n	80050ac <HAL_RCC_OscConfig+0x108>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d157      	bne.n	80050ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e242      	b.n	8005486 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005008:	d106      	bne.n	8005018 <HAL_RCC_OscConfig+0x74>
 800500a:	4b76      	ldr	r3, [pc, #472]	; (80051e4 <HAL_RCC_OscConfig+0x240>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a75      	ldr	r2, [pc, #468]	; (80051e4 <HAL_RCC_OscConfig+0x240>)
 8005010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005014:	6013      	str	r3, [r2, #0]
 8005016:	e01d      	b.n	8005054 <HAL_RCC_OscConfig+0xb0>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005020:	d10c      	bne.n	800503c <HAL_RCC_OscConfig+0x98>
 8005022:	4b70      	ldr	r3, [pc, #448]	; (80051e4 <HAL_RCC_OscConfig+0x240>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a6f      	ldr	r2, [pc, #444]	; (80051e4 <HAL_RCC_OscConfig+0x240>)
 8005028:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800502c:	6013      	str	r3, [r2, #0]
 800502e:	4b6d      	ldr	r3, [pc, #436]	; (80051e4 <HAL_RCC_OscConfig+0x240>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a6c      	ldr	r2, [pc, #432]	; (80051e4 <HAL_RCC_OscConfig+0x240>)
 8005034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005038:	6013      	str	r3, [r2, #0]
 800503a:	e00b      	b.n	8005054 <HAL_RCC_OscConfig+0xb0>
 800503c:	4b69      	ldr	r3, [pc, #420]	; (80051e4 <HAL_RCC_OscConfig+0x240>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a68      	ldr	r2, [pc, #416]	; (80051e4 <HAL_RCC_OscConfig+0x240>)
 8005042:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005046:	6013      	str	r3, [r2, #0]
 8005048:	4b66      	ldr	r3, [pc, #408]	; (80051e4 <HAL_RCC_OscConfig+0x240>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a65      	ldr	r2, [pc, #404]	; (80051e4 <HAL_RCC_OscConfig+0x240>)
 800504e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005052:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d013      	beq.n	8005084 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800505c:	f7fd fff4 	bl	8003048 <HAL_GetTick>
 8005060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005064:	f7fd fff0 	bl	8003048 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b64      	cmp	r3, #100	; 0x64
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e207      	b.n	8005486 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005076:	4b5b      	ldr	r3, [pc, #364]	; (80051e4 <HAL_RCC_OscConfig+0x240>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d0f0      	beq.n	8005064 <HAL_RCC_OscConfig+0xc0>
 8005082:	e014      	b.n	80050ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005084:	f7fd ffe0 	bl	8003048 <HAL_GetTick>
 8005088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800508a:	e008      	b.n	800509e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800508c:	f7fd ffdc 	bl	8003048 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b64      	cmp	r3, #100	; 0x64
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e1f3      	b.n	8005486 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800509e:	4b51      	ldr	r3, [pc, #324]	; (80051e4 <HAL_RCC_OscConfig+0x240>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1f0      	bne.n	800508c <HAL_RCC_OscConfig+0xe8>
 80050aa:	e000      	b.n	80050ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d063      	beq.n	8005182 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050ba:	4b4a      	ldr	r3, [pc, #296]	; (80051e4 <HAL_RCC_OscConfig+0x240>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f003 030c 	and.w	r3, r3, #12
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00b      	beq.n	80050de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050c6:	4b47      	ldr	r3, [pc, #284]	; (80051e4 <HAL_RCC_OscConfig+0x240>)
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050ce:	2b08      	cmp	r3, #8
 80050d0:	d11c      	bne.n	800510c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050d2:	4b44      	ldr	r3, [pc, #272]	; (80051e4 <HAL_RCC_OscConfig+0x240>)
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d116      	bne.n	800510c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050de:	4b41      	ldr	r3, [pc, #260]	; (80051e4 <HAL_RCC_OscConfig+0x240>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d005      	beq.n	80050f6 <HAL_RCC_OscConfig+0x152>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d001      	beq.n	80050f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e1c7      	b.n	8005486 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050f6:	4b3b      	ldr	r3, [pc, #236]	; (80051e4 <HAL_RCC_OscConfig+0x240>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	00db      	lsls	r3, r3, #3
 8005104:	4937      	ldr	r1, [pc, #220]	; (80051e4 <HAL_RCC_OscConfig+0x240>)
 8005106:	4313      	orrs	r3, r2
 8005108:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800510a:	e03a      	b.n	8005182 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d020      	beq.n	8005156 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005114:	4b34      	ldr	r3, [pc, #208]	; (80051e8 <HAL_RCC_OscConfig+0x244>)
 8005116:	2201      	movs	r2, #1
 8005118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800511a:	f7fd ff95 	bl	8003048 <HAL_GetTick>
 800511e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005120:	e008      	b.n	8005134 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005122:	f7fd ff91 	bl	8003048 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	2b02      	cmp	r3, #2
 800512e:	d901      	bls.n	8005134 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e1a8      	b.n	8005486 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005134:	4b2b      	ldr	r3, [pc, #172]	; (80051e4 <HAL_RCC_OscConfig+0x240>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d0f0      	beq.n	8005122 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005140:	4b28      	ldr	r3, [pc, #160]	; (80051e4 <HAL_RCC_OscConfig+0x240>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	00db      	lsls	r3, r3, #3
 800514e:	4925      	ldr	r1, [pc, #148]	; (80051e4 <HAL_RCC_OscConfig+0x240>)
 8005150:	4313      	orrs	r3, r2
 8005152:	600b      	str	r3, [r1, #0]
 8005154:	e015      	b.n	8005182 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005156:	4b24      	ldr	r3, [pc, #144]	; (80051e8 <HAL_RCC_OscConfig+0x244>)
 8005158:	2200      	movs	r2, #0
 800515a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800515c:	f7fd ff74 	bl	8003048 <HAL_GetTick>
 8005160:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005162:	e008      	b.n	8005176 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005164:	f7fd ff70 	bl	8003048 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b02      	cmp	r3, #2
 8005170:	d901      	bls.n	8005176 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e187      	b.n	8005486 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005176:	4b1b      	ldr	r3, [pc, #108]	; (80051e4 <HAL_RCC_OscConfig+0x240>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1f0      	bne.n	8005164 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0308 	and.w	r3, r3, #8
 800518a:	2b00      	cmp	r3, #0
 800518c:	d036      	beq.n	80051fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d016      	beq.n	80051c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005196:	4b15      	ldr	r3, [pc, #84]	; (80051ec <HAL_RCC_OscConfig+0x248>)
 8005198:	2201      	movs	r2, #1
 800519a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800519c:	f7fd ff54 	bl	8003048 <HAL_GetTick>
 80051a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051a2:	e008      	b.n	80051b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051a4:	f7fd ff50 	bl	8003048 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e167      	b.n	8005486 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051b6:	4b0b      	ldr	r3, [pc, #44]	; (80051e4 <HAL_RCC_OscConfig+0x240>)
 80051b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d0f0      	beq.n	80051a4 <HAL_RCC_OscConfig+0x200>
 80051c2:	e01b      	b.n	80051fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051c4:	4b09      	ldr	r3, [pc, #36]	; (80051ec <HAL_RCC_OscConfig+0x248>)
 80051c6:	2200      	movs	r2, #0
 80051c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051ca:	f7fd ff3d 	bl	8003048 <HAL_GetTick>
 80051ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051d0:	e00e      	b.n	80051f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051d2:	f7fd ff39 	bl	8003048 <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d907      	bls.n	80051f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e150      	b.n	8005486 <HAL_RCC_OscConfig+0x4e2>
 80051e4:	40023800 	.word	0x40023800
 80051e8:	42470000 	.word	0x42470000
 80051ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051f0:	4b88      	ldr	r3, [pc, #544]	; (8005414 <HAL_RCC_OscConfig+0x470>)
 80051f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1ea      	bne.n	80051d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0304 	and.w	r3, r3, #4
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 8097 	beq.w	8005338 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800520a:	2300      	movs	r3, #0
 800520c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800520e:	4b81      	ldr	r3, [pc, #516]	; (8005414 <HAL_RCC_OscConfig+0x470>)
 8005210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10f      	bne.n	800523a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800521a:	2300      	movs	r3, #0
 800521c:	60bb      	str	r3, [r7, #8]
 800521e:	4b7d      	ldr	r3, [pc, #500]	; (8005414 <HAL_RCC_OscConfig+0x470>)
 8005220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005222:	4a7c      	ldr	r2, [pc, #496]	; (8005414 <HAL_RCC_OscConfig+0x470>)
 8005224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005228:	6413      	str	r3, [r2, #64]	; 0x40
 800522a:	4b7a      	ldr	r3, [pc, #488]	; (8005414 <HAL_RCC_OscConfig+0x470>)
 800522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005232:	60bb      	str	r3, [r7, #8]
 8005234:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005236:	2301      	movs	r3, #1
 8005238:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800523a:	4b77      	ldr	r3, [pc, #476]	; (8005418 <HAL_RCC_OscConfig+0x474>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005242:	2b00      	cmp	r3, #0
 8005244:	d118      	bne.n	8005278 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005246:	4b74      	ldr	r3, [pc, #464]	; (8005418 <HAL_RCC_OscConfig+0x474>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a73      	ldr	r2, [pc, #460]	; (8005418 <HAL_RCC_OscConfig+0x474>)
 800524c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005250:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005252:	f7fd fef9 	bl	8003048 <HAL_GetTick>
 8005256:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005258:	e008      	b.n	800526c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800525a:	f7fd fef5 	bl	8003048 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	2b02      	cmp	r3, #2
 8005266:	d901      	bls.n	800526c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e10c      	b.n	8005486 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800526c:	4b6a      	ldr	r3, [pc, #424]	; (8005418 <HAL_RCC_OscConfig+0x474>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005274:	2b00      	cmp	r3, #0
 8005276:	d0f0      	beq.n	800525a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d106      	bne.n	800528e <HAL_RCC_OscConfig+0x2ea>
 8005280:	4b64      	ldr	r3, [pc, #400]	; (8005414 <HAL_RCC_OscConfig+0x470>)
 8005282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005284:	4a63      	ldr	r2, [pc, #396]	; (8005414 <HAL_RCC_OscConfig+0x470>)
 8005286:	f043 0301 	orr.w	r3, r3, #1
 800528a:	6713      	str	r3, [r2, #112]	; 0x70
 800528c:	e01c      	b.n	80052c8 <HAL_RCC_OscConfig+0x324>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	2b05      	cmp	r3, #5
 8005294:	d10c      	bne.n	80052b0 <HAL_RCC_OscConfig+0x30c>
 8005296:	4b5f      	ldr	r3, [pc, #380]	; (8005414 <HAL_RCC_OscConfig+0x470>)
 8005298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800529a:	4a5e      	ldr	r2, [pc, #376]	; (8005414 <HAL_RCC_OscConfig+0x470>)
 800529c:	f043 0304 	orr.w	r3, r3, #4
 80052a0:	6713      	str	r3, [r2, #112]	; 0x70
 80052a2:	4b5c      	ldr	r3, [pc, #368]	; (8005414 <HAL_RCC_OscConfig+0x470>)
 80052a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a6:	4a5b      	ldr	r2, [pc, #364]	; (8005414 <HAL_RCC_OscConfig+0x470>)
 80052a8:	f043 0301 	orr.w	r3, r3, #1
 80052ac:	6713      	str	r3, [r2, #112]	; 0x70
 80052ae:	e00b      	b.n	80052c8 <HAL_RCC_OscConfig+0x324>
 80052b0:	4b58      	ldr	r3, [pc, #352]	; (8005414 <HAL_RCC_OscConfig+0x470>)
 80052b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b4:	4a57      	ldr	r2, [pc, #348]	; (8005414 <HAL_RCC_OscConfig+0x470>)
 80052b6:	f023 0301 	bic.w	r3, r3, #1
 80052ba:	6713      	str	r3, [r2, #112]	; 0x70
 80052bc:	4b55      	ldr	r3, [pc, #340]	; (8005414 <HAL_RCC_OscConfig+0x470>)
 80052be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c0:	4a54      	ldr	r2, [pc, #336]	; (8005414 <HAL_RCC_OscConfig+0x470>)
 80052c2:	f023 0304 	bic.w	r3, r3, #4
 80052c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d015      	beq.n	80052fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d0:	f7fd feba 	bl	8003048 <HAL_GetTick>
 80052d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052d6:	e00a      	b.n	80052ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052d8:	f7fd feb6 	bl	8003048 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e0cb      	b.n	8005486 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052ee:	4b49      	ldr	r3, [pc, #292]	; (8005414 <HAL_RCC_OscConfig+0x470>)
 80052f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d0ee      	beq.n	80052d8 <HAL_RCC_OscConfig+0x334>
 80052fa:	e014      	b.n	8005326 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052fc:	f7fd fea4 	bl	8003048 <HAL_GetTick>
 8005300:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005302:	e00a      	b.n	800531a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005304:	f7fd fea0 	bl	8003048 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005312:	4293      	cmp	r3, r2
 8005314:	d901      	bls.n	800531a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e0b5      	b.n	8005486 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800531a:	4b3e      	ldr	r3, [pc, #248]	; (8005414 <HAL_RCC_OscConfig+0x470>)
 800531c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1ee      	bne.n	8005304 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005326:	7dfb      	ldrb	r3, [r7, #23]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d105      	bne.n	8005338 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800532c:	4b39      	ldr	r3, [pc, #228]	; (8005414 <HAL_RCC_OscConfig+0x470>)
 800532e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005330:	4a38      	ldr	r2, [pc, #224]	; (8005414 <HAL_RCC_OscConfig+0x470>)
 8005332:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005336:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	2b00      	cmp	r3, #0
 800533e:	f000 80a1 	beq.w	8005484 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005342:	4b34      	ldr	r3, [pc, #208]	; (8005414 <HAL_RCC_OscConfig+0x470>)
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f003 030c 	and.w	r3, r3, #12
 800534a:	2b08      	cmp	r3, #8
 800534c:	d05c      	beq.n	8005408 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	2b02      	cmp	r3, #2
 8005354:	d141      	bne.n	80053da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005356:	4b31      	ldr	r3, [pc, #196]	; (800541c <HAL_RCC_OscConfig+0x478>)
 8005358:	2200      	movs	r2, #0
 800535a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800535c:	f7fd fe74 	bl	8003048 <HAL_GetTick>
 8005360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005362:	e008      	b.n	8005376 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005364:	f7fd fe70 	bl	8003048 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b02      	cmp	r3, #2
 8005370:	d901      	bls.n	8005376 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e087      	b.n	8005486 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005376:	4b27      	ldr	r3, [pc, #156]	; (8005414 <HAL_RCC_OscConfig+0x470>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1f0      	bne.n	8005364 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	69da      	ldr	r2, [r3, #28]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	431a      	orrs	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005390:	019b      	lsls	r3, r3, #6
 8005392:	431a      	orrs	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005398:	085b      	lsrs	r3, r3, #1
 800539a:	3b01      	subs	r3, #1
 800539c:	041b      	lsls	r3, r3, #16
 800539e:	431a      	orrs	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a4:	061b      	lsls	r3, r3, #24
 80053a6:	491b      	ldr	r1, [pc, #108]	; (8005414 <HAL_RCC_OscConfig+0x470>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053ac:	4b1b      	ldr	r3, [pc, #108]	; (800541c <HAL_RCC_OscConfig+0x478>)
 80053ae:	2201      	movs	r2, #1
 80053b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053b2:	f7fd fe49 	bl	8003048 <HAL_GetTick>
 80053b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053b8:	e008      	b.n	80053cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053ba:	f7fd fe45 	bl	8003048 <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d901      	bls.n	80053cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e05c      	b.n	8005486 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053cc:	4b11      	ldr	r3, [pc, #68]	; (8005414 <HAL_RCC_OscConfig+0x470>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d0f0      	beq.n	80053ba <HAL_RCC_OscConfig+0x416>
 80053d8:	e054      	b.n	8005484 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053da:	4b10      	ldr	r3, [pc, #64]	; (800541c <HAL_RCC_OscConfig+0x478>)
 80053dc:	2200      	movs	r2, #0
 80053de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e0:	f7fd fe32 	bl	8003048 <HAL_GetTick>
 80053e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053e6:	e008      	b.n	80053fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053e8:	f7fd fe2e 	bl	8003048 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e045      	b.n	8005486 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053fa:	4b06      	ldr	r3, [pc, #24]	; (8005414 <HAL_RCC_OscConfig+0x470>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1f0      	bne.n	80053e8 <HAL_RCC_OscConfig+0x444>
 8005406:	e03d      	b.n	8005484 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d107      	bne.n	8005420 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e038      	b.n	8005486 <HAL_RCC_OscConfig+0x4e2>
 8005414:	40023800 	.word	0x40023800
 8005418:	40007000 	.word	0x40007000
 800541c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005420:	4b1b      	ldr	r3, [pc, #108]	; (8005490 <HAL_RCC_OscConfig+0x4ec>)
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	2b01      	cmp	r3, #1
 800542c:	d028      	beq.n	8005480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005438:	429a      	cmp	r2, r3
 800543a:	d121      	bne.n	8005480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005446:	429a      	cmp	r2, r3
 8005448:	d11a      	bne.n	8005480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005450:	4013      	ands	r3, r2
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005456:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005458:	4293      	cmp	r3, r2
 800545a:	d111      	bne.n	8005480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005466:	085b      	lsrs	r3, r3, #1
 8005468:	3b01      	subs	r3, #1
 800546a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800546c:	429a      	cmp	r2, r3
 800546e:	d107      	bne.n	8005480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800547c:	429a      	cmp	r2, r3
 800547e:	d001      	beq.n	8005484 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e000      	b.n	8005486 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3718      	adds	r7, #24
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	40023800 	.word	0x40023800

08005494 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d101      	bne.n	80054a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e0cc      	b.n	8005642 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054a8:	4b68      	ldr	r3, [pc, #416]	; (800564c <HAL_RCC_ClockConfig+0x1b8>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0307 	and.w	r3, r3, #7
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d90c      	bls.n	80054d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054b6:	4b65      	ldr	r3, [pc, #404]	; (800564c <HAL_RCC_ClockConfig+0x1b8>)
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	b2d2      	uxtb	r2, r2
 80054bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054be:	4b63      	ldr	r3, [pc, #396]	; (800564c <HAL_RCC_ClockConfig+0x1b8>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0307 	and.w	r3, r3, #7
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d001      	beq.n	80054d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e0b8      	b.n	8005642 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0302 	and.w	r3, r3, #2
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d020      	beq.n	800551e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0304 	and.w	r3, r3, #4
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d005      	beq.n	80054f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054e8:	4b59      	ldr	r3, [pc, #356]	; (8005650 <HAL_RCC_ClockConfig+0x1bc>)
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	4a58      	ldr	r2, [pc, #352]	; (8005650 <HAL_RCC_ClockConfig+0x1bc>)
 80054ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80054f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0308 	and.w	r3, r3, #8
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d005      	beq.n	800550c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005500:	4b53      	ldr	r3, [pc, #332]	; (8005650 <HAL_RCC_ClockConfig+0x1bc>)
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	4a52      	ldr	r2, [pc, #328]	; (8005650 <HAL_RCC_ClockConfig+0x1bc>)
 8005506:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800550a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800550c:	4b50      	ldr	r3, [pc, #320]	; (8005650 <HAL_RCC_ClockConfig+0x1bc>)
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	494d      	ldr	r1, [pc, #308]	; (8005650 <HAL_RCC_ClockConfig+0x1bc>)
 800551a:	4313      	orrs	r3, r2
 800551c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b00      	cmp	r3, #0
 8005528:	d044      	beq.n	80055b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d107      	bne.n	8005542 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005532:	4b47      	ldr	r3, [pc, #284]	; (8005650 <HAL_RCC_ClockConfig+0x1bc>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d119      	bne.n	8005572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e07f      	b.n	8005642 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	2b02      	cmp	r3, #2
 8005548:	d003      	beq.n	8005552 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800554e:	2b03      	cmp	r3, #3
 8005550:	d107      	bne.n	8005562 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005552:	4b3f      	ldr	r3, [pc, #252]	; (8005650 <HAL_RCC_ClockConfig+0x1bc>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d109      	bne.n	8005572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e06f      	b.n	8005642 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005562:	4b3b      	ldr	r3, [pc, #236]	; (8005650 <HAL_RCC_ClockConfig+0x1bc>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e067      	b.n	8005642 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005572:	4b37      	ldr	r3, [pc, #220]	; (8005650 <HAL_RCC_ClockConfig+0x1bc>)
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f023 0203 	bic.w	r2, r3, #3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	4934      	ldr	r1, [pc, #208]	; (8005650 <HAL_RCC_ClockConfig+0x1bc>)
 8005580:	4313      	orrs	r3, r2
 8005582:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005584:	f7fd fd60 	bl	8003048 <HAL_GetTick>
 8005588:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800558a:	e00a      	b.n	80055a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800558c:	f7fd fd5c 	bl	8003048 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	f241 3288 	movw	r2, #5000	; 0x1388
 800559a:	4293      	cmp	r3, r2
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e04f      	b.n	8005642 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055a2:	4b2b      	ldr	r3, [pc, #172]	; (8005650 <HAL_RCC_ClockConfig+0x1bc>)
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f003 020c 	and.w	r2, r3, #12
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d1eb      	bne.n	800558c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055b4:	4b25      	ldr	r3, [pc, #148]	; (800564c <HAL_RCC_ClockConfig+0x1b8>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0307 	and.w	r3, r3, #7
 80055bc:	683a      	ldr	r2, [r7, #0]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d20c      	bcs.n	80055dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055c2:	4b22      	ldr	r3, [pc, #136]	; (800564c <HAL_RCC_ClockConfig+0x1b8>)
 80055c4:	683a      	ldr	r2, [r7, #0]
 80055c6:	b2d2      	uxtb	r2, r2
 80055c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ca:	4b20      	ldr	r3, [pc, #128]	; (800564c <HAL_RCC_ClockConfig+0x1b8>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0307 	and.w	r3, r3, #7
 80055d2:	683a      	ldr	r2, [r7, #0]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d001      	beq.n	80055dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e032      	b.n	8005642 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0304 	and.w	r3, r3, #4
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d008      	beq.n	80055fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055e8:	4b19      	ldr	r3, [pc, #100]	; (8005650 <HAL_RCC_ClockConfig+0x1bc>)
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	4916      	ldr	r1, [pc, #88]	; (8005650 <HAL_RCC_ClockConfig+0x1bc>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0308 	and.w	r3, r3, #8
 8005602:	2b00      	cmp	r3, #0
 8005604:	d009      	beq.n	800561a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005606:	4b12      	ldr	r3, [pc, #72]	; (8005650 <HAL_RCC_ClockConfig+0x1bc>)
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	00db      	lsls	r3, r3, #3
 8005614:	490e      	ldr	r1, [pc, #56]	; (8005650 <HAL_RCC_ClockConfig+0x1bc>)
 8005616:	4313      	orrs	r3, r2
 8005618:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800561a:	f000 f821 	bl	8005660 <HAL_RCC_GetSysClockFreq>
 800561e:	4602      	mov	r2, r0
 8005620:	4b0b      	ldr	r3, [pc, #44]	; (8005650 <HAL_RCC_ClockConfig+0x1bc>)
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	091b      	lsrs	r3, r3, #4
 8005626:	f003 030f 	and.w	r3, r3, #15
 800562a:	490a      	ldr	r1, [pc, #40]	; (8005654 <HAL_RCC_ClockConfig+0x1c0>)
 800562c:	5ccb      	ldrb	r3, [r1, r3]
 800562e:	fa22 f303 	lsr.w	r3, r2, r3
 8005632:	4a09      	ldr	r2, [pc, #36]	; (8005658 <HAL_RCC_ClockConfig+0x1c4>)
 8005634:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005636:	4b09      	ldr	r3, [pc, #36]	; (800565c <HAL_RCC_ClockConfig+0x1c8>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4618      	mov	r0, r3
 800563c:	f7fd fa4a 	bl	8002ad4 <HAL_InitTick>

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	40023c00 	.word	0x40023c00
 8005650:	40023800 	.word	0x40023800
 8005654:	0800e3dc 	.word	0x0800e3dc
 8005658:	20000058 	.word	0x20000058
 800565c:	2000005c 	.word	0x2000005c

08005660 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005660:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005664:	b094      	sub	sp, #80	; 0x50
 8005666:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005668:	2300      	movs	r3, #0
 800566a:	647b      	str	r3, [r7, #68]	; 0x44
 800566c:	2300      	movs	r3, #0
 800566e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005670:	2300      	movs	r3, #0
 8005672:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005674:	2300      	movs	r3, #0
 8005676:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005678:	4b79      	ldr	r3, [pc, #484]	; (8005860 <HAL_RCC_GetSysClockFreq+0x200>)
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f003 030c 	and.w	r3, r3, #12
 8005680:	2b08      	cmp	r3, #8
 8005682:	d00d      	beq.n	80056a0 <HAL_RCC_GetSysClockFreq+0x40>
 8005684:	2b08      	cmp	r3, #8
 8005686:	f200 80e1 	bhi.w	800584c <HAL_RCC_GetSysClockFreq+0x1ec>
 800568a:	2b00      	cmp	r3, #0
 800568c:	d002      	beq.n	8005694 <HAL_RCC_GetSysClockFreq+0x34>
 800568e:	2b04      	cmp	r3, #4
 8005690:	d003      	beq.n	800569a <HAL_RCC_GetSysClockFreq+0x3a>
 8005692:	e0db      	b.n	800584c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005694:	4b73      	ldr	r3, [pc, #460]	; (8005864 <HAL_RCC_GetSysClockFreq+0x204>)
 8005696:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005698:	e0db      	b.n	8005852 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800569a:	4b73      	ldr	r3, [pc, #460]	; (8005868 <HAL_RCC_GetSysClockFreq+0x208>)
 800569c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800569e:	e0d8      	b.n	8005852 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056a0:	4b6f      	ldr	r3, [pc, #444]	; (8005860 <HAL_RCC_GetSysClockFreq+0x200>)
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056a8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056aa:	4b6d      	ldr	r3, [pc, #436]	; (8005860 <HAL_RCC_GetSysClockFreq+0x200>)
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d063      	beq.n	800577e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056b6:	4b6a      	ldr	r3, [pc, #424]	; (8005860 <HAL_RCC_GetSysClockFreq+0x200>)
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	099b      	lsrs	r3, r3, #6
 80056bc:	2200      	movs	r2, #0
 80056be:	63bb      	str	r3, [r7, #56]	; 0x38
 80056c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80056c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056c8:	633b      	str	r3, [r7, #48]	; 0x30
 80056ca:	2300      	movs	r3, #0
 80056cc:	637b      	str	r3, [r7, #52]	; 0x34
 80056ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80056d2:	4622      	mov	r2, r4
 80056d4:	462b      	mov	r3, r5
 80056d6:	f04f 0000 	mov.w	r0, #0
 80056da:	f04f 0100 	mov.w	r1, #0
 80056de:	0159      	lsls	r1, r3, #5
 80056e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056e4:	0150      	lsls	r0, r2, #5
 80056e6:	4602      	mov	r2, r0
 80056e8:	460b      	mov	r3, r1
 80056ea:	4621      	mov	r1, r4
 80056ec:	1a51      	subs	r1, r2, r1
 80056ee:	6139      	str	r1, [r7, #16]
 80056f0:	4629      	mov	r1, r5
 80056f2:	eb63 0301 	sbc.w	r3, r3, r1
 80056f6:	617b      	str	r3, [r7, #20]
 80056f8:	f04f 0200 	mov.w	r2, #0
 80056fc:	f04f 0300 	mov.w	r3, #0
 8005700:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005704:	4659      	mov	r1, fp
 8005706:	018b      	lsls	r3, r1, #6
 8005708:	4651      	mov	r1, sl
 800570a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800570e:	4651      	mov	r1, sl
 8005710:	018a      	lsls	r2, r1, #6
 8005712:	4651      	mov	r1, sl
 8005714:	ebb2 0801 	subs.w	r8, r2, r1
 8005718:	4659      	mov	r1, fp
 800571a:	eb63 0901 	sbc.w	r9, r3, r1
 800571e:	f04f 0200 	mov.w	r2, #0
 8005722:	f04f 0300 	mov.w	r3, #0
 8005726:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800572a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800572e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005732:	4690      	mov	r8, r2
 8005734:	4699      	mov	r9, r3
 8005736:	4623      	mov	r3, r4
 8005738:	eb18 0303 	adds.w	r3, r8, r3
 800573c:	60bb      	str	r3, [r7, #8]
 800573e:	462b      	mov	r3, r5
 8005740:	eb49 0303 	adc.w	r3, r9, r3
 8005744:	60fb      	str	r3, [r7, #12]
 8005746:	f04f 0200 	mov.w	r2, #0
 800574a:	f04f 0300 	mov.w	r3, #0
 800574e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005752:	4629      	mov	r1, r5
 8005754:	024b      	lsls	r3, r1, #9
 8005756:	4621      	mov	r1, r4
 8005758:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800575c:	4621      	mov	r1, r4
 800575e:	024a      	lsls	r2, r1, #9
 8005760:	4610      	mov	r0, r2
 8005762:	4619      	mov	r1, r3
 8005764:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005766:	2200      	movs	r2, #0
 8005768:	62bb      	str	r3, [r7, #40]	; 0x28
 800576a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800576c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005770:	f7fb fa6a 	bl	8000c48 <__aeabi_uldivmod>
 8005774:	4602      	mov	r2, r0
 8005776:	460b      	mov	r3, r1
 8005778:	4613      	mov	r3, r2
 800577a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800577c:	e058      	b.n	8005830 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800577e:	4b38      	ldr	r3, [pc, #224]	; (8005860 <HAL_RCC_GetSysClockFreq+0x200>)
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	099b      	lsrs	r3, r3, #6
 8005784:	2200      	movs	r2, #0
 8005786:	4618      	mov	r0, r3
 8005788:	4611      	mov	r1, r2
 800578a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800578e:	623b      	str	r3, [r7, #32]
 8005790:	2300      	movs	r3, #0
 8005792:	627b      	str	r3, [r7, #36]	; 0x24
 8005794:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005798:	4642      	mov	r2, r8
 800579a:	464b      	mov	r3, r9
 800579c:	f04f 0000 	mov.w	r0, #0
 80057a0:	f04f 0100 	mov.w	r1, #0
 80057a4:	0159      	lsls	r1, r3, #5
 80057a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057aa:	0150      	lsls	r0, r2, #5
 80057ac:	4602      	mov	r2, r0
 80057ae:	460b      	mov	r3, r1
 80057b0:	4641      	mov	r1, r8
 80057b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80057b6:	4649      	mov	r1, r9
 80057b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80057bc:	f04f 0200 	mov.w	r2, #0
 80057c0:	f04f 0300 	mov.w	r3, #0
 80057c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80057c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80057cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80057d0:	ebb2 040a 	subs.w	r4, r2, sl
 80057d4:	eb63 050b 	sbc.w	r5, r3, fp
 80057d8:	f04f 0200 	mov.w	r2, #0
 80057dc:	f04f 0300 	mov.w	r3, #0
 80057e0:	00eb      	lsls	r3, r5, #3
 80057e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057e6:	00e2      	lsls	r2, r4, #3
 80057e8:	4614      	mov	r4, r2
 80057ea:	461d      	mov	r5, r3
 80057ec:	4643      	mov	r3, r8
 80057ee:	18e3      	adds	r3, r4, r3
 80057f0:	603b      	str	r3, [r7, #0]
 80057f2:	464b      	mov	r3, r9
 80057f4:	eb45 0303 	adc.w	r3, r5, r3
 80057f8:	607b      	str	r3, [r7, #4]
 80057fa:	f04f 0200 	mov.w	r2, #0
 80057fe:	f04f 0300 	mov.w	r3, #0
 8005802:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005806:	4629      	mov	r1, r5
 8005808:	028b      	lsls	r3, r1, #10
 800580a:	4621      	mov	r1, r4
 800580c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005810:	4621      	mov	r1, r4
 8005812:	028a      	lsls	r2, r1, #10
 8005814:	4610      	mov	r0, r2
 8005816:	4619      	mov	r1, r3
 8005818:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800581a:	2200      	movs	r2, #0
 800581c:	61bb      	str	r3, [r7, #24]
 800581e:	61fa      	str	r2, [r7, #28]
 8005820:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005824:	f7fb fa10 	bl	8000c48 <__aeabi_uldivmod>
 8005828:	4602      	mov	r2, r0
 800582a:	460b      	mov	r3, r1
 800582c:	4613      	mov	r3, r2
 800582e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005830:	4b0b      	ldr	r3, [pc, #44]	; (8005860 <HAL_RCC_GetSysClockFreq+0x200>)
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	0c1b      	lsrs	r3, r3, #16
 8005836:	f003 0303 	and.w	r3, r3, #3
 800583a:	3301      	adds	r3, #1
 800583c:	005b      	lsls	r3, r3, #1
 800583e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005840:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005842:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005844:	fbb2 f3f3 	udiv	r3, r2, r3
 8005848:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800584a:	e002      	b.n	8005852 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800584c:	4b05      	ldr	r3, [pc, #20]	; (8005864 <HAL_RCC_GetSysClockFreq+0x204>)
 800584e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005850:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005854:	4618      	mov	r0, r3
 8005856:	3750      	adds	r7, #80	; 0x50
 8005858:	46bd      	mov	sp, r7
 800585a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800585e:	bf00      	nop
 8005860:	40023800 	.word	0x40023800
 8005864:	00f42400 	.word	0x00f42400
 8005868:	007a1200 	.word	0x007a1200

0800586c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800586c:	b480      	push	{r7}
 800586e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005870:	4b03      	ldr	r3, [pc, #12]	; (8005880 <HAL_RCC_GetHCLKFreq+0x14>)
 8005872:	681b      	ldr	r3, [r3, #0]
}
 8005874:	4618      	mov	r0, r3
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	20000058 	.word	0x20000058

08005884 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005888:	f7ff fff0 	bl	800586c <HAL_RCC_GetHCLKFreq>
 800588c:	4602      	mov	r2, r0
 800588e:	4b05      	ldr	r3, [pc, #20]	; (80058a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	0a9b      	lsrs	r3, r3, #10
 8005894:	f003 0307 	and.w	r3, r3, #7
 8005898:	4903      	ldr	r1, [pc, #12]	; (80058a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800589a:	5ccb      	ldrb	r3, [r1, r3]
 800589c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	40023800 	.word	0x40023800
 80058a8:	0800e3ec 	.word	0x0800e3ec

080058ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80058b0:	f7ff ffdc 	bl	800586c <HAL_RCC_GetHCLKFreq>
 80058b4:	4602      	mov	r2, r0
 80058b6:	4b05      	ldr	r3, [pc, #20]	; (80058cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	0b5b      	lsrs	r3, r3, #13
 80058bc:	f003 0307 	and.w	r3, r3, #7
 80058c0:	4903      	ldr	r1, [pc, #12]	; (80058d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058c2:	5ccb      	ldrb	r3, [r1, r3]
 80058c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	40023800 	.word	0x40023800
 80058d0:	0800e3ec 	.word	0x0800e3ec

080058d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	220f      	movs	r2, #15
 80058e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80058e4:	4b12      	ldr	r3, [pc, #72]	; (8005930 <HAL_RCC_GetClockConfig+0x5c>)
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f003 0203 	and.w	r2, r3, #3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80058f0:	4b0f      	ldr	r3, [pc, #60]	; (8005930 <HAL_RCC_GetClockConfig+0x5c>)
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80058fc:	4b0c      	ldr	r3, [pc, #48]	; (8005930 <HAL_RCC_GetClockConfig+0x5c>)
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005908:	4b09      	ldr	r3, [pc, #36]	; (8005930 <HAL_RCC_GetClockConfig+0x5c>)
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	08db      	lsrs	r3, r3, #3
 800590e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005916:	4b07      	ldr	r3, [pc, #28]	; (8005934 <HAL_RCC_GetClockConfig+0x60>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0207 	and.w	r2, r3, #7
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	601a      	str	r2, [r3, #0]
}
 8005922:	bf00      	nop
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	40023800 	.word	0x40023800
 8005934:	40023c00 	.word	0x40023c00

08005938 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d101      	bne.n	800594a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e041      	b.n	80059ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005950:	b2db      	uxtb	r3, r3
 8005952:	2b00      	cmp	r3, #0
 8005954:	d106      	bne.n	8005964 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7fc fe8e 	bl	8002680 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2202      	movs	r2, #2
 8005968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	3304      	adds	r3, #4
 8005974:	4619      	mov	r1, r3
 8005976:	4610      	mov	r0, r2
 8005978:	f000 fd20 	bl	80063bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3708      	adds	r7, #8
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
	...

080059d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d001      	beq.n	80059f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e04e      	b.n	8005a8e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2202      	movs	r2, #2
 80059f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68da      	ldr	r2, [r3, #12]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f042 0201 	orr.w	r2, r2, #1
 8005a06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a23      	ldr	r2, [pc, #140]	; (8005a9c <HAL_TIM_Base_Start_IT+0xc4>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d022      	beq.n	8005a58 <HAL_TIM_Base_Start_IT+0x80>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a1a:	d01d      	beq.n	8005a58 <HAL_TIM_Base_Start_IT+0x80>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a1f      	ldr	r2, [pc, #124]	; (8005aa0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d018      	beq.n	8005a58 <HAL_TIM_Base_Start_IT+0x80>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a1e      	ldr	r2, [pc, #120]	; (8005aa4 <HAL_TIM_Base_Start_IT+0xcc>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d013      	beq.n	8005a58 <HAL_TIM_Base_Start_IT+0x80>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a1c      	ldr	r2, [pc, #112]	; (8005aa8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d00e      	beq.n	8005a58 <HAL_TIM_Base_Start_IT+0x80>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a1b      	ldr	r2, [pc, #108]	; (8005aac <HAL_TIM_Base_Start_IT+0xd4>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d009      	beq.n	8005a58 <HAL_TIM_Base_Start_IT+0x80>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a19      	ldr	r2, [pc, #100]	; (8005ab0 <HAL_TIM_Base_Start_IT+0xd8>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d004      	beq.n	8005a58 <HAL_TIM_Base_Start_IT+0x80>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a18      	ldr	r2, [pc, #96]	; (8005ab4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d111      	bne.n	8005a7c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f003 0307 	and.w	r3, r3, #7
 8005a62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2b06      	cmp	r3, #6
 8005a68:	d010      	beq.n	8005a8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f042 0201 	orr.w	r2, r2, #1
 8005a78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a7a:	e007      	b.n	8005a8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f042 0201 	orr.w	r2, r2, #1
 8005a8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3714      	adds	r7, #20
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	40010000 	.word	0x40010000
 8005aa0:	40000400 	.word	0x40000400
 8005aa4:	40000800 	.word	0x40000800
 8005aa8:	40000c00 	.word	0x40000c00
 8005aac:	40010400 	.word	0x40010400
 8005ab0:	40014000 	.word	0x40014000
 8005ab4:	40001800 	.word	0x40001800

08005ab8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e041      	b.n	8005b4e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d106      	bne.n	8005ae4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f839 	bl	8005b56 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	3304      	adds	r3, #4
 8005af4:	4619      	mov	r1, r3
 8005af6:	4610      	mov	r0, r2
 8005af8:	f000 fc60 	bl	80063bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3708      	adds	r7, #8
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b56:	b480      	push	{r7}
 8005b58:	b083      	sub	sp, #12
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b5e:	bf00      	nop
 8005b60:	370c      	adds	r7, #12
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
	...

08005b6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d109      	bne.n	8005b90 <HAL_TIM_PWM_Start+0x24>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	bf14      	ite	ne
 8005b88:	2301      	movne	r3, #1
 8005b8a:	2300      	moveq	r3, #0
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	e022      	b.n	8005bd6 <HAL_TIM_PWM_Start+0x6a>
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	2b04      	cmp	r3, #4
 8005b94:	d109      	bne.n	8005baa <HAL_TIM_PWM_Start+0x3e>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	bf14      	ite	ne
 8005ba2:	2301      	movne	r3, #1
 8005ba4:	2300      	moveq	r3, #0
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	e015      	b.n	8005bd6 <HAL_TIM_PWM_Start+0x6a>
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	2b08      	cmp	r3, #8
 8005bae:	d109      	bne.n	8005bc4 <HAL_TIM_PWM_Start+0x58>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	bf14      	ite	ne
 8005bbc:	2301      	movne	r3, #1
 8005bbe:	2300      	moveq	r3, #0
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	e008      	b.n	8005bd6 <HAL_TIM_PWM_Start+0x6a>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	bf14      	ite	ne
 8005bd0:	2301      	movne	r3, #1
 8005bd2:	2300      	moveq	r3, #0
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d001      	beq.n	8005bde <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e07c      	b.n	8005cd8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d104      	bne.n	8005bee <HAL_TIM_PWM_Start+0x82>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2202      	movs	r2, #2
 8005be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bec:	e013      	b.n	8005c16 <HAL_TIM_PWM_Start+0xaa>
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b04      	cmp	r3, #4
 8005bf2:	d104      	bne.n	8005bfe <HAL_TIM_PWM_Start+0x92>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bfc:	e00b      	b.n	8005c16 <HAL_TIM_PWM_Start+0xaa>
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	2b08      	cmp	r3, #8
 8005c02:	d104      	bne.n	8005c0e <HAL_TIM_PWM_Start+0xa2>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2202      	movs	r2, #2
 8005c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c0c:	e003      	b.n	8005c16 <HAL_TIM_PWM_Start+0xaa>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2202      	movs	r2, #2
 8005c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	6839      	ldr	r1, [r7, #0]
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f000 feb6 	bl	8006990 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a2d      	ldr	r2, [pc, #180]	; (8005ce0 <HAL_TIM_PWM_Start+0x174>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d004      	beq.n	8005c38 <HAL_TIM_PWM_Start+0xcc>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a2c      	ldr	r2, [pc, #176]	; (8005ce4 <HAL_TIM_PWM_Start+0x178>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d101      	bne.n	8005c3c <HAL_TIM_PWM_Start+0xd0>
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e000      	b.n	8005c3e <HAL_TIM_PWM_Start+0xd2>
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d007      	beq.n	8005c52 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a22      	ldr	r2, [pc, #136]	; (8005ce0 <HAL_TIM_PWM_Start+0x174>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d022      	beq.n	8005ca2 <HAL_TIM_PWM_Start+0x136>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c64:	d01d      	beq.n	8005ca2 <HAL_TIM_PWM_Start+0x136>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a1f      	ldr	r2, [pc, #124]	; (8005ce8 <HAL_TIM_PWM_Start+0x17c>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d018      	beq.n	8005ca2 <HAL_TIM_PWM_Start+0x136>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a1d      	ldr	r2, [pc, #116]	; (8005cec <HAL_TIM_PWM_Start+0x180>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d013      	beq.n	8005ca2 <HAL_TIM_PWM_Start+0x136>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a1c      	ldr	r2, [pc, #112]	; (8005cf0 <HAL_TIM_PWM_Start+0x184>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d00e      	beq.n	8005ca2 <HAL_TIM_PWM_Start+0x136>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a16      	ldr	r2, [pc, #88]	; (8005ce4 <HAL_TIM_PWM_Start+0x178>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d009      	beq.n	8005ca2 <HAL_TIM_PWM_Start+0x136>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a18      	ldr	r2, [pc, #96]	; (8005cf4 <HAL_TIM_PWM_Start+0x188>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d004      	beq.n	8005ca2 <HAL_TIM_PWM_Start+0x136>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a16      	ldr	r2, [pc, #88]	; (8005cf8 <HAL_TIM_PWM_Start+0x18c>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d111      	bne.n	8005cc6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f003 0307 	and.w	r3, r3, #7
 8005cac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2b06      	cmp	r3, #6
 8005cb2:	d010      	beq.n	8005cd6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f042 0201 	orr.w	r2, r2, #1
 8005cc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cc4:	e007      	b.n	8005cd6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f042 0201 	orr.w	r2, r2, #1
 8005cd4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	40010000 	.word	0x40010000
 8005ce4:	40010400 	.word	0x40010400
 8005ce8:	40000400 	.word	0x40000400
 8005cec:	40000800 	.word	0x40000800
 8005cf0:	40000c00 	.word	0x40000c00
 8005cf4:	40014000 	.word	0x40014000
 8005cf8:	40001800 	.word	0x40001800

08005cfc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d101      	bne.n	8005d10 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e097      	b.n	8005e40 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d106      	bne.n	8005d2a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f7fc fd29 	bl	800277c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2202      	movs	r2, #2
 8005d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	6812      	ldr	r2, [r2, #0]
 8005d3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d40:	f023 0307 	bic.w	r3, r3, #7
 8005d44:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	3304      	adds	r3, #4
 8005d4e:	4619      	mov	r1, r3
 8005d50:	4610      	mov	r0, r2
 8005d52:	f000 fb33 	bl	80063bc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	699b      	ldr	r3, [r3, #24]
 8005d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	6a1b      	ldr	r3, [r3, #32]
 8005d6c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d7e:	f023 0303 	bic.w	r3, r3, #3
 8005d82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	689a      	ldr	r2, [r3, #8]
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	021b      	lsls	r3, r3, #8
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005d9c:	f023 030c 	bic.w	r3, r3, #12
 8005da0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005da8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	68da      	ldr	r2, [r3, #12]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	69db      	ldr	r3, [r3, #28]
 8005db6:	021b      	lsls	r3, r3, #8
 8005db8:	4313      	orrs	r3, r2
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	011a      	lsls	r2, r3, #4
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	031b      	lsls	r3, r3, #12
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005dda:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005de2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	685a      	ldr	r2, [r3, #4]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	695b      	ldr	r3, [r3, #20]
 8005dec:	011b      	lsls	r3, r3, #4
 8005dee:	4313      	orrs	r3, r2
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3718      	adds	r7, #24
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	f003 0302 	and.w	r3, r3, #2
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d122      	bne.n	8005ea4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	f003 0302 	and.w	r3, r3, #2
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d11b      	bne.n	8005ea4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f06f 0202 	mvn.w	r2, #2
 8005e74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	f003 0303 	and.w	r3, r3, #3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 fa77 	bl	800637e <HAL_TIM_IC_CaptureCallback>
 8005e90:	e005      	b.n	8005e9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 fa69 	bl	800636a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 fa7a 	bl	8006392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	f003 0304 	and.w	r3, r3, #4
 8005eae:	2b04      	cmp	r3, #4
 8005eb0:	d122      	bne.n	8005ef8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	f003 0304 	and.w	r3, r3, #4
 8005ebc:	2b04      	cmp	r3, #4
 8005ebe:	d11b      	bne.n	8005ef8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f06f 0204 	mvn.w	r2, #4
 8005ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2202      	movs	r2, #2
 8005ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d003      	beq.n	8005ee6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 fa4d 	bl	800637e <HAL_TIM_IC_CaptureCallback>
 8005ee4:	e005      	b.n	8005ef2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 fa3f 	bl	800636a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 fa50 	bl	8006392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	f003 0308 	and.w	r3, r3, #8
 8005f02:	2b08      	cmp	r3, #8
 8005f04:	d122      	bne.n	8005f4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	f003 0308 	and.w	r3, r3, #8
 8005f10:	2b08      	cmp	r3, #8
 8005f12:	d11b      	bne.n	8005f4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f06f 0208 	mvn.w	r2, #8
 8005f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2204      	movs	r2, #4
 8005f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	69db      	ldr	r3, [r3, #28]
 8005f2a:	f003 0303 	and.w	r3, r3, #3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d003      	beq.n	8005f3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 fa23 	bl	800637e <HAL_TIM_IC_CaptureCallback>
 8005f38:	e005      	b.n	8005f46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 fa15 	bl	800636a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 fa26 	bl	8006392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	f003 0310 	and.w	r3, r3, #16
 8005f56:	2b10      	cmp	r3, #16
 8005f58:	d122      	bne.n	8005fa0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	f003 0310 	and.w	r3, r3, #16
 8005f64:	2b10      	cmp	r3, #16
 8005f66:	d11b      	bne.n	8005fa0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f06f 0210 	mvn.w	r2, #16
 8005f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2208      	movs	r2, #8
 8005f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	69db      	ldr	r3, [r3, #28]
 8005f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d003      	beq.n	8005f8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 f9f9 	bl	800637e <HAL_TIM_IC_CaptureCallback>
 8005f8c:	e005      	b.n	8005f9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 f9eb 	bl	800636a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 f9fc 	bl	8006392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	f003 0301 	and.w	r3, r3, #1
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d10e      	bne.n	8005fcc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	f003 0301 	and.w	r3, r3, #1
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d107      	bne.n	8005fcc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f06f 0201 	mvn.w	r2, #1
 8005fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f7fc face 	bl	8002568 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd6:	2b80      	cmp	r3, #128	; 0x80
 8005fd8:	d10e      	bne.n	8005ff8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fe4:	2b80      	cmp	r3, #128	; 0x80
 8005fe6:	d107      	bne.n	8005ff8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 fdca 	bl	8006b8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006002:	2b40      	cmp	r3, #64	; 0x40
 8006004:	d10e      	bne.n	8006024 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006010:	2b40      	cmp	r3, #64	; 0x40
 8006012:	d107      	bne.n	8006024 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800601c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 f9c1 	bl	80063a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	f003 0320 	and.w	r3, r3, #32
 800602e:	2b20      	cmp	r3, #32
 8006030:	d10e      	bne.n	8006050 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	f003 0320 	and.w	r3, r3, #32
 800603c:	2b20      	cmp	r3, #32
 800603e:	d107      	bne.n	8006050 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f06f 0220 	mvn.w	r2, #32
 8006048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 fd94 	bl	8006b78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006050:	bf00      	nop
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b086      	sub	sp, #24
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006064:	2300      	movs	r3, #0
 8006066:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800606e:	2b01      	cmp	r3, #1
 8006070:	d101      	bne.n	8006076 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006072:	2302      	movs	r3, #2
 8006074:	e0ae      	b.n	80061d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b0c      	cmp	r3, #12
 8006082:	f200 809f 	bhi.w	80061c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006086:	a201      	add	r2, pc, #4	; (adr r2, 800608c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800608c:	080060c1 	.word	0x080060c1
 8006090:	080061c5 	.word	0x080061c5
 8006094:	080061c5 	.word	0x080061c5
 8006098:	080061c5 	.word	0x080061c5
 800609c:	08006101 	.word	0x08006101
 80060a0:	080061c5 	.word	0x080061c5
 80060a4:	080061c5 	.word	0x080061c5
 80060a8:	080061c5 	.word	0x080061c5
 80060ac:	08006143 	.word	0x08006143
 80060b0:	080061c5 	.word	0x080061c5
 80060b4:	080061c5 	.word	0x080061c5
 80060b8:	080061c5 	.word	0x080061c5
 80060bc:	08006183 	.word	0x08006183
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68b9      	ldr	r1, [r7, #8]
 80060c6:	4618      	mov	r0, r3
 80060c8:	f000 fa18 	bl	80064fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	699a      	ldr	r2, [r3, #24]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f042 0208 	orr.w	r2, r2, #8
 80060da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	699a      	ldr	r2, [r3, #24]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f022 0204 	bic.w	r2, r2, #4
 80060ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6999      	ldr	r1, [r3, #24]
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	691a      	ldr	r2, [r3, #16]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	430a      	orrs	r2, r1
 80060fc:	619a      	str	r2, [r3, #24]
      break;
 80060fe:	e064      	b.n	80061ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68b9      	ldr	r1, [r7, #8]
 8006106:	4618      	mov	r0, r3
 8006108:	f000 fa68 	bl	80065dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	699a      	ldr	r2, [r3, #24]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800611a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	699a      	ldr	r2, [r3, #24]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800612a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6999      	ldr	r1, [r3, #24]
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	021a      	lsls	r2, r3, #8
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	430a      	orrs	r2, r1
 800613e:	619a      	str	r2, [r3, #24]
      break;
 8006140:	e043      	b.n	80061ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68b9      	ldr	r1, [r7, #8]
 8006148:	4618      	mov	r0, r3
 800614a:	f000 fabd 	bl	80066c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	69da      	ldr	r2, [r3, #28]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f042 0208 	orr.w	r2, r2, #8
 800615c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	69da      	ldr	r2, [r3, #28]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f022 0204 	bic.w	r2, r2, #4
 800616c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	69d9      	ldr	r1, [r3, #28]
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	691a      	ldr	r2, [r3, #16]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	430a      	orrs	r2, r1
 800617e:	61da      	str	r2, [r3, #28]
      break;
 8006180:	e023      	b.n	80061ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68b9      	ldr	r1, [r7, #8]
 8006188:	4618      	mov	r0, r3
 800618a:	f000 fb11 	bl	80067b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	69da      	ldr	r2, [r3, #28]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800619c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	69da      	ldr	r2, [r3, #28]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	69d9      	ldr	r1, [r3, #28]
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	021a      	lsls	r2, r3, #8
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	430a      	orrs	r2, r1
 80061c0:	61da      	str	r2, [r3, #28]
      break;
 80061c2:	e002      	b.n	80061ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	75fb      	strb	r3, [r7, #23]
      break;
 80061c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3718      	adds	r7, #24
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061e6:	2300      	movs	r3, #0
 80061e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d101      	bne.n	80061f8 <HAL_TIM_ConfigClockSource+0x1c>
 80061f4:	2302      	movs	r3, #2
 80061f6:	e0b4      	b.n	8006362 <HAL_TIM_ConfigClockSource+0x186>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2202      	movs	r2, #2
 8006204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006216:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800621e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68ba      	ldr	r2, [r7, #8]
 8006226:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006230:	d03e      	beq.n	80062b0 <HAL_TIM_ConfigClockSource+0xd4>
 8006232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006236:	f200 8087 	bhi.w	8006348 <HAL_TIM_ConfigClockSource+0x16c>
 800623a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800623e:	f000 8086 	beq.w	800634e <HAL_TIM_ConfigClockSource+0x172>
 8006242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006246:	d87f      	bhi.n	8006348 <HAL_TIM_ConfigClockSource+0x16c>
 8006248:	2b70      	cmp	r3, #112	; 0x70
 800624a:	d01a      	beq.n	8006282 <HAL_TIM_ConfigClockSource+0xa6>
 800624c:	2b70      	cmp	r3, #112	; 0x70
 800624e:	d87b      	bhi.n	8006348 <HAL_TIM_ConfigClockSource+0x16c>
 8006250:	2b60      	cmp	r3, #96	; 0x60
 8006252:	d050      	beq.n	80062f6 <HAL_TIM_ConfigClockSource+0x11a>
 8006254:	2b60      	cmp	r3, #96	; 0x60
 8006256:	d877      	bhi.n	8006348 <HAL_TIM_ConfigClockSource+0x16c>
 8006258:	2b50      	cmp	r3, #80	; 0x50
 800625a:	d03c      	beq.n	80062d6 <HAL_TIM_ConfigClockSource+0xfa>
 800625c:	2b50      	cmp	r3, #80	; 0x50
 800625e:	d873      	bhi.n	8006348 <HAL_TIM_ConfigClockSource+0x16c>
 8006260:	2b40      	cmp	r3, #64	; 0x40
 8006262:	d058      	beq.n	8006316 <HAL_TIM_ConfigClockSource+0x13a>
 8006264:	2b40      	cmp	r3, #64	; 0x40
 8006266:	d86f      	bhi.n	8006348 <HAL_TIM_ConfigClockSource+0x16c>
 8006268:	2b30      	cmp	r3, #48	; 0x30
 800626a:	d064      	beq.n	8006336 <HAL_TIM_ConfigClockSource+0x15a>
 800626c:	2b30      	cmp	r3, #48	; 0x30
 800626e:	d86b      	bhi.n	8006348 <HAL_TIM_ConfigClockSource+0x16c>
 8006270:	2b20      	cmp	r3, #32
 8006272:	d060      	beq.n	8006336 <HAL_TIM_ConfigClockSource+0x15a>
 8006274:	2b20      	cmp	r3, #32
 8006276:	d867      	bhi.n	8006348 <HAL_TIM_ConfigClockSource+0x16c>
 8006278:	2b00      	cmp	r3, #0
 800627a:	d05c      	beq.n	8006336 <HAL_TIM_ConfigClockSource+0x15a>
 800627c:	2b10      	cmp	r3, #16
 800627e:	d05a      	beq.n	8006336 <HAL_TIM_ConfigClockSource+0x15a>
 8006280:	e062      	b.n	8006348 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6818      	ldr	r0, [r3, #0]
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	6899      	ldr	r1, [r3, #8]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	685a      	ldr	r2, [r3, #4]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	f000 fb5d 	bl	8006950 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80062a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	609a      	str	r2, [r3, #8]
      break;
 80062ae:	e04f      	b.n	8006350 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6818      	ldr	r0, [r3, #0]
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	6899      	ldr	r1, [r3, #8]
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	685a      	ldr	r2, [r3, #4]
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	f000 fb46 	bl	8006950 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689a      	ldr	r2, [r3, #8]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062d2:	609a      	str	r2, [r3, #8]
      break;
 80062d4:	e03c      	b.n	8006350 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6818      	ldr	r0, [r3, #0]
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	6859      	ldr	r1, [r3, #4]
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	461a      	mov	r2, r3
 80062e4:	f000 faba 	bl	800685c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2150      	movs	r1, #80	; 0x50
 80062ee:	4618      	mov	r0, r3
 80062f0:	f000 fb13 	bl	800691a <TIM_ITRx_SetConfig>
      break;
 80062f4:	e02c      	b.n	8006350 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6818      	ldr	r0, [r3, #0]
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	6859      	ldr	r1, [r3, #4]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	461a      	mov	r2, r3
 8006304:	f000 fad9 	bl	80068ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2160      	movs	r1, #96	; 0x60
 800630e:	4618      	mov	r0, r3
 8006310:	f000 fb03 	bl	800691a <TIM_ITRx_SetConfig>
      break;
 8006314:	e01c      	b.n	8006350 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6818      	ldr	r0, [r3, #0]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	6859      	ldr	r1, [r3, #4]
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	461a      	mov	r2, r3
 8006324:	f000 fa9a 	bl	800685c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2140      	movs	r1, #64	; 0x40
 800632e:	4618      	mov	r0, r3
 8006330:	f000 faf3 	bl	800691a <TIM_ITRx_SetConfig>
      break;
 8006334:	e00c      	b.n	8006350 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4619      	mov	r1, r3
 8006340:	4610      	mov	r0, r2
 8006342:	f000 faea 	bl	800691a <TIM_ITRx_SetConfig>
      break;
 8006346:	e003      	b.n	8006350 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	73fb      	strb	r3, [r7, #15]
      break;
 800634c:	e000      	b.n	8006350 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800634e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006360:	7bfb      	ldrb	r3, [r7, #15]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800636a:	b480      	push	{r7}
 800636c:	b083      	sub	sp, #12
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006372:	bf00      	nop
 8006374:	370c      	adds	r7, #12
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800637e:	b480      	push	{r7}
 8006380:	b083      	sub	sp, #12
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006386:	bf00      	nop
 8006388:	370c      	adds	r7, #12
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr

08006392 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006392:	b480      	push	{r7}
 8006394:	b083      	sub	sp, #12
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800639a:	bf00      	nop
 800639c:	370c      	adds	r7, #12
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b083      	sub	sp, #12
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063ae:	bf00      	nop
 80063b0:	370c      	adds	r7, #12
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
	...

080063bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a40      	ldr	r2, [pc, #256]	; (80064d0 <TIM_Base_SetConfig+0x114>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d013      	beq.n	80063fc <TIM_Base_SetConfig+0x40>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063da:	d00f      	beq.n	80063fc <TIM_Base_SetConfig+0x40>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a3d      	ldr	r2, [pc, #244]	; (80064d4 <TIM_Base_SetConfig+0x118>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d00b      	beq.n	80063fc <TIM_Base_SetConfig+0x40>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a3c      	ldr	r2, [pc, #240]	; (80064d8 <TIM_Base_SetConfig+0x11c>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d007      	beq.n	80063fc <TIM_Base_SetConfig+0x40>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a3b      	ldr	r2, [pc, #236]	; (80064dc <TIM_Base_SetConfig+0x120>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d003      	beq.n	80063fc <TIM_Base_SetConfig+0x40>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a3a      	ldr	r2, [pc, #232]	; (80064e0 <TIM_Base_SetConfig+0x124>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d108      	bne.n	800640e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006402:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	4313      	orrs	r3, r2
 800640c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a2f      	ldr	r2, [pc, #188]	; (80064d0 <TIM_Base_SetConfig+0x114>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d02b      	beq.n	800646e <TIM_Base_SetConfig+0xb2>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800641c:	d027      	beq.n	800646e <TIM_Base_SetConfig+0xb2>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a2c      	ldr	r2, [pc, #176]	; (80064d4 <TIM_Base_SetConfig+0x118>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d023      	beq.n	800646e <TIM_Base_SetConfig+0xb2>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a2b      	ldr	r2, [pc, #172]	; (80064d8 <TIM_Base_SetConfig+0x11c>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d01f      	beq.n	800646e <TIM_Base_SetConfig+0xb2>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a2a      	ldr	r2, [pc, #168]	; (80064dc <TIM_Base_SetConfig+0x120>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d01b      	beq.n	800646e <TIM_Base_SetConfig+0xb2>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a29      	ldr	r2, [pc, #164]	; (80064e0 <TIM_Base_SetConfig+0x124>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d017      	beq.n	800646e <TIM_Base_SetConfig+0xb2>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a28      	ldr	r2, [pc, #160]	; (80064e4 <TIM_Base_SetConfig+0x128>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d013      	beq.n	800646e <TIM_Base_SetConfig+0xb2>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a27      	ldr	r2, [pc, #156]	; (80064e8 <TIM_Base_SetConfig+0x12c>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d00f      	beq.n	800646e <TIM_Base_SetConfig+0xb2>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a26      	ldr	r2, [pc, #152]	; (80064ec <TIM_Base_SetConfig+0x130>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d00b      	beq.n	800646e <TIM_Base_SetConfig+0xb2>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a25      	ldr	r2, [pc, #148]	; (80064f0 <TIM_Base_SetConfig+0x134>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d007      	beq.n	800646e <TIM_Base_SetConfig+0xb2>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a24      	ldr	r2, [pc, #144]	; (80064f4 <TIM_Base_SetConfig+0x138>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d003      	beq.n	800646e <TIM_Base_SetConfig+0xb2>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a23      	ldr	r2, [pc, #140]	; (80064f8 <TIM_Base_SetConfig+0x13c>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d108      	bne.n	8006480 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006474:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	4313      	orrs	r3, r2
 800647e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	4313      	orrs	r3, r2
 800648c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	689a      	ldr	r2, [r3, #8]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a0a      	ldr	r2, [pc, #40]	; (80064d0 <TIM_Base_SetConfig+0x114>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d003      	beq.n	80064b4 <TIM_Base_SetConfig+0xf8>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a0c      	ldr	r2, [pc, #48]	; (80064e0 <TIM_Base_SetConfig+0x124>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d103      	bne.n	80064bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	691a      	ldr	r2, [r3, #16]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	615a      	str	r2, [r3, #20]
}
 80064c2:	bf00      	nop
 80064c4:	3714      	adds	r7, #20
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	40010000 	.word	0x40010000
 80064d4:	40000400 	.word	0x40000400
 80064d8:	40000800 	.word	0x40000800
 80064dc:	40000c00 	.word	0x40000c00
 80064e0:	40010400 	.word	0x40010400
 80064e4:	40014000 	.word	0x40014000
 80064e8:	40014400 	.word	0x40014400
 80064ec:	40014800 	.word	0x40014800
 80064f0:	40001800 	.word	0x40001800
 80064f4:	40001c00 	.word	0x40001c00
 80064f8:	40002000 	.word	0x40002000

080064fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b087      	sub	sp, #28
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a1b      	ldr	r3, [r3, #32]
 800650a:	f023 0201 	bic.w	r2, r3, #1
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800652a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f023 0303 	bic.w	r3, r3, #3
 8006532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	4313      	orrs	r3, r2
 800653c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f023 0302 	bic.w	r3, r3, #2
 8006544:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	4313      	orrs	r3, r2
 800654e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a20      	ldr	r2, [pc, #128]	; (80065d4 <TIM_OC1_SetConfig+0xd8>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d003      	beq.n	8006560 <TIM_OC1_SetConfig+0x64>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a1f      	ldr	r2, [pc, #124]	; (80065d8 <TIM_OC1_SetConfig+0xdc>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d10c      	bne.n	800657a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	f023 0308 	bic.w	r3, r3, #8
 8006566:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	4313      	orrs	r3, r2
 8006570:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	f023 0304 	bic.w	r3, r3, #4
 8006578:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a15      	ldr	r2, [pc, #84]	; (80065d4 <TIM_OC1_SetConfig+0xd8>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d003      	beq.n	800658a <TIM_OC1_SetConfig+0x8e>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a14      	ldr	r2, [pc, #80]	; (80065d8 <TIM_OC1_SetConfig+0xdc>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d111      	bne.n	80065ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006590:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006598:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	695b      	ldr	r3, [r3, #20]
 800659e:	693a      	ldr	r2, [r7, #16]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	699b      	ldr	r3, [r3, #24]
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	685a      	ldr	r2, [r3, #4]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	697a      	ldr	r2, [r7, #20]
 80065c6:	621a      	str	r2, [r3, #32]
}
 80065c8:	bf00      	nop
 80065ca:	371c      	adds	r7, #28
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr
 80065d4:	40010000 	.word	0x40010000
 80065d8:	40010400 	.word	0x40010400

080065dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065dc:	b480      	push	{r7}
 80065de:	b087      	sub	sp, #28
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	f023 0210 	bic.w	r2, r3, #16
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a1b      	ldr	r3, [r3, #32]
 80065f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800660a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006612:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	021b      	lsls	r3, r3, #8
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	4313      	orrs	r3, r2
 800661e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	f023 0320 	bic.w	r3, r3, #32
 8006626:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	011b      	lsls	r3, r3, #4
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	4313      	orrs	r3, r2
 8006632:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a22      	ldr	r2, [pc, #136]	; (80066c0 <TIM_OC2_SetConfig+0xe4>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d003      	beq.n	8006644 <TIM_OC2_SetConfig+0x68>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a21      	ldr	r2, [pc, #132]	; (80066c4 <TIM_OC2_SetConfig+0xe8>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d10d      	bne.n	8006660 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800664a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	011b      	lsls	r3, r3, #4
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	4313      	orrs	r3, r2
 8006656:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800665e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a17      	ldr	r2, [pc, #92]	; (80066c0 <TIM_OC2_SetConfig+0xe4>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d003      	beq.n	8006670 <TIM_OC2_SetConfig+0x94>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a16      	ldr	r2, [pc, #88]	; (80066c4 <TIM_OC2_SetConfig+0xe8>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d113      	bne.n	8006698 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006676:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800667e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	695b      	ldr	r3, [r3, #20]
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	693a      	ldr	r2, [r7, #16]
 8006688:	4313      	orrs	r3, r2
 800668a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	699b      	ldr	r3, [r3, #24]
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	693a      	ldr	r2, [r7, #16]
 8006694:	4313      	orrs	r3, r2
 8006696:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	693a      	ldr	r2, [r7, #16]
 800669c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	685a      	ldr	r2, [r3, #4]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	621a      	str	r2, [r3, #32]
}
 80066b2:	bf00      	nop
 80066b4:	371c      	adds	r7, #28
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	40010000 	.word	0x40010000
 80066c4:	40010400 	.word	0x40010400

080066c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b087      	sub	sp, #28
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f023 0303 	bic.w	r3, r3, #3
 80066fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	4313      	orrs	r3, r2
 8006708:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006710:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	021b      	lsls	r3, r3, #8
 8006718:	697a      	ldr	r2, [r7, #20]
 800671a:	4313      	orrs	r3, r2
 800671c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a21      	ldr	r2, [pc, #132]	; (80067a8 <TIM_OC3_SetConfig+0xe0>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d003      	beq.n	800672e <TIM_OC3_SetConfig+0x66>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a20      	ldr	r2, [pc, #128]	; (80067ac <TIM_OC3_SetConfig+0xe4>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d10d      	bne.n	800674a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006734:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	021b      	lsls	r3, r3, #8
 800673c:	697a      	ldr	r2, [r7, #20]
 800673e:	4313      	orrs	r3, r2
 8006740:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006748:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a16      	ldr	r2, [pc, #88]	; (80067a8 <TIM_OC3_SetConfig+0xe0>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d003      	beq.n	800675a <TIM_OC3_SetConfig+0x92>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a15      	ldr	r2, [pc, #84]	; (80067ac <TIM_OC3_SetConfig+0xe4>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d113      	bne.n	8006782 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006760:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006768:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	011b      	lsls	r3, r3, #4
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	4313      	orrs	r3, r2
 8006774:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	011b      	lsls	r3, r3, #4
 800677c:	693a      	ldr	r2, [r7, #16]
 800677e:	4313      	orrs	r3, r2
 8006780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	685a      	ldr	r2, [r3, #4]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	621a      	str	r2, [r3, #32]
}
 800679c:	bf00      	nop
 800679e:	371c      	adds	r7, #28
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr
 80067a8:	40010000 	.word	0x40010000
 80067ac:	40010400 	.word	0x40010400

080067b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b087      	sub	sp, #28
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a1b      	ldr	r3, [r3, #32]
 80067ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	69db      	ldr	r3, [r3, #28]
 80067d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	021b      	lsls	r3, r3, #8
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	031b      	lsls	r3, r3, #12
 8006802:	693a      	ldr	r2, [r7, #16]
 8006804:	4313      	orrs	r3, r2
 8006806:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a12      	ldr	r2, [pc, #72]	; (8006854 <TIM_OC4_SetConfig+0xa4>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d003      	beq.n	8006818 <TIM_OC4_SetConfig+0x68>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a11      	ldr	r2, [pc, #68]	; (8006858 <TIM_OC4_SetConfig+0xa8>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d109      	bne.n	800682c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800681e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	695b      	ldr	r3, [r3, #20]
 8006824:	019b      	lsls	r3, r3, #6
 8006826:	697a      	ldr	r2, [r7, #20]
 8006828:	4313      	orrs	r3, r2
 800682a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	697a      	ldr	r2, [r7, #20]
 8006830:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	685a      	ldr	r2, [r3, #4]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	621a      	str	r2, [r3, #32]
}
 8006846:	bf00      	nop
 8006848:	371c      	adds	r7, #28
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	40010000 	.word	0x40010000
 8006858:	40010400 	.word	0x40010400

0800685c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800685c:	b480      	push	{r7}
 800685e:	b087      	sub	sp, #28
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6a1b      	ldr	r3, [r3, #32]
 800686c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6a1b      	ldr	r3, [r3, #32]
 8006872:	f023 0201 	bic.w	r2, r3, #1
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006886:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	011b      	lsls	r3, r3, #4
 800688c:	693a      	ldr	r2, [r7, #16]
 800688e:	4313      	orrs	r3, r2
 8006890:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	f023 030a 	bic.w	r3, r3, #10
 8006898:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800689a:	697a      	ldr	r2, [r7, #20]
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	4313      	orrs	r3, r2
 80068a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	621a      	str	r2, [r3, #32]
}
 80068ae:	bf00      	nop
 80068b0:	371c      	adds	r7, #28
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b087      	sub	sp, #28
 80068be:	af00      	add	r7, sp, #0
 80068c0:	60f8      	str	r0, [r7, #12]
 80068c2:	60b9      	str	r1, [r7, #8]
 80068c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6a1b      	ldr	r3, [r3, #32]
 80068ca:	f023 0210 	bic.w	r2, r3, #16
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	699b      	ldr	r3, [r3, #24]
 80068d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6a1b      	ldr	r3, [r3, #32]
 80068dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	031b      	lsls	r3, r3, #12
 80068ea:	697a      	ldr	r2, [r7, #20]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80068f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	011b      	lsls	r3, r3, #4
 80068fc:	693a      	ldr	r2, [r7, #16]
 80068fe:	4313      	orrs	r3, r2
 8006900:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	697a      	ldr	r2, [r7, #20]
 8006906:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	621a      	str	r2, [r3, #32]
}
 800690e:	bf00      	nop
 8006910:	371c      	adds	r7, #28
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr

0800691a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800691a:	b480      	push	{r7}
 800691c:	b085      	sub	sp, #20
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
 8006922:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006930:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006932:	683a      	ldr	r2, [r7, #0]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	4313      	orrs	r3, r2
 8006938:	f043 0307 	orr.w	r3, r3, #7
 800693c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	609a      	str	r2, [r3, #8]
}
 8006944:	bf00      	nop
 8006946:	3714      	adds	r7, #20
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006950:	b480      	push	{r7}
 8006952:	b087      	sub	sp, #28
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
 800695c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800696a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	021a      	lsls	r2, r3, #8
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	431a      	orrs	r2, r3
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	4313      	orrs	r3, r2
 8006978:	697a      	ldr	r2, [r7, #20]
 800697a:	4313      	orrs	r3, r2
 800697c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	697a      	ldr	r2, [r7, #20]
 8006982:	609a      	str	r2, [r3, #8]
}
 8006984:	bf00      	nop
 8006986:	371c      	adds	r7, #28
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006990:	b480      	push	{r7}
 8006992:	b087      	sub	sp, #28
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	f003 031f 	and.w	r3, r3, #31
 80069a2:	2201      	movs	r2, #1
 80069a4:	fa02 f303 	lsl.w	r3, r2, r3
 80069a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6a1a      	ldr	r2, [r3, #32]
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	43db      	mvns	r3, r3
 80069b2:	401a      	ands	r2, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6a1a      	ldr	r2, [r3, #32]
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	f003 031f 	and.w	r3, r3, #31
 80069c2:	6879      	ldr	r1, [r7, #4]
 80069c4:	fa01 f303 	lsl.w	r3, r1, r3
 80069c8:	431a      	orrs	r2, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	621a      	str	r2, [r3, #32]
}
 80069ce:	bf00      	nop
 80069d0:	371c      	adds	r7, #28
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
	...

080069dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069dc:	b480      	push	{r7}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d101      	bne.n	80069f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069f0:	2302      	movs	r3, #2
 80069f2:	e05a      	b.n	8006aaa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2202      	movs	r2, #2
 8006a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a21      	ldr	r2, [pc, #132]	; (8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d022      	beq.n	8006a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a40:	d01d      	beq.n	8006a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a1d      	ldr	r2, [pc, #116]	; (8006abc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d018      	beq.n	8006a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a1b      	ldr	r2, [pc, #108]	; (8006ac0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d013      	beq.n	8006a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a1a      	ldr	r2, [pc, #104]	; (8006ac4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d00e      	beq.n	8006a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a18      	ldr	r2, [pc, #96]	; (8006ac8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d009      	beq.n	8006a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a17      	ldr	r2, [pc, #92]	; (8006acc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d004      	beq.n	8006a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a15      	ldr	r2, [pc, #84]	; (8006ad0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d10c      	bne.n	8006a98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3714      	adds	r7, #20
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	40010000 	.word	0x40010000
 8006abc:	40000400 	.word	0x40000400
 8006ac0:	40000800 	.word	0x40000800
 8006ac4:	40000c00 	.word	0x40000c00
 8006ac8:	40010400 	.word	0x40010400
 8006acc:	40014000 	.word	0x40014000
 8006ad0:	40001800 	.word	0x40001800

08006ad4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d101      	bne.n	8006af0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006aec:	2302      	movs	r3, #2
 8006aee:	e03d      	b.n	8006b6c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	695b      	ldr	r3, [r3, #20]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	69db      	ldr	r3, [r3, #28]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3714      	adds	r7, #20
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b80:	bf00      	nop
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b94:	bf00      	nop
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d101      	bne.n	8006bb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e04a      	b.n	8006c48 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d111      	bne.n	8006be2 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 fbea 	bl	80073a0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d102      	bne.n	8006bda <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a1e      	ldr	r2, [pc, #120]	; (8006c50 <HAL_UART_Init+0xb0>)
 8006bd8:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2224      	movs	r2, #36	; 0x24
 8006be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68da      	ldr	r2, [r3, #12]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006bf8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 ffd8 	bl	8007bb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	691a      	ldr	r2, [r3, #16]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c0e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	695a      	ldr	r2, [r3, #20]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c1e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68da      	ldr	r2, [r3, #12]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c2e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2220      	movs	r2, #32
 8006c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2220      	movs	r2, #32
 8006c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3708      	adds	r7, #8
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	08002925 	.word	0x08002925

08006c54 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b08a      	sub	sp, #40	; 0x28
 8006c58:	af02      	add	r7, sp, #8
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	603b      	str	r3, [r7, #0]
 8006c60:	4613      	mov	r3, r2
 8006c62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006c64:	2300      	movs	r3, #0
 8006c66:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	2b20      	cmp	r3, #32
 8006c72:	d17c      	bne.n	8006d6e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d002      	beq.n	8006c80 <HAL_UART_Transmit+0x2c>
 8006c7a:	88fb      	ldrh	r3, [r7, #6]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d101      	bne.n	8006c84 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	e075      	b.n	8006d70 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d101      	bne.n	8006c92 <HAL_UART_Transmit+0x3e>
 8006c8e:	2302      	movs	r3, #2
 8006c90:	e06e      	b.n	8006d70 <HAL_UART_Transmit+0x11c>
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2221      	movs	r2, #33	; 0x21
 8006ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ca8:	f7fc f9ce 	bl	8003048 <HAL_GetTick>
 8006cac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	88fa      	ldrh	r2, [r7, #6]
 8006cb2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	88fa      	ldrh	r2, [r7, #6]
 8006cb8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cc2:	d108      	bne.n	8006cd6 <HAL_UART_Transmit+0x82>
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	691b      	ldr	r3, [r3, #16]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d104      	bne.n	8006cd6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	61bb      	str	r3, [r7, #24]
 8006cd4:	e003      	b.n	8006cde <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006ce6:	e02a      	b.n	8006d3e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	9300      	str	r3, [sp, #0]
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	2180      	movs	r1, #128	; 0x80
 8006cf2:	68f8      	ldr	r0, [r7, #12]
 8006cf4:	f000 fc89 	bl	800760a <UART_WaitOnFlagUntilTimeout>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d001      	beq.n	8006d02 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e036      	b.n	8006d70 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d10b      	bne.n	8006d20 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	881b      	ldrh	r3, [r3, #0]
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d16:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	3302      	adds	r3, #2
 8006d1c:	61bb      	str	r3, [r7, #24]
 8006d1e:	e007      	b.n	8006d30 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	781a      	ldrb	r2, [r3, #0]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	3b01      	subs	r3, #1
 8006d38:	b29a      	uxth	r2, r3
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1cf      	bne.n	8006ce8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	9300      	str	r3, [sp, #0]
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	2140      	movs	r1, #64	; 0x40
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	f000 fc59 	bl	800760a <UART_WaitOnFlagUntilTimeout>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d001      	beq.n	8006d62 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e006      	b.n	8006d70 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2220      	movs	r2, #32
 8006d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	e000      	b.n	8006d70 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006d6e:	2302      	movs	r3, #2
  }
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3720      	adds	r7, #32
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	4613      	mov	r3, r2
 8006d84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	2b20      	cmp	r3, #32
 8006d90:	d11d      	bne.n	8006dce <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d002      	beq.n	8006d9e <HAL_UART_Receive_DMA+0x26>
 8006d98:	88fb      	ldrh	r3, [r7, #6]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d101      	bne.n	8006da2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e016      	b.n	8006dd0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d101      	bne.n	8006db0 <HAL_UART_Receive_DMA+0x38>
 8006dac:	2302      	movs	r3, #2
 8006dae:	e00f      	b.n	8006dd0 <HAL_UART_Receive_DMA+0x58>
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006dbe:	88fb      	ldrh	r3, [r7, #6]
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	68b9      	ldr	r1, [r7, #8]
 8006dc4:	68f8      	ldr	r0, [r7, #12]
 8006dc6:	f000 fc8f 	bl	80076e8 <UART_Start_Receive_DMA>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	e000      	b.n	8006dd0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006dce:	2302      	movs	r3, #2
  }
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3710      	adds	r7, #16
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b0ba      	sub	sp, #232	; 0xe8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	695b      	ldr	r3, [r3, #20]
 8006dfa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006e04:	2300      	movs	r3, #0
 8006e06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e0e:	f003 030f 	and.w	r3, r3, #15
 8006e12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006e16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10f      	bne.n	8006e3e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e22:	f003 0320 	and.w	r3, r3, #32
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d009      	beq.n	8006e3e <HAL_UART_IRQHandler+0x66>
 8006e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e2e:	f003 0320 	and.w	r3, r3, #32
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d003      	beq.n	8006e3e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 fdfd 	bl	8007a36 <UART_Receive_IT>
      return;
 8006e3c:	e25b      	b.n	80072f6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006e3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f000 80e1 	beq.w	800700a <HAL_UART_IRQHandler+0x232>
 8006e48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e4c:	f003 0301 	and.w	r3, r3, #1
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d106      	bne.n	8006e62 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e58:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f000 80d4 	beq.w	800700a <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e66:	f003 0301 	and.w	r3, r3, #1
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00b      	beq.n	8006e86 <HAL_UART_IRQHandler+0xae>
 8006e6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d005      	beq.n	8006e86 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7e:	f043 0201 	orr.w	r2, r3, #1
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e8a:	f003 0304 	and.w	r3, r3, #4
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00b      	beq.n	8006eaa <HAL_UART_IRQHandler+0xd2>
 8006e92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e96:	f003 0301 	and.w	r3, r3, #1
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d005      	beq.n	8006eaa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea2:	f043 0202 	orr.w	r2, r3, #2
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eae:	f003 0302 	and.w	r3, r3, #2
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00b      	beq.n	8006ece <HAL_UART_IRQHandler+0xf6>
 8006eb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d005      	beq.n	8006ece <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec6:	f043 0204 	orr.w	r2, r3, #4
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ed2:	f003 0308 	and.w	r3, r3, #8
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d011      	beq.n	8006efe <HAL_UART_IRQHandler+0x126>
 8006eda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ede:	f003 0320 	and.w	r3, r3, #32
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d105      	bne.n	8006ef2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006ee6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006eea:	f003 0301 	and.w	r3, r3, #1
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d005      	beq.n	8006efe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef6:	f043 0208 	orr.w	r2, r3, #8
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	f000 81f2 	beq.w	80072ec <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f0c:	f003 0320 	and.w	r3, r3, #32
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d008      	beq.n	8006f26 <HAL_UART_IRQHandler+0x14e>
 8006f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f18:	f003 0320 	and.w	r3, r3, #32
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d002      	beq.n	8006f26 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 fd88 	bl	8007a36 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	695b      	ldr	r3, [r3, #20]
 8006f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f30:	2b40      	cmp	r3, #64	; 0x40
 8006f32:	bf0c      	ite	eq
 8006f34:	2301      	moveq	r3, #1
 8006f36:	2300      	movne	r3, #0
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f42:	f003 0308 	and.w	r3, r3, #8
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d103      	bne.n	8006f52 <HAL_UART_IRQHandler+0x17a>
 8006f4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d051      	beq.n	8006ff6 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 fc8e 	bl	8007874 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	695b      	ldr	r3, [r3, #20]
 8006f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f62:	2b40      	cmp	r3, #64	; 0x40
 8006f64:	d142      	bne.n	8006fec <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	3314      	adds	r3, #20
 8006f6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f74:	e853 3f00 	ldrex	r3, [r3]
 8006f78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006f7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	3314      	adds	r3, #20
 8006f8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006f92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006f96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006f9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006fa2:	e841 2300 	strex	r3, r2, [r1]
 8006fa6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006faa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1d9      	bne.n	8006f66 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d013      	beq.n	8006fe2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fbe:	4a7f      	ldr	r2, [pc, #508]	; (80071bc <HAL_UART_IRQHandler+0x3e4>)
 8006fc0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7fc faa2 	bl	8003510 <HAL_DMA_Abort_IT>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d019      	beq.n	8007006 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006fdc:	4610      	mov	r0, r2
 8006fde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fe0:	e011      	b.n	8007006 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fea:	e00c      	b.n	8007006 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ff4:	e007      	b.n	8007006 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007004:	e172      	b.n	80072ec <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007006:	bf00      	nop
    return;
 8007008:	e170      	b.n	80072ec <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800700e:	2b01      	cmp	r3, #1
 8007010:	f040 814c 	bne.w	80072ac <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007018:	f003 0310 	and.w	r3, r3, #16
 800701c:	2b00      	cmp	r3, #0
 800701e:	f000 8145 	beq.w	80072ac <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007022:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007026:	f003 0310 	and.w	r3, r3, #16
 800702a:	2b00      	cmp	r3, #0
 800702c:	f000 813e 	beq.w	80072ac <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007030:	2300      	movs	r3, #0
 8007032:	60bb      	str	r3, [r7, #8]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	60bb      	str	r3, [r7, #8]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	60bb      	str	r3, [r7, #8]
 8007044:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	695b      	ldr	r3, [r3, #20]
 800704c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007050:	2b40      	cmp	r3, #64	; 0x40
 8007052:	f040 80b5 	bne.w	80071c0 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007062:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007066:	2b00      	cmp	r3, #0
 8007068:	f000 8142 	beq.w	80072f0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007070:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007074:	429a      	cmp	r2, r3
 8007076:	f080 813b 	bcs.w	80072f0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007080:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007086:	69db      	ldr	r3, [r3, #28]
 8007088:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800708c:	f000 8088 	beq.w	80071a0 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	330c      	adds	r3, #12
 8007096:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800709e:	e853 3f00 	ldrex	r3, [r3]
 80070a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80070a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	330c      	adds	r3, #12
 80070b8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80070bc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80070c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80070c8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80070cc:	e841 2300 	strex	r3, r2, [r1]
 80070d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80070d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d1d9      	bne.n	8007090 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	3314      	adds	r3, #20
 80070e2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070e6:	e853 3f00 	ldrex	r3, [r3]
 80070ea:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80070ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070ee:	f023 0301 	bic.w	r3, r3, #1
 80070f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	3314      	adds	r3, #20
 80070fc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007100:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007104:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007106:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007108:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800710c:	e841 2300 	strex	r3, r2, [r1]
 8007110:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007112:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1e1      	bne.n	80070dc <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	3314      	adds	r3, #20
 800711e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007120:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007122:	e853 3f00 	ldrex	r3, [r3]
 8007126:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007128:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800712a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800712e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	3314      	adds	r3, #20
 8007138:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800713c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800713e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007140:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007142:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007144:	e841 2300 	strex	r3, r2, [r1]
 8007148:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800714a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1e3      	bne.n	8007118 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2220      	movs	r2, #32
 8007154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	330c      	adds	r3, #12
 8007164:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007168:	e853 3f00 	ldrex	r3, [r3]
 800716c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800716e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007170:	f023 0310 	bic.w	r3, r3, #16
 8007174:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	330c      	adds	r3, #12
 800717e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007182:	65ba      	str	r2, [r7, #88]	; 0x58
 8007184:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007186:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007188:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800718a:	e841 2300 	strex	r3, r2, [r1]
 800718e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007192:	2b00      	cmp	r3, #0
 8007194:	d1e3      	bne.n	800715e <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800719a:	4618      	mov	r0, r3
 800719c:	f7fc f948 	bl	8003430 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 80071ac:	b292      	uxth	r2, r2
 80071ae:	1a8a      	subs	r2, r1, r2
 80071b0:	b292      	uxth	r2, r2
 80071b2:	4611      	mov	r1, r2
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80071b8:	e09a      	b.n	80072f0 <HAL_UART_IRQHandler+0x518>
 80071ba:	bf00      	nop
 80071bc:	0800793b 	.word	0x0800793b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	f000 808c 	beq.w	80072f4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80071dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f000 8087 	beq.w	80072f4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	330c      	adds	r3, #12
 80071ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f0:	e853 3f00 	ldrex	r3, [r3]
 80071f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	330c      	adds	r3, #12
 8007206:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800720a:	647a      	str	r2, [r7, #68]	; 0x44
 800720c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007210:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007212:	e841 2300 	strex	r3, r2, [r1]
 8007216:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1e3      	bne.n	80071e6 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	3314      	adds	r3, #20
 8007224:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007228:	e853 3f00 	ldrex	r3, [r3]
 800722c:	623b      	str	r3, [r7, #32]
   return(result);
 800722e:	6a3b      	ldr	r3, [r7, #32]
 8007230:	f023 0301 	bic.w	r3, r3, #1
 8007234:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	3314      	adds	r3, #20
 800723e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007242:	633a      	str	r2, [r7, #48]	; 0x30
 8007244:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007246:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800724a:	e841 2300 	strex	r3, r2, [r1]
 800724e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1e3      	bne.n	800721e <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2220      	movs	r2, #32
 800725a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	330c      	adds	r3, #12
 800726a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	e853 3f00 	ldrex	r3, [r3]
 8007272:	60fb      	str	r3, [r7, #12]
   return(result);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f023 0310 	bic.w	r3, r3, #16
 800727a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	330c      	adds	r3, #12
 8007284:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007288:	61fa      	str	r2, [r7, #28]
 800728a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728c:	69b9      	ldr	r1, [r7, #24]
 800728e:	69fa      	ldr	r2, [r7, #28]
 8007290:	e841 2300 	strex	r3, r2, [r1]
 8007294:	617b      	str	r3, [r7, #20]
   return(result);
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1e3      	bne.n	8007264 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072a0:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 80072a4:	4611      	mov	r1, r2
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80072aa:	e023      	b.n	80072f4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80072ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d009      	beq.n	80072cc <HAL_UART_IRQHandler+0x4f4>
 80072b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d003      	beq.n	80072cc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 fb4d 	bl	8007964 <UART_Transmit_IT>
    return;
 80072ca:	e014      	b.n	80072f6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80072cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00e      	beq.n	80072f6 <HAL_UART_IRQHandler+0x51e>
 80072d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d008      	beq.n	80072f6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 fb8d 	bl	8007a04 <UART_EndTransmit_IT>
    return;
 80072ea:	e004      	b.n	80072f6 <HAL_UART_IRQHandler+0x51e>
    return;
 80072ec:	bf00      	nop
 80072ee:	e002      	b.n	80072f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80072f0:	bf00      	nop
 80072f2:	e000      	b.n	80072f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80072f4:	bf00      	nop
  }
}
 80072f6:	37e8      	adds	r7, #232	; 0xe8
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8007354:	bf00      	nop
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8007368:	bf00      	nop
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800737c:	bf00      	nop
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	460b      	mov	r3, r1
 8007392:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007394:	bf00      	nop
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4a10      	ldr	r2, [pc, #64]	; (80073ec <UART_InitCallbacksToDefault+0x4c>)
 80073ac:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4a0f      	ldr	r2, [pc, #60]	; (80073f0 <UART_InitCallbacksToDefault+0x50>)
 80073b2:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4a0f      	ldr	r2, [pc, #60]	; (80073f4 <UART_InitCallbacksToDefault+0x54>)
 80073b8:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4a0e      	ldr	r2, [pc, #56]	; (80073f8 <UART_InitCallbacksToDefault+0x58>)
 80073be:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4a0e      	ldr	r2, [pc, #56]	; (80073fc <UART_InitCallbacksToDefault+0x5c>)
 80073c4:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a0d      	ldr	r2, [pc, #52]	; (8007400 <UART_InitCallbacksToDefault+0x60>)
 80073ca:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a0d      	ldr	r2, [pc, #52]	; (8007404 <UART_InitCallbacksToDefault+0x64>)
 80073d0:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4a0c      	ldr	r2, [pc, #48]	; (8007408 <UART_InitCallbacksToDefault+0x68>)
 80073d6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a0c      	ldr	r2, [pc, #48]	; (800740c <UART_InitCallbacksToDefault+0x6c>)
 80073dc:	669a      	str	r2, [r3, #104]	; 0x68

}
 80073de:	bf00      	nop
 80073e0:	370c      	adds	r7, #12
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop
 80073ec:	08007311 	.word	0x08007311
 80073f0:	080072fd 	.word	0x080072fd
 80073f4:	08007325 	.word	0x08007325
 80073f8:	08001511 	.word	0x08001511
 80073fc:	08007339 	.word	0x08007339
 8007400:	0800734d 	.word	0x0800734d
 8007404:	08007361 	.word	0x08007361
 8007408:	08007375 	.word	0x08007375
 800740c:	08007389 	.word	0x08007389

08007410 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b09c      	sub	sp, #112	; 0x70
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800741c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007428:	2b00      	cmp	r3, #0
 800742a:	d172      	bne.n	8007512 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800742c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800742e:	2200      	movs	r2, #0
 8007430:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	330c      	adds	r3, #12
 8007438:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800743c:	e853 3f00 	ldrex	r3, [r3]
 8007440:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007448:	66bb      	str	r3, [r7, #104]	; 0x68
 800744a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	330c      	adds	r3, #12
 8007450:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007452:	65ba      	str	r2, [r7, #88]	; 0x58
 8007454:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007456:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007458:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800745a:	e841 2300 	strex	r3, r2, [r1]
 800745e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007460:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1e5      	bne.n	8007432 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	3314      	adds	r3, #20
 800746c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007470:	e853 3f00 	ldrex	r3, [r3]
 8007474:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007478:	f023 0301 	bic.w	r3, r3, #1
 800747c:	667b      	str	r3, [r7, #100]	; 0x64
 800747e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	3314      	adds	r3, #20
 8007484:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007486:	647a      	str	r2, [r7, #68]	; 0x44
 8007488:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800748c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800748e:	e841 2300 	strex	r3, r2, [r1]
 8007492:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007496:	2b00      	cmp	r3, #0
 8007498:	d1e5      	bne.n	8007466 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800749a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	3314      	adds	r3, #20
 80074a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a4:	e853 3f00 	ldrex	r3, [r3]
 80074a8:	623b      	str	r3, [r7, #32]
   return(result);
 80074aa:	6a3b      	ldr	r3, [r7, #32]
 80074ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074b0:	663b      	str	r3, [r7, #96]	; 0x60
 80074b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	3314      	adds	r3, #20
 80074b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80074ba:	633a      	str	r2, [r7, #48]	; 0x30
 80074bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074c2:	e841 2300 	strex	r3, r2, [r1]
 80074c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1e5      	bne.n	800749a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80074ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074d0:	2220      	movs	r2, #32
 80074d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d119      	bne.n	8007512 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	330c      	adds	r3, #12
 80074e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	e853 3f00 	ldrex	r3, [r3]
 80074ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f023 0310 	bic.w	r3, r3, #16
 80074f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	330c      	adds	r3, #12
 80074fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80074fe:	61fa      	str	r2, [r7, #28]
 8007500:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007502:	69b9      	ldr	r1, [r7, #24]
 8007504:	69fa      	ldr	r2, [r7, #28]
 8007506:	e841 2300 	strex	r3, r2, [r1]
 800750a:	617b      	str	r3, [r7, #20]
   return(result);
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d1e5      	bne.n	80074de <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007516:	2b01      	cmp	r3, #1
 8007518:	d107      	bne.n	800752a <UART_DMAReceiveCplt+0x11a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800751a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800751c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800751e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007520:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8007522:	4611      	mov	r1, r2
 8007524:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007526:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007528:	e003      	b.n	8007532 <UART_DMAReceiveCplt+0x122>
    huart->RxCpltCallback(huart);
 800752a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800752c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800752e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007530:	4798      	blx	r3
}
 8007532:	bf00      	nop
 8007534:	3770      	adds	r7, #112	; 0x70
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b084      	sub	sp, #16
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007546:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800754c:	2b01      	cmp	r3, #1
 800754e:	d109      	bne.n	8007564 <UART_DMARxHalfCplt+0x2a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8007558:	0852      	lsrs	r2, r2, #1
 800755a:	b292      	uxth	r2, r2
 800755c:	4611      	mov	r1, r2
 800755e:	68f8      	ldr	r0, [r7, #12]
 8007560:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007562:	e003      	b.n	800756c <UART_DMARxHalfCplt+0x32>
    huart->RxHalfCpltCallback(huart);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007568:	68f8      	ldr	r0, [r7, #12]
 800756a:	4798      	blx	r3
}
 800756c:	bf00      	nop
 800756e:	3710      	adds	r7, #16
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800757c:	2300      	movs	r3, #0
 800757e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007584:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	695b      	ldr	r3, [r3, #20]
 800758c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007590:	2b80      	cmp	r3, #128	; 0x80
 8007592:	bf0c      	ite	eq
 8007594:	2301      	moveq	r3, #1
 8007596:	2300      	movne	r3, #0
 8007598:	b2db      	uxtb	r3, r3
 800759a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	2b21      	cmp	r3, #33	; 0x21
 80075a6:	d108      	bne.n	80075ba <UART_DMAError+0x46>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d005      	beq.n	80075ba <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	2200      	movs	r2, #0
 80075b2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80075b4:	68b8      	ldr	r0, [r7, #8]
 80075b6:	f000 f935 	bl	8007824 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	695b      	ldr	r3, [r3, #20]
 80075c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c4:	2b40      	cmp	r3, #64	; 0x40
 80075c6:	bf0c      	ite	eq
 80075c8:	2301      	moveq	r3, #1
 80075ca:	2300      	movne	r3, #0
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	2b22      	cmp	r3, #34	; 0x22
 80075da:	d108      	bne.n	80075ee <UART_DMAError+0x7a>
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d005      	beq.n	80075ee <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	2200      	movs	r2, #0
 80075e6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80075e8:	68b8      	ldr	r0, [r7, #8]
 80075ea:	f000 f943 	bl	8007874 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f2:	f043 0210 	orr.w	r2, r3, #16
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075fe:	68b8      	ldr	r0, [r7, #8]
 8007600:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007602:	bf00      	nop
 8007604:	3710      	adds	r7, #16
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b090      	sub	sp, #64	; 0x40
 800760e:	af00      	add	r7, sp, #0
 8007610:	60f8      	str	r0, [r7, #12]
 8007612:	60b9      	str	r1, [r7, #8]
 8007614:	603b      	str	r3, [r7, #0]
 8007616:	4613      	mov	r3, r2
 8007618:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800761a:	e050      	b.n	80076be <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800761c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800761e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007622:	d04c      	beq.n	80076be <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007624:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007626:	2b00      	cmp	r3, #0
 8007628:	d007      	beq.n	800763a <UART_WaitOnFlagUntilTimeout+0x30>
 800762a:	f7fb fd0d 	bl	8003048 <HAL_GetTick>
 800762e:	4602      	mov	r2, r0
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007636:	429a      	cmp	r2, r3
 8007638:	d241      	bcs.n	80076be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	330c      	adds	r3, #12
 8007640:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007644:	e853 3f00 	ldrex	r3, [r3]
 8007648:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800764a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007650:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	330c      	adds	r3, #12
 8007658:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800765a:	637a      	str	r2, [r7, #52]	; 0x34
 800765c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007660:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007662:	e841 2300 	strex	r3, r2, [r1]
 8007666:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1e5      	bne.n	800763a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	3314      	adds	r3, #20
 8007674:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	e853 3f00 	ldrex	r3, [r3]
 800767c:	613b      	str	r3, [r7, #16]
   return(result);
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	f023 0301 	bic.w	r3, r3, #1
 8007684:	63bb      	str	r3, [r7, #56]	; 0x38
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	3314      	adds	r3, #20
 800768c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800768e:	623a      	str	r2, [r7, #32]
 8007690:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007692:	69f9      	ldr	r1, [r7, #28]
 8007694:	6a3a      	ldr	r2, [r7, #32]
 8007696:	e841 2300 	strex	r3, r2, [r1]
 800769a:	61bb      	str	r3, [r7, #24]
   return(result);
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1e5      	bne.n	800766e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2220      	movs	r2, #32
 80076a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2220      	movs	r2, #32
 80076ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e00f      	b.n	80076de <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	4013      	ands	r3, r2
 80076c8:	68ba      	ldr	r2, [r7, #8]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	bf0c      	ite	eq
 80076ce:	2301      	moveq	r3, #1
 80076d0:	2300      	movne	r3, #0
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	461a      	mov	r2, r3
 80076d6:	79fb      	ldrb	r3, [r7, #7]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d09f      	beq.n	800761c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3740      	adds	r7, #64	; 0x40
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
	...

080076e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b098      	sub	sp, #96	; 0x60
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	4613      	mov	r3, r2
 80076f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80076f6:	68ba      	ldr	r2, [r7, #8]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	88fa      	ldrh	r2, [r7, #6]
 8007700:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2200      	movs	r2, #0
 8007706:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2222      	movs	r2, #34	; 0x22
 800770c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007714:	4a40      	ldr	r2, [pc, #256]	; (8007818 <UART_Start_Receive_DMA+0x130>)
 8007716:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771c:	4a3f      	ldr	r2, [pc, #252]	; (800781c <UART_Start_Receive_DMA+0x134>)
 800771e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007724:	4a3e      	ldr	r2, [pc, #248]	; (8007820 <UART_Start_Receive_DMA+0x138>)
 8007726:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800772c:	2200      	movs	r2, #0
 800772e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007730:	f107 0308 	add.w	r3, r7, #8
 8007734:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	3304      	adds	r3, #4
 8007740:	4619      	mov	r1, r3
 8007742:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	88fb      	ldrh	r3, [r7, #6]
 8007748:	f7fb fe1a 	bl	8003380 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800774c:	2300      	movs	r3, #0
 800774e:	613b      	str	r3, [r7, #16]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	613b      	str	r3, [r7, #16]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	613b      	str	r3, [r7, #16]
 8007760:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2200      	movs	r2, #0
 8007766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	691b      	ldr	r3, [r3, #16]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d019      	beq.n	80077a6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	330c      	adds	r3, #12
 8007778:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800777c:	e853 3f00 	ldrex	r3, [r3]
 8007780:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007788:	65bb      	str	r3, [r7, #88]	; 0x58
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	330c      	adds	r3, #12
 8007790:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007792:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007794:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007796:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007798:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800779a:	e841 2300 	strex	r3, r2, [r1]
 800779e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80077a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1e5      	bne.n	8007772 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	3314      	adds	r3, #20
 80077ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b0:	e853 3f00 	ldrex	r3, [r3]
 80077b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80077b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b8:	f043 0301 	orr.w	r3, r3, #1
 80077bc:	657b      	str	r3, [r7, #84]	; 0x54
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	3314      	adds	r3, #20
 80077c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80077c6:	63ba      	str	r2, [r7, #56]	; 0x38
 80077c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80077cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077ce:	e841 2300 	strex	r3, r2, [r1]
 80077d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80077d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d1e5      	bne.n	80077a6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	3314      	adds	r3, #20
 80077e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	e853 3f00 	ldrex	r3, [r3]
 80077e8:	617b      	str	r3, [r7, #20]
   return(result);
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077f0:	653b      	str	r3, [r7, #80]	; 0x50
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	3314      	adds	r3, #20
 80077f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80077fa:	627a      	str	r2, [r7, #36]	; 0x24
 80077fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fe:	6a39      	ldr	r1, [r7, #32]
 8007800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007802:	e841 2300 	strex	r3, r2, [r1]
 8007806:	61fb      	str	r3, [r7, #28]
   return(result);
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d1e5      	bne.n	80077da <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800780e:	2300      	movs	r3, #0
}
 8007810:	4618      	mov	r0, r3
 8007812:	3760      	adds	r7, #96	; 0x60
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	08007411 	.word	0x08007411
 800781c:	0800753b 	.word	0x0800753b
 8007820:	08007575 	.word	0x08007575

08007824 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007824:	b480      	push	{r7}
 8007826:	b089      	sub	sp, #36	; 0x24
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	330c      	adds	r3, #12
 8007832:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	e853 3f00 	ldrex	r3, [r3]
 800783a:	60bb      	str	r3, [r7, #8]
   return(result);
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007842:	61fb      	str	r3, [r7, #28]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	330c      	adds	r3, #12
 800784a:	69fa      	ldr	r2, [r7, #28]
 800784c:	61ba      	str	r2, [r7, #24]
 800784e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007850:	6979      	ldr	r1, [r7, #20]
 8007852:	69ba      	ldr	r2, [r7, #24]
 8007854:	e841 2300 	strex	r3, r2, [r1]
 8007858:	613b      	str	r3, [r7, #16]
   return(result);
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d1e5      	bne.n	800782c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2220      	movs	r2, #32
 8007864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007868:	bf00      	nop
 800786a:	3724      	adds	r7, #36	; 0x24
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007874:	b480      	push	{r7}
 8007876:	b095      	sub	sp, #84	; 0x54
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	330c      	adds	r3, #12
 8007882:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007886:	e853 3f00 	ldrex	r3, [r3]
 800788a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800788c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800788e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007892:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	330c      	adds	r3, #12
 800789a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800789c:	643a      	str	r2, [r7, #64]	; 0x40
 800789e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80078a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078a4:	e841 2300 	strex	r3, r2, [r1]
 80078a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d1e5      	bne.n	800787c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	3314      	adds	r3, #20
 80078b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b8:	6a3b      	ldr	r3, [r7, #32]
 80078ba:	e853 3f00 	ldrex	r3, [r3]
 80078be:	61fb      	str	r3, [r7, #28]
   return(result);
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	f023 0301 	bic.w	r3, r3, #1
 80078c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	3314      	adds	r3, #20
 80078ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078d8:	e841 2300 	strex	r3, r2, [r1]
 80078dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d1e5      	bne.n	80078b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d119      	bne.n	8007920 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	330c      	adds	r3, #12
 80078f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	e853 3f00 	ldrex	r3, [r3]
 80078fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	f023 0310 	bic.w	r3, r3, #16
 8007902:	647b      	str	r3, [r7, #68]	; 0x44
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	330c      	adds	r3, #12
 800790a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800790c:	61ba      	str	r2, [r7, #24]
 800790e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007910:	6979      	ldr	r1, [r7, #20]
 8007912:	69ba      	ldr	r2, [r7, #24]
 8007914:	e841 2300 	strex	r3, r2, [r1]
 8007918:	613b      	str	r3, [r7, #16]
   return(result);
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d1e5      	bne.n	80078ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2220      	movs	r2, #32
 8007924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800792e:	bf00      	nop
 8007930:	3754      	adds	r7, #84	; 0x54
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr

0800793a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b084      	sub	sp, #16
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007946:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2200      	movs	r2, #0
 800794c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2200      	movs	r2, #0
 8007952:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800795c:	bf00      	nop
 800795e:	3710      	adds	r7, #16
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007964:	b480      	push	{r7}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007972:	b2db      	uxtb	r3, r3
 8007974:	2b21      	cmp	r3, #33	; 0x21
 8007976:	d13e      	bne.n	80079f6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007980:	d114      	bne.n	80079ac <UART_Transmit_IT+0x48>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	691b      	ldr	r3, [r3, #16]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d110      	bne.n	80079ac <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a1b      	ldr	r3, [r3, #32]
 800798e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	881b      	ldrh	r3, [r3, #0]
 8007994:	461a      	mov	r2, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800799e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6a1b      	ldr	r3, [r3, #32]
 80079a4:	1c9a      	adds	r2, r3, #2
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	621a      	str	r2, [r3, #32]
 80079aa:	e008      	b.n	80079be <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6a1b      	ldr	r3, [r3, #32]
 80079b0:	1c59      	adds	r1, r3, #1
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	6211      	str	r1, [r2, #32]
 80079b6:	781a      	ldrb	r2, [r3, #0]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	3b01      	subs	r3, #1
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	4619      	mov	r1, r3
 80079cc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d10f      	bne.n	80079f2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68da      	ldr	r2, [r3, #12]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079e0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	68da      	ldr	r2, [r3, #12]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079f0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80079f2:	2300      	movs	r3, #0
 80079f4:	e000      	b.n	80079f8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80079f6:	2302      	movs	r3, #2
  }
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3714      	adds	r7, #20
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	68da      	ldr	r2, [r3, #12]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a1a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2220      	movs	r2, #32
 8007a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3708      	adds	r7, #8
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b08c      	sub	sp, #48	; 0x30
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	2b22      	cmp	r3, #34	; 0x22
 8007a48:	f040 80ad 	bne.w	8007ba6 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a54:	d117      	bne.n	8007a86 <UART_Receive_IT+0x50>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	691b      	ldr	r3, [r3, #16]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d113      	bne.n	8007a86 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a66:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a74:	b29a      	uxth	r2, r3
 8007a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a78:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a7e:	1c9a      	adds	r2, r3, #2
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	629a      	str	r2, [r3, #40]	; 0x28
 8007a84:	e026      	b.n	8007ad4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a98:	d007      	beq.n	8007aaa <UART_Receive_IT+0x74>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d10a      	bne.n	8007ab8 <UART_Receive_IT+0x82>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d106      	bne.n	8007ab8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	b2da      	uxtb	r2, r3
 8007ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab4:	701a      	strb	r2, [r3, #0]
 8007ab6:	e008      	b.n	8007aca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ac4:	b2da      	uxtb	r2, r3
 8007ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ace:	1c5a      	adds	r2, r3, #1
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	3b01      	subs	r3, #1
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d15c      	bne.n	8007ba2 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68da      	ldr	r2, [r3, #12]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f022 0220 	bic.w	r2, r2, #32
 8007af6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	68da      	ldr	r2, [r3, #12]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	695a      	ldr	r2, [r3, #20]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f022 0201 	bic.w	r2, r2, #1
 8007b16:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2220      	movs	r2, #32
 8007b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d136      	bne.n	8007b96 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	330c      	adds	r3, #12
 8007b34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	e853 3f00 	ldrex	r3, [r3]
 8007b3c:	613b      	str	r3, [r7, #16]
   return(result);
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	f023 0310 	bic.w	r3, r3, #16
 8007b44:	627b      	str	r3, [r7, #36]	; 0x24
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	330c      	adds	r3, #12
 8007b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b4e:	623a      	str	r2, [r7, #32]
 8007b50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b52:	69f9      	ldr	r1, [r7, #28]
 8007b54:	6a3a      	ldr	r2, [r7, #32]
 8007b56:	e841 2300 	strex	r3, r2, [r1]
 8007b5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b5c:	69bb      	ldr	r3, [r7, #24]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d1e5      	bne.n	8007b2e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f003 0310 	and.w	r3, r3, #16
 8007b6c:	2b10      	cmp	r3, #16
 8007b6e:	d10a      	bne.n	8007b86 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b70:	2300      	movs	r3, #0
 8007b72:	60fb      	str	r3, [r7, #12]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	60fb      	str	r3, [r7, #12]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	60fb      	str	r3, [r7, #12]
 8007b84:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8007b8e:	4611      	mov	r1, r2
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	4798      	blx	r3
 8007b94:	e003      	b.n	8007b9e <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	e002      	b.n	8007ba8 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	e000      	b.n	8007ba8 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 8007ba6:	2302      	movs	r3, #2
  }
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3730      	adds	r7, #48	; 0x30
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007bb4:	b0c0      	sub	sp, #256	; 0x100
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bcc:	68d9      	ldr	r1, [r3, #12]
 8007bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	ea40 0301 	orr.w	r3, r0, r1
 8007bd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bde:	689a      	ldr	r2, [r3, #8]
 8007be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	431a      	orrs	r2, r3
 8007be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bec:	695b      	ldr	r3, [r3, #20]
 8007bee:	431a      	orrs	r2, r3
 8007bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bf4:	69db      	ldr	r3, [r3, #28]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007c08:	f021 010c 	bic.w	r1, r1, #12
 8007c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007c16:	430b      	orrs	r3, r1
 8007c18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	695b      	ldr	r3, [r3, #20]
 8007c22:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c2a:	6999      	ldr	r1, [r3, #24]
 8007c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	ea40 0301 	orr.w	r3, r0, r1
 8007c36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	4b8f      	ldr	r3, [pc, #572]	; (8007e7c <UART_SetConfig+0x2cc>)
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d005      	beq.n	8007c50 <UART_SetConfig+0xa0>
 8007c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	4b8d      	ldr	r3, [pc, #564]	; (8007e80 <UART_SetConfig+0x2d0>)
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d104      	bne.n	8007c5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c50:	f7fd fe2c 	bl	80058ac <HAL_RCC_GetPCLK2Freq>
 8007c54:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007c58:	e003      	b.n	8007c62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007c5a:	f7fd fe13 	bl	8005884 <HAL_RCC_GetPCLK1Freq>
 8007c5e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c66:	69db      	ldr	r3, [r3, #28]
 8007c68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c6c:	f040 810c 	bne.w	8007e88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007c70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c74:	2200      	movs	r2, #0
 8007c76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c7a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007c7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007c82:	4622      	mov	r2, r4
 8007c84:	462b      	mov	r3, r5
 8007c86:	1891      	adds	r1, r2, r2
 8007c88:	65b9      	str	r1, [r7, #88]	; 0x58
 8007c8a:	415b      	adcs	r3, r3
 8007c8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007c92:	4621      	mov	r1, r4
 8007c94:	eb12 0801 	adds.w	r8, r2, r1
 8007c98:	4629      	mov	r1, r5
 8007c9a:	eb43 0901 	adc.w	r9, r3, r1
 8007c9e:	f04f 0200 	mov.w	r2, #0
 8007ca2:	f04f 0300 	mov.w	r3, #0
 8007ca6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007caa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007cae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007cb2:	4690      	mov	r8, r2
 8007cb4:	4699      	mov	r9, r3
 8007cb6:	4623      	mov	r3, r4
 8007cb8:	eb18 0303 	adds.w	r3, r8, r3
 8007cbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007cc0:	462b      	mov	r3, r5
 8007cc2:	eb49 0303 	adc.w	r3, r9, r3
 8007cc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007cd6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007cda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007cde:	460b      	mov	r3, r1
 8007ce0:	18db      	adds	r3, r3, r3
 8007ce2:	653b      	str	r3, [r7, #80]	; 0x50
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	eb42 0303 	adc.w	r3, r2, r3
 8007cea:	657b      	str	r3, [r7, #84]	; 0x54
 8007cec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007cf0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007cf4:	f7f8 ffa8 	bl	8000c48 <__aeabi_uldivmod>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	4b61      	ldr	r3, [pc, #388]	; (8007e84 <UART_SetConfig+0x2d4>)
 8007cfe:	fba3 2302 	umull	r2, r3, r3, r2
 8007d02:	095b      	lsrs	r3, r3, #5
 8007d04:	011c      	lsls	r4, r3, #4
 8007d06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d10:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007d14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007d18:	4642      	mov	r2, r8
 8007d1a:	464b      	mov	r3, r9
 8007d1c:	1891      	adds	r1, r2, r2
 8007d1e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007d20:	415b      	adcs	r3, r3
 8007d22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007d28:	4641      	mov	r1, r8
 8007d2a:	eb12 0a01 	adds.w	sl, r2, r1
 8007d2e:	4649      	mov	r1, r9
 8007d30:	eb43 0b01 	adc.w	fp, r3, r1
 8007d34:	f04f 0200 	mov.w	r2, #0
 8007d38:	f04f 0300 	mov.w	r3, #0
 8007d3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007d40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007d44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d48:	4692      	mov	sl, r2
 8007d4a:	469b      	mov	fp, r3
 8007d4c:	4643      	mov	r3, r8
 8007d4e:	eb1a 0303 	adds.w	r3, sl, r3
 8007d52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d56:	464b      	mov	r3, r9
 8007d58:	eb4b 0303 	adc.w	r3, fp, r3
 8007d5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d6c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007d70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007d74:	460b      	mov	r3, r1
 8007d76:	18db      	adds	r3, r3, r3
 8007d78:	643b      	str	r3, [r7, #64]	; 0x40
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	eb42 0303 	adc.w	r3, r2, r3
 8007d80:	647b      	str	r3, [r7, #68]	; 0x44
 8007d82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007d86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007d8a:	f7f8 ff5d 	bl	8000c48 <__aeabi_uldivmod>
 8007d8e:	4602      	mov	r2, r0
 8007d90:	460b      	mov	r3, r1
 8007d92:	4611      	mov	r1, r2
 8007d94:	4b3b      	ldr	r3, [pc, #236]	; (8007e84 <UART_SetConfig+0x2d4>)
 8007d96:	fba3 2301 	umull	r2, r3, r3, r1
 8007d9a:	095b      	lsrs	r3, r3, #5
 8007d9c:	2264      	movs	r2, #100	; 0x64
 8007d9e:	fb02 f303 	mul.w	r3, r2, r3
 8007da2:	1acb      	subs	r3, r1, r3
 8007da4:	00db      	lsls	r3, r3, #3
 8007da6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007daa:	4b36      	ldr	r3, [pc, #216]	; (8007e84 <UART_SetConfig+0x2d4>)
 8007dac:	fba3 2302 	umull	r2, r3, r3, r2
 8007db0:	095b      	lsrs	r3, r3, #5
 8007db2:	005b      	lsls	r3, r3, #1
 8007db4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007db8:	441c      	add	r4, r3
 8007dba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007dc4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007dc8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007dcc:	4642      	mov	r2, r8
 8007dce:	464b      	mov	r3, r9
 8007dd0:	1891      	adds	r1, r2, r2
 8007dd2:	63b9      	str	r1, [r7, #56]	; 0x38
 8007dd4:	415b      	adcs	r3, r3
 8007dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007ddc:	4641      	mov	r1, r8
 8007dde:	1851      	adds	r1, r2, r1
 8007de0:	6339      	str	r1, [r7, #48]	; 0x30
 8007de2:	4649      	mov	r1, r9
 8007de4:	414b      	adcs	r3, r1
 8007de6:	637b      	str	r3, [r7, #52]	; 0x34
 8007de8:	f04f 0200 	mov.w	r2, #0
 8007dec:	f04f 0300 	mov.w	r3, #0
 8007df0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007df4:	4659      	mov	r1, fp
 8007df6:	00cb      	lsls	r3, r1, #3
 8007df8:	4651      	mov	r1, sl
 8007dfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dfe:	4651      	mov	r1, sl
 8007e00:	00ca      	lsls	r2, r1, #3
 8007e02:	4610      	mov	r0, r2
 8007e04:	4619      	mov	r1, r3
 8007e06:	4603      	mov	r3, r0
 8007e08:	4642      	mov	r2, r8
 8007e0a:	189b      	adds	r3, r3, r2
 8007e0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e10:	464b      	mov	r3, r9
 8007e12:	460a      	mov	r2, r1
 8007e14:	eb42 0303 	adc.w	r3, r2, r3
 8007e18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007e28:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007e2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007e30:	460b      	mov	r3, r1
 8007e32:	18db      	adds	r3, r3, r3
 8007e34:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e36:	4613      	mov	r3, r2
 8007e38:	eb42 0303 	adc.w	r3, r2, r3
 8007e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007e46:	f7f8 feff 	bl	8000c48 <__aeabi_uldivmod>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	4b0d      	ldr	r3, [pc, #52]	; (8007e84 <UART_SetConfig+0x2d4>)
 8007e50:	fba3 1302 	umull	r1, r3, r3, r2
 8007e54:	095b      	lsrs	r3, r3, #5
 8007e56:	2164      	movs	r1, #100	; 0x64
 8007e58:	fb01 f303 	mul.w	r3, r1, r3
 8007e5c:	1ad3      	subs	r3, r2, r3
 8007e5e:	00db      	lsls	r3, r3, #3
 8007e60:	3332      	adds	r3, #50	; 0x32
 8007e62:	4a08      	ldr	r2, [pc, #32]	; (8007e84 <UART_SetConfig+0x2d4>)
 8007e64:	fba2 2303 	umull	r2, r3, r2, r3
 8007e68:	095b      	lsrs	r3, r3, #5
 8007e6a:	f003 0207 	and.w	r2, r3, #7
 8007e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4422      	add	r2, r4
 8007e76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007e78:	e105      	b.n	8008086 <UART_SetConfig+0x4d6>
 8007e7a:	bf00      	nop
 8007e7c:	40011000 	.word	0x40011000
 8007e80:	40011400 	.word	0x40011400
 8007e84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007e92:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007e96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007e9a:	4642      	mov	r2, r8
 8007e9c:	464b      	mov	r3, r9
 8007e9e:	1891      	adds	r1, r2, r2
 8007ea0:	6239      	str	r1, [r7, #32]
 8007ea2:	415b      	adcs	r3, r3
 8007ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8007ea6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007eaa:	4641      	mov	r1, r8
 8007eac:	1854      	adds	r4, r2, r1
 8007eae:	4649      	mov	r1, r9
 8007eb0:	eb43 0501 	adc.w	r5, r3, r1
 8007eb4:	f04f 0200 	mov.w	r2, #0
 8007eb8:	f04f 0300 	mov.w	r3, #0
 8007ebc:	00eb      	lsls	r3, r5, #3
 8007ebe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ec2:	00e2      	lsls	r2, r4, #3
 8007ec4:	4614      	mov	r4, r2
 8007ec6:	461d      	mov	r5, r3
 8007ec8:	4643      	mov	r3, r8
 8007eca:	18e3      	adds	r3, r4, r3
 8007ecc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007ed0:	464b      	mov	r3, r9
 8007ed2:	eb45 0303 	adc.w	r3, r5, r3
 8007ed6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007ee6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007eea:	f04f 0200 	mov.w	r2, #0
 8007eee:	f04f 0300 	mov.w	r3, #0
 8007ef2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007ef6:	4629      	mov	r1, r5
 8007ef8:	008b      	lsls	r3, r1, #2
 8007efa:	4621      	mov	r1, r4
 8007efc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f00:	4621      	mov	r1, r4
 8007f02:	008a      	lsls	r2, r1, #2
 8007f04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007f08:	f7f8 fe9e 	bl	8000c48 <__aeabi_uldivmod>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	460b      	mov	r3, r1
 8007f10:	4b60      	ldr	r3, [pc, #384]	; (8008094 <UART_SetConfig+0x4e4>)
 8007f12:	fba3 2302 	umull	r2, r3, r3, r2
 8007f16:	095b      	lsrs	r3, r3, #5
 8007f18:	011c      	lsls	r4, r3, #4
 8007f1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007f24:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007f28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007f2c:	4642      	mov	r2, r8
 8007f2e:	464b      	mov	r3, r9
 8007f30:	1891      	adds	r1, r2, r2
 8007f32:	61b9      	str	r1, [r7, #24]
 8007f34:	415b      	adcs	r3, r3
 8007f36:	61fb      	str	r3, [r7, #28]
 8007f38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f3c:	4641      	mov	r1, r8
 8007f3e:	1851      	adds	r1, r2, r1
 8007f40:	6139      	str	r1, [r7, #16]
 8007f42:	4649      	mov	r1, r9
 8007f44:	414b      	adcs	r3, r1
 8007f46:	617b      	str	r3, [r7, #20]
 8007f48:	f04f 0200 	mov.w	r2, #0
 8007f4c:	f04f 0300 	mov.w	r3, #0
 8007f50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f54:	4659      	mov	r1, fp
 8007f56:	00cb      	lsls	r3, r1, #3
 8007f58:	4651      	mov	r1, sl
 8007f5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f5e:	4651      	mov	r1, sl
 8007f60:	00ca      	lsls	r2, r1, #3
 8007f62:	4610      	mov	r0, r2
 8007f64:	4619      	mov	r1, r3
 8007f66:	4603      	mov	r3, r0
 8007f68:	4642      	mov	r2, r8
 8007f6a:	189b      	adds	r3, r3, r2
 8007f6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f70:	464b      	mov	r3, r9
 8007f72:	460a      	mov	r2, r1
 8007f74:	eb42 0303 	adc.w	r3, r2, r3
 8007f78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	67bb      	str	r3, [r7, #120]	; 0x78
 8007f86:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007f88:	f04f 0200 	mov.w	r2, #0
 8007f8c:	f04f 0300 	mov.w	r3, #0
 8007f90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007f94:	4649      	mov	r1, r9
 8007f96:	008b      	lsls	r3, r1, #2
 8007f98:	4641      	mov	r1, r8
 8007f9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f9e:	4641      	mov	r1, r8
 8007fa0:	008a      	lsls	r2, r1, #2
 8007fa2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007fa6:	f7f8 fe4f 	bl	8000c48 <__aeabi_uldivmod>
 8007faa:	4602      	mov	r2, r0
 8007fac:	460b      	mov	r3, r1
 8007fae:	4b39      	ldr	r3, [pc, #228]	; (8008094 <UART_SetConfig+0x4e4>)
 8007fb0:	fba3 1302 	umull	r1, r3, r3, r2
 8007fb4:	095b      	lsrs	r3, r3, #5
 8007fb6:	2164      	movs	r1, #100	; 0x64
 8007fb8:	fb01 f303 	mul.w	r3, r1, r3
 8007fbc:	1ad3      	subs	r3, r2, r3
 8007fbe:	011b      	lsls	r3, r3, #4
 8007fc0:	3332      	adds	r3, #50	; 0x32
 8007fc2:	4a34      	ldr	r2, [pc, #208]	; (8008094 <UART_SetConfig+0x4e4>)
 8007fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8007fc8:	095b      	lsrs	r3, r3, #5
 8007fca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007fce:	441c      	add	r4, r3
 8007fd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	673b      	str	r3, [r7, #112]	; 0x70
 8007fd8:	677a      	str	r2, [r7, #116]	; 0x74
 8007fda:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007fde:	4642      	mov	r2, r8
 8007fe0:	464b      	mov	r3, r9
 8007fe2:	1891      	adds	r1, r2, r2
 8007fe4:	60b9      	str	r1, [r7, #8]
 8007fe6:	415b      	adcs	r3, r3
 8007fe8:	60fb      	str	r3, [r7, #12]
 8007fea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007fee:	4641      	mov	r1, r8
 8007ff0:	1851      	adds	r1, r2, r1
 8007ff2:	6039      	str	r1, [r7, #0]
 8007ff4:	4649      	mov	r1, r9
 8007ff6:	414b      	adcs	r3, r1
 8007ff8:	607b      	str	r3, [r7, #4]
 8007ffa:	f04f 0200 	mov.w	r2, #0
 8007ffe:	f04f 0300 	mov.w	r3, #0
 8008002:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008006:	4659      	mov	r1, fp
 8008008:	00cb      	lsls	r3, r1, #3
 800800a:	4651      	mov	r1, sl
 800800c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008010:	4651      	mov	r1, sl
 8008012:	00ca      	lsls	r2, r1, #3
 8008014:	4610      	mov	r0, r2
 8008016:	4619      	mov	r1, r3
 8008018:	4603      	mov	r3, r0
 800801a:	4642      	mov	r2, r8
 800801c:	189b      	adds	r3, r3, r2
 800801e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008020:	464b      	mov	r3, r9
 8008022:	460a      	mov	r2, r1
 8008024:	eb42 0303 	adc.w	r3, r2, r3
 8008028:	66fb      	str	r3, [r7, #108]	; 0x6c
 800802a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	663b      	str	r3, [r7, #96]	; 0x60
 8008034:	667a      	str	r2, [r7, #100]	; 0x64
 8008036:	f04f 0200 	mov.w	r2, #0
 800803a:	f04f 0300 	mov.w	r3, #0
 800803e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008042:	4649      	mov	r1, r9
 8008044:	008b      	lsls	r3, r1, #2
 8008046:	4641      	mov	r1, r8
 8008048:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800804c:	4641      	mov	r1, r8
 800804e:	008a      	lsls	r2, r1, #2
 8008050:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008054:	f7f8 fdf8 	bl	8000c48 <__aeabi_uldivmod>
 8008058:	4602      	mov	r2, r0
 800805a:	460b      	mov	r3, r1
 800805c:	4b0d      	ldr	r3, [pc, #52]	; (8008094 <UART_SetConfig+0x4e4>)
 800805e:	fba3 1302 	umull	r1, r3, r3, r2
 8008062:	095b      	lsrs	r3, r3, #5
 8008064:	2164      	movs	r1, #100	; 0x64
 8008066:	fb01 f303 	mul.w	r3, r1, r3
 800806a:	1ad3      	subs	r3, r2, r3
 800806c:	011b      	lsls	r3, r3, #4
 800806e:	3332      	adds	r3, #50	; 0x32
 8008070:	4a08      	ldr	r2, [pc, #32]	; (8008094 <UART_SetConfig+0x4e4>)
 8008072:	fba2 2303 	umull	r2, r3, r2, r3
 8008076:	095b      	lsrs	r3, r3, #5
 8008078:	f003 020f 	and.w	r2, r3, #15
 800807c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4422      	add	r2, r4
 8008084:	609a      	str	r2, [r3, #8]
}
 8008086:	bf00      	nop
 8008088:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800808c:	46bd      	mov	sp, r7
 800808e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008092:	bf00      	nop
 8008094:	51eb851f 	.word	0x51eb851f

08008098 <__NVIC_SetPriority>:
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	4603      	mov	r3, r0
 80080a0:	6039      	str	r1, [r7, #0]
 80080a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80080a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	db0a      	blt.n	80080c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	b2da      	uxtb	r2, r3
 80080b0:	490c      	ldr	r1, [pc, #48]	; (80080e4 <__NVIC_SetPriority+0x4c>)
 80080b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080b6:	0112      	lsls	r2, r2, #4
 80080b8:	b2d2      	uxtb	r2, r2
 80080ba:	440b      	add	r3, r1
 80080bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80080c0:	e00a      	b.n	80080d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	b2da      	uxtb	r2, r3
 80080c6:	4908      	ldr	r1, [pc, #32]	; (80080e8 <__NVIC_SetPriority+0x50>)
 80080c8:	79fb      	ldrb	r3, [r7, #7]
 80080ca:	f003 030f 	and.w	r3, r3, #15
 80080ce:	3b04      	subs	r3, #4
 80080d0:	0112      	lsls	r2, r2, #4
 80080d2:	b2d2      	uxtb	r2, r2
 80080d4:	440b      	add	r3, r1
 80080d6:	761a      	strb	r2, [r3, #24]
}
 80080d8:	bf00      	nop
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr
 80080e4:	e000e100 	.word	0xe000e100
 80080e8:	e000ed00 	.word	0xe000ed00

080080ec <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80080ec:	b580      	push	{r7, lr}
 80080ee:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80080f0:	4b05      	ldr	r3, [pc, #20]	; (8008108 <SysTick_Handler+0x1c>)
 80080f2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80080f4:	f001 ff16 	bl	8009f24 <xTaskGetSchedulerState>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d001      	beq.n	8008102 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80080fe:	f002 fcfb 	bl	800aaf8 <xPortSysTickHandler>
  }
}
 8008102:	bf00      	nop
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	e000e010 	.word	0xe000e010

0800810c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800810c:	b580      	push	{r7, lr}
 800810e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008110:	2100      	movs	r1, #0
 8008112:	f06f 0004 	mvn.w	r0, #4
 8008116:	f7ff ffbf 	bl	8008098 <__NVIC_SetPriority>
#endif
}
 800811a:	bf00      	nop
 800811c:	bd80      	pop	{r7, pc}
	...

08008120 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008126:	f3ef 8305 	mrs	r3, IPSR
 800812a:	603b      	str	r3, [r7, #0]
  return(result);
 800812c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800812e:	2b00      	cmp	r3, #0
 8008130:	d003      	beq.n	800813a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008132:	f06f 0305 	mvn.w	r3, #5
 8008136:	607b      	str	r3, [r7, #4]
 8008138:	e00c      	b.n	8008154 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800813a:	4b0a      	ldr	r3, [pc, #40]	; (8008164 <osKernelInitialize+0x44>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d105      	bne.n	800814e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008142:	4b08      	ldr	r3, [pc, #32]	; (8008164 <osKernelInitialize+0x44>)
 8008144:	2201      	movs	r2, #1
 8008146:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008148:	2300      	movs	r3, #0
 800814a:	607b      	str	r3, [r7, #4]
 800814c:	e002      	b.n	8008154 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800814e:	f04f 33ff 	mov.w	r3, #4294967295
 8008152:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008154:	687b      	ldr	r3, [r7, #4]
}
 8008156:	4618      	mov	r0, r3
 8008158:	370c      	adds	r7, #12
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	20000618 	.word	0x20000618

08008168 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800816e:	f3ef 8305 	mrs	r3, IPSR
 8008172:	603b      	str	r3, [r7, #0]
  return(result);
 8008174:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008176:	2b00      	cmp	r3, #0
 8008178:	d003      	beq.n	8008182 <osKernelStart+0x1a>
    stat = osErrorISR;
 800817a:	f06f 0305 	mvn.w	r3, #5
 800817e:	607b      	str	r3, [r7, #4]
 8008180:	e010      	b.n	80081a4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008182:	4b0b      	ldr	r3, [pc, #44]	; (80081b0 <osKernelStart+0x48>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	2b01      	cmp	r3, #1
 8008188:	d109      	bne.n	800819e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800818a:	f7ff ffbf 	bl	800810c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800818e:	4b08      	ldr	r3, [pc, #32]	; (80081b0 <osKernelStart+0x48>)
 8008190:	2202      	movs	r2, #2
 8008192:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008194:	f001 faa2 	bl	80096dc <vTaskStartScheduler>
      stat = osOK;
 8008198:	2300      	movs	r3, #0
 800819a:	607b      	str	r3, [r7, #4]
 800819c:	e002      	b.n	80081a4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800819e:	f04f 33ff 	mov.w	r3, #4294967295
 80081a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80081a4:	687b      	ldr	r3, [r7, #4]
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3708      	adds	r7, #8
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	20000618 	.word	0x20000618

080081b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b08e      	sub	sp, #56	; 0x38
 80081b8:	af04      	add	r7, sp, #16
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	60b9      	str	r1, [r7, #8]
 80081be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80081c0:	2300      	movs	r3, #0
 80081c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081c4:	f3ef 8305 	mrs	r3, IPSR
 80081c8:	617b      	str	r3, [r7, #20]
  return(result);
 80081ca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d17f      	bne.n	80082d0 <osThreadNew+0x11c>
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d07c      	beq.n	80082d0 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 80081d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081da:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80081dc:	2318      	movs	r3, #24
 80081de:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80081e0:	2300      	movs	r3, #0
 80081e2:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80081e4:	f04f 33ff 	mov.w	r3, #4294967295
 80081e8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d045      	beq.n	800827c <osThreadNew+0xc8>
      if (attr->name != NULL) {
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d002      	beq.n	80081fe <osThreadNew+0x4a>
        name = attr->name;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	699b      	ldr	r3, [r3, #24]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d002      	beq.n	800820c <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	699b      	ldr	r3, [r3, #24]
 800820a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d008      	beq.n	8008224 <osThreadNew+0x70>
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	2b38      	cmp	r3, #56	; 0x38
 8008216:	d805      	bhi.n	8008224 <osThreadNew+0x70>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	f003 0301 	and.w	r3, r3, #1
 8008220:	2b00      	cmp	r3, #0
 8008222:	d001      	beq.n	8008228 <osThreadNew+0x74>
        return (NULL);
 8008224:	2300      	movs	r3, #0
 8008226:	e054      	b.n	80082d2 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	695b      	ldr	r3, [r3, #20]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d003      	beq.n	8008238 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	695b      	ldr	r3, [r3, #20]
 8008234:	089b      	lsrs	r3, r3, #2
 8008236:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d00e      	beq.n	800825e <osThreadNew+0xaa>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	2bbb      	cmp	r3, #187	; 0xbb
 8008246:	d90a      	bls.n	800825e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800824c:	2b00      	cmp	r3, #0
 800824e:	d006      	beq.n	800825e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	695b      	ldr	r3, [r3, #20]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d002      	beq.n	800825e <osThreadNew+0xaa>
        mem = 1;
 8008258:	2301      	movs	r3, #1
 800825a:	61bb      	str	r3, [r7, #24]
 800825c:	e010      	b.n	8008280 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d10c      	bne.n	8008280 <osThreadNew+0xcc>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d108      	bne.n	8008280 <osThreadNew+0xcc>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	691b      	ldr	r3, [r3, #16]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d104      	bne.n	8008280 <osThreadNew+0xcc>
          mem = 0;
 8008276:	2300      	movs	r3, #0
 8008278:	61bb      	str	r3, [r7, #24]
 800827a:	e001      	b.n	8008280 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800827c:	2300      	movs	r3, #0
 800827e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008280:	69bb      	ldr	r3, [r7, #24]
 8008282:	2b01      	cmp	r3, #1
 8008284:	d110      	bne.n	80082a8 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800828e:	9202      	str	r2, [sp, #8]
 8008290:	9301      	str	r3, [sp, #4]
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	9300      	str	r3, [sp, #0]
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	6a3a      	ldr	r2, [r7, #32]
 800829a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800829c:	68f8      	ldr	r0, [r7, #12]
 800829e:	f001 f841 	bl	8009324 <xTaskCreateStatic>
 80082a2:	4603      	mov	r3, r0
 80082a4:	613b      	str	r3, [r7, #16]
 80082a6:	e013      	b.n	80082d0 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d110      	bne.n	80082d0 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80082ae:	6a3b      	ldr	r3, [r7, #32]
 80082b0:	b29a      	uxth	r2, r3
 80082b2:	f107 0310 	add.w	r3, r7, #16
 80082b6:	9301      	str	r3, [sp, #4]
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	9300      	str	r3, [sp, #0]
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082c0:	68f8      	ldr	r0, [r7, #12]
 80082c2:	f001 f88c 	bl	80093de <xTaskCreate>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d001      	beq.n	80082d0 <osThreadNew+0x11c>
            hTask = NULL;
 80082cc:	2300      	movs	r3, #0
 80082ce:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80082d0:	693b      	ldr	r3, [r7, #16]
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3728      	adds	r7, #40	; 0x28
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
	...

080082dc <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082e2:	f3ef 8305 	mrs	r3, IPSR
 80082e6:	603b      	str	r3, [r7, #0]
  return(result);
 80082e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d003      	beq.n	80082f6 <osThreadYield+0x1a>
    stat = osErrorISR;
 80082ee:	f06f 0305 	mvn.w	r3, #5
 80082f2:	607b      	str	r3, [r7, #4]
 80082f4:	e009      	b.n	800830a <osThreadYield+0x2e>
  } else {
    stat = osOK;
 80082f6:	2300      	movs	r3, #0
 80082f8:	607b      	str	r3, [r7, #4]
    taskYIELD();
 80082fa:	4b07      	ldr	r3, [pc, #28]	; (8008318 <osThreadYield+0x3c>)
 80082fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008300:	601a      	str	r2, [r3, #0]
 8008302:	f3bf 8f4f 	dsb	sy
 8008306:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 800830a:	687b      	ldr	r3, [r7, #4]
}
 800830c:	4618      	mov	r0, r3
 800830e:	370c      	adds	r7, #12
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr
 8008318:	e000ed04 	.word	0xe000ed04

0800831c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008324:	f3ef 8305 	mrs	r3, IPSR
 8008328:	60bb      	str	r3, [r7, #8]
  return(result);
 800832a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800832c:	2b00      	cmp	r3, #0
 800832e:	d003      	beq.n	8008338 <osDelay+0x1c>
    stat = osErrorISR;
 8008330:	f06f 0305 	mvn.w	r3, #5
 8008334:	60fb      	str	r3, [r7, #12]
 8008336:	e007      	b.n	8008348 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008338:	2300      	movs	r3, #0
 800833a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d002      	beq.n	8008348 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f001 f996 	bl	8009674 <vTaskDelay>
    }
  }

  return (stat);
 8008348:	68fb      	ldr	r3, [r7, #12]
}
 800834a:	4618      	mov	r0, r3
 800834c:	3710      	adds	r7, #16
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}

08008352 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008352:	b580      	push	{r7, lr}
 8008354:	b08a      	sub	sp, #40	; 0x28
 8008356:	af02      	add	r7, sp, #8
 8008358:	60f8      	str	r0, [r7, #12]
 800835a:	60b9      	str	r1, [r7, #8]
 800835c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800835e:	2300      	movs	r3, #0
 8008360:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008362:	f3ef 8305 	mrs	r3, IPSR
 8008366:	613b      	str	r3, [r7, #16]
  return(result);
 8008368:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800836a:	2b00      	cmp	r3, #0
 800836c:	d15f      	bne.n	800842e <osMessageQueueNew+0xdc>
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d05c      	beq.n	800842e <osMessageQueueNew+0xdc>
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d059      	beq.n	800842e <osMessageQueueNew+0xdc>
    mem = -1;
 800837a:	f04f 33ff 	mov.w	r3, #4294967295
 800837e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d029      	beq.n	80083da <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d012      	beq.n	80083b4 <osMessageQueueNew+0x62>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	2b4f      	cmp	r3, #79	; 0x4f
 8008394:	d90e      	bls.n	80083b4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00a      	beq.n	80083b4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	695a      	ldr	r2, [r3, #20]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	68b9      	ldr	r1, [r7, #8]
 80083a6:	fb01 f303 	mul.w	r3, r1, r3
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d302      	bcc.n	80083b4 <osMessageQueueNew+0x62>
        mem = 1;
 80083ae:	2301      	movs	r3, #1
 80083b0:	61bb      	str	r3, [r7, #24]
 80083b2:	e014      	b.n	80083de <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d110      	bne.n	80083de <osMessageQueueNew+0x8c>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d10c      	bne.n	80083de <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d108      	bne.n	80083de <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	695b      	ldr	r3, [r3, #20]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d104      	bne.n	80083de <osMessageQueueNew+0x8c>
          mem = 0;
 80083d4:	2300      	movs	r3, #0
 80083d6:	61bb      	str	r3, [r7, #24]
 80083d8:	e001      	b.n	80083de <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80083da:	2300      	movs	r3, #0
 80083dc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80083de:	69bb      	ldr	r3, [r7, #24]
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d10b      	bne.n	80083fc <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	691a      	ldr	r2, [r3, #16]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	2100      	movs	r1, #0
 80083ee:	9100      	str	r1, [sp, #0]
 80083f0:	68b9      	ldr	r1, [r7, #8]
 80083f2:	68f8      	ldr	r0, [r7, #12]
 80083f4:	f000 fa41 	bl	800887a <xQueueGenericCreateStatic>
 80083f8:	61f8      	str	r0, [r7, #28]
 80083fa:	e008      	b.n	800840e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80083fc:	69bb      	ldr	r3, [r7, #24]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d105      	bne.n	800840e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008402:	2200      	movs	r2, #0
 8008404:	68b9      	ldr	r1, [r7, #8]
 8008406:	68f8      	ldr	r0, [r7, #12]
 8008408:	f000 faaf 	bl	800896a <xQueueGenericCreate>
 800840c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d00c      	beq.n	800842e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d003      	beq.n	8008422 <osMessageQueueNew+0xd0>
        name = attr->name;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	617b      	str	r3, [r7, #20]
 8008420:	e001      	b.n	8008426 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008422:	2300      	movs	r3, #0
 8008424:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008426:	6979      	ldr	r1, [r7, #20]
 8008428:	69f8      	ldr	r0, [r7, #28]
 800842a:	f000 ff1d 	bl	8009268 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800842e:	69fb      	ldr	r3, [r7, #28]
}
 8008430:	4618      	mov	r0, r3
 8008432:	3720      	adds	r7, #32
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008438:	b580      	push	{r7, lr}
 800843a:	b088      	sub	sp, #32
 800843c:	af00      	add	r7, sp, #0
 800843e:	60f8      	str	r0, [r7, #12]
 8008440:	60b9      	str	r1, [r7, #8]
 8008442:	603b      	str	r3, [r7, #0]
 8008444:	4613      	mov	r3, r2
 8008446:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800844c:	2300      	movs	r3, #0
 800844e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008450:	f3ef 8305 	mrs	r3, IPSR
 8008454:	617b      	str	r3, [r7, #20]
  return(result);
 8008456:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008458:	2b00      	cmp	r3, #0
 800845a:	d028      	beq.n	80084ae <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800845c:	69bb      	ldr	r3, [r7, #24]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d005      	beq.n	800846e <osMessageQueuePut+0x36>
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d002      	beq.n	800846e <osMessageQueuePut+0x36>
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d003      	beq.n	8008476 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800846e:	f06f 0303 	mvn.w	r3, #3
 8008472:	61fb      	str	r3, [r7, #28]
 8008474:	e038      	b.n	80084e8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008476:	2300      	movs	r3, #0
 8008478:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800847a:	f107 0210 	add.w	r2, r7, #16
 800847e:	2300      	movs	r3, #0
 8008480:	68b9      	ldr	r1, [r7, #8]
 8008482:	69b8      	ldr	r0, [r7, #24]
 8008484:	f000 fbb4 	bl	8008bf0 <xQueueGenericSendFromISR>
 8008488:	4603      	mov	r3, r0
 800848a:	2b01      	cmp	r3, #1
 800848c:	d003      	beq.n	8008496 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800848e:	f06f 0302 	mvn.w	r3, #2
 8008492:	61fb      	str	r3, [r7, #28]
 8008494:	e028      	b.n	80084e8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d025      	beq.n	80084e8 <osMessageQueuePut+0xb0>
 800849c:	4b15      	ldr	r3, [pc, #84]	; (80084f4 <osMessageQueuePut+0xbc>)
 800849e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084a2:	601a      	str	r2, [r3, #0]
 80084a4:	f3bf 8f4f 	dsb	sy
 80084a8:	f3bf 8f6f 	isb	sy
 80084ac:	e01c      	b.n	80084e8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d002      	beq.n	80084ba <osMessageQueuePut+0x82>
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d103      	bne.n	80084c2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80084ba:	f06f 0303 	mvn.w	r3, #3
 80084be:	61fb      	str	r3, [r7, #28]
 80084c0:	e012      	b.n	80084e8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80084c2:	2300      	movs	r3, #0
 80084c4:	683a      	ldr	r2, [r7, #0]
 80084c6:	68b9      	ldr	r1, [r7, #8]
 80084c8:	69b8      	ldr	r0, [r7, #24]
 80084ca:	f000 faab 	bl	8008a24 <xQueueGenericSend>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d009      	beq.n	80084e8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d003      	beq.n	80084e2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80084da:	f06f 0301 	mvn.w	r3, #1
 80084de:	61fb      	str	r3, [r7, #28]
 80084e0:	e002      	b.n	80084e8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80084e2:	f06f 0302 	mvn.w	r3, #2
 80084e6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80084e8:	69fb      	ldr	r3, [r7, #28]
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3720      	adds	r7, #32
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	e000ed04 	.word	0xe000ed04

080084f8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b088      	sub	sp, #32
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	607a      	str	r2, [r7, #4]
 8008504:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800850a:	2300      	movs	r3, #0
 800850c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800850e:	f3ef 8305 	mrs	r3, IPSR
 8008512:	617b      	str	r3, [r7, #20]
  return(result);
 8008514:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008516:	2b00      	cmp	r3, #0
 8008518:	d028      	beq.n	800856c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d005      	beq.n	800852c <osMessageQueueGet+0x34>
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d002      	beq.n	800852c <osMessageQueueGet+0x34>
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d003      	beq.n	8008534 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800852c:	f06f 0303 	mvn.w	r3, #3
 8008530:	61fb      	str	r3, [r7, #28]
 8008532:	e037      	b.n	80085a4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008534:	2300      	movs	r3, #0
 8008536:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008538:	f107 0310 	add.w	r3, r7, #16
 800853c:	461a      	mov	r2, r3
 800853e:	68b9      	ldr	r1, [r7, #8]
 8008540:	69b8      	ldr	r0, [r7, #24]
 8008542:	f000 fcc5 	bl	8008ed0 <xQueueReceiveFromISR>
 8008546:	4603      	mov	r3, r0
 8008548:	2b01      	cmp	r3, #1
 800854a:	d003      	beq.n	8008554 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800854c:	f06f 0302 	mvn.w	r3, #2
 8008550:	61fb      	str	r3, [r7, #28]
 8008552:	e027      	b.n	80085a4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d024      	beq.n	80085a4 <osMessageQueueGet+0xac>
 800855a:	4b15      	ldr	r3, [pc, #84]	; (80085b0 <osMessageQueueGet+0xb8>)
 800855c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008560:	601a      	str	r2, [r3, #0]
 8008562:	f3bf 8f4f 	dsb	sy
 8008566:	f3bf 8f6f 	isb	sy
 800856a:	e01b      	b.n	80085a4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d002      	beq.n	8008578 <osMessageQueueGet+0x80>
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d103      	bne.n	8008580 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008578:	f06f 0303 	mvn.w	r3, #3
 800857c:	61fb      	str	r3, [r7, #28]
 800857e:	e011      	b.n	80085a4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008580:	683a      	ldr	r2, [r7, #0]
 8008582:	68b9      	ldr	r1, [r7, #8]
 8008584:	69b8      	ldr	r0, [r7, #24]
 8008586:	f000 fbcf 	bl	8008d28 <xQueueReceive>
 800858a:	4603      	mov	r3, r0
 800858c:	2b01      	cmp	r3, #1
 800858e:	d009      	beq.n	80085a4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d003      	beq.n	800859e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008596:	f06f 0301 	mvn.w	r3, #1
 800859a:	61fb      	str	r3, [r7, #28]
 800859c:	e002      	b.n	80085a4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800859e:	f06f 0302 	mvn.w	r3, #2
 80085a2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80085a4:	69fb      	ldr	r3, [r7, #28]
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3720      	adds	r7, #32
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	e000ed04 	.word	0xe000ed04

080085b4 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b086      	sub	sp, #24
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d102      	bne.n	80085cc <osMessageQueueGetCount+0x18>
    count = 0U;
 80085c6:	2300      	movs	r3, #0
 80085c8:	617b      	str	r3, [r7, #20]
 80085ca:	e00e      	b.n	80085ea <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085cc:	f3ef 8305 	mrs	r3, IPSR
 80085d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80085d2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d004      	beq.n	80085e2 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80085d8:	6938      	ldr	r0, [r7, #16]
 80085da:	f000 fd17 	bl	800900c <uxQueueMessagesWaitingFromISR>
 80085de:	6178      	str	r0, [r7, #20]
 80085e0:	e003      	b.n	80085ea <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80085e2:	6938      	ldr	r0, [r7, #16]
 80085e4:	f000 fcf4 	bl	8008fd0 <uxQueueMessagesWaiting>
 80085e8:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 80085ea:	697b      	ldr	r3, [r7, #20]
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3718      	adds	r7, #24
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80085f4:	b480      	push	{r7}
 80085f6:	b085      	sub	sp, #20
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	60b9      	str	r1, [r7, #8]
 80085fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	4a07      	ldr	r2, [pc, #28]	; (8008620 <vApplicationGetIdleTaskMemory+0x2c>)
 8008604:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	4a06      	ldr	r2, [pc, #24]	; (8008624 <vApplicationGetIdleTaskMemory+0x30>)
 800860a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008612:	601a      	str	r2, [r3, #0]
}
 8008614:	bf00      	nop
 8008616:	3714      	adds	r7, #20
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr
 8008620:	2000061c 	.word	0x2000061c
 8008624:	200006d8 	.word	0x200006d8

08008628 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008628:	b480      	push	{r7}
 800862a:	b085      	sub	sp, #20
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	4a07      	ldr	r2, [pc, #28]	; (8008654 <vApplicationGetTimerTaskMemory+0x2c>)
 8008638:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	4a06      	ldr	r2, [pc, #24]	; (8008658 <vApplicationGetTimerTaskMemory+0x30>)
 800863e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008646:	601a      	str	r2, [r3, #0]
}
 8008648:	bf00      	nop
 800864a:	3714      	adds	r7, #20
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr
 8008654:	20000ad8 	.word	0x20000ad8
 8008658:	20000b94 	.word	0x20000b94

0800865c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f103 0208 	add.w	r2, r3, #8
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f04f 32ff 	mov.w	r2, #4294967295
 8008674:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f103 0208 	add.w	r2, r3, #8
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f103 0208 	add.w	r2, r3, #8
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2200      	movs	r2, #0
 800868e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008690:	bf00      	nop
 8008692:	370c      	adds	r7, #12
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80086aa:	bf00      	nop
 80086ac:	370c      	adds	r7, #12
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr

080086b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80086b6:	b480      	push	{r7}
 80086b8:	b085      	sub	sp, #20
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
 80086be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	689a      	ldr	r2, [r3, #8]
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	683a      	ldr	r2, [r7, #0]
 80086da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	683a      	ldr	r2, [r7, #0]
 80086e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	1c5a      	adds	r2, r3, #1
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	601a      	str	r2, [r3, #0]
}
 80086f2:	bf00      	nop
 80086f4:	3714      	adds	r7, #20
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr

080086fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80086fe:	b480      	push	{r7}
 8008700:	b085      	sub	sp, #20
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
 8008706:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008714:	d103      	bne.n	800871e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	691b      	ldr	r3, [r3, #16]
 800871a:	60fb      	str	r3, [r7, #12]
 800871c:	e00c      	b.n	8008738 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	3308      	adds	r3, #8
 8008722:	60fb      	str	r3, [r7, #12]
 8008724:	e002      	b.n	800872c <vListInsert+0x2e>
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	60fb      	str	r3, [r7, #12]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	68ba      	ldr	r2, [r7, #8]
 8008734:	429a      	cmp	r2, r3
 8008736:	d2f6      	bcs.n	8008726 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	685a      	ldr	r2, [r3, #4]
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	683a      	ldr	r2, [r7, #0]
 8008746:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	68fa      	ldr	r2, [r7, #12]
 800874c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	683a      	ldr	r2, [r7, #0]
 8008752:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	1c5a      	adds	r2, r3, #1
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	601a      	str	r2, [r3, #0]
}
 8008764:	bf00      	nop
 8008766:	3714      	adds	r7, #20
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008770:	b480      	push	{r7}
 8008772:	b085      	sub	sp, #20
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	691b      	ldr	r3, [r3, #16]
 800877c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	6892      	ldr	r2, [r2, #8]
 8008786:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	6852      	ldr	r2, [r2, #4]
 8008790:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	429a      	cmp	r2, r3
 800879a:	d103      	bne.n	80087a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	689a      	ldr	r2, [r3, #8]
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	1e5a      	subs	r2, r3, #1
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3714      	adds	r7, #20
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d10a      	bne.n	80087ee <xQueueGenericReset+0x2a>
	__asm volatile
 80087d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087dc:	f383 8811 	msr	BASEPRI, r3
 80087e0:	f3bf 8f6f 	isb	sy
 80087e4:	f3bf 8f4f 	dsb	sy
 80087e8:	60bb      	str	r3, [r7, #8]
}
 80087ea:	bf00      	nop
 80087ec:	e7fe      	b.n	80087ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80087ee:	f002 f8f1 	bl	800a9d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087fa:	68f9      	ldr	r1, [r7, #12]
 80087fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80087fe:	fb01 f303 	mul.w	r3, r1, r3
 8008802:	441a      	add	r2, r3
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2200      	movs	r2, #0
 800880c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800881e:	3b01      	subs	r3, #1
 8008820:	68f9      	ldr	r1, [r7, #12]
 8008822:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008824:	fb01 f303 	mul.w	r3, r1, r3
 8008828:	441a      	add	r2, r3
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	22ff      	movs	r2, #255	; 0xff
 8008832:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	22ff      	movs	r2, #255	; 0xff
 800883a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d109      	bne.n	8008858 <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d00f      	beq.n	800886c <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	3310      	adds	r3, #16
 8008850:	4618      	mov	r0, r3
 8008852:	f001 f9ab 	bl	8009bac <xTaskRemoveFromEventList>
 8008856:	e009      	b.n	800886c <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	3310      	adds	r3, #16
 800885c:	4618      	mov	r0, r3
 800885e:	f7ff fefd 	bl	800865c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	3324      	adds	r3, #36	; 0x24
 8008866:	4618      	mov	r0, r3
 8008868:	f7ff fef8 	bl	800865c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800886c:	f002 f8e2 	bl	800aa34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008870:	2301      	movs	r3, #1
}
 8008872:	4618      	mov	r0, r3
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800887a:	b580      	push	{r7, lr}
 800887c:	b08e      	sub	sp, #56	; 0x38
 800887e:	af02      	add	r7, sp, #8
 8008880:	60f8      	str	r0, [r7, #12]
 8008882:	60b9      	str	r1, [r7, #8]
 8008884:	607a      	str	r2, [r7, #4]
 8008886:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d10a      	bne.n	80088a4 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800888e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008892:	f383 8811 	msr	BASEPRI, r3
 8008896:	f3bf 8f6f 	isb	sy
 800889a:	f3bf 8f4f 	dsb	sy
 800889e:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80088a0:	bf00      	nop
 80088a2:	e7fe      	b.n	80088a2 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d10a      	bne.n	80088c0 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80088aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ae:	f383 8811 	msr	BASEPRI, r3
 80088b2:	f3bf 8f6f 	isb	sy
 80088b6:	f3bf 8f4f 	dsb	sy
 80088ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80088bc:	bf00      	nop
 80088be:	e7fe      	b.n	80088be <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d002      	beq.n	80088cc <xQueueGenericCreateStatic+0x52>
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d001      	beq.n	80088d0 <xQueueGenericCreateStatic+0x56>
 80088cc:	2301      	movs	r3, #1
 80088ce:	e000      	b.n	80088d2 <xQueueGenericCreateStatic+0x58>
 80088d0:	2300      	movs	r3, #0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d10a      	bne.n	80088ec <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80088d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088da:	f383 8811 	msr	BASEPRI, r3
 80088de:	f3bf 8f6f 	isb	sy
 80088e2:	f3bf 8f4f 	dsb	sy
 80088e6:	623b      	str	r3, [r7, #32]
}
 80088e8:	bf00      	nop
 80088ea:	e7fe      	b.n	80088ea <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d102      	bne.n	80088f8 <xQueueGenericCreateStatic+0x7e>
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d101      	bne.n	80088fc <xQueueGenericCreateStatic+0x82>
 80088f8:	2301      	movs	r3, #1
 80088fa:	e000      	b.n	80088fe <xQueueGenericCreateStatic+0x84>
 80088fc:	2300      	movs	r3, #0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d10a      	bne.n	8008918 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008906:	f383 8811 	msr	BASEPRI, r3
 800890a:	f3bf 8f6f 	isb	sy
 800890e:	f3bf 8f4f 	dsb	sy
 8008912:	61fb      	str	r3, [r7, #28]
}
 8008914:	bf00      	nop
 8008916:	e7fe      	b.n	8008916 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008918:	2350      	movs	r3, #80	; 0x50
 800891a:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	2b50      	cmp	r3, #80	; 0x50
 8008920:	d00a      	beq.n	8008938 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008926:	f383 8811 	msr	BASEPRI, r3
 800892a:	f3bf 8f6f 	isb	sy
 800892e:	f3bf 8f4f 	dsb	sy
 8008932:	61bb      	str	r3, [r7, #24]
}
 8008934:	bf00      	nop
 8008936:	e7fe      	b.n	8008936 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008938:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800893e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008940:	2b00      	cmp	r3, #0
 8008942:	d00d      	beq.n	8008960 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008946:	2201      	movs	r2, #1
 8008948:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800894c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008952:	9300      	str	r3, [sp, #0]
 8008954:	4613      	mov	r3, r2
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	68b9      	ldr	r1, [r7, #8]
 800895a:	68f8      	ldr	r0, [r7, #12]
 800895c:	f000 f83f 	bl	80089de <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008962:	4618      	mov	r0, r3
 8008964:	3730      	adds	r7, #48	; 0x30
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800896a:	b580      	push	{r7, lr}
 800896c:	b08a      	sub	sp, #40	; 0x28
 800896e:	af02      	add	r7, sp, #8
 8008970:	60f8      	str	r0, [r7, #12]
 8008972:	60b9      	str	r1, [r7, #8]
 8008974:	4613      	mov	r3, r2
 8008976:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d10a      	bne.n	8008994 <xQueueGenericCreate+0x2a>
	__asm volatile
 800897e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008982:	f383 8811 	msr	BASEPRI, r3
 8008986:	f3bf 8f6f 	isb	sy
 800898a:	f3bf 8f4f 	dsb	sy
 800898e:	613b      	str	r3, [r7, #16]
}
 8008990:	bf00      	nop
 8008992:	e7fe      	b.n	8008992 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	68ba      	ldr	r2, [r7, #8]
 8008998:	fb02 f303 	mul.w	r3, r2, r3
 800899c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	3350      	adds	r3, #80	; 0x50
 80089a2:	4618      	mov	r0, r3
 80089a4:	f002 f938 	bl	800ac18 <pvPortMalloc>
 80089a8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d011      	beq.n	80089d4 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80089b0:	69bb      	ldr	r3, [r7, #24]
 80089b2:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	3350      	adds	r3, #80	; 0x50
 80089b8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80089ba:	69bb      	ldr	r3, [r7, #24]
 80089bc:	2200      	movs	r2, #0
 80089be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80089c2:	79fa      	ldrb	r2, [r7, #7]
 80089c4:	69bb      	ldr	r3, [r7, #24]
 80089c6:	9300      	str	r3, [sp, #0]
 80089c8:	4613      	mov	r3, r2
 80089ca:	697a      	ldr	r2, [r7, #20]
 80089cc:	68b9      	ldr	r1, [r7, #8]
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	f000 f805 	bl	80089de <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80089d4:	69bb      	ldr	r3, [r7, #24]
	}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3720      	adds	r7, #32
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80089de:	b580      	push	{r7, lr}
 80089e0:	b084      	sub	sp, #16
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	60f8      	str	r0, [r7, #12]
 80089e6:	60b9      	str	r1, [r7, #8]
 80089e8:	607a      	str	r2, [r7, #4]
 80089ea:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d103      	bne.n	80089fa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	69ba      	ldr	r2, [r7, #24]
 80089f6:	601a      	str	r2, [r3, #0]
 80089f8:	e002      	b.n	8008a00 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008a00:	69bb      	ldr	r3, [r7, #24]
 8008a02:	68fa      	ldr	r2, [r7, #12]
 8008a04:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008a06:	69bb      	ldr	r3, [r7, #24]
 8008a08:	68ba      	ldr	r2, [r7, #8]
 8008a0a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008a0c:	2101      	movs	r1, #1
 8008a0e:	69b8      	ldr	r0, [r7, #24]
 8008a10:	f7ff fed8 	bl	80087c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008a14:	69bb      	ldr	r3, [r7, #24]
 8008a16:	78fa      	ldrb	r2, [r7, #3]
 8008a18:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008a1c:	bf00      	nop
 8008a1e:	3710      	adds	r7, #16
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b08e      	sub	sp, #56	; 0x38
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	607a      	str	r2, [r7, #4]
 8008a30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008a32:	2300      	movs	r3, #0
 8008a34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d10a      	bne.n	8008a56 <xQueueGenericSend+0x32>
	__asm volatile
 8008a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a44:	f383 8811 	msr	BASEPRI, r3
 8008a48:	f3bf 8f6f 	isb	sy
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008a52:	bf00      	nop
 8008a54:	e7fe      	b.n	8008a54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d103      	bne.n	8008a64 <xQueueGenericSend+0x40>
 8008a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d101      	bne.n	8008a68 <xQueueGenericSend+0x44>
 8008a64:	2301      	movs	r3, #1
 8008a66:	e000      	b.n	8008a6a <xQueueGenericSend+0x46>
 8008a68:	2300      	movs	r3, #0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d10a      	bne.n	8008a84 <xQueueGenericSend+0x60>
	__asm volatile
 8008a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a72:	f383 8811 	msr	BASEPRI, r3
 8008a76:	f3bf 8f6f 	isb	sy
 8008a7a:	f3bf 8f4f 	dsb	sy
 8008a7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008a80:	bf00      	nop
 8008a82:	e7fe      	b.n	8008a82 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	2b02      	cmp	r3, #2
 8008a88:	d103      	bne.n	8008a92 <xQueueGenericSend+0x6e>
 8008a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d101      	bne.n	8008a96 <xQueueGenericSend+0x72>
 8008a92:	2301      	movs	r3, #1
 8008a94:	e000      	b.n	8008a98 <xQueueGenericSend+0x74>
 8008a96:	2300      	movs	r3, #0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d10a      	bne.n	8008ab2 <xQueueGenericSend+0x8e>
	__asm volatile
 8008a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa0:	f383 8811 	msr	BASEPRI, r3
 8008aa4:	f3bf 8f6f 	isb	sy
 8008aa8:	f3bf 8f4f 	dsb	sy
 8008aac:	623b      	str	r3, [r7, #32]
}
 8008aae:	bf00      	nop
 8008ab0:	e7fe      	b.n	8008ab0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ab2:	f001 fa37 	bl	8009f24 <xTaskGetSchedulerState>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d102      	bne.n	8008ac2 <xQueueGenericSend+0x9e>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d101      	bne.n	8008ac6 <xQueueGenericSend+0xa2>
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e000      	b.n	8008ac8 <xQueueGenericSend+0xa4>
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d10a      	bne.n	8008ae2 <xQueueGenericSend+0xbe>
	__asm volatile
 8008acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad0:	f383 8811 	msr	BASEPRI, r3
 8008ad4:	f3bf 8f6f 	isb	sy
 8008ad8:	f3bf 8f4f 	dsb	sy
 8008adc:	61fb      	str	r3, [r7, #28]
}
 8008ade:	bf00      	nop
 8008ae0:	e7fe      	b.n	8008ae0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ae2:	f001 ff77 	bl	800a9d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d302      	bcc.n	8008af8 <xQueueGenericSend+0xd4>
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	d112      	bne.n	8008b1e <xQueueGenericSend+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008af8:	683a      	ldr	r2, [r7, #0]
 8008afa:	68b9      	ldr	r1, [r7, #8]
 8008afc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008afe:	f000 faa3 	bl	8009048 <prvCopyDataToQueue>
 8008b02:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d004      	beq.n	8008b16 <xQueueGenericSend+0xf2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0e:	3324      	adds	r3, #36	; 0x24
 8008b10:	4618      	mov	r0, r3
 8008b12:	f001 f84b 	bl	8009bac <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008b16:	f001 ff8d 	bl	800aa34 <vPortExitCritical>
				return pdPASS;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e062      	b.n	8008be4 <xQueueGenericSend+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d103      	bne.n	8008b2c <xQueueGenericSend+0x108>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b24:	f001 ff86 	bl	800aa34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	e05b      	b.n	8008be4 <xQueueGenericSend+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d106      	bne.n	8008b40 <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b32:	f107 0314 	add.w	r3, r7, #20
 8008b36:	4618      	mov	r0, r3
 8008b38:	f001 f89c 	bl	8009c74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b40:	f001 ff78 	bl	800aa34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b44:	f000 fe3a 	bl	80097bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b48:	f001 ff44 	bl	800a9d4 <vPortEnterCritical>
 8008b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b52:	b25b      	sxtb	r3, r3
 8008b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b58:	d103      	bne.n	8008b62 <xQueueGenericSend+0x13e>
 8008b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b68:	b25b      	sxtb	r3, r3
 8008b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b6e:	d103      	bne.n	8008b78 <xQueueGenericSend+0x154>
 8008b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b72:	2200      	movs	r2, #0
 8008b74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b78:	f001 ff5c 	bl	800aa34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b7c:	1d3a      	adds	r2, r7, #4
 8008b7e:	f107 0314 	add.w	r3, r7, #20
 8008b82:	4611      	mov	r1, r2
 8008b84:	4618      	mov	r0, r3
 8008b86:	f001 f88b 	bl	8009ca0 <xTaskCheckForTimeOut>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d123      	bne.n	8008bd8 <xQueueGenericSend+0x1b4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008b90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b92:	f000 fb51 	bl	8009238 <prvIsQueueFull>
 8008b96:	4603      	mov	r3, r0
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d017      	beq.n	8008bcc <xQueueGenericSend+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9e:	3310      	adds	r3, #16
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	4611      	mov	r1, r2
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f000 ffb1 	bl	8009b0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008baa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008bac:	f000 fadc 	bl	8009168 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008bb0:	f000 fe12 	bl	80097d8 <xTaskResumeAll>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d193      	bne.n	8008ae2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008bba:	4b0c      	ldr	r3, [pc, #48]	; (8008bec <xQueueGenericSend+0x1c8>)
 8008bbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bc0:	601a      	str	r2, [r3, #0]
 8008bc2:	f3bf 8f4f 	dsb	sy
 8008bc6:	f3bf 8f6f 	isb	sy
 8008bca:	e78a      	b.n	8008ae2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008bcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008bce:	f000 facb 	bl	8009168 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008bd2:	f000 fe01 	bl	80097d8 <xTaskResumeAll>
 8008bd6:	e784      	b.n	8008ae2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008bd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008bda:	f000 fac5 	bl	8009168 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008bde:	f000 fdfb 	bl	80097d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008be2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3738      	adds	r7, #56	; 0x38
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	e000ed04 	.word	0xe000ed04

08008bf0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b090      	sub	sp, #64	; 0x40
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	60f8      	str	r0, [r7, #12]
 8008bf8:	60b9      	str	r1, [r7, #8]
 8008bfa:	607a      	str	r2, [r7, #4]
 8008bfc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d10a      	bne.n	8008c1e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c0c:	f383 8811 	msr	BASEPRI, r3
 8008c10:	f3bf 8f6f 	isb	sy
 8008c14:	f3bf 8f4f 	dsb	sy
 8008c18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008c1a:	bf00      	nop
 8008c1c:	e7fe      	b.n	8008c1c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d103      	bne.n	8008c2c <xQueueGenericSendFromISR+0x3c>
 8008c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d101      	bne.n	8008c30 <xQueueGenericSendFromISR+0x40>
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e000      	b.n	8008c32 <xQueueGenericSendFromISR+0x42>
 8008c30:	2300      	movs	r3, #0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d10a      	bne.n	8008c4c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c3a:	f383 8811 	msr	BASEPRI, r3
 8008c3e:	f3bf 8f6f 	isb	sy
 8008c42:	f3bf 8f4f 	dsb	sy
 8008c46:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008c48:	bf00      	nop
 8008c4a:	e7fe      	b.n	8008c4a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	2b02      	cmp	r3, #2
 8008c50:	d103      	bne.n	8008c5a <xQueueGenericSendFromISR+0x6a>
 8008c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d101      	bne.n	8008c5e <xQueueGenericSendFromISR+0x6e>
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e000      	b.n	8008c60 <xQueueGenericSendFromISR+0x70>
 8008c5e:	2300      	movs	r3, #0
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d10a      	bne.n	8008c7a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c68:	f383 8811 	msr	BASEPRI, r3
 8008c6c:	f3bf 8f6f 	isb	sy
 8008c70:	f3bf 8f4f 	dsb	sy
 8008c74:	623b      	str	r3, [r7, #32]
}
 8008c76:	bf00      	nop
 8008c78:	e7fe      	b.n	8008c78 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c7a:	f001 ff8d 	bl	800ab98 <vPortValidateInterruptPriority>
	__asm volatile
 8008c7e:	f3ef 8211 	mrs	r2, BASEPRI
 8008c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c86:	f383 8811 	msr	BASEPRI, r3
 8008c8a:	f3bf 8f6f 	isb	sy
 8008c8e:	f3bf 8f4f 	dsb	sy
 8008c92:	61fa      	str	r2, [r7, #28]
 8008c94:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8008c96:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c98:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d302      	bcc.n	8008cac <xQueueGenericSendFromISR+0xbc>
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	2b02      	cmp	r3, #2
 8008caa:	d12f      	bne.n	8008d0c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cba:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008cbc:	683a      	ldr	r2, [r7, #0]
 8008cbe:	68b9      	ldr	r1, [r7, #8]
 8008cc0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008cc2:	f000 f9c1 	bl	8009048 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008cc6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cce:	d112      	bne.n	8008cf6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d016      	beq.n	8008d06 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cda:	3324      	adds	r3, #36	; 0x24
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f000 ff65 	bl	8009bac <xTaskRemoveFromEventList>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d00e      	beq.n	8008d06 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00b      	beq.n	8008d06 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	601a      	str	r2, [r3, #0]
 8008cf4:	e007      	b.n	8008d06 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008cf6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	b25a      	sxtb	r2, r3
 8008d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008d06:	2301      	movs	r3, #1
 8008d08:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008d0a:	e001      	b.n	8008d10 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d12:	617b      	str	r3, [r7, #20]
	__asm volatile
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	f383 8811 	msr	BASEPRI, r3
}
 8008d1a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3740      	adds	r7, #64	; 0x40
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
	...

08008d28 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b08c      	sub	sp, #48	; 0x30
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008d34:	2300      	movs	r3, #0
 8008d36:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d10a      	bne.n	8008d58 <xQueueReceive+0x30>
	__asm volatile
 8008d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d46:	f383 8811 	msr	BASEPRI, r3
 8008d4a:	f3bf 8f6f 	isb	sy
 8008d4e:	f3bf 8f4f 	dsb	sy
 8008d52:	623b      	str	r3, [r7, #32]
}
 8008d54:	bf00      	nop
 8008d56:	e7fe      	b.n	8008d56 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d103      	bne.n	8008d66 <xQueueReceive+0x3e>
 8008d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d101      	bne.n	8008d6a <xQueueReceive+0x42>
 8008d66:	2301      	movs	r3, #1
 8008d68:	e000      	b.n	8008d6c <xQueueReceive+0x44>
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d10a      	bne.n	8008d86 <xQueueReceive+0x5e>
	__asm volatile
 8008d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d74:	f383 8811 	msr	BASEPRI, r3
 8008d78:	f3bf 8f6f 	isb	sy
 8008d7c:	f3bf 8f4f 	dsb	sy
 8008d80:	61fb      	str	r3, [r7, #28]
}
 8008d82:	bf00      	nop
 8008d84:	e7fe      	b.n	8008d84 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d86:	f001 f8cd 	bl	8009f24 <xTaskGetSchedulerState>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d102      	bne.n	8008d96 <xQueueReceive+0x6e>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d101      	bne.n	8008d9a <xQueueReceive+0x72>
 8008d96:	2301      	movs	r3, #1
 8008d98:	e000      	b.n	8008d9c <xQueueReceive+0x74>
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d10a      	bne.n	8008db6 <xQueueReceive+0x8e>
	__asm volatile
 8008da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da4:	f383 8811 	msr	BASEPRI, r3
 8008da8:	f3bf 8f6f 	isb	sy
 8008dac:	f3bf 8f4f 	dsb	sy
 8008db0:	61bb      	str	r3, [r7, #24]
}
 8008db2:	bf00      	nop
 8008db4:	e7fe      	b.n	8008db4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008db6:	f001 fe0d 	bl	800a9d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dbe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d014      	beq.n	8008df0 <xQueueReceive+0xc8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008dc6:	68b9      	ldr	r1, [r7, #8]
 8008dc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dca:	f000 f9a7 	bl	800911c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd0:	1e5a      	subs	r2, r3, #1
 8008dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd8:	691b      	ldr	r3, [r3, #16]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d004      	beq.n	8008de8 <xQueueReceive+0xc0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de0:	3310      	adds	r3, #16
 8008de2:	4618      	mov	r0, r3
 8008de4:	f000 fee2 	bl	8009bac <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008de8:	f001 fe24 	bl	800aa34 <vPortExitCritical>
				return pdPASS;
 8008dec:	2301      	movs	r3, #1
 8008dee:	e069      	b.n	8008ec4 <xQueueReceive+0x19c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d103      	bne.n	8008dfe <xQueueReceive+0xd6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008df6:	f001 fe1d 	bl	800aa34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	e062      	b.n	8008ec4 <xQueueReceive+0x19c>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d106      	bne.n	8008e12 <xQueueReceive+0xea>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e04:	f107 0310 	add.w	r3, r7, #16
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f000 ff33 	bl	8009c74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e12:	f001 fe0f 	bl	800aa34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e16:	f000 fcd1 	bl	80097bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e1a:	f001 fddb 	bl	800a9d4 <vPortEnterCritical>
 8008e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e24:	b25b      	sxtb	r3, r3
 8008e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e2a:	d103      	bne.n	8008e34 <xQueueReceive+0x10c>
 8008e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e3a:	b25b      	sxtb	r3, r3
 8008e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e40:	d103      	bne.n	8008e4a <xQueueReceive+0x122>
 8008e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e44:	2200      	movs	r2, #0
 8008e46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e4a:	f001 fdf3 	bl	800aa34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e4e:	1d3a      	adds	r2, r7, #4
 8008e50:	f107 0310 	add.w	r3, r7, #16
 8008e54:	4611      	mov	r1, r2
 8008e56:	4618      	mov	r0, r3
 8008e58:	f000 ff22 	bl	8009ca0 <xTaskCheckForTimeOut>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d123      	bne.n	8008eaa <xQueueReceive+0x182>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e64:	f000 f9d2 	bl	800920c <prvIsQueueEmpty>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d017      	beq.n	8008e9e <xQueueReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e70:	3324      	adds	r3, #36	; 0x24
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	4611      	mov	r1, r2
 8008e76:	4618      	mov	r0, r3
 8008e78:	f000 fe48 	bl	8009b0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e7e:	f000 f973 	bl	8009168 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e82:	f000 fca9 	bl	80097d8 <xTaskResumeAll>
 8008e86:	4603      	mov	r3, r0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d194      	bne.n	8008db6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008e8c:	4b0f      	ldr	r3, [pc, #60]	; (8008ecc <xQueueReceive+0x1a4>)
 8008e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e92:	601a      	str	r2, [r3, #0]
 8008e94:	f3bf 8f4f 	dsb	sy
 8008e98:	f3bf 8f6f 	isb	sy
 8008e9c:	e78b      	b.n	8008db6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008e9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ea0:	f000 f962 	bl	8009168 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ea4:	f000 fc98 	bl	80097d8 <xTaskResumeAll>
 8008ea8:	e785      	b.n	8008db6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008eaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008eac:	f000 f95c 	bl	8009168 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008eb0:	f000 fc92 	bl	80097d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008eb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008eb6:	f000 f9a9 	bl	800920c <prvIsQueueEmpty>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	f43f af7a 	beq.w	8008db6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008ec2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3730      	adds	r7, #48	; 0x30
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}
 8008ecc:	e000ed04 	.word	0xe000ed04

08008ed0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b08e      	sub	sp, #56	; 0x38
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	60f8      	str	r0, [r7, #12]
 8008ed8:	60b9      	str	r1, [r7, #8]
 8008eda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d10a      	bne.n	8008efc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eea:	f383 8811 	msr	BASEPRI, r3
 8008eee:	f3bf 8f6f 	isb	sy
 8008ef2:	f3bf 8f4f 	dsb	sy
 8008ef6:	623b      	str	r3, [r7, #32]
}
 8008ef8:	bf00      	nop
 8008efa:	e7fe      	b.n	8008efa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d103      	bne.n	8008f0a <xQueueReceiveFromISR+0x3a>
 8008f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d101      	bne.n	8008f0e <xQueueReceiveFromISR+0x3e>
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e000      	b.n	8008f10 <xQueueReceiveFromISR+0x40>
 8008f0e:	2300      	movs	r3, #0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d10a      	bne.n	8008f2a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f18:	f383 8811 	msr	BASEPRI, r3
 8008f1c:	f3bf 8f6f 	isb	sy
 8008f20:	f3bf 8f4f 	dsb	sy
 8008f24:	61fb      	str	r3, [r7, #28]
}
 8008f26:	bf00      	nop
 8008f28:	e7fe      	b.n	8008f28 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008f2a:	f001 fe35 	bl	800ab98 <vPortValidateInterruptPriority>
	__asm volatile
 8008f2e:	f3ef 8211 	mrs	r2, BASEPRI
 8008f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f36:	f383 8811 	msr	BASEPRI, r3
 8008f3a:	f3bf 8f6f 	isb	sy
 8008f3e:	f3bf 8f4f 	dsb	sy
 8008f42:	61ba      	str	r2, [r7, #24]
 8008f44:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008f46:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008f48:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f4e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d02f      	beq.n	8008fb6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008f60:	68b9      	ldr	r1, [r7, #8]
 8008f62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f64:	f000 f8da 	bl	800911c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f6a:	1e5a      	subs	r2, r3, #1
 8008f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008f70:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f78:	d112      	bne.n	8008fa0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7c:	691b      	ldr	r3, [r3, #16]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d016      	beq.n	8008fb0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f84:	3310      	adds	r3, #16
 8008f86:	4618      	mov	r0, r3
 8008f88:	f000 fe10 	bl	8009bac <xTaskRemoveFromEventList>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d00e      	beq.n	8008fb0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00b      	beq.n	8008fb0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	601a      	str	r2, [r3, #0]
 8008f9e:	e007      	b.n	8008fb0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	b2db      	uxtb	r3, r3
 8008fa8:	b25a      	sxtb	r2, r3
 8008faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	637b      	str	r3, [r7, #52]	; 0x34
 8008fb4:	e001      	b.n	8008fba <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8008fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fbc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	f383 8811 	msr	BASEPRI, r3
}
 8008fc4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3738      	adds	r7, #56	; 0x38
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d10a      	bne.n	8008ff4 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8008fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe2:	f383 8811 	msr	BASEPRI, r3
 8008fe6:	f3bf 8f6f 	isb	sy
 8008fea:	f3bf 8f4f 	dsb	sy
 8008fee:	60bb      	str	r3, [r7, #8]
}
 8008ff0:	bf00      	nop
 8008ff2:	e7fe      	b.n	8008ff2 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8008ff4:	f001 fcee 	bl	800a9d4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ffc:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8008ffe:	f001 fd19 	bl	800aa34 <vPortExitCritical>

	return uxReturn;
 8009002:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009004:	4618      	mov	r0, r3
 8009006:	3710      	adds	r7, #16
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800900c:	b480      	push	{r7}
 800900e:	b087      	sub	sp, #28
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d10a      	bne.n	8009034 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800901e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009022:	f383 8811 	msr	BASEPRI, r3
 8009026:	f3bf 8f6f 	isb	sy
 800902a:	f3bf 8f4f 	dsb	sy
 800902e:	60fb      	str	r3, [r7, #12]
}
 8009030:	bf00      	nop
 8009032:	e7fe      	b.n	8009032 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009038:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800903a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800903c:	4618      	mov	r0, r3
 800903e:	371c      	adds	r7, #28
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b086      	sub	sp, #24
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009054:	2300      	movs	r3, #0
 8009056:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800905c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009062:	2b00      	cmp	r3, #0
 8009064:	d10d      	bne.n	8009082 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d14d      	bne.n	800910a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	4618      	mov	r0, r3
 8009074:	f000 ff74 	bl	8009f60 <xTaskPriorityDisinherit>
 8009078:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2200      	movs	r2, #0
 800907e:	609a      	str	r2, [r3, #8]
 8009080:	e043      	b.n	800910a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d119      	bne.n	80090bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	6858      	ldr	r0, [r3, #4]
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009090:	461a      	mov	r2, r3
 8009092:	68b9      	ldr	r1, [r7, #8]
 8009094:	f002 f8f4 	bl	800b280 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	685a      	ldr	r2, [r3, #4]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090a0:	441a      	add	r2, r3
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	685a      	ldr	r2, [r3, #4]
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d32b      	bcc.n	800910a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	605a      	str	r2, [r3, #4]
 80090ba:	e026      	b.n	800910a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	68d8      	ldr	r0, [r3, #12]
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c4:	461a      	mov	r2, r3
 80090c6:	68b9      	ldr	r1, [r7, #8]
 80090c8:	f002 f8da 	bl	800b280 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	68da      	ldr	r2, [r3, #12]
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090d4:	425b      	negs	r3, r3
 80090d6:	441a      	add	r2, r3
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	68da      	ldr	r2, [r3, #12]
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d207      	bcs.n	80090f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	689a      	ldr	r2, [r3, #8]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f0:	425b      	negs	r3, r3
 80090f2:	441a      	add	r2, r3
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2b02      	cmp	r3, #2
 80090fc:	d105      	bne.n	800910a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d002      	beq.n	800910a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	3b01      	subs	r3, #1
 8009108:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	1c5a      	adds	r2, r3, #1
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009112:	697b      	ldr	r3, [r7, #20]
}
 8009114:	4618      	mov	r0, r3
 8009116:	3718      	adds	r7, #24
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800912a:	2b00      	cmp	r3, #0
 800912c:	d018      	beq.n	8009160 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	68da      	ldr	r2, [r3, #12]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009136:	441a      	add	r2, r3
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	68da      	ldr	r2, [r3, #12]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	689b      	ldr	r3, [r3, #8]
 8009144:	429a      	cmp	r2, r3
 8009146:	d303      	bcc.n	8009150 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	68d9      	ldr	r1, [r3, #12]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009158:	461a      	mov	r2, r3
 800915a:	6838      	ldr	r0, [r7, #0]
 800915c:	f002 f890 	bl	800b280 <memcpy>
	}
}
 8009160:	bf00      	nop
 8009162:	3708      	adds	r7, #8
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009170:	f001 fc30 	bl	800a9d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800917a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800917c:	e011      	b.n	80091a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009182:	2b00      	cmp	r3, #0
 8009184:	d012      	beq.n	80091ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	3324      	adds	r3, #36	; 0x24
 800918a:	4618      	mov	r0, r3
 800918c:	f000 fd0e 	bl	8009bac <xTaskRemoveFromEventList>
 8009190:	4603      	mov	r3, r0
 8009192:	2b00      	cmp	r3, #0
 8009194:	d001      	beq.n	800919a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009196:	f000 fde5 	bl	8009d64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800919a:	7bfb      	ldrb	r3, [r7, #15]
 800919c:	3b01      	subs	r3, #1
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80091a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	dce9      	bgt.n	800917e <prvUnlockQueue+0x16>
 80091aa:	e000      	b.n	80091ae <prvUnlockQueue+0x46>
					break;
 80091ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	22ff      	movs	r2, #255	; 0xff
 80091b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80091b6:	f001 fc3d 	bl	800aa34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80091ba:	f001 fc0b 	bl	800a9d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80091c6:	e011      	b.n	80091ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	691b      	ldr	r3, [r3, #16]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d012      	beq.n	80091f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	3310      	adds	r3, #16
 80091d4:	4618      	mov	r0, r3
 80091d6:	f000 fce9 	bl	8009bac <xTaskRemoveFromEventList>
 80091da:	4603      	mov	r3, r0
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d001      	beq.n	80091e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80091e0:	f000 fdc0 	bl	8009d64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80091e4:	7bbb      	ldrb	r3, [r7, #14]
 80091e6:	3b01      	subs	r3, #1
 80091e8:	b2db      	uxtb	r3, r3
 80091ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80091ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	dce9      	bgt.n	80091c8 <prvUnlockQueue+0x60>
 80091f4:	e000      	b.n	80091f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80091f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	22ff      	movs	r2, #255	; 0xff
 80091fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009200:	f001 fc18 	bl	800aa34 <vPortExitCritical>
}
 8009204:	bf00      	nop
 8009206:	3710      	adds	r7, #16
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009214:	f001 fbde 	bl	800a9d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800921c:	2b00      	cmp	r3, #0
 800921e:	d102      	bne.n	8009226 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009220:	2301      	movs	r3, #1
 8009222:	60fb      	str	r3, [r7, #12]
 8009224:	e001      	b.n	800922a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009226:	2300      	movs	r3, #0
 8009228:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800922a:	f001 fc03 	bl	800aa34 <vPortExitCritical>

	return xReturn;
 800922e:	68fb      	ldr	r3, [r7, #12]
}
 8009230:	4618      	mov	r0, r3
 8009232:	3710      	adds	r7, #16
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009240:	f001 fbc8 	bl	800a9d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800924c:	429a      	cmp	r2, r3
 800924e:	d102      	bne.n	8009256 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009250:	2301      	movs	r3, #1
 8009252:	60fb      	str	r3, [r7, #12]
 8009254:	e001      	b.n	800925a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009256:	2300      	movs	r3, #0
 8009258:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800925a:	f001 fbeb 	bl	800aa34 <vPortExitCritical>

	return xReturn;
 800925e:	68fb      	ldr	r3, [r7, #12]
}
 8009260:	4618      	mov	r0, r3
 8009262:	3710      	adds	r7, #16
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009268:	b480      	push	{r7}
 800926a:	b085      	sub	sp, #20
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009272:	2300      	movs	r3, #0
 8009274:	60fb      	str	r3, [r7, #12]
 8009276:	e014      	b.n	80092a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009278:	4a0f      	ldr	r2, [pc, #60]	; (80092b8 <vQueueAddToRegistry+0x50>)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d10b      	bne.n	800929c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009284:	490c      	ldr	r1, [pc, #48]	; (80092b8 <vQueueAddToRegistry+0x50>)
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	683a      	ldr	r2, [r7, #0]
 800928a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800928e:	4a0a      	ldr	r2, [pc, #40]	; (80092b8 <vQueueAddToRegistry+0x50>)
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	00db      	lsls	r3, r3, #3
 8009294:	4413      	add	r3, r2
 8009296:	687a      	ldr	r2, [r7, #4]
 8009298:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800929a:	e006      	b.n	80092aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	3301      	adds	r3, #1
 80092a0:	60fb      	str	r3, [r7, #12]
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2b07      	cmp	r3, #7
 80092a6:	d9e7      	bls.n	8009278 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80092a8:	bf00      	nop
 80092aa:	bf00      	nop
 80092ac:	3714      	adds	r7, #20
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr
 80092b6:	bf00      	nop
 80092b8:	20001394 	.word	0x20001394

080092bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b086      	sub	sp, #24
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80092cc:	f001 fb82 	bl	800a9d4 <vPortEnterCritical>
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80092d6:	b25b      	sxtb	r3, r3
 80092d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092dc:	d103      	bne.n	80092e6 <vQueueWaitForMessageRestricted+0x2a>
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	2200      	movs	r2, #0
 80092e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092ec:	b25b      	sxtb	r3, r3
 80092ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092f2:	d103      	bne.n	80092fc <vQueueWaitForMessageRestricted+0x40>
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	2200      	movs	r2, #0
 80092f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092fc:	f001 fb9a 	bl	800aa34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009304:	2b00      	cmp	r3, #0
 8009306:	d106      	bne.n	8009316 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	3324      	adds	r3, #36	; 0x24
 800930c:	687a      	ldr	r2, [r7, #4]
 800930e:	68b9      	ldr	r1, [r7, #8]
 8009310:	4618      	mov	r0, r3
 8009312:	f000 fc1f 	bl	8009b54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009316:	6978      	ldr	r0, [r7, #20]
 8009318:	f7ff ff26 	bl	8009168 <prvUnlockQueue>
	}
 800931c:	bf00      	nop
 800931e:	3718      	adds	r7, #24
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009324:	b580      	push	{r7, lr}
 8009326:	b08e      	sub	sp, #56	; 0x38
 8009328:	af04      	add	r7, sp, #16
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	60b9      	str	r1, [r7, #8]
 800932e:	607a      	str	r2, [r7, #4]
 8009330:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009334:	2b00      	cmp	r3, #0
 8009336:	d10a      	bne.n	800934e <xTaskCreateStatic+0x2a>
	__asm volatile
 8009338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800933c:	f383 8811 	msr	BASEPRI, r3
 8009340:	f3bf 8f6f 	isb	sy
 8009344:	f3bf 8f4f 	dsb	sy
 8009348:	623b      	str	r3, [r7, #32]
}
 800934a:	bf00      	nop
 800934c:	e7fe      	b.n	800934c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800934e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009350:	2b00      	cmp	r3, #0
 8009352:	d10a      	bne.n	800936a <xTaskCreateStatic+0x46>
	__asm volatile
 8009354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009358:	f383 8811 	msr	BASEPRI, r3
 800935c:	f3bf 8f6f 	isb	sy
 8009360:	f3bf 8f4f 	dsb	sy
 8009364:	61fb      	str	r3, [r7, #28]
}
 8009366:	bf00      	nop
 8009368:	e7fe      	b.n	8009368 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800936a:	23bc      	movs	r3, #188	; 0xbc
 800936c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	2bbc      	cmp	r3, #188	; 0xbc
 8009372:	d00a      	beq.n	800938a <xTaskCreateStatic+0x66>
	__asm volatile
 8009374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009378:	f383 8811 	msr	BASEPRI, r3
 800937c:	f3bf 8f6f 	isb	sy
 8009380:	f3bf 8f4f 	dsb	sy
 8009384:	61bb      	str	r3, [r7, #24]
}
 8009386:	bf00      	nop
 8009388:	e7fe      	b.n	8009388 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800938a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800938c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800938e:	2b00      	cmp	r3, #0
 8009390:	d01e      	beq.n	80093d0 <xTaskCreateStatic+0xac>
 8009392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009394:	2b00      	cmp	r3, #0
 8009396:	d01b      	beq.n	80093d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800939a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800939c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80093a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a4:	2202      	movs	r2, #2
 80093a6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80093aa:	2300      	movs	r3, #0
 80093ac:	9303      	str	r3, [sp, #12]
 80093ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b0:	9302      	str	r3, [sp, #8]
 80093b2:	f107 0314 	add.w	r3, r7, #20
 80093b6:	9301      	str	r3, [sp, #4]
 80093b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ba:	9300      	str	r3, [sp, #0]
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	68b9      	ldr	r1, [r7, #8]
 80093c2:	68f8      	ldr	r0, [r7, #12]
 80093c4:	f000 f850 	bl	8009468 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80093c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80093ca:	f000 f8f3 	bl	80095b4 <prvAddNewTaskToReadyList>
 80093ce:	e001      	b.n	80093d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80093d0:	2300      	movs	r3, #0
 80093d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80093d4:	697b      	ldr	r3, [r7, #20]
	}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3728      	adds	r7, #40	; 0x28
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}

080093de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80093de:	b580      	push	{r7, lr}
 80093e0:	b08c      	sub	sp, #48	; 0x30
 80093e2:	af04      	add	r7, sp, #16
 80093e4:	60f8      	str	r0, [r7, #12]
 80093e6:	60b9      	str	r1, [r7, #8]
 80093e8:	603b      	str	r3, [r7, #0]
 80093ea:	4613      	mov	r3, r2
 80093ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80093ee:	88fb      	ldrh	r3, [r7, #6]
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	4618      	mov	r0, r3
 80093f4:	f001 fc10 	bl	800ac18 <pvPortMalloc>
 80093f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d00e      	beq.n	800941e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009400:	20bc      	movs	r0, #188	; 0xbc
 8009402:	f001 fc09 	bl	800ac18 <pvPortMalloc>
 8009406:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009408:	69fb      	ldr	r3, [r7, #28]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d003      	beq.n	8009416 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800940e:	69fb      	ldr	r3, [r7, #28]
 8009410:	697a      	ldr	r2, [r7, #20]
 8009412:	631a      	str	r2, [r3, #48]	; 0x30
 8009414:	e005      	b.n	8009422 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009416:	6978      	ldr	r0, [r7, #20]
 8009418:	f001 fcca 	bl	800adb0 <vPortFree>
 800941c:	e001      	b.n	8009422 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800941e:	2300      	movs	r3, #0
 8009420:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009422:	69fb      	ldr	r3, [r7, #28]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d017      	beq.n	8009458 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009428:	69fb      	ldr	r3, [r7, #28]
 800942a:	2200      	movs	r2, #0
 800942c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009430:	88fa      	ldrh	r2, [r7, #6]
 8009432:	2300      	movs	r3, #0
 8009434:	9303      	str	r3, [sp, #12]
 8009436:	69fb      	ldr	r3, [r7, #28]
 8009438:	9302      	str	r3, [sp, #8]
 800943a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800943c:	9301      	str	r3, [sp, #4]
 800943e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009440:	9300      	str	r3, [sp, #0]
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	68b9      	ldr	r1, [r7, #8]
 8009446:	68f8      	ldr	r0, [r7, #12]
 8009448:	f000 f80e 	bl	8009468 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800944c:	69f8      	ldr	r0, [r7, #28]
 800944e:	f000 f8b1 	bl	80095b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009452:	2301      	movs	r3, #1
 8009454:	61bb      	str	r3, [r7, #24]
 8009456:	e002      	b.n	800945e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009458:	f04f 33ff 	mov.w	r3, #4294967295
 800945c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800945e:	69bb      	ldr	r3, [r7, #24]
	}
 8009460:	4618      	mov	r0, r3
 8009462:	3720      	adds	r7, #32
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b088      	sub	sp, #32
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	60b9      	str	r1, [r7, #8]
 8009472:	607a      	str	r2, [r7, #4]
 8009474:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009478:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	461a      	mov	r2, r3
 8009480:	21a5      	movs	r1, #165	; 0xa5
 8009482:	f001 ff0b 	bl	800b29c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009490:	3b01      	subs	r3, #1
 8009492:	009b      	lsls	r3, r3, #2
 8009494:	4413      	add	r3, r2
 8009496:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009498:	69bb      	ldr	r3, [r7, #24]
 800949a:	f023 0307 	bic.w	r3, r3, #7
 800949e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	f003 0307 	and.w	r3, r3, #7
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d00a      	beq.n	80094c0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80094aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ae:	f383 8811 	msr	BASEPRI, r3
 80094b2:	f3bf 8f6f 	isb	sy
 80094b6:	f3bf 8f4f 	dsb	sy
 80094ba:	617b      	str	r3, [r7, #20]
}
 80094bc:	bf00      	nop
 80094be:	e7fe      	b.n	80094be <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d01f      	beq.n	8009506 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80094c6:	2300      	movs	r3, #0
 80094c8:	61fb      	str	r3, [r7, #28]
 80094ca:	e012      	b.n	80094f2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80094cc:	68ba      	ldr	r2, [r7, #8]
 80094ce:	69fb      	ldr	r3, [r7, #28]
 80094d0:	4413      	add	r3, r2
 80094d2:	7819      	ldrb	r1, [r3, #0]
 80094d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	4413      	add	r3, r2
 80094da:	3334      	adds	r3, #52	; 0x34
 80094dc:	460a      	mov	r2, r1
 80094de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80094e0:	68ba      	ldr	r2, [r7, #8]
 80094e2:	69fb      	ldr	r3, [r7, #28]
 80094e4:	4413      	add	r3, r2
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d006      	beq.n	80094fa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80094ec:	69fb      	ldr	r3, [r7, #28]
 80094ee:	3301      	adds	r3, #1
 80094f0:	61fb      	str	r3, [r7, #28]
 80094f2:	69fb      	ldr	r3, [r7, #28]
 80094f4:	2b0f      	cmp	r3, #15
 80094f6:	d9e9      	bls.n	80094cc <prvInitialiseNewTask+0x64>
 80094f8:	e000      	b.n	80094fc <prvInitialiseNewTask+0x94>
			{
				break;
 80094fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80094fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094fe:	2200      	movs	r2, #0
 8009500:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009504:	e003      	b.n	800950e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009508:	2200      	movs	r2, #0
 800950a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800950e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009510:	2b37      	cmp	r3, #55	; 0x37
 8009512:	d901      	bls.n	8009518 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009514:	2337      	movs	r3, #55	; 0x37
 8009516:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800951a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800951c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800951e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009520:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009522:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009526:	2200      	movs	r2, #0
 8009528:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800952a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952c:	3304      	adds	r3, #4
 800952e:	4618      	mov	r0, r3
 8009530:	f7ff f8b4 	bl	800869c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009536:	3318      	adds	r3, #24
 8009538:	4618      	mov	r0, r3
 800953a:	f7ff f8af 	bl	800869c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800953e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009542:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009546:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800954a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800954c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800954e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009552:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009556:	2200      	movs	r2, #0
 8009558:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800955c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800955e:	2200      	movs	r2, #0
 8009560:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009566:	3354      	adds	r3, #84	; 0x54
 8009568:	2260      	movs	r2, #96	; 0x60
 800956a:	2100      	movs	r1, #0
 800956c:	4618      	mov	r0, r3
 800956e:	f001 fe95 	bl	800b29c <memset>
 8009572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009574:	4a0c      	ldr	r2, [pc, #48]	; (80095a8 <prvInitialiseNewTask+0x140>)
 8009576:	659a      	str	r2, [r3, #88]	; 0x58
 8009578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800957a:	4a0c      	ldr	r2, [pc, #48]	; (80095ac <prvInitialiseNewTask+0x144>)
 800957c:	65da      	str	r2, [r3, #92]	; 0x5c
 800957e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009580:	4a0b      	ldr	r2, [pc, #44]	; (80095b0 <prvInitialiseNewTask+0x148>)
 8009582:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009584:	683a      	ldr	r2, [r7, #0]
 8009586:	68f9      	ldr	r1, [r7, #12]
 8009588:	69b8      	ldr	r0, [r7, #24]
 800958a:	f001 f8f9 	bl	800a780 <pxPortInitialiseStack>
 800958e:	4602      	mov	r2, r0
 8009590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009592:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009596:	2b00      	cmp	r3, #0
 8009598:	d002      	beq.n	80095a0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800959a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800959c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800959e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095a0:	bf00      	nop
 80095a2:	3720      	adds	r7, #32
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	0800e41c 	.word	0x0800e41c
 80095ac:	0800e43c 	.word	0x0800e43c
 80095b0:	0800e3fc 	.word	0x0800e3fc

080095b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80095bc:	f001 fa0a 	bl	800a9d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80095c0:	4b26      	ldr	r3, [pc, #152]	; (800965c <prvAddNewTaskToReadyList+0xa8>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	3301      	adds	r3, #1
 80095c6:	4a25      	ldr	r2, [pc, #148]	; (800965c <prvAddNewTaskToReadyList+0xa8>)
 80095c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80095ca:	4b25      	ldr	r3, [pc, #148]	; (8009660 <prvAddNewTaskToReadyList+0xac>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d109      	bne.n	80095e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80095d2:	4a23      	ldr	r2, [pc, #140]	; (8009660 <prvAddNewTaskToReadyList+0xac>)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80095d8:	4b20      	ldr	r3, [pc, #128]	; (800965c <prvAddNewTaskToReadyList+0xa8>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d110      	bne.n	8009602 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80095e0:	f000 fbde 	bl	8009da0 <prvInitialiseTaskLists>
 80095e4:	e00d      	b.n	8009602 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80095e6:	4b1f      	ldr	r3, [pc, #124]	; (8009664 <prvAddNewTaskToReadyList+0xb0>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d109      	bne.n	8009602 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80095ee:	4b1c      	ldr	r3, [pc, #112]	; (8009660 <prvAddNewTaskToReadyList+0xac>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d802      	bhi.n	8009602 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80095fc:	4a18      	ldr	r2, [pc, #96]	; (8009660 <prvAddNewTaskToReadyList+0xac>)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009602:	4b19      	ldr	r3, [pc, #100]	; (8009668 <prvAddNewTaskToReadyList+0xb4>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	3301      	adds	r3, #1
 8009608:	4a17      	ldr	r2, [pc, #92]	; (8009668 <prvAddNewTaskToReadyList+0xb4>)
 800960a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800960c:	4b16      	ldr	r3, [pc, #88]	; (8009668 <prvAddNewTaskToReadyList+0xb4>)
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009618:	4b14      	ldr	r3, [pc, #80]	; (800966c <prvAddNewTaskToReadyList+0xb8>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	429a      	cmp	r2, r3
 800961e:	d903      	bls.n	8009628 <prvAddNewTaskToReadyList+0x74>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009624:	4a11      	ldr	r2, [pc, #68]	; (800966c <prvAddNewTaskToReadyList+0xb8>)
 8009626:	6013      	str	r3, [r2, #0]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800962c:	4613      	mov	r3, r2
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	4413      	add	r3, r2
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	4a0e      	ldr	r2, [pc, #56]	; (8009670 <prvAddNewTaskToReadyList+0xbc>)
 8009636:	441a      	add	r2, r3
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	3304      	adds	r3, #4
 800963c:	4619      	mov	r1, r3
 800963e:	4610      	mov	r0, r2
 8009640:	f7ff f839 	bl	80086b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009644:	f001 f9f6 	bl	800aa34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009648:	4b06      	ldr	r3, [pc, #24]	; (8009664 <prvAddNewTaskToReadyList+0xb0>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d001      	beq.n	8009654 <prvAddNewTaskToReadyList+0xa0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009650:	4b03      	ldr	r3, [pc, #12]	; (8009660 <prvAddNewTaskToReadyList+0xac>)
 8009652:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009654:	bf00      	nop
 8009656:	3708      	adds	r7, #8
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}
 800965c:	200018a8 	.word	0x200018a8
 8009660:	200013d4 	.word	0x200013d4
 8009664:	200018b4 	.word	0x200018b4
 8009668:	200018c4 	.word	0x200018c4
 800966c:	200018b0 	.word	0x200018b0
 8009670:	200013d8 	.word	0x200013d8

08009674 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800967c:	2300      	movs	r3, #0
 800967e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d017      	beq.n	80096b6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009686:	4b13      	ldr	r3, [pc, #76]	; (80096d4 <vTaskDelay+0x60>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d00a      	beq.n	80096a4 <vTaskDelay+0x30>
	__asm volatile
 800968e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009692:	f383 8811 	msr	BASEPRI, r3
 8009696:	f3bf 8f6f 	isb	sy
 800969a:	f3bf 8f4f 	dsb	sy
 800969e:	60bb      	str	r3, [r7, #8]
}
 80096a0:	bf00      	nop
 80096a2:	e7fe      	b.n	80096a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80096a4:	f000 f88a 	bl	80097bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80096a8:	2100      	movs	r1, #0
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 fcc6 	bl	800a03c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80096b0:	f000 f892 	bl	80097d8 <xTaskResumeAll>
 80096b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d107      	bne.n	80096cc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80096bc:	4b06      	ldr	r3, [pc, #24]	; (80096d8 <vTaskDelay+0x64>)
 80096be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096c2:	601a      	str	r2, [r3, #0]
 80096c4:	f3bf 8f4f 	dsb	sy
 80096c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80096cc:	bf00      	nop
 80096ce:	3710      	adds	r7, #16
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}
 80096d4:	200018d0 	.word	0x200018d0
 80096d8:	e000ed04 	.word	0xe000ed04

080096dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b08a      	sub	sp, #40	; 0x28
 80096e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80096e2:	2300      	movs	r3, #0
 80096e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80096e6:	2300      	movs	r3, #0
 80096e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80096ea:	463a      	mov	r2, r7
 80096ec:	1d39      	adds	r1, r7, #4
 80096ee:	f107 0308 	add.w	r3, r7, #8
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7fe ff7e 	bl	80085f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80096f8:	6839      	ldr	r1, [r7, #0]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	68ba      	ldr	r2, [r7, #8]
 80096fe:	9202      	str	r2, [sp, #8]
 8009700:	9301      	str	r3, [sp, #4]
 8009702:	2300      	movs	r3, #0
 8009704:	9300      	str	r3, [sp, #0]
 8009706:	2300      	movs	r3, #0
 8009708:	460a      	mov	r2, r1
 800970a:	4924      	ldr	r1, [pc, #144]	; (800979c <vTaskStartScheduler+0xc0>)
 800970c:	4824      	ldr	r0, [pc, #144]	; (80097a0 <vTaskStartScheduler+0xc4>)
 800970e:	f7ff fe09 	bl	8009324 <xTaskCreateStatic>
 8009712:	4603      	mov	r3, r0
 8009714:	4a23      	ldr	r2, [pc, #140]	; (80097a4 <vTaskStartScheduler+0xc8>)
 8009716:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009718:	4b22      	ldr	r3, [pc, #136]	; (80097a4 <vTaskStartScheduler+0xc8>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d002      	beq.n	8009726 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009720:	2301      	movs	r3, #1
 8009722:	617b      	str	r3, [r7, #20]
 8009724:	e001      	b.n	800972a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009726:	2300      	movs	r3, #0
 8009728:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	2b01      	cmp	r3, #1
 800972e:	d102      	bne.n	8009736 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009730:	f000 fcd8 	bl	800a0e4 <xTimerCreateTimerTask>
 8009734:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	2b01      	cmp	r3, #1
 800973a:	d11b      	bne.n	8009774 <vTaskStartScheduler+0x98>
	__asm volatile
 800973c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009740:	f383 8811 	msr	BASEPRI, r3
 8009744:	f3bf 8f6f 	isb	sy
 8009748:	f3bf 8f4f 	dsb	sy
 800974c:	613b      	str	r3, [r7, #16]
}
 800974e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009750:	4b15      	ldr	r3, [pc, #84]	; (80097a8 <vTaskStartScheduler+0xcc>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	3354      	adds	r3, #84	; 0x54
 8009756:	4a15      	ldr	r2, [pc, #84]	; (80097ac <vTaskStartScheduler+0xd0>)
 8009758:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800975a:	4b15      	ldr	r3, [pc, #84]	; (80097b0 <vTaskStartScheduler+0xd4>)
 800975c:	f04f 32ff 	mov.w	r2, #4294967295
 8009760:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009762:	4b14      	ldr	r3, [pc, #80]	; (80097b4 <vTaskStartScheduler+0xd8>)
 8009764:	2201      	movs	r2, #1
 8009766:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009768:	4b13      	ldr	r3, [pc, #76]	; (80097b8 <vTaskStartScheduler+0xdc>)
 800976a:	2200      	movs	r2, #0
 800976c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800976e:	f001 f88f 	bl	800a890 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009772:	e00e      	b.n	8009792 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800977a:	d10a      	bne.n	8009792 <vTaskStartScheduler+0xb6>
	__asm volatile
 800977c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009780:	f383 8811 	msr	BASEPRI, r3
 8009784:	f3bf 8f6f 	isb	sy
 8009788:	f3bf 8f4f 	dsb	sy
 800978c:	60fb      	str	r3, [r7, #12]
}
 800978e:	bf00      	nop
 8009790:	e7fe      	b.n	8009790 <vTaskStartScheduler+0xb4>
}
 8009792:	bf00      	nop
 8009794:	3718      	adds	r7, #24
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop
 800979c:	0800e378 	.word	0x0800e378
 80097a0:	08009d7d 	.word	0x08009d7d
 80097a4:	200018cc 	.word	0x200018cc
 80097a8:	200013d4 	.word	0x200013d4
 80097ac:	20000068 	.word	0x20000068
 80097b0:	200018c8 	.word	0x200018c8
 80097b4:	200018b4 	.word	0x200018b4
 80097b8:	200018ac 	.word	0x200018ac

080097bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80097bc:	b480      	push	{r7}
 80097be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80097c0:	4b04      	ldr	r3, [pc, #16]	; (80097d4 <vTaskSuspendAll+0x18>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	3301      	adds	r3, #1
 80097c6:	4a03      	ldr	r2, [pc, #12]	; (80097d4 <vTaskSuspendAll+0x18>)
 80097c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80097ca:	bf00      	nop
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr
 80097d4:	200018d0 	.word	0x200018d0

080097d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b084      	sub	sp, #16
 80097dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80097de:	2300      	movs	r3, #0
 80097e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80097e2:	2300      	movs	r3, #0
 80097e4:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80097e6:	4b3c      	ldr	r3, [pc, #240]	; (80098d8 <xTaskResumeAll+0x100>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d10a      	bne.n	8009804 <xTaskResumeAll+0x2c>
	__asm volatile
 80097ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f2:	f383 8811 	msr	BASEPRI, r3
 80097f6:	f3bf 8f6f 	isb	sy
 80097fa:	f3bf 8f4f 	dsb	sy
 80097fe:	603b      	str	r3, [r7, #0]
}
 8009800:	bf00      	nop
 8009802:	e7fe      	b.n	8009802 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009804:	f001 f8e6 	bl	800a9d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009808:	4b33      	ldr	r3, [pc, #204]	; (80098d8 <xTaskResumeAll+0x100>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	3b01      	subs	r3, #1
 800980e:	4a32      	ldr	r2, [pc, #200]	; (80098d8 <xTaskResumeAll+0x100>)
 8009810:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009812:	4b31      	ldr	r3, [pc, #196]	; (80098d8 <xTaskResumeAll+0x100>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d156      	bne.n	80098c8 <xTaskResumeAll+0xf0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800981a:	4b30      	ldr	r3, [pc, #192]	; (80098dc <xTaskResumeAll+0x104>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d052      	beq.n	80098c8 <xTaskResumeAll+0xf0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009822:	e02f      	b.n	8009884 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009824:	4b2e      	ldr	r3, [pc, #184]	; (80098e0 <xTaskResumeAll+0x108>)
 8009826:	68db      	ldr	r3, [r3, #12]
 8009828:	68db      	ldr	r3, [r3, #12]
 800982a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	3318      	adds	r3, #24
 8009830:	4618      	mov	r0, r3
 8009832:	f7fe ff9d 	bl	8008770 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	3304      	adds	r3, #4
 800983a:	4618      	mov	r0, r3
 800983c:	f7fe ff98 	bl	8008770 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009844:	4b27      	ldr	r3, [pc, #156]	; (80098e4 <xTaskResumeAll+0x10c>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	429a      	cmp	r2, r3
 800984a:	d903      	bls.n	8009854 <xTaskResumeAll+0x7c>
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009850:	4a24      	ldr	r2, [pc, #144]	; (80098e4 <xTaskResumeAll+0x10c>)
 8009852:	6013      	str	r3, [r2, #0]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009858:	4613      	mov	r3, r2
 800985a:	009b      	lsls	r3, r3, #2
 800985c:	4413      	add	r3, r2
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	4a21      	ldr	r2, [pc, #132]	; (80098e8 <xTaskResumeAll+0x110>)
 8009862:	441a      	add	r2, r3
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	3304      	adds	r3, #4
 8009868:	4619      	mov	r1, r3
 800986a:	4610      	mov	r0, r2
 800986c:	f7fe ff23 	bl	80086b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009874:	4b1d      	ldr	r3, [pc, #116]	; (80098ec <xTaskResumeAll+0x114>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987a:	429a      	cmp	r2, r3
 800987c:	d302      	bcc.n	8009884 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800987e:	4b1c      	ldr	r3, [pc, #112]	; (80098f0 <xTaskResumeAll+0x118>)
 8009880:	2201      	movs	r2, #1
 8009882:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009884:	4b16      	ldr	r3, [pc, #88]	; (80098e0 <xTaskResumeAll+0x108>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d1cb      	bne.n	8009824 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d001      	beq.n	8009896 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009892:	f000 fb27 	bl	8009ee4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009896:	4b17      	ldr	r3, [pc, #92]	; (80098f4 <xTaskResumeAll+0x11c>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d010      	beq.n	80098c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80098a2:	f000 f839 	bl	8009918 <xTaskIncrementTick>
 80098a6:	4603      	mov	r3, r0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d002      	beq.n	80098b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80098ac:	4b10      	ldr	r3, [pc, #64]	; (80098f0 <xTaskResumeAll+0x118>)
 80098ae:	2201      	movs	r2, #1
 80098b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	3b01      	subs	r3, #1
 80098b6:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d1f1      	bne.n	80098a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80098be:	4b0d      	ldr	r3, [pc, #52]	; (80098f4 <xTaskResumeAll+0x11c>)
 80098c0:	2200      	movs	r2, #0
 80098c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80098c4:	4b0a      	ldr	r3, [pc, #40]	; (80098f0 <xTaskResumeAll+0x118>)
 80098c6:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80098c8:	f001 f8b4 	bl	800aa34 <vPortExitCritical>

	return xAlreadyYielded;
 80098cc:	687b      	ldr	r3, [r7, #4]
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3710      	adds	r7, #16
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop
 80098d8:	200018d0 	.word	0x200018d0
 80098dc:	200018a8 	.word	0x200018a8
 80098e0:	20001868 	.word	0x20001868
 80098e4:	200018b0 	.word	0x200018b0
 80098e8:	200013d8 	.word	0x200013d8
 80098ec:	200013d4 	.word	0x200013d4
 80098f0:	200018bc 	.word	0x200018bc
 80098f4:	200018b8 	.word	0x200018b8

080098f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80098f8:	b480      	push	{r7}
 80098fa:	b083      	sub	sp, #12
 80098fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80098fe:	4b05      	ldr	r3, [pc, #20]	; (8009914 <xTaskGetTickCount+0x1c>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009904:	687b      	ldr	r3, [r7, #4]
}
 8009906:	4618      	mov	r0, r3
 8009908:	370c      	adds	r7, #12
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr
 8009912:	bf00      	nop
 8009914:	200018ac 	.word	0x200018ac

08009918 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b086      	sub	sp, #24
 800991c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800991e:	2300      	movs	r3, #0
 8009920:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009922:	4b3f      	ldr	r3, [pc, #252]	; (8009a20 <xTaskIncrementTick+0x108>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d170      	bne.n	8009a0c <xTaskIncrementTick+0xf4>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800992a:	4b3e      	ldr	r3, [pc, #248]	; (8009a24 <xTaskIncrementTick+0x10c>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	3301      	adds	r3, #1
 8009930:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009932:	4a3c      	ldr	r2, [pc, #240]	; (8009a24 <xTaskIncrementTick+0x10c>)
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d120      	bne.n	8009980 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800993e:	4b3a      	ldr	r3, [pc, #232]	; (8009a28 <xTaskIncrementTick+0x110>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d00a      	beq.n	800995e <xTaskIncrementTick+0x46>
	__asm volatile
 8009948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994c:	f383 8811 	msr	BASEPRI, r3
 8009950:	f3bf 8f6f 	isb	sy
 8009954:	f3bf 8f4f 	dsb	sy
 8009958:	603b      	str	r3, [r7, #0]
}
 800995a:	bf00      	nop
 800995c:	e7fe      	b.n	800995c <xTaskIncrementTick+0x44>
 800995e:	4b32      	ldr	r3, [pc, #200]	; (8009a28 <xTaskIncrementTick+0x110>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	60fb      	str	r3, [r7, #12]
 8009964:	4b31      	ldr	r3, [pc, #196]	; (8009a2c <xTaskIncrementTick+0x114>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4a2f      	ldr	r2, [pc, #188]	; (8009a28 <xTaskIncrementTick+0x110>)
 800996a:	6013      	str	r3, [r2, #0]
 800996c:	4a2f      	ldr	r2, [pc, #188]	; (8009a2c <xTaskIncrementTick+0x114>)
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	6013      	str	r3, [r2, #0]
 8009972:	4b2f      	ldr	r3, [pc, #188]	; (8009a30 <xTaskIncrementTick+0x118>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	3301      	adds	r3, #1
 8009978:	4a2d      	ldr	r2, [pc, #180]	; (8009a30 <xTaskIncrementTick+0x118>)
 800997a:	6013      	str	r3, [r2, #0]
 800997c:	f000 fab2 	bl	8009ee4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009980:	4b2c      	ldr	r3, [pc, #176]	; (8009a34 <xTaskIncrementTick+0x11c>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	693a      	ldr	r2, [r7, #16]
 8009986:	429a      	cmp	r2, r3
 8009988:	d345      	bcc.n	8009a16 <xTaskIncrementTick+0xfe>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800998a:	4b27      	ldr	r3, [pc, #156]	; (8009a28 <xTaskIncrementTick+0x110>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d104      	bne.n	800999e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009994:	4b27      	ldr	r3, [pc, #156]	; (8009a34 <xTaskIncrementTick+0x11c>)
 8009996:	f04f 32ff 	mov.w	r2, #4294967295
 800999a:	601a      	str	r2, [r3, #0]
					break;
 800999c:	e03b      	b.n	8009a16 <xTaskIncrementTick+0xfe>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800999e:	4b22      	ldr	r3, [pc, #136]	; (8009a28 <xTaskIncrementTick+0x110>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	68db      	ldr	r3, [r3, #12]
 80099a4:	68db      	ldr	r3, [r3, #12]
 80099a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80099ae:	693a      	ldr	r2, [r7, #16]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d203      	bcs.n	80099be <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80099b6:	4a1f      	ldr	r2, [pc, #124]	; (8009a34 <xTaskIncrementTick+0x11c>)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80099bc:	e02b      	b.n	8009a16 <xTaskIncrementTick+0xfe>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	3304      	adds	r3, #4
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7fe fed4 	bl	8008770 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d004      	beq.n	80099da <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	3318      	adds	r3, #24
 80099d4:	4618      	mov	r0, r3
 80099d6:	f7fe fecb 	bl	8008770 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099de:	4b16      	ldr	r3, [pc, #88]	; (8009a38 <xTaskIncrementTick+0x120>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	429a      	cmp	r2, r3
 80099e4:	d903      	bls.n	80099ee <xTaskIncrementTick+0xd6>
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ea:	4a13      	ldr	r2, [pc, #76]	; (8009a38 <xTaskIncrementTick+0x120>)
 80099ec:	6013      	str	r3, [r2, #0]
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099f2:	4613      	mov	r3, r2
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	4413      	add	r3, r2
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	4a10      	ldr	r2, [pc, #64]	; (8009a3c <xTaskIncrementTick+0x124>)
 80099fc:	441a      	add	r2, r3
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	3304      	adds	r3, #4
 8009a02:	4619      	mov	r1, r3
 8009a04:	4610      	mov	r0, r2
 8009a06:	f7fe fe56 	bl	80086b6 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a0a:	e7be      	b.n	800998a <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009a0c:	4b0c      	ldr	r3, [pc, #48]	; (8009a40 <xTaskIncrementTick+0x128>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	3301      	adds	r3, #1
 8009a12:	4a0b      	ldr	r2, [pc, #44]	; (8009a40 <xTaskIncrementTick+0x128>)
 8009a14:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009a16:	697b      	ldr	r3, [r7, #20]
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3718      	adds	r7, #24
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}
 8009a20:	200018d0 	.word	0x200018d0
 8009a24:	200018ac 	.word	0x200018ac
 8009a28:	20001860 	.word	0x20001860
 8009a2c:	20001864 	.word	0x20001864
 8009a30:	200018c0 	.word	0x200018c0
 8009a34:	200018c8 	.word	0x200018c8
 8009a38:	200018b0 	.word	0x200018b0
 8009a3c:	200013d8 	.word	0x200013d8
 8009a40:	200018b8 	.word	0x200018b8

08009a44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009a44:	b480      	push	{r7}
 8009a46:	b085      	sub	sp, #20
 8009a48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009a4a:	4b2a      	ldr	r3, [pc, #168]	; (8009af4 <vTaskSwitchContext+0xb0>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d003      	beq.n	8009a5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009a52:	4b29      	ldr	r3, [pc, #164]	; (8009af8 <vTaskSwitchContext+0xb4>)
 8009a54:	2201      	movs	r2, #1
 8009a56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009a58:	e046      	b.n	8009ae8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009a5a:	4b27      	ldr	r3, [pc, #156]	; (8009af8 <vTaskSwitchContext+0xb4>)
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a60:	4b26      	ldr	r3, [pc, #152]	; (8009afc <vTaskSwitchContext+0xb8>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	60fb      	str	r3, [r7, #12]
 8009a66:	e010      	b.n	8009a8a <vTaskSwitchContext+0x46>
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d10a      	bne.n	8009a84 <vTaskSwitchContext+0x40>
	__asm volatile
 8009a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a72:	f383 8811 	msr	BASEPRI, r3
 8009a76:	f3bf 8f6f 	isb	sy
 8009a7a:	f3bf 8f4f 	dsb	sy
 8009a7e:	607b      	str	r3, [r7, #4]
}
 8009a80:	bf00      	nop
 8009a82:	e7fe      	b.n	8009a82 <vTaskSwitchContext+0x3e>
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	3b01      	subs	r3, #1
 8009a88:	60fb      	str	r3, [r7, #12]
 8009a8a:	491d      	ldr	r1, [pc, #116]	; (8009b00 <vTaskSwitchContext+0xbc>)
 8009a8c:	68fa      	ldr	r2, [r7, #12]
 8009a8e:	4613      	mov	r3, r2
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	4413      	add	r3, r2
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	440b      	add	r3, r1
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d0e4      	beq.n	8009a68 <vTaskSwitchContext+0x24>
 8009a9e:	68fa      	ldr	r2, [r7, #12]
 8009aa0:	4613      	mov	r3, r2
 8009aa2:	009b      	lsls	r3, r3, #2
 8009aa4:	4413      	add	r3, r2
 8009aa6:	009b      	lsls	r3, r3, #2
 8009aa8:	4a15      	ldr	r2, [pc, #84]	; (8009b00 <vTaskSwitchContext+0xbc>)
 8009aaa:	4413      	add	r3, r2
 8009aac:	60bb      	str	r3, [r7, #8]
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	685a      	ldr	r2, [r3, #4]
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	605a      	str	r2, [r3, #4]
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	685a      	ldr	r2, [r3, #4]
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	3308      	adds	r3, #8
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d104      	bne.n	8009ace <vTaskSwitchContext+0x8a>
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	685a      	ldr	r2, [r3, #4]
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	605a      	str	r2, [r3, #4]
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	68db      	ldr	r3, [r3, #12]
 8009ad4:	4a0b      	ldr	r2, [pc, #44]	; (8009b04 <vTaskSwitchContext+0xc0>)
 8009ad6:	6013      	str	r3, [r2, #0]
 8009ad8:	4a08      	ldr	r2, [pc, #32]	; (8009afc <vTaskSwitchContext+0xb8>)
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009ade:	4b09      	ldr	r3, [pc, #36]	; (8009b04 <vTaskSwitchContext+0xc0>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	3354      	adds	r3, #84	; 0x54
 8009ae4:	4a08      	ldr	r2, [pc, #32]	; (8009b08 <vTaskSwitchContext+0xc4>)
 8009ae6:	6013      	str	r3, [r2, #0]
}
 8009ae8:	bf00      	nop
 8009aea:	3714      	adds	r7, #20
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr
 8009af4:	200018d0 	.word	0x200018d0
 8009af8:	200018bc 	.word	0x200018bc
 8009afc:	200018b0 	.word	0x200018b0
 8009b00:	200013d8 	.word	0x200013d8
 8009b04:	200013d4 	.word	0x200013d4
 8009b08:	20000068 	.word	0x20000068

08009b0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d10a      	bne.n	8009b32 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b20:	f383 8811 	msr	BASEPRI, r3
 8009b24:	f3bf 8f6f 	isb	sy
 8009b28:	f3bf 8f4f 	dsb	sy
 8009b2c:	60fb      	str	r3, [r7, #12]
}
 8009b2e:	bf00      	nop
 8009b30:	e7fe      	b.n	8009b30 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b32:	4b07      	ldr	r3, [pc, #28]	; (8009b50 <vTaskPlaceOnEventList+0x44>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	3318      	adds	r3, #24
 8009b38:	4619      	mov	r1, r3
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f7fe fddf 	bl	80086fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009b40:	2101      	movs	r1, #1
 8009b42:	6838      	ldr	r0, [r7, #0]
 8009b44:	f000 fa7a 	bl	800a03c <prvAddCurrentTaskToDelayedList>
}
 8009b48:	bf00      	nop
 8009b4a:	3710      	adds	r7, #16
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}
 8009b50:	200013d4 	.word	0x200013d4

08009b54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b086      	sub	sp, #24
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	60f8      	str	r0, [r7, #12]
 8009b5c:	60b9      	str	r1, [r7, #8]
 8009b5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d10a      	bne.n	8009b7c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6a:	f383 8811 	msr	BASEPRI, r3
 8009b6e:	f3bf 8f6f 	isb	sy
 8009b72:	f3bf 8f4f 	dsb	sy
 8009b76:	617b      	str	r3, [r7, #20]
}
 8009b78:	bf00      	nop
 8009b7a:	e7fe      	b.n	8009b7a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b7c:	4b0a      	ldr	r3, [pc, #40]	; (8009ba8 <vTaskPlaceOnEventListRestricted+0x54>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	3318      	adds	r3, #24
 8009b82:	4619      	mov	r1, r3
 8009b84:	68f8      	ldr	r0, [r7, #12]
 8009b86:	f7fe fd96 	bl	80086b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d002      	beq.n	8009b96 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009b90:	f04f 33ff 	mov.w	r3, #4294967295
 8009b94:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009b96:	6879      	ldr	r1, [r7, #4]
 8009b98:	68b8      	ldr	r0, [r7, #8]
 8009b9a:	f000 fa4f 	bl	800a03c <prvAddCurrentTaskToDelayedList>
	}
 8009b9e:	bf00      	nop
 8009ba0:	3718      	adds	r7, #24
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	200013d4 	.word	0x200013d4

08009bac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b086      	sub	sp, #24
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	68db      	ldr	r3, [r3, #12]
 8009bba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d10a      	bne.n	8009bd8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc6:	f383 8811 	msr	BASEPRI, r3
 8009bca:	f3bf 8f6f 	isb	sy
 8009bce:	f3bf 8f4f 	dsb	sy
 8009bd2:	60fb      	str	r3, [r7, #12]
}
 8009bd4:	bf00      	nop
 8009bd6:	e7fe      	b.n	8009bd6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	3318      	adds	r3, #24
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f7fe fdc7 	bl	8008770 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009be2:	4b1e      	ldr	r3, [pc, #120]	; (8009c5c <xTaskRemoveFromEventList+0xb0>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d11d      	bne.n	8009c26 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	3304      	adds	r3, #4
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f7fe fdbe 	bl	8008770 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bf8:	4b19      	ldr	r3, [pc, #100]	; (8009c60 <xTaskRemoveFromEventList+0xb4>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d903      	bls.n	8009c08 <xTaskRemoveFromEventList+0x5c>
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c04:	4a16      	ldr	r2, [pc, #88]	; (8009c60 <xTaskRemoveFromEventList+0xb4>)
 8009c06:	6013      	str	r3, [r2, #0]
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c0c:	4613      	mov	r3, r2
 8009c0e:	009b      	lsls	r3, r3, #2
 8009c10:	4413      	add	r3, r2
 8009c12:	009b      	lsls	r3, r3, #2
 8009c14:	4a13      	ldr	r2, [pc, #76]	; (8009c64 <xTaskRemoveFromEventList+0xb8>)
 8009c16:	441a      	add	r2, r3
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	3304      	adds	r3, #4
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	4610      	mov	r0, r2
 8009c20:	f7fe fd49 	bl	80086b6 <vListInsertEnd>
 8009c24:	e005      	b.n	8009c32 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	3318      	adds	r3, #24
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	480e      	ldr	r0, [pc, #56]	; (8009c68 <xTaskRemoveFromEventList+0xbc>)
 8009c2e:	f7fe fd42 	bl	80086b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c36:	4b0d      	ldr	r3, [pc, #52]	; (8009c6c <xTaskRemoveFromEventList+0xc0>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d905      	bls.n	8009c4c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009c40:	2301      	movs	r3, #1
 8009c42:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009c44:	4b0a      	ldr	r3, [pc, #40]	; (8009c70 <xTaskRemoveFromEventList+0xc4>)
 8009c46:	2201      	movs	r2, #1
 8009c48:	601a      	str	r2, [r3, #0]
 8009c4a:	e001      	b.n	8009c50 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009c50:	697b      	ldr	r3, [r7, #20]
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3718      	adds	r7, #24
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	bf00      	nop
 8009c5c:	200018d0 	.word	0x200018d0
 8009c60:	200018b0 	.word	0x200018b0
 8009c64:	200013d8 	.word	0x200013d8
 8009c68:	20001868 	.word	0x20001868
 8009c6c:	200013d4 	.word	0x200013d4
 8009c70:	200018bc 	.word	0x200018bc

08009c74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009c74:	b480      	push	{r7}
 8009c76:	b083      	sub	sp, #12
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009c7c:	4b06      	ldr	r3, [pc, #24]	; (8009c98 <vTaskInternalSetTimeOutState+0x24>)
 8009c7e:	681a      	ldr	r2, [r3, #0]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009c84:	4b05      	ldr	r3, [pc, #20]	; (8009c9c <vTaskInternalSetTimeOutState+0x28>)
 8009c86:	681a      	ldr	r2, [r3, #0]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	605a      	str	r2, [r3, #4]
}
 8009c8c:	bf00      	nop
 8009c8e:	370c      	adds	r7, #12
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr
 8009c98:	200018c0 	.word	0x200018c0
 8009c9c:	200018ac 	.word	0x200018ac

08009ca0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b088      	sub	sp, #32
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d10a      	bne.n	8009cc6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb4:	f383 8811 	msr	BASEPRI, r3
 8009cb8:	f3bf 8f6f 	isb	sy
 8009cbc:	f3bf 8f4f 	dsb	sy
 8009cc0:	613b      	str	r3, [r7, #16]
}
 8009cc2:	bf00      	nop
 8009cc4:	e7fe      	b.n	8009cc4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d10a      	bne.n	8009ce2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd0:	f383 8811 	msr	BASEPRI, r3
 8009cd4:	f3bf 8f6f 	isb	sy
 8009cd8:	f3bf 8f4f 	dsb	sy
 8009cdc:	60fb      	str	r3, [r7, #12]
}
 8009cde:	bf00      	nop
 8009ce0:	e7fe      	b.n	8009ce0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009ce2:	f000 fe77 	bl	800a9d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009ce6:	4b1d      	ldr	r3, [pc, #116]	; (8009d5c <xTaskCheckForTimeOut+0xbc>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	69ba      	ldr	r2, [r7, #24]
 8009cf2:	1ad3      	subs	r3, r2, r3
 8009cf4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cfe:	d102      	bne.n	8009d06 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009d00:	2300      	movs	r3, #0
 8009d02:	61fb      	str	r3, [r7, #28]
 8009d04:	e023      	b.n	8009d4e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	4b15      	ldr	r3, [pc, #84]	; (8009d60 <xTaskCheckForTimeOut+0xc0>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	429a      	cmp	r2, r3
 8009d10:	d007      	beq.n	8009d22 <xTaskCheckForTimeOut+0x82>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	69ba      	ldr	r2, [r7, #24]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d302      	bcc.n	8009d22 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	61fb      	str	r3, [r7, #28]
 8009d20:	e015      	b.n	8009d4e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	697a      	ldr	r2, [r7, #20]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d20b      	bcs.n	8009d44 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	681a      	ldr	r2, [r3, #0]
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	1ad2      	subs	r2, r2, r3
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f7ff ff9b 	bl	8009c74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	61fb      	str	r3, [r7, #28]
 8009d42:	e004      	b.n	8009d4e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	2200      	movs	r2, #0
 8009d48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009d4e:	f000 fe71 	bl	800aa34 <vPortExitCritical>

	return xReturn;
 8009d52:	69fb      	ldr	r3, [r7, #28]
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3720      	adds	r7, #32
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}
 8009d5c:	200018ac 	.word	0x200018ac
 8009d60:	200018c0 	.word	0x200018c0

08009d64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009d64:	b480      	push	{r7}
 8009d66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009d68:	4b03      	ldr	r3, [pc, #12]	; (8009d78 <vTaskMissedYield+0x14>)
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	601a      	str	r2, [r3, #0]
}
 8009d6e:	bf00      	nop
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr
 8009d78:	200018bc 	.word	0x200018bc

08009d7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b082      	sub	sp, #8
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009d84:	f000 f84c 	bl	8009e20 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8009d88:	4b04      	ldr	r3, [pc, #16]	; (8009d9c <prvIdleTask+0x20>)
 8009d8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d8e:	601a      	str	r2, [r3, #0]
 8009d90:	f3bf 8f4f 	dsb	sy
 8009d94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009d98:	e7f4      	b.n	8009d84 <prvIdleTask+0x8>
 8009d9a:	bf00      	nop
 8009d9c:	e000ed04 	.word	0xe000ed04

08009da0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b082      	sub	sp, #8
 8009da4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009da6:	2300      	movs	r3, #0
 8009da8:	607b      	str	r3, [r7, #4]
 8009daa:	e00c      	b.n	8009dc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	4613      	mov	r3, r2
 8009db0:	009b      	lsls	r3, r3, #2
 8009db2:	4413      	add	r3, r2
 8009db4:	009b      	lsls	r3, r3, #2
 8009db6:	4a12      	ldr	r2, [pc, #72]	; (8009e00 <prvInitialiseTaskLists+0x60>)
 8009db8:	4413      	add	r3, r2
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7fe fc4e 	bl	800865c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	607b      	str	r3, [r7, #4]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2b37      	cmp	r3, #55	; 0x37
 8009dca:	d9ef      	bls.n	8009dac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009dcc:	480d      	ldr	r0, [pc, #52]	; (8009e04 <prvInitialiseTaskLists+0x64>)
 8009dce:	f7fe fc45 	bl	800865c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009dd2:	480d      	ldr	r0, [pc, #52]	; (8009e08 <prvInitialiseTaskLists+0x68>)
 8009dd4:	f7fe fc42 	bl	800865c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009dd8:	480c      	ldr	r0, [pc, #48]	; (8009e0c <prvInitialiseTaskLists+0x6c>)
 8009dda:	f7fe fc3f 	bl	800865c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009dde:	480c      	ldr	r0, [pc, #48]	; (8009e10 <prvInitialiseTaskLists+0x70>)
 8009de0:	f7fe fc3c 	bl	800865c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009de4:	480b      	ldr	r0, [pc, #44]	; (8009e14 <prvInitialiseTaskLists+0x74>)
 8009de6:	f7fe fc39 	bl	800865c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009dea:	4b0b      	ldr	r3, [pc, #44]	; (8009e18 <prvInitialiseTaskLists+0x78>)
 8009dec:	4a05      	ldr	r2, [pc, #20]	; (8009e04 <prvInitialiseTaskLists+0x64>)
 8009dee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009df0:	4b0a      	ldr	r3, [pc, #40]	; (8009e1c <prvInitialiseTaskLists+0x7c>)
 8009df2:	4a05      	ldr	r2, [pc, #20]	; (8009e08 <prvInitialiseTaskLists+0x68>)
 8009df4:	601a      	str	r2, [r3, #0]
}
 8009df6:	bf00      	nop
 8009df8:	3708      	adds	r7, #8
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}
 8009dfe:	bf00      	nop
 8009e00:	200013d8 	.word	0x200013d8
 8009e04:	20001838 	.word	0x20001838
 8009e08:	2000184c 	.word	0x2000184c
 8009e0c:	20001868 	.word	0x20001868
 8009e10:	2000187c 	.word	0x2000187c
 8009e14:	20001894 	.word	0x20001894
 8009e18:	20001860 	.word	0x20001860
 8009e1c:	20001864 	.word	0x20001864

08009e20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e26:	e019      	b.n	8009e5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009e28:	f000 fdd4 	bl	800a9d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e2c:	4b10      	ldr	r3, [pc, #64]	; (8009e70 <prvCheckTasksWaitingTermination+0x50>)
 8009e2e:	68db      	ldr	r3, [r3, #12]
 8009e30:	68db      	ldr	r3, [r3, #12]
 8009e32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	3304      	adds	r3, #4
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f7fe fc99 	bl	8008770 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009e3e:	4b0d      	ldr	r3, [pc, #52]	; (8009e74 <prvCheckTasksWaitingTermination+0x54>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	3b01      	subs	r3, #1
 8009e44:	4a0b      	ldr	r2, [pc, #44]	; (8009e74 <prvCheckTasksWaitingTermination+0x54>)
 8009e46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009e48:	4b0b      	ldr	r3, [pc, #44]	; (8009e78 <prvCheckTasksWaitingTermination+0x58>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	3b01      	subs	r3, #1
 8009e4e:	4a0a      	ldr	r2, [pc, #40]	; (8009e78 <prvCheckTasksWaitingTermination+0x58>)
 8009e50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009e52:	f000 fdef 	bl	800aa34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 f810 	bl	8009e7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e5c:	4b06      	ldr	r3, [pc, #24]	; (8009e78 <prvCheckTasksWaitingTermination+0x58>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d1e1      	bne.n	8009e28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009e64:	bf00      	nop
 8009e66:	bf00      	nop
 8009e68:	3708      	adds	r7, #8
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	2000187c 	.word	0x2000187c
 8009e74:	200018a8 	.word	0x200018a8
 8009e78:	20001890 	.word	0x20001890

08009e7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	3354      	adds	r3, #84	; 0x54
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f002 f80b 	bl	800bea4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d108      	bne.n	8009eaa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f000 ff87 	bl	800adb0 <vPortFree>
				vPortFree( pxTCB );
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 ff84 	bl	800adb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009ea8:	e018      	b.n	8009edc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	d103      	bne.n	8009ebc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 ff7b 	bl	800adb0 <vPortFree>
	}
 8009eba:	e00f      	b.n	8009edc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009ec2:	2b02      	cmp	r3, #2
 8009ec4:	d00a      	beq.n	8009edc <prvDeleteTCB+0x60>
	__asm volatile
 8009ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eca:	f383 8811 	msr	BASEPRI, r3
 8009ece:	f3bf 8f6f 	isb	sy
 8009ed2:	f3bf 8f4f 	dsb	sy
 8009ed6:	60fb      	str	r3, [r7, #12]
}
 8009ed8:	bf00      	nop
 8009eda:	e7fe      	b.n	8009eda <prvDeleteTCB+0x5e>
	}
 8009edc:	bf00      	nop
 8009ede:	3710      	adds	r7, #16
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009eea:	4b0c      	ldr	r3, [pc, #48]	; (8009f1c <prvResetNextTaskUnblockTime+0x38>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d104      	bne.n	8009efe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009ef4:	4b0a      	ldr	r3, [pc, #40]	; (8009f20 <prvResetNextTaskUnblockTime+0x3c>)
 8009ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8009efa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009efc:	e008      	b.n	8009f10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009efe:	4b07      	ldr	r3, [pc, #28]	; (8009f1c <prvResetNextTaskUnblockTime+0x38>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	68db      	ldr	r3, [r3, #12]
 8009f04:	68db      	ldr	r3, [r3, #12]
 8009f06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	4a04      	ldr	r2, [pc, #16]	; (8009f20 <prvResetNextTaskUnblockTime+0x3c>)
 8009f0e:	6013      	str	r3, [r2, #0]
}
 8009f10:	bf00      	nop
 8009f12:	370c      	adds	r7, #12
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr
 8009f1c:	20001860 	.word	0x20001860
 8009f20:	200018c8 	.word	0x200018c8

08009f24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009f24:	b480      	push	{r7}
 8009f26:	b083      	sub	sp, #12
 8009f28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009f2a:	4b0b      	ldr	r3, [pc, #44]	; (8009f58 <xTaskGetSchedulerState+0x34>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d102      	bne.n	8009f38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009f32:	2301      	movs	r3, #1
 8009f34:	607b      	str	r3, [r7, #4]
 8009f36:	e008      	b.n	8009f4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f38:	4b08      	ldr	r3, [pc, #32]	; (8009f5c <xTaskGetSchedulerState+0x38>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d102      	bne.n	8009f46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009f40:	2302      	movs	r3, #2
 8009f42:	607b      	str	r3, [r7, #4]
 8009f44:	e001      	b.n	8009f4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009f46:	2300      	movs	r3, #0
 8009f48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009f4a:	687b      	ldr	r3, [r7, #4]
	}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	370c      	adds	r7, #12
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr
 8009f58:	200018b4 	.word	0x200018b4
 8009f5c:	200018d0 	.word	0x200018d0

08009f60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b086      	sub	sp, #24
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d056      	beq.n	800a024 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009f76:	4b2e      	ldr	r3, [pc, #184]	; (800a030 <xTaskPriorityDisinherit+0xd0>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	693a      	ldr	r2, [r7, #16]
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d00a      	beq.n	8009f96 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f84:	f383 8811 	msr	BASEPRI, r3
 8009f88:	f3bf 8f6f 	isb	sy
 8009f8c:	f3bf 8f4f 	dsb	sy
 8009f90:	60fb      	str	r3, [r7, #12]
}
 8009f92:	bf00      	nop
 8009f94:	e7fe      	b.n	8009f94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d10a      	bne.n	8009fb4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa2:	f383 8811 	msr	BASEPRI, r3
 8009fa6:	f3bf 8f6f 	isb	sy
 8009faa:	f3bf 8f4f 	dsb	sy
 8009fae:	60bb      	str	r3, [r7, #8]
}
 8009fb0:	bf00      	nop
 8009fb2:	e7fe      	b.n	8009fb2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fb8:	1e5a      	subs	r2, r3, #1
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d02c      	beq.n	800a024 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d128      	bne.n	800a024 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	3304      	adds	r3, #4
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f7fe fbca 	bl	8008770 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ff4:	4b0f      	ldr	r3, [pc, #60]	; (800a034 <xTaskPriorityDisinherit+0xd4>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	d903      	bls.n	800a004 <xTaskPriorityDisinherit+0xa4>
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a000:	4a0c      	ldr	r2, [pc, #48]	; (800a034 <xTaskPriorityDisinherit+0xd4>)
 800a002:	6013      	str	r3, [r2, #0]
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a008:	4613      	mov	r3, r2
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	4413      	add	r3, r2
 800a00e:	009b      	lsls	r3, r3, #2
 800a010:	4a09      	ldr	r2, [pc, #36]	; (800a038 <xTaskPriorityDisinherit+0xd8>)
 800a012:	441a      	add	r2, r3
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	3304      	adds	r3, #4
 800a018:	4619      	mov	r1, r3
 800a01a:	4610      	mov	r0, r2
 800a01c:	f7fe fb4b 	bl	80086b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a020:	2301      	movs	r3, #1
 800a022:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a024:	697b      	ldr	r3, [r7, #20]
	}
 800a026:	4618      	mov	r0, r3
 800a028:	3718      	adds	r7, #24
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
 800a02e:	bf00      	nop
 800a030:	200013d4 	.word	0x200013d4
 800a034:	200018b0 	.word	0x200018b0
 800a038:	200013d8 	.word	0x200013d8

0800a03c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a046:	4b21      	ldr	r3, [pc, #132]	; (800a0cc <prvAddCurrentTaskToDelayedList+0x90>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a04c:	4b20      	ldr	r3, [pc, #128]	; (800a0d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	3304      	adds	r3, #4
 800a052:	4618      	mov	r0, r3
 800a054:	f7fe fb8c 	bl	8008770 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a05e:	d10a      	bne.n	800a076 <prvAddCurrentTaskToDelayedList+0x3a>
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d007      	beq.n	800a076 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a066:	4b1a      	ldr	r3, [pc, #104]	; (800a0d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	3304      	adds	r3, #4
 800a06c:	4619      	mov	r1, r3
 800a06e:	4819      	ldr	r0, [pc, #100]	; (800a0d4 <prvAddCurrentTaskToDelayedList+0x98>)
 800a070:	f7fe fb21 	bl	80086b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a074:	e026      	b.n	800a0c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a076:	68fa      	ldr	r2, [r7, #12]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	4413      	add	r3, r2
 800a07c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a07e:	4b14      	ldr	r3, [pc, #80]	; (800a0d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	68ba      	ldr	r2, [r7, #8]
 800a084:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a086:	68ba      	ldr	r2, [r7, #8]
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d209      	bcs.n	800a0a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a08e:	4b12      	ldr	r3, [pc, #72]	; (800a0d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a090:	681a      	ldr	r2, [r3, #0]
 800a092:	4b0f      	ldr	r3, [pc, #60]	; (800a0d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	3304      	adds	r3, #4
 800a098:	4619      	mov	r1, r3
 800a09a:	4610      	mov	r0, r2
 800a09c:	f7fe fb2f 	bl	80086fe <vListInsert>
}
 800a0a0:	e010      	b.n	800a0c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0a2:	4b0e      	ldr	r3, [pc, #56]	; (800a0dc <prvAddCurrentTaskToDelayedList+0xa0>)
 800a0a4:	681a      	ldr	r2, [r3, #0]
 800a0a6:	4b0a      	ldr	r3, [pc, #40]	; (800a0d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	3304      	adds	r3, #4
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	4610      	mov	r0, r2
 800a0b0:	f7fe fb25 	bl	80086fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a0b4:	4b0a      	ldr	r3, [pc, #40]	; (800a0e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	68ba      	ldr	r2, [r7, #8]
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d202      	bcs.n	800a0c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a0be:	4a08      	ldr	r2, [pc, #32]	; (800a0e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	6013      	str	r3, [r2, #0]
}
 800a0c4:	bf00      	nop
 800a0c6:	3710      	adds	r7, #16
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}
 800a0cc:	200018ac 	.word	0x200018ac
 800a0d0:	200013d4 	.word	0x200013d4
 800a0d4:	20001894 	.word	0x20001894
 800a0d8:	20001864 	.word	0x20001864
 800a0dc:	20001860 	.word	0x20001860
 800a0e0:	200018c8 	.word	0x200018c8

0800a0e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b08a      	sub	sp, #40	; 0x28
 800a0e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a0ee:	f000 fb07 	bl	800a700 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a0f2:	4b1c      	ldr	r3, [pc, #112]	; (800a164 <xTimerCreateTimerTask+0x80>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d021      	beq.n	800a13e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a0fe:	2300      	movs	r3, #0
 800a100:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a102:	1d3a      	adds	r2, r7, #4
 800a104:	f107 0108 	add.w	r1, r7, #8
 800a108:	f107 030c 	add.w	r3, r7, #12
 800a10c:	4618      	mov	r0, r3
 800a10e:	f7fe fa8b 	bl	8008628 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a112:	6879      	ldr	r1, [r7, #4]
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	68fa      	ldr	r2, [r7, #12]
 800a118:	9202      	str	r2, [sp, #8]
 800a11a:	9301      	str	r3, [sp, #4]
 800a11c:	2302      	movs	r3, #2
 800a11e:	9300      	str	r3, [sp, #0]
 800a120:	2300      	movs	r3, #0
 800a122:	460a      	mov	r2, r1
 800a124:	4910      	ldr	r1, [pc, #64]	; (800a168 <xTimerCreateTimerTask+0x84>)
 800a126:	4811      	ldr	r0, [pc, #68]	; (800a16c <xTimerCreateTimerTask+0x88>)
 800a128:	f7ff f8fc 	bl	8009324 <xTaskCreateStatic>
 800a12c:	4603      	mov	r3, r0
 800a12e:	4a10      	ldr	r2, [pc, #64]	; (800a170 <xTimerCreateTimerTask+0x8c>)
 800a130:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a132:	4b0f      	ldr	r3, [pc, #60]	; (800a170 <xTimerCreateTimerTask+0x8c>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d001      	beq.n	800a13e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a13a:	2301      	movs	r3, #1
 800a13c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d10a      	bne.n	800a15a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a148:	f383 8811 	msr	BASEPRI, r3
 800a14c:	f3bf 8f6f 	isb	sy
 800a150:	f3bf 8f4f 	dsb	sy
 800a154:	613b      	str	r3, [r7, #16]
}
 800a156:	bf00      	nop
 800a158:	e7fe      	b.n	800a158 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a15a:	697b      	ldr	r3, [r7, #20]
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3718      	adds	r7, #24
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}
 800a164:	20001904 	.word	0x20001904
 800a168:	0800e380 	.word	0x0800e380
 800a16c:	0800a2a9 	.word	0x0800a2a9
 800a170:	20001908 	.word	0x20001908

0800a174 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b08a      	sub	sp, #40	; 0x28
 800a178:	af00      	add	r7, sp, #0
 800a17a:	60f8      	str	r0, [r7, #12]
 800a17c:	60b9      	str	r1, [r7, #8]
 800a17e:	607a      	str	r2, [r7, #4]
 800a180:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a182:	2300      	movs	r3, #0
 800a184:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d10a      	bne.n	800a1a2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a190:	f383 8811 	msr	BASEPRI, r3
 800a194:	f3bf 8f6f 	isb	sy
 800a198:	f3bf 8f4f 	dsb	sy
 800a19c:	623b      	str	r3, [r7, #32]
}
 800a19e:	bf00      	nop
 800a1a0:	e7fe      	b.n	800a1a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a1a2:	4b1a      	ldr	r3, [pc, #104]	; (800a20c <xTimerGenericCommand+0x98>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d02a      	beq.n	800a200 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	2b05      	cmp	r3, #5
 800a1ba:	dc18      	bgt.n	800a1ee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a1bc:	f7ff feb2 	bl	8009f24 <xTaskGetSchedulerState>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	2b02      	cmp	r3, #2
 800a1c4:	d109      	bne.n	800a1da <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a1c6:	4b11      	ldr	r3, [pc, #68]	; (800a20c <xTimerGenericCommand+0x98>)
 800a1c8:	6818      	ldr	r0, [r3, #0]
 800a1ca:	f107 0110 	add.w	r1, r7, #16
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1d2:	f7fe fc27 	bl	8008a24 <xQueueGenericSend>
 800a1d6:	6278      	str	r0, [r7, #36]	; 0x24
 800a1d8:	e012      	b.n	800a200 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a1da:	4b0c      	ldr	r3, [pc, #48]	; (800a20c <xTimerGenericCommand+0x98>)
 800a1dc:	6818      	ldr	r0, [r3, #0]
 800a1de:	f107 0110 	add.w	r1, r7, #16
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f7fe fc1d 	bl	8008a24 <xQueueGenericSend>
 800a1ea:	6278      	str	r0, [r7, #36]	; 0x24
 800a1ec:	e008      	b.n	800a200 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a1ee:	4b07      	ldr	r3, [pc, #28]	; (800a20c <xTimerGenericCommand+0x98>)
 800a1f0:	6818      	ldr	r0, [r3, #0]
 800a1f2:	f107 0110 	add.w	r1, r7, #16
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	683a      	ldr	r2, [r7, #0]
 800a1fa:	f7fe fcf9 	bl	8008bf0 <xQueueGenericSendFromISR>
 800a1fe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a202:	4618      	mov	r0, r3
 800a204:	3728      	adds	r7, #40	; 0x28
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	bf00      	nop
 800a20c:	20001904 	.word	0x20001904

0800a210 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b088      	sub	sp, #32
 800a214:	af02      	add	r7, sp, #8
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a21a:	4b22      	ldr	r3, [pc, #136]	; (800a2a4 <prvProcessExpiredTimer+0x94>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	68db      	ldr	r3, [r3, #12]
 800a220:	68db      	ldr	r3, [r3, #12]
 800a222:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	3304      	adds	r3, #4
 800a228:	4618      	mov	r0, r3
 800a22a:	f7fe faa1 	bl	8008770 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a234:	f003 0304 	and.w	r3, r3, #4
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d022      	beq.n	800a282 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	699a      	ldr	r2, [r3, #24]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	18d1      	adds	r1, r2, r3
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	683a      	ldr	r2, [r7, #0]
 800a248:	6978      	ldr	r0, [r7, #20]
 800a24a:	f000 f8d1 	bl	800a3f0 <prvInsertTimerInActiveList>
 800a24e:	4603      	mov	r3, r0
 800a250:	2b00      	cmp	r3, #0
 800a252:	d01f      	beq.n	800a294 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a254:	2300      	movs	r3, #0
 800a256:	9300      	str	r3, [sp, #0]
 800a258:	2300      	movs	r3, #0
 800a25a:	687a      	ldr	r2, [r7, #4]
 800a25c:	2100      	movs	r1, #0
 800a25e:	6978      	ldr	r0, [r7, #20]
 800a260:	f7ff ff88 	bl	800a174 <xTimerGenericCommand>
 800a264:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d113      	bne.n	800a294 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a270:	f383 8811 	msr	BASEPRI, r3
 800a274:	f3bf 8f6f 	isb	sy
 800a278:	f3bf 8f4f 	dsb	sy
 800a27c:	60fb      	str	r3, [r7, #12]
}
 800a27e:	bf00      	nop
 800a280:	e7fe      	b.n	800a280 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a288:	f023 0301 	bic.w	r3, r3, #1
 800a28c:	b2da      	uxtb	r2, r3
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	6a1b      	ldr	r3, [r3, #32]
 800a298:	6978      	ldr	r0, [r7, #20]
 800a29a:	4798      	blx	r3
}
 800a29c:	bf00      	nop
 800a29e:	3718      	adds	r7, #24
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}
 800a2a4:	200018fc 	.word	0x200018fc

0800a2a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b084      	sub	sp, #16
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a2b0:	f107 0308 	add.w	r3, r7, #8
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f000 f857 	bl	800a368 <prvGetNextExpireTime>
 800a2ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	4619      	mov	r1, r3
 800a2c0:	68f8      	ldr	r0, [r7, #12]
 800a2c2:	f000 f803 	bl	800a2cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a2c6:	f000 f8d5 	bl	800a474 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a2ca:	e7f1      	b.n	800a2b0 <prvTimerTask+0x8>

0800a2cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b084      	sub	sp, #16
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a2d6:	f7ff fa71 	bl	80097bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a2da:	f107 0308 	add.w	r3, r7, #8
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f000 f866 	bl	800a3b0 <prvSampleTimeNow>
 800a2e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d130      	bne.n	800a34e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d10a      	bne.n	800a308 <prvProcessTimerOrBlockTask+0x3c>
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d806      	bhi.n	800a308 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a2fa:	f7ff fa6d 	bl	80097d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a2fe:	68f9      	ldr	r1, [r7, #12]
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f7ff ff85 	bl	800a210 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a306:	e024      	b.n	800a352 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d008      	beq.n	800a320 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a30e:	4b13      	ldr	r3, [pc, #76]	; (800a35c <prvProcessTimerOrBlockTask+0x90>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d101      	bne.n	800a31c <prvProcessTimerOrBlockTask+0x50>
 800a318:	2301      	movs	r3, #1
 800a31a:	e000      	b.n	800a31e <prvProcessTimerOrBlockTask+0x52>
 800a31c:	2300      	movs	r3, #0
 800a31e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a320:	4b0f      	ldr	r3, [pc, #60]	; (800a360 <prvProcessTimerOrBlockTask+0x94>)
 800a322:	6818      	ldr	r0, [r3, #0]
 800a324:	687a      	ldr	r2, [r7, #4]
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	1ad3      	subs	r3, r2, r3
 800a32a:	683a      	ldr	r2, [r7, #0]
 800a32c:	4619      	mov	r1, r3
 800a32e:	f7fe ffc5 	bl	80092bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a332:	f7ff fa51 	bl	80097d8 <xTaskResumeAll>
 800a336:	4603      	mov	r3, r0
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d10a      	bne.n	800a352 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a33c:	4b09      	ldr	r3, [pc, #36]	; (800a364 <prvProcessTimerOrBlockTask+0x98>)
 800a33e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a342:	601a      	str	r2, [r3, #0]
 800a344:	f3bf 8f4f 	dsb	sy
 800a348:	f3bf 8f6f 	isb	sy
}
 800a34c:	e001      	b.n	800a352 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a34e:	f7ff fa43 	bl	80097d8 <xTaskResumeAll>
}
 800a352:	bf00      	nop
 800a354:	3710      	adds	r7, #16
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
 800a35a:	bf00      	nop
 800a35c:	20001900 	.word	0x20001900
 800a360:	20001904 	.word	0x20001904
 800a364:	e000ed04 	.word	0xe000ed04

0800a368 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a368:	b480      	push	{r7}
 800a36a:	b085      	sub	sp, #20
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a370:	4b0e      	ldr	r3, [pc, #56]	; (800a3ac <prvGetNextExpireTime+0x44>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d101      	bne.n	800a37e <prvGetNextExpireTime+0x16>
 800a37a:	2201      	movs	r2, #1
 800a37c:	e000      	b.n	800a380 <prvGetNextExpireTime+0x18>
 800a37e:	2200      	movs	r2, #0
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d105      	bne.n	800a398 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a38c:	4b07      	ldr	r3, [pc, #28]	; (800a3ac <prvGetNextExpireTime+0x44>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	68db      	ldr	r3, [r3, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	60fb      	str	r3, [r7, #12]
 800a396:	e001      	b.n	800a39c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a398:	2300      	movs	r3, #0
 800a39a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a39c:	68fb      	ldr	r3, [r7, #12]
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3714      	adds	r7, #20
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr
 800a3aa:	bf00      	nop
 800a3ac:	200018fc 	.word	0x200018fc

0800a3b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b084      	sub	sp, #16
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a3b8:	f7ff fa9e 	bl	80098f8 <xTaskGetTickCount>
 800a3bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a3be:	4b0b      	ldr	r3, [pc, #44]	; (800a3ec <prvSampleTimeNow+0x3c>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	68fa      	ldr	r2, [r7, #12]
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d205      	bcs.n	800a3d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a3c8:	f000 f936 	bl	800a638 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	601a      	str	r2, [r3, #0]
 800a3d2:	e002      	b.n	800a3da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a3da:	4a04      	ldr	r2, [pc, #16]	; (800a3ec <prvSampleTimeNow+0x3c>)
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3710      	adds	r7, #16
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	2000190c 	.word	0x2000190c

0800a3f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b086      	sub	sp, #24
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	60f8      	str	r0, [r7, #12]
 800a3f8:	60b9      	str	r1, [r7, #8]
 800a3fa:	607a      	str	r2, [r7, #4]
 800a3fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a3fe:	2300      	movs	r3, #0
 800a400:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	68ba      	ldr	r2, [r7, #8]
 800a406:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	68fa      	ldr	r2, [r7, #12]
 800a40c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a40e:	68ba      	ldr	r2, [r7, #8]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	429a      	cmp	r2, r3
 800a414:	d812      	bhi.n	800a43c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a416:	687a      	ldr	r2, [r7, #4]
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	1ad2      	subs	r2, r2, r3
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	699b      	ldr	r3, [r3, #24]
 800a420:	429a      	cmp	r2, r3
 800a422:	d302      	bcc.n	800a42a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a424:	2301      	movs	r3, #1
 800a426:	617b      	str	r3, [r7, #20]
 800a428:	e01b      	b.n	800a462 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a42a:	4b10      	ldr	r3, [pc, #64]	; (800a46c <prvInsertTimerInActiveList+0x7c>)
 800a42c:	681a      	ldr	r2, [r3, #0]
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	3304      	adds	r3, #4
 800a432:	4619      	mov	r1, r3
 800a434:	4610      	mov	r0, r2
 800a436:	f7fe f962 	bl	80086fe <vListInsert>
 800a43a:	e012      	b.n	800a462 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a43c:	687a      	ldr	r2, [r7, #4]
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	429a      	cmp	r2, r3
 800a442:	d206      	bcs.n	800a452 <prvInsertTimerInActiveList+0x62>
 800a444:	68ba      	ldr	r2, [r7, #8]
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	429a      	cmp	r2, r3
 800a44a:	d302      	bcc.n	800a452 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a44c:	2301      	movs	r3, #1
 800a44e:	617b      	str	r3, [r7, #20]
 800a450:	e007      	b.n	800a462 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a452:	4b07      	ldr	r3, [pc, #28]	; (800a470 <prvInsertTimerInActiveList+0x80>)
 800a454:	681a      	ldr	r2, [r3, #0]
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	3304      	adds	r3, #4
 800a45a:	4619      	mov	r1, r3
 800a45c:	4610      	mov	r0, r2
 800a45e:	f7fe f94e 	bl	80086fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a462:	697b      	ldr	r3, [r7, #20]
}
 800a464:	4618      	mov	r0, r3
 800a466:	3718      	adds	r7, #24
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	20001900 	.word	0x20001900
 800a470:	200018fc 	.word	0x200018fc

0800a474 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b08e      	sub	sp, #56	; 0x38
 800a478:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a47a:	e0ca      	b.n	800a612 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	da18      	bge.n	800a4b4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a482:	1d3b      	adds	r3, r7, #4
 800a484:	3304      	adds	r3, #4
 800a486:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d10a      	bne.n	800a4a4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a492:	f383 8811 	msr	BASEPRI, r3
 800a496:	f3bf 8f6f 	isb	sy
 800a49a:	f3bf 8f4f 	dsb	sy
 800a49e:	61fb      	str	r3, [r7, #28]
}
 800a4a0:	bf00      	nop
 800a4a2:	e7fe      	b.n	800a4a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4aa:	6850      	ldr	r0, [r2, #4]
 800a4ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4ae:	6892      	ldr	r2, [r2, #8]
 800a4b0:	4611      	mov	r1, r2
 800a4b2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	f2c0 80aa 	blt.w	800a610 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c2:	695b      	ldr	r3, [r3, #20]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d004      	beq.n	800a4d2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ca:	3304      	adds	r3, #4
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f7fe f94f 	bl	8008770 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a4d2:	463b      	mov	r3, r7
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f7ff ff6b 	bl	800a3b0 <prvSampleTimeNow>
 800a4da:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2b09      	cmp	r3, #9
 800a4e0:	f200 8097 	bhi.w	800a612 <prvProcessReceivedCommands+0x19e>
 800a4e4:	a201      	add	r2, pc, #4	; (adr r2, 800a4ec <prvProcessReceivedCommands+0x78>)
 800a4e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ea:	bf00      	nop
 800a4ec:	0800a515 	.word	0x0800a515
 800a4f0:	0800a515 	.word	0x0800a515
 800a4f4:	0800a515 	.word	0x0800a515
 800a4f8:	0800a589 	.word	0x0800a589
 800a4fc:	0800a59d 	.word	0x0800a59d
 800a500:	0800a5e7 	.word	0x0800a5e7
 800a504:	0800a515 	.word	0x0800a515
 800a508:	0800a515 	.word	0x0800a515
 800a50c:	0800a589 	.word	0x0800a589
 800a510:	0800a59d 	.word	0x0800a59d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a516:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a51a:	f043 0301 	orr.w	r3, r3, #1
 800a51e:	b2da      	uxtb	r2, r3
 800a520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a522:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a526:	68ba      	ldr	r2, [r7, #8]
 800a528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a52a:	699b      	ldr	r3, [r3, #24]
 800a52c:	18d1      	adds	r1, r2, r3
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a534:	f7ff ff5c 	bl	800a3f0 <prvInsertTimerInActiveList>
 800a538:	4603      	mov	r3, r0
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d069      	beq.n	800a612 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a540:	6a1b      	ldr	r3, [r3, #32]
 800a542:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a544:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a548:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a54c:	f003 0304 	and.w	r3, r3, #4
 800a550:	2b00      	cmp	r3, #0
 800a552:	d05e      	beq.n	800a612 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a554:	68ba      	ldr	r2, [r7, #8]
 800a556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a558:	699b      	ldr	r3, [r3, #24]
 800a55a:	441a      	add	r2, r3
 800a55c:	2300      	movs	r3, #0
 800a55e:	9300      	str	r3, [sp, #0]
 800a560:	2300      	movs	r3, #0
 800a562:	2100      	movs	r1, #0
 800a564:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a566:	f7ff fe05 	bl	800a174 <xTimerGenericCommand>
 800a56a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a56c:	6a3b      	ldr	r3, [r7, #32]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d14f      	bne.n	800a612 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a576:	f383 8811 	msr	BASEPRI, r3
 800a57a:	f3bf 8f6f 	isb	sy
 800a57e:	f3bf 8f4f 	dsb	sy
 800a582:	61bb      	str	r3, [r7, #24]
}
 800a584:	bf00      	nop
 800a586:	e7fe      	b.n	800a586 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a58a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a58e:	f023 0301 	bic.w	r3, r3, #1
 800a592:	b2da      	uxtb	r2, r3
 800a594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a596:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a59a:	e03a      	b.n	800a612 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a59e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5a2:	f043 0301 	orr.w	r3, r3, #1
 800a5a6:	b2da      	uxtb	r2, r3
 800a5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a5ae:	68ba      	ldr	r2, [r7, #8]
 800a5b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b6:	699b      	ldr	r3, [r3, #24]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d10a      	bne.n	800a5d2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c0:	f383 8811 	msr	BASEPRI, r3
 800a5c4:	f3bf 8f6f 	isb	sy
 800a5c8:	f3bf 8f4f 	dsb	sy
 800a5cc:	617b      	str	r3, [r7, #20]
}
 800a5ce:	bf00      	nop
 800a5d0:	e7fe      	b.n	800a5d0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d4:	699a      	ldr	r2, [r3, #24]
 800a5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d8:	18d1      	adds	r1, r2, r3
 800a5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5e0:	f7ff ff06 	bl	800a3f0 <prvInsertTimerInActiveList>
					break;
 800a5e4:	e015      	b.n	800a612 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5ec:	f003 0302 	and.w	r3, r3, #2
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d103      	bne.n	800a5fc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a5f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5f6:	f000 fbdb 	bl	800adb0 <vPortFree>
 800a5fa:	e00a      	b.n	800a612 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a602:	f023 0301 	bic.w	r3, r3, #1
 800a606:	b2da      	uxtb	r2, r3
 800a608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a60a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a60e:	e000      	b.n	800a612 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a610:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a612:	4b08      	ldr	r3, [pc, #32]	; (800a634 <prvProcessReceivedCommands+0x1c0>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	1d39      	adds	r1, r7, #4
 800a618:	2200      	movs	r2, #0
 800a61a:	4618      	mov	r0, r3
 800a61c:	f7fe fb84 	bl	8008d28 <xQueueReceive>
 800a620:	4603      	mov	r3, r0
 800a622:	2b00      	cmp	r3, #0
 800a624:	f47f af2a 	bne.w	800a47c <prvProcessReceivedCommands+0x8>
	}
}
 800a628:	bf00      	nop
 800a62a:	bf00      	nop
 800a62c:	3730      	adds	r7, #48	; 0x30
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
 800a632:	bf00      	nop
 800a634:	20001904 	.word	0x20001904

0800a638 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b088      	sub	sp, #32
 800a63c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a63e:	e048      	b.n	800a6d2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a640:	4b2d      	ldr	r3, [pc, #180]	; (800a6f8 <prvSwitchTimerLists+0xc0>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	68db      	ldr	r3, [r3, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a64a:	4b2b      	ldr	r3, [pc, #172]	; (800a6f8 <prvSwitchTimerLists+0xc0>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	68db      	ldr	r3, [r3, #12]
 800a650:	68db      	ldr	r3, [r3, #12]
 800a652:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	3304      	adds	r3, #4
 800a658:	4618      	mov	r0, r3
 800a65a:	f7fe f889 	bl	8008770 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	6a1b      	ldr	r3, [r3, #32]
 800a662:	68f8      	ldr	r0, [r7, #12]
 800a664:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a66c:	f003 0304 	and.w	r3, r3, #4
 800a670:	2b00      	cmp	r3, #0
 800a672:	d02e      	beq.n	800a6d2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	699b      	ldr	r3, [r3, #24]
 800a678:	693a      	ldr	r2, [r7, #16]
 800a67a:	4413      	add	r3, r2
 800a67c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a67e:	68ba      	ldr	r2, [r7, #8]
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	429a      	cmp	r2, r3
 800a684:	d90e      	bls.n	800a6a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	68ba      	ldr	r2, [r7, #8]
 800a68a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	68fa      	ldr	r2, [r7, #12]
 800a690:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a692:	4b19      	ldr	r3, [pc, #100]	; (800a6f8 <prvSwitchTimerLists+0xc0>)
 800a694:	681a      	ldr	r2, [r3, #0]
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	3304      	adds	r3, #4
 800a69a:	4619      	mov	r1, r3
 800a69c:	4610      	mov	r0, r2
 800a69e:	f7fe f82e 	bl	80086fe <vListInsert>
 800a6a2:	e016      	b.n	800a6d2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	9300      	str	r3, [sp, #0]
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	693a      	ldr	r2, [r7, #16]
 800a6ac:	2100      	movs	r1, #0
 800a6ae:	68f8      	ldr	r0, [r7, #12]
 800a6b0:	f7ff fd60 	bl	800a174 <xTimerGenericCommand>
 800a6b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d10a      	bne.n	800a6d2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c0:	f383 8811 	msr	BASEPRI, r3
 800a6c4:	f3bf 8f6f 	isb	sy
 800a6c8:	f3bf 8f4f 	dsb	sy
 800a6cc:	603b      	str	r3, [r7, #0]
}
 800a6ce:	bf00      	nop
 800a6d0:	e7fe      	b.n	800a6d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a6d2:	4b09      	ldr	r3, [pc, #36]	; (800a6f8 <prvSwitchTimerLists+0xc0>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d1b1      	bne.n	800a640 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a6dc:	4b06      	ldr	r3, [pc, #24]	; (800a6f8 <prvSwitchTimerLists+0xc0>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a6e2:	4b06      	ldr	r3, [pc, #24]	; (800a6fc <prvSwitchTimerLists+0xc4>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a04      	ldr	r2, [pc, #16]	; (800a6f8 <prvSwitchTimerLists+0xc0>)
 800a6e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a6ea:	4a04      	ldr	r2, [pc, #16]	; (800a6fc <prvSwitchTimerLists+0xc4>)
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	6013      	str	r3, [r2, #0]
}
 800a6f0:	bf00      	nop
 800a6f2:	3718      	adds	r7, #24
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}
 800a6f8:	200018fc 	.word	0x200018fc
 800a6fc:	20001900 	.word	0x20001900

0800a700 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b082      	sub	sp, #8
 800a704:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a706:	f000 f965 	bl	800a9d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a70a:	4b15      	ldr	r3, [pc, #84]	; (800a760 <prvCheckForValidListAndQueue+0x60>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d120      	bne.n	800a754 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a712:	4814      	ldr	r0, [pc, #80]	; (800a764 <prvCheckForValidListAndQueue+0x64>)
 800a714:	f7fd ffa2 	bl	800865c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a718:	4813      	ldr	r0, [pc, #76]	; (800a768 <prvCheckForValidListAndQueue+0x68>)
 800a71a:	f7fd ff9f 	bl	800865c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a71e:	4b13      	ldr	r3, [pc, #76]	; (800a76c <prvCheckForValidListAndQueue+0x6c>)
 800a720:	4a10      	ldr	r2, [pc, #64]	; (800a764 <prvCheckForValidListAndQueue+0x64>)
 800a722:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a724:	4b12      	ldr	r3, [pc, #72]	; (800a770 <prvCheckForValidListAndQueue+0x70>)
 800a726:	4a10      	ldr	r2, [pc, #64]	; (800a768 <prvCheckForValidListAndQueue+0x68>)
 800a728:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a72a:	2300      	movs	r3, #0
 800a72c:	9300      	str	r3, [sp, #0]
 800a72e:	4b11      	ldr	r3, [pc, #68]	; (800a774 <prvCheckForValidListAndQueue+0x74>)
 800a730:	4a11      	ldr	r2, [pc, #68]	; (800a778 <prvCheckForValidListAndQueue+0x78>)
 800a732:	2110      	movs	r1, #16
 800a734:	200a      	movs	r0, #10
 800a736:	f7fe f8a0 	bl	800887a <xQueueGenericCreateStatic>
 800a73a:	4603      	mov	r3, r0
 800a73c:	4a08      	ldr	r2, [pc, #32]	; (800a760 <prvCheckForValidListAndQueue+0x60>)
 800a73e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a740:	4b07      	ldr	r3, [pc, #28]	; (800a760 <prvCheckForValidListAndQueue+0x60>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d005      	beq.n	800a754 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a748:	4b05      	ldr	r3, [pc, #20]	; (800a760 <prvCheckForValidListAndQueue+0x60>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	490b      	ldr	r1, [pc, #44]	; (800a77c <prvCheckForValidListAndQueue+0x7c>)
 800a74e:	4618      	mov	r0, r3
 800a750:	f7fe fd8a 	bl	8009268 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a754:	f000 f96e 	bl	800aa34 <vPortExitCritical>
}
 800a758:	bf00      	nop
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
 800a75e:	bf00      	nop
 800a760:	20001904 	.word	0x20001904
 800a764:	200018d4 	.word	0x200018d4
 800a768:	200018e8 	.word	0x200018e8
 800a76c:	200018fc 	.word	0x200018fc
 800a770:	20001900 	.word	0x20001900
 800a774:	200019b0 	.word	0x200019b0
 800a778:	20001910 	.word	0x20001910
 800a77c:	0800e388 	.word	0x0800e388

0800a780 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a780:	b480      	push	{r7}
 800a782:	b085      	sub	sp, #20
 800a784:	af00      	add	r7, sp, #0
 800a786:	60f8      	str	r0, [r7, #12]
 800a788:	60b9      	str	r1, [r7, #8]
 800a78a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	3b04      	subs	r3, #4
 800a790:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a798:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	3b04      	subs	r3, #4
 800a79e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	f023 0201 	bic.w	r2, r3, #1
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	3b04      	subs	r3, #4
 800a7ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a7b0:	4a0c      	ldr	r2, [pc, #48]	; (800a7e4 <pxPortInitialiseStack+0x64>)
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	3b14      	subs	r3, #20
 800a7ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a7bc:	687a      	ldr	r2, [r7, #4]
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	3b04      	subs	r3, #4
 800a7c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f06f 0202 	mvn.w	r2, #2
 800a7ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	3b20      	subs	r3, #32
 800a7d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3714      	adds	r7, #20
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr
 800a7e4:	0800a7e9 	.word	0x0800a7e9

0800a7e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b085      	sub	sp, #20
 800a7ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a7f2:	4b12      	ldr	r3, [pc, #72]	; (800a83c <prvTaskExitError+0x54>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7fa:	d00a      	beq.n	800a812 <prvTaskExitError+0x2a>
	__asm volatile
 800a7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a800:	f383 8811 	msr	BASEPRI, r3
 800a804:	f3bf 8f6f 	isb	sy
 800a808:	f3bf 8f4f 	dsb	sy
 800a80c:	60fb      	str	r3, [r7, #12]
}
 800a80e:	bf00      	nop
 800a810:	e7fe      	b.n	800a810 <prvTaskExitError+0x28>
	__asm volatile
 800a812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a816:	f383 8811 	msr	BASEPRI, r3
 800a81a:	f3bf 8f6f 	isb	sy
 800a81e:	f3bf 8f4f 	dsb	sy
 800a822:	60bb      	str	r3, [r7, #8]
}
 800a824:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a826:	bf00      	nop
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d0fc      	beq.n	800a828 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a82e:	bf00      	nop
 800a830:	bf00      	nop
 800a832:	3714      	adds	r7, #20
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr
 800a83c:	20000064 	.word	0x20000064

0800a840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a840:	4b07      	ldr	r3, [pc, #28]	; (800a860 <pxCurrentTCBConst2>)
 800a842:	6819      	ldr	r1, [r3, #0]
 800a844:	6808      	ldr	r0, [r1, #0]
 800a846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a84a:	f380 8809 	msr	PSP, r0
 800a84e:	f3bf 8f6f 	isb	sy
 800a852:	f04f 0000 	mov.w	r0, #0
 800a856:	f380 8811 	msr	BASEPRI, r0
 800a85a:	4770      	bx	lr
 800a85c:	f3af 8000 	nop.w

0800a860 <pxCurrentTCBConst2>:
 800a860:	200013d4 	.word	0x200013d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a864:	bf00      	nop
 800a866:	bf00      	nop

0800a868 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a868:	4808      	ldr	r0, [pc, #32]	; (800a88c <prvPortStartFirstTask+0x24>)
 800a86a:	6800      	ldr	r0, [r0, #0]
 800a86c:	6800      	ldr	r0, [r0, #0]
 800a86e:	f380 8808 	msr	MSP, r0
 800a872:	f04f 0000 	mov.w	r0, #0
 800a876:	f380 8814 	msr	CONTROL, r0
 800a87a:	b662      	cpsie	i
 800a87c:	b661      	cpsie	f
 800a87e:	f3bf 8f4f 	dsb	sy
 800a882:	f3bf 8f6f 	isb	sy
 800a886:	df00      	svc	0
 800a888:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a88a:	bf00      	nop
 800a88c:	e000ed08 	.word	0xe000ed08

0800a890 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b086      	sub	sp, #24
 800a894:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a896:	4b46      	ldr	r3, [pc, #280]	; (800a9b0 <xPortStartScheduler+0x120>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	4a46      	ldr	r2, [pc, #280]	; (800a9b4 <xPortStartScheduler+0x124>)
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d10a      	bne.n	800a8b6 <xPortStartScheduler+0x26>
	__asm volatile
 800a8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a4:	f383 8811 	msr	BASEPRI, r3
 800a8a8:	f3bf 8f6f 	isb	sy
 800a8ac:	f3bf 8f4f 	dsb	sy
 800a8b0:	613b      	str	r3, [r7, #16]
}
 800a8b2:	bf00      	nop
 800a8b4:	e7fe      	b.n	800a8b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a8b6:	4b3e      	ldr	r3, [pc, #248]	; (800a9b0 <xPortStartScheduler+0x120>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4a3f      	ldr	r2, [pc, #252]	; (800a9b8 <xPortStartScheduler+0x128>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d10a      	bne.n	800a8d6 <xPortStartScheduler+0x46>
	__asm volatile
 800a8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c4:	f383 8811 	msr	BASEPRI, r3
 800a8c8:	f3bf 8f6f 	isb	sy
 800a8cc:	f3bf 8f4f 	dsb	sy
 800a8d0:	60fb      	str	r3, [r7, #12]
}
 800a8d2:	bf00      	nop
 800a8d4:	e7fe      	b.n	800a8d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a8d6:	4b39      	ldr	r3, [pc, #228]	; (800a9bc <xPortStartScheduler+0x12c>)
 800a8d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	781b      	ldrb	r3, [r3, #0]
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	22ff      	movs	r2, #255	; 0xff
 800a8e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	781b      	ldrb	r3, [r3, #0]
 800a8ec:	b2db      	uxtb	r3, r3
 800a8ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a8f0:	78fb      	ldrb	r3, [r7, #3]
 800a8f2:	b2db      	uxtb	r3, r3
 800a8f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a8f8:	b2da      	uxtb	r2, r3
 800a8fa:	4b31      	ldr	r3, [pc, #196]	; (800a9c0 <xPortStartScheduler+0x130>)
 800a8fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a8fe:	4b31      	ldr	r3, [pc, #196]	; (800a9c4 <xPortStartScheduler+0x134>)
 800a900:	2207      	movs	r2, #7
 800a902:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a904:	e009      	b.n	800a91a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a906:	4b2f      	ldr	r3, [pc, #188]	; (800a9c4 <xPortStartScheduler+0x134>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	3b01      	subs	r3, #1
 800a90c:	4a2d      	ldr	r2, [pc, #180]	; (800a9c4 <xPortStartScheduler+0x134>)
 800a90e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a910:	78fb      	ldrb	r3, [r7, #3]
 800a912:	b2db      	uxtb	r3, r3
 800a914:	005b      	lsls	r3, r3, #1
 800a916:	b2db      	uxtb	r3, r3
 800a918:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a91a:	78fb      	ldrb	r3, [r7, #3]
 800a91c:	b2db      	uxtb	r3, r3
 800a91e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a922:	2b80      	cmp	r3, #128	; 0x80
 800a924:	d0ef      	beq.n	800a906 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a926:	4b27      	ldr	r3, [pc, #156]	; (800a9c4 <xPortStartScheduler+0x134>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f1c3 0307 	rsb	r3, r3, #7
 800a92e:	2b04      	cmp	r3, #4
 800a930:	d00a      	beq.n	800a948 <xPortStartScheduler+0xb8>
	__asm volatile
 800a932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a936:	f383 8811 	msr	BASEPRI, r3
 800a93a:	f3bf 8f6f 	isb	sy
 800a93e:	f3bf 8f4f 	dsb	sy
 800a942:	60bb      	str	r3, [r7, #8]
}
 800a944:	bf00      	nop
 800a946:	e7fe      	b.n	800a946 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a948:	4b1e      	ldr	r3, [pc, #120]	; (800a9c4 <xPortStartScheduler+0x134>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	021b      	lsls	r3, r3, #8
 800a94e:	4a1d      	ldr	r2, [pc, #116]	; (800a9c4 <xPortStartScheduler+0x134>)
 800a950:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a952:	4b1c      	ldr	r3, [pc, #112]	; (800a9c4 <xPortStartScheduler+0x134>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a95a:	4a1a      	ldr	r2, [pc, #104]	; (800a9c4 <xPortStartScheduler+0x134>)
 800a95c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	b2da      	uxtb	r2, r3
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a966:	4b18      	ldr	r3, [pc, #96]	; (800a9c8 <xPortStartScheduler+0x138>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	4a17      	ldr	r2, [pc, #92]	; (800a9c8 <xPortStartScheduler+0x138>)
 800a96c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a970:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a972:	4b15      	ldr	r3, [pc, #84]	; (800a9c8 <xPortStartScheduler+0x138>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	4a14      	ldr	r2, [pc, #80]	; (800a9c8 <xPortStartScheduler+0x138>)
 800a978:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a97c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a97e:	f000 f8dd 	bl	800ab3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a982:	4b12      	ldr	r3, [pc, #72]	; (800a9cc <xPortStartScheduler+0x13c>)
 800a984:	2200      	movs	r2, #0
 800a986:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a988:	f000 f8fc 	bl	800ab84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a98c:	4b10      	ldr	r3, [pc, #64]	; (800a9d0 <xPortStartScheduler+0x140>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4a0f      	ldr	r2, [pc, #60]	; (800a9d0 <xPortStartScheduler+0x140>)
 800a992:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a996:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a998:	f7ff ff66 	bl	800a868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a99c:	f7ff f852 	bl	8009a44 <vTaskSwitchContext>
	prvTaskExitError();
 800a9a0:	f7ff ff22 	bl	800a7e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a9a4:	2300      	movs	r3, #0
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3718      	adds	r7, #24
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
 800a9ae:	bf00      	nop
 800a9b0:	e000ed00 	.word	0xe000ed00
 800a9b4:	410fc271 	.word	0x410fc271
 800a9b8:	410fc270 	.word	0x410fc270
 800a9bc:	e000e400 	.word	0xe000e400
 800a9c0:	20001a00 	.word	0x20001a00
 800a9c4:	20001a04 	.word	0x20001a04
 800a9c8:	e000ed20 	.word	0xe000ed20
 800a9cc:	20000064 	.word	0x20000064
 800a9d0:	e000ef34 	.word	0xe000ef34

0800a9d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b083      	sub	sp, #12
 800a9d8:	af00      	add	r7, sp, #0
	__asm volatile
 800a9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9de:	f383 8811 	msr	BASEPRI, r3
 800a9e2:	f3bf 8f6f 	isb	sy
 800a9e6:	f3bf 8f4f 	dsb	sy
 800a9ea:	607b      	str	r3, [r7, #4]
}
 800a9ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a9ee:	4b0f      	ldr	r3, [pc, #60]	; (800aa2c <vPortEnterCritical+0x58>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	4a0d      	ldr	r2, [pc, #52]	; (800aa2c <vPortEnterCritical+0x58>)
 800a9f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a9f8:	4b0c      	ldr	r3, [pc, #48]	; (800aa2c <vPortEnterCritical+0x58>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d10f      	bne.n	800aa20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aa00:	4b0b      	ldr	r3, [pc, #44]	; (800aa30 <vPortEnterCritical+0x5c>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d00a      	beq.n	800aa20 <vPortEnterCritical+0x4c>
	__asm volatile
 800aa0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa0e:	f383 8811 	msr	BASEPRI, r3
 800aa12:	f3bf 8f6f 	isb	sy
 800aa16:	f3bf 8f4f 	dsb	sy
 800aa1a:	603b      	str	r3, [r7, #0]
}
 800aa1c:	bf00      	nop
 800aa1e:	e7fe      	b.n	800aa1e <vPortEnterCritical+0x4a>
	}
}
 800aa20:	bf00      	nop
 800aa22:	370c      	adds	r7, #12
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr
 800aa2c:	20000064 	.word	0x20000064
 800aa30:	e000ed04 	.word	0xe000ed04

0800aa34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aa34:	b480      	push	{r7}
 800aa36:	b083      	sub	sp, #12
 800aa38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aa3a:	4b12      	ldr	r3, [pc, #72]	; (800aa84 <vPortExitCritical+0x50>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d10a      	bne.n	800aa58 <vPortExitCritical+0x24>
	__asm volatile
 800aa42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa46:	f383 8811 	msr	BASEPRI, r3
 800aa4a:	f3bf 8f6f 	isb	sy
 800aa4e:	f3bf 8f4f 	dsb	sy
 800aa52:	607b      	str	r3, [r7, #4]
}
 800aa54:	bf00      	nop
 800aa56:	e7fe      	b.n	800aa56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800aa58:	4b0a      	ldr	r3, [pc, #40]	; (800aa84 <vPortExitCritical+0x50>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	3b01      	subs	r3, #1
 800aa5e:	4a09      	ldr	r2, [pc, #36]	; (800aa84 <vPortExitCritical+0x50>)
 800aa60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aa62:	4b08      	ldr	r3, [pc, #32]	; (800aa84 <vPortExitCritical+0x50>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d105      	bne.n	800aa76 <vPortExitCritical+0x42>
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	f383 8811 	msr	BASEPRI, r3
}
 800aa74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aa76:	bf00      	nop
 800aa78:	370c      	adds	r7, #12
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa80:	4770      	bx	lr
 800aa82:	bf00      	nop
 800aa84:	20000064 	.word	0x20000064
	...

0800aa90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aa90:	f3ef 8009 	mrs	r0, PSP
 800aa94:	f3bf 8f6f 	isb	sy
 800aa98:	4b15      	ldr	r3, [pc, #84]	; (800aaf0 <pxCurrentTCBConst>)
 800aa9a:	681a      	ldr	r2, [r3, #0]
 800aa9c:	f01e 0f10 	tst.w	lr, #16
 800aaa0:	bf08      	it	eq
 800aaa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aaa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaaa:	6010      	str	r0, [r2, #0]
 800aaac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aab0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aab4:	f380 8811 	msr	BASEPRI, r0
 800aab8:	f3bf 8f4f 	dsb	sy
 800aabc:	f3bf 8f6f 	isb	sy
 800aac0:	f7fe ffc0 	bl	8009a44 <vTaskSwitchContext>
 800aac4:	f04f 0000 	mov.w	r0, #0
 800aac8:	f380 8811 	msr	BASEPRI, r0
 800aacc:	bc09      	pop	{r0, r3}
 800aace:	6819      	ldr	r1, [r3, #0]
 800aad0:	6808      	ldr	r0, [r1, #0]
 800aad2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aad6:	f01e 0f10 	tst.w	lr, #16
 800aada:	bf08      	it	eq
 800aadc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aae0:	f380 8809 	msr	PSP, r0
 800aae4:	f3bf 8f6f 	isb	sy
 800aae8:	4770      	bx	lr
 800aaea:	bf00      	nop
 800aaec:	f3af 8000 	nop.w

0800aaf0 <pxCurrentTCBConst>:
 800aaf0:	200013d4 	.word	0x200013d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aaf4:	bf00      	nop
 800aaf6:	bf00      	nop

0800aaf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b082      	sub	sp, #8
 800aafc:	af00      	add	r7, sp, #0
	__asm volatile
 800aafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab02:	f383 8811 	msr	BASEPRI, r3
 800ab06:	f3bf 8f6f 	isb	sy
 800ab0a:	f3bf 8f4f 	dsb	sy
 800ab0e:	607b      	str	r3, [r7, #4]
}
 800ab10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ab12:	f7fe ff01 	bl	8009918 <xTaskIncrementTick>
 800ab16:	4603      	mov	r3, r0
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d003      	beq.n	800ab24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ab1c:	4b06      	ldr	r3, [pc, #24]	; (800ab38 <xPortSysTickHandler+0x40>)
 800ab1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab22:	601a      	str	r2, [r3, #0]
 800ab24:	2300      	movs	r3, #0
 800ab26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	f383 8811 	msr	BASEPRI, r3
}
 800ab2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ab30:	bf00      	nop
 800ab32:	3708      	adds	r7, #8
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}
 800ab38:	e000ed04 	.word	0xe000ed04

0800ab3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ab40:	4b0b      	ldr	r3, [pc, #44]	; (800ab70 <vPortSetupTimerInterrupt+0x34>)
 800ab42:	2200      	movs	r2, #0
 800ab44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ab46:	4b0b      	ldr	r3, [pc, #44]	; (800ab74 <vPortSetupTimerInterrupt+0x38>)
 800ab48:	2200      	movs	r2, #0
 800ab4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ab4c:	4b0a      	ldr	r3, [pc, #40]	; (800ab78 <vPortSetupTimerInterrupt+0x3c>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4a0a      	ldr	r2, [pc, #40]	; (800ab7c <vPortSetupTimerInterrupt+0x40>)
 800ab52:	fba2 2303 	umull	r2, r3, r2, r3
 800ab56:	099b      	lsrs	r3, r3, #6
 800ab58:	4a09      	ldr	r2, [pc, #36]	; (800ab80 <vPortSetupTimerInterrupt+0x44>)
 800ab5a:	3b01      	subs	r3, #1
 800ab5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ab5e:	4b04      	ldr	r3, [pc, #16]	; (800ab70 <vPortSetupTimerInterrupt+0x34>)
 800ab60:	2207      	movs	r2, #7
 800ab62:	601a      	str	r2, [r3, #0]
}
 800ab64:	bf00      	nop
 800ab66:	46bd      	mov	sp, r7
 800ab68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6c:	4770      	bx	lr
 800ab6e:	bf00      	nop
 800ab70:	e000e010 	.word	0xe000e010
 800ab74:	e000e018 	.word	0xe000e018
 800ab78:	20000058 	.word	0x20000058
 800ab7c:	10624dd3 	.word	0x10624dd3
 800ab80:	e000e014 	.word	0xe000e014

0800ab84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ab84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ab94 <vPortEnableVFP+0x10>
 800ab88:	6801      	ldr	r1, [r0, #0]
 800ab8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ab8e:	6001      	str	r1, [r0, #0]
 800ab90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ab92:	bf00      	nop
 800ab94:	e000ed88 	.word	0xe000ed88

0800ab98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ab98:	b480      	push	{r7}
 800ab9a:	b085      	sub	sp, #20
 800ab9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ab9e:	f3ef 8305 	mrs	r3, IPSR
 800aba2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2b0f      	cmp	r3, #15
 800aba8:	d914      	bls.n	800abd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800abaa:	4a17      	ldr	r2, [pc, #92]	; (800ac08 <vPortValidateInterruptPriority+0x70>)
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	4413      	add	r3, r2
 800abb0:	781b      	ldrb	r3, [r3, #0]
 800abb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800abb4:	4b15      	ldr	r3, [pc, #84]	; (800ac0c <vPortValidateInterruptPriority+0x74>)
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	7afa      	ldrb	r2, [r7, #11]
 800abba:	429a      	cmp	r2, r3
 800abbc:	d20a      	bcs.n	800abd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800abbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc2:	f383 8811 	msr	BASEPRI, r3
 800abc6:	f3bf 8f6f 	isb	sy
 800abca:	f3bf 8f4f 	dsb	sy
 800abce:	607b      	str	r3, [r7, #4]
}
 800abd0:	bf00      	nop
 800abd2:	e7fe      	b.n	800abd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800abd4:	4b0e      	ldr	r3, [pc, #56]	; (800ac10 <vPortValidateInterruptPriority+0x78>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800abdc:	4b0d      	ldr	r3, [pc, #52]	; (800ac14 <vPortValidateInterruptPriority+0x7c>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d90a      	bls.n	800abfa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800abe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe8:	f383 8811 	msr	BASEPRI, r3
 800abec:	f3bf 8f6f 	isb	sy
 800abf0:	f3bf 8f4f 	dsb	sy
 800abf4:	603b      	str	r3, [r7, #0]
}
 800abf6:	bf00      	nop
 800abf8:	e7fe      	b.n	800abf8 <vPortValidateInterruptPriority+0x60>
	}
 800abfa:	bf00      	nop
 800abfc:	3714      	adds	r7, #20
 800abfe:	46bd      	mov	sp, r7
 800ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac04:	4770      	bx	lr
 800ac06:	bf00      	nop
 800ac08:	e000e3f0 	.word	0xe000e3f0
 800ac0c:	20001a00 	.word	0x20001a00
 800ac10:	e000ed0c 	.word	0xe000ed0c
 800ac14:	20001a04 	.word	0x20001a04

0800ac18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b08a      	sub	sp, #40	; 0x28
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ac20:	2300      	movs	r3, #0
 800ac22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ac24:	f7fe fdca 	bl	80097bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ac28:	4b5b      	ldr	r3, [pc, #364]	; (800ad98 <pvPortMalloc+0x180>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d101      	bne.n	800ac34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ac30:	f000 f920 	bl	800ae74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ac34:	4b59      	ldr	r3, [pc, #356]	; (800ad9c <pvPortMalloc+0x184>)
 800ac36:	681a      	ldr	r2, [r3, #0]
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	4013      	ands	r3, r2
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	f040 8093 	bne.w	800ad68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d01d      	beq.n	800ac84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ac48:	2208      	movs	r2, #8
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	4413      	add	r3, r2
 800ac4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f003 0307 	and.w	r3, r3, #7
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d014      	beq.n	800ac84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f023 0307 	bic.w	r3, r3, #7
 800ac60:	3308      	adds	r3, #8
 800ac62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f003 0307 	and.w	r3, r3, #7
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d00a      	beq.n	800ac84 <pvPortMalloc+0x6c>
	__asm volatile
 800ac6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac72:	f383 8811 	msr	BASEPRI, r3
 800ac76:	f3bf 8f6f 	isb	sy
 800ac7a:	f3bf 8f4f 	dsb	sy
 800ac7e:	617b      	str	r3, [r7, #20]
}
 800ac80:	bf00      	nop
 800ac82:	e7fe      	b.n	800ac82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d06e      	beq.n	800ad68 <pvPortMalloc+0x150>
 800ac8a:	4b45      	ldr	r3, [pc, #276]	; (800ada0 <pvPortMalloc+0x188>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	429a      	cmp	r2, r3
 800ac92:	d869      	bhi.n	800ad68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ac94:	4b43      	ldr	r3, [pc, #268]	; (800ada4 <pvPortMalloc+0x18c>)
 800ac96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ac98:	4b42      	ldr	r3, [pc, #264]	; (800ada4 <pvPortMalloc+0x18c>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac9e:	e004      	b.n	800acaa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800aca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800acaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	687a      	ldr	r2, [r7, #4]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d903      	bls.n	800acbc <pvPortMalloc+0xa4>
 800acb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d1f1      	bne.n	800aca0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800acbc:	4b36      	ldr	r3, [pc, #216]	; (800ad98 <pvPortMalloc+0x180>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acc2:	429a      	cmp	r2, r3
 800acc4:	d050      	beq.n	800ad68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800acc6:	6a3b      	ldr	r3, [r7, #32]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	2208      	movs	r2, #8
 800accc:	4413      	add	r3, r2
 800acce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800acd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd2:	681a      	ldr	r2, [r3, #0]
 800acd4:	6a3b      	ldr	r3, [r7, #32]
 800acd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800acd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acda:	685a      	ldr	r2, [r3, #4]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	1ad2      	subs	r2, r2, r3
 800ace0:	2308      	movs	r3, #8
 800ace2:	005b      	lsls	r3, r3, #1
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d91f      	bls.n	800ad28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ace8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	4413      	add	r3, r2
 800acee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800acf0:	69bb      	ldr	r3, [r7, #24]
 800acf2:	f003 0307 	and.w	r3, r3, #7
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d00a      	beq.n	800ad10 <pvPortMalloc+0xf8>
	__asm volatile
 800acfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acfe:	f383 8811 	msr	BASEPRI, r3
 800ad02:	f3bf 8f6f 	isb	sy
 800ad06:	f3bf 8f4f 	dsb	sy
 800ad0a:	613b      	str	r3, [r7, #16]
}
 800ad0c:	bf00      	nop
 800ad0e:	e7fe      	b.n	800ad0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ad10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad12:	685a      	ldr	r2, [r3, #4]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	1ad2      	subs	r2, r2, r3
 800ad18:	69bb      	ldr	r3, [r7, #24]
 800ad1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ad1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad1e:	687a      	ldr	r2, [r7, #4]
 800ad20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ad22:	69b8      	ldr	r0, [r7, #24]
 800ad24:	f000 f908 	bl	800af38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ad28:	4b1d      	ldr	r3, [pc, #116]	; (800ada0 <pvPortMalloc+0x188>)
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	1ad3      	subs	r3, r2, r3
 800ad32:	4a1b      	ldr	r2, [pc, #108]	; (800ada0 <pvPortMalloc+0x188>)
 800ad34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ad36:	4b1a      	ldr	r3, [pc, #104]	; (800ada0 <pvPortMalloc+0x188>)
 800ad38:	681a      	ldr	r2, [r3, #0]
 800ad3a:	4b1b      	ldr	r3, [pc, #108]	; (800ada8 <pvPortMalloc+0x190>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d203      	bcs.n	800ad4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ad42:	4b17      	ldr	r3, [pc, #92]	; (800ada0 <pvPortMalloc+0x188>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	4a18      	ldr	r2, [pc, #96]	; (800ada8 <pvPortMalloc+0x190>)
 800ad48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ad4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad4c:	685a      	ldr	r2, [r3, #4]
 800ad4e:	4b13      	ldr	r3, [pc, #76]	; (800ad9c <pvPortMalloc+0x184>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	431a      	orrs	r2, r3
 800ad54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ad58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ad5e:	4b13      	ldr	r3, [pc, #76]	; (800adac <pvPortMalloc+0x194>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	3301      	adds	r3, #1
 800ad64:	4a11      	ldr	r2, [pc, #68]	; (800adac <pvPortMalloc+0x194>)
 800ad66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ad68:	f7fe fd36 	bl	80097d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad6c:	69fb      	ldr	r3, [r7, #28]
 800ad6e:	f003 0307 	and.w	r3, r3, #7
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d00a      	beq.n	800ad8c <pvPortMalloc+0x174>
	__asm volatile
 800ad76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad7a:	f383 8811 	msr	BASEPRI, r3
 800ad7e:	f3bf 8f6f 	isb	sy
 800ad82:	f3bf 8f4f 	dsb	sy
 800ad86:	60fb      	str	r3, [r7, #12]
}
 800ad88:	bf00      	nop
 800ad8a:	e7fe      	b.n	800ad8a <pvPortMalloc+0x172>
	return pvReturn;
 800ad8c:	69fb      	ldr	r3, [r7, #28]
}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3728      	adds	r7, #40	; 0x28
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}
 800ad96:	bf00      	nop
 800ad98:	20005610 	.word	0x20005610
 800ad9c:	20005624 	.word	0x20005624
 800ada0:	20005614 	.word	0x20005614
 800ada4:	20005608 	.word	0x20005608
 800ada8:	20005618 	.word	0x20005618
 800adac:	2000561c 	.word	0x2000561c

0800adb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b086      	sub	sp, #24
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d04d      	beq.n	800ae5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800adc2:	2308      	movs	r3, #8
 800adc4:	425b      	negs	r3, r3
 800adc6:	697a      	ldr	r2, [r7, #20]
 800adc8:	4413      	add	r3, r2
 800adca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	685a      	ldr	r2, [r3, #4]
 800add4:	4b24      	ldr	r3, [pc, #144]	; (800ae68 <vPortFree+0xb8>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4013      	ands	r3, r2
 800adda:	2b00      	cmp	r3, #0
 800addc:	d10a      	bne.n	800adf4 <vPortFree+0x44>
	__asm volatile
 800adde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade2:	f383 8811 	msr	BASEPRI, r3
 800ade6:	f3bf 8f6f 	isb	sy
 800adea:	f3bf 8f4f 	dsb	sy
 800adee:	60fb      	str	r3, [r7, #12]
}
 800adf0:	bf00      	nop
 800adf2:	e7fe      	b.n	800adf2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d00a      	beq.n	800ae12 <vPortFree+0x62>
	__asm volatile
 800adfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae00:	f383 8811 	msr	BASEPRI, r3
 800ae04:	f3bf 8f6f 	isb	sy
 800ae08:	f3bf 8f4f 	dsb	sy
 800ae0c:	60bb      	str	r3, [r7, #8]
}
 800ae0e:	bf00      	nop
 800ae10:	e7fe      	b.n	800ae10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	685a      	ldr	r2, [r3, #4]
 800ae16:	4b14      	ldr	r3, [pc, #80]	; (800ae68 <vPortFree+0xb8>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	4013      	ands	r3, r2
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d01e      	beq.n	800ae5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d11a      	bne.n	800ae5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	685a      	ldr	r2, [r3, #4]
 800ae2c:	4b0e      	ldr	r3, [pc, #56]	; (800ae68 <vPortFree+0xb8>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	43db      	mvns	r3, r3
 800ae32:	401a      	ands	r2, r3
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ae38:	f7fe fcc0 	bl	80097bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	685a      	ldr	r2, [r3, #4]
 800ae40:	4b0a      	ldr	r3, [pc, #40]	; (800ae6c <vPortFree+0xbc>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	4413      	add	r3, r2
 800ae46:	4a09      	ldr	r2, [pc, #36]	; (800ae6c <vPortFree+0xbc>)
 800ae48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ae4a:	6938      	ldr	r0, [r7, #16]
 800ae4c:	f000 f874 	bl	800af38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ae50:	4b07      	ldr	r3, [pc, #28]	; (800ae70 <vPortFree+0xc0>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	3301      	adds	r3, #1
 800ae56:	4a06      	ldr	r2, [pc, #24]	; (800ae70 <vPortFree+0xc0>)
 800ae58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ae5a:	f7fe fcbd 	bl	80097d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ae5e:	bf00      	nop
 800ae60:	3718      	adds	r7, #24
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}
 800ae66:	bf00      	nop
 800ae68:	20005624 	.word	0x20005624
 800ae6c:	20005614 	.word	0x20005614
 800ae70:	20005620 	.word	0x20005620

0800ae74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ae74:	b480      	push	{r7}
 800ae76:	b085      	sub	sp, #20
 800ae78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ae7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ae7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ae80:	4b27      	ldr	r3, [pc, #156]	; (800af20 <prvHeapInit+0xac>)
 800ae82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f003 0307 	and.w	r3, r3, #7
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d00c      	beq.n	800aea8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	3307      	adds	r3, #7
 800ae92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f023 0307 	bic.w	r3, r3, #7
 800ae9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ae9c:	68ba      	ldr	r2, [r7, #8]
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	1ad3      	subs	r3, r2, r3
 800aea2:	4a1f      	ldr	r2, [pc, #124]	; (800af20 <prvHeapInit+0xac>)
 800aea4:	4413      	add	r3, r2
 800aea6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aeac:	4a1d      	ldr	r2, [pc, #116]	; (800af24 <prvHeapInit+0xb0>)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aeb2:	4b1c      	ldr	r3, [pc, #112]	; (800af24 <prvHeapInit+0xb0>)
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	68ba      	ldr	r2, [r7, #8]
 800aebc:	4413      	add	r3, r2
 800aebe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aec0:	2208      	movs	r2, #8
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	1a9b      	subs	r3, r3, r2
 800aec6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	f023 0307 	bic.w	r3, r3, #7
 800aece:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	4a15      	ldr	r2, [pc, #84]	; (800af28 <prvHeapInit+0xb4>)
 800aed4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aed6:	4b14      	ldr	r3, [pc, #80]	; (800af28 <prvHeapInit+0xb4>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	2200      	movs	r2, #0
 800aedc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aede:	4b12      	ldr	r3, [pc, #72]	; (800af28 <prvHeapInit+0xb4>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	2200      	movs	r2, #0
 800aee4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	68fa      	ldr	r2, [r7, #12]
 800aeee:	1ad2      	subs	r2, r2, r3
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aef4:	4b0c      	ldr	r3, [pc, #48]	; (800af28 <prvHeapInit+0xb4>)
 800aef6:	681a      	ldr	r2, [r3, #0]
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	4a0a      	ldr	r2, [pc, #40]	; (800af2c <prvHeapInit+0xb8>)
 800af02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	4a09      	ldr	r2, [pc, #36]	; (800af30 <prvHeapInit+0xbc>)
 800af0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800af0c:	4b09      	ldr	r3, [pc, #36]	; (800af34 <prvHeapInit+0xc0>)
 800af0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800af12:	601a      	str	r2, [r3, #0]
}
 800af14:	bf00      	nop
 800af16:	3714      	adds	r7, #20
 800af18:	46bd      	mov	sp, r7
 800af1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1e:	4770      	bx	lr
 800af20:	20001a08 	.word	0x20001a08
 800af24:	20005608 	.word	0x20005608
 800af28:	20005610 	.word	0x20005610
 800af2c:	20005618 	.word	0x20005618
 800af30:	20005614 	.word	0x20005614
 800af34:	20005624 	.word	0x20005624

0800af38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800af38:	b480      	push	{r7}
 800af3a:	b085      	sub	sp, #20
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800af40:	4b28      	ldr	r3, [pc, #160]	; (800afe4 <prvInsertBlockIntoFreeList+0xac>)
 800af42:	60fb      	str	r3, [r7, #12]
 800af44:	e002      	b.n	800af4c <prvInsertBlockIntoFreeList+0x14>
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	60fb      	str	r3, [r7, #12]
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	687a      	ldr	r2, [r7, #4]
 800af52:	429a      	cmp	r2, r3
 800af54:	d8f7      	bhi.n	800af46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	68ba      	ldr	r2, [r7, #8]
 800af60:	4413      	add	r3, r2
 800af62:	687a      	ldr	r2, [r7, #4]
 800af64:	429a      	cmp	r2, r3
 800af66:	d108      	bne.n	800af7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	685a      	ldr	r2, [r3, #4]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	685b      	ldr	r3, [r3, #4]
 800af70:	441a      	add	r2, r3
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	68ba      	ldr	r2, [r7, #8]
 800af84:	441a      	add	r2, r3
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	429a      	cmp	r2, r3
 800af8c:	d118      	bne.n	800afc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	681a      	ldr	r2, [r3, #0]
 800af92:	4b15      	ldr	r3, [pc, #84]	; (800afe8 <prvInsertBlockIntoFreeList+0xb0>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	429a      	cmp	r2, r3
 800af98:	d00d      	beq.n	800afb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	685a      	ldr	r2, [r3, #4]
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	441a      	add	r2, r3
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	681a      	ldr	r2, [r3, #0]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	601a      	str	r2, [r3, #0]
 800afb4:	e008      	b.n	800afc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800afb6:	4b0c      	ldr	r3, [pc, #48]	; (800afe8 <prvInsertBlockIntoFreeList+0xb0>)
 800afb8:	681a      	ldr	r2, [r3, #0]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	601a      	str	r2, [r3, #0]
 800afbe:	e003      	b.n	800afc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	681a      	ldr	r2, [r3, #0]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800afc8:	68fa      	ldr	r2, [r7, #12]
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	429a      	cmp	r2, r3
 800afce:	d002      	beq.n	800afd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	687a      	ldr	r2, [r7, #4]
 800afd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800afd6:	bf00      	nop
 800afd8:	3714      	adds	r7, #20
 800afda:	46bd      	mov	sp, r7
 800afdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe0:	4770      	bx	lr
 800afe2:	bf00      	nop
 800afe4:	20005608 	.word	0x20005608
 800afe8:	20005610 	.word	0x20005610

0800afec <_Znwj>:
 800afec:	2801      	cmp	r0, #1
 800afee:	bf38      	it	cc
 800aff0:	2001      	movcc	r0, #1
 800aff2:	b510      	push	{r4, lr}
 800aff4:	4604      	mov	r4, r0
 800aff6:	4620      	mov	r0, r4
 800aff8:	f000 f93a 	bl	800b270 <malloc>
 800affc:	b930      	cbnz	r0, 800b00c <_Znwj+0x20>
 800affe:	f000 f807 	bl	800b010 <_ZSt15get_new_handlerv>
 800b002:	b908      	cbnz	r0, 800b008 <_Znwj+0x1c>
 800b004:	f000 f80c 	bl	800b020 <abort>
 800b008:	4780      	blx	r0
 800b00a:	e7f4      	b.n	800aff6 <_Znwj+0xa>
 800b00c:	bd10      	pop	{r4, pc}
	...

0800b010 <_ZSt15get_new_handlerv>:
 800b010:	4b02      	ldr	r3, [pc, #8]	; (800b01c <_ZSt15get_new_handlerv+0xc>)
 800b012:	6818      	ldr	r0, [r3, #0]
 800b014:	f3bf 8f5b 	dmb	ish
 800b018:	4770      	bx	lr
 800b01a:	bf00      	nop
 800b01c:	20005628 	.word	0x20005628

0800b020 <abort>:
 800b020:	b508      	push	{r3, lr}
 800b022:	2006      	movs	r0, #6
 800b024:	f000 ffd2 	bl	800bfcc <raise>
 800b028:	2001      	movs	r0, #1
 800b02a:	f7f7 fe25 	bl	8002c78 <_exit>
	...

0800b030 <__errno>:
 800b030:	4b01      	ldr	r3, [pc, #4]	; (800b038 <__errno+0x8>)
 800b032:	6818      	ldr	r0, [r3, #0]
 800b034:	4770      	bx	lr
 800b036:	bf00      	nop
 800b038:	20000068 	.word	0x20000068

0800b03c <std>:
 800b03c:	2300      	movs	r3, #0
 800b03e:	b510      	push	{r4, lr}
 800b040:	4604      	mov	r4, r0
 800b042:	e9c0 3300 	strd	r3, r3, [r0]
 800b046:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b04a:	6083      	str	r3, [r0, #8]
 800b04c:	8181      	strh	r1, [r0, #12]
 800b04e:	6643      	str	r3, [r0, #100]	; 0x64
 800b050:	81c2      	strh	r2, [r0, #14]
 800b052:	6183      	str	r3, [r0, #24]
 800b054:	4619      	mov	r1, r3
 800b056:	2208      	movs	r2, #8
 800b058:	305c      	adds	r0, #92	; 0x5c
 800b05a:	f000 f91f 	bl	800b29c <memset>
 800b05e:	4b05      	ldr	r3, [pc, #20]	; (800b074 <std+0x38>)
 800b060:	6263      	str	r3, [r4, #36]	; 0x24
 800b062:	4b05      	ldr	r3, [pc, #20]	; (800b078 <std+0x3c>)
 800b064:	62a3      	str	r3, [r4, #40]	; 0x28
 800b066:	4b05      	ldr	r3, [pc, #20]	; (800b07c <std+0x40>)
 800b068:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b06a:	4b05      	ldr	r3, [pc, #20]	; (800b080 <std+0x44>)
 800b06c:	6224      	str	r4, [r4, #32]
 800b06e:	6323      	str	r3, [r4, #48]	; 0x30
 800b070:	bd10      	pop	{r4, pc}
 800b072:	bf00      	nop
 800b074:	0800c0ad 	.word	0x0800c0ad
 800b078:	0800c0cf 	.word	0x0800c0cf
 800b07c:	0800c107 	.word	0x0800c107
 800b080:	0800c12b 	.word	0x0800c12b

0800b084 <_cleanup_r>:
 800b084:	4901      	ldr	r1, [pc, #4]	; (800b08c <_cleanup_r+0x8>)
 800b086:	f000 b8af 	b.w	800b1e8 <_fwalk_reent>
 800b08a:	bf00      	nop
 800b08c:	0800d211 	.word	0x0800d211

0800b090 <__sfmoreglue>:
 800b090:	b570      	push	{r4, r5, r6, lr}
 800b092:	2268      	movs	r2, #104	; 0x68
 800b094:	1e4d      	subs	r5, r1, #1
 800b096:	4355      	muls	r5, r2
 800b098:	460e      	mov	r6, r1
 800b09a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b09e:	f000 f971 	bl	800b384 <_malloc_r>
 800b0a2:	4604      	mov	r4, r0
 800b0a4:	b140      	cbz	r0, 800b0b8 <__sfmoreglue+0x28>
 800b0a6:	2100      	movs	r1, #0
 800b0a8:	e9c0 1600 	strd	r1, r6, [r0]
 800b0ac:	300c      	adds	r0, #12
 800b0ae:	60a0      	str	r0, [r4, #8]
 800b0b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b0b4:	f000 f8f2 	bl	800b29c <memset>
 800b0b8:	4620      	mov	r0, r4
 800b0ba:	bd70      	pop	{r4, r5, r6, pc}

0800b0bc <__sfp_lock_acquire>:
 800b0bc:	4801      	ldr	r0, [pc, #4]	; (800b0c4 <__sfp_lock_acquire+0x8>)
 800b0be:	f7f7 bf65 	b.w	8002f8c <__retarget_lock_acquire_recursive>
 800b0c2:	bf00      	nop
 800b0c4:	200005fc 	.word	0x200005fc

0800b0c8 <__sfp_lock_release>:
 800b0c8:	4801      	ldr	r0, [pc, #4]	; (800b0d0 <__sfp_lock_release+0x8>)
 800b0ca:	f7f7 bf73 	b.w	8002fb4 <__retarget_lock_release_recursive>
 800b0ce:	bf00      	nop
 800b0d0:	200005fc 	.word	0x200005fc

0800b0d4 <__sinit_lock_acquire>:
 800b0d4:	4801      	ldr	r0, [pc, #4]	; (800b0dc <__sinit_lock_acquire+0x8>)
 800b0d6:	f7f7 bf59 	b.w	8002f8c <__retarget_lock_acquire_recursive>
 800b0da:	bf00      	nop
 800b0dc:	200005f0 	.word	0x200005f0

0800b0e0 <__sinit_lock_release>:
 800b0e0:	4801      	ldr	r0, [pc, #4]	; (800b0e8 <__sinit_lock_release+0x8>)
 800b0e2:	f7f7 bf67 	b.w	8002fb4 <__retarget_lock_release_recursive>
 800b0e6:	bf00      	nop
 800b0e8:	200005f0 	.word	0x200005f0

0800b0ec <__sinit>:
 800b0ec:	b510      	push	{r4, lr}
 800b0ee:	4604      	mov	r4, r0
 800b0f0:	f7ff fff0 	bl	800b0d4 <__sinit_lock_acquire>
 800b0f4:	69a3      	ldr	r3, [r4, #24]
 800b0f6:	b11b      	cbz	r3, 800b100 <__sinit+0x14>
 800b0f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0fc:	f7ff bff0 	b.w	800b0e0 <__sinit_lock_release>
 800b100:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b104:	6523      	str	r3, [r4, #80]	; 0x50
 800b106:	4b13      	ldr	r3, [pc, #76]	; (800b154 <__sinit+0x68>)
 800b108:	4a13      	ldr	r2, [pc, #76]	; (800b158 <__sinit+0x6c>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b10e:	42a3      	cmp	r3, r4
 800b110:	bf04      	itt	eq
 800b112:	2301      	moveq	r3, #1
 800b114:	61a3      	streq	r3, [r4, #24]
 800b116:	4620      	mov	r0, r4
 800b118:	f000 f820 	bl	800b15c <__sfp>
 800b11c:	6060      	str	r0, [r4, #4]
 800b11e:	4620      	mov	r0, r4
 800b120:	f000 f81c 	bl	800b15c <__sfp>
 800b124:	60a0      	str	r0, [r4, #8]
 800b126:	4620      	mov	r0, r4
 800b128:	f000 f818 	bl	800b15c <__sfp>
 800b12c:	2200      	movs	r2, #0
 800b12e:	60e0      	str	r0, [r4, #12]
 800b130:	2104      	movs	r1, #4
 800b132:	6860      	ldr	r0, [r4, #4]
 800b134:	f7ff ff82 	bl	800b03c <std>
 800b138:	68a0      	ldr	r0, [r4, #8]
 800b13a:	2201      	movs	r2, #1
 800b13c:	2109      	movs	r1, #9
 800b13e:	f7ff ff7d 	bl	800b03c <std>
 800b142:	68e0      	ldr	r0, [r4, #12]
 800b144:	2202      	movs	r2, #2
 800b146:	2112      	movs	r1, #18
 800b148:	f7ff ff78 	bl	800b03c <std>
 800b14c:	2301      	movs	r3, #1
 800b14e:	61a3      	str	r3, [r4, #24]
 800b150:	e7d2      	b.n	800b0f8 <__sinit+0xc>
 800b152:	bf00      	nop
 800b154:	0800e45c 	.word	0x0800e45c
 800b158:	0800b085 	.word	0x0800b085

0800b15c <__sfp>:
 800b15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b15e:	4607      	mov	r7, r0
 800b160:	f7ff ffac 	bl	800b0bc <__sfp_lock_acquire>
 800b164:	4b1e      	ldr	r3, [pc, #120]	; (800b1e0 <__sfp+0x84>)
 800b166:	681e      	ldr	r6, [r3, #0]
 800b168:	69b3      	ldr	r3, [r6, #24]
 800b16a:	b913      	cbnz	r3, 800b172 <__sfp+0x16>
 800b16c:	4630      	mov	r0, r6
 800b16e:	f7ff ffbd 	bl	800b0ec <__sinit>
 800b172:	3648      	adds	r6, #72	; 0x48
 800b174:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b178:	3b01      	subs	r3, #1
 800b17a:	d503      	bpl.n	800b184 <__sfp+0x28>
 800b17c:	6833      	ldr	r3, [r6, #0]
 800b17e:	b30b      	cbz	r3, 800b1c4 <__sfp+0x68>
 800b180:	6836      	ldr	r6, [r6, #0]
 800b182:	e7f7      	b.n	800b174 <__sfp+0x18>
 800b184:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b188:	b9d5      	cbnz	r5, 800b1c0 <__sfp+0x64>
 800b18a:	4b16      	ldr	r3, [pc, #88]	; (800b1e4 <__sfp+0x88>)
 800b18c:	60e3      	str	r3, [r4, #12]
 800b18e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b192:	6665      	str	r5, [r4, #100]	; 0x64
 800b194:	f7f7 fed4 	bl	8002f40 <__retarget_lock_init_recursive>
 800b198:	f7ff ff96 	bl	800b0c8 <__sfp_lock_release>
 800b19c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b1a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b1a4:	6025      	str	r5, [r4, #0]
 800b1a6:	61a5      	str	r5, [r4, #24]
 800b1a8:	2208      	movs	r2, #8
 800b1aa:	4629      	mov	r1, r5
 800b1ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b1b0:	f000 f874 	bl	800b29c <memset>
 800b1b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b1b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b1bc:	4620      	mov	r0, r4
 800b1be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1c0:	3468      	adds	r4, #104	; 0x68
 800b1c2:	e7d9      	b.n	800b178 <__sfp+0x1c>
 800b1c4:	2104      	movs	r1, #4
 800b1c6:	4638      	mov	r0, r7
 800b1c8:	f7ff ff62 	bl	800b090 <__sfmoreglue>
 800b1cc:	4604      	mov	r4, r0
 800b1ce:	6030      	str	r0, [r6, #0]
 800b1d0:	2800      	cmp	r0, #0
 800b1d2:	d1d5      	bne.n	800b180 <__sfp+0x24>
 800b1d4:	f7ff ff78 	bl	800b0c8 <__sfp_lock_release>
 800b1d8:	230c      	movs	r3, #12
 800b1da:	603b      	str	r3, [r7, #0]
 800b1dc:	e7ee      	b.n	800b1bc <__sfp+0x60>
 800b1de:	bf00      	nop
 800b1e0:	0800e45c 	.word	0x0800e45c
 800b1e4:	ffff0001 	.word	0xffff0001

0800b1e8 <_fwalk_reent>:
 800b1e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1ec:	4606      	mov	r6, r0
 800b1ee:	4688      	mov	r8, r1
 800b1f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b1f4:	2700      	movs	r7, #0
 800b1f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b1fa:	f1b9 0901 	subs.w	r9, r9, #1
 800b1fe:	d505      	bpl.n	800b20c <_fwalk_reent+0x24>
 800b200:	6824      	ldr	r4, [r4, #0]
 800b202:	2c00      	cmp	r4, #0
 800b204:	d1f7      	bne.n	800b1f6 <_fwalk_reent+0xe>
 800b206:	4638      	mov	r0, r7
 800b208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b20c:	89ab      	ldrh	r3, [r5, #12]
 800b20e:	2b01      	cmp	r3, #1
 800b210:	d907      	bls.n	800b222 <_fwalk_reent+0x3a>
 800b212:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b216:	3301      	adds	r3, #1
 800b218:	d003      	beq.n	800b222 <_fwalk_reent+0x3a>
 800b21a:	4629      	mov	r1, r5
 800b21c:	4630      	mov	r0, r6
 800b21e:	47c0      	blx	r8
 800b220:	4307      	orrs	r7, r0
 800b222:	3568      	adds	r5, #104	; 0x68
 800b224:	e7e9      	b.n	800b1fa <_fwalk_reent+0x12>
	...

0800b228 <__libc_init_array>:
 800b228:	b570      	push	{r4, r5, r6, lr}
 800b22a:	4d0d      	ldr	r5, [pc, #52]	; (800b260 <__libc_init_array+0x38>)
 800b22c:	4c0d      	ldr	r4, [pc, #52]	; (800b264 <__libc_init_array+0x3c>)
 800b22e:	1b64      	subs	r4, r4, r5
 800b230:	10a4      	asrs	r4, r4, #2
 800b232:	2600      	movs	r6, #0
 800b234:	42a6      	cmp	r6, r4
 800b236:	d109      	bne.n	800b24c <__libc_init_array+0x24>
 800b238:	4d0b      	ldr	r5, [pc, #44]	; (800b268 <__libc_init_array+0x40>)
 800b23a:	4c0c      	ldr	r4, [pc, #48]	; (800b26c <__libc_init_array+0x44>)
 800b23c:	f003 f818 	bl	800e270 <_init>
 800b240:	1b64      	subs	r4, r4, r5
 800b242:	10a4      	asrs	r4, r4, #2
 800b244:	2600      	movs	r6, #0
 800b246:	42a6      	cmp	r6, r4
 800b248:	d105      	bne.n	800b256 <__libc_init_array+0x2e>
 800b24a:	bd70      	pop	{r4, r5, r6, pc}
 800b24c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b250:	4798      	blx	r3
 800b252:	3601      	adds	r6, #1
 800b254:	e7ee      	b.n	800b234 <__libc_init_array+0xc>
 800b256:	f855 3b04 	ldr.w	r3, [r5], #4
 800b25a:	4798      	blx	r3
 800b25c:	3601      	adds	r6, #1
 800b25e:	e7f2      	b.n	800b246 <__libc_init_array+0x1e>
 800b260:	0800e7e4 	.word	0x0800e7e4
 800b264:	0800e7e4 	.word	0x0800e7e4
 800b268:	0800e7e4 	.word	0x0800e7e4
 800b26c:	0800e7ec 	.word	0x0800e7ec

0800b270 <malloc>:
 800b270:	4b02      	ldr	r3, [pc, #8]	; (800b27c <malloc+0xc>)
 800b272:	4601      	mov	r1, r0
 800b274:	6818      	ldr	r0, [r3, #0]
 800b276:	f000 b885 	b.w	800b384 <_malloc_r>
 800b27a:	bf00      	nop
 800b27c:	20000068 	.word	0x20000068

0800b280 <memcpy>:
 800b280:	440a      	add	r2, r1
 800b282:	4291      	cmp	r1, r2
 800b284:	f100 33ff 	add.w	r3, r0, #4294967295
 800b288:	d100      	bne.n	800b28c <memcpy+0xc>
 800b28a:	4770      	bx	lr
 800b28c:	b510      	push	{r4, lr}
 800b28e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b292:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b296:	4291      	cmp	r1, r2
 800b298:	d1f9      	bne.n	800b28e <memcpy+0xe>
 800b29a:	bd10      	pop	{r4, pc}

0800b29c <memset>:
 800b29c:	4402      	add	r2, r0
 800b29e:	4603      	mov	r3, r0
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	d100      	bne.n	800b2a6 <memset+0xa>
 800b2a4:	4770      	bx	lr
 800b2a6:	f803 1b01 	strb.w	r1, [r3], #1
 800b2aa:	e7f9      	b.n	800b2a0 <memset+0x4>

0800b2ac <_free_r>:
 800b2ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b2ae:	2900      	cmp	r1, #0
 800b2b0:	d044      	beq.n	800b33c <_free_r+0x90>
 800b2b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2b6:	9001      	str	r0, [sp, #4]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	f1a1 0404 	sub.w	r4, r1, #4
 800b2be:	bfb8      	it	lt
 800b2c0:	18e4      	addlt	r4, r4, r3
 800b2c2:	f002 f85d 	bl	800d380 <__malloc_lock>
 800b2c6:	4a1e      	ldr	r2, [pc, #120]	; (800b340 <_free_r+0x94>)
 800b2c8:	9801      	ldr	r0, [sp, #4]
 800b2ca:	6813      	ldr	r3, [r2, #0]
 800b2cc:	b933      	cbnz	r3, 800b2dc <_free_r+0x30>
 800b2ce:	6063      	str	r3, [r4, #4]
 800b2d0:	6014      	str	r4, [r2, #0]
 800b2d2:	b003      	add	sp, #12
 800b2d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b2d8:	f002 b858 	b.w	800d38c <__malloc_unlock>
 800b2dc:	42a3      	cmp	r3, r4
 800b2de:	d908      	bls.n	800b2f2 <_free_r+0x46>
 800b2e0:	6825      	ldr	r5, [r4, #0]
 800b2e2:	1961      	adds	r1, r4, r5
 800b2e4:	428b      	cmp	r3, r1
 800b2e6:	bf01      	itttt	eq
 800b2e8:	6819      	ldreq	r1, [r3, #0]
 800b2ea:	685b      	ldreq	r3, [r3, #4]
 800b2ec:	1949      	addeq	r1, r1, r5
 800b2ee:	6021      	streq	r1, [r4, #0]
 800b2f0:	e7ed      	b.n	800b2ce <_free_r+0x22>
 800b2f2:	461a      	mov	r2, r3
 800b2f4:	685b      	ldr	r3, [r3, #4]
 800b2f6:	b10b      	cbz	r3, 800b2fc <_free_r+0x50>
 800b2f8:	42a3      	cmp	r3, r4
 800b2fa:	d9fa      	bls.n	800b2f2 <_free_r+0x46>
 800b2fc:	6811      	ldr	r1, [r2, #0]
 800b2fe:	1855      	adds	r5, r2, r1
 800b300:	42a5      	cmp	r5, r4
 800b302:	d10b      	bne.n	800b31c <_free_r+0x70>
 800b304:	6824      	ldr	r4, [r4, #0]
 800b306:	4421      	add	r1, r4
 800b308:	1854      	adds	r4, r2, r1
 800b30a:	42a3      	cmp	r3, r4
 800b30c:	6011      	str	r1, [r2, #0]
 800b30e:	d1e0      	bne.n	800b2d2 <_free_r+0x26>
 800b310:	681c      	ldr	r4, [r3, #0]
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	6053      	str	r3, [r2, #4]
 800b316:	4421      	add	r1, r4
 800b318:	6011      	str	r1, [r2, #0]
 800b31a:	e7da      	b.n	800b2d2 <_free_r+0x26>
 800b31c:	d902      	bls.n	800b324 <_free_r+0x78>
 800b31e:	230c      	movs	r3, #12
 800b320:	6003      	str	r3, [r0, #0]
 800b322:	e7d6      	b.n	800b2d2 <_free_r+0x26>
 800b324:	6825      	ldr	r5, [r4, #0]
 800b326:	1961      	adds	r1, r4, r5
 800b328:	428b      	cmp	r3, r1
 800b32a:	bf04      	itt	eq
 800b32c:	6819      	ldreq	r1, [r3, #0]
 800b32e:	685b      	ldreq	r3, [r3, #4]
 800b330:	6063      	str	r3, [r4, #4]
 800b332:	bf04      	itt	eq
 800b334:	1949      	addeq	r1, r1, r5
 800b336:	6021      	streq	r1, [r4, #0]
 800b338:	6054      	str	r4, [r2, #4]
 800b33a:	e7ca      	b.n	800b2d2 <_free_r+0x26>
 800b33c:	b003      	add	sp, #12
 800b33e:	bd30      	pop	{r4, r5, pc}
 800b340:	2000562c 	.word	0x2000562c

0800b344 <sbrk_aligned>:
 800b344:	b570      	push	{r4, r5, r6, lr}
 800b346:	4e0e      	ldr	r6, [pc, #56]	; (800b380 <sbrk_aligned+0x3c>)
 800b348:	460c      	mov	r4, r1
 800b34a:	6831      	ldr	r1, [r6, #0]
 800b34c:	4605      	mov	r5, r0
 800b34e:	b911      	cbnz	r1, 800b356 <sbrk_aligned+0x12>
 800b350:	f000 fe04 	bl	800bf5c <_sbrk_r>
 800b354:	6030      	str	r0, [r6, #0]
 800b356:	4621      	mov	r1, r4
 800b358:	4628      	mov	r0, r5
 800b35a:	f000 fdff 	bl	800bf5c <_sbrk_r>
 800b35e:	1c43      	adds	r3, r0, #1
 800b360:	d00a      	beq.n	800b378 <sbrk_aligned+0x34>
 800b362:	1cc4      	adds	r4, r0, #3
 800b364:	f024 0403 	bic.w	r4, r4, #3
 800b368:	42a0      	cmp	r0, r4
 800b36a:	d007      	beq.n	800b37c <sbrk_aligned+0x38>
 800b36c:	1a21      	subs	r1, r4, r0
 800b36e:	4628      	mov	r0, r5
 800b370:	f000 fdf4 	bl	800bf5c <_sbrk_r>
 800b374:	3001      	adds	r0, #1
 800b376:	d101      	bne.n	800b37c <sbrk_aligned+0x38>
 800b378:	f04f 34ff 	mov.w	r4, #4294967295
 800b37c:	4620      	mov	r0, r4
 800b37e:	bd70      	pop	{r4, r5, r6, pc}
 800b380:	20005630 	.word	0x20005630

0800b384 <_malloc_r>:
 800b384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b388:	1ccd      	adds	r5, r1, #3
 800b38a:	f025 0503 	bic.w	r5, r5, #3
 800b38e:	3508      	adds	r5, #8
 800b390:	2d0c      	cmp	r5, #12
 800b392:	bf38      	it	cc
 800b394:	250c      	movcc	r5, #12
 800b396:	2d00      	cmp	r5, #0
 800b398:	4607      	mov	r7, r0
 800b39a:	db01      	blt.n	800b3a0 <_malloc_r+0x1c>
 800b39c:	42a9      	cmp	r1, r5
 800b39e:	d905      	bls.n	800b3ac <_malloc_r+0x28>
 800b3a0:	230c      	movs	r3, #12
 800b3a2:	603b      	str	r3, [r7, #0]
 800b3a4:	2600      	movs	r6, #0
 800b3a6:	4630      	mov	r0, r6
 800b3a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3ac:	4e2e      	ldr	r6, [pc, #184]	; (800b468 <_malloc_r+0xe4>)
 800b3ae:	f001 ffe7 	bl	800d380 <__malloc_lock>
 800b3b2:	6833      	ldr	r3, [r6, #0]
 800b3b4:	461c      	mov	r4, r3
 800b3b6:	bb34      	cbnz	r4, 800b406 <_malloc_r+0x82>
 800b3b8:	4629      	mov	r1, r5
 800b3ba:	4638      	mov	r0, r7
 800b3bc:	f7ff ffc2 	bl	800b344 <sbrk_aligned>
 800b3c0:	1c43      	adds	r3, r0, #1
 800b3c2:	4604      	mov	r4, r0
 800b3c4:	d14d      	bne.n	800b462 <_malloc_r+0xde>
 800b3c6:	6834      	ldr	r4, [r6, #0]
 800b3c8:	4626      	mov	r6, r4
 800b3ca:	2e00      	cmp	r6, #0
 800b3cc:	d140      	bne.n	800b450 <_malloc_r+0xcc>
 800b3ce:	6823      	ldr	r3, [r4, #0]
 800b3d0:	4631      	mov	r1, r6
 800b3d2:	4638      	mov	r0, r7
 800b3d4:	eb04 0803 	add.w	r8, r4, r3
 800b3d8:	f000 fdc0 	bl	800bf5c <_sbrk_r>
 800b3dc:	4580      	cmp	r8, r0
 800b3de:	d13a      	bne.n	800b456 <_malloc_r+0xd2>
 800b3e0:	6821      	ldr	r1, [r4, #0]
 800b3e2:	3503      	adds	r5, #3
 800b3e4:	1a6d      	subs	r5, r5, r1
 800b3e6:	f025 0503 	bic.w	r5, r5, #3
 800b3ea:	3508      	adds	r5, #8
 800b3ec:	2d0c      	cmp	r5, #12
 800b3ee:	bf38      	it	cc
 800b3f0:	250c      	movcc	r5, #12
 800b3f2:	4629      	mov	r1, r5
 800b3f4:	4638      	mov	r0, r7
 800b3f6:	f7ff ffa5 	bl	800b344 <sbrk_aligned>
 800b3fa:	3001      	adds	r0, #1
 800b3fc:	d02b      	beq.n	800b456 <_malloc_r+0xd2>
 800b3fe:	6823      	ldr	r3, [r4, #0]
 800b400:	442b      	add	r3, r5
 800b402:	6023      	str	r3, [r4, #0]
 800b404:	e00e      	b.n	800b424 <_malloc_r+0xa0>
 800b406:	6822      	ldr	r2, [r4, #0]
 800b408:	1b52      	subs	r2, r2, r5
 800b40a:	d41e      	bmi.n	800b44a <_malloc_r+0xc6>
 800b40c:	2a0b      	cmp	r2, #11
 800b40e:	d916      	bls.n	800b43e <_malloc_r+0xba>
 800b410:	1961      	adds	r1, r4, r5
 800b412:	42a3      	cmp	r3, r4
 800b414:	6025      	str	r5, [r4, #0]
 800b416:	bf18      	it	ne
 800b418:	6059      	strne	r1, [r3, #4]
 800b41a:	6863      	ldr	r3, [r4, #4]
 800b41c:	bf08      	it	eq
 800b41e:	6031      	streq	r1, [r6, #0]
 800b420:	5162      	str	r2, [r4, r5]
 800b422:	604b      	str	r3, [r1, #4]
 800b424:	4638      	mov	r0, r7
 800b426:	f104 060b 	add.w	r6, r4, #11
 800b42a:	f001 ffaf 	bl	800d38c <__malloc_unlock>
 800b42e:	f026 0607 	bic.w	r6, r6, #7
 800b432:	1d23      	adds	r3, r4, #4
 800b434:	1af2      	subs	r2, r6, r3
 800b436:	d0b6      	beq.n	800b3a6 <_malloc_r+0x22>
 800b438:	1b9b      	subs	r3, r3, r6
 800b43a:	50a3      	str	r3, [r4, r2]
 800b43c:	e7b3      	b.n	800b3a6 <_malloc_r+0x22>
 800b43e:	6862      	ldr	r2, [r4, #4]
 800b440:	42a3      	cmp	r3, r4
 800b442:	bf0c      	ite	eq
 800b444:	6032      	streq	r2, [r6, #0]
 800b446:	605a      	strne	r2, [r3, #4]
 800b448:	e7ec      	b.n	800b424 <_malloc_r+0xa0>
 800b44a:	4623      	mov	r3, r4
 800b44c:	6864      	ldr	r4, [r4, #4]
 800b44e:	e7b2      	b.n	800b3b6 <_malloc_r+0x32>
 800b450:	4634      	mov	r4, r6
 800b452:	6876      	ldr	r6, [r6, #4]
 800b454:	e7b9      	b.n	800b3ca <_malloc_r+0x46>
 800b456:	230c      	movs	r3, #12
 800b458:	603b      	str	r3, [r7, #0]
 800b45a:	4638      	mov	r0, r7
 800b45c:	f001 ff96 	bl	800d38c <__malloc_unlock>
 800b460:	e7a1      	b.n	800b3a6 <_malloc_r+0x22>
 800b462:	6025      	str	r5, [r4, #0]
 800b464:	e7de      	b.n	800b424 <_malloc_r+0xa0>
 800b466:	bf00      	nop
 800b468:	2000562c 	.word	0x2000562c

0800b46c <__cvt>:
 800b46c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b470:	ec55 4b10 	vmov	r4, r5, d0
 800b474:	2d00      	cmp	r5, #0
 800b476:	460e      	mov	r6, r1
 800b478:	4619      	mov	r1, r3
 800b47a:	462b      	mov	r3, r5
 800b47c:	bfbb      	ittet	lt
 800b47e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b482:	461d      	movlt	r5, r3
 800b484:	2300      	movge	r3, #0
 800b486:	232d      	movlt	r3, #45	; 0x2d
 800b488:	700b      	strb	r3, [r1, #0]
 800b48a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b48c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b490:	4691      	mov	r9, r2
 800b492:	f023 0820 	bic.w	r8, r3, #32
 800b496:	bfbc      	itt	lt
 800b498:	4622      	movlt	r2, r4
 800b49a:	4614      	movlt	r4, r2
 800b49c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b4a0:	d005      	beq.n	800b4ae <__cvt+0x42>
 800b4a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b4a6:	d100      	bne.n	800b4aa <__cvt+0x3e>
 800b4a8:	3601      	adds	r6, #1
 800b4aa:	2102      	movs	r1, #2
 800b4ac:	e000      	b.n	800b4b0 <__cvt+0x44>
 800b4ae:	2103      	movs	r1, #3
 800b4b0:	ab03      	add	r3, sp, #12
 800b4b2:	9301      	str	r3, [sp, #4]
 800b4b4:	ab02      	add	r3, sp, #8
 800b4b6:	9300      	str	r3, [sp, #0]
 800b4b8:	ec45 4b10 	vmov	d0, r4, r5
 800b4bc:	4653      	mov	r3, sl
 800b4be:	4632      	mov	r2, r6
 800b4c0:	f001 f832 	bl	800c528 <_dtoa_r>
 800b4c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b4c8:	4607      	mov	r7, r0
 800b4ca:	d102      	bne.n	800b4d2 <__cvt+0x66>
 800b4cc:	f019 0f01 	tst.w	r9, #1
 800b4d0:	d022      	beq.n	800b518 <__cvt+0xac>
 800b4d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b4d6:	eb07 0906 	add.w	r9, r7, r6
 800b4da:	d110      	bne.n	800b4fe <__cvt+0x92>
 800b4dc:	783b      	ldrb	r3, [r7, #0]
 800b4de:	2b30      	cmp	r3, #48	; 0x30
 800b4e0:	d10a      	bne.n	800b4f8 <__cvt+0x8c>
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	4629      	mov	r1, r5
 800b4ea:	f7f5 faed 	bl	8000ac8 <__aeabi_dcmpeq>
 800b4ee:	b918      	cbnz	r0, 800b4f8 <__cvt+0x8c>
 800b4f0:	f1c6 0601 	rsb	r6, r6, #1
 800b4f4:	f8ca 6000 	str.w	r6, [sl]
 800b4f8:	f8da 3000 	ldr.w	r3, [sl]
 800b4fc:	4499      	add	r9, r3
 800b4fe:	2200      	movs	r2, #0
 800b500:	2300      	movs	r3, #0
 800b502:	4620      	mov	r0, r4
 800b504:	4629      	mov	r1, r5
 800b506:	f7f5 fadf 	bl	8000ac8 <__aeabi_dcmpeq>
 800b50a:	b108      	cbz	r0, 800b510 <__cvt+0xa4>
 800b50c:	f8cd 900c 	str.w	r9, [sp, #12]
 800b510:	2230      	movs	r2, #48	; 0x30
 800b512:	9b03      	ldr	r3, [sp, #12]
 800b514:	454b      	cmp	r3, r9
 800b516:	d307      	bcc.n	800b528 <__cvt+0xbc>
 800b518:	9b03      	ldr	r3, [sp, #12]
 800b51a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b51c:	1bdb      	subs	r3, r3, r7
 800b51e:	4638      	mov	r0, r7
 800b520:	6013      	str	r3, [r2, #0]
 800b522:	b004      	add	sp, #16
 800b524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b528:	1c59      	adds	r1, r3, #1
 800b52a:	9103      	str	r1, [sp, #12]
 800b52c:	701a      	strb	r2, [r3, #0]
 800b52e:	e7f0      	b.n	800b512 <__cvt+0xa6>

0800b530 <__exponent>:
 800b530:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b532:	4603      	mov	r3, r0
 800b534:	2900      	cmp	r1, #0
 800b536:	bfb8      	it	lt
 800b538:	4249      	neglt	r1, r1
 800b53a:	f803 2b02 	strb.w	r2, [r3], #2
 800b53e:	bfb4      	ite	lt
 800b540:	222d      	movlt	r2, #45	; 0x2d
 800b542:	222b      	movge	r2, #43	; 0x2b
 800b544:	2909      	cmp	r1, #9
 800b546:	7042      	strb	r2, [r0, #1]
 800b548:	dd2a      	ble.n	800b5a0 <__exponent+0x70>
 800b54a:	f10d 0407 	add.w	r4, sp, #7
 800b54e:	46a4      	mov	ip, r4
 800b550:	270a      	movs	r7, #10
 800b552:	46a6      	mov	lr, r4
 800b554:	460a      	mov	r2, r1
 800b556:	fb91 f6f7 	sdiv	r6, r1, r7
 800b55a:	fb07 1516 	mls	r5, r7, r6, r1
 800b55e:	3530      	adds	r5, #48	; 0x30
 800b560:	2a63      	cmp	r2, #99	; 0x63
 800b562:	f104 34ff 	add.w	r4, r4, #4294967295
 800b566:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b56a:	4631      	mov	r1, r6
 800b56c:	dcf1      	bgt.n	800b552 <__exponent+0x22>
 800b56e:	3130      	adds	r1, #48	; 0x30
 800b570:	f1ae 0502 	sub.w	r5, lr, #2
 800b574:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b578:	1c44      	adds	r4, r0, #1
 800b57a:	4629      	mov	r1, r5
 800b57c:	4561      	cmp	r1, ip
 800b57e:	d30a      	bcc.n	800b596 <__exponent+0x66>
 800b580:	f10d 0209 	add.w	r2, sp, #9
 800b584:	eba2 020e 	sub.w	r2, r2, lr
 800b588:	4565      	cmp	r5, ip
 800b58a:	bf88      	it	hi
 800b58c:	2200      	movhi	r2, #0
 800b58e:	4413      	add	r3, r2
 800b590:	1a18      	subs	r0, r3, r0
 800b592:	b003      	add	sp, #12
 800b594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b596:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b59a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b59e:	e7ed      	b.n	800b57c <__exponent+0x4c>
 800b5a0:	2330      	movs	r3, #48	; 0x30
 800b5a2:	3130      	adds	r1, #48	; 0x30
 800b5a4:	7083      	strb	r3, [r0, #2]
 800b5a6:	70c1      	strb	r1, [r0, #3]
 800b5a8:	1d03      	adds	r3, r0, #4
 800b5aa:	e7f1      	b.n	800b590 <__exponent+0x60>

0800b5ac <_printf_float>:
 800b5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b0:	ed2d 8b02 	vpush	{d8}
 800b5b4:	b08d      	sub	sp, #52	; 0x34
 800b5b6:	460c      	mov	r4, r1
 800b5b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b5bc:	4616      	mov	r6, r2
 800b5be:	461f      	mov	r7, r3
 800b5c0:	4605      	mov	r5, r0
 800b5c2:	f001 fe61 	bl	800d288 <_localeconv_r>
 800b5c6:	f8d0 a000 	ldr.w	sl, [r0]
 800b5ca:	4650      	mov	r0, sl
 800b5cc:	f7f4 fe00 	bl	80001d0 <strlen>
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	930a      	str	r3, [sp, #40]	; 0x28
 800b5d4:	6823      	ldr	r3, [r4, #0]
 800b5d6:	9305      	str	r3, [sp, #20]
 800b5d8:	f8d8 3000 	ldr.w	r3, [r8]
 800b5dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b5e0:	3307      	adds	r3, #7
 800b5e2:	f023 0307 	bic.w	r3, r3, #7
 800b5e6:	f103 0208 	add.w	r2, r3, #8
 800b5ea:	f8c8 2000 	str.w	r2, [r8]
 800b5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b5f6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b5fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b5fe:	9307      	str	r3, [sp, #28]
 800b600:	f8cd 8018 	str.w	r8, [sp, #24]
 800b604:	ee08 0a10 	vmov	s16, r0
 800b608:	4b9f      	ldr	r3, [pc, #636]	; (800b888 <_printf_float+0x2dc>)
 800b60a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b60e:	f04f 32ff 	mov.w	r2, #4294967295
 800b612:	f7f5 fa8b 	bl	8000b2c <__aeabi_dcmpun>
 800b616:	bb88      	cbnz	r0, 800b67c <_printf_float+0xd0>
 800b618:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b61c:	4b9a      	ldr	r3, [pc, #616]	; (800b888 <_printf_float+0x2dc>)
 800b61e:	f04f 32ff 	mov.w	r2, #4294967295
 800b622:	f7f5 fa65 	bl	8000af0 <__aeabi_dcmple>
 800b626:	bb48      	cbnz	r0, 800b67c <_printf_float+0xd0>
 800b628:	2200      	movs	r2, #0
 800b62a:	2300      	movs	r3, #0
 800b62c:	4640      	mov	r0, r8
 800b62e:	4649      	mov	r1, r9
 800b630:	f7f5 fa54 	bl	8000adc <__aeabi_dcmplt>
 800b634:	b110      	cbz	r0, 800b63c <_printf_float+0x90>
 800b636:	232d      	movs	r3, #45	; 0x2d
 800b638:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b63c:	4b93      	ldr	r3, [pc, #588]	; (800b88c <_printf_float+0x2e0>)
 800b63e:	4894      	ldr	r0, [pc, #592]	; (800b890 <_printf_float+0x2e4>)
 800b640:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b644:	bf94      	ite	ls
 800b646:	4698      	movls	r8, r3
 800b648:	4680      	movhi	r8, r0
 800b64a:	2303      	movs	r3, #3
 800b64c:	6123      	str	r3, [r4, #16]
 800b64e:	9b05      	ldr	r3, [sp, #20]
 800b650:	f023 0204 	bic.w	r2, r3, #4
 800b654:	6022      	str	r2, [r4, #0]
 800b656:	f04f 0900 	mov.w	r9, #0
 800b65a:	9700      	str	r7, [sp, #0]
 800b65c:	4633      	mov	r3, r6
 800b65e:	aa0b      	add	r2, sp, #44	; 0x2c
 800b660:	4621      	mov	r1, r4
 800b662:	4628      	mov	r0, r5
 800b664:	f000 f9d8 	bl	800ba18 <_printf_common>
 800b668:	3001      	adds	r0, #1
 800b66a:	f040 8090 	bne.w	800b78e <_printf_float+0x1e2>
 800b66e:	f04f 30ff 	mov.w	r0, #4294967295
 800b672:	b00d      	add	sp, #52	; 0x34
 800b674:	ecbd 8b02 	vpop	{d8}
 800b678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b67c:	4642      	mov	r2, r8
 800b67e:	464b      	mov	r3, r9
 800b680:	4640      	mov	r0, r8
 800b682:	4649      	mov	r1, r9
 800b684:	f7f5 fa52 	bl	8000b2c <__aeabi_dcmpun>
 800b688:	b140      	cbz	r0, 800b69c <_printf_float+0xf0>
 800b68a:	464b      	mov	r3, r9
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	bfbc      	itt	lt
 800b690:	232d      	movlt	r3, #45	; 0x2d
 800b692:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b696:	487f      	ldr	r0, [pc, #508]	; (800b894 <_printf_float+0x2e8>)
 800b698:	4b7f      	ldr	r3, [pc, #508]	; (800b898 <_printf_float+0x2ec>)
 800b69a:	e7d1      	b.n	800b640 <_printf_float+0x94>
 800b69c:	6863      	ldr	r3, [r4, #4]
 800b69e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b6a2:	9206      	str	r2, [sp, #24]
 800b6a4:	1c5a      	adds	r2, r3, #1
 800b6a6:	d13f      	bne.n	800b728 <_printf_float+0x17c>
 800b6a8:	2306      	movs	r3, #6
 800b6aa:	6063      	str	r3, [r4, #4]
 800b6ac:	9b05      	ldr	r3, [sp, #20]
 800b6ae:	6861      	ldr	r1, [r4, #4]
 800b6b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	9303      	str	r3, [sp, #12]
 800b6b8:	ab0a      	add	r3, sp, #40	; 0x28
 800b6ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b6be:	ab09      	add	r3, sp, #36	; 0x24
 800b6c0:	ec49 8b10 	vmov	d0, r8, r9
 800b6c4:	9300      	str	r3, [sp, #0]
 800b6c6:	6022      	str	r2, [r4, #0]
 800b6c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b6cc:	4628      	mov	r0, r5
 800b6ce:	f7ff fecd 	bl	800b46c <__cvt>
 800b6d2:	9b06      	ldr	r3, [sp, #24]
 800b6d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b6d6:	2b47      	cmp	r3, #71	; 0x47
 800b6d8:	4680      	mov	r8, r0
 800b6da:	d108      	bne.n	800b6ee <_printf_float+0x142>
 800b6dc:	1cc8      	adds	r0, r1, #3
 800b6de:	db02      	blt.n	800b6e6 <_printf_float+0x13a>
 800b6e0:	6863      	ldr	r3, [r4, #4]
 800b6e2:	4299      	cmp	r1, r3
 800b6e4:	dd41      	ble.n	800b76a <_printf_float+0x1be>
 800b6e6:	f1ab 0b02 	sub.w	fp, fp, #2
 800b6ea:	fa5f fb8b 	uxtb.w	fp, fp
 800b6ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b6f2:	d820      	bhi.n	800b736 <_printf_float+0x18a>
 800b6f4:	3901      	subs	r1, #1
 800b6f6:	465a      	mov	r2, fp
 800b6f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b6fc:	9109      	str	r1, [sp, #36]	; 0x24
 800b6fe:	f7ff ff17 	bl	800b530 <__exponent>
 800b702:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b704:	1813      	adds	r3, r2, r0
 800b706:	2a01      	cmp	r2, #1
 800b708:	4681      	mov	r9, r0
 800b70a:	6123      	str	r3, [r4, #16]
 800b70c:	dc02      	bgt.n	800b714 <_printf_float+0x168>
 800b70e:	6822      	ldr	r2, [r4, #0]
 800b710:	07d2      	lsls	r2, r2, #31
 800b712:	d501      	bpl.n	800b718 <_printf_float+0x16c>
 800b714:	3301      	adds	r3, #1
 800b716:	6123      	str	r3, [r4, #16]
 800b718:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d09c      	beq.n	800b65a <_printf_float+0xae>
 800b720:	232d      	movs	r3, #45	; 0x2d
 800b722:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b726:	e798      	b.n	800b65a <_printf_float+0xae>
 800b728:	9a06      	ldr	r2, [sp, #24]
 800b72a:	2a47      	cmp	r2, #71	; 0x47
 800b72c:	d1be      	bne.n	800b6ac <_printf_float+0x100>
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d1bc      	bne.n	800b6ac <_printf_float+0x100>
 800b732:	2301      	movs	r3, #1
 800b734:	e7b9      	b.n	800b6aa <_printf_float+0xfe>
 800b736:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b73a:	d118      	bne.n	800b76e <_printf_float+0x1c2>
 800b73c:	2900      	cmp	r1, #0
 800b73e:	6863      	ldr	r3, [r4, #4]
 800b740:	dd0b      	ble.n	800b75a <_printf_float+0x1ae>
 800b742:	6121      	str	r1, [r4, #16]
 800b744:	b913      	cbnz	r3, 800b74c <_printf_float+0x1a0>
 800b746:	6822      	ldr	r2, [r4, #0]
 800b748:	07d0      	lsls	r0, r2, #31
 800b74a:	d502      	bpl.n	800b752 <_printf_float+0x1a6>
 800b74c:	3301      	adds	r3, #1
 800b74e:	440b      	add	r3, r1
 800b750:	6123      	str	r3, [r4, #16]
 800b752:	65a1      	str	r1, [r4, #88]	; 0x58
 800b754:	f04f 0900 	mov.w	r9, #0
 800b758:	e7de      	b.n	800b718 <_printf_float+0x16c>
 800b75a:	b913      	cbnz	r3, 800b762 <_printf_float+0x1b6>
 800b75c:	6822      	ldr	r2, [r4, #0]
 800b75e:	07d2      	lsls	r2, r2, #31
 800b760:	d501      	bpl.n	800b766 <_printf_float+0x1ba>
 800b762:	3302      	adds	r3, #2
 800b764:	e7f4      	b.n	800b750 <_printf_float+0x1a4>
 800b766:	2301      	movs	r3, #1
 800b768:	e7f2      	b.n	800b750 <_printf_float+0x1a4>
 800b76a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b76e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b770:	4299      	cmp	r1, r3
 800b772:	db05      	blt.n	800b780 <_printf_float+0x1d4>
 800b774:	6823      	ldr	r3, [r4, #0]
 800b776:	6121      	str	r1, [r4, #16]
 800b778:	07d8      	lsls	r0, r3, #31
 800b77a:	d5ea      	bpl.n	800b752 <_printf_float+0x1a6>
 800b77c:	1c4b      	adds	r3, r1, #1
 800b77e:	e7e7      	b.n	800b750 <_printf_float+0x1a4>
 800b780:	2900      	cmp	r1, #0
 800b782:	bfd4      	ite	le
 800b784:	f1c1 0202 	rsble	r2, r1, #2
 800b788:	2201      	movgt	r2, #1
 800b78a:	4413      	add	r3, r2
 800b78c:	e7e0      	b.n	800b750 <_printf_float+0x1a4>
 800b78e:	6823      	ldr	r3, [r4, #0]
 800b790:	055a      	lsls	r2, r3, #21
 800b792:	d407      	bmi.n	800b7a4 <_printf_float+0x1f8>
 800b794:	6923      	ldr	r3, [r4, #16]
 800b796:	4642      	mov	r2, r8
 800b798:	4631      	mov	r1, r6
 800b79a:	4628      	mov	r0, r5
 800b79c:	47b8      	blx	r7
 800b79e:	3001      	adds	r0, #1
 800b7a0:	d12c      	bne.n	800b7fc <_printf_float+0x250>
 800b7a2:	e764      	b.n	800b66e <_printf_float+0xc2>
 800b7a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b7a8:	f240 80e0 	bls.w	800b96c <_printf_float+0x3c0>
 800b7ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	f7f5 f988 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7b8:	2800      	cmp	r0, #0
 800b7ba:	d034      	beq.n	800b826 <_printf_float+0x27a>
 800b7bc:	4a37      	ldr	r2, [pc, #220]	; (800b89c <_printf_float+0x2f0>)
 800b7be:	2301      	movs	r3, #1
 800b7c0:	4631      	mov	r1, r6
 800b7c2:	4628      	mov	r0, r5
 800b7c4:	47b8      	blx	r7
 800b7c6:	3001      	adds	r0, #1
 800b7c8:	f43f af51 	beq.w	800b66e <_printf_float+0xc2>
 800b7cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	db02      	blt.n	800b7da <_printf_float+0x22e>
 800b7d4:	6823      	ldr	r3, [r4, #0]
 800b7d6:	07d8      	lsls	r0, r3, #31
 800b7d8:	d510      	bpl.n	800b7fc <_printf_float+0x250>
 800b7da:	ee18 3a10 	vmov	r3, s16
 800b7de:	4652      	mov	r2, sl
 800b7e0:	4631      	mov	r1, r6
 800b7e2:	4628      	mov	r0, r5
 800b7e4:	47b8      	blx	r7
 800b7e6:	3001      	adds	r0, #1
 800b7e8:	f43f af41 	beq.w	800b66e <_printf_float+0xc2>
 800b7ec:	f04f 0800 	mov.w	r8, #0
 800b7f0:	f104 091a 	add.w	r9, r4, #26
 800b7f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7f6:	3b01      	subs	r3, #1
 800b7f8:	4543      	cmp	r3, r8
 800b7fa:	dc09      	bgt.n	800b810 <_printf_float+0x264>
 800b7fc:	6823      	ldr	r3, [r4, #0]
 800b7fe:	079b      	lsls	r3, r3, #30
 800b800:	f100 8105 	bmi.w	800ba0e <_printf_float+0x462>
 800b804:	68e0      	ldr	r0, [r4, #12]
 800b806:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b808:	4298      	cmp	r0, r3
 800b80a:	bfb8      	it	lt
 800b80c:	4618      	movlt	r0, r3
 800b80e:	e730      	b.n	800b672 <_printf_float+0xc6>
 800b810:	2301      	movs	r3, #1
 800b812:	464a      	mov	r2, r9
 800b814:	4631      	mov	r1, r6
 800b816:	4628      	mov	r0, r5
 800b818:	47b8      	blx	r7
 800b81a:	3001      	adds	r0, #1
 800b81c:	f43f af27 	beq.w	800b66e <_printf_float+0xc2>
 800b820:	f108 0801 	add.w	r8, r8, #1
 800b824:	e7e6      	b.n	800b7f4 <_printf_float+0x248>
 800b826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b828:	2b00      	cmp	r3, #0
 800b82a:	dc39      	bgt.n	800b8a0 <_printf_float+0x2f4>
 800b82c:	4a1b      	ldr	r2, [pc, #108]	; (800b89c <_printf_float+0x2f0>)
 800b82e:	2301      	movs	r3, #1
 800b830:	4631      	mov	r1, r6
 800b832:	4628      	mov	r0, r5
 800b834:	47b8      	blx	r7
 800b836:	3001      	adds	r0, #1
 800b838:	f43f af19 	beq.w	800b66e <_printf_float+0xc2>
 800b83c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b840:	4313      	orrs	r3, r2
 800b842:	d102      	bne.n	800b84a <_printf_float+0x29e>
 800b844:	6823      	ldr	r3, [r4, #0]
 800b846:	07d9      	lsls	r1, r3, #31
 800b848:	d5d8      	bpl.n	800b7fc <_printf_float+0x250>
 800b84a:	ee18 3a10 	vmov	r3, s16
 800b84e:	4652      	mov	r2, sl
 800b850:	4631      	mov	r1, r6
 800b852:	4628      	mov	r0, r5
 800b854:	47b8      	blx	r7
 800b856:	3001      	adds	r0, #1
 800b858:	f43f af09 	beq.w	800b66e <_printf_float+0xc2>
 800b85c:	f04f 0900 	mov.w	r9, #0
 800b860:	f104 0a1a 	add.w	sl, r4, #26
 800b864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b866:	425b      	negs	r3, r3
 800b868:	454b      	cmp	r3, r9
 800b86a:	dc01      	bgt.n	800b870 <_printf_float+0x2c4>
 800b86c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b86e:	e792      	b.n	800b796 <_printf_float+0x1ea>
 800b870:	2301      	movs	r3, #1
 800b872:	4652      	mov	r2, sl
 800b874:	4631      	mov	r1, r6
 800b876:	4628      	mov	r0, r5
 800b878:	47b8      	blx	r7
 800b87a:	3001      	adds	r0, #1
 800b87c:	f43f aef7 	beq.w	800b66e <_printf_float+0xc2>
 800b880:	f109 0901 	add.w	r9, r9, #1
 800b884:	e7ee      	b.n	800b864 <_printf_float+0x2b8>
 800b886:	bf00      	nop
 800b888:	7fefffff 	.word	0x7fefffff
 800b88c:	0800e460 	.word	0x0800e460
 800b890:	0800e464 	.word	0x0800e464
 800b894:	0800e46c 	.word	0x0800e46c
 800b898:	0800e468 	.word	0x0800e468
 800b89c:	0800e470 	.word	0x0800e470
 800b8a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b8a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	bfa8      	it	ge
 800b8a8:	461a      	movge	r2, r3
 800b8aa:	2a00      	cmp	r2, #0
 800b8ac:	4691      	mov	r9, r2
 800b8ae:	dc37      	bgt.n	800b920 <_printf_float+0x374>
 800b8b0:	f04f 0b00 	mov.w	fp, #0
 800b8b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b8b8:	f104 021a 	add.w	r2, r4, #26
 800b8bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b8be:	9305      	str	r3, [sp, #20]
 800b8c0:	eba3 0309 	sub.w	r3, r3, r9
 800b8c4:	455b      	cmp	r3, fp
 800b8c6:	dc33      	bgt.n	800b930 <_printf_float+0x384>
 800b8c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b8cc:	429a      	cmp	r2, r3
 800b8ce:	db3b      	blt.n	800b948 <_printf_float+0x39c>
 800b8d0:	6823      	ldr	r3, [r4, #0]
 800b8d2:	07da      	lsls	r2, r3, #31
 800b8d4:	d438      	bmi.n	800b948 <_printf_float+0x39c>
 800b8d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8d8:	9a05      	ldr	r2, [sp, #20]
 800b8da:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b8dc:	1a9a      	subs	r2, r3, r2
 800b8de:	eba3 0901 	sub.w	r9, r3, r1
 800b8e2:	4591      	cmp	r9, r2
 800b8e4:	bfa8      	it	ge
 800b8e6:	4691      	movge	r9, r2
 800b8e8:	f1b9 0f00 	cmp.w	r9, #0
 800b8ec:	dc35      	bgt.n	800b95a <_printf_float+0x3ae>
 800b8ee:	f04f 0800 	mov.w	r8, #0
 800b8f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b8f6:	f104 0a1a 	add.w	sl, r4, #26
 800b8fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b8fe:	1a9b      	subs	r3, r3, r2
 800b900:	eba3 0309 	sub.w	r3, r3, r9
 800b904:	4543      	cmp	r3, r8
 800b906:	f77f af79 	ble.w	800b7fc <_printf_float+0x250>
 800b90a:	2301      	movs	r3, #1
 800b90c:	4652      	mov	r2, sl
 800b90e:	4631      	mov	r1, r6
 800b910:	4628      	mov	r0, r5
 800b912:	47b8      	blx	r7
 800b914:	3001      	adds	r0, #1
 800b916:	f43f aeaa 	beq.w	800b66e <_printf_float+0xc2>
 800b91a:	f108 0801 	add.w	r8, r8, #1
 800b91e:	e7ec      	b.n	800b8fa <_printf_float+0x34e>
 800b920:	4613      	mov	r3, r2
 800b922:	4631      	mov	r1, r6
 800b924:	4642      	mov	r2, r8
 800b926:	4628      	mov	r0, r5
 800b928:	47b8      	blx	r7
 800b92a:	3001      	adds	r0, #1
 800b92c:	d1c0      	bne.n	800b8b0 <_printf_float+0x304>
 800b92e:	e69e      	b.n	800b66e <_printf_float+0xc2>
 800b930:	2301      	movs	r3, #1
 800b932:	4631      	mov	r1, r6
 800b934:	4628      	mov	r0, r5
 800b936:	9205      	str	r2, [sp, #20]
 800b938:	47b8      	blx	r7
 800b93a:	3001      	adds	r0, #1
 800b93c:	f43f ae97 	beq.w	800b66e <_printf_float+0xc2>
 800b940:	9a05      	ldr	r2, [sp, #20]
 800b942:	f10b 0b01 	add.w	fp, fp, #1
 800b946:	e7b9      	b.n	800b8bc <_printf_float+0x310>
 800b948:	ee18 3a10 	vmov	r3, s16
 800b94c:	4652      	mov	r2, sl
 800b94e:	4631      	mov	r1, r6
 800b950:	4628      	mov	r0, r5
 800b952:	47b8      	blx	r7
 800b954:	3001      	adds	r0, #1
 800b956:	d1be      	bne.n	800b8d6 <_printf_float+0x32a>
 800b958:	e689      	b.n	800b66e <_printf_float+0xc2>
 800b95a:	9a05      	ldr	r2, [sp, #20]
 800b95c:	464b      	mov	r3, r9
 800b95e:	4442      	add	r2, r8
 800b960:	4631      	mov	r1, r6
 800b962:	4628      	mov	r0, r5
 800b964:	47b8      	blx	r7
 800b966:	3001      	adds	r0, #1
 800b968:	d1c1      	bne.n	800b8ee <_printf_float+0x342>
 800b96a:	e680      	b.n	800b66e <_printf_float+0xc2>
 800b96c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b96e:	2a01      	cmp	r2, #1
 800b970:	dc01      	bgt.n	800b976 <_printf_float+0x3ca>
 800b972:	07db      	lsls	r3, r3, #31
 800b974:	d538      	bpl.n	800b9e8 <_printf_float+0x43c>
 800b976:	2301      	movs	r3, #1
 800b978:	4642      	mov	r2, r8
 800b97a:	4631      	mov	r1, r6
 800b97c:	4628      	mov	r0, r5
 800b97e:	47b8      	blx	r7
 800b980:	3001      	adds	r0, #1
 800b982:	f43f ae74 	beq.w	800b66e <_printf_float+0xc2>
 800b986:	ee18 3a10 	vmov	r3, s16
 800b98a:	4652      	mov	r2, sl
 800b98c:	4631      	mov	r1, r6
 800b98e:	4628      	mov	r0, r5
 800b990:	47b8      	blx	r7
 800b992:	3001      	adds	r0, #1
 800b994:	f43f ae6b 	beq.w	800b66e <_printf_float+0xc2>
 800b998:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b99c:	2200      	movs	r2, #0
 800b99e:	2300      	movs	r3, #0
 800b9a0:	f7f5 f892 	bl	8000ac8 <__aeabi_dcmpeq>
 800b9a4:	b9d8      	cbnz	r0, 800b9de <_printf_float+0x432>
 800b9a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9a8:	f108 0201 	add.w	r2, r8, #1
 800b9ac:	3b01      	subs	r3, #1
 800b9ae:	4631      	mov	r1, r6
 800b9b0:	4628      	mov	r0, r5
 800b9b2:	47b8      	blx	r7
 800b9b4:	3001      	adds	r0, #1
 800b9b6:	d10e      	bne.n	800b9d6 <_printf_float+0x42a>
 800b9b8:	e659      	b.n	800b66e <_printf_float+0xc2>
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	4652      	mov	r2, sl
 800b9be:	4631      	mov	r1, r6
 800b9c0:	4628      	mov	r0, r5
 800b9c2:	47b8      	blx	r7
 800b9c4:	3001      	adds	r0, #1
 800b9c6:	f43f ae52 	beq.w	800b66e <_printf_float+0xc2>
 800b9ca:	f108 0801 	add.w	r8, r8, #1
 800b9ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9d0:	3b01      	subs	r3, #1
 800b9d2:	4543      	cmp	r3, r8
 800b9d4:	dcf1      	bgt.n	800b9ba <_printf_float+0x40e>
 800b9d6:	464b      	mov	r3, r9
 800b9d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b9dc:	e6dc      	b.n	800b798 <_printf_float+0x1ec>
 800b9de:	f04f 0800 	mov.w	r8, #0
 800b9e2:	f104 0a1a 	add.w	sl, r4, #26
 800b9e6:	e7f2      	b.n	800b9ce <_printf_float+0x422>
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	4642      	mov	r2, r8
 800b9ec:	e7df      	b.n	800b9ae <_printf_float+0x402>
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	464a      	mov	r2, r9
 800b9f2:	4631      	mov	r1, r6
 800b9f4:	4628      	mov	r0, r5
 800b9f6:	47b8      	blx	r7
 800b9f8:	3001      	adds	r0, #1
 800b9fa:	f43f ae38 	beq.w	800b66e <_printf_float+0xc2>
 800b9fe:	f108 0801 	add.w	r8, r8, #1
 800ba02:	68e3      	ldr	r3, [r4, #12]
 800ba04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ba06:	1a5b      	subs	r3, r3, r1
 800ba08:	4543      	cmp	r3, r8
 800ba0a:	dcf0      	bgt.n	800b9ee <_printf_float+0x442>
 800ba0c:	e6fa      	b.n	800b804 <_printf_float+0x258>
 800ba0e:	f04f 0800 	mov.w	r8, #0
 800ba12:	f104 0919 	add.w	r9, r4, #25
 800ba16:	e7f4      	b.n	800ba02 <_printf_float+0x456>

0800ba18 <_printf_common>:
 800ba18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba1c:	4616      	mov	r6, r2
 800ba1e:	4699      	mov	r9, r3
 800ba20:	688a      	ldr	r2, [r1, #8]
 800ba22:	690b      	ldr	r3, [r1, #16]
 800ba24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	bfb8      	it	lt
 800ba2c:	4613      	movlt	r3, r2
 800ba2e:	6033      	str	r3, [r6, #0]
 800ba30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ba34:	4607      	mov	r7, r0
 800ba36:	460c      	mov	r4, r1
 800ba38:	b10a      	cbz	r2, 800ba3e <_printf_common+0x26>
 800ba3a:	3301      	adds	r3, #1
 800ba3c:	6033      	str	r3, [r6, #0]
 800ba3e:	6823      	ldr	r3, [r4, #0]
 800ba40:	0699      	lsls	r1, r3, #26
 800ba42:	bf42      	ittt	mi
 800ba44:	6833      	ldrmi	r3, [r6, #0]
 800ba46:	3302      	addmi	r3, #2
 800ba48:	6033      	strmi	r3, [r6, #0]
 800ba4a:	6825      	ldr	r5, [r4, #0]
 800ba4c:	f015 0506 	ands.w	r5, r5, #6
 800ba50:	d106      	bne.n	800ba60 <_printf_common+0x48>
 800ba52:	f104 0a19 	add.w	sl, r4, #25
 800ba56:	68e3      	ldr	r3, [r4, #12]
 800ba58:	6832      	ldr	r2, [r6, #0]
 800ba5a:	1a9b      	subs	r3, r3, r2
 800ba5c:	42ab      	cmp	r3, r5
 800ba5e:	dc26      	bgt.n	800baae <_printf_common+0x96>
 800ba60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ba64:	1e13      	subs	r3, r2, #0
 800ba66:	6822      	ldr	r2, [r4, #0]
 800ba68:	bf18      	it	ne
 800ba6a:	2301      	movne	r3, #1
 800ba6c:	0692      	lsls	r2, r2, #26
 800ba6e:	d42b      	bmi.n	800bac8 <_printf_common+0xb0>
 800ba70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ba74:	4649      	mov	r1, r9
 800ba76:	4638      	mov	r0, r7
 800ba78:	47c0      	blx	r8
 800ba7a:	3001      	adds	r0, #1
 800ba7c:	d01e      	beq.n	800babc <_printf_common+0xa4>
 800ba7e:	6823      	ldr	r3, [r4, #0]
 800ba80:	68e5      	ldr	r5, [r4, #12]
 800ba82:	6832      	ldr	r2, [r6, #0]
 800ba84:	f003 0306 	and.w	r3, r3, #6
 800ba88:	2b04      	cmp	r3, #4
 800ba8a:	bf08      	it	eq
 800ba8c:	1aad      	subeq	r5, r5, r2
 800ba8e:	68a3      	ldr	r3, [r4, #8]
 800ba90:	6922      	ldr	r2, [r4, #16]
 800ba92:	bf0c      	ite	eq
 800ba94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba98:	2500      	movne	r5, #0
 800ba9a:	4293      	cmp	r3, r2
 800ba9c:	bfc4      	itt	gt
 800ba9e:	1a9b      	subgt	r3, r3, r2
 800baa0:	18ed      	addgt	r5, r5, r3
 800baa2:	2600      	movs	r6, #0
 800baa4:	341a      	adds	r4, #26
 800baa6:	42b5      	cmp	r5, r6
 800baa8:	d11a      	bne.n	800bae0 <_printf_common+0xc8>
 800baaa:	2000      	movs	r0, #0
 800baac:	e008      	b.n	800bac0 <_printf_common+0xa8>
 800baae:	2301      	movs	r3, #1
 800bab0:	4652      	mov	r2, sl
 800bab2:	4649      	mov	r1, r9
 800bab4:	4638      	mov	r0, r7
 800bab6:	47c0      	blx	r8
 800bab8:	3001      	adds	r0, #1
 800baba:	d103      	bne.n	800bac4 <_printf_common+0xac>
 800babc:	f04f 30ff 	mov.w	r0, #4294967295
 800bac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bac4:	3501      	adds	r5, #1
 800bac6:	e7c6      	b.n	800ba56 <_printf_common+0x3e>
 800bac8:	18e1      	adds	r1, r4, r3
 800baca:	1c5a      	adds	r2, r3, #1
 800bacc:	2030      	movs	r0, #48	; 0x30
 800bace:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bad2:	4422      	add	r2, r4
 800bad4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bad8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800badc:	3302      	adds	r3, #2
 800bade:	e7c7      	b.n	800ba70 <_printf_common+0x58>
 800bae0:	2301      	movs	r3, #1
 800bae2:	4622      	mov	r2, r4
 800bae4:	4649      	mov	r1, r9
 800bae6:	4638      	mov	r0, r7
 800bae8:	47c0      	blx	r8
 800baea:	3001      	adds	r0, #1
 800baec:	d0e6      	beq.n	800babc <_printf_common+0xa4>
 800baee:	3601      	adds	r6, #1
 800baf0:	e7d9      	b.n	800baa6 <_printf_common+0x8e>
	...

0800baf4 <_printf_i>:
 800baf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800baf8:	7e0f      	ldrb	r7, [r1, #24]
 800bafa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bafc:	2f78      	cmp	r7, #120	; 0x78
 800bafe:	4691      	mov	r9, r2
 800bb00:	4680      	mov	r8, r0
 800bb02:	460c      	mov	r4, r1
 800bb04:	469a      	mov	sl, r3
 800bb06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bb0a:	d807      	bhi.n	800bb1c <_printf_i+0x28>
 800bb0c:	2f62      	cmp	r7, #98	; 0x62
 800bb0e:	d80a      	bhi.n	800bb26 <_printf_i+0x32>
 800bb10:	2f00      	cmp	r7, #0
 800bb12:	f000 80d8 	beq.w	800bcc6 <_printf_i+0x1d2>
 800bb16:	2f58      	cmp	r7, #88	; 0x58
 800bb18:	f000 80a3 	beq.w	800bc62 <_printf_i+0x16e>
 800bb1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bb24:	e03a      	b.n	800bb9c <_printf_i+0xa8>
 800bb26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bb2a:	2b15      	cmp	r3, #21
 800bb2c:	d8f6      	bhi.n	800bb1c <_printf_i+0x28>
 800bb2e:	a101      	add	r1, pc, #4	; (adr r1, 800bb34 <_printf_i+0x40>)
 800bb30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bb34:	0800bb8d 	.word	0x0800bb8d
 800bb38:	0800bba1 	.word	0x0800bba1
 800bb3c:	0800bb1d 	.word	0x0800bb1d
 800bb40:	0800bb1d 	.word	0x0800bb1d
 800bb44:	0800bb1d 	.word	0x0800bb1d
 800bb48:	0800bb1d 	.word	0x0800bb1d
 800bb4c:	0800bba1 	.word	0x0800bba1
 800bb50:	0800bb1d 	.word	0x0800bb1d
 800bb54:	0800bb1d 	.word	0x0800bb1d
 800bb58:	0800bb1d 	.word	0x0800bb1d
 800bb5c:	0800bb1d 	.word	0x0800bb1d
 800bb60:	0800bcad 	.word	0x0800bcad
 800bb64:	0800bbd1 	.word	0x0800bbd1
 800bb68:	0800bc8f 	.word	0x0800bc8f
 800bb6c:	0800bb1d 	.word	0x0800bb1d
 800bb70:	0800bb1d 	.word	0x0800bb1d
 800bb74:	0800bccf 	.word	0x0800bccf
 800bb78:	0800bb1d 	.word	0x0800bb1d
 800bb7c:	0800bbd1 	.word	0x0800bbd1
 800bb80:	0800bb1d 	.word	0x0800bb1d
 800bb84:	0800bb1d 	.word	0x0800bb1d
 800bb88:	0800bc97 	.word	0x0800bc97
 800bb8c:	682b      	ldr	r3, [r5, #0]
 800bb8e:	1d1a      	adds	r2, r3, #4
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	602a      	str	r2, [r5, #0]
 800bb94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	e0a3      	b.n	800bce8 <_printf_i+0x1f4>
 800bba0:	6820      	ldr	r0, [r4, #0]
 800bba2:	6829      	ldr	r1, [r5, #0]
 800bba4:	0606      	lsls	r6, r0, #24
 800bba6:	f101 0304 	add.w	r3, r1, #4
 800bbaa:	d50a      	bpl.n	800bbc2 <_printf_i+0xce>
 800bbac:	680e      	ldr	r6, [r1, #0]
 800bbae:	602b      	str	r3, [r5, #0]
 800bbb0:	2e00      	cmp	r6, #0
 800bbb2:	da03      	bge.n	800bbbc <_printf_i+0xc8>
 800bbb4:	232d      	movs	r3, #45	; 0x2d
 800bbb6:	4276      	negs	r6, r6
 800bbb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbbc:	485e      	ldr	r0, [pc, #376]	; (800bd38 <_printf_i+0x244>)
 800bbbe:	230a      	movs	r3, #10
 800bbc0:	e019      	b.n	800bbf6 <_printf_i+0x102>
 800bbc2:	680e      	ldr	r6, [r1, #0]
 800bbc4:	602b      	str	r3, [r5, #0]
 800bbc6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bbca:	bf18      	it	ne
 800bbcc:	b236      	sxthne	r6, r6
 800bbce:	e7ef      	b.n	800bbb0 <_printf_i+0xbc>
 800bbd0:	682b      	ldr	r3, [r5, #0]
 800bbd2:	6820      	ldr	r0, [r4, #0]
 800bbd4:	1d19      	adds	r1, r3, #4
 800bbd6:	6029      	str	r1, [r5, #0]
 800bbd8:	0601      	lsls	r1, r0, #24
 800bbda:	d501      	bpl.n	800bbe0 <_printf_i+0xec>
 800bbdc:	681e      	ldr	r6, [r3, #0]
 800bbde:	e002      	b.n	800bbe6 <_printf_i+0xf2>
 800bbe0:	0646      	lsls	r6, r0, #25
 800bbe2:	d5fb      	bpl.n	800bbdc <_printf_i+0xe8>
 800bbe4:	881e      	ldrh	r6, [r3, #0]
 800bbe6:	4854      	ldr	r0, [pc, #336]	; (800bd38 <_printf_i+0x244>)
 800bbe8:	2f6f      	cmp	r7, #111	; 0x6f
 800bbea:	bf0c      	ite	eq
 800bbec:	2308      	moveq	r3, #8
 800bbee:	230a      	movne	r3, #10
 800bbf0:	2100      	movs	r1, #0
 800bbf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bbf6:	6865      	ldr	r5, [r4, #4]
 800bbf8:	60a5      	str	r5, [r4, #8]
 800bbfa:	2d00      	cmp	r5, #0
 800bbfc:	bfa2      	ittt	ge
 800bbfe:	6821      	ldrge	r1, [r4, #0]
 800bc00:	f021 0104 	bicge.w	r1, r1, #4
 800bc04:	6021      	strge	r1, [r4, #0]
 800bc06:	b90e      	cbnz	r6, 800bc0c <_printf_i+0x118>
 800bc08:	2d00      	cmp	r5, #0
 800bc0a:	d04d      	beq.n	800bca8 <_printf_i+0x1b4>
 800bc0c:	4615      	mov	r5, r2
 800bc0e:	fbb6 f1f3 	udiv	r1, r6, r3
 800bc12:	fb03 6711 	mls	r7, r3, r1, r6
 800bc16:	5dc7      	ldrb	r7, [r0, r7]
 800bc18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bc1c:	4637      	mov	r7, r6
 800bc1e:	42bb      	cmp	r3, r7
 800bc20:	460e      	mov	r6, r1
 800bc22:	d9f4      	bls.n	800bc0e <_printf_i+0x11a>
 800bc24:	2b08      	cmp	r3, #8
 800bc26:	d10b      	bne.n	800bc40 <_printf_i+0x14c>
 800bc28:	6823      	ldr	r3, [r4, #0]
 800bc2a:	07de      	lsls	r6, r3, #31
 800bc2c:	d508      	bpl.n	800bc40 <_printf_i+0x14c>
 800bc2e:	6923      	ldr	r3, [r4, #16]
 800bc30:	6861      	ldr	r1, [r4, #4]
 800bc32:	4299      	cmp	r1, r3
 800bc34:	bfde      	ittt	le
 800bc36:	2330      	movle	r3, #48	; 0x30
 800bc38:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bc3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bc40:	1b52      	subs	r2, r2, r5
 800bc42:	6122      	str	r2, [r4, #16]
 800bc44:	f8cd a000 	str.w	sl, [sp]
 800bc48:	464b      	mov	r3, r9
 800bc4a:	aa03      	add	r2, sp, #12
 800bc4c:	4621      	mov	r1, r4
 800bc4e:	4640      	mov	r0, r8
 800bc50:	f7ff fee2 	bl	800ba18 <_printf_common>
 800bc54:	3001      	adds	r0, #1
 800bc56:	d14c      	bne.n	800bcf2 <_printf_i+0x1fe>
 800bc58:	f04f 30ff 	mov.w	r0, #4294967295
 800bc5c:	b004      	add	sp, #16
 800bc5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc62:	4835      	ldr	r0, [pc, #212]	; (800bd38 <_printf_i+0x244>)
 800bc64:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bc68:	6829      	ldr	r1, [r5, #0]
 800bc6a:	6823      	ldr	r3, [r4, #0]
 800bc6c:	f851 6b04 	ldr.w	r6, [r1], #4
 800bc70:	6029      	str	r1, [r5, #0]
 800bc72:	061d      	lsls	r5, r3, #24
 800bc74:	d514      	bpl.n	800bca0 <_printf_i+0x1ac>
 800bc76:	07df      	lsls	r7, r3, #31
 800bc78:	bf44      	itt	mi
 800bc7a:	f043 0320 	orrmi.w	r3, r3, #32
 800bc7e:	6023      	strmi	r3, [r4, #0]
 800bc80:	b91e      	cbnz	r6, 800bc8a <_printf_i+0x196>
 800bc82:	6823      	ldr	r3, [r4, #0]
 800bc84:	f023 0320 	bic.w	r3, r3, #32
 800bc88:	6023      	str	r3, [r4, #0]
 800bc8a:	2310      	movs	r3, #16
 800bc8c:	e7b0      	b.n	800bbf0 <_printf_i+0xfc>
 800bc8e:	6823      	ldr	r3, [r4, #0]
 800bc90:	f043 0320 	orr.w	r3, r3, #32
 800bc94:	6023      	str	r3, [r4, #0]
 800bc96:	2378      	movs	r3, #120	; 0x78
 800bc98:	4828      	ldr	r0, [pc, #160]	; (800bd3c <_printf_i+0x248>)
 800bc9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bc9e:	e7e3      	b.n	800bc68 <_printf_i+0x174>
 800bca0:	0659      	lsls	r1, r3, #25
 800bca2:	bf48      	it	mi
 800bca4:	b2b6      	uxthmi	r6, r6
 800bca6:	e7e6      	b.n	800bc76 <_printf_i+0x182>
 800bca8:	4615      	mov	r5, r2
 800bcaa:	e7bb      	b.n	800bc24 <_printf_i+0x130>
 800bcac:	682b      	ldr	r3, [r5, #0]
 800bcae:	6826      	ldr	r6, [r4, #0]
 800bcb0:	6961      	ldr	r1, [r4, #20]
 800bcb2:	1d18      	adds	r0, r3, #4
 800bcb4:	6028      	str	r0, [r5, #0]
 800bcb6:	0635      	lsls	r5, r6, #24
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	d501      	bpl.n	800bcc0 <_printf_i+0x1cc>
 800bcbc:	6019      	str	r1, [r3, #0]
 800bcbe:	e002      	b.n	800bcc6 <_printf_i+0x1d2>
 800bcc0:	0670      	lsls	r0, r6, #25
 800bcc2:	d5fb      	bpl.n	800bcbc <_printf_i+0x1c8>
 800bcc4:	8019      	strh	r1, [r3, #0]
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	6123      	str	r3, [r4, #16]
 800bcca:	4615      	mov	r5, r2
 800bccc:	e7ba      	b.n	800bc44 <_printf_i+0x150>
 800bcce:	682b      	ldr	r3, [r5, #0]
 800bcd0:	1d1a      	adds	r2, r3, #4
 800bcd2:	602a      	str	r2, [r5, #0]
 800bcd4:	681d      	ldr	r5, [r3, #0]
 800bcd6:	6862      	ldr	r2, [r4, #4]
 800bcd8:	2100      	movs	r1, #0
 800bcda:	4628      	mov	r0, r5
 800bcdc:	f7f4 fa80 	bl	80001e0 <memchr>
 800bce0:	b108      	cbz	r0, 800bce6 <_printf_i+0x1f2>
 800bce2:	1b40      	subs	r0, r0, r5
 800bce4:	6060      	str	r0, [r4, #4]
 800bce6:	6863      	ldr	r3, [r4, #4]
 800bce8:	6123      	str	r3, [r4, #16]
 800bcea:	2300      	movs	r3, #0
 800bcec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcf0:	e7a8      	b.n	800bc44 <_printf_i+0x150>
 800bcf2:	6923      	ldr	r3, [r4, #16]
 800bcf4:	462a      	mov	r2, r5
 800bcf6:	4649      	mov	r1, r9
 800bcf8:	4640      	mov	r0, r8
 800bcfa:	47d0      	blx	sl
 800bcfc:	3001      	adds	r0, #1
 800bcfe:	d0ab      	beq.n	800bc58 <_printf_i+0x164>
 800bd00:	6823      	ldr	r3, [r4, #0]
 800bd02:	079b      	lsls	r3, r3, #30
 800bd04:	d413      	bmi.n	800bd2e <_printf_i+0x23a>
 800bd06:	68e0      	ldr	r0, [r4, #12]
 800bd08:	9b03      	ldr	r3, [sp, #12]
 800bd0a:	4298      	cmp	r0, r3
 800bd0c:	bfb8      	it	lt
 800bd0e:	4618      	movlt	r0, r3
 800bd10:	e7a4      	b.n	800bc5c <_printf_i+0x168>
 800bd12:	2301      	movs	r3, #1
 800bd14:	4632      	mov	r2, r6
 800bd16:	4649      	mov	r1, r9
 800bd18:	4640      	mov	r0, r8
 800bd1a:	47d0      	blx	sl
 800bd1c:	3001      	adds	r0, #1
 800bd1e:	d09b      	beq.n	800bc58 <_printf_i+0x164>
 800bd20:	3501      	adds	r5, #1
 800bd22:	68e3      	ldr	r3, [r4, #12]
 800bd24:	9903      	ldr	r1, [sp, #12]
 800bd26:	1a5b      	subs	r3, r3, r1
 800bd28:	42ab      	cmp	r3, r5
 800bd2a:	dcf2      	bgt.n	800bd12 <_printf_i+0x21e>
 800bd2c:	e7eb      	b.n	800bd06 <_printf_i+0x212>
 800bd2e:	2500      	movs	r5, #0
 800bd30:	f104 0619 	add.w	r6, r4, #25
 800bd34:	e7f5      	b.n	800bd22 <_printf_i+0x22e>
 800bd36:	bf00      	nop
 800bd38:	0800e472 	.word	0x0800e472
 800bd3c:	0800e483 	.word	0x0800e483

0800bd40 <iprintf>:
 800bd40:	b40f      	push	{r0, r1, r2, r3}
 800bd42:	4b0a      	ldr	r3, [pc, #40]	; (800bd6c <iprintf+0x2c>)
 800bd44:	b513      	push	{r0, r1, r4, lr}
 800bd46:	681c      	ldr	r4, [r3, #0]
 800bd48:	b124      	cbz	r4, 800bd54 <iprintf+0x14>
 800bd4a:	69a3      	ldr	r3, [r4, #24]
 800bd4c:	b913      	cbnz	r3, 800bd54 <iprintf+0x14>
 800bd4e:	4620      	mov	r0, r4
 800bd50:	f7ff f9cc 	bl	800b0ec <__sinit>
 800bd54:	ab05      	add	r3, sp, #20
 800bd56:	9a04      	ldr	r2, [sp, #16]
 800bd58:	68a1      	ldr	r1, [r4, #8]
 800bd5a:	9301      	str	r3, [sp, #4]
 800bd5c:	4620      	mov	r0, r4
 800bd5e:	f002 f83b 	bl	800ddd8 <_vfiprintf_r>
 800bd62:	b002      	add	sp, #8
 800bd64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd68:	b004      	add	sp, #16
 800bd6a:	4770      	bx	lr
 800bd6c:	20000068 	.word	0x20000068

0800bd70 <putchar>:
 800bd70:	4b09      	ldr	r3, [pc, #36]	; (800bd98 <putchar+0x28>)
 800bd72:	b513      	push	{r0, r1, r4, lr}
 800bd74:	681c      	ldr	r4, [r3, #0]
 800bd76:	4601      	mov	r1, r0
 800bd78:	b134      	cbz	r4, 800bd88 <putchar+0x18>
 800bd7a:	69a3      	ldr	r3, [r4, #24]
 800bd7c:	b923      	cbnz	r3, 800bd88 <putchar+0x18>
 800bd7e:	9001      	str	r0, [sp, #4]
 800bd80:	4620      	mov	r0, r4
 800bd82:	f7ff f9b3 	bl	800b0ec <__sinit>
 800bd86:	9901      	ldr	r1, [sp, #4]
 800bd88:	68a2      	ldr	r2, [r4, #8]
 800bd8a:	4620      	mov	r0, r4
 800bd8c:	b002      	add	sp, #8
 800bd8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd92:	f002 b951 	b.w	800e038 <_putc_r>
 800bd96:	bf00      	nop
 800bd98:	20000068 	.word	0x20000068

0800bd9c <_puts_r>:
 800bd9c:	b570      	push	{r4, r5, r6, lr}
 800bd9e:	460e      	mov	r6, r1
 800bda0:	4605      	mov	r5, r0
 800bda2:	b118      	cbz	r0, 800bdac <_puts_r+0x10>
 800bda4:	6983      	ldr	r3, [r0, #24]
 800bda6:	b90b      	cbnz	r3, 800bdac <_puts_r+0x10>
 800bda8:	f7ff f9a0 	bl	800b0ec <__sinit>
 800bdac:	69ab      	ldr	r3, [r5, #24]
 800bdae:	68ac      	ldr	r4, [r5, #8]
 800bdb0:	b913      	cbnz	r3, 800bdb8 <_puts_r+0x1c>
 800bdb2:	4628      	mov	r0, r5
 800bdb4:	f7ff f99a 	bl	800b0ec <__sinit>
 800bdb8:	4b2c      	ldr	r3, [pc, #176]	; (800be6c <_puts_r+0xd0>)
 800bdba:	429c      	cmp	r4, r3
 800bdbc:	d120      	bne.n	800be00 <_puts_r+0x64>
 800bdbe:	686c      	ldr	r4, [r5, #4]
 800bdc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bdc2:	07db      	lsls	r3, r3, #31
 800bdc4:	d405      	bmi.n	800bdd2 <_puts_r+0x36>
 800bdc6:	89a3      	ldrh	r3, [r4, #12]
 800bdc8:	0598      	lsls	r0, r3, #22
 800bdca:	d402      	bmi.n	800bdd2 <_puts_r+0x36>
 800bdcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdce:	f7f7 f8dd 	bl	8002f8c <__retarget_lock_acquire_recursive>
 800bdd2:	89a3      	ldrh	r3, [r4, #12]
 800bdd4:	0719      	lsls	r1, r3, #28
 800bdd6:	d51d      	bpl.n	800be14 <_puts_r+0x78>
 800bdd8:	6923      	ldr	r3, [r4, #16]
 800bdda:	b1db      	cbz	r3, 800be14 <_puts_r+0x78>
 800bddc:	3e01      	subs	r6, #1
 800bdde:	68a3      	ldr	r3, [r4, #8]
 800bde0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bde4:	3b01      	subs	r3, #1
 800bde6:	60a3      	str	r3, [r4, #8]
 800bde8:	bb39      	cbnz	r1, 800be3a <_puts_r+0x9e>
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	da38      	bge.n	800be60 <_puts_r+0xc4>
 800bdee:	4622      	mov	r2, r4
 800bdf0:	210a      	movs	r1, #10
 800bdf2:	4628      	mov	r0, r5
 800bdf4:	f000 fa2a 	bl	800c24c <__swbuf_r>
 800bdf8:	3001      	adds	r0, #1
 800bdfa:	d011      	beq.n	800be20 <_puts_r+0x84>
 800bdfc:	250a      	movs	r5, #10
 800bdfe:	e011      	b.n	800be24 <_puts_r+0x88>
 800be00:	4b1b      	ldr	r3, [pc, #108]	; (800be70 <_puts_r+0xd4>)
 800be02:	429c      	cmp	r4, r3
 800be04:	d101      	bne.n	800be0a <_puts_r+0x6e>
 800be06:	68ac      	ldr	r4, [r5, #8]
 800be08:	e7da      	b.n	800bdc0 <_puts_r+0x24>
 800be0a:	4b1a      	ldr	r3, [pc, #104]	; (800be74 <_puts_r+0xd8>)
 800be0c:	429c      	cmp	r4, r3
 800be0e:	bf08      	it	eq
 800be10:	68ec      	ldreq	r4, [r5, #12]
 800be12:	e7d5      	b.n	800bdc0 <_puts_r+0x24>
 800be14:	4621      	mov	r1, r4
 800be16:	4628      	mov	r0, r5
 800be18:	f000 fa7c 	bl	800c314 <__swsetup_r>
 800be1c:	2800      	cmp	r0, #0
 800be1e:	d0dd      	beq.n	800bddc <_puts_r+0x40>
 800be20:	f04f 35ff 	mov.w	r5, #4294967295
 800be24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be26:	07da      	lsls	r2, r3, #31
 800be28:	d405      	bmi.n	800be36 <_puts_r+0x9a>
 800be2a:	89a3      	ldrh	r3, [r4, #12]
 800be2c:	059b      	lsls	r3, r3, #22
 800be2e:	d402      	bmi.n	800be36 <_puts_r+0x9a>
 800be30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be32:	f7f7 f8bf 	bl	8002fb4 <__retarget_lock_release_recursive>
 800be36:	4628      	mov	r0, r5
 800be38:	bd70      	pop	{r4, r5, r6, pc}
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	da04      	bge.n	800be48 <_puts_r+0xac>
 800be3e:	69a2      	ldr	r2, [r4, #24]
 800be40:	429a      	cmp	r2, r3
 800be42:	dc06      	bgt.n	800be52 <_puts_r+0xb6>
 800be44:	290a      	cmp	r1, #10
 800be46:	d004      	beq.n	800be52 <_puts_r+0xb6>
 800be48:	6823      	ldr	r3, [r4, #0]
 800be4a:	1c5a      	adds	r2, r3, #1
 800be4c:	6022      	str	r2, [r4, #0]
 800be4e:	7019      	strb	r1, [r3, #0]
 800be50:	e7c5      	b.n	800bdde <_puts_r+0x42>
 800be52:	4622      	mov	r2, r4
 800be54:	4628      	mov	r0, r5
 800be56:	f000 f9f9 	bl	800c24c <__swbuf_r>
 800be5a:	3001      	adds	r0, #1
 800be5c:	d1bf      	bne.n	800bdde <_puts_r+0x42>
 800be5e:	e7df      	b.n	800be20 <_puts_r+0x84>
 800be60:	6823      	ldr	r3, [r4, #0]
 800be62:	250a      	movs	r5, #10
 800be64:	1c5a      	adds	r2, r3, #1
 800be66:	6022      	str	r2, [r4, #0]
 800be68:	701d      	strb	r5, [r3, #0]
 800be6a:	e7db      	b.n	800be24 <_puts_r+0x88>
 800be6c:	0800e41c 	.word	0x0800e41c
 800be70:	0800e43c 	.word	0x0800e43c
 800be74:	0800e3fc 	.word	0x0800e3fc

0800be78 <puts>:
 800be78:	4b02      	ldr	r3, [pc, #8]	; (800be84 <puts+0xc>)
 800be7a:	4601      	mov	r1, r0
 800be7c:	6818      	ldr	r0, [r3, #0]
 800be7e:	f7ff bf8d 	b.w	800bd9c <_puts_r>
 800be82:	bf00      	nop
 800be84:	20000068 	.word	0x20000068

0800be88 <cleanup_glue>:
 800be88:	b538      	push	{r3, r4, r5, lr}
 800be8a:	460c      	mov	r4, r1
 800be8c:	6809      	ldr	r1, [r1, #0]
 800be8e:	4605      	mov	r5, r0
 800be90:	b109      	cbz	r1, 800be96 <cleanup_glue+0xe>
 800be92:	f7ff fff9 	bl	800be88 <cleanup_glue>
 800be96:	4621      	mov	r1, r4
 800be98:	4628      	mov	r0, r5
 800be9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be9e:	f7ff ba05 	b.w	800b2ac <_free_r>
	...

0800bea4 <_reclaim_reent>:
 800bea4:	4b2c      	ldr	r3, [pc, #176]	; (800bf58 <_reclaim_reent+0xb4>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	4283      	cmp	r3, r0
 800beaa:	b570      	push	{r4, r5, r6, lr}
 800beac:	4604      	mov	r4, r0
 800beae:	d051      	beq.n	800bf54 <_reclaim_reent+0xb0>
 800beb0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800beb2:	b143      	cbz	r3, 800bec6 <_reclaim_reent+0x22>
 800beb4:	68db      	ldr	r3, [r3, #12]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d14a      	bne.n	800bf50 <_reclaim_reent+0xac>
 800beba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bebc:	6819      	ldr	r1, [r3, #0]
 800bebe:	b111      	cbz	r1, 800bec6 <_reclaim_reent+0x22>
 800bec0:	4620      	mov	r0, r4
 800bec2:	f7ff f9f3 	bl	800b2ac <_free_r>
 800bec6:	6961      	ldr	r1, [r4, #20]
 800bec8:	b111      	cbz	r1, 800bed0 <_reclaim_reent+0x2c>
 800beca:	4620      	mov	r0, r4
 800becc:	f7ff f9ee 	bl	800b2ac <_free_r>
 800bed0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bed2:	b111      	cbz	r1, 800beda <_reclaim_reent+0x36>
 800bed4:	4620      	mov	r0, r4
 800bed6:	f7ff f9e9 	bl	800b2ac <_free_r>
 800beda:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bedc:	b111      	cbz	r1, 800bee4 <_reclaim_reent+0x40>
 800bede:	4620      	mov	r0, r4
 800bee0:	f7ff f9e4 	bl	800b2ac <_free_r>
 800bee4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bee6:	b111      	cbz	r1, 800beee <_reclaim_reent+0x4a>
 800bee8:	4620      	mov	r0, r4
 800beea:	f7ff f9df 	bl	800b2ac <_free_r>
 800beee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bef0:	b111      	cbz	r1, 800bef8 <_reclaim_reent+0x54>
 800bef2:	4620      	mov	r0, r4
 800bef4:	f7ff f9da 	bl	800b2ac <_free_r>
 800bef8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800befa:	b111      	cbz	r1, 800bf02 <_reclaim_reent+0x5e>
 800befc:	4620      	mov	r0, r4
 800befe:	f7ff f9d5 	bl	800b2ac <_free_r>
 800bf02:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bf04:	b111      	cbz	r1, 800bf0c <_reclaim_reent+0x68>
 800bf06:	4620      	mov	r0, r4
 800bf08:	f7ff f9d0 	bl	800b2ac <_free_r>
 800bf0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf0e:	b111      	cbz	r1, 800bf16 <_reclaim_reent+0x72>
 800bf10:	4620      	mov	r0, r4
 800bf12:	f7ff f9cb 	bl	800b2ac <_free_r>
 800bf16:	69a3      	ldr	r3, [r4, #24]
 800bf18:	b1e3      	cbz	r3, 800bf54 <_reclaim_reent+0xb0>
 800bf1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bf1c:	4620      	mov	r0, r4
 800bf1e:	4798      	blx	r3
 800bf20:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bf22:	b1b9      	cbz	r1, 800bf54 <_reclaim_reent+0xb0>
 800bf24:	4620      	mov	r0, r4
 800bf26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bf2a:	f7ff bfad 	b.w	800be88 <cleanup_glue>
 800bf2e:	5949      	ldr	r1, [r1, r5]
 800bf30:	b941      	cbnz	r1, 800bf44 <_reclaim_reent+0xa0>
 800bf32:	3504      	adds	r5, #4
 800bf34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf36:	2d80      	cmp	r5, #128	; 0x80
 800bf38:	68d9      	ldr	r1, [r3, #12]
 800bf3a:	d1f8      	bne.n	800bf2e <_reclaim_reent+0x8a>
 800bf3c:	4620      	mov	r0, r4
 800bf3e:	f7ff f9b5 	bl	800b2ac <_free_r>
 800bf42:	e7ba      	b.n	800beba <_reclaim_reent+0x16>
 800bf44:	680e      	ldr	r6, [r1, #0]
 800bf46:	4620      	mov	r0, r4
 800bf48:	f7ff f9b0 	bl	800b2ac <_free_r>
 800bf4c:	4631      	mov	r1, r6
 800bf4e:	e7ef      	b.n	800bf30 <_reclaim_reent+0x8c>
 800bf50:	2500      	movs	r5, #0
 800bf52:	e7ef      	b.n	800bf34 <_reclaim_reent+0x90>
 800bf54:	bd70      	pop	{r4, r5, r6, pc}
 800bf56:	bf00      	nop
 800bf58:	20000068 	.word	0x20000068

0800bf5c <_sbrk_r>:
 800bf5c:	b538      	push	{r3, r4, r5, lr}
 800bf5e:	4d06      	ldr	r5, [pc, #24]	; (800bf78 <_sbrk_r+0x1c>)
 800bf60:	2300      	movs	r3, #0
 800bf62:	4604      	mov	r4, r0
 800bf64:	4608      	mov	r0, r1
 800bf66:	602b      	str	r3, [r5, #0]
 800bf68:	f7f6 fefe 	bl	8002d68 <_sbrk>
 800bf6c:	1c43      	adds	r3, r0, #1
 800bf6e:	d102      	bne.n	800bf76 <_sbrk_r+0x1a>
 800bf70:	682b      	ldr	r3, [r5, #0]
 800bf72:	b103      	cbz	r3, 800bf76 <_sbrk_r+0x1a>
 800bf74:	6023      	str	r3, [r4, #0]
 800bf76:	bd38      	pop	{r3, r4, r5, pc}
 800bf78:	20005634 	.word	0x20005634

0800bf7c <_raise_r>:
 800bf7c:	291f      	cmp	r1, #31
 800bf7e:	b538      	push	{r3, r4, r5, lr}
 800bf80:	4604      	mov	r4, r0
 800bf82:	460d      	mov	r5, r1
 800bf84:	d904      	bls.n	800bf90 <_raise_r+0x14>
 800bf86:	2316      	movs	r3, #22
 800bf88:	6003      	str	r3, [r0, #0]
 800bf8a:	f04f 30ff 	mov.w	r0, #4294967295
 800bf8e:	bd38      	pop	{r3, r4, r5, pc}
 800bf90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bf92:	b112      	cbz	r2, 800bf9a <_raise_r+0x1e>
 800bf94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bf98:	b94b      	cbnz	r3, 800bfae <_raise_r+0x32>
 800bf9a:	4620      	mov	r0, r4
 800bf9c:	f000 f830 	bl	800c000 <_getpid_r>
 800bfa0:	462a      	mov	r2, r5
 800bfa2:	4601      	mov	r1, r0
 800bfa4:	4620      	mov	r0, r4
 800bfa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfaa:	f000 b817 	b.w	800bfdc <_kill_r>
 800bfae:	2b01      	cmp	r3, #1
 800bfb0:	d00a      	beq.n	800bfc8 <_raise_r+0x4c>
 800bfb2:	1c59      	adds	r1, r3, #1
 800bfb4:	d103      	bne.n	800bfbe <_raise_r+0x42>
 800bfb6:	2316      	movs	r3, #22
 800bfb8:	6003      	str	r3, [r0, #0]
 800bfba:	2001      	movs	r0, #1
 800bfbc:	e7e7      	b.n	800bf8e <_raise_r+0x12>
 800bfbe:	2400      	movs	r4, #0
 800bfc0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bfc4:	4628      	mov	r0, r5
 800bfc6:	4798      	blx	r3
 800bfc8:	2000      	movs	r0, #0
 800bfca:	e7e0      	b.n	800bf8e <_raise_r+0x12>

0800bfcc <raise>:
 800bfcc:	4b02      	ldr	r3, [pc, #8]	; (800bfd8 <raise+0xc>)
 800bfce:	4601      	mov	r1, r0
 800bfd0:	6818      	ldr	r0, [r3, #0]
 800bfd2:	f7ff bfd3 	b.w	800bf7c <_raise_r>
 800bfd6:	bf00      	nop
 800bfd8:	20000068 	.word	0x20000068

0800bfdc <_kill_r>:
 800bfdc:	b538      	push	{r3, r4, r5, lr}
 800bfde:	4d07      	ldr	r5, [pc, #28]	; (800bffc <_kill_r+0x20>)
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	4604      	mov	r4, r0
 800bfe4:	4608      	mov	r0, r1
 800bfe6:	4611      	mov	r1, r2
 800bfe8:	602b      	str	r3, [r5, #0]
 800bfea:	f7f6 fe35 	bl	8002c58 <_kill>
 800bfee:	1c43      	adds	r3, r0, #1
 800bff0:	d102      	bne.n	800bff8 <_kill_r+0x1c>
 800bff2:	682b      	ldr	r3, [r5, #0]
 800bff4:	b103      	cbz	r3, 800bff8 <_kill_r+0x1c>
 800bff6:	6023      	str	r3, [r4, #0]
 800bff8:	bd38      	pop	{r3, r4, r5, pc}
 800bffa:	bf00      	nop
 800bffc:	20005634 	.word	0x20005634

0800c000 <_getpid_r>:
 800c000:	f7f6 be22 	b.w	8002c48 <_getpid>

0800c004 <sniprintf>:
 800c004:	b40c      	push	{r2, r3}
 800c006:	b530      	push	{r4, r5, lr}
 800c008:	4b17      	ldr	r3, [pc, #92]	; (800c068 <sniprintf+0x64>)
 800c00a:	1e0c      	subs	r4, r1, #0
 800c00c:	681d      	ldr	r5, [r3, #0]
 800c00e:	b09d      	sub	sp, #116	; 0x74
 800c010:	da08      	bge.n	800c024 <sniprintf+0x20>
 800c012:	238b      	movs	r3, #139	; 0x8b
 800c014:	602b      	str	r3, [r5, #0]
 800c016:	f04f 30ff 	mov.w	r0, #4294967295
 800c01a:	b01d      	add	sp, #116	; 0x74
 800c01c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c020:	b002      	add	sp, #8
 800c022:	4770      	bx	lr
 800c024:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c028:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c02c:	bf14      	ite	ne
 800c02e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c032:	4623      	moveq	r3, r4
 800c034:	9304      	str	r3, [sp, #16]
 800c036:	9307      	str	r3, [sp, #28]
 800c038:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c03c:	9002      	str	r0, [sp, #8]
 800c03e:	9006      	str	r0, [sp, #24]
 800c040:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c044:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c046:	ab21      	add	r3, sp, #132	; 0x84
 800c048:	a902      	add	r1, sp, #8
 800c04a:	4628      	mov	r0, r5
 800c04c:	9301      	str	r3, [sp, #4]
 800c04e:	f001 fd99 	bl	800db84 <_svfiprintf_r>
 800c052:	1c43      	adds	r3, r0, #1
 800c054:	bfbc      	itt	lt
 800c056:	238b      	movlt	r3, #139	; 0x8b
 800c058:	602b      	strlt	r3, [r5, #0]
 800c05a:	2c00      	cmp	r4, #0
 800c05c:	d0dd      	beq.n	800c01a <sniprintf+0x16>
 800c05e:	9b02      	ldr	r3, [sp, #8]
 800c060:	2200      	movs	r2, #0
 800c062:	701a      	strb	r2, [r3, #0]
 800c064:	e7d9      	b.n	800c01a <sniprintf+0x16>
 800c066:	bf00      	nop
 800c068:	20000068 	.word	0x20000068

0800c06c <siprintf>:
 800c06c:	b40e      	push	{r1, r2, r3}
 800c06e:	b500      	push	{lr}
 800c070:	b09c      	sub	sp, #112	; 0x70
 800c072:	ab1d      	add	r3, sp, #116	; 0x74
 800c074:	9002      	str	r0, [sp, #8]
 800c076:	9006      	str	r0, [sp, #24]
 800c078:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c07c:	4809      	ldr	r0, [pc, #36]	; (800c0a4 <siprintf+0x38>)
 800c07e:	9107      	str	r1, [sp, #28]
 800c080:	9104      	str	r1, [sp, #16]
 800c082:	4909      	ldr	r1, [pc, #36]	; (800c0a8 <siprintf+0x3c>)
 800c084:	f853 2b04 	ldr.w	r2, [r3], #4
 800c088:	9105      	str	r1, [sp, #20]
 800c08a:	6800      	ldr	r0, [r0, #0]
 800c08c:	9301      	str	r3, [sp, #4]
 800c08e:	a902      	add	r1, sp, #8
 800c090:	f001 fd78 	bl	800db84 <_svfiprintf_r>
 800c094:	9b02      	ldr	r3, [sp, #8]
 800c096:	2200      	movs	r2, #0
 800c098:	701a      	strb	r2, [r3, #0]
 800c09a:	b01c      	add	sp, #112	; 0x70
 800c09c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0a0:	b003      	add	sp, #12
 800c0a2:	4770      	bx	lr
 800c0a4:	20000068 	.word	0x20000068
 800c0a8:	ffff0208 	.word	0xffff0208

0800c0ac <__sread>:
 800c0ac:	b510      	push	{r4, lr}
 800c0ae:	460c      	mov	r4, r1
 800c0b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0b4:	f002 f808 	bl	800e0c8 <_read_r>
 800c0b8:	2800      	cmp	r0, #0
 800c0ba:	bfab      	itete	ge
 800c0bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c0be:	89a3      	ldrhlt	r3, [r4, #12]
 800c0c0:	181b      	addge	r3, r3, r0
 800c0c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c0c6:	bfac      	ite	ge
 800c0c8:	6563      	strge	r3, [r4, #84]	; 0x54
 800c0ca:	81a3      	strhlt	r3, [r4, #12]
 800c0cc:	bd10      	pop	{r4, pc}

0800c0ce <__swrite>:
 800c0ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0d2:	461f      	mov	r7, r3
 800c0d4:	898b      	ldrh	r3, [r1, #12]
 800c0d6:	05db      	lsls	r3, r3, #23
 800c0d8:	4605      	mov	r5, r0
 800c0da:	460c      	mov	r4, r1
 800c0dc:	4616      	mov	r6, r2
 800c0de:	d505      	bpl.n	800c0ec <__swrite+0x1e>
 800c0e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0e4:	2302      	movs	r3, #2
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	f001 f8d2 	bl	800d290 <_lseek_r>
 800c0ec:	89a3      	ldrh	r3, [r4, #12]
 800c0ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c0f6:	81a3      	strh	r3, [r4, #12]
 800c0f8:	4632      	mov	r2, r6
 800c0fa:	463b      	mov	r3, r7
 800c0fc:	4628      	mov	r0, r5
 800c0fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c102:	f000 b8f5 	b.w	800c2f0 <_write_r>

0800c106 <__sseek>:
 800c106:	b510      	push	{r4, lr}
 800c108:	460c      	mov	r4, r1
 800c10a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c10e:	f001 f8bf 	bl	800d290 <_lseek_r>
 800c112:	1c43      	adds	r3, r0, #1
 800c114:	89a3      	ldrh	r3, [r4, #12]
 800c116:	bf15      	itete	ne
 800c118:	6560      	strne	r0, [r4, #84]	; 0x54
 800c11a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c11e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c122:	81a3      	strheq	r3, [r4, #12]
 800c124:	bf18      	it	ne
 800c126:	81a3      	strhne	r3, [r4, #12]
 800c128:	bd10      	pop	{r4, pc}

0800c12a <__sclose>:
 800c12a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c12e:	f000 b95f 	b.w	800c3f0 <_close_r>
	...

0800c134 <_strtol_l.constprop.0>:
 800c134:	2b01      	cmp	r3, #1
 800c136:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c13a:	d001      	beq.n	800c140 <_strtol_l.constprop.0+0xc>
 800c13c:	2b24      	cmp	r3, #36	; 0x24
 800c13e:	d906      	bls.n	800c14e <_strtol_l.constprop.0+0x1a>
 800c140:	f7fe ff76 	bl	800b030 <__errno>
 800c144:	2316      	movs	r3, #22
 800c146:	6003      	str	r3, [r0, #0]
 800c148:	2000      	movs	r0, #0
 800c14a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c14e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c234 <_strtol_l.constprop.0+0x100>
 800c152:	460d      	mov	r5, r1
 800c154:	462e      	mov	r6, r5
 800c156:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c15a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c15e:	f017 0708 	ands.w	r7, r7, #8
 800c162:	d1f7      	bne.n	800c154 <_strtol_l.constprop.0+0x20>
 800c164:	2c2d      	cmp	r4, #45	; 0x2d
 800c166:	d132      	bne.n	800c1ce <_strtol_l.constprop.0+0x9a>
 800c168:	782c      	ldrb	r4, [r5, #0]
 800c16a:	2701      	movs	r7, #1
 800c16c:	1cb5      	adds	r5, r6, #2
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d05b      	beq.n	800c22a <_strtol_l.constprop.0+0xf6>
 800c172:	2b10      	cmp	r3, #16
 800c174:	d109      	bne.n	800c18a <_strtol_l.constprop.0+0x56>
 800c176:	2c30      	cmp	r4, #48	; 0x30
 800c178:	d107      	bne.n	800c18a <_strtol_l.constprop.0+0x56>
 800c17a:	782c      	ldrb	r4, [r5, #0]
 800c17c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c180:	2c58      	cmp	r4, #88	; 0x58
 800c182:	d14d      	bne.n	800c220 <_strtol_l.constprop.0+0xec>
 800c184:	786c      	ldrb	r4, [r5, #1]
 800c186:	2310      	movs	r3, #16
 800c188:	3502      	adds	r5, #2
 800c18a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c18e:	f108 38ff 	add.w	r8, r8, #4294967295
 800c192:	f04f 0c00 	mov.w	ip, #0
 800c196:	fbb8 f9f3 	udiv	r9, r8, r3
 800c19a:	4666      	mov	r6, ip
 800c19c:	fb03 8a19 	mls	sl, r3, r9, r8
 800c1a0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c1a4:	f1be 0f09 	cmp.w	lr, #9
 800c1a8:	d816      	bhi.n	800c1d8 <_strtol_l.constprop.0+0xa4>
 800c1aa:	4674      	mov	r4, lr
 800c1ac:	42a3      	cmp	r3, r4
 800c1ae:	dd24      	ble.n	800c1fa <_strtol_l.constprop.0+0xc6>
 800c1b0:	f1bc 0f00 	cmp.w	ip, #0
 800c1b4:	db1e      	blt.n	800c1f4 <_strtol_l.constprop.0+0xc0>
 800c1b6:	45b1      	cmp	r9, r6
 800c1b8:	d31c      	bcc.n	800c1f4 <_strtol_l.constprop.0+0xc0>
 800c1ba:	d101      	bne.n	800c1c0 <_strtol_l.constprop.0+0x8c>
 800c1bc:	45a2      	cmp	sl, r4
 800c1be:	db19      	blt.n	800c1f4 <_strtol_l.constprop.0+0xc0>
 800c1c0:	fb06 4603 	mla	r6, r6, r3, r4
 800c1c4:	f04f 0c01 	mov.w	ip, #1
 800c1c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c1cc:	e7e8      	b.n	800c1a0 <_strtol_l.constprop.0+0x6c>
 800c1ce:	2c2b      	cmp	r4, #43	; 0x2b
 800c1d0:	bf04      	itt	eq
 800c1d2:	782c      	ldrbeq	r4, [r5, #0]
 800c1d4:	1cb5      	addeq	r5, r6, #2
 800c1d6:	e7ca      	b.n	800c16e <_strtol_l.constprop.0+0x3a>
 800c1d8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c1dc:	f1be 0f19 	cmp.w	lr, #25
 800c1e0:	d801      	bhi.n	800c1e6 <_strtol_l.constprop.0+0xb2>
 800c1e2:	3c37      	subs	r4, #55	; 0x37
 800c1e4:	e7e2      	b.n	800c1ac <_strtol_l.constprop.0+0x78>
 800c1e6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c1ea:	f1be 0f19 	cmp.w	lr, #25
 800c1ee:	d804      	bhi.n	800c1fa <_strtol_l.constprop.0+0xc6>
 800c1f0:	3c57      	subs	r4, #87	; 0x57
 800c1f2:	e7db      	b.n	800c1ac <_strtol_l.constprop.0+0x78>
 800c1f4:	f04f 3cff 	mov.w	ip, #4294967295
 800c1f8:	e7e6      	b.n	800c1c8 <_strtol_l.constprop.0+0x94>
 800c1fa:	f1bc 0f00 	cmp.w	ip, #0
 800c1fe:	da05      	bge.n	800c20c <_strtol_l.constprop.0+0xd8>
 800c200:	2322      	movs	r3, #34	; 0x22
 800c202:	6003      	str	r3, [r0, #0]
 800c204:	4646      	mov	r6, r8
 800c206:	b942      	cbnz	r2, 800c21a <_strtol_l.constprop.0+0xe6>
 800c208:	4630      	mov	r0, r6
 800c20a:	e79e      	b.n	800c14a <_strtol_l.constprop.0+0x16>
 800c20c:	b107      	cbz	r7, 800c210 <_strtol_l.constprop.0+0xdc>
 800c20e:	4276      	negs	r6, r6
 800c210:	2a00      	cmp	r2, #0
 800c212:	d0f9      	beq.n	800c208 <_strtol_l.constprop.0+0xd4>
 800c214:	f1bc 0f00 	cmp.w	ip, #0
 800c218:	d000      	beq.n	800c21c <_strtol_l.constprop.0+0xe8>
 800c21a:	1e69      	subs	r1, r5, #1
 800c21c:	6011      	str	r1, [r2, #0]
 800c21e:	e7f3      	b.n	800c208 <_strtol_l.constprop.0+0xd4>
 800c220:	2430      	movs	r4, #48	; 0x30
 800c222:	2b00      	cmp	r3, #0
 800c224:	d1b1      	bne.n	800c18a <_strtol_l.constprop.0+0x56>
 800c226:	2308      	movs	r3, #8
 800c228:	e7af      	b.n	800c18a <_strtol_l.constprop.0+0x56>
 800c22a:	2c30      	cmp	r4, #48	; 0x30
 800c22c:	d0a5      	beq.n	800c17a <_strtol_l.constprop.0+0x46>
 800c22e:	230a      	movs	r3, #10
 800c230:	e7ab      	b.n	800c18a <_strtol_l.constprop.0+0x56>
 800c232:	bf00      	nop
 800c234:	0800e495 	.word	0x0800e495

0800c238 <strtol>:
 800c238:	4613      	mov	r3, r2
 800c23a:	460a      	mov	r2, r1
 800c23c:	4601      	mov	r1, r0
 800c23e:	4802      	ldr	r0, [pc, #8]	; (800c248 <strtol+0x10>)
 800c240:	6800      	ldr	r0, [r0, #0]
 800c242:	f7ff bf77 	b.w	800c134 <_strtol_l.constprop.0>
 800c246:	bf00      	nop
 800c248:	20000068 	.word	0x20000068

0800c24c <__swbuf_r>:
 800c24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c24e:	460e      	mov	r6, r1
 800c250:	4614      	mov	r4, r2
 800c252:	4605      	mov	r5, r0
 800c254:	b118      	cbz	r0, 800c25e <__swbuf_r+0x12>
 800c256:	6983      	ldr	r3, [r0, #24]
 800c258:	b90b      	cbnz	r3, 800c25e <__swbuf_r+0x12>
 800c25a:	f7fe ff47 	bl	800b0ec <__sinit>
 800c25e:	4b21      	ldr	r3, [pc, #132]	; (800c2e4 <__swbuf_r+0x98>)
 800c260:	429c      	cmp	r4, r3
 800c262:	d12b      	bne.n	800c2bc <__swbuf_r+0x70>
 800c264:	686c      	ldr	r4, [r5, #4]
 800c266:	69a3      	ldr	r3, [r4, #24]
 800c268:	60a3      	str	r3, [r4, #8]
 800c26a:	89a3      	ldrh	r3, [r4, #12]
 800c26c:	071a      	lsls	r2, r3, #28
 800c26e:	d52f      	bpl.n	800c2d0 <__swbuf_r+0x84>
 800c270:	6923      	ldr	r3, [r4, #16]
 800c272:	b36b      	cbz	r3, 800c2d0 <__swbuf_r+0x84>
 800c274:	6923      	ldr	r3, [r4, #16]
 800c276:	6820      	ldr	r0, [r4, #0]
 800c278:	1ac0      	subs	r0, r0, r3
 800c27a:	6963      	ldr	r3, [r4, #20]
 800c27c:	b2f6      	uxtb	r6, r6
 800c27e:	4283      	cmp	r3, r0
 800c280:	4637      	mov	r7, r6
 800c282:	dc04      	bgt.n	800c28e <__swbuf_r+0x42>
 800c284:	4621      	mov	r1, r4
 800c286:	4628      	mov	r0, r5
 800c288:	f000 ffc2 	bl	800d210 <_fflush_r>
 800c28c:	bb30      	cbnz	r0, 800c2dc <__swbuf_r+0x90>
 800c28e:	68a3      	ldr	r3, [r4, #8]
 800c290:	3b01      	subs	r3, #1
 800c292:	60a3      	str	r3, [r4, #8]
 800c294:	6823      	ldr	r3, [r4, #0]
 800c296:	1c5a      	adds	r2, r3, #1
 800c298:	6022      	str	r2, [r4, #0]
 800c29a:	701e      	strb	r6, [r3, #0]
 800c29c:	6963      	ldr	r3, [r4, #20]
 800c29e:	3001      	adds	r0, #1
 800c2a0:	4283      	cmp	r3, r0
 800c2a2:	d004      	beq.n	800c2ae <__swbuf_r+0x62>
 800c2a4:	89a3      	ldrh	r3, [r4, #12]
 800c2a6:	07db      	lsls	r3, r3, #31
 800c2a8:	d506      	bpl.n	800c2b8 <__swbuf_r+0x6c>
 800c2aa:	2e0a      	cmp	r6, #10
 800c2ac:	d104      	bne.n	800c2b8 <__swbuf_r+0x6c>
 800c2ae:	4621      	mov	r1, r4
 800c2b0:	4628      	mov	r0, r5
 800c2b2:	f000 ffad 	bl	800d210 <_fflush_r>
 800c2b6:	b988      	cbnz	r0, 800c2dc <__swbuf_r+0x90>
 800c2b8:	4638      	mov	r0, r7
 800c2ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2bc:	4b0a      	ldr	r3, [pc, #40]	; (800c2e8 <__swbuf_r+0x9c>)
 800c2be:	429c      	cmp	r4, r3
 800c2c0:	d101      	bne.n	800c2c6 <__swbuf_r+0x7a>
 800c2c2:	68ac      	ldr	r4, [r5, #8]
 800c2c4:	e7cf      	b.n	800c266 <__swbuf_r+0x1a>
 800c2c6:	4b09      	ldr	r3, [pc, #36]	; (800c2ec <__swbuf_r+0xa0>)
 800c2c8:	429c      	cmp	r4, r3
 800c2ca:	bf08      	it	eq
 800c2cc:	68ec      	ldreq	r4, [r5, #12]
 800c2ce:	e7ca      	b.n	800c266 <__swbuf_r+0x1a>
 800c2d0:	4621      	mov	r1, r4
 800c2d2:	4628      	mov	r0, r5
 800c2d4:	f000 f81e 	bl	800c314 <__swsetup_r>
 800c2d8:	2800      	cmp	r0, #0
 800c2da:	d0cb      	beq.n	800c274 <__swbuf_r+0x28>
 800c2dc:	f04f 37ff 	mov.w	r7, #4294967295
 800c2e0:	e7ea      	b.n	800c2b8 <__swbuf_r+0x6c>
 800c2e2:	bf00      	nop
 800c2e4:	0800e41c 	.word	0x0800e41c
 800c2e8:	0800e43c 	.word	0x0800e43c
 800c2ec:	0800e3fc 	.word	0x0800e3fc

0800c2f0 <_write_r>:
 800c2f0:	b538      	push	{r3, r4, r5, lr}
 800c2f2:	4d07      	ldr	r5, [pc, #28]	; (800c310 <_write_r+0x20>)
 800c2f4:	4604      	mov	r4, r0
 800c2f6:	4608      	mov	r0, r1
 800c2f8:	4611      	mov	r1, r2
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	602a      	str	r2, [r5, #0]
 800c2fe:	461a      	mov	r2, r3
 800c300:	f7f6 fce1 	bl	8002cc6 <_write>
 800c304:	1c43      	adds	r3, r0, #1
 800c306:	d102      	bne.n	800c30e <_write_r+0x1e>
 800c308:	682b      	ldr	r3, [r5, #0]
 800c30a:	b103      	cbz	r3, 800c30e <_write_r+0x1e>
 800c30c:	6023      	str	r3, [r4, #0]
 800c30e:	bd38      	pop	{r3, r4, r5, pc}
 800c310:	20005634 	.word	0x20005634

0800c314 <__swsetup_r>:
 800c314:	4b32      	ldr	r3, [pc, #200]	; (800c3e0 <__swsetup_r+0xcc>)
 800c316:	b570      	push	{r4, r5, r6, lr}
 800c318:	681d      	ldr	r5, [r3, #0]
 800c31a:	4606      	mov	r6, r0
 800c31c:	460c      	mov	r4, r1
 800c31e:	b125      	cbz	r5, 800c32a <__swsetup_r+0x16>
 800c320:	69ab      	ldr	r3, [r5, #24]
 800c322:	b913      	cbnz	r3, 800c32a <__swsetup_r+0x16>
 800c324:	4628      	mov	r0, r5
 800c326:	f7fe fee1 	bl	800b0ec <__sinit>
 800c32a:	4b2e      	ldr	r3, [pc, #184]	; (800c3e4 <__swsetup_r+0xd0>)
 800c32c:	429c      	cmp	r4, r3
 800c32e:	d10f      	bne.n	800c350 <__swsetup_r+0x3c>
 800c330:	686c      	ldr	r4, [r5, #4]
 800c332:	89a3      	ldrh	r3, [r4, #12]
 800c334:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c338:	0719      	lsls	r1, r3, #28
 800c33a:	d42c      	bmi.n	800c396 <__swsetup_r+0x82>
 800c33c:	06dd      	lsls	r5, r3, #27
 800c33e:	d411      	bmi.n	800c364 <__swsetup_r+0x50>
 800c340:	2309      	movs	r3, #9
 800c342:	6033      	str	r3, [r6, #0]
 800c344:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c348:	81a3      	strh	r3, [r4, #12]
 800c34a:	f04f 30ff 	mov.w	r0, #4294967295
 800c34e:	e03e      	b.n	800c3ce <__swsetup_r+0xba>
 800c350:	4b25      	ldr	r3, [pc, #148]	; (800c3e8 <__swsetup_r+0xd4>)
 800c352:	429c      	cmp	r4, r3
 800c354:	d101      	bne.n	800c35a <__swsetup_r+0x46>
 800c356:	68ac      	ldr	r4, [r5, #8]
 800c358:	e7eb      	b.n	800c332 <__swsetup_r+0x1e>
 800c35a:	4b24      	ldr	r3, [pc, #144]	; (800c3ec <__swsetup_r+0xd8>)
 800c35c:	429c      	cmp	r4, r3
 800c35e:	bf08      	it	eq
 800c360:	68ec      	ldreq	r4, [r5, #12]
 800c362:	e7e6      	b.n	800c332 <__swsetup_r+0x1e>
 800c364:	0758      	lsls	r0, r3, #29
 800c366:	d512      	bpl.n	800c38e <__swsetup_r+0x7a>
 800c368:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c36a:	b141      	cbz	r1, 800c37e <__swsetup_r+0x6a>
 800c36c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c370:	4299      	cmp	r1, r3
 800c372:	d002      	beq.n	800c37a <__swsetup_r+0x66>
 800c374:	4630      	mov	r0, r6
 800c376:	f7fe ff99 	bl	800b2ac <_free_r>
 800c37a:	2300      	movs	r3, #0
 800c37c:	6363      	str	r3, [r4, #52]	; 0x34
 800c37e:	89a3      	ldrh	r3, [r4, #12]
 800c380:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c384:	81a3      	strh	r3, [r4, #12]
 800c386:	2300      	movs	r3, #0
 800c388:	6063      	str	r3, [r4, #4]
 800c38a:	6923      	ldr	r3, [r4, #16]
 800c38c:	6023      	str	r3, [r4, #0]
 800c38e:	89a3      	ldrh	r3, [r4, #12]
 800c390:	f043 0308 	orr.w	r3, r3, #8
 800c394:	81a3      	strh	r3, [r4, #12]
 800c396:	6923      	ldr	r3, [r4, #16]
 800c398:	b94b      	cbnz	r3, 800c3ae <__swsetup_r+0x9a>
 800c39a:	89a3      	ldrh	r3, [r4, #12]
 800c39c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c3a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3a4:	d003      	beq.n	800c3ae <__swsetup_r+0x9a>
 800c3a6:	4621      	mov	r1, r4
 800c3a8:	4630      	mov	r0, r6
 800c3aa:	f000 ffa9 	bl	800d300 <__smakebuf_r>
 800c3ae:	89a0      	ldrh	r0, [r4, #12]
 800c3b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c3b4:	f010 0301 	ands.w	r3, r0, #1
 800c3b8:	d00a      	beq.n	800c3d0 <__swsetup_r+0xbc>
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	60a3      	str	r3, [r4, #8]
 800c3be:	6963      	ldr	r3, [r4, #20]
 800c3c0:	425b      	negs	r3, r3
 800c3c2:	61a3      	str	r3, [r4, #24]
 800c3c4:	6923      	ldr	r3, [r4, #16]
 800c3c6:	b943      	cbnz	r3, 800c3da <__swsetup_r+0xc6>
 800c3c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c3cc:	d1ba      	bne.n	800c344 <__swsetup_r+0x30>
 800c3ce:	bd70      	pop	{r4, r5, r6, pc}
 800c3d0:	0781      	lsls	r1, r0, #30
 800c3d2:	bf58      	it	pl
 800c3d4:	6963      	ldrpl	r3, [r4, #20]
 800c3d6:	60a3      	str	r3, [r4, #8]
 800c3d8:	e7f4      	b.n	800c3c4 <__swsetup_r+0xb0>
 800c3da:	2000      	movs	r0, #0
 800c3dc:	e7f7      	b.n	800c3ce <__swsetup_r+0xba>
 800c3de:	bf00      	nop
 800c3e0:	20000068 	.word	0x20000068
 800c3e4:	0800e41c 	.word	0x0800e41c
 800c3e8:	0800e43c 	.word	0x0800e43c
 800c3ec:	0800e3fc 	.word	0x0800e3fc

0800c3f0 <_close_r>:
 800c3f0:	b538      	push	{r3, r4, r5, lr}
 800c3f2:	4d06      	ldr	r5, [pc, #24]	; (800c40c <_close_r+0x1c>)
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	4604      	mov	r4, r0
 800c3f8:	4608      	mov	r0, r1
 800c3fa:	602b      	str	r3, [r5, #0]
 800c3fc:	f7f6 fc7f 	bl	8002cfe <_close>
 800c400:	1c43      	adds	r3, r0, #1
 800c402:	d102      	bne.n	800c40a <_close_r+0x1a>
 800c404:	682b      	ldr	r3, [r5, #0]
 800c406:	b103      	cbz	r3, 800c40a <_close_r+0x1a>
 800c408:	6023      	str	r3, [r4, #0]
 800c40a:	bd38      	pop	{r3, r4, r5, pc}
 800c40c:	20005634 	.word	0x20005634

0800c410 <quorem>:
 800c410:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c414:	6903      	ldr	r3, [r0, #16]
 800c416:	690c      	ldr	r4, [r1, #16]
 800c418:	42a3      	cmp	r3, r4
 800c41a:	4607      	mov	r7, r0
 800c41c:	f2c0 8081 	blt.w	800c522 <quorem+0x112>
 800c420:	3c01      	subs	r4, #1
 800c422:	f101 0814 	add.w	r8, r1, #20
 800c426:	f100 0514 	add.w	r5, r0, #20
 800c42a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c42e:	9301      	str	r3, [sp, #4]
 800c430:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c434:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c438:	3301      	adds	r3, #1
 800c43a:	429a      	cmp	r2, r3
 800c43c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c440:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c444:	fbb2 f6f3 	udiv	r6, r2, r3
 800c448:	d331      	bcc.n	800c4ae <quorem+0x9e>
 800c44a:	f04f 0e00 	mov.w	lr, #0
 800c44e:	4640      	mov	r0, r8
 800c450:	46ac      	mov	ip, r5
 800c452:	46f2      	mov	sl, lr
 800c454:	f850 2b04 	ldr.w	r2, [r0], #4
 800c458:	b293      	uxth	r3, r2
 800c45a:	fb06 e303 	mla	r3, r6, r3, lr
 800c45e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c462:	b29b      	uxth	r3, r3
 800c464:	ebaa 0303 	sub.w	r3, sl, r3
 800c468:	f8dc a000 	ldr.w	sl, [ip]
 800c46c:	0c12      	lsrs	r2, r2, #16
 800c46e:	fa13 f38a 	uxtah	r3, r3, sl
 800c472:	fb06 e202 	mla	r2, r6, r2, lr
 800c476:	9300      	str	r3, [sp, #0]
 800c478:	9b00      	ldr	r3, [sp, #0]
 800c47a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c47e:	b292      	uxth	r2, r2
 800c480:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c484:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c488:	f8bd 3000 	ldrh.w	r3, [sp]
 800c48c:	4581      	cmp	r9, r0
 800c48e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c492:	f84c 3b04 	str.w	r3, [ip], #4
 800c496:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c49a:	d2db      	bcs.n	800c454 <quorem+0x44>
 800c49c:	f855 300b 	ldr.w	r3, [r5, fp]
 800c4a0:	b92b      	cbnz	r3, 800c4ae <quorem+0x9e>
 800c4a2:	9b01      	ldr	r3, [sp, #4]
 800c4a4:	3b04      	subs	r3, #4
 800c4a6:	429d      	cmp	r5, r3
 800c4a8:	461a      	mov	r2, r3
 800c4aa:	d32e      	bcc.n	800c50a <quorem+0xfa>
 800c4ac:	613c      	str	r4, [r7, #16]
 800c4ae:	4638      	mov	r0, r7
 800c4b0:	f001 f9f4 	bl	800d89c <__mcmp>
 800c4b4:	2800      	cmp	r0, #0
 800c4b6:	db24      	blt.n	800c502 <quorem+0xf2>
 800c4b8:	3601      	adds	r6, #1
 800c4ba:	4628      	mov	r0, r5
 800c4bc:	f04f 0c00 	mov.w	ip, #0
 800c4c0:	f858 2b04 	ldr.w	r2, [r8], #4
 800c4c4:	f8d0 e000 	ldr.w	lr, [r0]
 800c4c8:	b293      	uxth	r3, r2
 800c4ca:	ebac 0303 	sub.w	r3, ip, r3
 800c4ce:	0c12      	lsrs	r2, r2, #16
 800c4d0:	fa13 f38e 	uxtah	r3, r3, lr
 800c4d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c4d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c4dc:	b29b      	uxth	r3, r3
 800c4de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c4e2:	45c1      	cmp	r9, r8
 800c4e4:	f840 3b04 	str.w	r3, [r0], #4
 800c4e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c4ec:	d2e8      	bcs.n	800c4c0 <quorem+0xb0>
 800c4ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c4f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c4f6:	b922      	cbnz	r2, 800c502 <quorem+0xf2>
 800c4f8:	3b04      	subs	r3, #4
 800c4fa:	429d      	cmp	r5, r3
 800c4fc:	461a      	mov	r2, r3
 800c4fe:	d30a      	bcc.n	800c516 <quorem+0x106>
 800c500:	613c      	str	r4, [r7, #16]
 800c502:	4630      	mov	r0, r6
 800c504:	b003      	add	sp, #12
 800c506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c50a:	6812      	ldr	r2, [r2, #0]
 800c50c:	3b04      	subs	r3, #4
 800c50e:	2a00      	cmp	r2, #0
 800c510:	d1cc      	bne.n	800c4ac <quorem+0x9c>
 800c512:	3c01      	subs	r4, #1
 800c514:	e7c7      	b.n	800c4a6 <quorem+0x96>
 800c516:	6812      	ldr	r2, [r2, #0]
 800c518:	3b04      	subs	r3, #4
 800c51a:	2a00      	cmp	r2, #0
 800c51c:	d1f0      	bne.n	800c500 <quorem+0xf0>
 800c51e:	3c01      	subs	r4, #1
 800c520:	e7eb      	b.n	800c4fa <quorem+0xea>
 800c522:	2000      	movs	r0, #0
 800c524:	e7ee      	b.n	800c504 <quorem+0xf4>
	...

0800c528 <_dtoa_r>:
 800c528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c52c:	ed2d 8b04 	vpush	{d8-d9}
 800c530:	ec57 6b10 	vmov	r6, r7, d0
 800c534:	b093      	sub	sp, #76	; 0x4c
 800c536:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c538:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c53c:	9106      	str	r1, [sp, #24]
 800c53e:	ee10 aa10 	vmov	sl, s0
 800c542:	4604      	mov	r4, r0
 800c544:	9209      	str	r2, [sp, #36]	; 0x24
 800c546:	930c      	str	r3, [sp, #48]	; 0x30
 800c548:	46bb      	mov	fp, r7
 800c54a:	b975      	cbnz	r5, 800c56a <_dtoa_r+0x42>
 800c54c:	2010      	movs	r0, #16
 800c54e:	f7fe fe8f 	bl	800b270 <malloc>
 800c552:	4602      	mov	r2, r0
 800c554:	6260      	str	r0, [r4, #36]	; 0x24
 800c556:	b920      	cbnz	r0, 800c562 <_dtoa_r+0x3a>
 800c558:	4ba7      	ldr	r3, [pc, #668]	; (800c7f8 <_dtoa_r+0x2d0>)
 800c55a:	21ea      	movs	r1, #234	; 0xea
 800c55c:	48a7      	ldr	r0, [pc, #668]	; (800c7fc <_dtoa_r+0x2d4>)
 800c55e:	f001 fdc5 	bl	800e0ec <__assert_func>
 800c562:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c566:	6005      	str	r5, [r0, #0]
 800c568:	60c5      	str	r5, [r0, #12]
 800c56a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c56c:	6819      	ldr	r1, [r3, #0]
 800c56e:	b151      	cbz	r1, 800c586 <_dtoa_r+0x5e>
 800c570:	685a      	ldr	r2, [r3, #4]
 800c572:	604a      	str	r2, [r1, #4]
 800c574:	2301      	movs	r3, #1
 800c576:	4093      	lsls	r3, r2
 800c578:	608b      	str	r3, [r1, #8]
 800c57a:	4620      	mov	r0, r4
 800c57c:	f000 ff4c 	bl	800d418 <_Bfree>
 800c580:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c582:	2200      	movs	r2, #0
 800c584:	601a      	str	r2, [r3, #0]
 800c586:	1e3b      	subs	r3, r7, #0
 800c588:	bfaa      	itet	ge
 800c58a:	2300      	movge	r3, #0
 800c58c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c590:	f8c8 3000 	strge.w	r3, [r8]
 800c594:	4b9a      	ldr	r3, [pc, #616]	; (800c800 <_dtoa_r+0x2d8>)
 800c596:	bfbc      	itt	lt
 800c598:	2201      	movlt	r2, #1
 800c59a:	f8c8 2000 	strlt.w	r2, [r8]
 800c59e:	ea33 030b 	bics.w	r3, r3, fp
 800c5a2:	d11b      	bne.n	800c5dc <_dtoa_r+0xb4>
 800c5a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c5a6:	f242 730f 	movw	r3, #9999	; 0x270f
 800c5aa:	6013      	str	r3, [r2, #0]
 800c5ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c5b0:	4333      	orrs	r3, r6
 800c5b2:	f000 8592 	beq.w	800d0da <_dtoa_r+0xbb2>
 800c5b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c5b8:	b963      	cbnz	r3, 800c5d4 <_dtoa_r+0xac>
 800c5ba:	4b92      	ldr	r3, [pc, #584]	; (800c804 <_dtoa_r+0x2dc>)
 800c5bc:	e022      	b.n	800c604 <_dtoa_r+0xdc>
 800c5be:	4b92      	ldr	r3, [pc, #584]	; (800c808 <_dtoa_r+0x2e0>)
 800c5c0:	9301      	str	r3, [sp, #4]
 800c5c2:	3308      	adds	r3, #8
 800c5c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c5c6:	6013      	str	r3, [r2, #0]
 800c5c8:	9801      	ldr	r0, [sp, #4]
 800c5ca:	b013      	add	sp, #76	; 0x4c
 800c5cc:	ecbd 8b04 	vpop	{d8-d9}
 800c5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5d4:	4b8b      	ldr	r3, [pc, #556]	; (800c804 <_dtoa_r+0x2dc>)
 800c5d6:	9301      	str	r3, [sp, #4]
 800c5d8:	3303      	adds	r3, #3
 800c5da:	e7f3      	b.n	800c5c4 <_dtoa_r+0x9c>
 800c5dc:	2200      	movs	r2, #0
 800c5de:	2300      	movs	r3, #0
 800c5e0:	4650      	mov	r0, sl
 800c5e2:	4659      	mov	r1, fp
 800c5e4:	f7f4 fa70 	bl	8000ac8 <__aeabi_dcmpeq>
 800c5e8:	ec4b ab19 	vmov	d9, sl, fp
 800c5ec:	4680      	mov	r8, r0
 800c5ee:	b158      	cbz	r0, 800c608 <_dtoa_r+0xe0>
 800c5f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	6013      	str	r3, [r2, #0]
 800c5f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	f000 856b 	beq.w	800d0d4 <_dtoa_r+0xbac>
 800c5fe:	4883      	ldr	r0, [pc, #524]	; (800c80c <_dtoa_r+0x2e4>)
 800c600:	6018      	str	r0, [r3, #0]
 800c602:	1e43      	subs	r3, r0, #1
 800c604:	9301      	str	r3, [sp, #4]
 800c606:	e7df      	b.n	800c5c8 <_dtoa_r+0xa0>
 800c608:	ec4b ab10 	vmov	d0, sl, fp
 800c60c:	aa10      	add	r2, sp, #64	; 0x40
 800c60e:	a911      	add	r1, sp, #68	; 0x44
 800c610:	4620      	mov	r0, r4
 800c612:	f001 f9e9 	bl	800d9e8 <__d2b>
 800c616:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c61a:	ee08 0a10 	vmov	s16, r0
 800c61e:	2d00      	cmp	r5, #0
 800c620:	f000 8084 	beq.w	800c72c <_dtoa_r+0x204>
 800c624:	ee19 3a90 	vmov	r3, s19
 800c628:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c62c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c630:	4656      	mov	r6, sl
 800c632:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c636:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c63a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c63e:	4b74      	ldr	r3, [pc, #464]	; (800c810 <_dtoa_r+0x2e8>)
 800c640:	2200      	movs	r2, #0
 800c642:	4630      	mov	r0, r6
 800c644:	4639      	mov	r1, r7
 800c646:	f7f3 fe1f 	bl	8000288 <__aeabi_dsub>
 800c64a:	a365      	add	r3, pc, #404	; (adr r3, 800c7e0 <_dtoa_r+0x2b8>)
 800c64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c650:	f7f3 ffd2 	bl	80005f8 <__aeabi_dmul>
 800c654:	a364      	add	r3, pc, #400	; (adr r3, 800c7e8 <_dtoa_r+0x2c0>)
 800c656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c65a:	f7f3 fe17 	bl	800028c <__adddf3>
 800c65e:	4606      	mov	r6, r0
 800c660:	4628      	mov	r0, r5
 800c662:	460f      	mov	r7, r1
 800c664:	f7f3 ff5e 	bl	8000524 <__aeabi_i2d>
 800c668:	a361      	add	r3, pc, #388	; (adr r3, 800c7f0 <_dtoa_r+0x2c8>)
 800c66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c66e:	f7f3 ffc3 	bl	80005f8 <__aeabi_dmul>
 800c672:	4602      	mov	r2, r0
 800c674:	460b      	mov	r3, r1
 800c676:	4630      	mov	r0, r6
 800c678:	4639      	mov	r1, r7
 800c67a:	f7f3 fe07 	bl	800028c <__adddf3>
 800c67e:	4606      	mov	r6, r0
 800c680:	460f      	mov	r7, r1
 800c682:	f7f4 fa69 	bl	8000b58 <__aeabi_d2iz>
 800c686:	2200      	movs	r2, #0
 800c688:	9000      	str	r0, [sp, #0]
 800c68a:	2300      	movs	r3, #0
 800c68c:	4630      	mov	r0, r6
 800c68e:	4639      	mov	r1, r7
 800c690:	f7f4 fa24 	bl	8000adc <__aeabi_dcmplt>
 800c694:	b150      	cbz	r0, 800c6ac <_dtoa_r+0x184>
 800c696:	9800      	ldr	r0, [sp, #0]
 800c698:	f7f3 ff44 	bl	8000524 <__aeabi_i2d>
 800c69c:	4632      	mov	r2, r6
 800c69e:	463b      	mov	r3, r7
 800c6a0:	f7f4 fa12 	bl	8000ac8 <__aeabi_dcmpeq>
 800c6a4:	b910      	cbnz	r0, 800c6ac <_dtoa_r+0x184>
 800c6a6:	9b00      	ldr	r3, [sp, #0]
 800c6a8:	3b01      	subs	r3, #1
 800c6aa:	9300      	str	r3, [sp, #0]
 800c6ac:	9b00      	ldr	r3, [sp, #0]
 800c6ae:	2b16      	cmp	r3, #22
 800c6b0:	d85a      	bhi.n	800c768 <_dtoa_r+0x240>
 800c6b2:	9a00      	ldr	r2, [sp, #0]
 800c6b4:	4b57      	ldr	r3, [pc, #348]	; (800c814 <_dtoa_r+0x2ec>)
 800c6b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6be:	ec51 0b19 	vmov	r0, r1, d9
 800c6c2:	f7f4 fa0b 	bl	8000adc <__aeabi_dcmplt>
 800c6c6:	2800      	cmp	r0, #0
 800c6c8:	d050      	beq.n	800c76c <_dtoa_r+0x244>
 800c6ca:	9b00      	ldr	r3, [sp, #0]
 800c6cc:	3b01      	subs	r3, #1
 800c6ce:	9300      	str	r3, [sp, #0]
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	930b      	str	r3, [sp, #44]	; 0x2c
 800c6d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c6d6:	1b5d      	subs	r5, r3, r5
 800c6d8:	1e6b      	subs	r3, r5, #1
 800c6da:	9305      	str	r3, [sp, #20]
 800c6dc:	bf45      	ittet	mi
 800c6de:	f1c5 0301 	rsbmi	r3, r5, #1
 800c6e2:	9304      	strmi	r3, [sp, #16]
 800c6e4:	2300      	movpl	r3, #0
 800c6e6:	2300      	movmi	r3, #0
 800c6e8:	bf4c      	ite	mi
 800c6ea:	9305      	strmi	r3, [sp, #20]
 800c6ec:	9304      	strpl	r3, [sp, #16]
 800c6ee:	9b00      	ldr	r3, [sp, #0]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	db3d      	blt.n	800c770 <_dtoa_r+0x248>
 800c6f4:	9b05      	ldr	r3, [sp, #20]
 800c6f6:	9a00      	ldr	r2, [sp, #0]
 800c6f8:	920a      	str	r2, [sp, #40]	; 0x28
 800c6fa:	4413      	add	r3, r2
 800c6fc:	9305      	str	r3, [sp, #20]
 800c6fe:	2300      	movs	r3, #0
 800c700:	9307      	str	r3, [sp, #28]
 800c702:	9b06      	ldr	r3, [sp, #24]
 800c704:	2b09      	cmp	r3, #9
 800c706:	f200 8089 	bhi.w	800c81c <_dtoa_r+0x2f4>
 800c70a:	2b05      	cmp	r3, #5
 800c70c:	bfc4      	itt	gt
 800c70e:	3b04      	subgt	r3, #4
 800c710:	9306      	strgt	r3, [sp, #24]
 800c712:	9b06      	ldr	r3, [sp, #24]
 800c714:	f1a3 0302 	sub.w	r3, r3, #2
 800c718:	bfcc      	ite	gt
 800c71a:	2500      	movgt	r5, #0
 800c71c:	2501      	movle	r5, #1
 800c71e:	2b03      	cmp	r3, #3
 800c720:	f200 8087 	bhi.w	800c832 <_dtoa_r+0x30a>
 800c724:	e8df f003 	tbb	[pc, r3]
 800c728:	59383a2d 	.word	0x59383a2d
 800c72c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c730:	441d      	add	r5, r3
 800c732:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c736:	2b20      	cmp	r3, #32
 800c738:	bfc1      	itttt	gt
 800c73a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c73e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c742:	fa0b f303 	lslgt.w	r3, fp, r3
 800c746:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c74a:	bfda      	itte	le
 800c74c:	f1c3 0320 	rsble	r3, r3, #32
 800c750:	fa06 f003 	lslle.w	r0, r6, r3
 800c754:	4318      	orrgt	r0, r3
 800c756:	f7f3 fed5 	bl	8000504 <__aeabi_ui2d>
 800c75a:	2301      	movs	r3, #1
 800c75c:	4606      	mov	r6, r0
 800c75e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c762:	3d01      	subs	r5, #1
 800c764:	930e      	str	r3, [sp, #56]	; 0x38
 800c766:	e76a      	b.n	800c63e <_dtoa_r+0x116>
 800c768:	2301      	movs	r3, #1
 800c76a:	e7b2      	b.n	800c6d2 <_dtoa_r+0x1aa>
 800c76c:	900b      	str	r0, [sp, #44]	; 0x2c
 800c76e:	e7b1      	b.n	800c6d4 <_dtoa_r+0x1ac>
 800c770:	9b04      	ldr	r3, [sp, #16]
 800c772:	9a00      	ldr	r2, [sp, #0]
 800c774:	1a9b      	subs	r3, r3, r2
 800c776:	9304      	str	r3, [sp, #16]
 800c778:	4253      	negs	r3, r2
 800c77a:	9307      	str	r3, [sp, #28]
 800c77c:	2300      	movs	r3, #0
 800c77e:	930a      	str	r3, [sp, #40]	; 0x28
 800c780:	e7bf      	b.n	800c702 <_dtoa_r+0x1da>
 800c782:	2300      	movs	r3, #0
 800c784:	9308      	str	r3, [sp, #32]
 800c786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c788:	2b00      	cmp	r3, #0
 800c78a:	dc55      	bgt.n	800c838 <_dtoa_r+0x310>
 800c78c:	2301      	movs	r3, #1
 800c78e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c792:	461a      	mov	r2, r3
 800c794:	9209      	str	r2, [sp, #36]	; 0x24
 800c796:	e00c      	b.n	800c7b2 <_dtoa_r+0x28a>
 800c798:	2301      	movs	r3, #1
 800c79a:	e7f3      	b.n	800c784 <_dtoa_r+0x25c>
 800c79c:	2300      	movs	r3, #0
 800c79e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7a0:	9308      	str	r3, [sp, #32]
 800c7a2:	9b00      	ldr	r3, [sp, #0]
 800c7a4:	4413      	add	r3, r2
 800c7a6:	9302      	str	r3, [sp, #8]
 800c7a8:	3301      	adds	r3, #1
 800c7aa:	2b01      	cmp	r3, #1
 800c7ac:	9303      	str	r3, [sp, #12]
 800c7ae:	bfb8      	it	lt
 800c7b0:	2301      	movlt	r3, #1
 800c7b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	6042      	str	r2, [r0, #4]
 800c7b8:	2204      	movs	r2, #4
 800c7ba:	f102 0614 	add.w	r6, r2, #20
 800c7be:	429e      	cmp	r6, r3
 800c7c0:	6841      	ldr	r1, [r0, #4]
 800c7c2:	d93d      	bls.n	800c840 <_dtoa_r+0x318>
 800c7c4:	4620      	mov	r0, r4
 800c7c6:	f000 fde7 	bl	800d398 <_Balloc>
 800c7ca:	9001      	str	r0, [sp, #4]
 800c7cc:	2800      	cmp	r0, #0
 800c7ce:	d13b      	bne.n	800c848 <_dtoa_r+0x320>
 800c7d0:	4b11      	ldr	r3, [pc, #68]	; (800c818 <_dtoa_r+0x2f0>)
 800c7d2:	4602      	mov	r2, r0
 800c7d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c7d8:	e6c0      	b.n	800c55c <_dtoa_r+0x34>
 800c7da:	2301      	movs	r3, #1
 800c7dc:	e7df      	b.n	800c79e <_dtoa_r+0x276>
 800c7de:	bf00      	nop
 800c7e0:	636f4361 	.word	0x636f4361
 800c7e4:	3fd287a7 	.word	0x3fd287a7
 800c7e8:	8b60c8b3 	.word	0x8b60c8b3
 800c7ec:	3fc68a28 	.word	0x3fc68a28
 800c7f0:	509f79fb 	.word	0x509f79fb
 800c7f4:	3fd34413 	.word	0x3fd34413
 800c7f8:	0800e5a2 	.word	0x0800e5a2
 800c7fc:	0800e5b9 	.word	0x0800e5b9
 800c800:	7ff00000 	.word	0x7ff00000
 800c804:	0800e59e 	.word	0x0800e59e
 800c808:	0800e595 	.word	0x0800e595
 800c80c:	0800e471 	.word	0x0800e471
 800c810:	3ff80000 	.word	0x3ff80000
 800c814:	0800e6b0 	.word	0x0800e6b0
 800c818:	0800e614 	.word	0x0800e614
 800c81c:	2501      	movs	r5, #1
 800c81e:	2300      	movs	r3, #0
 800c820:	9306      	str	r3, [sp, #24]
 800c822:	9508      	str	r5, [sp, #32]
 800c824:	f04f 33ff 	mov.w	r3, #4294967295
 800c828:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c82c:	2200      	movs	r2, #0
 800c82e:	2312      	movs	r3, #18
 800c830:	e7b0      	b.n	800c794 <_dtoa_r+0x26c>
 800c832:	2301      	movs	r3, #1
 800c834:	9308      	str	r3, [sp, #32]
 800c836:	e7f5      	b.n	800c824 <_dtoa_r+0x2fc>
 800c838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c83a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c83e:	e7b8      	b.n	800c7b2 <_dtoa_r+0x28a>
 800c840:	3101      	adds	r1, #1
 800c842:	6041      	str	r1, [r0, #4]
 800c844:	0052      	lsls	r2, r2, #1
 800c846:	e7b8      	b.n	800c7ba <_dtoa_r+0x292>
 800c848:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c84a:	9a01      	ldr	r2, [sp, #4]
 800c84c:	601a      	str	r2, [r3, #0]
 800c84e:	9b03      	ldr	r3, [sp, #12]
 800c850:	2b0e      	cmp	r3, #14
 800c852:	f200 809d 	bhi.w	800c990 <_dtoa_r+0x468>
 800c856:	2d00      	cmp	r5, #0
 800c858:	f000 809a 	beq.w	800c990 <_dtoa_r+0x468>
 800c85c:	9b00      	ldr	r3, [sp, #0]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	dd32      	ble.n	800c8c8 <_dtoa_r+0x3a0>
 800c862:	4ab7      	ldr	r2, [pc, #732]	; (800cb40 <_dtoa_r+0x618>)
 800c864:	f003 030f 	and.w	r3, r3, #15
 800c868:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c86c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c870:	9b00      	ldr	r3, [sp, #0]
 800c872:	05d8      	lsls	r0, r3, #23
 800c874:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c878:	d516      	bpl.n	800c8a8 <_dtoa_r+0x380>
 800c87a:	4bb2      	ldr	r3, [pc, #712]	; (800cb44 <_dtoa_r+0x61c>)
 800c87c:	ec51 0b19 	vmov	r0, r1, d9
 800c880:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c884:	f7f3 ffe2 	bl	800084c <__aeabi_ddiv>
 800c888:	f007 070f 	and.w	r7, r7, #15
 800c88c:	4682      	mov	sl, r0
 800c88e:	468b      	mov	fp, r1
 800c890:	2503      	movs	r5, #3
 800c892:	4eac      	ldr	r6, [pc, #688]	; (800cb44 <_dtoa_r+0x61c>)
 800c894:	b957      	cbnz	r7, 800c8ac <_dtoa_r+0x384>
 800c896:	4642      	mov	r2, r8
 800c898:	464b      	mov	r3, r9
 800c89a:	4650      	mov	r0, sl
 800c89c:	4659      	mov	r1, fp
 800c89e:	f7f3 ffd5 	bl	800084c <__aeabi_ddiv>
 800c8a2:	4682      	mov	sl, r0
 800c8a4:	468b      	mov	fp, r1
 800c8a6:	e028      	b.n	800c8fa <_dtoa_r+0x3d2>
 800c8a8:	2502      	movs	r5, #2
 800c8aa:	e7f2      	b.n	800c892 <_dtoa_r+0x36a>
 800c8ac:	07f9      	lsls	r1, r7, #31
 800c8ae:	d508      	bpl.n	800c8c2 <_dtoa_r+0x39a>
 800c8b0:	4640      	mov	r0, r8
 800c8b2:	4649      	mov	r1, r9
 800c8b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c8b8:	f7f3 fe9e 	bl	80005f8 <__aeabi_dmul>
 800c8bc:	3501      	adds	r5, #1
 800c8be:	4680      	mov	r8, r0
 800c8c0:	4689      	mov	r9, r1
 800c8c2:	107f      	asrs	r7, r7, #1
 800c8c4:	3608      	adds	r6, #8
 800c8c6:	e7e5      	b.n	800c894 <_dtoa_r+0x36c>
 800c8c8:	f000 809b 	beq.w	800ca02 <_dtoa_r+0x4da>
 800c8cc:	9b00      	ldr	r3, [sp, #0]
 800c8ce:	4f9d      	ldr	r7, [pc, #628]	; (800cb44 <_dtoa_r+0x61c>)
 800c8d0:	425e      	negs	r6, r3
 800c8d2:	4b9b      	ldr	r3, [pc, #620]	; (800cb40 <_dtoa_r+0x618>)
 800c8d4:	f006 020f 	and.w	r2, r6, #15
 800c8d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e0:	ec51 0b19 	vmov	r0, r1, d9
 800c8e4:	f7f3 fe88 	bl	80005f8 <__aeabi_dmul>
 800c8e8:	1136      	asrs	r6, r6, #4
 800c8ea:	4682      	mov	sl, r0
 800c8ec:	468b      	mov	fp, r1
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	2502      	movs	r5, #2
 800c8f2:	2e00      	cmp	r6, #0
 800c8f4:	d17a      	bne.n	800c9ec <_dtoa_r+0x4c4>
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d1d3      	bne.n	800c8a2 <_dtoa_r+0x37a>
 800c8fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	f000 8082 	beq.w	800ca06 <_dtoa_r+0x4de>
 800c902:	4b91      	ldr	r3, [pc, #580]	; (800cb48 <_dtoa_r+0x620>)
 800c904:	2200      	movs	r2, #0
 800c906:	4650      	mov	r0, sl
 800c908:	4659      	mov	r1, fp
 800c90a:	f7f4 f8e7 	bl	8000adc <__aeabi_dcmplt>
 800c90e:	2800      	cmp	r0, #0
 800c910:	d079      	beq.n	800ca06 <_dtoa_r+0x4de>
 800c912:	9b03      	ldr	r3, [sp, #12]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d076      	beq.n	800ca06 <_dtoa_r+0x4de>
 800c918:	9b02      	ldr	r3, [sp, #8]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	dd36      	ble.n	800c98c <_dtoa_r+0x464>
 800c91e:	9b00      	ldr	r3, [sp, #0]
 800c920:	4650      	mov	r0, sl
 800c922:	4659      	mov	r1, fp
 800c924:	1e5f      	subs	r7, r3, #1
 800c926:	2200      	movs	r2, #0
 800c928:	4b88      	ldr	r3, [pc, #544]	; (800cb4c <_dtoa_r+0x624>)
 800c92a:	f7f3 fe65 	bl	80005f8 <__aeabi_dmul>
 800c92e:	9e02      	ldr	r6, [sp, #8]
 800c930:	4682      	mov	sl, r0
 800c932:	468b      	mov	fp, r1
 800c934:	3501      	adds	r5, #1
 800c936:	4628      	mov	r0, r5
 800c938:	f7f3 fdf4 	bl	8000524 <__aeabi_i2d>
 800c93c:	4652      	mov	r2, sl
 800c93e:	465b      	mov	r3, fp
 800c940:	f7f3 fe5a 	bl	80005f8 <__aeabi_dmul>
 800c944:	4b82      	ldr	r3, [pc, #520]	; (800cb50 <_dtoa_r+0x628>)
 800c946:	2200      	movs	r2, #0
 800c948:	f7f3 fca0 	bl	800028c <__adddf3>
 800c94c:	46d0      	mov	r8, sl
 800c94e:	46d9      	mov	r9, fp
 800c950:	4682      	mov	sl, r0
 800c952:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c956:	2e00      	cmp	r6, #0
 800c958:	d158      	bne.n	800ca0c <_dtoa_r+0x4e4>
 800c95a:	4b7e      	ldr	r3, [pc, #504]	; (800cb54 <_dtoa_r+0x62c>)
 800c95c:	2200      	movs	r2, #0
 800c95e:	4640      	mov	r0, r8
 800c960:	4649      	mov	r1, r9
 800c962:	f7f3 fc91 	bl	8000288 <__aeabi_dsub>
 800c966:	4652      	mov	r2, sl
 800c968:	465b      	mov	r3, fp
 800c96a:	4680      	mov	r8, r0
 800c96c:	4689      	mov	r9, r1
 800c96e:	f7f4 f8d3 	bl	8000b18 <__aeabi_dcmpgt>
 800c972:	2800      	cmp	r0, #0
 800c974:	f040 8295 	bne.w	800cea2 <_dtoa_r+0x97a>
 800c978:	4652      	mov	r2, sl
 800c97a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c97e:	4640      	mov	r0, r8
 800c980:	4649      	mov	r1, r9
 800c982:	f7f4 f8ab 	bl	8000adc <__aeabi_dcmplt>
 800c986:	2800      	cmp	r0, #0
 800c988:	f040 8289 	bne.w	800ce9e <_dtoa_r+0x976>
 800c98c:	ec5b ab19 	vmov	sl, fp, d9
 800c990:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c992:	2b00      	cmp	r3, #0
 800c994:	f2c0 8148 	blt.w	800cc28 <_dtoa_r+0x700>
 800c998:	9a00      	ldr	r2, [sp, #0]
 800c99a:	2a0e      	cmp	r2, #14
 800c99c:	f300 8144 	bgt.w	800cc28 <_dtoa_r+0x700>
 800c9a0:	4b67      	ldr	r3, [pc, #412]	; (800cb40 <_dtoa_r+0x618>)
 800c9a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c9a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c9aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	f280 80d5 	bge.w	800cb5c <_dtoa_r+0x634>
 800c9b2:	9b03      	ldr	r3, [sp, #12]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	f300 80d1 	bgt.w	800cb5c <_dtoa_r+0x634>
 800c9ba:	f040 826f 	bne.w	800ce9c <_dtoa_r+0x974>
 800c9be:	4b65      	ldr	r3, [pc, #404]	; (800cb54 <_dtoa_r+0x62c>)
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	4640      	mov	r0, r8
 800c9c4:	4649      	mov	r1, r9
 800c9c6:	f7f3 fe17 	bl	80005f8 <__aeabi_dmul>
 800c9ca:	4652      	mov	r2, sl
 800c9cc:	465b      	mov	r3, fp
 800c9ce:	f7f4 f899 	bl	8000b04 <__aeabi_dcmpge>
 800c9d2:	9e03      	ldr	r6, [sp, #12]
 800c9d4:	4637      	mov	r7, r6
 800c9d6:	2800      	cmp	r0, #0
 800c9d8:	f040 8245 	bne.w	800ce66 <_dtoa_r+0x93e>
 800c9dc:	9d01      	ldr	r5, [sp, #4]
 800c9de:	2331      	movs	r3, #49	; 0x31
 800c9e0:	f805 3b01 	strb.w	r3, [r5], #1
 800c9e4:	9b00      	ldr	r3, [sp, #0]
 800c9e6:	3301      	adds	r3, #1
 800c9e8:	9300      	str	r3, [sp, #0]
 800c9ea:	e240      	b.n	800ce6e <_dtoa_r+0x946>
 800c9ec:	07f2      	lsls	r2, r6, #31
 800c9ee:	d505      	bpl.n	800c9fc <_dtoa_r+0x4d4>
 800c9f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9f4:	f7f3 fe00 	bl	80005f8 <__aeabi_dmul>
 800c9f8:	3501      	adds	r5, #1
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	1076      	asrs	r6, r6, #1
 800c9fe:	3708      	adds	r7, #8
 800ca00:	e777      	b.n	800c8f2 <_dtoa_r+0x3ca>
 800ca02:	2502      	movs	r5, #2
 800ca04:	e779      	b.n	800c8fa <_dtoa_r+0x3d2>
 800ca06:	9f00      	ldr	r7, [sp, #0]
 800ca08:	9e03      	ldr	r6, [sp, #12]
 800ca0a:	e794      	b.n	800c936 <_dtoa_r+0x40e>
 800ca0c:	9901      	ldr	r1, [sp, #4]
 800ca0e:	4b4c      	ldr	r3, [pc, #304]	; (800cb40 <_dtoa_r+0x618>)
 800ca10:	4431      	add	r1, r6
 800ca12:	910d      	str	r1, [sp, #52]	; 0x34
 800ca14:	9908      	ldr	r1, [sp, #32]
 800ca16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ca1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ca1e:	2900      	cmp	r1, #0
 800ca20:	d043      	beq.n	800caaa <_dtoa_r+0x582>
 800ca22:	494d      	ldr	r1, [pc, #308]	; (800cb58 <_dtoa_r+0x630>)
 800ca24:	2000      	movs	r0, #0
 800ca26:	f7f3 ff11 	bl	800084c <__aeabi_ddiv>
 800ca2a:	4652      	mov	r2, sl
 800ca2c:	465b      	mov	r3, fp
 800ca2e:	f7f3 fc2b 	bl	8000288 <__aeabi_dsub>
 800ca32:	9d01      	ldr	r5, [sp, #4]
 800ca34:	4682      	mov	sl, r0
 800ca36:	468b      	mov	fp, r1
 800ca38:	4649      	mov	r1, r9
 800ca3a:	4640      	mov	r0, r8
 800ca3c:	f7f4 f88c 	bl	8000b58 <__aeabi_d2iz>
 800ca40:	4606      	mov	r6, r0
 800ca42:	f7f3 fd6f 	bl	8000524 <__aeabi_i2d>
 800ca46:	4602      	mov	r2, r0
 800ca48:	460b      	mov	r3, r1
 800ca4a:	4640      	mov	r0, r8
 800ca4c:	4649      	mov	r1, r9
 800ca4e:	f7f3 fc1b 	bl	8000288 <__aeabi_dsub>
 800ca52:	3630      	adds	r6, #48	; 0x30
 800ca54:	f805 6b01 	strb.w	r6, [r5], #1
 800ca58:	4652      	mov	r2, sl
 800ca5a:	465b      	mov	r3, fp
 800ca5c:	4680      	mov	r8, r0
 800ca5e:	4689      	mov	r9, r1
 800ca60:	f7f4 f83c 	bl	8000adc <__aeabi_dcmplt>
 800ca64:	2800      	cmp	r0, #0
 800ca66:	d163      	bne.n	800cb30 <_dtoa_r+0x608>
 800ca68:	4642      	mov	r2, r8
 800ca6a:	464b      	mov	r3, r9
 800ca6c:	4936      	ldr	r1, [pc, #216]	; (800cb48 <_dtoa_r+0x620>)
 800ca6e:	2000      	movs	r0, #0
 800ca70:	f7f3 fc0a 	bl	8000288 <__aeabi_dsub>
 800ca74:	4652      	mov	r2, sl
 800ca76:	465b      	mov	r3, fp
 800ca78:	f7f4 f830 	bl	8000adc <__aeabi_dcmplt>
 800ca7c:	2800      	cmp	r0, #0
 800ca7e:	f040 80b5 	bne.w	800cbec <_dtoa_r+0x6c4>
 800ca82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca84:	429d      	cmp	r5, r3
 800ca86:	d081      	beq.n	800c98c <_dtoa_r+0x464>
 800ca88:	4b30      	ldr	r3, [pc, #192]	; (800cb4c <_dtoa_r+0x624>)
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	4650      	mov	r0, sl
 800ca8e:	4659      	mov	r1, fp
 800ca90:	f7f3 fdb2 	bl	80005f8 <__aeabi_dmul>
 800ca94:	4b2d      	ldr	r3, [pc, #180]	; (800cb4c <_dtoa_r+0x624>)
 800ca96:	4682      	mov	sl, r0
 800ca98:	468b      	mov	fp, r1
 800ca9a:	4640      	mov	r0, r8
 800ca9c:	4649      	mov	r1, r9
 800ca9e:	2200      	movs	r2, #0
 800caa0:	f7f3 fdaa 	bl	80005f8 <__aeabi_dmul>
 800caa4:	4680      	mov	r8, r0
 800caa6:	4689      	mov	r9, r1
 800caa8:	e7c6      	b.n	800ca38 <_dtoa_r+0x510>
 800caaa:	4650      	mov	r0, sl
 800caac:	4659      	mov	r1, fp
 800caae:	f7f3 fda3 	bl	80005f8 <__aeabi_dmul>
 800cab2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cab4:	9d01      	ldr	r5, [sp, #4]
 800cab6:	930f      	str	r3, [sp, #60]	; 0x3c
 800cab8:	4682      	mov	sl, r0
 800caba:	468b      	mov	fp, r1
 800cabc:	4649      	mov	r1, r9
 800cabe:	4640      	mov	r0, r8
 800cac0:	f7f4 f84a 	bl	8000b58 <__aeabi_d2iz>
 800cac4:	4606      	mov	r6, r0
 800cac6:	f7f3 fd2d 	bl	8000524 <__aeabi_i2d>
 800caca:	3630      	adds	r6, #48	; 0x30
 800cacc:	4602      	mov	r2, r0
 800cace:	460b      	mov	r3, r1
 800cad0:	4640      	mov	r0, r8
 800cad2:	4649      	mov	r1, r9
 800cad4:	f7f3 fbd8 	bl	8000288 <__aeabi_dsub>
 800cad8:	f805 6b01 	strb.w	r6, [r5], #1
 800cadc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cade:	429d      	cmp	r5, r3
 800cae0:	4680      	mov	r8, r0
 800cae2:	4689      	mov	r9, r1
 800cae4:	f04f 0200 	mov.w	r2, #0
 800cae8:	d124      	bne.n	800cb34 <_dtoa_r+0x60c>
 800caea:	4b1b      	ldr	r3, [pc, #108]	; (800cb58 <_dtoa_r+0x630>)
 800caec:	4650      	mov	r0, sl
 800caee:	4659      	mov	r1, fp
 800caf0:	f7f3 fbcc 	bl	800028c <__adddf3>
 800caf4:	4602      	mov	r2, r0
 800caf6:	460b      	mov	r3, r1
 800caf8:	4640      	mov	r0, r8
 800cafa:	4649      	mov	r1, r9
 800cafc:	f7f4 f80c 	bl	8000b18 <__aeabi_dcmpgt>
 800cb00:	2800      	cmp	r0, #0
 800cb02:	d173      	bne.n	800cbec <_dtoa_r+0x6c4>
 800cb04:	4652      	mov	r2, sl
 800cb06:	465b      	mov	r3, fp
 800cb08:	4913      	ldr	r1, [pc, #76]	; (800cb58 <_dtoa_r+0x630>)
 800cb0a:	2000      	movs	r0, #0
 800cb0c:	f7f3 fbbc 	bl	8000288 <__aeabi_dsub>
 800cb10:	4602      	mov	r2, r0
 800cb12:	460b      	mov	r3, r1
 800cb14:	4640      	mov	r0, r8
 800cb16:	4649      	mov	r1, r9
 800cb18:	f7f3 ffe0 	bl	8000adc <__aeabi_dcmplt>
 800cb1c:	2800      	cmp	r0, #0
 800cb1e:	f43f af35 	beq.w	800c98c <_dtoa_r+0x464>
 800cb22:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cb24:	1e6b      	subs	r3, r5, #1
 800cb26:	930f      	str	r3, [sp, #60]	; 0x3c
 800cb28:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cb2c:	2b30      	cmp	r3, #48	; 0x30
 800cb2e:	d0f8      	beq.n	800cb22 <_dtoa_r+0x5fa>
 800cb30:	9700      	str	r7, [sp, #0]
 800cb32:	e049      	b.n	800cbc8 <_dtoa_r+0x6a0>
 800cb34:	4b05      	ldr	r3, [pc, #20]	; (800cb4c <_dtoa_r+0x624>)
 800cb36:	f7f3 fd5f 	bl	80005f8 <__aeabi_dmul>
 800cb3a:	4680      	mov	r8, r0
 800cb3c:	4689      	mov	r9, r1
 800cb3e:	e7bd      	b.n	800cabc <_dtoa_r+0x594>
 800cb40:	0800e6b0 	.word	0x0800e6b0
 800cb44:	0800e688 	.word	0x0800e688
 800cb48:	3ff00000 	.word	0x3ff00000
 800cb4c:	40240000 	.word	0x40240000
 800cb50:	401c0000 	.word	0x401c0000
 800cb54:	40140000 	.word	0x40140000
 800cb58:	3fe00000 	.word	0x3fe00000
 800cb5c:	9d01      	ldr	r5, [sp, #4]
 800cb5e:	4656      	mov	r6, sl
 800cb60:	465f      	mov	r7, fp
 800cb62:	4642      	mov	r2, r8
 800cb64:	464b      	mov	r3, r9
 800cb66:	4630      	mov	r0, r6
 800cb68:	4639      	mov	r1, r7
 800cb6a:	f7f3 fe6f 	bl	800084c <__aeabi_ddiv>
 800cb6e:	f7f3 fff3 	bl	8000b58 <__aeabi_d2iz>
 800cb72:	4682      	mov	sl, r0
 800cb74:	f7f3 fcd6 	bl	8000524 <__aeabi_i2d>
 800cb78:	4642      	mov	r2, r8
 800cb7a:	464b      	mov	r3, r9
 800cb7c:	f7f3 fd3c 	bl	80005f8 <__aeabi_dmul>
 800cb80:	4602      	mov	r2, r0
 800cb82:	460b      	mov	r3, r1
 800cb84:	4630      	mov	r0, r6
 800cb86:	4639      	mov	r1, r7
 800cb88:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800cb8c:	f7f3 fb7c 	bl	8000288 <__aeabi_dsub>
 800cb90:	f805 6b01 	strb.w	r6, [r5], #1
 800cb94:	9e01      	ldr	r6, [sp, #4]
 800cb96:	9f03      	ldr	r7, [sp, #12]
 800cb98:	1bae      	subs	r6, r5, r6
 800cb9a:	42b7      	cmp	r7, r6
 800cb9c:	4602      	mov	r2, r0
 800cb9e:	460b      	mov	r3, r1
 800cba0:	d135      	bne.n	800cc0e <_dtoa_r+0x6e6>
 800cba2:	f7f3 fb73 	bl	800028c <__adddf3>
 800cba6:	4642      	mov	r2, r8
 800cba8:	464b      	mov	r3, r9
 800cbaa:	4606      	mov	r6, r0
 800cbac:	460f      	mov	r7, r1
 800cbae:	f7f3 ffb3 	bl	8000b18 <__aeabi_dcmpgt>
 800cbb2:	b9d0      	cbnz	r0, 800cbea <_dtoa_r+0x6c2>
 800cbb4:	4642      	mov	r2, r8
 800cbb6:	464b      	mov	r3, r9
 800cbb8:	4630      	mov	r0, r6
 800cbba:	4639      	mov	r1, r7
 800cbbc:	f7f3 ff84 	bl	8000ac8 <__aeabi_dcmpeq>
 800cbc0:	b110      	cbz	r0, 800cbc8 <_dtoa_r+0x6a0>
 800cbc2:	f01a 0f01 	tst.w	sl, #1
 800cbc6:	d110      	bne.n	800cbea <_dtoa_r+0x6c2>
 800cbc8:	4620      	mov	r0, r4
 800cbca:	ee18 1a10 	vmov	r1, s16
 800cbce:	f000 fc23 	bl	800d418 <_Bfree>
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	9800      	ldr	r0, [sp, #0]
 800cbd6:	702b      	strb	r3, [r5, #0]
 800cbd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cbda:	3001      	adds	r0, #1
 800cbdc:	6018      	str	r0, [r3, #0]
 800cbde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	f43f acf1 	beq.w	800c5c8 <_dtoa_r+0xa0>
 800cbe6:	601d      	str	r5, [r3, #0]
 800cbe8:	e4ee      	b.n	800c5c8 <_dtoa_r+0xa0>
 800cbea:	9f00      	ldr	r7, [sp, #0]
 800cbec:	462b      	mov	r3, r5
 800cbee:	461d      	mov	r5, r3
 800cbf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cbf4:	2a39      	cmp	r2, #57	; 0x39
 800cbf6:	d106      	bne.n	800cc06 <_dtoa_r+0x6de>
 800cbf8:	9a01      	ldr	r2, [sp, #4]
 800cbfa:	429a      	cmp	r2, r3
 800cbfc:	d1f7      	bne.n	800cbee <_dtoa_r+0x6c6>
 800cbfe:	9901      	ldr	r1, [sp, #4]
 800cc00:	2230      	movs	r2, #48	; 0x30
 800cc02:	3701      	adds	r7, #1
 800cc04:	700a      	strb	r2, [r1, #0]
 800cc06:	781a      	ldrb	r2, [r3, #0]
 800cc08:	3201      	adds	r2, #1
 800cc0a:	701a      	strb	r2, [r3, #0]
 800cc0c:	e790      	b.n	800cb30 <_dtoa_r+0x608>
 800cc0e:	4ba6      	ldr	r3, [pc, #664]	; (800cea8 <_dtoa_r+0x980>)
 800cc10:	2200      	movs	r2, #0
 800cc12:	f7f3 fcf1 	bl	80005f8 <__aeabi_dmul>
 800cc16:	2200      	movs	r2, #0
 800cc18:	2300      	movs	r3, #0
 800cc1a:	4606      	mov	r6, r0
 800cc1c:	460f      	mov	r7, r1
 800cc1e:	f7f3 ff53 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc22:	2800      	cmp	r0, #0
 800cc24:	d09d      	beq.n	800cb62 <_dtoa_r+0x63a>
 800cc26:	e7cf      	b.n	800cbc8 <_dtoa_r+0x6a0>
 800cc28:	9a08      	ldr	r2, [sp, #32]
 800cc2a:	2a00      	cmp	r2, #0
 800cc2c:	f000 80d7 	beq.w	800cdde <_dtoa_r+0x8b6>
 800cc30:	9a06      	ldr	r2, [sp, #24]
 800cc32:	2a01      	cmp	r2, #1
 800cc34:	f300 80ba 	bgt.w	800cdac <_dtoa_r+0x884>
 800cc38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cc3a:	2a00      	cmp	r2, #0
 800cc3c:	f000 80b2 	beq.w	800cda4 <_dtoa_r+0x87c>
 800cc40:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cc44:	9e07      	ldr	r6, [sp, #28]
 800cc46:	9d04      	ldr	r5, [sp, #16]
 800cc48:	9a04      	ldr	r2, [sp, #16]
 800cc4a:	441a      	add	r2, r3
 800cc4c:	9204      	str	r2, [sp, #16]
 800cc4e:	9a05      	ldr	r2, [sp, #20]
 800cc50:	2101      	movs	r1, #1
 800cc52:	441a      	add	r2, r3
 800cc54:	4620      	mov	r0, r4
 800cc56:	9205      	str	r2, [sp, #20]
 800cc58:	f000 fc96 	bl	800d588 <__i2b>
 800cc5c:	4607      	mov	r7, r0
 800cc5e:	2d00      	cmp	r5, #0
 800cc60:	dd0c      	ble.n	800cc7c <_dtoa_r+0x754>
 800cc62:	9b05      	ldr	r3, [sp, #20]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	dd09      	ble.n	800cc7c <_dtoa_r+0x754>
 800cc68:	42ab      	cmp	r3, r5
 800cc6a:	9a04      	ldr	r2, [sp, #16]
 800cc6c:	bfa8      	it	ge
 800cc6e:	462b      	movge	r3, r5
 800cc70:	1ad2      	subs	r2, r2, r3
 800cc72:	9204      	str	r2, [sp, #16]
 800cc74:	9a05      	ldr	r2, [sp, #20]
 800cc76:	1aed      	subs	r5, r5, r3
 800cc78:	1ad3      	subs	r3, r2, r3
 800cc7a:	9305      	str	r3, [sp, #20]
 800cc7c:	9b07      	ldr	r3, [sp, #28]
 800cc7e:	b31b      	cbz	r3, 800ccc8 <_dtoa_r+0x7a0>
 800cc80:	9b08      	ldr	r3, [sp, #32]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	f000 80af 	beq.w	800cde6 <_dtoa_r+0x8be>
 800cc88:	2e00      	cmp	r6, #0
 800cc8a:	dd13      	ble.n	800ccb4 <_dtoa_r+0x78c>
 800cc8c:	4639      	mov	r1, r7
 800cc8e:	4632      	mov	r2, r6
 800cc90:	4620      	mov	r0, r4
 800cc92:	f000 fd39 	bl	800d708 <__pow5mult>
 800cc96:	ee18 2a10 	vmov	r2, s16
 800cc9a:	4601      	mov	r1, r0
 800cc9c:	4607      	mov	r7, r0
 800cc9e:	4620      	mov	r0, r4
 800cca0:	f000 fc88 	bl	800d5b4 <__multiply>
 800cca4:	ee18 1a10 	vmov	r1, s16
 800cca8:	4680      	mov	r8, r0
 800ccaa:	4620      	mov	r0, r4
 800ccac:	f000 fbb4 	bl	800d418 <_Bfree>
 800ccb0:	ee08 8a10 	vmov	s16, r8
 800ccb4:	9b07      	ldr	r3, [sp, #28]
 800ccb6:	1b9a      	subs	r2, r3, r6
 800ccb8:	d006      	beq.n	800ccc8 <_dtoa_r+0x7a0>
 800ccba:	ee18 1a10 	vmov	r1, s16
 800ccbe:	4620      	mov	r0, r4
 800ccc0:	f000 fd22 	bl	800d708 <__pow5mult>
 800ccc4:	ee08 0a10 	vmov	s16, r0
 800ccc8:	2101      	movs	r1, #1
 800ccca:	4620      	mov	r0, r4
 800cccc:	f000 fc5c 	bl	800d588 <__i2b>
 800ccd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	4606      	mov	r6, r0
 800ccd6:	f340 8088 	ble.w	800cdea <_dtoa_r+0x8c2>
 800ccda:	461a      	mov	r2, r3
 800ccdc:	4601      	mov	r1, r0
 800ccde:	4620      	mov	r0, r4
 800cce0:	f000 fd12 	bl	800d708 <__pow5mult>
 800cce4:	9b06      	ldr	r3, [sp, #24]
 800cce6:	2b01      	cmp	r3, #1
 800cce8:	4606      	mov	r6, r0
 800ccea:	f340 8081 	ble.w	800cdf0 <_dtoa_r+0x8c8>
 800ccee:	f04f 0800 	mov.w	r8, #0
 800ccf2:	6933      	ldr	r3, [r6, #16]
 800ccf4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ccf8:	6918      	ldr	r0, [r3, #16]
 800ccfa:	f000 fbf5 	bl	800d4e8 <__hi0bits>
 800ccfe:	f1c0 0020 	rsb	r0, r0, #32
 800cd02:	9b05      	ldr	r3, [sp, #20]
 800cd04:	4418      	add	r0, r3
 800cd06:	f010 001f 	ands.w	r0, r0, #31
 800cd0a:	f000 8092 	beq.w	800ce32 <_dtoa_r+0x90a>
 800cd0e:	f1c0 0320 	rsb	r3, r0, #32
 800cd12:	2b04      	cmp	r3, #4
 800cd14:	f340 808a 	ble.w	800ce2c <_dtoa_r+0x904>
 800cd18:	f1c0 001c 	rsb	r0, r0, #28
 800cd1c:	9b04      	ldr	r3, [sp, #16]
 800cd1e:	4403      	add	r3, r0
 800cd20:	9304      	str	r3, [sp, #16]
 800cd22:	9b05      	ldr	r3, [sp, #20]
 800cd24:	4403      	add	r3, r0
 800cd26:	4405      	add	r5, r0
 800cd28:	9305      	str	r3, [sp, #20]
 800cd2a:	9b04      	ldr	r3, [sp, #16]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	dd07      	ble.n	800cd40 <_dtoa_r+0x818>
 800cd30:	ee18 1a10 	vmov	r1, s16
 800cd34:	461a      	mov	r2, r3
 800cd36:	4620      	mov	r0, r4
 800cd38:	f000 fd40 	bl	800d7bc <__lshift>
 800cd3c:	ee08 0a10 	vmov	s16, r0
 800cd40:	9b05      	ldr	r3, [sp, #20]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	dd05      	ble.n	800cd52 <_dtoa_r+0x82a>
 800cd46:	4631      	mov	r1, r6
 800cd48:	461a      	mov	r2, r3
 800cd4a:	4620      	mov	r0, r4
 800cd4c:	f000 fd36 	bl	800d7bc <__lshift>
 800cd50:	4606      	mov	r6, r0
 800cd52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d06e      	beq.n	800ce36 <_dtoa_r+0x90e>
 800cd58:	ee18 0a10 	vmov	r0, s16
 800cd5c:	4631      	mov	r1, r6
 800cd5e:	f000 fd9d 	bl	800d89c <__mcmp>
 800cd62:	2800      	cmp	r0, #0
 800cd64:	da67      	bge.n	800ce36 <_dtoa_r+0x90e>
 800cd66:	9b00      	ldr	r3, [sp, #0]
 800cd68:	3b01      	subs	r3, #1
 800cd6a:	ee18 1a10 	vmov	r1, s16
 800cd6e:	9300      	str	r3, [sp, #0]
 800cd70:	220a      	movs	r2, #10
 800cd72:	2300      	movs	r3, #0
 800cd74:	4620      	mov	r0, r4
 800cd76:	f000 fb71 	bl	800d45c <__multadd>
 800cd7a:	9b08      	ldr	r3, [sp, #32]
 800cd7c:	ee08 0a10 	vmov	s16, r0
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	f000 81b1 	beq.w	800d0e8 <_dtoa_r+0xbc0>
 800cd86:	2300      	movs	r3, #0
 800cd88:	4639      	mov	r1, r7
 800cd8a:	220a      	movs	r2, #10
 800cd8c:	4620      	mov	r0, r4
 800cd8e:	f000 fb65 	bl	800d45c <__multadd>
 800cd92:	9b02      	ldr	r3, [sp, #8]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	4607      	mov	r7, r0
 800cd98:	f300 808e 	bgt.w	800ceb8 <_dtoa_r+0x990>
 800cd9c:	9b06      	ldr	r3, [sp, #24]
 800cd9e:	2b02      	cmp	r3, #2
 800cda0:	dc51      	bgt.n	800ce46 <_dtoa_r+0x91e>
 800cda2:	e089      	b.n	800ceb8 <_dtoa_r+0x990>
 800cda4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cda6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cdaa:	e74b      	b.n	800cc44 <_dtoa_r+0x71c>
 800cdac:	9b03      	ldr	r3, [sp, #12]
 800cdae:	1e5e      	subs	r6, r3, #1
 800cdb0:	9b07      	ldr	r3, [sp, #28]
 800cdb2:	42b3      	cmp	r3, r6
 800cdb4:	bfbf      	itttt	lt
 800cdb6:	9b07      	ldrlt	r3, [sp, #28]
 800cdb8:	9607      	strlt	r6, [sp, #28]
 800cdba:	1af2      	sublt	r2, r6, r3
 800cdbc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cdbe:	bfb6      	itet	lt
 800cdc0:	189b      	addlt	r3, r3, r2
 800cdc2:	1b9e      	subge	r6, r3, r6
 800cdc4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800cdc6:	9b03      	ldr	r3, [sp, #12]
 800cdc8:	bfb8      	it	lt
 800cdca:	2600      	movlt	r6, #0
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	bfb7      	itett	lt
 800cdd0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800cdd4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800cdd8:	1a9d      	sublt	r5, r3, r2
 800cdda:	2300      	movlt	r3, #0
 800cddc:	e734      	b.n	800cc48 <_dtoa_r+0x720>
 800cdde:	9e07      	ldr	r6, [sp, #28]
 800cde0:	9d04      	ldr	r5, [sp, #16]
 800cde2:	9f08      	ldr	r7, [sp, #32]
 800cde4:	e73b      	b.n	800cc5e <_dtoa_r+0x736>
 800cde6:	9a07      	ldr	r2, [sp, #28]
 800cde8:	e767      	b.n	800ccba <_dtoa_r+0x792>
 800cdea:	9b06      	ldr	r3, [sp, #24]
 800cdec:	2b01      	cmp	r3, #1
 800cdee:	dc18      	bgt.n	800ce22 <_dtoa_r+0x8fa>
 800cdf0:	f1ba 0f00 	cmp.w	sl, #0
 800cdf4:	d115      	bne.n	800ce22 <_dtoa_r+0x8fa>
 800cdf6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cdfa:	b993      	cbnz	r3, 800ce22 <_dtoa_r+0x8fa>
 800cdfc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ce00:	0d1b      	lsrs	r3, r3, #20
 800ce02:	051b      	lsls	r3, r3, #20
 800ce04:	b183      	cbz	r3, 800ce28 <_dtoa_r+0x900>
 800ce06:	9b04      	ldr	r3, [sp, #16]
 800ce08:	3301      	adds	r3, #1
 800ce0a:	9304      	str	r3, [sp, #16]
 800ce0c:	9b05      	ldr	r3, [sp, #20]
 800ce0e:	3301      	adds	r3, #1
 800ce10:	9305      	str	r3, [sp, #20]
 800ce12:	f04f 0801 	mov.w	r8, #1
 800ce16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	f47f af6a 	bne.w	800ccf2 <_dtoa_r+0x7ca>
 800ce1e:	2001      	movs	r0, #1
 800ce20:	e76f      	b.n	800cd02 <_dtoa_r+0x7da>
 800ce22:	f04f 0800 	mov.w	r8, #0
 800ce26:	e7f6      	b.n	800ce16 <_dtoa_r+0x8ee>
 800ce28:	4698      	mov	r8, r3
 800ce2a:	e7f4      	b.n	800ce16 <_dtoa_r+0x8ee>
 800ce2c:	f43f af7d 	beq.w	800cd2a <_dtoa_r+0x802>
 800ce30:	4618      	mov	r0, r3
 800ce32:	301c      	adds	r0, #28
 800ce34:	e772      	b.n	800cd1c <_dtoa_r+0x7f4>
 800ce36:	9b03      	ldr	r3, [sp, #12]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	dc37      	bgt.n	800ceac <_dtoa_r+0x984>
 800ce3c:	9b06      	ldr	r3, [sp, #24]
 800ce3e:	2b02      	cmp	r3, #2
 800ce40:	dd34      	ble.n	800ceac <_dtoa_r+0x984>
 800ce42:	9b03      	ldr	r3, [sp, #12]
 800ce44:	9302      	str	r3, [sp, #8]
 800ce46:	9b02      	ldr	r3, [sp, #8]
 800ce48:	b96b      	cbnz	r3, 800ce66 <_dtoa_r+0x93e>
 800ce4a:	4631      	mov	r1, r6
 800ce4c:	2205      	movs	r2, #5
 800ce4e:	4620      	mov	r0, r4
 800ce50:	f000 fb04 	bl	800d45c <__multadd>
 800ce54:	4601      	mov	r1, r0
 800ce56:	4606      	mov	r6, r0
 800ce58:	ee18 0a10 	vmov	r0, s16
 800ce5c:	f000 fd1e 	bl	800d89c <__mcmp>
 800ce60:	2800      	cmp	r0, #0
 800ce62:	f73f adbb 	bgt.w	800c9dc <_dtoa_r+0x4b4>
 800ce66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce68:	9d01      	ldr	r5, [sp, #4]
 800ce6a:	43db      	mvns	r3, r3
 800ce6c:	9300      	str	r3, [sp, #0]
 800ce6e:	f04f 0800 	mov.w	r8, #0
 800ce72:	4631      	mov	r1, r6
 800ce74:	4620      	mov	r0, r4
 800ce76:	f000 facf 	bl	800d418 <_Bfree>
 800ce7a:	2f00      	cmp	r7, #0
 800ce7c:	f43f aea4 	beq.w	800cbc8 <_dtoa_r+0x6a0>
 800ce80:	f1b8 0f00 	cmp.w	r8, #0
 800ce84:	d005      	beq.n	800ce92 <_dtoa_r+0x96a>
 800ce86:	45b8      	cmp	r8, r7
 800ce88:	d003      	beq.n	800ce92 <_dtoa_r+0x96a>
 800ce8a:	4641      	mov	r1, r8
 800ce8c:	4620      	mov	r0, r4
 800ce8e:	f000 fac3 	bl	800d418 <_Bfree>
 800ce92:	4639      	mov	r1, r7
 800ce94:	4620      	mov	r0, r4
 800ce96:	f000 fabf 	bl	800d418 <_Bfree>
 800ce9a:	e695      	b.n	800cbc8 <_dtoa_r+0x6a0>
 800ce9c:	2600      	movs	r6, #0
 800ce9e:	4637      	mov	r7, r6
 800cea0:	e7e1      	b.n	800ce66 <_dtoa_r+0x93e>
 800cea2:	9700      	str	r7, [sp, #0]
 800cea4:	4637      	mov	r7, r6
 800cea6:	e599      	b.n	800c9dc <_dtoa_r+0x4b4>
 800cea8:	40240000 	.word	0x40240000
 800ceac:	9b08      	ldr	r3, [sp, #32]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	f000 80ca 	beq.w	800d048 <_dtoa_r+0xb20>
 800ceb4:	9b03      	ldr	r3, [sp, #12]
 800ceb6:	9302      	str	r3, [sp, #8]
 800ceb8:	2d00      	cmp	r5, #0
 800ceba:	dd05      	ble.n	800cec8 <_dtoa_r+0x9a0>
 800cebc:	4639      	mov	r1, r7
 800cebe:	462a      	mov	r2, r5
 800cec0:	4620      	mov	r0, r4
 800cec2:	f000 fc7b 	bl	800d7bc <__lshift>
 800cec6:	4607      	mov	r7, r0
 800cec8:	f1b8 0f00 	cmp.w	r8, #0
 800cecc:	d05b      	beq.n	800cf86 <_dtoa_r+0xa5e>
 800cece:	6879      	ldr	r1, [r7, #4]
 800ced0:	4620      	mov	r0, r4
 800ced2:	f000 fa61 	bl	800d398 <_Balloc>
 800ced6:	4605      	mov	r5, r0
 800ced8:	b928      	cbnz	r0, 800cee6 <_dtoa_r+0x9be>
 800ceda:	4b87      	ldr	r3, [pc, #540]	; (800d0f8 <_dtoa_r+0xbd0>)
 800cedc:	4602      	mov	r2, r0
 800cede:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cee2:	f7ff bb3b 	b.w	800c55c <_dtoa_r+0x34>
 800cee6:	693a      	ldr	r2, [r7, #16]
 800cee8:	3202      	adds	r2, #2
 800ceea:	0092      	lsls	r2, r2, #2
 800ceec:	f107 010c 	add.w	r1, r7, #12
 800cef0:	300c      	adds	r0, #12
 800cef2:	f7fe f9c5 	bl	800b280 <memcpy>
 800cef6:	2201      	movs	r2, #1
 800cef8:	4629      	mov	r1, r5
 800cefa:	4620      	mov	r0, r4
 800cefc:	f000 fc5e 	bl	800d7bc <__lshift>
 800cf00:	9b01      	ldr	r3, [sp, #4]
 800cf02:	f103 0901 	add.w	r9, r3, #1
 800cf06:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800cf0a:	4413      	add	r3, r2
 800cf0c:	9305      	str	r3, [sp, #20]
 800cf0e:	f00a 0301 	and.w	r3, sl, #1
 800cf12:	46b8      	mov	r8, r7
 800cf14:	9304      	str	r3, [sp, #16]
 800cf16:	4607      	mov	r7, r0
 800cf18:	4631      	mov	r1, r6
 800cf1a:	ee18 0a10 	vmov	r0, s16
 800cf1e:	f7ff fa77 	bl	800c410 <quorem>
 800cf22:	4641      	mov	r1, r8
 800cf24:	9002      	str	r0, [sp, #8]
 800cf26:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cf2a:	ee18 0a10 	vmov	r0, s16
 800cf2e:	f000 fcb5 	bl	800d89c <__mcmp>
 800cf32:	463a      	mov	r2, r7
 800cf34:	9003      	str	r0, [sp, #12]
 800cf36:	4631      	mov	r1, r6
 800cf38:	4620      	mov	r0, r4
 800cf3a:	f000 fccb 	bl	800d8d4 <__mdiff>
 800cf3e:	68c2      	ldr	r2, [r0, #12]
 800cf40:	f109 3bff 	add.w	fp, r9, #4294967295
 800cf44:	4605      	mov	r5, r0
 800cf46:	bb02      	cbnz	r2, 800cf8a <_dtoa_r+0xa62>
 800cf48:	4601      	mov	r1, r0
 800cf4a:	ee18 0a10 	vmov	r0, s16
 800cf4e:	f000 fca5 	bl	800d89c <__mcmp>
 800cf52:	4602      	mov	r2, r0
 800cf54:	4629      	mov	r1, r5
 800cf56:	4620      	mov	r0, r4
 800cf58:	9207      	str	r2, [sp, #28]
 800cf5a:	f000 fa5d 	bl	800d418 <_Bfree>
 800cf5e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800cf62:	ea43 0102 	orr.w	r1, r3, r2
 800cf66:	9b04      	ldr	r3, [sp, #16]
 800cf68:	430b      	orrs	r3, r1
 800cf6a:	464d      	mov	r5, r9
 800cf6c:	d10f      	bne.n	800cf8e <_dtoa_r+0xa66>
 800cf6e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cf72:	d02a      	beq.n	800cfca <_dtoa_r+0xaa2>
 800cf74:	9b03      	ldr	r3, [sp, #12]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	dd02      	ble.n	800cf80 <_dtoa_r+0xa58>
 800cf7a:	9b02      	ldr	r3, [sp, #8]
 800cf7c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800cf80:	f88b a000 	strb.w	sl, [fp]
 800cf84:	e775      	b.n	800ce72 <_dtoa_r+0x94a>
 800cf86:	4638      	mov	r0, r7
 800cf88:	e7ba      	b.n	800cf00 <_dtoa_r+0x9d8>
 800cf8a:	2201      	movs	r2, #1
 800cf8c:	e7e2      	b.n	800cf54 <_dtoa_r+0xa2c>
 800cf8e:	9b03      	ldr	r3, [sp, #12]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	db04      	blt.n	800cf9e <_dtoa_r+0xa76>
 800cf94:	9906      	ldr	r1, [sp, #24]
 800cf96:	430b      	orrs	r3, r1
 800cf98:	9904      	ldr	r1, [sp, #16]
 800cf9a:	430b      	orrs	r3, r1
 800cf9c:	d122      	bne.n	800cfe4 <_dtoa_r+0xabc>
 800cf9e:	2a00      	cmp	r2, #0
 800cfa0:	ddee      	ble.n	800cf80 <_dtoa_r+0xa58>
 800cfa2:	ee18 1a10 	vmov	r1, s16
 800cfa6:	2201      	movs	r2, #1
 800cfa8:	4620      	mov	r0, r4
 800cfaa:	f000 fc07 	bl	800d7bc <__lshift>
 800cfae:	4631      	mov	r1, r6
 800cfb0:	ee08 0a10 	vmov	s16, r0
 800cfb4:	f000 fc72 	bl	800d89c <__mcmp>
 800cfb8:	2800      	cmp	r0, #0
 800cfba:	dc03      	bgt.n	800cfc4 <_dtoa_r+0xa9c>
 800cfbc:	d1e0      	bne.n	800cf80 <_dtoa_r+0xa58>
 800cfbe:	f01a 0f01 	tst.w	sl, #1
 800cfc2:	d0dd      	beq.n	800cf80 <_dtoa_r+0xa58>
 800cfc4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cfc8:	d1d7      	bne.n	800cf7a <_dtoa_r+0xa52>
 800cfca:	2339      	movs	r3, #57	; 0x39
 800cfcc:	f88b 3000 	strb.w	r3, [fp]
 800cfd0:	462b      	mov	r3, r5
 800cfd2:	461d      	mov	r5, r3
 800cfd4:	3b01      	subs	r3, #1
 800cfd6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cfda:	2a39      	cmp	r2, #57	; 0x39
 800cfdc:	d071      	beq.n	800d0c2 <_dtoa_r+0xb9a>
 800cfde:	3201      	adds	r2, #1
 800cfe0:	701a      	strb	r2, [r3, #0]
 800cfe2:	e746      	b.n	800ce72 <_dtoa_r+0x94a>
 800cfe4:	2a00      	cmp	r2, #0
 800cfe6:	dd07      	ble.n	800cff8 <_dtoa_r+0xad0>
 800cfe8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cfec:	d0ed      	beq.n	800cfca <_dtoa_r+0xaa2>
 800cfee:	f10a 0301 	add.w	r3, sl, #1
 800cff2:	f88b 3000 	strb.w	r3, [fp]
 800cff6:	e73c      	b.n	800ce72 <_dtoa_r+0x94a>
 800cff8:	9b05      	ldr	r3, [sp, #20]
 800cffa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800cffe:	4599      	cmp	r9, r3
 800d000:	d047      	beq.n	800d092 <_dtoa_r+0xb6a>
 800d002:	ee18 1a10 	vmov	r1, s16
 800d006:	2300      	movs	r3, #0
 800d008:	220a      	movs	r2, #10
 800d00a:	4620      	mov	r0, r4
 800d00c:	f000 fa26 	bl	800d45c <__multadd>
 800d010:	45b8      	cmp	r8, r7
 800d012:	ee08 0a10 	vmov	s16, r0
 800d016:	f04f 0300 	mov.w	r3, #0
 800d01a:	f04f 020a 	mov.w	r2, #10
 800d01e:	4641      	mov	r1, r8
 800d020:	4620      	mov	r0, r4
 800d022:	d106      	bne.n	800d032 <_dtoa_r+0xb0a>
 800d024:	f000 fa1a 	bl	800d45c <__multadd>
 800d028:	4680      	mov	r8, r0
 800d02a:	4607      	mov	r7, r0
 800d02c:	f109 0901 	add.w	r9, r9, #1
 800d030:	e772      	b.n	800cf18 <_dtoa_r+0x9f0>
 800d032:	f000 fa13 	bl	800d45c <__multadd>
 800d036:	4639      	mov	r1, r7
 800d038:	4680      	mov	r8, r0
 800d03a:	2300      	movs	r3, #0
 800d03c:	220a      	movs	r2, #10
 800d03e:	4620      	mov	r0, r4
 800d040:	f000 fa0c 	bl	800d45c <__multadd>
 800d044:	4607      	mov	r7, r0
 800d046:	e7f1      	b.n	800d02c <_dtoa_r+0xb04>
 800d048:	9b03      	ldr	r3, [sp, #12]
 800d04a:	9302      	str	r3, [sp, #8]
 800d04c:	9d01      	ldr	r5, [sp, #4]
 800d04e:	ee18 0a10 	vmov	r0, s16
 800d052:	4631      	mov	r1, r6
 800d054:	f7ff f9dc 	bl	800c410 <quorem>
 800d058:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d05c:	9b01      	ldr	r3, [sp, #4]
 800d05e:	f805 ab01 	strb.w	sl, [r5], #1
 800d062:	1aea      	subs	r2, r5, r3
 800d064:	9b02      	ldr	r3, [sp, #8]
 800d066:	4293      	cmp	r3, r2
 800d068:	dd09      	ble.n	800d07e <_dtoa_r+0xb56>
 800d06a:	ee18 1a10 	vmov	r1, s16
 800d06e:	2300      	movs	r3, #0
 800d070:	220a      	movs	r2, #10
 800d072:	4620      	mov	r0, r4
 800d074:	f000 f9f2 	bl	800d45c <__multadd>
 800d078:	ee08 0a10 	vmov	s16, r0
 800d07c:	e7e7      	b.n	800d04e <_dtoa_r+0xb26>
 800d07e:	9b02      	ldr	r3, [sp, #8]
 800d080:	2b00      	cmp	r3, #0
 800d082:	bfc8      	it	gt
 800d084:	461d      	movgt	r5, r3
 800d086:	9b01      	ldr	r3, [sp, #4]
 800d088:	bfd8      	it	le
 800d08a:	2501      	movle	r5, #1
 800d08c:	441d      	add	r5, r3
 800d08e:	f04f 0800 	mov.w	r8, #0
 800d092:	ee18 1a10 	vmov	r1, s16
 800d096:	2201      	movs	r2, #1
 800d098:	4620      	mov	r0, r4
 800d09a:	f000 fb8f 	bl	800d7bc <__lshift>
 800d09e:	4631      	mov	r1, r6
 800d0a0:	ee08 0a10 	vmov	s16, r0
 800d0a4:	f000 fbfa 	bl	800d89c <__mcmp>
 800d0a8:	2800      	cmp	r0, #0
 800d0aa:	dc91      	bgt.n	800cfd0 <_dtoa_r+0xaa8>
 800d0ac:	d102      	bne.n	800d0b4 <_dtoa_r+0xb8c>
 800d0ae:	f01a 0f01 	tst.w	sl, #1
 800d0b2:	d18d      	bne.n	800cfd0 <_dtoa_r+0xaa8>
 800d0b4:	462b      	mov	r3, r5
 800d0b6:	461d      	mov	r5, r3
 800d0b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d0bc:	2a30      	cmp	r2, #48	; 0x30
 800d0be:	d0fa      	beq.n	800d0b6 <_dtoa_r+0xb8e>
 800d0c0:	e6d7      	b.n	800ce72 <_dtoa_r+0x94a>
 800d0c2:	9a01      	ldr	r2, [sp, #4]
 800d0c4:	429a      	cmp	r2, r3
 800d0c6:	d184      	bne.n	800cfd2 <_dtoa_r+0xaaa>
 800d0c8:	9b00      	ldr	r3, [sp, #0]
 800d0ca:	3301      	adds	r3, #1
 800d0cc:	9300      	str	r3, [sp, #0]
 800d0ce:	2331      	movs	r3, #49	; 0x31
 800d0d0:	7013      	strb	r3, [r2, #0]
 800d0d2:	e6ce      	b.n	800ce72 <_dtoa_r+0x94a>
 800d0d4:	4b09      	ldr	r3, [pc, #36]	; (800d0fc <_dtoa_r+0xbd4>)
 800d0d6:	f7ff ba95 	b.w	800c604 <_dtoa_r+0xdc>
 800d0da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	f47f aa6e 	bne.w	800c5be <_dtoa_r+0x96>
 800d0e2:	4b07      	ldr	r3, [pc, #28]	; (800d100 <_dtoa_r+0xbd8>)
 800d0e4:	f7ff ba8e 	b.w	800c604 <_dtoa_r+0xdc>
 800d0e8:	9b02      	ldr	r3, [sp, #8]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	dcae      	bgt.n	800d04c <_dtoa_r+0xb24>
 800d0ee:	9b06      	ldr	r3, [sp, #24]
 800d0f0:	2b02      	cmp	r3, #2
 800d0f2:	f73f aea8 	bgt.w	800ce46 <_dtoa_r+0x91e>
 800d0f6:	e7a9      	b.n	800d04c <_dtoa_r+0xb24>
 800d0f8:	0800e614 	.word	0x0800e614
 800d0fc:	0800e470 	.word	0x0800e470
 800d100:	0800e595 	.word	0x0800e595

0800d104 <__sflush_r>:
 800d104:	898a      	ldrh	r2, [r1, #12]
 800d106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d10a:	4605      	mov	r5, r0
 800d10c:	0710      	lsls	r0, r2, #28
 800d10e:	460c      	mov	r4, r1
 800d110:	d458      	bmi.n	800d1c4 <__sflush_r+0xc0>
 800d112:	684b      	ldr	r3, [r1, #4]
 800d114:	2b00      	cmp	r3, #0
 800d116:	dc05      	bgt.n	800d124 <__sflush_r+0x20>
 800d118:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	dc02      	bgt.n	800d124 <__sflush_r+0x20>
 800d11e:	2000      	movs	r0, #0
 800d120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d124:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d126:	2e00      	cmp	r6, #0
 800d128:	d0f9      	beq.n	800d11e <__sflush_r+0x1a>
 800d12a:	2300      	movs	r3, #0
 800d12c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d130:	682f      	ldr	r7, [r5, #0]
 800d132:	602b      	str	r3, [r5, #0]
 800d134:	d032      	beq.n	800d19c <__sflush_r+0x98>
 800d136:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d138:	89a3      	ldrh	r3, [r4, #12]
 800d13a:	075a      	lsls	r2, r3, #29
 800d13c:	d505      	bpl.n	800d14a <__sflush_r+0x46>
 800d13e:	6863      	ldr	r3, [r4, #4]
 800d140:	1ac0      	subs	r0, r0, r3
 800d142:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d144:	b10b      	cbz	r3, 800d14a <__sflush_r+0x46>
 800d146:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d148:	1ac0      	subs	r0, r0, r3
 800d14a:	2300      	movs	r3, #0
 800d14c:	4602      	mov	r2, r0
 800d14e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d150:	6a21      	ldr	r1, [r4, #32]
 800d152:	4628      	mov	r0, r5
 800d154:	47b0      	blx	r6
 800d156:	1c43      	adds	r3, r0, #1
 800d158:	89a3      	ldrh	r3, [r4, #12]
 800d15a:	d106      	bne.n	800d16a <__sflush_r+0x66>
 800d15c:	6829      	ldr	r1, [r5, #0]
 800d15e:	291d      	cmp	r1, #29
 800d160:	d82c      	bhi.n	800d1bc <__sflush_r+0xb8>
 800d162:	4a2a      	ldr	r2, [pc, #168]	; (800d20c <__sflush_r+0x108>)
 800d164:	40ca      	lsrs	r2, r1
 800d166:	07d6      	lsls	r6, r2, #31
 800d168:	d528      	bpl.n	800d1bc <__sflush_r+0xb8>
 800d16a:	2200      	movs	r2, #0
 800d16c:	6062      	str	r2, [r4, #4]
 800d16e:	04d9      	lsls	r1, r3, #19
 800d170:	6922      	ldr	r2, [r4, #16]
 800d172:	6022      	str	r2, [r4, #0]
 800d174:	d504      	bpl.n	800d180 <__sflush_r+0x7c>
 800d176:	1c42      	adds	r2, r0, #1
 800d178:	d101      	bne.n	800d17e <__sflush_r+0x7a>
 800d17a:	682b      	ldr	r3, [r5, #0]
 800d17c:	b903      	cbnz	r3, 800d180 <__sflush_r+0x7c>
 800d17e:	6560      	str	r0, [r4, #84]	; 0x54
 800d180:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d182:	602f      	str	r7, [r5, #0]
 800d184:	2900      	cmp	r1, #0
 800d186:	d0ca      	beq.n	800d11e <__sflush_r+0x1a>
 800d188:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d18c:	4299      	cmp	r1, r3
 800d18e:	d002      	beq.n	800d196 <__sflush_r+0x92>
 800d190:	4628      	mov	r0, r5
 800d192:	f7fe f88b 	bl	800b2ac <_free_r>
 800d196:	2000      	movs	r0, #0
 800d198:	6360      	str	r0, [r4, #52]	; 0x34
 800d19a:	e7c1      	b.n	800d120 <__sflush_r+0x1c>
 800d19c:	6a21      	ldr	r1, [r4, #32]
 800d19e:	2301      	movs	r3, #1
 800d1a0:	4628      	mov	r0, r5
 800d1a2:	47b0      	blx	r6
 800d1a4:	1c41      	adds	r1, r0, #1
 800d1a6:	d1c7      	bne.n	800d138 <__sflush_r+0x34>
 800d1a8:	682b      	ldr	r3, [r5, #0]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d0c4      	beq.n	800d138 <__sflush_r+0x34>
 800d1ae:	2b1d      	cmp	r3, #29
 800d1b0:	d001      	beq.n	800d1b6 <__sflush_r+0xb2>
 800d1b2:	2b16      	cmp	r3, #22
 800d1b4:	d101      	bne.n	800d1ba <__sflush_r+0xb6>
 800d1b6:	602f      	str	r7, [r5, #0]
 800d1b8:	e7b1      	b.n	800d11e <__sflush_r+0x1a>
 800d1ba:	89a3      	ldrh	r3, [r4, #12]
 800d1bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1c0:	81a3      	strh	r3, [r4, #12]
 800d1c2:	e7ad      	b.n	800d120 <__sflush_r+0x1c>
 800d1c4:	690f      	ldr	r7, [r1, #16]
 800d1c6:	2f00      	cmp	r7, #0
 800d1c8:	d0a9      	beq.n	800d11e <__sflush_r+0x1a>
 800d1ca:	0793      	lsls	r3, r2, #30
 800d1cc:	680e      	ldr	r6, [r1, #0]
 800d1ce:	bf08      	it	eq
 800d1d0:	694b      	ldreq	r3, [r1, #20]
 800d1d2:	600f      	str	r7, [r1, #0]
 800d1d4:	bf18      	it	ne
 800d1d6:	2300      	movne	r3, #0
 800d1d8:	eba6 0807 	sub.w	r8, r6, r7
 800d1dc:	608b      	str	r3, [r1, #8]
 800d1de:	f1b8 0f00 	cmp.w	r8, #0
 800d1e2:	dd9c      	ble.n	800d11e <__sflush_r+0x1a>
 800d1e4:	6a21      	ldr	r1, [r4, #32]
 800d1e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d1e8:	4643      	mov	r3, r8
 800d1ea:	463a      	mov	r2, r7
 800d1ec:	4628      	mov	r0, r5
 800d1ee:	47b0      	blx	r6
 800d1f0:	2800      	cmp	r0, #0
 800d1f2:	dc06      	bgt.n	800d202 <__sflush_r+0xfe>
 800d1f4:	89a3      	ldrh	r3, [r4, #12]
 800d1f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1fa:	81a3      	strh	r3, [r4, #12]
 800d1fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d200:	e78e      	b.n	800d120 <__sflush_r+0x1c>
 800d202:	4407      	add	r7, r0
 800d204:	eba8 0800 	sub.w	r8, r8, r0
 800d208:	e7e9      	b.n	800d1de <__sflush_r+0xda>
 800d20a:	bf00      	nop
 800d20c:	20400001 	.word	0x20400001

0800d210 <_fflush_r>:
 800d210:	b538      	push	{r3, r4, r5, lr}
 800d212:	690b      	ldr	r3, [r1, #16]
 800d214:	4605      	mov	r5, r0
 800d216:	460c      	mov	r4, r1
 800d218:	b913      	cbnz	r3, 800d220 <_fflush_r+0x10>
 800d21a:	2500      	movs	r5, #0
 800d21c:	4628      	mov	r0, r5
 800d21e:	bd38      	pop	{r3, r4, r5, pc}
 800d220:	b118      	cbz	r0, 800d22a <_fflush_r+0x1a>
 800d222:	6983      	ldr	r3, [r0, #24]
 800d224:	b90b      	cbnz	r3, 800d22a <_fflush_r+0x1a>
 800d226:	f7fd ff61 	bl	800b0ec <__sinit>
 800d22a:	4b14      	ldr	r3, [pc, #80]	; (800d27c <_fflush_r+0x6c>)
 800d22c:	429c      	cmp	r4, r3
 800d22e:	d11b      	bne.n	800d268 <_fflush_r+0x58>
 800d230:	686c      	ldr	r4, [r5, #4]
 800d232:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d0ef      	beq.n	800d21a <_fflush_r+0xa>
 800d23a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d23c:	07d0      	lsls	r0, r2, #31
 800d23e:	d404      	bmi.n	800d24a <_fflush_r+0x3a>
 800d240:	0599      	lsls	r1, r3, #22
 800d242:	d402      	bmi.n	800d24a <_fflush_r+0x3a>
 800d244:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d246:	f7f5 fea1 	bl	8002f8c <__retarget_lock_acquire_recursive>
 800d24a:	4628      	mov	r0, r5
 800d24c:	4621      	mov	r1, r4
 800d24e:	f7ff ff59 	bl	800d104 <__sflush_r>
 800d252:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d254:	07da      	lsls	r2, r3, #31
 800d256:	4605      	mov	r5, r0
 800d258:	d4e0      	bmi.n	800d21c <_fflush_r+0xc>
 800d25a:	89a3      	ldrh	r3, [r4, #12]
 800d25c:	059b      	lsls	r3, r3, #22
 800d25e:	d4dd      	bmi.n	800d21c <_fflush_r+0xc>
 800d260:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d262:	f7f5 fea7 	bl	8002fb4 <__retarget_lock_release_recursive>
 800d266:	e7d9      	b.n	800d21c <_fflush_r+0xc>
 800d268:	4b05      	ldr	r3, [pc, #20]	; (800d280 <_fflush_r+0x70>)
 800d26a:	429c      	cmp	r4, r3
 800d26c:	d101      	bne.n	800d272 <_fflush_r+0x62>
 800d26e:	68ac      	ldr	r4, [r5, #8]
 800d270:	e7df      	b.n	800d232 <_fflush_r+0x22>
 800d272:	4b04      	ldr	r3, [pc, #16]	; (800d284 <_fflush_r+0x74>)
 800d274:	429c      	cmp	r4, r3
 800d276:	bf08      	it	eq
 800d278:	68ec      	ldreq	r4, [r5, #12]
 800d27a:	e7da      	b.n	800d232 <_fflush_r+0x22>
 800d27c:	0800e41c 	.word	0x0800e41c
 800d280:	0800e43c 	.word	0x0800e43c
 800d284:	0800e3fc 	.word	0x0800e3fc

0800d288 <_localeconv_r>:
 800d288:	4800      	ldr	r0, [pc, #0]	; (800d28c <_localeconv_r+0x4>)
 800d28a:	4770      	bx	lr
 800d28c:	200001bc 	.word	0x200001bc

0800d290 <_lseek_r>:
 800d290:	b538      	push	{r3, r4, r5, lr}
 800d292:	4d07      	ldr	r5, [pc, #28]	; (800d2b0 <_lseek_r+0x20>)
 800d294:	4604      	mov	r4, r0
 800d296:	4608      	mov	r0, r1
 800d298:	4611      	mov	r1, r2
 800d29a:	2200      	movs	r2, #0
 800d29c:	602a      	str	r2, [r5, #0]
 800d29e:	461a      	mov	r2, r3
 800d2a0:	f7f5 fd54 	bl	8002d4c <_lseek>
 800d2a4:	1c43      	adds	r3, r0, #1
 800d2a6:	d102      	bne.n	800d2ae <_lseek_r+0x1e>
 800d2a8:	682b      	ldr	r3, [r5, #0]
 800d2aa:	b103      	cbz	r3, 800d2ae <_lseek_r+0x1e>
 800d2ac:	6023      	str	r3, [r4, #0]
 800d2ae:	bd38      	pop	{r3, r4, r5, pc}
 800d2b0:	20005634 	.word	0x20005634

0800d2b4 <__swhatbuf_r>:
 800d2b4:	b570      	push	{r4, r5, r6, lr}
 800d2b6:	460e      	mov	r6, r1
 800d2b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2bc:	2900      	cmp	r1, #0
 800d2be:	b096      	sub	sp, #88	; 0x58
 800d2c0:	4614      	mov	r4, r2
 800d2c2:	461d      	mov	r5, r3
 800d2c4:	da08      	bge.n	800d2d8 <__swhatbuf_r+0x24>
 800d2c6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	602a      	str	r2, [r5, #0]
 800d2ce:	061a      	lsls	r2, r3, #24
 800d2d0:	d410      	bmi.n	800d2f4 <__swhatbuf_r+0x40>
 800d2d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d2d6:	e00e      	b.n	800d2f6 <__swhatbuf_r+0x42>
 800d2d8:	466a      	mov	r2, sp
 800d2da:	f000 ff37 	bl	800e14c <_fstat_r>
 800d2de:	2800      	cmp	r0, #0
 800d2e0:	dbf1      	blt.n	800d2c6 <__swhatbuf_r+0x12>
 800d2e2:	9a01      	ldr	r2, [sp, #4]
 800d2e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d2e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d2ec:	425a      	negs	r2, r3
 800d2ee:	415a      	adcs	r2, r3
 800d2f0:	602a      	str	r2, [r5, #0]
 800d2f2:	e7ee      	b.n	800d2d2 <__swhatbuf_r+0x1e>
 800d2f4:	2340      	movs	r3, #64	; 0x40
 800d2f6:	2000      	movs	r0, #0
 800d2f8:	6023      	str	r3, [r4, #0]
 800d2fa:	b016      	add	sp, #88	; 0x58
 800d2fc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d300 <__smakebuf_r>:
 800d300:	898b      	ldrh	r3, [r1, #12]
 800d302:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d304:	079d      	lsls	r5, r3, #30
 800d306:	4606      	mov	r6, r0
 800d308:	460c      	mov	r4, r1
 800d30a:	d507      	bpl.n	800d31c <__smakebuf_r+0x1c>
 800d30c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d310:	6023      	str	r3, [r4, #0]
 800d312:	6123      	str	r3, [r4, #16]
 800d314:	2301      	movs	r3, #1
 800d316:	6163      	str	r3, [r4, #20]
 800d318:	b002      	add	sp, #8
 800d31a:	bd70      	pop	{r4, r5, r6, pc}
 800d31c:	ab01      	add	r3, sp, #4
 800d31e:	466a      	mov	r2, sp
 800d320:	f7ff ffc8 	bl	800d2b4 <__swhatbuf_r>
 800d324:	9900      	ldr	r1, [sp, #0]
 800d326:	4605      	mov	r5, r0
 800d328:	4630      	mov	r0, r6
 800d32a:	f7fe f82b 	bl	800b384 <_malloc_r>
 800d32e:	b948      	cbnz	r0, 800d344 <__smakebuf_r+0x44>
 800d330:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d334:	059a      	lsls	r2, r3, #22
 800d336:	d4ef      	bmi.n	800d318 <__smakebuf_r+0x18>
 800d338:	f023 0303 	bic.w	r3, r3, #3
 800d33c:	f043 0302 	orr.w	r3, r3, #2
 800d340:	81a3      	strh	r3, [r4, #12]
 800d342:	e7e3      	b.n	800d30c <__smakebuf_r+0xc>
 800d344:	4b0d      	ldr	r3, [pc, #52]	; (800d37c <__smakebuf_r+0x7c>)
 800d346:	62b3      	str	r3, [r6, #40]	; 0x28
 800d348:	89a3      	ldrh	r3, [r4, #12]
 800d34a:	6020      	str	r0, [r4, #0]
 800d34c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d350:	81a3      	strh	r3, [r4, #12]
 800d352:	9b00      	ldr	r3, [sp, #0]
 800d354:	6163      	str	r3, [r4, #20]
 800d356:	9b01      	ldr	r3, [sp, #4]
 800d358:	6120      	str	r0, [r4, #16]
 800d35a:	b15b      	cbz	r3, 800d374 <__smakebuf_r+0x74>
 800d35c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d360:	4630      	mov	r0, r6
 800d362:	f000 ff05 	bl	800e170 <_isatty_r>
 800d366:	b128      	cbz	r0, 800d374 <__smakebuf_r+0x74>
 800d368:	89a3      	ldrh	r3, [r4, #12]
 800d36a:	f023 0303 	bic.w	r3, r3, #3
 800d36e:	f043 0301 	orr.w	r3, r3, #1
 800d372:	81a3      	strh	r3, [r4, #12]
 800d374:	89a0      	ldrh	r0, [r4, #12]
 800d376:	4305      	orrs	r5, r0
 800d378:	81a5      	strh	r5, [r4, #12]
 800d37a:	e7cd      	b.n	800d318 <__smakebuf_r+0x18>
 800d37c:	0800b085 	.word	0x0800b085

0800d380 <__malloc_lock>:
 800d380:	4801      	ldr	r0, [pc, #4]	; (800d388 <__malloc_lock+0x8>)
 800d382:	f7f5 be03 	b.w	8002f8c <__retarget_lock_acquire_recursive>
 800d386:	bf00      	nop
 800d388:	20000608 	.word	0x20000608

0800d38c <__malloc_unlock>:
 800d38c:	4801      	ldr	r0, [pc, #4]	; (800d394 <__malloc_unlock+0x8>)
 800d38e:	f7f5 be11 	b.w	8002fb4 <__retarget_lock_release_recursive>
 800d392:	bf00      	nop
 800d394:	20000608 	.word	0x20000608

0800d398 <_Balloc>:
 800d398:	b570      	push	{r4, r5, r6, lr}
 800d39a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d39c:	4604      	mov	r4, r0
 800d39e:	460d      	mov	r5, r1
 800d3a0:	b976      	cbnz	r6, 800d3c0 <_Balloc+0x28>
 800d3a2:	2010      	movs	r0, #16
 800d3a4:	f7fd ff64 	bl	800b270 <malloc>
 800d3a8:	4602      	mov	r2, r0
 800d3aa:	6260      	str	r0, [r4, #36]	; 0x24
 800d3ac:	b920      	cbnz	r0, 800d3b8 <_Balloc+0x20>
 800d3ae:	4b18      	ldr	r3, [pc, #96]	; (800d410 <_Balloc+0x78>)
 800d3b0:	4818      	ldr	r0, [pc, #96]	; (800d414 <_Balloc+0x7c>)
 800d3b2:	2166      	movs	r1, #102	; 0x66
 800d3b4:	f000 fe9a 	bl	800e0ec <__assert_func>
 800d3b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d3bc:	6006      	str	r6, [r0, #0]
 800d3be:	60c6      	str	r6, [r0, #12]
 800d3c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d3c2:	68f3      	ldr	r3, [r6, #12]
 800d3c4:	b183      	cbz	r3, 800d3e8 <_Balloc+0x50>
 800d3c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d3c8:	68db      	ldr	r3, [r3, #12]
 800d3ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d3ce:	b9b8      	cbnz	r0, 800d400 <_Balloc+0x68>
 800d3d0:	2101      	movs	r1, #1
 800d3d2:	fa01 f605 	lsl.w	r6, r1, r5
 800d3d6:	1d72      	adds	r2, r6, #5
 800d3d8:	0092      	lsls	r2, r2, #2
 800d3da:	4620      	mov	r0, r4
 800d3dc:	f000 fb60 	bl	800daa0 <_calloc_r>
 800d3e0:	b160      	cbz	r0, 800d3fc <_Balloc+0x64>
 800d3e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d3e6:	e00e      	b.n	800d406 <_Balloc+0x6e>
 800d3e8:	2221      	movs	r2, #33	; 0x21
 800d3ea:	2104      	movs	r1, #4
 800d3ec:	4620      	mov	r0, r4
 800d3ee:	f000 fb57 	bl	800daa0 <_calloc_r>
 800d3f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d3f4:	60f0      	str	r0, [r6, #12]
 800d3f6:	68db      	ldr	r3, [r3, #12]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d1e4      	bne.n	800d3c6 <_Balloc+0x2e>
 800d3fc:	2000      	movs	r0, #0
 800d3fe:	bd70      	pop	{r4, r5, r6, pc}
 800d400:	6802      	ldr	r2, [r0, #0]
 800d402:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d406:	2300      	movs	r3, #0
 800d408:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d40c:	e7f7      	b.n	800d3fe <_Balloc+0x66>
 800d40e:	bf00      	nop
 800d410:	0800e5a2 	.word	0x0800e5a2
 800d414:	0800e625 	.word	0x0800e625

0800d418 <_Bfree>:
 800d418:	b570      	push	{r4, r5, r6, lr}
 800d41a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d41c:	4605      	mov	r5, r0
 800d41e:	460c      	mov	r4, r1
 800d420:	b976      	cbnz	r6, 800d440 <_Bfree+0x28>
 800d422:	2010      	movs	r0, #16
 800d424:	f7fd ff24 	bl	800b270 <malloc>
 800d428:	4602      	mov	r2, r0
 800d42a:	6268      	str	r0, [r5, #36]	; 0x24
 800d42c:	b920      	cbnz	r0, 800d438 <_Bfree+0x20>
 800d42e:	4b09      	ldr	r3, [pc, #36]	; (800d454 <_Bfree+0x3c>)
 800d430:	4809      	ldr	r0, [pc, #36]	; (800d458 <_Bfree+0x40>)
 800d432:	218a      	movs	r1, #138	; 0x8a
 800d434:	f000 fe5a 	bl	800e0ec <__assert_func>
 800d438:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d43c:	6006      	str	r6, [r0, #0]
 800d43e:	60c6      	str	r6, [r0, #12]
 800d440:	b13c      	cbz	r4, 800d452 <_Bfree+0x3a>
 800d442:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d444:	6862      	ldr	r2, [r4, #4]
 800d446:	68db      	ldr	r3, [r3, #12]
 800d448:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d44c:	6021      	str	r1, [r4, #0]
 800d44e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d452:	bd70      	pop	{r4, r5, r6, pc}
 800d454:	0800e5a2 	.word	0x0800e5a2
 800d458:	0800e625 	.word	0x0800e625

0800d45c <__multadd>:
 800d45c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d460:	690d      	ldr	r5, [r1, #16]
 800d462:	4607      	mov	r7, r0
 800d464:	460c      	mov	r4, r1
 800d466:	461e      	mov	r6, r3
 800d468:	f101 0c14 	add.w	ip, r1, #20
 800d46c:	2000      	movs	r0, #0
 800d46e:	f8dc 3000 	ldr.w	r3, [ip]
 800d472:	b299      	uxth	r1, r3
 800d474:	fb02 6101 	mla	r1, r2, r1, r6
 800d478:	0c1e      	lsrs	r6, r3, #16
 800d47a:	0c0b      	lsrs	r3, r1, #16
 800d47c:	fb02 3306 	mla	r3, r2, r6, r3
 800d480:	b289      	uxth	r1, r1
 800d482:	3001      	adds	r0, #1
 800d484:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d488:	4285      	cmp	r5, r0
 800d48a:	f84c 1b04 	str.w	r1, [ip], #4
 800d48e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d492:	dcec      	bgt.n	800d46e <__multadd+0x12>
 800d494:	b30e      	cbz	r6, 800d4da <__multadd+0x7e>
 800d496:	68a3      	ldr	r3, [r4, #8]
 800d498:	42ab      	cmp	r3, r5
 800d49a:	dc19      	bgt.n	800d4d0 <__multadd+0x74>
 800d49c:	6861      	ldr	r1, [r4, #4]
 800d49e:	4638      	mov	r0, r7
 800d4a0:	3101      	adds	r1, #1
 800d4a2:	f7ff ff79 	bl	800d398 <_Balloc>
 800d4a6:	4680      	mov	r8, r0
 800d4a8:	b928      	cbnz	r0, 800d4b6 <__multadd+0x5a>
 800d4aa:	4602      	mov	r2, r0
 800d4ac:	4b0c      	ldr	r3, [pc, #48]	; (800d4e0 <__multadd+0x84>)
 800d4ae:	480d      	ldr	r0, [pc, #52]	; (800d4e4 <__multadd+0x88>)
 800d4b0:	21b5      	movs	r1, #181	; 0xb5
 800d4b2:	f000 fe1b 	bl	800e0ec <__assert_func>
 800d4b6:	6922      	ldr	r2, [r4, #16]
 800d4b8:	3202      	adds	r2, #2
 800d4ba:	f104 010c 	add.w	r1, r4, #12
 800d4be:	0092      	lsls	r2, r2, #2
 800d4c0:	300c      	adds	r0, #12
 800d4c2:	f7fd fedd 	bl	800b280 <memcpy>
 800d4c6:	4621      	mov	r1, r4
 800d4c8:	4638      	mov	r0, r7
 800d4ca:	f7ff ffa5 	bl	800d418 <_Bfree>
 800d4ce:	4644      	mov	r4, r8
 800d4d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d4d4:	3501      	adds	r5, #1
 800d4d6:	615e      	str	r6, [r3, #20]
 800d4d8:	6125      	str	r5, [r4, #16]
 800d4da:	4620      	mov	r0, r4
 800d4dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4e0:	0800e614 	.word	0x0800e614
 800d4e4:	0800e625 	.word	0x0800e625

0800d4e8 <__hi0bits>:
 800d4e8:	0c03      	lsrs	r3, r0, #16
 800d4ea:	041b      	lsls	r3, r3, #16
 800d4ec:	b9d3      	cbnz	r3, 800d524 <__hi0bits+0x3c>
 800d4ee:	0400      	lsls	r0, r0, #16
 800d4f0:	2310      	movs	r3, #16
 800d4f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d4f6:	bf04      	itt	eq
 800d4f8:	0200      	lsleq	r0, r0, #8
 800d4fa:	3308      	addeq	r3, #8
 800d4fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d500:	bf04      	itt	eq
 800d502:	0100      	lsleq	r0, r0, #4
 800d504:	3304      	addeq	r3, #4
 800d506:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d50a:	bf04      	itt	eq
 800d50c:	0080      	lsleq	r0, r0, #2
 800d50e:	3302      	addeq	r3, #2
 800d510:	2800      	cmp	r0, #0
 800d512:	db05      	blt.n	800d520 <__hi0bits+0x38>
 800d514:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d518:	f103 0301 	add.w	r3, r3, #1
 800d51c:	bf08      	it	eq
 800d51e:	2320      	moveq	r3, #32
 800d520:	4618      	mov	r0, r3
 800d522:	4770      	bx	lr
 800d524:	2300      	movs	r3, #0
 800d526:	e7e4      	b.n	800d4f2 <__hi0bits+0xa>

0800d528 <__lo0bits>:
 800d528:	6803      	ldr	r3, [r0, #0]
 800d52a:	f013 0207 	ands.w	r2, r3, #7
 800d52e:	4601      	mov	r1, r0
 800d530:	d00b      	beq.n	800d54a <__lo0bits+0x22>
 800d532:	07da      	lsls	r2, r3, #31
 800d534:	d423      	bmi.n	800d57e <__lo0bits+0x56>
 800d536:	0798      	lsls	r0, r3, #30
 800d538:	bf49      	itett	mi
 800d53a:	085b      	lsrmi	r3, r3, #1
 800d53c:	089b      	lsrpl	r3, r3, #2
 800d53e:	2001      	movmi	r0, #1
 800d540:	600b      	strmi	r3, [r1, #0]
 800d542:	bf5c      	itt	pl
 800d544:	600b      	strpl	r3, [r1, #0]
 800d546:	2002      	movpl	r0, #2
 800d548:	4770      	bx	lr
 800d54a:	b298      	uxth	r0, r3
 800d54c:	b9a8      	cbnz	r0, 800d57a <__lo0bits+0x52>
 800d54e:	0c1b      	lsrs	r3, r3, #16
 800d550:	2010      	movs	r0, #16
 800d552:	b2da      	uxtb	r2, r3
 800d554:	b90a      	cbnz	r2, 800d55a <__lo0bits+0x32>
 800d556:	3008      	adds	r0, #8
 800d558:	0a1b      	lsrs	r3, r3, #8
 800d55a:	071a      	lsls	r2, r3, #28
 800d55c:	bf04      	itt	eq
 800d55e:	091b      	lsreq	r3, r3, #4
 800d560:	3004      	addeq	r0, #4
 800d562:	079a      	lsls	r2, r3, #30
 800d564:	bf04      	itt	eq
 800d566:	089b      	lsreq	r3, r3, #2
 800d568:	3002      	addeq	r0, #2
 800d56a:	07da      	lsls	r2, r3, #31
 800d56c:	d403      	bmi.n	800d576 <__lo0bits+0x4e>
 800d56e:	085b      	lsrs	r3, r3, #1
 800d570:	f100 0001 	add.w	r0, r0, #1
 800d574:	d005      	beq.n	800d582 <__lo0bits+0x5a>
 800d576:	600b      	str	r3, [r1, #0]
 800d578:	4770      	bx	lr
 800d57a:	4610      	mov	r0, r2
 800d57c:	e7e9      	b.n	800d552 <__lo0bits+0x2a>
 800d57e:	2000      	movs	r0, #0
 800d580:	4770      	bx	lr
 800d582:	2020      	movs	r0, #32
 800d584:	4770      	bx	lr
	...

0800d588 <__i2b>:
 800d588:	b510      	push	{r4, lr}
 800d58a:	460c      	mov	r4, r1
 800d58c:	2101      	movs	r1, #1
 800d58e:	f7ff ff03 	bl	800d398 <_Balloc>
 800d592:	4602      	mov	r2, r0
 800d594:	b928      	cbnz	r0, 800d5a2 <__i2b+0x1a>
 800d596:	4b05      	ldr	r3, [pc, #20]	; (800d5ac <__i2b+0x24>)
 800d598:	4805      	ldr	r0, [pc, #20]	; (800d5b0 <__i2b+0x28>)
 800d59a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d59e:	f000 fda5 	bl	800e0ec <__assert_func>
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	6144      	str	r4, [r0, #20]
 800d5a6:	6103      	str	r3, [r0, #16]
 800d5a8:	bd10      	pop	{r4, pc}
 800d5aa:	bf00      	nop
 800d5ac:	0800e614 	.word	0x0800e614
 800d5b0:	0800e625 	.word	0x0800e625

0800d5b4 <__multiply>:
 800d5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5b8:	4691      	mov	r9, r2
 800d5ba:	690a      	ldr	r2, [r1, #16]
 800d5bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d5c0:	429a      	cmp	r2, r3
 800d5c2:	bfb8      	it	lt
 800d5c4:	460b      	movlt	r3, r1
 800d5c6:	460c      	mov	r4, r1
 800d5c8:	bfbc      	itt	lt
 800d5ca:	464c      	movlt	r4, r9
 800d5cc:	4699      	movlt	r9, r3
 800d5ce:	6927      	ldr	r7, [r4, #16]
 800d5d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d5d4:	68a3      	ldr	r3, [r4, #8]
 800d5d6:	6861      	ldr	r1, [r4, #4]
 800d5d8:	eb07 060a 	add.w	r6, r7, sl
 800d5dc:	42b3      	cmp	r3, r6
 800d5de:	b085      	sub	sp, #20
 800d5e0:	bfb8      	it	lt
 800d5e2:	3101      	addlt	r1, #1
 800d5e4:	f7ff fed8 	bl	800d398 <_Balloc>
 800d5e8:	b930      	cbnz	r0, 800d5f8 <__multiply+0x44>
 800d5ea:	4602      	mov	r2, r0
 800d5ec:	4b44      	ldr	r3, [pc, #272]	; (800d700 <__multiply+0x14c>)
 800d5ee:	4845      	ldr	r0, [pc, #276]	; (800d704 <__multiply+0x150>)
 800d5f0:	f240 115d 	movw	r1, #349	; 0x15d
 800d5f4:	f000 fd7a 	bl	800e0ec <__assert_func>
 800d5f8:	f100 0514 	add.w	r5, r0, #20
 800d5fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d600:	462b      	mov	r3, r5
 800d602:	2200      	movs	r2, #0
 800d604:	4543      	cmp	r3, r8
 800d606:	d321      	bcc.n	800d64c <__multiply+0x98>
 800d608:	f104 0314 	add.w	r3, r4, #20
 800d60c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d610:	f109 0314 	add.w	r3, r9, #20
 800d614:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d618:	9202      	str	r2, [sp, #8]
 800d61a:	1b3a      	subs	r2, r7, r4
 800d61c:	3a15      	subs	r2, #21
 800d61e:	f022 0203 	bic.w	r2, r2, #3
 800d622:	3204      	adds	r2, #4
 800d624:	f104 0115 	add.w	r1, r4, #21
 800d628:	428f      	cmp	r7, r1
 800d62a:	bf38      	it	cc
 800d62c:	2204      	movcc	r2, #4
 800d62e:	9201      	str	r2, [sp, #4]
 800d630:	9a02      	ldr	r2, [sp, #8]
 800d632:	9303      	str	r3, [sp, #12]
 800d634:	429a      	cmp	r2, r3
 800d636:	d80c      	bhi.n	800d652 <__multiply+0x9e>
 800d638:	2e00      	cmp	r6, #0
 800d63a:	dd03      	ble.n	800d644 <__multiply+0x90>
 800d63c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d640:	2b00      	cmp	r3, #0
 800d642:	d05a      	beq.n	800d6fa <__multiply+0x146>
 800d644:	6106      	str	r6, [r0, #16]
 800d646:	b005      	add	sp, #20
 800d648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d64c:	f843 2b04 	str.w	r2, [r3], #4
 800d650:	e7d8      	b.n	800d604 <__multiply+0x50>
 800d652:	f8b3 a000 	ldrh.w	sl, [r3]
 800d656:	f1ba 0f00 	cmp.w	sl, #0
 800d65a:	d024      	beq.n	800d6a6 <__multiply+0xf2>
 800d65c:	f104 0e14 	add.w	lr, r4, #20
 800d660:	46a9      	mov	r9, r5
 800d662:	f04f 0c00 	mov.w	ip, #0
 800d666:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d66a:	f8d9 1000 	ldr.w	r1, [r9]
 800d66e:	fa1f fb82 	uxth.w	fp, r2
 800d672:	b289      	uxth	r1, r1
 800d674:	fb0a 110b 	mla	r1, sl, fp, r1
 800d678:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d67c:	f8d9 2000 	ldr.w	r2, [r9]
 800d680:	4461      	add	r1, ip
 800d682:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d686:	fb0a c20b 	mla	r2, sl, fp, ip
 800d68a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d68e:	b289      	uxth	r1, r1
 800d690:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d694:	4577      	cmp	r7, lr
 800d696:	f849 1b04 	str.w	r1, [r9], #4
 800d69a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d69e:	d8e2      	bhi.n	800d666 <__multiply+0xb2>
 800d6a0:	9a01      	ldr	r2, [sp, #4]
 800d6a2:	f845 c002 	str.w	ip, [r5, r2]
 800d6a6:	9a03      	ldr	r2, [sp, #12]
 800d6a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d6ac:	3304      	adds	r3, #4
 800d6ae:	f1b9 0f00 	cmp.w	r9, #0
 800d6b2:	d020      	beq.n	800d6f6 <__multiply+0x142>
 800d6b4:	6829      	ldr	r1, [r5, #0]
 800d6b6:	f104 0c14 	add.w	ip, r4, #20
 800d6ba:	46ae      	mov	lr, r5
 800d6bc:	f04f 0a00 	mov.w	sl, #0
 800d6c0:	f8bc b000 	ldrh.w	fp, [ip]
 800d6c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d6c8:	fb09 220b 	mla	r2, r9, fp, r2
 800d6cc:	4492      	add	sl, r2
 800d6ce:	b289      	uxth	r1, r1
 800d6d0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d6d4:	f84e 1b04 	str.w	r1, [lr], #4
 800d6d8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d6dc:	f8be 1000 	ldrh.w	r1, [lr]
 800d6e0:	0c12      	lsrs	r2, r2, #16
 800d6e2:	fb09 1102 	mla	r1, r9, r2, r1
 800d6e6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d6ea:	4567      	cmp	r7, ip
 800d6ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d6f0:	d8e6      	bhi.n	800d6c0 <__multiply+0x10c>
 800d6f2:	9a01      	ldr	r2, [sp, #4]
 800d6f4:	50a9      	str	r1, [r5, r2]
 800d6f6:	3504      	adds	r5, #4
 800d6f8:	e79a      	b.n	800d630 <__multiply+0x7c>
 800d6fa:	3e01      	subs	r6, #1
 800d6fc:	e79c      	b.n	800d638 <__multiply+0x84>
 800d6fe:	bf00      	nop
 800d700:	0800e614 	.word	0x0800e614
 800d704:	0800e625 	.word	0x0800e625

0800d708 <__pow5mult>:
 800d708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d70c:	4615      	mov	r5, r2
 800d70e:	f012 0203 	ands.w	r2, r2, #3
 800d712:	4606      	mov	r6, r0
 800d714:	460f      	mov	r7, r1
 800d716:	d007      	beq.n	800d728 <__pow5mult+0x20>
 800d718:	4c25      	ldr	r4, [pc, #148]	; (800d7b0 <__pow5mult+0xa8>)
 800d71a:	3a01      	subs	r2, #1
 800d71c:	2300      	movs	r3, #0
 800d71e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d722:	f7ff fe9b 	bl	800d45c <__multadd>
 800d726:	4607      	mov	r7, r0
 800d728:	10ad      	asrs	r5, r5, #2
 800d72a:	d03d      	beq.n	800d7a8 <__pow5mult+0xa0>
 800d72c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d72e:	b97c      	cbnz	r4, 800d750 <__pow5mult+0x48>
 800d730:	2010      	movs	r0, #16
 800d732:	f7fd fd9d 	bl	800b270 <malloc>
 800d736:	4602      	mov	r2, r0
 800d738:	6270      	str	r0, [r6, #36]	; 0x24
 800d73a:	b928      	cbnz	r0, 800d748 <__pow5mult+0x40>
 800d73c:	4b1d      	ldr	r3, [pc, #116]	; (800d7b4 <__pow5mult+0xac>)
 800d73e:	481e      	ldr	r0, [pc, #120]	; (800d7b8 <__pow5mult+0xb0>)
 800d740:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d744:	f000 fcd2 	bl	800e0ec <__assert_func>
 800d748:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d74c:	6004      	str	r4, [r0, #0]
 800d74e:	60c4      	str	r4, [r0, #12]
 800d750:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d754:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d758:	b94c      	cbnz	r4, 800d76e <__pow5mult+0x66>
 800d75a:	f240 2171 	movw	r1, #625	; 0x271
 800d75e:	4630      	mov	r0, r6
 800d760:	f7ff ff12 	bl	800d588 <__i2b>
 800d764:	2300      	movs	r3, #0
 800d766:	f8c8 0008 	str.w	r0, [r8, #8]
 800d76a:	4604      	mov	r4, r0
 800d76c:	6003      	str	r3, [r0, #0]
 800d76e:	f04f 0900 	mov.w	r9, #0
 800d772:	07eb      	lsls	r3, r5, #31
 800d774:	d50a      	bpl.n	800d78c <__pow5mult+0x84>
 800d776:	4639      	mov	r1, r7
 800d778:	4622      	mov	r2, r4
 800d77a:	4630      	mov	r0, r6
 800d77c:	f7ff ff1a 	bl	800d5b4 <__multiply>
 800d780:	4639      	mov	r1, r7
 800d782:	4680      	mov	r8, r0
 800d784:	4630      	mov	r0, r6
 800d786:	f7ff fe47 	bl	800d418 <_Bfree>
 800d78a:	4647      	mov	r7, r8
 800d78c:	106d      	asrs	r5, r5, #1
 800d78e:	d00b      	beq.n	800d7a8 <__pow5mult+0xa0>
 800d790:	6820      	ldr	r0, [r4, #0]
 800d792:	b938      	cbnz	r0, 800d7a4 <__pow5mult+0x9c>
 800d794:	4622      	mov	r2, r4
 800d796:	4621      	mov	r1, r4
 800d798:	4630      	mov	r0, r6
 800d79a:	f7ff ff0b 	bl	800d5b4 <__multiply>
 800d79e:	6020      	str	r0, [r4, #0]
 800d7a0:	f8c0 9000 	str.w	r9, [r0]
 800d7a4:	4604      	mov	r4, r0
 800d7a6:	e7e4      	b.n	800d772 <__pow5mult+0x6a>
 800d7a8:	4638      	mov	r0, r7
 800d7aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7ae:	bf00      	nop
 800d7b0:	0800e778 	.word	0x0800e778
 800d7b4:	0800e5a2 	.word	0x0800e5a2
 800d7b8:	0800e625 	.word	0x0800e625

0800d7bc <__lshift>:
 800d7bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7c0:	460c      	mov	r4, r1
 800d7c2:	6849      	ldr	r1, [r1, #4]
 800d7c4:	6923      	ldr	r3, [r4, #16]
 800d7c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d7ca:	68a3      	ldr	r3, [r4, #8]
 800d7cc:	4607      	mov	r7, r0
 800d7ce:	4691      	mov	r9, r2
 800d7d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d7d4:	f108 0601 	add.w	r6, r8, #1
 800d7d8:	42b3      	cmp	r3, r6
 800d7da:	db0b      	blt.n	800d7f4 <__lshift+0x38>
 800d7dc:	4638      	mov	r0, r7
 800d7de:	f7ff fddb 	bl	800d398 <_Balloc>
 800d7e2:	4605      	mov	r5, r0
 800d7e4:	b948      	cbnz	r0, 800d7fa <__lshift+0x3e>
 800d7e6:	4602      	mov	r2, r0
 800d7e8:	4b2a      	ldr	r3, [pc, #168]	; (800d894 <__lshift+0xd8>)
 800d7ea:	482b      	ldr	r0, [pc, #172]	; (800d898 <__lshift+0xdc>)
 800d7ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d7f0:	f000 fc7c 	bl	800e0ec <__assert_func>
 800d7f4:	3101      	adds	r1, #1
 800d7f6:	005b      	lsls	r3, r3, #1
 800d7f8:	e7ee      	b.n	800d7d8 <__lshift+0x1c>
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	f100 0114 	add.w	r1, r0, #20
 800d800:	f100 0210 	add.w	r2, r0, #16
 800d804:	4618      	mov	r0, r3
 800d806:	4553      	cmp	r3, sl
 800d808:	db37      	blt.n	800d87a <__lshift+0xbe>
 800d80a:	6920      	ldr	r0, [r4, #16]
 800d80c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d810:	f104 0314 	add.w	r3, r4, #20
 800d814:	f019 091f 	ands.w	r9, r9, #31
 800d818:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d81c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d820:	d02f      	beq.n	800d882 <__lshift+0xc6>
 800d822:	f1c9 0e20 	rsb	lr, r9, #32
 800d826:	468a      	mov	sl, r1
 800d828:	f04f 0c00 	mov.w	ip, #0
 800d82c:	681a      	ldr	r2, [r3, #0]
 800d82e:	fa02 f209 	lsl.w	r2, r2, r9
 800d832:	ea42 020c 	orr.w	r2, r2, ip
 800d836:	f84a 2b04 	str.w	r2, [sl], #4
 800d83a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d83e:	4298      	cmp	r0, r3
 800d840:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d844:	d8f2      	bhi.n	800d82c <__lshift+0x70>
 800d846:	1b03      	subs	r3, r0, r4
 800d848:	3b15      	subs	r3, #21
 800d84a:	f023 0303 	bic.w	r3, r3, #3
 800d84e:	3304      	adds	r3, #4
 800d850:	f104 0215 	add.w	r2, r4, #21
 800d854:	4290      	cmp	r0, r2
 800d856:	bf38      	it	cc
 800d858:	2304      	movcc	r3, #4
 800d85a:	f841 c003 	str.w	ip, [r1, r3]
 800d85e:	f1bc 0f00 	cmp.w	ip, #0
 800d862:	d001      	beq.n	800d868 <__lshift+0xac>
 800d864:	f108 0602 	add.w	r6, r8, #2
 800d868:	3e01      	subs	r6, #1
 800d86a:	4638      	mov	r0, r7
 800d86c:	612e      	str	r6, [r5, #16]
 800d86e:	4621      	mov	r1, r4
 800d870:	f7ff fdd2 	bl	800d418 <_Bfree>
 800d874:	4628      	mov	r0, r5
 800d876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d87a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d87e:	3301      	adds	r3, #1
 800d880:	e7c1      	b.n	800d806 <__lshift+0x4a>
 800d882:	3904      	subs	r1, #4
 800d884:	f853 2b04 	ldr.w	r2, [r3], #4
 800d888:	f841 2f04 	str.w	r2, [r1, #4]!
 800d88c:	4298      	cmp	r0, r3
 800d88e:	d8f9      	bhi.n	800d884 <__lshift+0xc8>
 800d890:	e7ea      	b.n	800d868 <__lshift+0xac>
 800d892:	bf00      	nop
 800d894:	0800e614 	.word	0x0800e614
 800d898:	0800e625 	.word	0x0800e625

0800d89c <__mcmp>:
 800d89c:	b530      	push	{r4, r5, lr}
 800d89e:	6902      	ldr	r2, [r0, #16]
 800d8a0:	690c      	ldr	r4, [r1, #16]
 800d8a2:	1b12      	subs	r2, r2, r4
 800d8a4:	d10e      	bne.n	800d8c4 <__mcmp+0x28>
 800d8a6:	f100 0314 	add.w	r3, r0, #20
 800d8aa:	3114      	adds	r1, #20
 800d8ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d8b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d8b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d8b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d8bc:	42a5      	cmp	r5, r4
 800d8be:	d003      	beq.n	800d8c8 <__mcmp+0x2c>
 800d8c0:	d305      	bcc.n	800d8ce <__mcmp+0x32>
 800d8c2:	2201      	movs	r2, #1
 800d8c4:	4610      	mov	r0, r2
 800d8c6:	bd30      	pop	{r4, r5, pc}
 800d8c8:	4283      	cmp	r3, r0
 800d8ca:	d3f3      	bcc.n	800d8b4 <__mcmp+0x18>
 800d8cc:	e7fa      	b.n	800d8c4 <__mcmp+0x28>
 800d8ce:	f04f 32ff 	mov.w	r2, #4294967295
 800d8d2:	e7f7      	b.n	800d8c4 <__mcmp+0x28>

0800d8d4 <__mdiff>:
 800d8d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8d8:	460c      	mov	r4, r1
 800d8da:	4606      	mov	r6, r0
 800d8dc:	4611      	mov	r1, r2
 800d8de:	4620      	mov	r0, r4
 800d8e0:	4690      	mov	r8, r2
 800d8e2:	f7ff ffdb 	bl	800d89c <__mcmp>
 800d8e6:	1e05      	subs	r5, r0, #0
 800d8e8:	d110      	bne.n	800d90c <__mdiff+0x38>
 800d8ea:	4629      	mov	r1, r5
 800d8ec:	4630      	mov	r0, r6
 800d8ee:	f7ff fd53 	bl	800d398 <_Balloc>
 800d8f2:	b930      	cbnz	r0, 800d902 <__mdiff+0x2e>
 800d8f4:	4b3a      	ldr	r3, [pc, #232]	; (800d9e0 <__mdiff+0x10c>)
 800d8f6:	4602      	mov	r2, r0
 800d8f8:	f240 2132 	movw	r1, #562	; 0x232
 800d8fc:	4839      	ldr	r0, [pc, #228]	; (800d9e4 <__mdiff+0x110>)
 800d8fe:	f000 fbf5 	bl	800e0ec <__assert_func>
 800d902:	2301      	movs	r3, #1
 800d904:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d908:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d90c:	bfa4      	itt	ge
 800d90e:	4643      	movge	r3, r8
 800d910:	46a0      	movge	r8, r4
 800d912:	4630      	mov	r0, r6
 800d914:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d918:	bfa6      	itte	ge
 800d91a:	461c      	movge	r4, r3
 800d91c:	2500      	movge	r5, #0
 800d91e:	2501      	movlt	r5, #1
 800d920:	f7ff fd3a 	bl	800d398 <_Balloc>
 800d924:	b920      	cbnz	r0, 800d930 <__mdiff+0x5c>
 800d926:	4b2e      	ldr	r3, [pc, #184]	; (800d9e0 <__mdiff+0x10c>)
 800d928:	4602      	mov	r2, r0
 800d92a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d92e:	e7e5      	b.n	800d8fc <__mdiff+0x28>
 800d930:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d934:	6926      	ldr	r6, [r4, #16]
 800d936:	60c5      	str	r5, [r0, #12]
 800d938:	f104 0914 	add.w	r9, r4, #20
 800d93c:	f108 0514 	add.w	r5, r8, #20
 800d940:	f100 0e14 	add.w	lr, r0, #20
 800d944:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d948:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d94c:	f108 0210 	add.w	r2, r8, #16
 800d950:	46f2      	mov	sl, lr
 800d952:	2100      	movs	r1, #0
 800d954:	f859 3b04 	ldr.w	r3, [r9], #4
 800d958:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d95c:	fa1f f883 	uxth.w	r8, r3
 800d960:	fa11 f18b 	uxtah	r1, r1, fp
 800d964:	0c1b      	lsrs	r3, r3, #16
 800d966:	eba1 0808 	sub.w	r8, r1, r8
 800d96a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d96e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d972:	fa1f f888 	uxth.w	r8, r8
 800d976:	1419      	asrs	r1, r3, #16
 800d978:	454e      	cmp	r6, r9
 800d97a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d97e:	f84a 3b04 	str.w	r3, [sl], #4
 800d982:	d8e7      	bhi.n	800d954 <__mdiff+0x80>
 800d984:	1b33      	subs	r3, r6, r4
 800d986:	3b15      	subs	r3, #21
 800d988:	f023 0303 	bic.w	r3, r3, #3
 800d98c:	3304      	adds	r3, #4
 800d98e:	3415      	adds	r4, #21
 800d990:	42a6      	cmp	r6, r4
 800d992:	bf38      	it	cc
 800d994:	2304      	movcc	r3, #4
 800d996:	441d      	add	r5, r3
 800d998:	4473      	add	r3, lr
 800d99a:	469e      	mov	lr, r3
 800d99c:	462e      	mov	r6, r5
 800d99e:	4566      	cmp	r6, ip
 800d9a0:	d30e      	bcc.n	800d9c0 <__mdiff+0xec>
 800d9a2:	f10c 0203 	add.w	r2, ip, #3
 800d9a6:	1b52      	subs	r2, r2, r5
 800d9a8:	f022 0203 	bic.w	r2, r2, #3
 800d9ac:	3d03      	subs	r5, #3
 800d9ae:	45ac      	cmp	ip, r5
 800d9b0:	bf38      	it	cc
 800d9b2:	2200      	movcc	r2, #0
 800d9b4:	441a      	add	r2, r3
 800d9b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d9ba:	b17b      	cbz	r3, 800d9dc <__mdiff+0x108>
 800d9bc:	6107      	str	r7, [r0, #16]
 800d9be:	e7a3      	b.n	800d908 <__mdiff+0x34>
 800d9c0:	f856 8b04 	ldr.w	r8, [r6], #4
 800d9c4:	fa11 f288 	uxtah	r2, r1, r8
 800d9c8:	1414      	asrs	r4, r2, #16
 800d9ca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d9ce:	b292      	uxth	r2, r2
 800d9d0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d9d4:	f84e 2b04 	str.w	r2, [lr], #4
 800d9d8:	1421      	asrs	r1, r4, #16
 800d9da:	e7e0      	b.n	800d99e <__mdiff+0xca>
 800d9dc:	3f01      	subs	r7, #1
 800d9de:	e7ea      	b.n	800d9b6 <__mdiff+0xe2>
 800d9e0:	0800e614 	.word	0x0800e614
 800d9e4:	0800e625 	.word	0x0800e625

0800d9e8 <__d2b>:
 800d9e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d9ec:	4689      	mov	r9, r1
 800d9ee:	2101      	movs	r1, #1
 800d9f0:	ec57 6b10 	vmov	r6, r7, d0
 800d9f4:	4690      	mov	r8, r2
 800d9f6:	f7ff fccf 	bl	800d398 <_Balloc>
 800d9fa:	4604      	mov	r4, r0
 800d9fc:	b930      	cbnz	r0, 800da0c <__d2b+0x24>
 800d9fe:	4602      	mov	r2, r0
 800da00:	4b25      	ldr	r3, [pc, #148]	; (800da98 <__d2b+0xb0>)
 800da02:	4826      	ldr	r0, [pc, #152]	; (800da9c <__d2b+0xb4>)
 800da04:	f240 310a 	movw	r1, #778	; 0x30a
 800da08:	f000 fb70 	bl	800e0ec <__assert_func>
 800da0c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800da10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800da14:	bb35      	cbnz	r5, 800da64 <__d2b+0x7c>
 800da16:	2e00      	cmp	r6, #0
 800da18:	9301      	str	r3, [sp, #4]
 800da1a:	d028      	beq.n	800da6e <__d2b+0x86>
 800da1c:	4668      	mov	r0, sp
 800da1e:	9600      	str	r6, [sp, #0]
 800da20:	f7ff fd82 	bl	800d528 <__lo0bits>
 800da24:	9900      	ldr	r1, [sp, #0]
 800da26:	b300      	cbz	r0, 800da6a <__d2b+0x82>
 800da28:	9a01      	ldr	r2, [sp, #4]
 800da2a:	f1c0 0320 	rsb	r3, r0, #32
 800da2e:	fa02 f303 	lsl.w	r3, r2, r3
 800da32:	430b      	orrs	r3, r1
 800da34:	40c2      	lsrs	r2, r0
 800da36:	6163      	str	r3, [r4, #20]
 800da38:	9201      	str	r2, [sp, #4]
 800da3a:	9b01      	ldr	r3, [sp, #4]
 800da3c:	61a3      	str	r3, [r4, #24]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	bf14      	ite	ne
 800da42:	2202      	movne	r2, #2
 800da44:	2201      	moveq	r2, #1
 800da46:	6122      	str	r2, [r4, #16]
 800da48:	b1d5      	cbz	r5, 800da80 <__d2b+0x98>
 800da4a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800da4e:	4405      	add	r5, r0
 800da50:	f8c9 5000 	str.w	r5, [r9]
 800da54:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800da58:	f8c8 0000 	str.w	r0, [r8]
 800da5c:	4620      	mov	r0, r4
 800da5e:	b003      	add	sp, #12
 800da60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800da68:	e7d5      	b.n	800da16 <__d2b+0x2e>
 800da6a:	6161      	str	r1, [r4, #20]
 800da6c:	e7e5      	b.n	800da3a <__d2b+0x52>
 800da6e:	a801      	add	r0, sp, #4
 800da70:	f7ff fd5a 	bl	800d528 <__lo0bits>
 800da74:	9b01      	ldr	r3, [sp, #4]
 800da76:	6163      	str	r3, [r4, #20]
 800da78:	2201      	movs	r2, #1
 800da7a:	6122      	str	r2, [r4, #16]
 800da7c:	3020      	adds	r0, #32
 800da7e:	e7e3      	b.n	800da48 <__d2b+0x60>
 800da80:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800da84:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800da88:	f8c9 0000 	str.w	r0, [r9]
 800da8c:	6918      	ldr	r0, [r3, #16]
 800da8e:	f7ff fd2b 	bl	800d4e8 <__hi0bits>
 800da92:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800da96:	e7df      	b.n	800da58 <__d2b+0x70>
 800da98:	0800e614 	.word	0x0800e614
 800da9c:	0800e625 	.word	0x0800e625

0800daa0 <_calloc_r>:
 800daa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800daa2:	fba1 2402 	umull	r2, r4, r1, r2
 800daa6:	b94c      	cbnz	r4, 800dabc <_calloc_r+0x1c>
 800daa8:	4611      	mov	r1, r2
 800daaa:	9201      	str	r2, [sp, #4]
 800daac:	f7fd fc6a 	bl	800b384 <_malloc_r>
 800dab0:	9a01      	ldr	r2, [sp, #4]
 800dab2:	4605      	mov	r5, r0
 800dab4:	b930      	cbnz	r0, 800dac4 <_calloc_r+0x24>
 800dab6:	4628      	mov	r0, r5
 800dab8:	b003      	add	sp, #12
 800daba:	bd30      	pop	{r4, r5, pc}
 800dabc:	220c      	movs	r2, #12
 800dabe:	6002      	str	r2, [r0, #0]
 800dac0:	2500      	movs	r5, #0
 800dac2:	e7f8      	b.n	800dab6 <_calloc_r+0x16>
 800dac4:	4621      	mov	r1, r4
 800dac6:	f7fd fbe9 	bl	800b29c <memset>
 800daca:	e7f4      	b.n	800dab6 <_calloc_r+0x16>

0800dacc <__ssputs_r>:
 800dacc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dad0:	688e      	ldr	r6, [r1, #8]
 800dad2:	429e      	cmp	r6, r3
 800dad4:	4682      	mov	sl, r0
 800dad6:	460c      	mov	r4, r1
 800dad8:	4690      	mov	r8, r2
 800dada:	461f      	mov	r7, r3
 800dadc:	d838      	bhi.n	800db50 <__ssputs_r+0x84>
 800dade:	898a      	ldrh	r2, [r1, #12]
 800dae0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dae4:	d032      	beq.n	800db4c <__ssputs_r+0x80>
 800dae6:	6825      	ldr	r5, [r4, #0]
 800dae8:	6909      	ldr	r1, [r1, #16]
 800daea:	eba5 0901 	sub.w	r9, r5, r1
 800daee:	6965      	ldr	r5, [r4, #20]
 800daf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800daf4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800daf8:	3301      	adds	r3, #1
 800dafa:	444b      	add	r3, r9
 800dafc:	106d      	asrs	r5, r5, #1
 800dafe:	429d      	cmp	r5, r3
 800db00:	bf38      	it	cc
 800db02:	461d      	movcc	r5, r3
 800db04:	0553      	lsls	r3, r2, #21
 800db06:	d531      	bpl.n	800db6c <__ssputs_r+0xa0>
 800db08:	4629      	mov	r1, r5
 800db0a:	f7fd fc3b 	bl	800b384 <_malloc_r>
 800db0e:	4606      	mov	r6, r0
 800db10:	b950      	cbnz	r0, 800db28 <__ssputs_r+0x5c>
 800db12:	230c      	movs	r3, #12
 800db14:	f8ca 3000 	str.w	r3, [sl]
 800db18:	89a3      	ldrh	r3, [r4, #12]
 800db1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db1e:	81a3      	strh	r3, [r4, #12]
 800db20:	f04f 30ff 	mov.w	r0, #4294967295
 800db24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db28:	6921      	ldr	r1, [r4, #16]
 800db2a:	464a      	mov	r2, r9
 800db2c:	f7fd fba8 	bl	800b280 <memcpy>
 800db30:	89a3      	ldrh	r3, [r4, #12]
 800db32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800db36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db3a:	81a3      	strh	r3, [r4, #12]
 800db3c:	6126      	str	r6, [r4, #16]
 800db3e:	6165      	str	r5, [r4, #20]
 800db40:	444e      	add	r6, r9
 800db42:	eba5 0509 	sub.w	r5, r5, r9
 800db46:	6026      	str	r6, [r4, #0]
 800db48:	60a5      	str	r5, [r4, #8]
 800db4a:	463e      	mov	r6, r7
 800db4c:	42be      	cmp	r6, r7
 800db4e:	d900      	bls.n	800db52 <__ssputs_r+0x86>
 800db50:	463e      	mov	r6, r7
 800db52:	6820      	ldr	r0, [r4, #0]
 800db54:	4632      	mov	r2, r6
 800db56:	4641      	mov	r1, r8
 800db58:	f000 fb2c 	bl	800e1b4 <memmove>
 800db5c:	68a3      	ldr	r3, [r4, #8]
 800db5e:	1b9b      	subs	r3, r3, r6
 800db60:	60a3      	str	r3, [r4, #8]
 800db62:	6823      	ldr	r3, [r4, #0]
 800db64:	4433      	add	r3, r6
 800db66:	6023      	str	r3, [r4, #0]
 800db68:	2000      	movs	r0, #0
 800db6a:	e7db      	b.n	800db24 <__ssputs_r+0x58>
 800db6c:	462a      	mov	r2, r5
 800db6e:	f000 fb3b 	bl	800e1e8 <_realloc_r>
 800db72:	4606      	mov	r6, r0
 800db74:	2800      	cmp	r0, #0
 800db76:	d1e1      	bne.n	800db3c <__ssputs_r+0x70>
 800db78:	6921      	ldr	r1, [r4, #16]
 800db7a:	4650      	mov	r0, sl
 800db7c:	f7fd fb96 	bl	800b2ac <_free_r>
 800db80:	e7c7      	b.n	800db12 <__ssputs_r+0x46>
	...

0800db84 <_svfiprintf_r>:
 800db84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db88:	4698      	mov	r8, r3
 800db8a:	898b      	ldrh	r3, [r1, #12]
 800db8c:	061b      	lsls	r3, r3, #24
 800db8e:	b09d      	sub	sp, #116	; 0x74
 800db90:	4607      	mov	r7, r0
 800db92:	460d      	mov	r5, r1
 800db94:	4614      	mov	r4, r2
 800db96:	d50e      	bpl.n	800dbb6 <_svfiprintf_r+0x32>
 800db98:	690b      	ldr	r3, [r1, #16]
 800db9a:	b963      	cbnz	r3, 800dbb6 <_svfiprintf_r+0x32>
 800db9c:	2140      	movs	r1, #64	; 0x40
 800db9e:	f7fd fbf1 	bl	800b384 <_malloc_r>
 800dba2:	6028      	str	r0, [r5, #0]
 800dba4:	6128      	str	r0, [r5, #16]
 800dba6:	b920      	cbnz	r0, 800dbb2 <_svfiprintf_r+0x2e>
 800dba8:	230c      	movs	r3, #12
 800dbaa:	603b      	str	r3, [r7, #0]
 800dbac:	f04f 30ff 	mov.w	r0, #4294967295
 800dbb0:	e0d1      	b.n	800dd56 <_svfiprintf_r+0x1d2>
 800dbb2:	2340      	movs	r3, #64	; 0x40
 800dbb4:	616b      	str	r3, [r5, #20]
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	9309      	str	r3, [sp, #36]	; 0x24
 800dbba:	2320      	movs	r3, #32
 800dbbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dbc0:	f8cd 800c 	str.w	r8, [sp, #12]
 800dbc4:	2330      	movs	r3, #48	; 0x30
 800dbc6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dd70 <_svfiprintf_r+0x1ec>
 800dbca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dbce:	f04f 0901 	mov.w	r9, #1
 800dbd2:	4623      	mov	r3, r4
 800dbd4:	469a      	mov	sl, r3
 800dbd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbda:	b10a      	cbz	r2, 800dbe0 <_svfiprintf_r+0x5c>
 800dbdc:	2a25      	cmp	r2, #37	; 0x25
 800dbde:	d1f9      	bne.n	800dbd4 <_svfiprintf_r+0x50>
 800dbe0:	ebba 0b04 	subs.w	fp, sl, r4
 800dbe4:	d00b      	beq.n	800dbfe <_svfiprintf_r+0x7a>
 800dbe6:	465b      	mov	r3, fp
 800dbe8:	4622      	mov	r2, r4
 800dbea:	4629      	mov	r1, r5
 800dbec:	4638      	mov	r0, r7
 800dbee:	f7ff ff6d 	bl	800dacc <__ssputs_r>
 800dbf2:	3001      	adds	r0, #1
 800dbf4:	f000 80aa 	beq.w	800dd4c <_svfiprintf_r+0x1c8>
 800dbf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dbfa:	445a      	add	r2, fp
 800dbfc:	9209      	str	r2, [sp, #36]	; 0x24
 800dbfe:	f89a 3000 	ldrb.w	r3, [sl]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	f000 80a2 	beq.w	800dd4c <_svfiprintf_r+0x1c8>
 800dc08:	2300      	movs	r3, #0
 800dc0a:	f04f 32ff 	mov.w	r2, #4294967295
 800dc0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc12:	f10a 0a01 	add.w	sl, sl, #1
 800dc16:	9304      	str	r3, [sp, #16]
 800dc18:	9307      	str	r3, [sp, #28]
 800dc1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc1e:	931a      	str	r3, [sp, #104]	; 0x68
 800dc20:	4654      	mov	r4, sl
 800dc22:	2205      	movs	r2, #5
 800dc24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc28:	4851      	ldr	r0, [pc, #324]	; (800dd70 <_svfiprintf_r+0x1ec>)
 800dc2a:	f7f2 fad9 	bl	80001e0 <memchr>
 800dc2e:	9a04      	ldr	r2, [sp, #16]
 800dc30:	b9d8      	cbnz	r0, 800dc6a <_svfiprintf_r+0xe6>
 800dc32:	06d0      	lsls	r0, r2, #27
 800dc34:	bf44      	itt	mi
 800dc36:	2320      	movmi	r3, #32
 800dc38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc3c:	0711      	lsls	r1, r2, #28
 800dc3e:	bf44      	itt	mi
 800dc40:	232b      	movmi	r3, #43	; 0x2b
 800dc42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc46:	f89a 3000 	ldrb.w	r3, [sl]
 800dc4a:	2b2a      	cmp	r3, #42	; 0x2a
 800dc4c:	d015      	beq.n	800dc7a <_svfiprintf_r+0xf6>
 800dc4e:	9a07      	ldr	r2, [sp, #28]
 800dc50:	4654      	mov	r4, sl
 800dc52:	2000      	movs	r0, #0
 800dc54:	f04f 0c0a 	mov.w	ip, #10
 800dc58:	4621      	mov	r1, r4
 800dc5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc5e:	3b30      	subs	r3, #48	; 0x30
 800dc60:	2b09      	cmp	r3, #9
 800dc62:	d94e      	bls.n	800dd02 <_svfiprintf_r+0x17e>
 800dc64:	b1b0      	cbz	r0, 800dc94 <_svfiprintf_r+0x110>
 800dc66:	9207      	str	r2, [sp, #28]
 800dc68:	e014      	b.n	800dc94 <_svfiprintf_r+0x110>
 800dc6a:	eba0 0308 	sub.w	r3, r0, r8
 800dc6e:	fa09 f303 	lsl.w	r3, r9, r3
 800dc72:	4313      	orrs	r3, r2
 800dc74:	9304      	str	r3, [sp, #16]
 800dc76:	46a2      	mov	sl, r4
 800dc78:	e7d2      	b.n	800dc20 <_svfiprintf_r+0x9c>
 800dc7a:	9b03      	ldr	r3, [sp, #12]
 800dc7c:	1d19      	adds	r1, r3, #4
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	9103      	str	r1, [sp, #12]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	bfbb      	ittet	lt
 800dc86:	425b      	neglt	r3, r3
 800dc88:	f042 0202 	orrlt.w	r2, r2, #2
 800dc8c:	9307      	strge	r3, [sp, #28]
 800dc8e:	9307      	strlt	r3, [sp, #28]
 800dc90:	bfb8      	it	lt
 800dc92:	9204      	strlt	r2, [sp, #16]
 800dc94:	7823      	ldrb	r3, [r4, #0]
 800dc96:	2b2e      	cmp	r3, #46	; 0x2e
 800dc98:	d10c      	bne.n	800dcb4 <_svfiprintf_r+0x130>
 800dc9a:	7863      	ldrb	r3, [r4, #1]
 800dc9c:	2b2a      	cmp	r3, #42	; 0x2a
 800dc9e:	d135      	bne.n	800dd0c <_svfiprintf_r+0x188>
 800dca0:	9b03      	ldr	r3, [sp, #12]
 800dca2:	1d1a      	adds	r2, r3, #4
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	9203      	str	r2, [sp, #12]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	bfb8      	it	lt
 800dcac:	f04f 33ff 	movlt.w	r3, #4294967295
 800dcb0:	3402      	adds	r4, #2
 800dcb2:	9305      	str	r3, [sp, #20]
 800dcb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dd80 <_svfiprintf_r+0x1fc>
 800dcb8:	7821      	ldrb	r1, [r4, #0]
 800dcba:	2203      	movs	r2, #3
 800dcbc:	4650      	mov	r0, sl
 800dcbe:	f7f2 fa8f 	bl	80001e0 <memchr>
 800dcc2:	b140      	cbz	r0, 800dcd6 <_svfiprintf_r+0x152>
 800dcc4:	2340      	movs	r3, #64	; 0x40
 800dcc6:	eba0 000a 	sub.w	r0, r0, sl
 800dcca:	fa03 f000 	lsl.w	r0, r3, r0
 800dcce:	9b04      	ldr	r3, [sp, #16]
 800dcd0:	4303      	orrs	r3, r0
 800dcd2:	3401      	adds	r4, #1
 800dcd4:	9304      	str	r3, [sp, #16]
 800dcd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcda:	4826      	ldr	r0, [pc, #152]	; (800dd74 <_svfiprintf_r+0x1f0>)
 800dcdc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dce0:	2206      	movs	r2, #6
 800dce2:	f7f2 fa7d 	bl	80001e0 <memchr>
 800dce6:	2800      	cmp	r0, #0
 800dce8:	d038      	beq.n	800dd5c <_svfiprintf_r+0x1d8>
 800dcea:	4b23      	ldr	r3, [pc, #140]	; (800dd78 <_svfiprintf_r+0x1f4>)
 800dcec:	bb1b      	cbnz	r3, 800dd36 <_svfiprintf_r+0x1b2>
 800dcee:	9b03      	ldr	r3, [sp, #12]
 800dcf0:	3307      	adds	r3, #7
 800dcf2:	f023 0307 	bic.w	r3, r3, #7
 800dcf6:	3308      	adds	r3, #8
 800dcf8:	9303      	str	r3, [sp, #12]
 800dcfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcfc:	4433      	add	r3, r6
 800dcfe:	9309      	str	r3, [sp, #36]	; 0x24
 800dd00:	e767      	b.n	800dbd2 <_svfiprintf_r+0x4e>
 800dd02:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd06:	460c      	mov	r4, r1
 800dd08:	2001      	movs	r0, #1
 800dd0a:	e7a5      	b.n	800dc58 <_svfiprintf_r+0xd4>
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	3401      	adds	r4, #1
 800dd10:	9305      	str	r3, [sp, #20]
 800dd12:	4619      	mov	r1, r3
 800dd14:	f04f 0c0a 	mov.w	ip, #10
 800dd18:	4620      	mov	r0, r4
 800dd1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd1e:	3a30      	subs	r2, #48	; 0x30
 800dd20:	2a09      	cmp	r2, #9
 800dd22:	d903      	bls.n	800dd2c <_svfiprintf_r+0x1a8>
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d0c5      	beq.n	800dcb4 <_svfiprintf_r+0x130>
 800dd28:	9105      	str	r1, [sp, #20]
 800dd2a:	e7c3      	b.n	800dcb4 <_svfiprintf_r+0x130>
 800dd2c:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd30:	4604      	mov	r4, r0
 800dd32:	2301      	movs	r3, #1
 800dd34:	e7f0      	b.n	800dd18 <_svfiprintf_r+0x194>
 800dd36:	ab03      	add	r3, sp, #12
 800dd38:	9300      	str	r3, [sp, #0]
 800dd3a:	462a      	mov	r2, r5
 800dd3c:	4b0f      	ldr	r3, [pc, #60]	; (800dd7c <_svfiprintf_r+0x1f8>)
 800dd3e:	a904      	add	r1, sp, #16
 800dd40:	4638      	mov	r0, r7
 800dd42:	f7fd fc33 	bl	800b5ac <_printf_float>
 800dd46:	1c42      	adds	r2, r0, #1
 800dd48:	4606      	mov	r6, r0
 800dd4a:	d1d6      	bne.n	800dcfa <_svfiprintf_r+0x176>
 800dd4c:	89ab      	ldrh	r3, [r5, #12]
 800dd4e:	065b      	lsls	r3, r3, #25
 800dd50:	f53f af2c 	bmi.w	800dbac <_svfiprintf_r+0x28>
 800dd54:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd56:	b01d      	add	sp, #116	; 0x74
 800dd58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd5c:	ab03      	add	r3, sp, #12
 800dd5e:	9300      	str	r3, [sp, #0]
 800dd60:	462a      	mov	r2, r5
 800dd62:	4b06      	ldr	r3, [pc, #24]	; (800dd7c <_svfiprintf_r+0x1f8>)
 800dd64:	a904      	add	r1, sp, #16
 800dd66:	4638      	mov	r0, r7
 800dd68:	f7fd fec4 	bl	800baf4 <_printf_i>
 800dd6c:	e7eb      	b.n	800dd46 <_svfiprintf_r+0x1c2>
 800dd6e:	bf00      	nop
 800dd70:	0800e784 	.word	0x0800e784
 800dd74:	0800e78e 	.word	0x0800e78e
 800dd78:	0800b5ad 	.word	0x0800b5ad
 800dd7c:	0800dacd 	.word	0x0800dacd
 800dd80:	0800e78a 	.word	0x0800e78a

0800dd84 <__sfputc_r>:
 800dd84:	6893      	ldr	r3, [r2, #8]
 800dd86:	3b01      	subs	r3, #1
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	b410      	push	{r4}
 800dd8c:	6093      	str	r3, [r2, #8]
 800dd8e:	da08      	bge.n	800dda2 <__sfputc_r+0x1e>
 800dd90:	6994      	ldr	r4, [r2, #24]
 800dd92:	42a3      	cmp	r3, r4
 800dd94:	db01      	blt.n	800dd9a <__sfputc_r+0x16>
 800dd96:	290a      	cmp	r1, #10
 800dd98:	d103      	bne.n	800dda2 <__sfputc_r+0x1e>
 800dd9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd9e:	f7fe ba55 	b.w	800c24c <__swbuf_r>
 800dda2:	6813      	ldr	r3, [r2, #0]
 800dda4:	1c58      	adds	r0, r3, #1
 800dda6:	6010      	str	r0, [r2, #0]
 800dda8:	7019      	strb	r1, [r3, #0]
 800ddaa:	4608      	mov	r0, r1
 800ddac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ddb0:	4770      	bx	lr

0800ddb2 <__sfputs_r>:
 800ddb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddb4:	4606      	mov	r6, r0
 800ddb6:	460f      	mov	r7, r1
 800ddb8:	4614      	mov	r4, r2
 800ddba:	18d5      	adds	r5, r2, r3
 800ddbc:	42ac      	cmp	r4, r5
 800ddbe:	d101      	bne.n	800ddc4 <__sfputs_r+0x12>
 800ddc0:	2000      	movs	r0, #0
 800ddc2:	e007      	b.n	800ddd4 <__sfputs_r+0x22>
 800ddc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddc8:	463a      	mov	r2, r7
 800ddca:	4630      	mov	r0, r6
 800ddcc:	f7ff ffda 	bl	800dd84 <__sfputc_r>
 800ddd0:	1c43      	adds	r3, r0, #1
 800ddd2:	d1f3      	bne.n	800ddbc <__sfputs_r+0xa>
 800ddd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ddd8 <_vfiprintf_r>:
 800ddd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dddc:	460d      	mov	r5, r1
 800ddde:	b09d      	sub	sp, #116	; 0x74
 800dde0:	4614      	mov	r4, r2
 800dde2:	4698      	mov	r8, r3
 800dde4:	4606      	mov	r6, r0
 800dde6:	b118      	cbz	r0, 800ddf0 <_vfiprintf_r+0x18>
 800dde8:	6983      	ldr	r3, [r0, #24]
 800ddea:	b90b      	cbnz	r3, 800ddf0 <_vfiprintf_r+0x18>
 800ddec:	f7fd f97e 	bl	800b0ec <__sinit>
 800ddf0:	4b89      	ldr	r3, [pc, #548]	; (800e018 <_vfiprintf_r+0x240>)
 800ddf2:	429d      	cmp	r5, r3
 800ddf4:	d11b      	bne.n	800de2e <_vfiprintf_r+0x56>
 800ddf6:	6875      	ldr	r5, [r6, #4]
 800ddf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ddfa:	07d9      	lsls	r1, r3, #31
 800ddfc:	d405      	bmi.n	800de0a <_vfiprintf_r+0x32>
 800ddfe:	89ab      	ldrh	r3, [r5, #12]
 800de00:	059a      	lsls	r2, r3, #22
 800de02:	d402      	bmi.n	800de0a <_vfiprintf_r+0x32>
 800de04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de06:	f7f5 f8c1 	bl	8002f8c <__retarget_lock_acquire_recursive>
 800de0a:	89ab      	ldrh	r3, [r5, #12]
 800de0c:	071b      	lsls	r3, r3, #28
 800de0e:	d501      	bpl.n	800de14 <_vfiprintf_r+0x3c>
 800de10:	692b      	ldr	r3, [r5, #16]
 800de12:	b9eb      	cbnz	r3, 800de50 <_vfiprintf_r+0x78>
 800de14:	4629      	mov	r1, r5
 800de16:	4630      	mov	r0, r6
 800de18:	f7fe fa7c 	bl	800c314 <__swsetup_r>
 800de1c:	b1c0      	cbz	r0, 800de50 <_vfiprintf_r+0x78>
 800de1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de20:	07dc      	lsls	r4, r3, #31
 800de22:	d50e      	bpl.n	800de42 <_vfiprintf_r+0x6a>
 800de24:	f04f 30ff 	mov.w	r0, #4294967295
 800de28:	b01d      	add	sp, #116	; 0x74
 800de2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de2e:	4b7b      	ldr	r3, [pc, #492]	; (800e01c <_vfiprintf_r+0x244>)
 800de30:	429d      	cmp	r5, r3
 800de32:	d101      	bne.n	800de38 <_vfiprintf_r+0x60>
 800de34:	68b5      	ldr	r5, [r6, #8]
 800de36:	e7df      	b.n	800ddf8 <_vfiprintf_r+0x20>
 800de38:	4b79      	ldr	r3, [pc, #484]	; (800e020 <_vfiprintf_r+0x248>)
 800de3a:	429d      	cmp	r5, r3
 800de3c:	bf08      	it	eq
 800de3e:	68f5      	ldreq	r5, [r6, #12]
 800de40:	e7da      	b.n	800ddf8 <_vfiprintf_r+0x20>
 800de42:	89ab      	ldrh	r3, [r5, #12]
 800de44:	0598      	lsls	r0, r3, #22
 800de46:	d4ed      	bmi.n	800de24 <_vfiprintf_r+0x4c>
 800de48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de4a:	f7f5 f8b3 	bl	8002fb4 <__retarget_lock_release_recursive>
 800de4e:	e7e9      	b.n	800de24 <_vfiprintf_r+0x4c>
 800de50:	2300      	movs	r3, #0
 800de52:	9309      	str	r3, [sp, #36]	; 0x24
 800de54:	2320      	movs	r3, #32
 800de56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de5a:	f8cd 800c 	str.w	r8, [sp, #12]
 800de5e:	2330      	movs	r3, #48	; 0x30
 800de60:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e024 <_vfiprintf_r+0x24c>
 800de64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de68:	f04f 0901 	mov.w	r9, #1
 800de6c:	4623      	mov	r3, r4
 800de6e:	469a      	mov	sl, r3
 800de70:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de74:	b10a      	cbz	r2, 800de7a <_vfiprintf_r+0xa2>
 800de76:	2a25      	cmp	r2, #37	; 0x25
 800de78:	d1f9      	bne.n	800de6e <_vfiprintf_r+0x96>
 800de7a:	ebba 0b04 	subs.w	fp, sl, r4
 800de7e:	d00b      	beq.n	800de98 <_vfiprintf_r+0xc0>
 800de80:	465b      	mov	r3, fp
 800de82:	4622      	mov	r2, r4
 800de84:	4629      	mov	r1, r5
 800de86:	4630      	mov	r0, r6
 800de88:	f7ff ff93 	bl	800ddb2 <__sfputs_r>
 800de8c:	3001      	adds	r0, #1
 800de8e:	f000 80aa 	beq.w	800dfe6 <_vfiprintf_r+0x20e>
 800de92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de94:	445a      	add	r2, fp
 800de96:	9209      	str	r2, [sp, #36]	; 0x24
 800de98:	f89a 3000 	ldrb.w	r3, [sl]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	f000 80a2 	beq.w	800dfe6 <_vfiprintf_r+0x20e>
 800dea2:	2300      	movs	r3, #0
 800dea4:	f04f 32ff 	mov.w	r2, #4294967295
 800dea8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800deac:	f10a 0a01 	add.w	sl, sl, #1
 800deb0:	9304      	str	r3, [sp, #16]
 800deb2:	9307      	str	r3, [sp, #28]
 800deb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800deb8:	931a      	str	r3, [sp, #104]	; 0x68
 800deba:	4654      	mov	r4, sl
 800debc:	2205      	movs	r2, #5
 800debe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dec2:	4858      	ldr	r0, [pc, #352]	; (800e024 <_vfiprintf_r+0x24c>)
 800dec4:	f7f2 f98c 	bl	80001e0 <memchr>
 800dec8:	9a04      	ldr	r2, [sp, #16]
 800deca:	b9d8      	cbnz	r0, 800df04 <_vfiprintf_r+0x12c>
 800decc:	06d1      	lsls	r1, r2, #27
 800dece:	bf44      	itt	mi
 800ded0:	2320      	movmi	r3, #32
 800ded2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ded6:	0713      	lsls	r3, r2, #28
 800ded8:	bf44      	itt	mi
 800deda:	232b      	movmi	r3, #43	; 0x2b
 800dedc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dee0:	f89a 3000 	ldrb.w	r3, [sl]
 800dee4:	2b2a      	cmp	r3, #42	; 0x2a
 800dee6:	d015      	beq.n	800df14 <_vfiprintf_r+0x13c>
 800dee8:	9a07      	ldr	r2, [sp, #28]
 800deea:	4654      	mov	r4, sl
 800deec:	2000      	movs	r0, #0
 800deee:	f04f 0c0a 	mov.w	ip, #10
 800def2:	4621      	mov	r1, r4
 800def4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800def8:	3b30      	subs	r3, #48	; 0x30
 800defa:	2b09      	cmp	r3, #9
 800defc:	d94e      	bls.n	800df9c <_vfiprintf_r+0x1c4>
 800defe:	b1b0      	cbz	r0, 800df2e <_vfiprintf_r+0x156>
 800df00:	9207      	str	r2, [sp, #28]
 800df02:	e014      	b.n	800df2e <_vfiprintf_r+0x156>
 800df04:	eba0 0308 	sub.w	r3, r0, r8
 800df08:	fa09 f303 	lsl.w	r3, r9, r3
 800df0c:	4313      	orrs	r3, r2
 800df0e:	9304      	str	r3, [sp, #16]
 800df10:	46a2      	mov	sl, r4
 800df12:	e7d2      	b.n	800deba <_vfiprintf_r+0xe2>
 800df14:	9b03      	ldr	r3, [sp, #12]
 800df16:	1d19      	adds	r1, r3, #4
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	9103      	str	r1, [sp, #12]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	bfbb      	ittet	lt
 800df20:	425b      	neglt	r3, r3
 800df22:	f042 0202 	orrlt.w	r2, r2, #2
 800df26:	9307      	strge	r3, [sp, #28]
 800df28:	9307      	strlt	r3, [sp, #28]
 800df2a:	bfb8      	it	lt
 800df2c:	9204      	strlt	r2, [sp, #16]
 800df2e:	7823      	ldrb	r3, [r4, #0]
 800df30:	2b2e      	cmp	r3, #46	; 0x2e
 800df32:	d10c      	bne.n	800df4e <_vfiprintf_r+0x176>
 800df34:	7863      	ldrb	r3, [r4, #1]
 800df36:	2b2a      	cmp	r3, #42	; 0x2a
 800df38:	d135      	bne.n	800dfa6 <_vfiprintf_r+0x1ce>
 800df3a:	9b03      	ldr	r3, [sp, #12]
 800df3c:	1d1a      	adds	r2, r3, #4
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	9203      	str	r2, [sp, #12]
 800df42:	2b00      	cmp	r3, #0
 800df44:	bfb8      	it	lt
 800df46:	f04f 33ff 	movlt.w	r3, #4294967295
 800df4a:	3402      	adds	r4, #2
 800df4c:	9305      	str	r3, [sp, #20]
 800df4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e034 <_vfiprintf_r+0x25c>
 800df52:	7821      	ldrb	r1, [r4, #0]
 800df54:	2203      	movs	r2, #3
 800df56:	4650      	mov	r0, sl
 800df58:	f7f2 f942 	bl	80001e0 <memchr>
 800df5c:	b140      	cbz	r0, 800df70 <_vfiprintf_r+0x198>
 800df5e:	2340      	movs	r3, #64	; 0x40
 800df60:	eba0 000a 	sub.w	r0, r0, sl
 800df64:	fa03 f000 	lsl.w	r0, r3, r0
 800df68:	9b04      	ldr	r3, [sp, #16]
 800df6a:	4303      	orrs	r3, r0
 800df6c:	3401      	adds	r4, #1
 800df6e:	9304      	str	r3, [sp, #16]
 800df70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df74:	482c      	ldr	r0, [pc, #176]	; (800e028 <_vfiprintf_r+0x250>)
 800df76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df7a:	2206      	movs	r2, #6
 800df7c:	f7f2 f930 	bl	80001e0 <memchr>
 800df80:	2800      	cmp	r0, #0
 800df82:	d03f      	beq.n	800e004 <_vfiprintf_r+0x22c>
 800df84:	4b29      	ldr	r3, [pc, #164]	; (800e02c <_vfiprintf_r+0x254>)
 800df86:	bb1b      	cbnz	r3, 800dfd0 <_vfiprintf_r+0x1f8>
 800df88:	9b03      	ldr	r3, [sp, #12]
 800df8a:	3307      	adds	r3, #7
 800df8c:	f023 0307 	bic.w	r3, r3, #7
 800df90:	3308      	adds	r3, #8
 800df92:	9303      	str	r3, [sp, #12]
 800df94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df96:	443b      	add	r3, r7
 800df98:	9309      	str	r3, [sp, #36]	; 0x24
 800df9a:	e767      	b.n	800de6c <_vfiprintf_r+0x94>
 800df9c:	fb0c 3202 	mla	r2, ip, r2, r3
 800dfa0:	460c      	mov	r4, r1
 800dfa2:	2001      	movs	r0, #1
 800dfa4:	e7a5      	b.n	800def2 <_vfiprintf_r+0x11a>
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	3401      	adds	r4, #1
 800dfaa:	9305      	str	r3, [sp, #20]
 800dfac:	4619      	mov	r1, r3
 800dfae:	f04f 0c0a 	mov.w	ip, #10
 800dfb2:	4620      	mov	r0, r4
 800dfb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dfb8:	3a30      	subs	r2, #48	; 0x30
 800dfba:	2a09      	cmp	r2, #9
 800dfbc:	d903      	bls.n	800dfc6 <_vfiprintf_r+0x1ee>
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d0c5      	beq.n	800df4e <_vfiprintf_r+0x176>
 800dfc2:	9105      	str	r1, [sp, #20]
 800dfc4:	e7c3      	b.n	800df4e <_vfiprintf_r+0x176>
 800dfc6:	fb0c 2101 	mla	r1, ip, r1, r2
 800dfca:	4604      	mov	r4, r0
 800dfcc:	2301      	movs	r3, #1
 800dfce:	e7f0      	b.n	800dfb2 <_vfiprintf_r+0x1da>
 800dfd0:	ab03      	add	r3, sp, #12
 800dfd2:	9300      	str	r3, [sp, #0]
 800dfd4:	462a      	mov	r2, r5
 800dfd6:	4b16      	ldr	r3, [pc, #88]	; (800e030 <_vfiprintf_r+0x258>)
 800dfd8:	a904      	add	r1, sp, #16
 800dfda:	4630      	mov	r0, r6
 800dfdc:	f7fd fae6 	bl	800b5ac <_printf_float>
 800dfe0:	4607      	mov	r7, r0
 800dfe2:	1c78      	adds	r0, r7, #1
 800dfe4:	d1d6      	bne.n	800df94 <_vfiprintf_r+0x1bc>
 800dfe6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dfe8:	07d9      	lsls	r1, r3, #31
 800dfea:	d405      	bmi.n	800dff8 <_vfiprintf_r+0x220>
 800dfec:	89ab      	ldrh	r3, [r5, #12]
 800dfee:	059a      	lsls	r2, r3, #22
 800dff0:	d402      	bmi.n	800dff8 <_vfiprintf_r+0x220>
 800dff2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dff4:	f7f4 ffde 	bl	8002fb4 <__retarget_lock_release_recursive>
 800dff8:	89ab      	ldrh	r3, [r5, #12]
 800dffa:	065b      	lsls	r3, r3, #25
 800dffc:	f53f af12 	bmi.w	800de24 <_vfiprintf_r+0x4c>
 800e000:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e002:	e711      	b.n	800de28 <_vfiprintf_r+0x50>
 800e004:	ab03      	add	r3, sp, #12
 800e006:	9300      	str	r3, [sp, #0]
 800e008:	462a      	mov	r2, r5
 800e00a:	4b09      	ldr	r3, [pc, #36]	; (800e030 <_vfiprintf_r+0x258>)
 800e00c:	a904      	add	r1, sp, #16
 800e00e:	4630      	mov	r0, r6
 800e010:	f7fd fd70 	bl	800baf4 <_printf_i>
 800e014:	e7e4      	b.n	800dfe0 <_vfiprintf_r+0x208>
 800e016:	bf00      	nop
 800e018:	0800e41c 	.word	0x0800e41c
 800e01c:	0800e43c 	.word	0x0800e43c
 800e020:	0800e3fc 	.word	0x0800e3fc
 800e024:	0800e784 	.word	0x0800e784
 800e028:	0800e78e 	.word	0x0800e78e
 800e02c:	0800b5ad 	.word	0x0800b5ad
 800e030:	0800ddb3 	.word	0x0800ddb3
 800e034:	0800e78a 	.word	0x0800e78a

0800e038 <_putc_r>:
 800e038:	b570      	push	{r4, r5, r6, lr}
 800e03a:	460d      	mov	r5, r1
 800e03c:	4614      	mov	r4, r2
 800e03e:	4606      	mov	r6, r0
 800e040:	b118      	cbz	r0, 800e04a <_putc_r+0x12>
 800e042:	6983      	ldr	r3, [r0, #24]
 800e044:	b90b      	cbnz	r3, 800e04a <_putc_r+0x12>
 800e046:	f7fd f851 	bl	800b0ec <__sinit>
 800e04a:	4b1c      	ldr	r3, [pc, #112]	; (800e0bc <_putc_r+0x84>)
 800e04c:	429c      	cmp	r4, r3
 800e04e:	d124      	bne.n	800e09a <_putc_r+0x62>
 800e050:	6874      	ldr	r4, [r6, #4]
 800e052:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e054:	07d8      	lsls	r0, r3, #31
 800e056:	d405      	bmi.n	800e064 <_putc_r+0x2c>
 800e058:	89a3      	ldrh	r3, [r4, #12]
 800e05a:	0599      	lsls	r1, r3, #22
 800e05c:	d402      	bmi.n	800e064 <_putc_r+0x2c>
 800e05e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e060:	f7f4 ff94 	bl	8002f8c <__retarget_lock_acquire_recursive>
 800e064:	68a3      	ldr	r3, [r4, #8]
 800e066:	3b01      	subs	r3, #1
 800e068:	2b00      	cmp	r3, #0
 800e06a:	60a3      	str	r3, [r4, #8]
 800e06c:	da05      	bge.n	800e07a <_putc_r+0x42>
 800e06e:	69a2      	ldr	r2, [r4, #24]
 800e070:	4293      	cmp	r3, r2
 800e072:	db1c      	blt.n	800e0ae <_putc_r+0x76>
 800e074:	b2eb      	uxtb	r3, r5
 800e076:	2b0a      	cmp	r3, #10
 800e078:	d019      	beq.n	800e0ae <_putc_r+0x76>
 800e07a:	6823      	ldr	r3, [r4, #0]
 800e07c:	1c5a      	adds	r2, r3, #1
 800e07e:	6022      	str	r2, [r4, #0]
 800e080:	701d      	strb	r5, [r3, #0]
 800e082:	b2ed      	uxtb	r5, r5
 800e084:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e086:	07da      	lsls	r2, r3, #31
 800e088:	d405      	bmi.n	800e096 <_putc_r+0x5e>
 800e08a:	89a3      	ldrh	r3, [r4, #12]
 800e08c:	059b      	lsls	r3, r3, #22
 800e08e:	d402      	bmi.n	800e096 <_putc_r+0x5e>
 800e090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e092:	f7f4 ff8f 	bl	8002fb4 <__retarget_lock_release_recursive>
 800e096:	4628      	mov	r0, r5
 800e098:	bd70      	pop	{r4, r5, r6, pc}
 800e09a:	4b09      	ldr	r3, [pc, #36]	; (800e0c0 <_putc_r+0x88>)
 800e09c:	429c      	cmp	r4, r3
 800e09e:	d101      	bne.n	800e0a4 <_putc_r+0x6c>
 800e0a0:	68b4      	ldr	r4, [r6, #8]
 800e0a2:	e7d6      	b.n	800e052 <_putc_r+0x1a>
 800e0a4:	4b07      	ldr	r3, [pc, #28]	; (800e0c4 <_putc_r+0x8c>)
 800e0a6:	429c      	cmp	r4, r3
 800e0a8:	bf08      	it	eq
 800e0aa:	68f4      	ldreq	r4, [r6, #12]
 800e0ac:	e7d1      	b.n	800e052 <_putc_r+0x1a>
 800e0ae:	4629      	mov	r1, r5
 800e0b0:	4622      	mov	r2, r4
 800e0b2:	4630      	mov	r0, r6
 800e0b4:	f7fe f8ca 	bl	800c24c <__swbuf_r>
 800e0b8:	4605      	mov	r5, r0
 800e0ba:	e7e3      	b.n	800e084 <_putc_r+0x4c>
 800e0bc:	0800e41c 	.word	0x0800e41c
 800e0c0:	0800e43c 	.word	0x0800e43c
 800e0c4:	0800e3fc 	.word	0x0800e3fc

0800e0c8 <_read_r>:
 800e0c8:	b538      	push	{r3, r4, r5, lr}
 800e0ca:	4d07      	ldr	r5, [pc, #28]	; (800e0e8 <_read_r+0x20>)
 800e0cc:	4604      	mov	r4, r0
 800e0ce:	4608      	mov	r0, r1
 800e0d0:	4611      	mov	r1, r2
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	602a      	str	r2, [r5, #0]
 800e0d6:	461a      	mov	r2, r3
 800e0d8:	f7f4 fdd8 	bl	8002c8c <_read>
 800e0dc:	1c43      	adds	r3, r0, #1
 800e0de:	d102      	bne.n	800e0e6 <_read_r+0x1e>
 800e0e0:	682b      	ldr	r3, [r5, #0]
 800e0e2:	b103      	cbz	r3, 800e0e6 <_read_r+0x1e>
 800e0e4:	6023      	str	r3, [r4, #0]
 800e0e6:	bd38      	pop	{r3, r4, r5, pc}
 800e0e8:	20005634 	.word	0x20005634

0800e0ec <__assert_func>:
 800e0ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e0ee:	4614      	mov	r4, r2
 800e0f0:	461a      	mov	r2, r3
 800e0f2:	4b09      	ldr	r3, [pc, #36]	; (800e118 <__assert_func+0x2c>)
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	4605      	mov	r5, r0
 800e0f8:	68d8      	ldr	r0, [r3, #12]
 800e0fa:	b14c      	cbz	r4, 800e110 <__assert_func+0x24>
 800e0fc:	4b07      	ldr	r3, [pc, #28]	; (800e11c <__assert_func+0x30>)
 800e0fe:	9100      	str	r1, [sp, #0]
 800e100:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e104:	4906      	ldr	r1, [pc, #24]	; (800e120 <__assert_func+0x34>)
 800e106:	462b      	mov	r3, r5
 800e108:	f000 f80e 	bl	800e128 <fiprintf>
 800e10c:	f7fc ff88 	bl	800b020 <abort>
 800e110:	4b04      	ldr	r3, [pc, #16]	; (800e124 <__assert_func+0x38>)
 800e112:	461c      	mov	r4, r3
 800e114:	e7f3      	b.n	800e0fe <__assert_func+0x12>
 800e116:	bf00      	nop
 800e118:	20000068 	.word	0x20000068
 800e11c:	0800e795 	.word	0x0800e795
 800e120:	0800e7a2 	.word	0x0800e7a2
 800e124:	0800e7d0 	.word	0x0800e7d0

0800e128 <fiprintf>:
 800e128:	b40e      	push	{r1, r2, r3}
 800e12a:	b503      	push	{r0, r1, lr}
 800e12c:	4601      	mov	r1, r0
 800e12e:	ab03      	add	r3, sp, #12
 800e130:	4805      	ldr	r0, [pc, #20]	; (800e148 <fiprintf+0x20>)
 800e132:	f853 2b04 	ldr.w	r2, [r3], #4
 800e136:	6800      	ldr	r0, [r0, #0]
 800e138:	9301      	str	r3, [sp, #4]
 800e13a:	f7ff fe4d 	bl	800ddd8 <_vfiprintf_r>
 800e13e:	b002      	add	sp, #8
 800e140:	f85d eb04 	ldr.w	lr, [sp], #4
 800e144:	b003      	add	sp, #12
 800e146:	4770      	bx	lr
 800e148:	20000068 	.word	0x20000068

0800e14c <_fstat_r>:
 800e14c:	b538      	push	{r3, r4, r5, lr}
 800e14e:	4d07      	ldr	r5, [pc, #28]	; (800e16c <_fstat_r+0x20>)
 800e150:	2300      	movs	r3, #0
 800e152:	4604      	mov	r4, r0
 800e154:	4608      	mov	r0, r1
 800e156:	4611      	mov	r1, r2
 800e158:	602b      	str	r3, [r5, #0]
 800e15a:	f7f4 fddc 	bl	8002d16 <_fstat>
 800e15e:	1c43      	adds	r3, r0, #1
 800e160:	d102      	bne.n	800e168 <_fstat_r+0x1c>
 800e162:	682b      	ldr	r3, [r5, #0]
 800e164:	b103      	cbz	r3, 800e168 <_fstat_r+0x1c>
 800e166:	6023      	str	r3, [r4, #0]
 800e168:	bd38      	pop	{r3, r4, r5, pc}
 800e16a:	bf00      	nop
 800e16c:	20005634 	.word	0x20005634

0800e170 <_isatty_r>:
 800e170:	b538      	push	{r3, r4, r5, lr}
 800e172:	4d06      	ldr	r5, [pc, #24]	; (800e18c <_isatty_r+0x1c>)
 800e174:	2300      	movs	r3, #0
 800e176:	4604      	mov	r4, r0
 800e178:	4608      	mov	r0, r1
 800e17a:	602b      	str	r3, [r5, #0]
 800e17c:	f7f4 fddb 	bl	8002d36 <_isatty>
 800e180:	1c43      	adds	r3, r0, #1
 800e182:	d102      	bne.n	800e18a <_isatty_r+0x1a>
 800e184:	682b      	ldr	r3, [r5, #0]
 800e186:	b103      	cbz	r3, 800e18a <_isatty_r+0x1a>
 800e188:	6023      	str	r3, [r4, #0]
 800e18a:	bd38      	pop	{r3, r4, r5, pc}
 800e18c:	20005634 	.word	0x20005634

0800e190 <__ascii_mbtowc>:
 800e190:	b082      	sub	sp, #8
 800e192:	b901      	cbnz	r1, 800e196 <__ascii_mbtowc+0x6>
 800e194:	a901      	add	r1, sp, #4
 800e196:	b142      	cbz	r2, 800e1aa <__ascii_mbtowc+0x1a>
 800e198:	b14b      	cbz	r3, 800e1ae <__ascii_mbtowc+0x1e>
 800e19a:	7813      	ldrb	r3, [r2, #0]
 800e19c:	600b      	str	r3, [r1, #0]
 800e19e:	7812      	ldrb	r2, [r2, #0]
 800e1a0:	1e10      	subs	r0, r2, #0
 800e1a2:	bf18      	it	ne
 800e1a4:	2001      	movne	r0, #1
 800e1a6:	b002      	add	sp, #8
 800e1a8:	4770      	bx	lr
 800e1aa:	4610      	mov	r0, r2
 800e1ac:	e7fb      	b.n	800e1a6 <__ascii_mbtowc+0x16>
 800e1ae:	f06f 0001 	mvn.w	r0, #1
 800e1b2:	e7f8      	b.n	800e1a6 <__ascii_mbtowc+0x16>

0800e1b4 <memmove>:
 800e1b4:	4288      	cmp	r0, r1
 800e1b6:	b510      	push	{r4, lr}
 800e1b8:	eb01 0402 	add.w	r4, r1, r2
 800e1bc:	d902      	bls.n	800e1c4 <memmove+0x10>
 800e1be:	4284      	cmp	r4, r0
 800e1c0:	4623      	mov	r3, r4
 800e1c2:	d807      	bhi.n	800e1d4 <memmove+0x20>
 800e1c4:	1e43      	subs	r3, r0, #1
 800e1c6:	42a1      	cmp	r1, r4
 800e1c8:	d008      	beq.n	800e1dc <memmove+0x28>
 800e1ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e1ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e1d2:	e7f8      	b.n	800e1c6 <memmove+0x12>
 800e1d4:	4402      	add	r2, r0
 800e1d6:	4601      	mov	r1, r0
 800e1d8:	428a      	cmp	r2, r1
 800e1da:	d100      	bne.n	800e1de <memmove+0x2a>
 800e1dc:	bd10      	pop	{r4, pc}
 800e1de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e1e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e1e6:	e7f7      	b.n	800e1d8 <memmove+0x24>

0800e1e8 <_realloc_r>:
 800e1e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1ec:	4680      	mov	r8, r0
 800e1ee:	4614      	mov	r4, r2
 800e1f0:	460e      	mov	r6, r1
 800e1f2:	b921      	cbnz	r1, 800e1fe <_realloc_r+0x16>
 800e1f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e1f8:	4611      	mov	r1, r2
 800e1fa:	f7fd b8c3 	b.w	800b384 <_malloc_r>
 800e1fe:	b92a      	cbnz	r2, 800e20c <_realloc_r+0x24>
 800e200:	f7fd f854 	bl	800b2ac <_free_r>
 800e204:	4625      	mov	r5, r4
 800e206:	4628      	mov	r0, r5
 800e208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e20c:	f000 f828 	bl	800e260 <_malloc_usable_size_r>
 800e210:	4284      	cmp	r4, r0
 800e212:	4607      	mov	r7, r0
 800e214:	d802      	bhi.n	800e21c <_realloc_r+0x34>
 800e216:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e21a:	d812      	bhi.n	800e242 <_realloc_r+0x5a>
 800e21c:	4621      	mov	r1, r4
 800e21e:	4640      	mov	r0, r8
 800e220:	f7fd f8b0 	bl	800b384 <_malloc_r>
 800e224:	4605      	mov	r5, r0
 800e226:	2800      	cmp	r0, #0
 800e228:	d0ed      	beq.n	800e206 <_realloc_r+0x1e>
 800e22a:	42bc      	cmp	r4, r7
 800e22c:	4622      	mov	r2, r4
 800e22e:	4631      	mov	r1, r6
 800e230:	bf28      	it	cs
 800e232:	463a      	movcs	r2, r7
 800e234:	f7fd f824 	bl	800b280 <memcpy>
 800e238:	4631      	mov	r1, r6
 800e23a:	4640      	mov	r0, r8
 800e23c:	f7fd f836 	bl	800b2ac <_free_r>
 800e240:	e7e1      	b.n	800e206 <_realloc_r+0x1e>
 800e242:	4635      	mov	r5, r6
 800e244:	e7df      	b.n	800e206 <_realloc_r+0x1e>

0800e246 <__ascii_wctomb>:
 800e246:	b149      	cbz	r1, 800e25c <__ascii_wctomb+0x16>
 800e248:	2aff      	cmp	r2, #255	; 0xff
 800e24a:	bf85      	ittet	hi
 800e24c:	238a      	movhi	r3, #138	; 0x8a
 800e24e:	6003      	strhi	r3, [r0, #0]
 800e250:	700a      	strbls	r2, [r1, #0]
 800e252:	f04f 30ff 	movhi.w	r0, #4294967295
 800e256:	bf98      	it	ls
 800e258:	2001      	movls	r0, #1
 800e25a:	4770      	bx	lr
 800e25c:	4608      	mov	r0, r1
 800e25e:	4770      	bx	lr

0800e260 <_malloc_usable_size_r>:
 800e260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e264:	1f18      	subs	r0, r3, #4
 800e266:	2b00      	cmp	r3, #0
 800e268:	bfbc      	itt	lt
 800e26a:	580b      	ldrlt	r3, [r1, r0]
 800e26c:	18c0      	addlt	r0, r0, r3
 800e26e:	4770      	bx	lr

0800e270 <_init>:
 800e270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e272:	bf00      	nop
 800e274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e276:	bc08      	pop	{r3}
 800e278:	469e      	mov	lr, r3
 800e27a:	4770      	bx	lr

0800e27c <_fini>:
 800e27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e27e:	bf00      	nop
 800e280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e282:	bc08      	pop	{r3}
 800e284:	469e      	mov	lr, r3
 800e286:	4770      	bx	lr

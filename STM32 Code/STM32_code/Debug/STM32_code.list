
STM32_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013178  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001124  08013308  08013308  00023308  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801442c  0801442c  0003023c  2**0
                  CONTENTS
  4 .ARM          00000008  0801442c  0801442c  0002442c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014434  08014434  0003023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08014434  08014434  00024434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0801443c  0801443c  0002443c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000023c  20000000  08014444  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003023c  2**0
                  CONTENTS
 10 .bss          00005a7c  2000023c  2000023c  0003023c  2**2
                  ALLOC
 11 ._user_heap_stack 00000c00  20005cb8  20005cb8  0003023c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003023c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002ce52  00000000  00000000  0003026c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000058c5  00000000  00000000  0005d0be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001da0  00000000  00000000  00062988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001be8  00000000  00000000  00064728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c19b  00000000  00000000  00066310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025602  00000000  00000000  000924ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000edb54  00000000  00000000  000b7aad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a5601  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000094ac  00000000  00000000  001a5654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000023c 	.word	0x2000023c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080132f0 	.word	0x080132f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000240 	.word	0x20000240
 80001cc:	080132f0 	.word	0x080132f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <IMU_Initialise>:
int16_t gyro_offset[3] = { 0 }; // gyro_offset value calibrated by Gyro_calibrate()

/*
 * INITIALISATION
 */
uint8_t* IMU_Initialise(ICM20948 *dev, I2C_HandleTypeDef *i2cHandle) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]

	char hex[2];
	uint8_t regData;

	dev->i2cHandle = i2cHandle;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	683a      	ldr	r2, [r7, #0]
 8000f9a:	601a      	str	r2, [r3, #0]
	 buf[0] = REG_ADD_REG_BANK_SEL;  // bank select register
	 buf[1] = REG_VAL_REG_BANK_0;           // bank 0
	 ret = HAL_I2C_Master_Transmit(i2cHandle, IMU_ADDR, buf, I2C_MEMADD_SIZE_16BIT, 10);

	 */
	ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	217f      	movs	r1, #127	; 0x7f
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f000 f8b3 	bl	800110c <IMU_WriteOneByte>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b57      	ldr	r3, [pc, #348]	; (8001108 <IMU_Initialise+0x17c>)
 8000fac:	701a      	strb	r2, [r3, #0]


	//check ID
	/*	  buf[0] = REG_WHO_AM_I;  //(Should return ID =  0xEA)
	 ret = HAL_I2C_Mem_Read(i2cHandle, IMU_ADDR, REG_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, buf, I2C_MEMADD_SIZE_8BIT, 10);  */
	ret = IMU_ReadOneByte(dev, REG_WHO_AM_I, &regData);
 8000fae:	2100      	movs	r1, #0
 8000fb0:	f107 030b 	add.w	r3, r7, #11
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f000 f8c4 	bl	8001144 <IMU_ReadOneByte>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	4b51      	ldr	r3, [pc, #324]	; (8001108 <IMU_Initialise+0x17c>)
 8000fc2:	701a      	strb	r2, [r3, #0]

	//return &buf[0];

	// Initialize
	// Bank 0 - Reset the device and then auto selects the best available clock source
	ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	217f      	movs	r1, #127	; 0x7f
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f000 f89f 	bl	800110c <IMU_WriteOneByte>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b4d      	ldr	r3, [pc, #308]	; (8001108 <IMU_Initialise+0x17c>)
 8000fd4:	701a      	strb	r2, [r3, #0]

	//ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_1, REG_VAL_ALL_RGE_RESET); // reset device - check header file value should be 0xF1

	osDelay(10);
 8000fd6:	200a      	movs	r0, #10
 8000fd8:	f00a fea4 	bl	800bd24 <osDelay>
	ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_1, REG_VAL_RUN_MODE); // auto selects the best available clock source for device
 8000fdc:	2201      	movs	r2, #1
 8000fde:	2106      	movs	r1, #6
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f000 f893 	bl	800110c <IMU_WriteOneByte>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b47      	ldr	r3, [pc, #284]	; (8001108 <IMU_Initialise+0x17c>)
 8000fec:	701a      	strb	r2, [r3, #0]

	// Turn off and on Accelator and Gyro - page 28
	osDelay(10);
 8000fee:	200a      	movs	r0, #10
 8000ff0:	f00a fe98 	bl	800bd24 <osDelay>
	ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_2, REG_VAL_ACCEL_GYROLL_OFF); // OFF
 8000ff4:	223f      	movs	r2, #63	; 0x3f
 8000ff6:	2107      	movs	r1, #7
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f000 f887 	bl	800110c <IMU_WriteOneByte>
 8000ffe:	4603      	mov	r3, r0
 8001000:	461a      	mov	r2, r3
 8001002:	4b41      	ldr	r3, [pc, #260]	; (8001108 <IMU_Initialise+0x17c>)
 8001004:	701a      	strb	r2, [r3, #0]

	osDelay(10);
 8001006:	200a      	movs	r0, #10
 8001008:	f00a fe8c 	bl	800bd24 <osDelay>
	ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_2, REG_VAL_ACCEL_GYROLL_ON); // ON
 800100c:	2200      	movs	r2, #0
 800100e:	2107      	movs	r1, #7
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f000 f87b 	bl	800110c <IMU_WriteOneByte>
 8001016:	4603      	mov	r3, r0
 8001018:	461a      	mov	r2, r3
 800101a:	4b3b      	ldr	r3, [pc, #236]	; (8001108 <IMU_Initialise+0x17c>)
 800101c:	701a      	strb	r2, [r3, #0]

	ret = IMU_WriteOneByte(dev, REG_ADD_INT_ENABLE_1, REG_VAL_INT_ENABLED); // Turn on int on pin INT1
 800101e:	2201      	movs	r2, #1
 8001020:	2110      	movs	r1, #16
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f000 f872 	bl	800110c <IMU_WriteOneByte>
 8001028:	4603      	mov	r3, r0
 800102a:	461a      	mov	r2, r3
 800102c:	4b36      	ldr	r3, [pc, #216]	; (8001108 <IMU_Initialise+0x17c>)
 800102e:	701a      	strb	r2, [r3, #0]

	uint8_t tmp = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	72bb      	strb	r3, [r7, #10]
	IMU_ReadOneByte(dev, REG_ADD_INT_PIN_CFG, &tmp);
 8001034:	f107 030a 	add.w	r3, r7, #10
 8001038:	461a      	mov	r2, r3
 800103a:	210f      	movs	r1, #15
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f000 f881 	bl	8001144 <IMU_ReadOneByte>
	IMU_WriteOneByte(dev, REG_ADD_INT_PIN_CFG, tmp | 0x02);
 8001042:	7abb      	ldrb	r3, [r7, #10]
 8001044:	f043 0302 	orr.w	r3, r3, #2
 8001048:	b2db      	uxtb	r3, r3
 800104a:	461a      	mov	r2, r3
 800104c:	210f      	movs	r1, #15
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f000 f85c 	bl	800110c <IMU_WriteOneByte>

	// Bank 2 - Gyro and Acce and start running
	/* user bank 2 register */
	ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_2);
 8001054:	2220      	movs	r2, #32
 8001056:	217f      	movs	r1, #127	; 0x7f
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f000 f857 	bl	800110c <IMU_WriteOneByte>
 800105e:	4603      	mov	r3, r0
 8001060:	461a      	mov	r2, r3
 8001062:	4b29      	ldr	r3, [pc, #164]	; (8001108 <IMU_Initialise+0x17c>)
 8001064:	701a      	strb	r2, [r3, #0]

	ret = IMU_WriteOneByte(dev, REG_ADD_GYRO_SMPLRT_DIV, 0x00); // changed to 0 from 0x16 **NEW**
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f000 f84e 	bl	800110c <IMU_WriteOneByte>
 8001070:	4603      	mov	r3, r0
 8001072:	461a      	mov	r2, r3
 8001074:	4b24      	ldr	r3, [pc, #144]	; (8001108 <IMU_Initialise+0x17c>)
 8001076:	701a      	strb	r2, [r3, #0]

	ret = IMU_WriteOneByte(dev, REG_ADD_GYRO_CONFIG_1,
 8001078:	2237      	movs	r2, #55	; 0x37
 800107a:	2101      	movs	r1, #1
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f000 f845 	bl	800110c <IMU_WriteOneByte>
 8001082:	4603      	mov	r3, r0
 8001084:	461a      	mov	r2, r3
 8001086:	4b20      	ldr	r3, [pc, #128]	; (8001108 <IMU_Initialise+0x17c>)
 8001088:	701a      	strb	r2, [r3, #0]
			REG_VAL_BIT_GYRO_DLPCFG_6 | REG_VAL_BIT_GYRO_FS_2000DPS
					| REG_VAL_BIT_GYRO_DLPF); // enable low pass filter and set Gyro FS

	ret = IMU_WriteOneByte(dev, REG_ADD_GYRO_CONFIG_2, 0x06); // 8x average **NEW**
 800108a:	2206      	movs	r2, #6
 800108c:	2102      	movs	r1, #2
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f000 f83c 	bl	800110c <IMU_WriteOneByte>
 8001094:	4603      	mov	r3, r0
 8001096:	461a      	mov	r2, r3
 8001098:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <IMU_Initialise+0x17c>)
 800109a:	701a      	strb	r2, [r3, #0]


	ret = IMU_WriteOneByte(dev, REG_ADD_ACCEL_SMPLRT_DIV_2, 0x10); //
 800109c:	2210      	movs	r2, #16
 800109e:	2111      	movs	r1, #17
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 f833 	bl	800110c <IMU_WriteOneByte>
 80010a6:	4603      	mov	r3, r0
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b17      	ldr	r3, [pc, #92]	; (8001108 <IMU_Initialise+0x17c>)
 80010ac:	701a      	strb	r2, [r3, #0]
	ret = IMU_WriteOneByte(dev, REG_ADD_ACCEL_SMPLRT_DIV_1, 0x00); // upper 3 bit of sample rate = 0
 80010ae:	2200      	movs	r2, #0
 80010b0:	2110      	movs	r1, #16
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f000 f82a 	bl	800110c <IMU_WriteOneByte>
 80010b8:	4603      	mov	r3, r0
 80010ba:	461a      	mov	r2, r3
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <IMU_Initialise+0x17c>)
 80010be:	701a      	strb	r2, [r3, #0]

	// enable LPF and set accel full scale to +/-2G, sensitivity scale factor = 16384 LSB/g
	ret = IMU_WriteOneByte(dev, REG_ADD_ACCEL_CONFIG,
 80010c0:	2231      	movs	r2, #49	; 0x31
 80010c2:	2114      	movs	r1, #20
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f000 f821 	bl	800110c <IMU_WriteOneByte>
 80010ca:	4603      	mov	r3, r0
 80010cc:	461a      	mov	r2, r3
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <IMU_Initialise+0x17c>)
 80010d0:	701a      	strb	r2, [r3, #0]
			REG_VAL_BIT_ACCEL_DLPCFG_6 | REG_VAL_BIT_ACCEL_FS_2g
					| REG_VAL_BIT_ACCEL_DLPF);

	IMU_WriteOneByte(dev, REG_ADD_TEMP_CONFIG, REG_VAL_TEMP_CONFIG); // Temp configuration pg 67
 80010d2:	2200      	movs	r2, #0
 80010d4:	2153      	movs	r1, #83	; 0x53
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f000 f818 	bl	800110c <IMU_WriteOneByte>

	IMU_WriteOneByte(dev, 0x15, 0x03);
 80010dc:	2203      	movs	r2, #3
 80010de:	2115      	movs	r1, #21
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f000 f813 	bl	800110c <IMU_WriteOneByte>
	// back to bank 0
	ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	217f      	movs	r1, #127	; 0x7f
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f000 f80e 	bl	800110c <IMU_WriteOneByte>
 80010f0:	4603      	mov	r3, r0
 80010f2:	461a      	mov	r2, r3
 80010f4:	4b04      	ldr	r3, [pc, #16]	; (8001108 <IMU_Initialise+0x17c>)
 80010f6:	701a      	strb	r2, [r3, #0]

	osDelay(100);
 80010f8:	2064      	movs	r0, #100	; 0x64
 80010fa:	f00a fe13 	bl	800bd24 <osDelay>
	//Gyro_calibrate(dev);  // calibrate the offset of the gyroscope

	// everthing OK
	//strcpy((char*)buf, "Initialize OK\r\n");
	//return &buf;
	return 0; // 0 means 0 error
 80010fe:	2300      	movs	r3, #0

}
 8001100:	4618      	mov	r0, r3
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000258 	.word	0x20000258

0800110c <IMU_WriteOneByte>:

HAL_StatusTypeDef IMU_WriteOneByte(ICM20948 *dev, uint8_t reg, uint8_t data) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af04      	add	r7, sp, #16
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	70fb      	strb	r3, [r7, #3]
 8001118:	4613      	mov	r3, r2
 800111a:	70bb      	strb	r3, [r7, #2]

	return HAL_I2C_Mem_Write(dev->i2cHandle, IMU_ADDR, reg, 1, &data, 1, 100);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6818      	ldr	r0, [r3, #0]
 8001120:	23d0      	movs	r3, #208	; 0xd0
 8001122:	b299      	uxth	r1, r3
 8001124:	78fb      	ldrb	r3, [r7, #3]
 8001126:	b29a      	uxth	r2, r3
 8001128:	2364      	movs	r3, #100	; 0x64
 800112a:	9302      	str	r3, [sp, #8]
 800112c:	2301      	movs	r3, #1
 800112e:	9301      	str	r3, [sp, #4]
 8001130:	1cbb      	adds	r3, r7, #2
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	2301      	movs	r3, #1
 8001136:	f006 fb59 	bl	80077ec <HAL_I2C_Mem_Write>
 800113a:	4603      	mov	r3, r0

}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <IMU_ReadOneByte>:

HAL_StatusTypeDef IMU_ReadOneByte(ICM20948 *dev, uint8_t reg, uint8_t *data) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af04      	add	r7, sp, #16
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	460b      	mov	r3, r1
 800114e:	607a      	str	r2, [r7, #4]
 8001150:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read(dev->i2cHandle, IMU_ADDR, reg, 1, data, 1, 100);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	6818      	ldr	r0, [r3, #0]
 8001156:	23d0      	movs	r3, #208	; 0xd0
 8001158:	b299      	uxth	r1, r3
 800115a:	7afb      	ldrb	r3, [r7, #11]
 800115c:	b29a      	uxth	r2, r3
 800115e:	2364      	movs	r3, #100	; 0x64
 8001160:	9302      	str	r3, [sp, #8]
 8001162:	2301      	movs	r3, #1
 8001164:	9301      	str	r3, [sp, #4]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	2301      	movs	r3, #1
 800116c:	f006 fc38 	bl	80079e0 <HAL_I2C_Mem_Read>
 8001170:	4603      	mov	r3, r0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <Mag_WriteOneByte>:

HAL_StatusTypeDef Mag_WriteOneByte(ICM20948 *dev, uint8_t reg, uint8_t data) {
 800117a:	b580      	push	{r7, lr}
 800117c:	b086      	sub	sp, #24
 800117e:	af04      	add	r7, sp, #16
 8001180:	6078      	str	r0, [r7, #4]
 8001182:	460b      	mov	r3, r1
 8001184:	70fb      	strb	r3, [r7, #3]
 8001186:	4613      	mov	r3, r2
 8001188:	70bb      	strb	r3, [r7, #2]

	return HAL_I2C_Mem_Write(dev->i2cHandle, MAG_ADDR, reg, 1, &data, 1, 100);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6818      	ldr	r0, [r3, #0]
 800118e:	2318      	movs	r3, #24
 8001190:	b299      	uxth	r1, r3
 8001192:	78fb      	ldrb	r3, [r7, #3]
 8001194:	b29a      	uxth	r2, r3
 8001196:	2364      	movs	r3, #100	; 0x64
 8001198:	9302      	str	r3, [sp, #8]
 800119a:	2301      	movs	r3, #1
 800119c:	9301      	str	r3, [sp, #4]
 800119e:	1cbb      	adds	r3, r7, #2
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	2301      	movs	r3, #1
 80011a4:	f006 fb22 	bl	80077ec <HAL_I2C_Mem_Write>
 80011a8:	4603      	mov	r3, r0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <IMU_AccelRead>:
	ret = IMU_ReadOneByte(dev, REG_ADD_TEMP_OUT_H, &u8Buf[1]);
	tempRaw = (u8Buf[1] << 8) | u8Buf[0];
	dev->temp_C = (tempRaw) / 333.81 + 21; // assuming no further offset apart from 21 dec C
}

HAL_StatusTypeDef IMU_AccelRead(ICM20948 *dev) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	uint8_t u8Buf[2] = { 0 }; // reset to zero
 80011bc:	2300      	movs	r3, #0
 80011be:	83bb      	strh	r3, [r7, #28]
	int16_t accRaw[3] = { 0 };  // reset to zero
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	809a      	strh	r2, [r3, #4]

	ret = IMU_ReadOneByte(dev, REG_ADD_ACCEL_XOUT_L, &u8Buf[0]);
 80011ca:	f107 031c 	add.w	r3, r7, #28
 80011ce:	461a      	mov	r2, r3
 80011d0:	212e      	movs	r1, #46	; 0x2e
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff ffb6 	bl	8001144 <IMU_ReadOneByte>
 80011d8:	4603      	mov	r3, r0
 80011da:	461a      	mov	r2, r3
 80011dc:	4b5e      	ldr	r3, [pc, #376]	; (8001358 <IMU_AccelRead+0x1a4>)
 80011de:	701a      	strb	r2, [r3, #0]
	ret = IMU_ReadOneByte(dev, REG_ADD_ACCEL_XOUT_H, &u8Buf[1]);
 80011e0:	f107 031c 	add.w	r3, r7, #28
 80011e4:	3301      	adds	r3, #1
 80011e6:	461a      	mov	r2, r3
 80011e8:	212d      	movs	r1, #45	; 0x2d
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff ffaa 	bl	8001144 <IMU_ReadOneByte>
 80011f0:	4603      	mov	r3, r0
 80011f2:	461a      	mov	r2, r3
 80011f4:	4b58      	ldr	r3, [pc, #352]	; (8001358 <IMU_AccelRead+0x1a4>)
 80011f6:	701a      	strb	r2, [r3, #0]
	accRaw[0] = (u8Buf[1] << 8) | u8Buf[0];
 80011f8:	7f7b      	ldrb	r3, [r7, #29]
 80011fa:	021b      	lsls	r3, r3, #8
 80011fc:	b21a      	sxth	r2, r3
 80011fe:	7f3b      	ldrb	r3, [r7, #28]
 8001200:	b21b      	sxth	r3, r3
 8001202:	4313      	orrs	r3, r2
 8001204:	b21b      	sxth	r3, r3
 8001206:	82bb      	strh	r3, [r7, #20]

	ret = IMU_ReadOneByte(dev, REG_ADD_ACCEL_YOUT_L, &u8Buf[0]);
 8001208:	f107 031c 	add.w	r3, r7, #28
 800120c:	461a      	mov	r2, r3
 800120e:	2130      	movs	r1, #48	; 0x30
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff97 	bl	8001144 <IMU_ReadOneByte>
 8001216:	4603      	mov	r3, r0
 8001218:	461a      	mov	r2, r3
 800121a:	4b4f      	ldr	r3, [pc, #316]	; (8001358 <IMU_AccelRead+0x1a4>)
 800121c:	701a      	strb	r2, [r3, #0]
	ret = IMU_ReadOneByte(dev, REG_ADD_ACCEL_YOUT_H, &u8Buf[1]);
 800121e:	f107 031c 	add.w	r3, r7, #28
 8001222:	3301      	adds	r3, #1
 8001224:	461a      	mov	r2, r3
 8001226:	212f      	movs	r1, #47	; 0x2f
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ff8b 	bl	8001144 <IMU_ReadOneByte>
 800122e:	4603      	mov	r3, r0
 8001230:	461a      	mov	r2, r3
 8001232:	4b49      	ldr	r3, [pc, #292]	; (8001358 <IMU_AccelRead+0x1a4>)
 8001234:	701a      	strb	r2, [r3, #0]
	accRaw[1] = (u8Buf[1] << 8) | u8Buf[0];
 8001236:	7f7b      	ldrb	r3, [r7, #29]
 8001238:	021b      	lsls	r3, r3, #8
 800123a:	b21a      	sxth	r2, r3
 800123c:	7f3b      	ldrb	r3, [r7, #28]
 800123e:	b21b      	sxth	r3, r3
 8001240:	4313      	orrs	r3, r2
 8001242:	b21b      	sxth	r3, r3
 8001244:	82fb      	strh	r3, [r7, #22]

	ret = IMU_ReadOneByte(dev, REG_ADD_ACCEL_ZOUT_L, &u8Buf[0]);
 8001246:	f107 031c 	add.w	r3, r7, #28
 800124a:	461a      	mov	r2, r3
 800124c:	2132      	movs	r1, #50	; 0x32
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff ff78 	bl	8001144 <IMU_ReadOneByte>
 8001254:	4603      	mov	r3, r0
 8001256:	461a      	mov	r2, r3
 8001258:	4b3f      	ldr	r3, [pc, #252]	; (8001358 <IMU_AccelRead+0x1a4>)
 800125a:	701a      	strb	r2, [r3, #0]
	ret = IMU_ReadOneByte(dev, REG_ADD_ACCEL_ZOUT_H, &u8Buf[1]);
 800125c:	f107 031c 	add.w	r3, r7, #28
 8001260:	3301      	adds	r3, #1
 8001262:	461a      	mov	r2, r3
 8001264:	2131      	movs	r1, #49	; 0x31
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff ff6c 	bl	8001144 <IMU_ReadOneByte>
 800126c:	4603      	mov	r3, r0
 800126e:	461a      	mov	r2, r3
 8001270:	4b39      	ldr	r3, [pc, #228]	; (8001358 <IMU_AccelRead+0x1a4>)
 8001272:	701a      	strb	r2, [r3, #0]
	accRaw[2] = (u8Buf[1] << 8) | u8Buf[0];
 8001274:	7f7b      	ldrb	r3, [r7, #29]
 8001276:	021b      	lsls	r3, r3, #8
 8001278:	b21a      	sxth	r2, r3
 800127a:	7f3b      	ldrb	r3, [r7, #28]
 800127c:	b21b      	sxth	r3, r3
 800127e:	4313      	orrs	r3, r2
 8001280:	b21b      	sxth	r3, r3
 8001282:	833b      	strh	r3, [r7, #24]

	/* Convert to SIGNED integers (two's complement) */
	int32_t accRawSigned[3];

	if ((accRaw[0] & 0x00080000) == 0x00080000)
 8001284:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001288:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d007      	beq.n	80012a0 <IMU_AccelRead+0xec>
		accRawSigned[0] = accRaw[0] | 0xFFF00000;
 8001290:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001294:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 8001298:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	e002      	b.n	80012a6 <IMU_AccelRead+0xf2>
	else
		accRawSigned[0] = accRaw[0];
 80012a0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012a4:	60bb      	str	r3, [r7, #8]

	if ((accRaw[1] & 0x00080000) == 0x00080000)
 80012a6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d007      	beq.n	80012c2 <IMU_AccelRead+0x10e>
		accRawSigned[1] = accRaw[1] | 0xFFF00000;
 80012b2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012b6:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 80012ba:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	e002      	b.n	80012c8 <IMU_AccelRead+0x114>
	else
		accRawSigned[1] = accRaw[1];
 80012c2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012c6:	60fb      	str	r3, [r7, #12]

	if ((accRaw[2] & 0x00080000) == 0x000080000)
 80012c8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d007      	beq.n	80012e4 <IMU_AccelRead+0x130>
		accRawSigned[2] = accRaw[2] | 0xFFF00000;
 80012d4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012d8:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 80012dc:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	e002      	b.n	80012ea <IMU_AccelRead+0x136>
	else
		accRawSigned[2] = accRaw[2];
 80012e4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012e8:	613b      	str	r3, [r7, #16]

	// accel full scale set to +/-2G, sensitivity scale factor = 16384 LSB/g
	dev->acc[0] = 0.00006103515625f * accRawSigned[0] * 9.81f;
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	ee07 3a90 	vmov	s15, r3
 80012f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800135c <IMU_AccelRead+0x1a8>
 80012f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012fc:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001360 <IMU_AccelRead+0x1ac>
 8001300:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	edc3 7a01 	vstr	s15, [r3, #4]
	dev->acc[1] = 0.00006103515625f * accRawSigned[1] * 9.81f;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	ee07 3a90 	vmov	s15, r3
 8001310:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001314:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800135c <IMU_AccelRead+0x1a8>
 8001318:	ee67 7a87 	vmul.f32	s15, s15, s14
 800131c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001360 <IMU_AccelRead+0x1ac>
 8001320:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	edc3 7a02 	vstr	s15, [r3, #8]
	dev->acc[2] = 0.00006103515625f * accRawSigned[2] * 9.81f; // * 9.81f
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	ee07 3a90 	vmov	s15, r3
 8001330:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001334:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800135c <IMU_AccelRead+0x1a8>
 8001338:	ee67 7a87 	vmul.f32	s15, s15, s14
 800133c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001360 <IMU_AccelRead+0x1ac>
 8001340:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	edc3 7a03 	vstr	s15, [r3, #12]

	return ret;
 800134a:	4b03      	ldr	r3, [pc, #12]	; (8001358 <IMU_AccelRead+0x1a4>)
 800134c:	781b      	ldrb	r3, [r3, #0]

}
 800134e:	4618      	mov	r0, r3
 8001350:	3720      	adds	r7, #32
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000258 	.word	0x20000258
 800135c:	38800000 	.word	0x38800000
 8001360:	411cf5c3 	.word	0x411cf5c3

08001364 <Gyro_calibrate>:

HAL_StatusTypeDef Gyro_calibrate(ICM20948 *dev) // calibrate the offset of the gyro
// store the offset in int16_t gyro_offset[3]
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	uint8_t u8Buf[2] = { 0 }; // reset to zero upon entry
 800136c:	2300      	movs	r3, #0
 800136e:	823b      	strh	r3, [r7, #16]
	int16_t gyroRaw[3] = { 0 }; // reset to zero upon entry
 8001370:	f107 0308 	add.w	r3, r7, #8
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	809a      	strh	r2, [r3, #4]
	int8_t i;
	int16_t temp;

	for (i = 0; i < 32; i++) {
 800137a:	2300      	movs	r3, #0
 800137c:	75fb      	strb	r3, [r7, #23]
 800137e:	e06c      	b.n	800145a <Gyro_calibrate+0xf6>
		IMU_ReadOneByte(dev, REG_ADD_GYRO_XOUT_L, &u8Buf[0]);
 8001380:	f107 0310 	add.w	r3, r7, #16
 8001384:	461a      	mov	r2, r3
 8001386:	2134      	movs	r1, #52	; 0x34
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff fedb 	bl	8001144 <IMU_ReadOneByte>
		IMU_ReadOneByte(dev, REG_ADD_GYRO_XOUT_H, &u8Buf[1]);
 800138e:	f107 0310 	add.w	r3, r7, #16
 8001392:	3301      	adds	r3, #1
 8001394:	461a      	mov	r2, r3
 8001396:	2133      	movs	r1, #51	; 0x33
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff fed3 	bl	8001144 <IMU_ReadOneByte>
		temp = (u8Buf[1] << 8) | u8Buf[0]; // for debugging
 800139e:	7c7b      	ldrb	r3, [r7, #17]
 80013a0:	021b      	lsls	r3, r3, #8
 80013a2:	b21a      	sxth	r2, r3
 80013a4:	7c3b      	ldrb	r3, [r7, #16]
 80013a6:	b21b      	sxth	r3, r3
 80013a8:	4313      	orrs	r3, r2
 80013aa:	82bb      	strh	r3, [r7, #20]
		gyroRaw[0] = temp + gyroRaw[0];
 80013ac:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	8abb      	ldrh	r3, [r7, #20]
 80013b4:	4413      	add	r3, r2
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	b21b      	sxth	r3, r3
 80013ba:	813b      	strh	r3, [r7, #8]
		//gyroRaw[0] = (u8Buf[1]<<8)|u8Buf[0] + gyroRaw[0];
osDelay(1);
 80013bc:	2001      	movs	r0, #1
 80013be:	f00a fcb1 	bl	800bd24 <osDelay>
		IMU_ReadOneByte(dev, REG_ADD_GYRO_YOUT_L, &u8Buf[0]);
 80013c2:	f107 0310 	add.w	r3, r7, #16
 80013c6:	461a      	mov	r2, r3
 80013c8:	2136      	movs	r1, #54	; 0x36
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff feba 	bl	8001144 <IMU_ReadOneByte>
		IMU_ReadOneByte(dev, REG_ADD_GYRO_YOUT_H, &u8Buf[1]);
 80013d0:	f107 0310 	add.w	r3, r7, #16
 80013d4:	3301      	adds	r3, #1
 80013d6:	461a      	mov	r2, r3
 80013d8:	2135      	movs	r1, #53	; 0x35
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff feb2 	bl	8001144 <IMU_ReadOneByte>
		gyroRaw[1] = ((u8Buf[1] << 8) | u8Buf[0]) + gyroRaw[1];
 80013e0:	7c7b      	ldrb	r3, [r7, #17]
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	b21a      	sxth	r2, r3
 80013e6:	7c3b      	ldrb	r3, [r7, #16]
 80013e8:	b21b      	sxth	r3, r3
 80013ea:	4313      	orrs	r3, r2
 80013ec:	b21b      	sxth	r3, r3
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	4413      	add	r3, r2
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	b21b      	sxth	r3, r3
 80013fc:	817b      	strh	r3, [r7, #10]
		osDelay(1);
 80013fe:	2001      	movs	r0, #1
 8001400:	f00a fc90 	bl	800bd24 <osDelay>
		IMU_ReadOneByte(dev, REG_ADD_GYRO_ZOUT_L, &u8Buf[0]);
 8001404:	f107 0310 	add.w	r3, r7, #16
 8001408:	461a      	mov	r2, r3
 800140a:	2138      	movs	r1, #56	; 0x38
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff fe99 	bl	8001144 <IMU_ReadOneByte>
		ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_ZOUT_H, &u8Buf[1]);
 8001412:	f107 0310 	add.w	r3, r7, #16
 8001416:	3301      	adds	r3, #1
 8001418:	461a      	mov	r2, r3
 800141a:	2137      	movs	r1, #55	; 0x37
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff fe91 	bl	8001144 <IMU_ReadOneByte>
 8001422:	4603      	mov	r3, r0
 8001424:	461a      	mov	r2, r3
 8001426:	4b22      	ldr	r3, [pc, #136]	; (80014b0 <Gyro_calibrate+0x14c>)
 8001428:	701a      	strb	r2, [r3, #0]
		gyroRaw[2] = ((u8Buf[1] << 8) | u8Buf[0]) + gyroRaw[2];
 800142a:	7c7b      	ldrb	r3, [r7, #17]
 800142c:	021b      	lsls	r3, r3, #8
 800142e:	b21a      	sxth	r2, r3
 8001430:	7c3b      	ldrb	r3, [r7, #16]
 8001432:	b21b      	sxth	r3, r3
 8001434:	4313      	orrs	r3, r2
 8001436:	b21b      	sxth	r3, r3
 8001438:	b29a      	uxth	r2, r3
 800143a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800143e:	b29b      	uxth	r3, r3
 8001440:	4413      	add	r3, r2
 8001442:	b29b      	uxth	r3, r3
 8001444:	b21b      	sxth	r3, r3
 8001446:	81bb      	strh	r3, [r7, #12]

		osDelay(25); // wait for 100msec
 8001448:	2019      	movs	r0, #25
 800144a:	f00a fc6b 	bl	800bd24 <osDelay>
	for (i = 0; i < 32; i++) {
 800144e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001452:	b2db      	uxtb	r3, r3
 8001454:	3301      	adds	r3, #1
 8001456:	b2db      	uxtb	r3, r3
 8001458:	75fb      	strb	r3, [r7, #23]
 800145a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800145e:	2b1f      	cmp	r3, #31
 8001460:	dd8e      	ble.n	8001380 <Gyro_calibrate+0x1c>
	}

	dev->gyro_bias[0] = (float)(gyroRaw[0] >> 5);  // average of 32 reads
 8001462:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001466:	115b      	asrs	r3, r3, #5
 8001468:	b21b      	sxth	r3, r3
 800146a:	ee07 3a90 	vmov	s15, r3
 800146e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	dev->gyro_bias[1] = (float)(gyroRaw[1] >> 5);
 8001478:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800147c:	115b      	asrs	r3, r3, #5
 800147e:	b21b      	sxth	r3, r3
 8001480:	ee07 3a90 	vmov	s15, r3
 8001484:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	dev->gyro_bias[2] = (float)(gyroRaw[2] >> 5);
 800148e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001492:	115b      	asrs	r3, r3, #5
 8001494:	b21b      	sxth	r3, r3
 8001496:	ee07 3a90 	vmov	s15, r3
 800149a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c


	return ret;
 80014a4:	4b02      	ldr	r3, [pc, #8]	; (80014b0 <Gyro_calibrate+0x14c>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000258 	.word	0x20000258

080014b4 <IMU_GyroRead>:

HAL_StatusTypeDef IMU_GyroRead(ICM20948 *dev) { // return the change in value instead of current value
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	; 0x28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	uint8_t u8Buf[2] = { 0 }; // reset to zero
 80014bc:	2300      	movs	r3, #0
 80014be:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t gyroRaw[3] = { 0 };  // reset to zero
 80014c0:	f107 031c 	add.w	r3, r7, #28
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	809a      	strh	r2, [r3, #4]
	int16_t gyroDiff[3];
	int16_t temp;

	ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_YOUT_L, &u8Buf[0]);
 80014ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ce:	461a      	mov	r2, r3
 80014d0:	2136      	movs	r1, #54	; 0x36
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff fe36 	bl	8001144 <IMU_ReadOneByte>
 80014d8:	4603      	mov	r3, r0
 80014da:	461a      	mov	r2, r3
 80014dc:	4b58      	ldr	r3, [pc, #352]	; (8001640 <IMU_GyroRead+0x18c>)
 80014de:	701a      	strb	r2, [r3, #0]
	ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_YOUT_H, &u8Buf[1]);
 80014e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e4:	3301      	adds	r3, #1
 80014e6:	461a      	mov	r2, r3
 80014e8:	2135      	movs	r1, #53	; 0x35
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff fe2a 	bl	8001144 <IMU_ReadOneByte>
 80014f0:	4603      	mov	r3, r0
 80014f2:	461a      	mov	r2, r3
 80014f4:	4b52      	ldr	r3, [pc, #328]	; (8001640 <IMU_GyroRead+0x18c>)
 80014f6:	701a      	strb	r2, [r3, #0]
	gyroRaw[1] = (u8Buf[1] << 8) | u8Buf[0];
 80014f8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80014fc:	021b      	lsls	r3, r3, #8
 80014fe:	b21a      	sxth	r2, r3
 8001500:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001504:	b21b      	sxth	r3, r3
 8001506:	4313      	orrs	r3, r2
 8001508:	b21b      	sxth	r3, r3
 800150a:	83fb      	strh	r3, [r7, #30]


	ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_ZOUT_L, &u8Buf[0]);
 800150c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001510:	461a      	mov	r2, r3
 8001512:	2138      	movs	r1, #56	; 0x38
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff fe15 	bl	8001144 <IMU_ReadOneByte>
 800151a:	4603      	mov	r3, r0
 800151c:	461a      	mov	r2, r3
 800151e:	4b48      	ldr	r3, [pc, #288]	; (8001640 <IMU_GyroRead+0x18c>)
 8001520:	701a      	strb	r2, [r3, #0]
	ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_ZOUT_H, &u8Buf[1]);
 8001522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001526:	3301      	adds	r3, #1
 8001528:	461a      	mov	r2, r3
 800152a:	2137      	movs	r1, #55	; 0x37
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff fe09 	bl	8001144 <IMU_ReadOneByte>
 8001532:	4603      	mov	r3, r0
 8001534:	461a      	mov	r2, r3
 8001536:	4b42      	ldr	r3, [pc, #264]	; (8001640 <IMU_GyroRead+0x18c>)
 8001538:	701a      	strb	r2, [r3, #0]
	gyroRaw[2] = (u8Buf[1] << 8) | u8Buf[0];
 800153a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800153e:	021b      	lsls	r3, r3, #8
 8001540:	b21a      	sxth	r2, r3
 8001542:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001546:	b21b      	sxth	r3, r3
 8001548:	4313      	orrs	r3, r2
 800154a:	b21b      	sxth	r3, r3
 800154c:	843b      	strh	r3, [r7, #32]


	ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_XOUT_L, &u8Buf[0]);
 800154e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001552:	461a      	mov	r2, r3
 8001554:	2134      	movs	r1, #52	; 0x34
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff fdf4 	bl	8001144 <IMU_ReadOneByte>
 800155c:	4603      	mov	r3, r0
 800155e:	461a      	mov	r2, r3
 8001560:	4b37      	ldr	r3, [pc, #220]	; (8001640 <IMU_GyroRead+0x18c>)
 8001562:	701a      	strb	r2, [r3, #0]
	ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_XOUT_H, &u8Buf[1]);
 8001564:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001568:	3301      	adds	r3, #1
 800156a:	461a      	mov	r2, r3
 800156c:	2133      	movs	r1, #51	; 0x33
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff fde8 	bl	8001144 <IMU_ReadOneByte>
 8001574:	4603      	mov	r3, r0
 8001576:	461a      	mov	r2, r3
 8001578:	4b31      	ldr	r3, [pc, #196]	; (8001640 <IMU_GyroRead+0x18c>)
 800157a:	701a      	strb	r2, [r3, #0]
	temp = (u8Buf[1] << 8) | u8Buf[0]; // for debugging
 800157c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001580:	021b      	lsls	r3, r3, #8
 8001582:	b21a      	sxth	r2, r3
 8001584:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001588:	b21b      	sxth	r3, r3
 800158a:	4313      	orrs	r3, r2
 800158c:	84fb      	strh	r3, [r7, #38]	; 0x26
	gyroRaw[0] = (u8Buf[1] << 8) | u8Buf[0];
 800158e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001592:	021b      	lsls	r3, r3, #8
 8001594:	b21a      	sxth	r2, r3
 8001596:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800159a:	b21b      	sxth	r3, r3
 800159c:	4313      	orrs	r3, r2
 800159e:	b21b      	sxth	r3, r3
 80015a0:	83bb      	strh	r3, [r7, #28]

	float gyroRawFloat[3] = {0};
 80015a2:	f107 0308 	add.w	r3, r7, #8
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]
	gyroRawFloat[0] = gyroRaw[0] - dev->gyro_bias[0];
 80015ae:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80015b2:	ee07 3a90 	vmov	s15, r3
 80015b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80015c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015c4:	edc7 7a02 	vstr	s15, [r7, #8]
	gyroRawFloat[1] = gyroRaw[1] - dev->gyro_bias[1];
 80015c8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80015cc:	ee07 3a90 	vmov	s15, r3
 80015d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80015da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015de:	edc7 7a03 	vstr	s15, [r7, #12]
	gyroRawFloat[2] = gyroRaw[2] - dev->gyro_bias[2];
 80015e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80015e6:	ee07 3a90 	vmov	s15, r3
 80015ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80015f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015f8:	edc7 7a04 	vstr	s15, [r7, #16]
	// gyro full scale set to +/-500 dps, sensitivity scale factor = 65.5 LSB/dps
	// degree per second = value/65.5



	dev->gyro[0] = 0.06106870229f * gyroRawFloat[0];
 80015fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001600:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001644 <IMU_GyroRead+0x190>
 8001604:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	edc3 7a04 	vstr	s15, [r3, #16]
	dev->gyro[1] = 0.06106870229f * gyroRawFloat[1];
 800160e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001612:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001644 <IMU_GyroRead+0x190>
 8001616:	ee67 7a87 	vmul.f32	s15, s15, s14
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	edc3 7a05 	vstr	s15, [r3, #20]
	dev->gyro[2] = 0.06106870229f * gyroRawFloat[2];
 8001620:	edd7 7a04 	vldr	s15, [r7, #16]
 8001624:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001644 <IMU_GyroRead+0x190>
 8001628:	ee67 7a87 	vmul.f32	s15, s15, s14
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	edc3 7a06 	vstr	s15, [r3, #24]

	return ret;
 8001632:	4b03      	ldr	r3, [pc, #12]	; (8001640 <IMU_GyroRead+0x18c>)
 8001634:	781b      	ldrb	r3, [r3, #0]

}
 8001636:	4618      	mov	r0, r3
 8001638:	3728      	adds	r7, #40	; 0x28
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000258 	.word	0x20000258
 8001644:	3d7a232d 	.word	0x3d7a232d

08001648 <Mag_init>:

HAL_StatusTypeDef Mag_init(ICM20948 *dev) {
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	73fb      	strb	r3, [r7, #15]

	Mag_WriteOneByte(dev, AK09916__CNTL2__REGISTER, REG_VAL_MAG_MODE_10HZ);
 8001654:	2202      	movs	r2, #2
 8001656:	2131      	movs	r1, #49	; 0x31
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7ff fd8e 	bl	800117a <Mag_WriteOneByte>

}
 800165e:	bf00      	nop
 8001660:	4618      	mov	r0, r3
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <OLED_Refresh_Gram>:
#include "stdbool.h"
#include "oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800166e:	2300      	movs	r3, #0
 8001670:	71fb      	strb	r3, [r7, #7]
 8001672:	e026      	b.n	80016c2 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	3b50      	subs	r3, #80	; 0x50
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2100      	movs	r1, #0
 800167c:	4618      	mov	r0, r3
 800167e:	f000 f82b 	bl	80016d8 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8001682:	2100      	movs	r1, #0
 8001684:	2000      	movs	r0, #0
 8001686:	f000 f827 	bl	80016d8 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800168a:	2100      	movs	r1, #0
 800168c:	2010      	movs	r0, #16
 800168e:	f000 f823 	bl	80016d8 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8001692:	2300      	movs	r3, #0
 8001694:	71bb      	strb	r3, [r7, #6]
 8001696:	e00d      	b.n	80016b4 <OLED_Refresh_Gram+0x4c>
 8001698:	79ba      	ldrb	r2, [r7, #6]
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	490d      	ldr	r1, [pc, #52]	; (80016d4 <OLED_Refresh_Gram+0x6c>)
 800169e:	00d2      	lsls	r2, r2, #3
 80016a0:	440a      	add	r2, r1
 80016a2:	4413      	add	r3, r2
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2101      	movs	r1, #1
 80016a8:	4618      	mov	r0, r3
 80016aa:	f000 f815 	bl	80016d8 <OLED_WR_Byte>
 80016ae:	79bb      	ldrb	r3, [r7, #6]
 80016b0:	3301      	adds	r3, #1
 80016b2:	71bb      	strb	r3, [r7, #6]
 80016b4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	daed      	bge.n	8001698 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	3301      	adds	r3, #1
 80016c0:	71fb      	strb	r3, [r7, #7]
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	2b07      	cmp	r3, #7
 80016c6:	d9d5      	bls.n	8001674 <OLED_Refresh_Gram+0xc>
	}   
}
 80016c8:	bf00      	nop
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	2000025c 	.word	0x2000025c

080016d8 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	460a      	mov	r2, r1
 80016e2:	71fb      	strb	r3, [r7, #7]
 80016e4:	4613      	mov	r3, r2
 80016e6:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 80016e8:	79bb      	ldrb	r3, [r7, #6]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d006      	beq.n	80016fc <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 80016ee:	2201      	movs	r2, #1
 80016f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016f4:	481c      	ldr	r0, [pc, #112]	; (8001768 <OLED_WR_Byte+0x90>)
 80016f6:	f005 fee9 	bl	80074cc <HAL_GPIO_WritePin>
 80016fa:	e005      	b.n	8001708 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 80016fc:	2200      	movs	r2, #0
 80016fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001702:	4819      	ldr	r0, [pc, #100]	; (8001768 <OLED_WR_Byte+0x90>)
 8001704:	f005 fee2 	bl	80074cc <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8001708:	2300      	movs	r3, #0
 800170a:	73fb      	strb	r3, [r7, #15]
 800170c:	e01e      	b.n	800174c <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 800170e:	2200      	movs	r2, #0
 8001710:	2120      	movs	r1, #32
 8001712:	4815      	ldr	r0, [pc, #84]	; (8001768 <OLED_WR_Byte+0x90>)
 8001714:	f005 feda 	bl	80074cc <HAL_GPIO_WritePin>
		if(dat&0x80)
 8001718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171c:	2b00      	cmp	r3, #0
 800171e:	da05      	bge.n	800172c <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8001720:	2201      	movs	r2, #1
 8001722:	2140      	movs	r1, #64	; 0x40
 8001724:	4810      	ldr	r0, [pc, #64]	; (8001768 <OLED_WR_Byte+0x90>)
 8001726:	f005 fed1 	bl	80074cc <HAL_GPIO_WritePin>
 800172a:	e004      	b.n	8001736 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 800172c:	2200      	movs	r2, #0
 800172e:	2140      	movs	r1, #64	; 0x40
 8001730:	480d      	ldr	r0, [pc, #52]	; (8001768 <OLED_WR_Byte+0x90>)
 8001732:	f005 fecb 	bl	80074cc <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8001736:	2201      	movs	r2, #1
 8001738:	2120      	movs	r1, #32
 800173a:	480b      	ldr	r0, [pc, #44]	; (8001768 <OLED_WR_Byte+0x90>)
 800173c:	f005 fec6 	bl	80074cc <HAL_GPIO_WritePin>
		dat<<=1;   
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8001746:	7bfb      	ldrb	r3, [r7, #15]
 8001748:	3301      	adds	r3, #1
 800174a:	73fb      	strb	r3, [r7, #15]
 800174c:	7bfb      	ldrb	r3, [r7, #15]
 800174e:	2b07      	cmp	r3, #7
 8001750:	d9dd      	bls.n	800170e <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8001752:	2201      	movs	r2, #1
 8001754:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001758:	4803      	ldr	r0, [pc, #12]	; (8001768 <OLED_WR_Byte+0x90>)
 800175a:	f005 feb7 	bl	80074cc <HAL_GPIO_WritePin>
} 
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40021000 	.word	0x40021000

0800176c <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8001772:	2300      	movs	r3, #0
 8001774:	71fb      	strb	r3, [r7, #7]
 8001776:	e014      	b.n	80017a2 <OLED_Clear+0x36>
 8001778:	2300      	movs	r3, #0
 800177a:	71bb      	strb	r3, [r7, #6]
 800177c:	e00a      	b.n	8001794 <OLED_Clear+0x28>
 800177e:	79ba      	ldrb	r2, [r7, #6]
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	490c      	ldr	r1, [pc, #48]	; (80017b4 <OLED_Clear+0x48>)
 8001784:	00d2      	lsls	r2, r2, #3
 8001786:	440a      	add	r2, r1
 8001788:	4413      	add	r3, r2
 800178a:	2200      	movs	r2, #0
 800178c:	701a      	strb	r2, [r3, #0]
 800178e:	79bb      	ldrb	r3, [r7, #6]
 8001790:	3301      	adds	r3, #1
 8001792:	71bb      	strb	r3, [r7, #6]
 8001794:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001798:	2b00      	cmp	r3, #0
 800179a:	daf0      	bge.n	800177e <OLED_Clear+0x12>
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	3301      	adds	r3, #1
 80017a0:	71fb      	strb	r3, [r7, #7]
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	2b07      	cmp	r3, #7
 80017a6:	d9e7      	bls.n	8001778 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 80017a8:	f7ff ff5e 	bl	8001668 <OLED_Refresh_Gram>
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	2000025c 	.word	0x2000025c

080017b8 <OLED_Display_On>:

 /**************************************************************************
Turn On Display
**************************************************************************/  
void OLED_Display_On(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
	OLED_WR_Byte(0X8D,OLED_CMD);  //SET DCDC Command
 80017bc:	2100      	movs	r1, #0
 80017be:	208d      	movs	r0, #141	; 0x8d
 80017c0:	f7ff ff8a 	bl	80016d8 <OLED_WR_Byte>
	OLED_WR_Byte(0X14,OLED_CMD);  //DCDC ON
 80017c4:	2100      	movs	r1, #0
 80017c6:	2014      	movs	r0, #20
 80017c8:	f7ff ff86 	bl	80016d8 <OLED_WR_Byte>
	OLED_WR_Byte(0XAF,OLED_CMD);  //DISPLAY ON
 80017cc:	2100      	movs	r1, #0
 80017ce:	20af      	movs	r0, #175	; 0xaf
 80017d0:	f7ff ff82 	bl	80016d8 <OLED_WR_Byte>
}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
 80017e2:	460b      	mov	r3, r1
 80017e4:	71bb      	strb	r3, [r7, #6]
 80017e6:	4613      	mov	r3, r2
 80017e8:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	db41      	blt.n	800187a <OLED_DrawPoint+0xa2>
 80017f6:	79bb      	ldrb	r3, [r7, #6]
 80017f8:	2b3f      	cmp	r3, #63	; 0x3f
 80017fa:	d83e      	bhi.n	800187a <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 80017fc:	79bb      	ldrb	r3, [r7, #6]
 80017fe:	08db      	lsrs	r3, r3, #3
 8001800:	b2db      	uxtb	r3, r3
 8001802:	f1c3 0307 	rsb	r3, r3, #7
 8001806:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8001808:	79bb      	ldrb	r3, [r7, #6]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8001810:	7b7b      	ldrb	r3, [r7, #13]
 8001812:	f1c3 0307 	rsb	r3, r3, #7
 8001816:	2201      	movs	r2, #1
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800181e:	797b      	ldrb	r3, [r7, #5]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d012      	beq.n	800184a <OLED_DrawPoint+0x72>
 8001824:	79fa      	ldrb	r2, [r7, #7]
 8001826:	7bbb      	ldrb	r3, [r7, #14]
 8001828:	4917      	ldr	r1, [pc, #92]	; (8001888 <OLED_DrawPoint+0xb0>)
 800182a:	00d2      	lsls	r2, r2, #3
 800182c:	440a      	add	r2, r1
 800182e:	4413      	add	r3, r2
 8001830:	7818      	ldrb	r0, [r3, #0]
 8001832:	79fa      	ldrb	r2, [r7, #7]
 8001834:	7bbb      	ldrb	r3, [r7, #14]
 8001836:	7bf9      	ldrb	r1, [r7, #15]
 8001838:	4301      	orrs	r1, r0
 800183a:	b2c8      	uxtb	r0, r1
 800183c:	4912      	ldr	r1, [pc, #72]	; (8001888 <OLED_DrawPoint+0xb0>)
 800183e:	00d2      	lsls	r2, r2, #3
 8001840:	440a      	add	r2, r1
 8001842:	4413      	add	r3, r2
 8001844:	4602      	mov	r2, r0
 8001846:	701a      	strb	r2, [r3, #0]
 8001848:	e018      	b.n	800187c <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800184a:	79fa      	ldrb	r2, [r7, #7]
 800184c:	7bbb      	ldrb	r3, [r7, #14]
 800184e:	490e      	ldr	r1, [pc, #56]	; (8001888 <OLED_DrawPoint+0xb0>)
 8001850:	00d2      	lsls	r2, r2, #3
 8001852:	440a      	add	r2, r1
 8001854:	4413      	add	r3, r2
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	b25a      	sxtb	r2, r3
 800185a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185e:	43db      	mvns	r3, r3
 8001860:	b25b      	sxtb	r3, r3
 8001862:	4013      	ands	r3, r2
 8001864:	b259      	sxtb	r1, r3
 8001866:	79fa      	ldrb	r2, [r7, #7]
 8001868:	7bbb      	ldrb	r3, [r7, #14]
 800186a:	b2c8      	uxtb	r0, r1
 800186c:	4906      	ldr	r1, [pc, #24]	; (8001888 <OLED_DrawPoint+0xb0>)
 800186e:	00d2      	lsls	r2, r2, #3
 8001870:	440a      	add	r2, r1
 8001872:	4413      	add	r3, r2
 8001874:	4602      	mov	r2, r0
 8001876:	701a      	strb	r2, [r3, #0]
 8001878:	e000      	b.n	800187c <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800187a:	bf00      	nop
}
 800187c:	3714      	adds	r7, #20
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	2000025c 	.word	0x2000025c

0800188c <OLED_DrawRect>:


void OLED_DrawRect(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, bool color) {
 800188c:	b590      	push	{r4, r7, lr}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	4604      	mov	r4, r0
 8001894:	4608      	mov	r0, r1
 8001896:	4611      	mov	r1, r2
 8001898:	461a      	mov	r2, r3
 800189a:	4623      	mov	r3, r4
 800189c:	71fb      	strb	r3, [r7, #7]
 800189e:	4603      	mov	r3, r0
 80018a0:	71bb      	strb	r3, [r7, #6]
 80018a2:	460b      	mov	r3, r1
 80018a4:	717b      	strb	r3, [r7, #5]
 80018a6:	4613      	mov	r3, r2
 80018a8:	713b      	strb	r3, [r7, #4]
    // Draw horizontal lines
    for (uint8_t x = x1; x <= x2; x++) {
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	73fb      	strb	r3, [r7, #15]
 80018ae:	e010      	b.n	80018d2 <OLED_DrawRect+0x46>
        OLED_DrawPoint(x, y1, color); // Draw top border
 80018b0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018b4:	79b9      	ldrb	r1, [r7, #6]
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff ff8d 	bl	80017d8 <OLED_DrawPoint>
        OLED_DrawPoint(x, y2, color); // Draw bottom border
 80018be:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018c2:	7939      	ldrb	r1, [r7, #4]
 80018c4:	7bfb      	ldrb	r3, [r7, #15]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff ff86 	bl	80017d8 <OLED_DrawPoint>
    for (uint8_t x = x1; x <= x2; x++) {
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
 80018ce:	3301      	adds	r3, #1
 80018d0:	73fb      	strb	r3, [r7, #15]
 80018d2:	7bfa      	ldrb	r2, [r7, #15]
 80018d4:	797b      	ldrb	r3, [r7, #5]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d9ea      	bls.n	80018b0 <OLED_DrawRect+0x24>
    }

    // Draw vertical lines
    for (uint8_t y = y1; y <= y2; y++) {
 80018da:	79bb      	ldrb	r3, [r7, #6]
 80018dc:	73bb      	strb	r3, [r7, #14]
 80018de:	e010      	b.n	8001902 <OLED_DrawRect+0x76>
        OLED_DrawPoint(x1, y, color); // Draw left border
 80018e0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018e4:	7bb9      	ldrb	r1, [r7, #14]
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff75 	bl	80017d8 <OLED_DrawPoint>
        OLED_DrawPoint(x2, y, color); // Draw right border
 80018ee:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018f2:	7bb9      	ldrb	r1, [r7, #14]
 80018f4:	797b      	ldrb	r3, [r7, #5]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff ff6e 	bl	80017d8 <OLED_DrawPoint>
    for (uint8_t y = y1; y <= y2; y++) {
 80018fc:	7bbb      	ldrb	r3, [r7, #14]
 80018fe:	3301      	adds	r3, #1
 8001900:	73bb      	strb	r3, [r7, #14]
 8001902:	7bba      	ldrb	r2, [r7, #14]
 8001904:	793b      	ldrb	r3, [r7, #4]
 8001906:	429a      	cmp	r2, r3
 8001908:	d9ea      	bls.n	80018e0 <OLED_DrawRect+0x54>
    }
}
 800190a:	bf00      	nop
 800190c:	bf00      	nop
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	bd90      	pop	{r4, r7, pc}

08001914 <OLED_DrawRectWithFill>:

void OLED_DrawRectWithFill(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, bool color) {
 8001914:	b590      	push	{r4, r7, lr}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	4604      	mov	r4, r0
 800191c:	4608      	mov	r0, r1
 800191e:	4611      	mov	r1, r2
 8001920:	461a      	mov	r2, r3
 8001922:	4623      	mov	r3, r4
 8001924:	71fb      	strb	r3, [r7, #7]
 8001926:	4603      	mov	r3, r0
 8001928:	71bb      	strb	r3, [r7, #6]
 800192a:	460b      	mov	r3, r1
 800192c:	717b      	strb	r3, [r7, #5]
 800192e:	4613      	mov	r3, r2
 8001930:	713b      	strb	r3, [r7, #4]
    // Draw borders
    for (uint8_t x = x1; x <= x2; x++) {
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	73fb      	strb	r3, [r7, #15]
 8001936:	e010      	b.n	800195a <OLED_DrawRectWithFill+0x46>
        OLED_DrawPoint(x, y1, color); // Draw top border
 8001938:	f897 2020 	ldrb.w	r2, [r7, #32]
 800193c:	79b9      	ldrb	r1, [r7, #6]
 800193e:	7bfb      	ldrb	r3, [r7, #15]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff49 	bl	80017d8 <OLED_DrawPoint>
        OLED_DrawPoint(x, y2, color); // Draw bottom border
 8001946:	f897 2020 	ldrb.w	r2, [r7, #32]
 800194a:	7939      	ldrb	r1, [r7, #4]
 800194c:	7bfb      	ldrb	r3, [r7, #15]
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff ff42 	bl	80017d8 <OLED_DrawPoint>
    for (uint8_t x = x1; x <= x2; x++) {
 8001954:	7bfb      	ldrb	r3, [r7, #15]
 8001956:	3301      	adds	r3, #1
 8001958:	73fb      	strb	r3, [r7, #15]
 800195a:	7bfa      	ldrb	r2, [r7, #15]
 800195c:	797b      	ldrb	r3, [r7, #5]
 800195e:	429a      	cmp	r2, r3
 8001960:	d9ea      	bls.n	8001938 <OLED_DrawRectWithFill+0x24>
    }

    for (uint8_t y = y1; y <= y2; y++) {
 8001962:	79bb      	ldrb	r3, [r7, #6]
 8001964:	73bb      	strb	r3, [r7, #14]
 8001966:	e010      	b.n	800198a <OLED_DrawRectWithFill+0x76>
        OLED_DrawPoint(x1, y, color); // Draw left border
 8001968:	f897 2020 	ldrb.w	r2, [r7, #32]
 800196c:	7bb9      	ldrb	r1, [r7, #14]
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff31 	bl	80017d8 <OLED_DrawPoint>
        OLED_DrawPoint(x2, y, color); // Draw right border
 8001976:	f897 2020 	ldrb.w	r2, [r7, #32]
 800197a:	7bb9      	ldrb	r1, [r7, #14]
 800197c:	797b      	ldrb	r3, [r7, #5]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff ff2a 	bl	80017d8 <OLED_DrawPoint>
    for (uint8_t y = y1; y <= y2; y++) {
 8001984:	7bbb      	ldrb	r3, [r7, #14]
 8001986:	3301      	adds	r3, #1
 8001988:	73bb      	strb	r3, [r7, #14]
 800198a:	7bba      	ldrb	r2, [r7, #14]
 800198c:	793b      	ldrb	r3, [r7, #4]
 800198e:	429a      	cmp	r2, r3
 8001990:	d9ea      	bls.n	8001968 <OLED_DrawRectWithFill+0x54>
    }

    // Fill the interior
    for (uint8_t y = y1 + 1; y < y2; y++) {
 8001992:	79bb      	ldrb	r3, [r7, #6]
 8001994:	3301      	adds	r3, #1
 8001996:	737b      	strb	r3, [r7, #13]
 8001998:	e014      	b.n	80019c4 <OLED_DrawRectWithFill+0xb0>
        for (uint8_t x = x1 + 1; x < x2; x++) {
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	3301      	adds	r3, #1
 800199e:	733b      	strb	r3, [r7, #12]
 80019a0:	e009      	b.n	80019b6 <OLED_DrawRectWithFill+0xa2>
            OLED_DrawPoint(x, y, color); // Draw points within the rectangle
 80019a2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80019a6:	7b79      	ldrb	r1, [r7, #13]
 80019a8:	7b3b      	ldrb	r3, [r7, #12]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff ff14 	bl	80017d8 <OLED_DrawPoint>
        for (uint8_t x = x1 + 1; x < x2; x++) {
 80019b0:	7b3b      	ldrb	r3, [r7, #12]
 80019b2:	3301      	adds	r3, #1
 80019b4:	733b      	strb	r3, [r7, #12]
 80019b6:	7b3a      	ldrb	r2, [r7, #12]
 80019b8:	797b      	ldrb	r3, [r7, #5]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d3f1      	bcc.n	80019a2 <OLED_DrawRectWithFill+0x8e>
    for (uint8_t y = y1 + 1; y < y2; y++) {
 80019be:	7b7b      	ldrb	r3, [r7, #13]
 80019c0:	3301      	adds	r3, #1
 80019c2:	737b      	strb	r3, [r7, #13]
 80019c4:	7b7a      	ldrb	r2, [r7, #13]
 80019c6:	793b      	ldrb	r3, [r7, #4]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d3e6      	bcc.n	800199a <OLED_DrawRectWithFill+0x86>
        }
    }
}
 80019cc:	bf00      	nop
 80019ce:	bf00      	nop
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd90      	pop	{r4, r7, pc}

080019d6 <OLED_DrawVerticalLine>:
    for (uint8_t i = x; i < x + length; i++) {
        OLED_DrawPoint(i, y, 1);
    }
}

void OLED_DrawVerticalLine(uint8_t x, uint8_t y, uint8_t length) {
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b084      	sub	sp, #16
 80019da:	af00      	add	r7, sp, #0
 80019dc:	4603      	mov	r3, r0
 80019de:	71fb      	strb	r3, [r7, #7]
 80019e0:	460b      	mov	r3, r1
 80019e2:	71bb      	strb	r3, [r7, #6]
 80019e4:	4613      	mov	r3, r2
 80019e6:	717b      	strb	r3, [r7, #5]
    for (uint8_t i = y; i < y + length; i++) {
 80019e8:	79bb      	ldrb	r3, [r7, #6]
 80019ea:	73fb      	strb	r3, [r7, #15]
 80019ec:	e008      	b.n	8001a00 <OLED_DrawVerticalLine+0x2a>
        OLED_DrawPoint(x, i, 1);
 80019ee:	7bf9      	ldrb	r1, [r7, #15]
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	2201      	movs	r2, #1
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff feef 	bl	80017d8 <OLED_DrawPoint>
    for (uint8_t i = y; i < y + length; i++) {
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
 80019fc:	3301      	adds	r3, #1
 80019fe:	73fb      	strb	r3, [r7, #15]
 8001a00:	7bfa      	ldrb	r2, [r7, #15]
 8001a02:	79b9      	ldrb	r1, [r7, #6]
 8001a04:	797b      	ldrb	r3, [r7, #5]
 8001a06:	440b      	add	r3, r1
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	dbf0      	blt.n	80019ee <OLED_DrawVerticalLine+0x18>
    }
}
 8001a0c:	bf00      	nop
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8001a18:	b590      	push	{r4, r7, lr}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4604      	mov	r4, r0
 8001a20:	4608      	mov	r0, r1
 8001a22:	4611      	mov	r1, r2
 8001a24:	461a      	mov	r2, r3
 8001a26:	4623      	mov	r3, r4
 8001a28:	71fb      	strb	r3, [r7, #7]
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71bb      	strb	r3, [r7, #6]
 8001a2e:	460b      	mov	r3, r1
 8001a30:	717b      	strb	r3, [r7, #5]
 8001a32:	4613      	mov	r3, r2
 8001a34:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 8001a36:	79bb      	ldrb	r3, [r7, #6]
 8001a38:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 8001a3a:	797b      	ldrb	r3, [r7, #5]
 8001a3c:	3b20      	subs	r3, #32
 8001a3e:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8001a40:	2300      	movs	r3, #0
 8001a42:	73bb      	strb	r3, [r7, #14]
 8001a44:	e04d      	b.n	8001ae2 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 8001a46:	793b      	ldrb	r3, [r7, #4]
 8001a48:	2b0c      	cmp	r3, #12
 8001a4a:	d10b      	bne.n	8001a64 <OLED_ShowChar+0x4c>
 8001a4c:	797a      	ldrb	r2, [r7, #5]
 8001a4e:	7bb9      	ldrb	r1, [r7, #14]
 8001a50:	4828      	ldr	r0, [pc, #160]	; (8001af4 <OLED_ShowChar+0xdc>)
 8001a52:	4613      	mov	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	4413      	add	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4403      	add	r3, r0
 8001a5c:	440b      	add	r3, r1
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	73fb      	strb	r3, [r7, #15]
 8001a62:	e007      	b.n	8001a74 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8001a64:	797a      	ldrb	r2, [r7, #5]
 8001a66:	7bbb      	ldrb	r3, [r7, #14]
 8001a68:	4923      	ldr	r1, [pc, #140]	; (8001af8 <OLED_ShowChar+0xe0>)
 8001a6a:	0112      	lsls	r2, r2, #4
 8001a6c:	440a      	add	r2, r1
 8001a6e:	4413      	add	r3, r2
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8001a74:	2300      	movs	r3, #0
 8001a76:	737b      	strb	r3, [r7, #13]
 8001a78:	e02d      	b.n	8001ad6 <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8001a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	da07      	bge.n	8001a92 <OLED_ShowChar+0x7a>
 8001a82:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a86:	79b9      	ldrb	r1, [r7, #6]
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fea4 	bl	80017d8 <OLED_DrawPoint>
 8001a90:	e00c      	b.n	8001aac <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8001a92:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	bf0c      	ite	eq
 8001a9a:	2301      	moveq	r3, #1
 8001a9c:	2300      	movne	r3, #0
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	79b9      	ldrb	r1, [r7, #6]
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff fe96 	bl	80017d8 <OLED_DrawPoint>
			temp<<=1;
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	73fb      	strb	r3, [r7, #15]
			y++;
 8001ab2:	79bb      	ldrb	r3, [r7, #6]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8001ab8:	79ba      	ldrb	r2, [r7, #6]
 8001aba:	7b3b      	ldrb	r3, [r7, #12]
 8001abc:	1ad2      	subs	r2, r2, r3
 8001abe:	793b      	ldrb	r3, [r7, #4]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d105      	bne.n	8001ad0 <OLED_ShowChar+0xb8>
			{
				y=y0;
 8001ac4:	7b3b      	ldrb	r3, [r7, #12]
 8001ac6:	71bb      	strb	r3, [r7, #6]
				x++;
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	3301      	adds	r3, #1
 8001acc:	71fb      	strb	r3, [r7, #7]
				break;
 8001ace:	e005      	b.n	8001adc <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8001ad0:	7b7b      	ldrb	r3, [r7, #13]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	737b      	strb	r3, [r7, #13]
 8001ad6:	7b7b      	ldrb	r3, [r7, #13]
 8001ad8:	2b07      	cmp	r3, #7
 8001ada:	d9ce      	bls.n	8001a7a <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8001adc:	7bbb      	ldrb	r3, [r7, #14]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	73bb      	strb	r3, [r7, #14]
 8001ae2:	7bba      	ldrb	r2, [r7, #14]
 8001ae4:	793b      	ldrb	r3, [r7, #4]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d3ad      	bcc.n	8001a46 <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8001aea:	bf00      	nop
 8001aec:	bf00      	nop
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd90      	pop	{r4, r7, pc}
 8001af4:	0801347c 	.word	0x0801347c
 8001af8:	080138f0 	.word	0x080138f0

08001afc <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af02      	add	r7, sp, #8
 8001b02:	4603      	mov	r3, r0
 8001b04:	603a      	str	r2, [r7, #0]
 8001b06:	71fb      	strb	r3, [r7, #7]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8001b0c:	e01f      	b.n	8001b4e <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	2b7a      	cmp	r3, #122	; 0x7a
 8001b12:	d904      	bls.n	8001b1e <OLED_ShowString+0x22>
 8001b14:	2300      	movs	r3, #0
 8001b16:	71fb      	strb	r3, [r7, #7]
 8001b18:	79bb      	ldrb	r3, [r7, #6]
 8001b1a:	3310      	adds	r3, #16
 8001b1c:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8001b1e:	79bb      	ldrb	r3, [r7, #6]
 8001b20:	2b3a      	cmp	r3, #58	; 0x3a
 8001b22:	d905      	bls.n	8001b30 <OLED_ShowString+0x34>
 8001b24:	2300      	movs	r3, #0
 8001b26:	71fb      	strb	r3, [r7, #7]
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	71bb      	strb	r3, [r7, #6]
 8001b2c:	f7ff fe1e 	bl	800176c <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	781a      	ldrb	r2, [r3, #0]
 8001b34:	79b9      	ldrb	r1, [r7, #6]
 8001b36:	79f8      	ldrb	r0, [r7, #7]
 8001b38:	2301      	movs	r3, #1
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	230c      	movs	r3, #12
 8001b3e:	f7ff ff6b 	bl	8001a18 <OLED_ShowChar>
        x+=8;
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	3308      	adds	r3, #8
 8001b46:	71fb      	strb	r3, [r7, #7]
        p++;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1db      	bne.n	8001b0e <OLED_ShowString+0x12>
    }  
}	 
 8001b56:	bf00      	nop
 8001b58:	bf00      	nop
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <OLED_Init>:

void OLED_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8001b64:	f006 fdec 	bl	8008740 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8001b68:	4b41      	ldr	r3, [pc, #260]	; (8001c70 <OLED_Init+0x110>)
 8001b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6c:	4a40      	ldr	r2, [pc, #256]	; (8001c70 <OLED_Init+0x110>)
 8001b6e:	f023 0301 	bic.w	r3, r3, #1
 8001b72:	6713      	str	r3, [r2, #112]	; 0x70
 8001b74:	4b3e      	ldr	r3, [pc, #248]	; (8001c70 <OLED_Init+0x110>)
 8001b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b78:	4a3d      	ldr	r2, [pc, #244]	; (8001c70 <OLED_Init+0x110>)
 8001b7a:	f023 0304 	bic.w	r3, r3, #4
 8001b7e:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8001b80:	f006 fdf2 	bl	8008768 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8001b84:	2200      	movs	r2, #0
 8001b86:	2180      	movs	r1, #128	; 0x80
 8001b88:	483a      	ldr	r0, [pc, #232]	; (8001c74 <OLED_Init+0x114>)
 8001b8a:	f005 fc9f 	bl	80074cc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001b8e:	2064      	movs	r0, #100	; 0x64
 8001b90:	f004 f9f8 	bl	8005f84 <HAL_Delay>
	OLED_RST_Set();
 8001b94:	2201      	movs	r2, #1
 8001b96:	2180      	movs	r1, #128	; 0x80
 8001b98:	4836      	ldr	r0, [pc, #216]	; (8001c74 <OLED_Init+0x114>)
 8001b9a:	f005 fc97 	bl	80074cc <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	20ae      	movs	r0, #174	; 0xae
 8001ba2:	f7ff fd99 	bl	80016d8 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	20d5      	movs	r0, #213	; 0xd5
 8001baa:	f7ff fd95 	bl	80016d8 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8001bae:	2100      	movs	r1, #0
 8001bb0:	2050      	movs	r0, #80	; 0x50
 8001bb2:	f7ff fd91 	bl	80016d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	20a8      	movs	r0, #168	; 0xa8
 8001bba:	f7ff fd8d 	bl	80016d8 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	203f      	movs	r0, #63	; 0x3f
 8001bc2:	f7ff fd89 	bl	80016d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	20d3      	movs	r0, #211	; 0xd3
 8001bca:	f7ff fd85 	bl	80016d8 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8001bce:	2100      	movs	r1, #0
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	f7ff fd81 	bl	80016d8 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	2040      	movs	r0, #64	; 0x40
 8001bda:	f7ff fd7d 	bl	80016d8 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8001bde:	2100      	movs	r1, #0
 8001be0:	208d      	movs	r0, #141	; 0x8d
 8001be2:	f7ff fd79 	bl	80016d8 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8001be6:	2100      	movs	r1, #0
 8001be8:	2014      	movs	r0, #20
 8001bea:	f7ff fd75 	bl	80016d8 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8001bee:	2100      	movs	r1, #0
 8001bf0:	2020      	movs	r0, #32
 8001bf2:	f7ff fd71 	bl	80016d8 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	2002      	movs	r0, #2
 8001bfa:	f7ff fd6d 	bl	80016d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8001bfe:	2100      	movs	r1, #0
 8001c00:	20a1      	movs	r0, #161	; 0xa1
 8001c02:	f7ff fd69 	bl	80016d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8001c06:	2100      	movs	r1, #0
 8001c08:	20c0      	movs	r0, #192	; 0xc0
 8001c0a:	f7ff fd65 	bl	80016d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8001c0e:	2100      	movs	r1, #0
 8001c10:	20da      	movs	r0, #218	; 0xda
 8001c12:	f7ff fd61 	bl	80016d8 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8001c16:	2100      	movs	r1, #0
 8001c18:	2012      	movs	r0, #18
 8001c1a:	f7ff fd5d 	bl	80016d8 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8001c1e:	2100      	movs	r1, #0
 8001c20:	2081      	movs	r0, #129	; 0x81
 8001c22:	f7ff fd59 	bl	80016d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8001c26:	2100      	movs	r1, #0
 8001c28:	20ef      	movs	r0, #239	; 0xef
 8001c2a:	f7ff fd55 	bl	80016d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8001c2e:	2100      	movs	r1, #0
 8001c30:	20d9      	movs	r0, #217	; 0xd9
 8001c32:	f7ff fd51 	bl	80016d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8001c36:	2100      	movs	r1, #0
 8001c38:	20f1      	movs	r0, #241	; 0xf1
 8001c3a:	f7ff fd4d 	bl	80016d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8001c3e:	2100      	movs	r1, #0
 8001c40:	20db      	movs	r0, #219	; 0xdb
 8001c42:	f7ff fd49 	bl	80016d8 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8001c46:	2100      	movs	r1, #0
 8001c48:	2030      	movs	r0, #48	; 0x30
 8001c4a:	f7ff fd45 	bl	80016d8 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8001c4e:	2100      	movs	r1, #0
 8001c50:	20a4      	movs	r0, #164	; 0xa4
 8001c52:	f7ff fd41 	bl	80016d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8001c56:	2100      	movs	r1, #0
 8001c58:	20a6      	movs	r0, #166	; 0xa6
 8001c5a:	f7ff fd3d 	bl	80016d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8001c5e:	2100      	movs	r1, #0
 8001c60:	20af      	movs	r0, #175	; 0xaf
 8001c62:	f7ff fd39 	bl	80016d8 <OLED_WR_Byte>
	OLED_Clear(); 
 8001c66:	f7ff fd81 	bl	800176c <OLED_Clear>
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40021000 	.word	0x40021000

08001c78 <_ZN7Display8oledTaskEPv>:
#include "app_main.h"
#include <cstring>
#include <cstdio>
namespace Display {

void oledTask(void*) {
 8001c78:	b5b0      	push	{r4, r5, r7, lr}
 8001c7a:	b08a      	sub	sp, #40	; 0x28
 8001c7c:	af04      	add	r7, sp, #16
 8001c7e:	6078      	str	r0, [r7, #4]

	OLED_Init();
 8001c80:	f7ff ff6e 	bl	8001b60 <OLED_Init>
	OLED_Clear();
 8001c84:	f7ff fd72 	bl	800176c <OLED_Clear>

	OLED_ShowString(0, 0, (uint8_t*) "TRD|OK");
 8001c88:	4a86      	ldr	r2, [pc, #536]	; (8001ea4 <_ZN7Display8oledTaskEPv+0x22c>)
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	f7ff ff35 	bl	8001afc <OLED_ShowString>
	OLED_Display_On();
 8001c92:	f7ff fd91 	bl	80017b8 <OLED_Display_On>
	OLED_DrawRect(46, 16, 51, 21, 1);
 8001c96:	2301      	movs	r3, #1
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	2315      	movs	r3, #21
 8001c9c:	2233      	movs	r2, #51	; 0x33
 8001c9e:	2110      	movs	r1, #16
 8001ca0:	202e      	movs	r0, #46	; 0x2e
 8001ca2:	f7ff fdf3 	bl	800188c <OLED_DrawRect>
	OLED_DrawRect(46, 28, 51, 33, 1);
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	2321      	movs	r3, #33	; 0x21
 8001cac:	2233      	movs	r2, #51	; 0x33
 8001cae:	211c      	movs	r1, #28
 8001cb0:	202e      	movs	r0, #46	; 0x2e
 8001cb2:	f7ff fdeb 	bl	800188c <OLED_DrawRect>
	OLED_DrawRect(46, 40, 51, 45, 1);
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	232d      	movs	r3, #45	; 0x2d
 8001cbc:	2233      	movs	r2, #51	; 0x33
 8001cbe:	2128      	movs	r1, #40	; 0x28
 8001cc0:	202e      	movs	r0, #46	; 0x2e
 8001cc2:	f7ff fde3 	bl	800188c <OLED_DrawRect>
	OLED_DrawRect(46, 52, 51, 57, 1);
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	2339      	movs	r3, #57	; 0x39
 8001ccc:	2233      	movs	r2, #51	; 0x33
 8001cce:	2134      	movs	r1, #52	; 0x34
 8001cd0:	202e      	movs	r0, #46	; 0x2e
 8001cd2:	f7ff fddb 	bl	800188c <OLED_DrawRect>
	OLED_DrawVerticalLine(55, 3, 58);
 8001cd6:	223a      	movs	r2, #58	; 0x3a
 8001cd8:	2103      	movs	r1, #3
 8001cda:	2037      	movs	r0, #55	; 0x37
 8001cdc:	f7ff fe7b 	bl	80019d6 <OLED_DrawVerticalLine>

	OLED_ShowString(1, 13, (uint8_t*) "SELF");
 8001ce0:	4a71      	ldr	r2, [pc, #452]	; (8001ea8 <_ZN7Display8oledTaskEPv+0x230>)
 8001ce2:	210d      	movs	r1, #13
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	f7ff ff09 	bl	8001afc <OLED_ShowString>
	OLED_ShowString(1, 25, (uint8_t*) "PROC");
 8001cea:	4a70      	ldr	r2, [pc, #448]	; (8001eac <_ZN7Display8oledTaskEPv+0x234>)
 8001cec:	2119      	movs	r1, #25
 8001cee:	2001      	movs	r0, #1
 8001cf0:	f7ff ff04 	bl	8001afc <OLED_ShowString>
	OLED_ShowString(1, 37, (uint8_t*) "SENR");
 8001cf4:	4a6e      	ldr	r2, [pc, #440]	; (8001eb0 <_ZN7Display8oledTaskEPv+0x238>)
 8001cf6:	2125      	movs	r1, #37	; 0x25
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	f7ff feff 	bl	8001afc <OLED_ShowString>
	OLED_ShowString(1, 49, (uint8_t*) "MOTN");
 8001cfe:	4a6d      	ldr	r2, [pc, #436]	; (8001eb4 <_ZN7Display8oledTaskEPv+0x23c>)
 8001d00:	2131      	movs	r1, #49	; 0x31
 8001d02:	2001      	movs	r0, #1
 8001d04:	f7ff fefa 	bl	8001afc <OLED_ShowString>
	OLED_ShowString(60, 0, (uint8_t*) "gZ");
 8001d08:	4a6b      	ldr	r2, [pc, #428]	; (8001eb8 <_ZN7Display8oledTaskEPv+0x240>)
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	203c      	movs	r0, #60	; 0x3c
 8001d0e:	f7ff fef5 	bl	8001afc <OLED_ShowString>
	OLED_ShowString(60, 12, (uint8_t*) "TRX QL");
 8001d12:	4a6a      	ldr	r2, [pc, #424]	; (8001ebc <_ZN7Display8oledTaskEPv+0x244>)
 8001d14:	210c      	movs	r1, #12
 8001d16:	203c      	movs	r0, #60	; 0x3c
 8001d18:	f7ff fef0 	bl	8001afc <OLED_ShowString>
	OLED_ShowString(60, 36, (uint8_t*) "YAW");
 8001d1c:	4a68      	ldr	r2, [pc, #416]	; (8001ec0 <_ZN7Display8oledTaskEPv+0x248>)
 8001d1e:	2124      	movs	r1, #36	; 0x24
 8001d20:	203c      	movs	r0, #60	; 0x3c
 8001d22:	f7ff feeb 	bl	8001afc <OLED_ShowString>
	OLED_Refresh_Gram();
 8001d26:	f7ff fc9f 	bl	8001668 <OLED_Refresh_Gram>
	bool self = false;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	75fb      	strb	r3, [r7, #23]
	uint8_t buf[10] = { 0 };
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	f107 0310 	add.w	r3, r7, #16
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	809a      	strh	r2, [r3, #4]
	for (;;) {

		OLED_DrawRectWithFill(47, 17, 50, 20, self);
 8001d3c:	7dfb      	ldrb	r3, [r7, #23]
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	2314      	movs	r3, #20
 8001d42:	2232      	movs	r2, #50	; 0x32
 8001d44:	2111      	movs	r1, #17
 8001d46:	202f      	movs	r0, #47	; 0x2f
 8001d48:	f7ff fde4 	bl	8001914 <OLED_DrawRectWithFill>
		OLED_DrawRectWithFill(47, 29, 50, 32, is_task_alive_struct.proc);
 8001d4c:	4b5d      	ldr	r3, [pc, #372]	; (8001ec4 <_ZN7Display8oledTaskEPv+0x24c>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	2320      	movs	r3, #32
 8001d54:	2232      	movs	r2, #50	; 0x32
 8001d56:	211d      	movs	r1, #29
 8001d58:	202f      	movs	r0, #47	; 0x2f
 8001d5a:	f7ff fddb 	bl	8001914 <OLED_DrawRectWithFill>
		OLED_DrawRectWithFill(47, 41, 50, 44, is_task_alive_struct.senr);
 8001d5e:	4b59      	ldr	r3, [pc, #356]	; (8001ec4 <_ZN7Display8oledTaskEPv+0x24c>)
 8001d60:	789b      	ldrb	r3, [r3, #2]
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	232c      	movs	r3, #44	; 0x2c
 8001d66:	2232      	movs	r2, #50	; 0x32
 8001d68:	2129      	movs	r1, #41	; 0x29
 8001d6a:	202f      	movs	r0, #47	; 0x2f
 8001d6c:	f7ff fdd2 	bl	8001914 <OLED_DrawRectWithFill>
		OLED_DrawRectWithFill(47, 53, 50, 56, is_task_alive_struct.motn);
 8001d70:	4b54      	ldr	r3, [pc, #336]	; (8001ec4 <_ZN7Display8oledTaskEPv+0x24c>)
 8001d72:	78db      	ldrb	r3, [r3, #3]
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	2338      	movs	r3, #56	; 0x38
 8001d78:	2232      	movs	r2, #50	; 0x32
 8001d7a:	2135      	movs	r1, #53	; 0x35
 8001d7c:	202f      	movs	r0, #47	; 0x2f
 8001d7e:	f7ff fdc9 	bl	8001914 <OLED_DrawRectWithFill>

		memset(&buf, 0, sizeof(buf));
 8001d82:	f107 030c 	add.w	r3, r7, #12
 8001d86:	220a      	movs	r2, #10
 8001d88:	2100      	movs	r1, #0
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f00e fac4 	bl	8010318 <memset>
		snprintf((char*) buf, sizeof(buf), "%4.2f", sensor_data.imu->gyro[2]);
 8001d90:	4b4d      	ldr	r3, [pc, #308]	; (8001ec8 <_ZN7Display8oledTaskEPv+0x250>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe fbd6 	bl	8000548 <__aeabi_f2d>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	f107 000c 	add.w	r0, r7, #12
 8001da4:	e9cd 2300 	strd	r2, r3, [sp]
 8001da8:	4a48      	ldr	r2, [pc, #288]	; (8001ecc <_ZN7Display8oledTaskEPv+0x254>)
 8001daa:	210a      	movs	r1, #10
 8001dac:	f00f f968 	bl	8011080 <sniprintf>
		if (is_task_alive_struct.senr) {
 8001db0:	4b44      	ldr	r3, [pc, #272]	; (8001ec4 <_ZN7Display8oledTaskEPv+0x24c>)
 8001db2:	789b      	ldrb	r3, [r3, #2]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d007      	beq.n	8001dc8 <_ZN7Display8oledTaskEPv+0x150>
			OLED_ShowString(80, 0, (uint8_t*) &buf);
 8001db8:	f107 030c 	add.w	r3, r7, #12
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	2050      	movs	r0, #80	; 0x50
 8001dc2:	f7ff fe9b 	bl	8001afc <OLED_ShowString>
 8001dc6:	e004      	b.n	8001dd2 <_ZN7Display8oledTaskEPv+0x15a>

		} else {
			OLED_ShowString(80, 0, (uint8_t*) "NCAL");
 8001dc8:	4a41      	ldr	r2, [pc, #260]	; (8001ed0 <_ZN7Display8oledTaskEPv+0x258>)
 8001dca:	2100      	movs	r1, #0
 8001dcc:	2050      	movs	r0, #80	; 0x50
 8001dce:	f7ff fe95 	bl	8001afc <OLED_ShowString>

		}

		memset(&buf, 0, sizeof(buf));
 8001dd2:	f107 030c 	add.w	r3, r7, #12
 8001dd6:	220a      	movs	r2, #10
 8001dd8:	2100      	movs	r1, #0
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f00e fa9c 	bl	8010318 <memset>
		snprintf((char*) buf, sizeof(buf), "%d", sensor_data.ql);
 8001de0:	4b39      	ldr	r3, [pc, #228]	; (8001ec8 <_ZN7Display8oledTaskEPv+0x250>)
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	f107 000c 	add.w	r0, r7, #12
 8001de8:	4a3a      	ldr	r2, [pc, #232]	; (8001ed4 <_ZN7Display8oledTaskEPv+0x25c>)
 8001dea:	210a      	movs	r1, #10
 8001dec:	f00f f948 	bl	8011080 <sniprintf>
		OLED_ShowString(115, 12, (uint8_t*) &buf);
 8001df0:	f107 030c 	add.w	r3, r7, #12
 8001df4:	461a      	mov	r2, r3
 8001df6:	210c      	movs	r1, #12
 8001df8:	2073      	movs	r0, #115	; 0x73
 8001dfa:	f7ff fe7f 	bl	8001afc <OLED_ShowString>
		memset(&buf, 0, sizeof(buf));
 8001dfe:	f107 030c 	add.w	r3, r7, #12
 8001e02:	220a      	movs	r2, #10
 8001e04:	2100      	movs	r1, #0
 8001e06:	4618      	mov	r0, r3
 8001e08:	f00e fa86 	bl	8010318 <memset>
		snprintf((char*) buf, sizeof(buf), "%3.0f::%3.0f", sensor_data.ir_distL, sensor_data.ir_distR);
 8001e0c:	4b2e      	ldr	r3, [pc, #184]	; (8001ec8 <_ZN7Display8oledTaskEPv+0x250>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7fe fb99 	bl	8000548 <__aeabi_f2d>
 8001e16:	4604      	mov	r4, r0
 8001e18:	460d      	mov	r5, r1
 8001e1a:	4b2b      	ldr	r3, [pc, #172]	; (8001ec8 <_ZN7Display8oledTaskEPv+0x250>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe fb92 	bl	8000548 <__aeabi_f2d>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	f107 000c 	add.w	r0, r7, #12
 8001e2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001e30:	e9cd 4500 	strd	r4, r5, [sp]
 8001e34:	4a28      	ldr	r2, [pc, #160]	; (8001ed8 <_ZN7Display8oledTaskEPv+0x260>)
 8001e36:	210a      	movs	r1, #10
 8001e38:	f00f f922 	bl	8011080 <sniprintf>
		OLED_ShowString(65, 24, (uint8_t*) &buf);
 8001e3c:	f107 030c 	add.w	r3, r7, #12
 8001e40:	461a      	mov	r2, r3
 8001e42:	2118      	movs	r1, #24
 8001e44:	2041      	movs	r0, #65	; 0x41
 8001e46:	f7ff fe59 	bl	8001afc <OLED_ShowString>
		memset(&buf, 0, sizeof(buf));
 8001e4a:	f107 030c 	add.w	r3, r7, #12
 8001e4e:	220a      	movs	r2, #10
 8001e50:	2100      	movs	r1, #0
 8001e52:	4618      	mov	r0, r3
 8001e54:	f00e fa60 	bl	8010318 <memset>
		snprintf((char*) buf, sizeof(buf), "%4.1f", sensor_data.yaw_abs);
 8001e58:	4b1b      	ldr	r3, [pc, #108]	; (8001ec8 <_ZN7Display8oledTaskEPv+0x250>)
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7fe fb73 	bl	8000548 <__aeabi_f2d>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	f107 000c 	add.w	r0, r7, #12
 8001e6a:	e9cd 2300 	strd	r2, r3, [sp]
 8001e6e:	4a1b      	ldr	r2, [pc, #108]	; (8001edc <_ZN7Display8oledTaskEPv+0x264>)
 8001e70:	210a      	movs	r1, #10
 8001e72:	f00f f905 	bl	8011080 <sniprintf>
		OLED_ShowString(85, 36, (uint8_t*) &buf);
 8001e76:	f107 030c 	add.w	r3, r7, #12
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	2124      	movs	r1, #36	; 0x24
 8001e7e:	2055      	movs	r0, #85	; 0x55
 8001e80:	f7ff fe3c 	bl	8001afc <OLED_ShowString>

		OLED_Refresh_Gram();
 8001e84:	f7ff fbf0 	bl	8001668 <OLED_Refresh_Gram>

		self = !self;
 8001e88:	7dfb      	ldrb	r3, [r7, #23]
 8001e8a:	f083 0301 	eor.w	r3, r3, #1
 8001e8e:	75fb      	strb	r3, [r7, #23]
		memset((void*) &is_task_alive_struct, 0, sizeof(isTaskAlive_t));
 8001e90:	2204      	movs	r2, #4
 8001e92:	2100      	movs	r1, #0
 8001e94:	480b      	ldr	r0, [pc, #44]	; (8001ec4 <_ZN7Display8oledTaskEPv+0x24c>)
 8001e96:	f00e fa3f 	bl	8010318 <memset>
		osDelay(250);
 8001e9a:	20fa      	movs	r0, #250	; 0xfa
 8001e9c:	f009 ff42 	bl	800bd24 <osDelay>
		OLED_DrawRectWithFill(47, 17, 50, 20, self);
 8001ea0:	e74c      	b.n	8001d3c <_ZN7Display8oledTaskEPv+0xc4>
 8001ea2:	bf00      	nop
 8001ea4:	08013308 	.word	0x08013308
 8001ea8:	08013310 	.word	0x08013310
 8001eac:	08013318 	.word	0x08013318
 8001eb0:	08013320 	.word	0x08013320
 8001eb4:	08013328 	.word	0x08013328
 8001eb8:	08013330 	.word	0x08013330
 8001ebc:	08013334 	.word	0x08013334
 8001ec0:	0801333c 	.word	0x0801333c
 8001ec4:	20000694 	.word	0x20000694
 8001ec8:	2000065c 	.word	0x2000065c
 8001ecc:	08013340 	.word	0x08013340
 8001ed0:	08013348 	.word	0x08013348
 8001ed4:	08013350 	.word	0x08013350
 8001ed8:	08013354 	.word	0x08013354
 8001edc:	08013364 	.word	0x08013364

08001ee0 <_ZN9AppParser9Processor19signalNoObstructionEv>:
	~Processor( void );
	u_ctx *this_ctx; // context of this process
	u_ctx *o_ctx; // context of the other process, i.e. the motion controller.
	static void processorTask(void *pv);
	static void signalObstruction(void) { _signal_obstr = true; }
	static void signalNoObstruction(void) { _signal_obstr = false; _obstr_txed = false; }
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	4b05      	ldr	r3, [pc, #20]	; (8001efc <_ZN9AppParser9Processor19signalNoObstructionEv+0x1c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	701a      	strb	r2, [r3, #0]
 8001eea:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <_ZN9AppParser9Processor19signalNoObstructionEv+0x20>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	701a      	strb	r2, [r3, #0]
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	20000870 	.word	0x20000870
 8001f00:	20000871 	.word	0x20000871

08001f04 <_ZN9AppMotion16MotionControllerD1Ev>:
	void start();
	void turn(bool isRight, bool isFwd, bool nostop,
			uint32_t arg);
	void move(bool isFwd, uint32_t arg, uint32_t speed, bool isCrawl, bool nostop);
	void emergencyStop();
	~MotionController() {
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	}
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
	...

08001f1c <HAL_GPIO_EXTI_Callback>:

sensorData_t sensor_data; // public variables shared across all files.
isTaskAlive_t is_task_alive_struct = { 0 };
bool test_run = false;
void irTask(void *pv);
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	80fb      	strh	r3, [r7, #6]
	test_run = true;
 8001f26:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001f28:	2201      	movs	r2, #1
 8001f2a:	701a      	strb	r2, [r3, #0]
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	20000698 	.word	0x20000698

08001f3c <HAL_UART_RxCpltCallback>:
AppMotion::MotionController controller(&ctrlCtx);
AppParser::Processor processor(&procCtx, &ctrlCtx);
AppParser::Listener listener(&procCtx);
/*****************************************************************************************/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
	//__HAL_UART_CLEAR_OREFLAG(&huart3);
	if (huart == &huart3) {
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a05      	ldr	r2, [pc, #20]	; (8001f5c <HAL_UART_RxCpltCallback+0x20>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d102      	bne.n	8001f52 <HAL_UART_RxCpltCallback+0x16>
		listener.invoke();
 8001f4c:	4804      	ldr	r0, [pc, #16]	; (8001f60 <HAL_UART_RxCpltCallback+0x24>)
 8001f4e:	f001 ffcd 	bl	8003eec <_ZN9AppParser8Listener6invokeEv>
	}
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20000aec 	.word	0x20000aec
 8001f60:	20000814 	.word	0x20000814

08001f64 <initializeCPPconstructs>:

/*
 * This function initializes the C++ stuff, called from within main() context.
 */
void initializeCPPconstructs(void) {
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0

	sensor_data.is_allow_motor_override = true;
 8001f68:	4b10      	ldr	r3, [pc, #64]	; (8001fac <initializeCPPconstructs+0x48>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	sensor_data.ir_dist_th_L = 10.0f;
 8001f70:	4b0e      	ldr	r3, [pc, #56]	; (8001fac <initializeCPPconstructs+0x48>)
 8001f72:	4a0f      	ldr	r2, [pc, #60]	; (8001fb0 <initializeCPPconstructs+0x4c>)
 8001f74:	62da      	str	r2, [r3, #44]	; 0x2c
	sensor_data.ir_dist_th_R = 10.0f;
 8001f76:	4b0d      	ldr	r3, [pc, #52]	; (8001fac <initializeCPPconstructs+0x48>)
 8001f78:	4a0d      	ldr	r2, [pc, #52]	; (8001fb0 <initializeCPPconstructs+0x4c>)
 8001f7a:	631a      	str	r2, [r3, #48]	; 0x30
	//procTaskHandle = osThreadNew(processorTask, NULL, &procTask_attr);

	processor.start();
 8001f7c:	480d      	ldr	r0, [pc, #52]	; (8001fb4 <initializeCPPconstructs+0x50>)
 8001f7e:	f002 f801 	bl	8003f84 <_ZN9AppParser9Processor5startEv>
	//osThreadNew((osThreadFunc_t)&controller.motionTask,
	//&ctrlCtx,
	// &(ctrlCtx.attr));
	controller.start();
 8001f82:	480d      	ldr	r0, [pc, #52]	; (8001fb8 <initializeCPPconstructs+0x54>)
 8001f84:	f000 fe6a 	bl	8002c5c <_ZN9AppMotion16MotionController5startEv>
	//htim1.Instance->CCR1 = 153;
	oledTaskHandle = osThreadNew(Display::oledTask, NULL, &oledTask_attr);
 8001f88:	4a0c      	ldr	r2, [pc, #48]	; (8001fbc <initializeCPPconstructs+0x58>)
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	480c      	ldr	r0, [pc, #48]	; (8001fc0 <initializeCPPconstructs+0x5c>)
 8001f8e:	f009 fe15 	bl	800bbbc <osThreadNew>
 8001f92:	4603      	mov	r3, r0
 8001f94:	4a0b      	ldr	r2, [pc, #44]	; (8001fc4 <initializeCPPconstructs+0x60>)
 8001f96:	6013      	str	r3, [r2, #0]
	irTaskHandle = osThreadNew(irTask, NULL, &irTask_attr);
 8001f98:	4a0b      	ldr	r2, [pc, #44]	; (8001fc8 <initializeCPPconstructs+0x64>)
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	480b      	ldr	r0, [pc, #44]	; (8001fcc <initializeCPPconstructs+0x68>)
 8001f9e:	f009 fe0d 	bl	800bbbc <osThreadNew>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	4a0a      	ldr	r2, [pc, #40]	; (8001fd0 <initializeCPPconstructs+0x6c>)
 8001fa6:	6013      	str	r3, [r2, #0]
}
 8001fa8:	bf00      	nop
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	2000065c 	.word	0x2000065c
 8001fb0:	41200000 	.word	0x41200000
 8001fb4:	2000080c 	.word	0x2000080c
 8001fb8:	200006b0 	.word	0x200006b0
 8001fbc:	08013ee0 	.word	0x08013ee0
 8001fc0:	08001c79 	.word	0x08001c79
 8001fc4:	200006a4 	.word	0x200006a4
 8001fc8:	08013f04 	.word	0x08013f04
 8001fcc:	08001fd9 	.word	0x08001fd9
 8001fd0:	200006a8 	.word	0x200006a8
 8001fd4:	00000000 	.word	0x00000000

08001fd8 <_Z6irTaskPv>:
float irBufferL[BUFFER_SIZE]; // Buffer for left IR sensor
float irBufferR[BUFFER_SIZE]; // Buffer for right IR sensor
int bufferIndex = 0;          // Current index in the buffer
float ir_distL_Avg = 0;       // Average distance for left IR sensor
float ir_distR_Avg = 0;       // Average distance for right IR sensor
void irTask(void *pv) {
 8001fd8:	b590      	push	{r4, r7, lr}
 8001fda:	b089      	sub	sp, #36	; 0x24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
	for (;;) {
		osDelay(5);
 8001fe0:	2005      	movs	r0, #5
 8001fe2:	f009 fe9f 	bl	800bd24 <osDelay>
		HAL_ADC_Start(&hadc1);
 8001fe6:	4882      	ldr	r0, [pc, #520]	; (80021f0 <_Z6irTaskPv+0x218>)
 8001fe8:	f004 f834 	bl	8006054 <HAL_ADC_Start>
		HAL_ADC_Start(&hadc2);
 8001fec:	4881      	ldr	r0, [pc, #516]	; (80021f4 <_Z6irTaskPv+0x21c>)
 8001fee:	f004 f831 	bl	8006054 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1); // trivial waiting time, dont bother with dma or whatever
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	487e      	ldr	r0, [pc, #504]	; (80021f0 <_Z6irTaskPv+0x218>)
 8001ff6:	f004 f932 	bl	800625e <HAL_ADC_PollForConversion>
		uint32_t IR = HAL_ADC_GetValue(&hadc1);
 8001ffa:	487d      	ldr	r0, [pc, #500]	; (80021f0 <_Z6irTaskPv+0x218>)
 8001ffc:	f004 f9ba 	bl	8006374 <HAL_ADC_GetValue>
 8002000:	6138      	str	r0, [r7, #16]
		HAL_ADC_PollForConversion(&hadc2, 1); // trivial waiting time, dont bother with dma or whatever
 8002002:	2101      	movs	r1, #1
 8002004:	487b      	ldr	r0, [pc, #492]	; (80021f4 <_Z6irTaskPv+0x21c>)
 8002006:	f004 f92a 	bl	800625e <HAL_ADC_PollForConversion>
		uint32_t IR2 = HAL_ADC_GetValue(&hadc2);
 800200a:	487a      	ldr	r0, [pc, #488]	; (80021f4 <_Z6irTaskPv+0x21c>)
 800200c:	f004 f9b2 	bl	8006374 <HAL_ADC_GetValue>
 8002010:	60f8      	str	r0, [r7, #12]
		HAL_ADC_Stop(&hadc1);
 8002012:	4877      	ldr	r0, [pc, #476]	; (80021f0 <_Z6irTaskPv+0x218>)
 8002014:	f004 f8f0 	bl	80061f8 <HAL_ADC_Stop>
		HAL_ADC_Stop(&hadc2);
 8002018:	4876      	ldr	r0, [pc, #472]	; (80021f4 <_Z6irTaskPv+0x21c>)
 800201a:	f004 f8ed 	bl	80061f8 <HAL_ADC_Stop>
		float volt = (float) (IR * 5) / 4095;
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	4613      	mov	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	ee07 3a90 	vmov	s15, r3
 800202a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800202e:	eddf 6a72 	vldr	s13, [pc, #456]	; 80021f8 <_Z6irTaskPv+0x220>
 8002032:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002036:	edc7 7a02 	vstr	s15, [r7, #8]
		irBufferL[bufferIndex] = roundf(29.988 * pow(volt, -1.173));
 800203a:	68b8      	ldr	r0, [r7, #8]
 800203c:	f7fe fa84 	bl	8000548 <__aeabi_f2d>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	ed9f 1b66 	vldr	d1, [pc, #408]	; 80021e0 <_Z6irTaskPv+0x208>
 8002048:	ec43 2b10 	vmov	d0, r2, r3
 800204c:	f00c fd64 	bl	800eb18 <pow>
 8002050:	ec51 0b10 	vmov	r0, r1, d0
 8002054:	a364      	add	r3, pc, #400	; (adr r3, 80021e8 <_Z6irTaskPv+0x210>)
 8002056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205a:	f7fe facd 	bl	80005f8 <__aeabi_dmul>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	4610      	mov	r0, r2
 8002064:	4619      	mov	r1, r3
 8002066:	f7fe fdbf 	bl	8000be8 <__aeabi_d2f>
 800206a:	4602      	mov	r2, r0
 800206c:	4b63      	ldr	r3, [pc, #396]	; (80021fc <_Z6irTaskPv+0x224>)
 800206e:	681c      	ldr	r4, [r3, #0]
 8002070:	ee00 2a10 	vmov	s0, r2
 8002074:	f00c fcfc 	bl	800ea70 <roundf>
 8002078:	eef0 7a40 	vmov.f32	s15, s0
 800207c:	4a60      	ldr	r2, [pc, #384]	; (8002200 <_Z6irTaskPv+0x228>)
 800207e:	00a3      	lsls	r3, r4, #2
 8002080:	4413      	add	r3, r2
 8002082:	edc3 7a00 	vstr	s15, [r3]
		volt = (float) (IR2 * 5) / 4095;
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	4613      	mov	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	ee07 3a90 	vmov	s15, r3
 8002092:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002096:	eddf 6a58 	vldr	s13, [pc, #352]	; 80021f8 <_Z6irTaskPv+0x220>
 800209a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800209e:	edc7 7a02 	vstr	s15, [r7, #8]
		irBufferR[bufferIndex] = roundf(29.988 * pow(volt, -1.173));
 80020a2:	68b8      	ldr	r0, [r7, #8]
 80020a4:	f7fe fa50 	bl	8000548 <__aeabi_f2d>
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	ed9f 1b4c 	vldr	d1, [pc, #304]	; 80021e0 <_Z6irTaskPv+0x208>
 80020b0:	ec43 2b10 	vmov	d0, r2, r3
 80020b4:	f00c fd30 	bl	800eb18 <pow>
 80020b8:	ec51 0b10 	vmov	r0, r1, d0
 80020bc:	a34a      	add	r3, pc, #296	; (adr r3, 80021e8 <_Z6irTaskPv+0x210>)
 80020be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c2:	f7fe fa99 	bl	80005f8 <__aeabi_dmul>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4610      	mov	r0, r2
 80020cc:	4619      	mov	r1, r3
 80020ce:	f7fe fd8b 	bl	8000be8 <__aeabi_d2f>
 80020d2:	4602      	mov	r2, r0
 80020d4:	4b49      	ldr	r3, [pc, #292]	; (80021fc <_Z6irTaskPv+0x224>)
 80020d6:	681c      	ldr	r4, [r3, #0]
 80020d8:	ee00 2a10 	vmov	s0, r2
 80020dc:	f00c fcc8 	bl	800ea70 <roundf>
 80020e0:	eef0 7a40 	vmov.f32	s15, s0
 80020e4:	4a47      	ldr	r2, [pc, #284]	; (8002204 <_Z6irTaskPv+0x22c>)
 80020e6:	00a3      	lsls	r3, r4, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	edc3 7a00 	vstr	s15, [r3]


        float sumL = 0, sumR = 0;
 80020ee:	f04f 0300 	mov.w	r3, #0
 80020f2:	61fb      	str	r3, [r7, #28]
 80020f4:	f04f 0300 	mov.w	r3, #0
 80020f8:	61bb      	str	r3, [r7, #24]
        for (int i = 0; i < BUFFER_SIZE; i++) {
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	2b07      	cmp	r3, #7
 8002102:	dc1b      	bgt.n	800213c <_Z6irTaskPv+0x164>
            sumL += irBufferL[i];
 8002104:	4a3e      	ldr	r2, [pc, #248]	; (8002200 <_Z6irTaskPv+0x228>)
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	edd3 7a00 	vldr	s15, [r3]
 8002110:	ed97 7a07 	vldr	s14, [r7, #28]
 8002114:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002118:	edc7 7a07 	vstr	s15, [r7, #28]
            sumR += irBufferR[i];
 800211c:	4a39      	ldr	r2, [pc, #228]	; (8002204 <_Z6irTaskPv+0x22c>)
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	edd3 7a00 	vldr	s15, [r3]
 8002128:	ed97 7a06 	vldr	s14, [r7, #24]
 800212c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002130:	edc7 7a06 	vstr	s15, [r7, #24]
        for (int i = 0; i < BUFFER_SIZE; i++) {
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	3301      	adds	r3, #1
 8002138:	617b      	str	r3, [r7, #20]
 800213a:	e7e0      	b.n	80020fe <_Z6irTaskPv+0x126>
        }
        ir_distL_Avg = sumL / BUFFER_SIZE;
 800213c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002140:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8002144:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002148:	4b2f      	ldr	r3, [pc, #188]	; (8002208 <_Z6irTaskPv+0x230>)
 800214a:	edc3 7a00 	vstr	s15, [r3]
        ir_distR_Avg = sumR / BUFFER_SIZE;
 800214e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002152:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8002156:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800215a:	4b2c      	ldr	r3, [pc, #176]	; (800220c <_Z6irTaskPv+0x234>)
 800215c:	edc3 7a00 	vstr	s15, [r3]

        bufferIndex = (bufferIndex + 1) % BUFFER_SIZE; // Update buffer index
 8002160:	4b26      	ldr	r3, [pc, #152]	; (80021fc <_Z6irTaskPv+0x224>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	3301      	adds	r3, #1
 8002166:	425a      	negs	r2, r3
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	f002 0207 	and.w	r2, r2, #7
 8002170:	bf58      	it	pl
 8002172:	4253      	negpl	r3, r2
 8002174:	4a21      	ldr	r2, [pc, #132]	; (80021fc <_Z6irTaskPv+0x224>)
 8002176:	6013      	str	r3, [r2, #0]
        sensor_data.ir_distL = ir_distL_Avg;
 8002178:	4b23      	ldr	r3, [pc, #140]	; (8002208 <_Z6irTaskPv+0x230>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a24      	ldr	r2, [pc, #144]	; (8002210 <_Z6irTaskPv+0x238>)
 800217e:	6053      	str	r3, [r2, #4]
        sensor_data.ir_distR = ir_distR_Avg;
 8002180:	4b22      	ldr	r3, [pc, #136]	; (800220c <_Z6irTaskPv+0x234>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a22      	ldr	r2, [pc, #136]	; (8002210 <_Z6irTaskPv+0x238>)
 8002186:	6093      	str	r3, [r2, #8]
		if (sensor_data.is_allow_motor_override) {
 8002188:	4b21      	ldr	r3, [pc, #132]	; (8002210 <_Z6irTaskPv+0x238>)
 800218a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800218e:	2b00      	cmp	r3, #0
 8002190:	f43f af26 	beq.w	8001fe0 <_Z6irTaskPv+0x8>
			if (sensor_data.ir_distL < sensor_data.ir_dist_th_L
 8002194:	4b1e      	ldr	r3, [pc, #120]	; (8002210 <_Z6irTaskPv+0x238>)
 8002196:	ed93 7a01 	vldr	s14, [r3, #4]
 800219a:	4b1d      	ldr	r3, [pc, #116]	; (8002210 <_Z6irTaskPv+0x238>)
 800219c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80021a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a8:	d40a      	bmi.n	80021c0 <_Z6irTaskPv+0x1e8>
					|| sensor_data.ir_distR < sensor_data.ir_dist_th_R) {
 80021aa:	4b19      	ldr	r3, [pc, #100]	; (8002210 <_Z6irTaskPv+0x238>)
 80021ac:	ed93 7a02 	vldr	s14, [r3, #8]
 80021b0:	4b17      	ldr	r3, [pc, #92]	; (8002210 <_Z6irTaskPv+0x238>)
 80021b2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80021b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021be:	d505      	bpl.n	80021cc <_Z6irTaskPv+0x1f4>
				//controller.emergencyStop();
				//processor.signalObstruction();
				HAL_GPIO_WritePin(Collision_Ind_Port, Collision_Ind_Pin,
 80021c0:	2201      	movs	r2, #1
 80021c2:	2110      	movs	r1, #16
 80021c4:	4813      	ldr	r0, [pc, #76]	; (8002214 <_Z6irTaskPv+0x23c>)
 80021c6:	f005 f981 	bl	80074cc <HAL_GPIO_WritePin>
 80021ca:	e006      	b.n	80021da <_Z6irTaskPv+0x202>
						GPIO_PIN_SET);
			} else {
				processor.signalNoObstruction(); // to prevent repeated tx
 80021cc:	f7ff fe88 	bl	8001ee0 <_ZN9AppParser9Processor19signalNoObstructionEv>
				HAL_GPIO_WritePin(Collision_Ind_Port, Collision_Ind_Pin,
 80021d0:	2200      	movs	r2, #0
 80021d2:	2110      	movs	r1, #16
 80021d4:	480f      	ldr	r0, [pc, #60]	; (8002214 <_Z6irTaskPv+0x23c>)
 80021d6:	f005 f979 	bl	80074cc <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);
			}
		}
	}
 80021da:	e701      	b.n	8001fe0 <_Z6irTaskPv+0x8>
 80021dc:	f3af 8000 	nop.w
 80021e0:	a5e353f8 	.word	0xa5e353f8
 80021e4:	bff2c49b 	.word	0xbff2c49b
 80021e8:	916872b0 	.word	0x916872b0
 80021ec:	403dfced 	.word	0x403dfced
 80021f0:	200008e8 	.word	0x200008e8
 80021f4:	20000930 	.word	0x20000930
 80021f8:	457ff000 	.word	0x457ff000
 80021fc:	20000858 	.word	0x20000858
 8002200:	20000818 	.word	0x20000818
 8002204:	20000838 	.word	0x20000838
 8002208:	2000085c 	.word	0x2000085c
 800220c:	20000860 	.word	0x20000860
 8002210:	2000065c 	.word	0x2000065c
 8002214:	40020c00 	.word	0x40020c00

08002218 <sensorTask>:
}
float SEq_1 = 1.0f, SEq_2 = 0.0f, SEq_3 = 0.0f, SEq_4 = 0.0f; // estimated orientation quaternion elements with initial conditions
void sensorTask(void *pv) {
 8002218:	b5b0      	push	{r4, r5, r7, lr}
 800221a:	ed2d 8b06 	vpush	{d8-d10}
 800221e:	b0a0      	sub	sp, #128	; 0x80
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]

	IMU_Initialise(&imu, &hi2c1);
 8002224:	498a      	ldr	r1, [pc, #552]	; (8002450 <sensorTask+0x238>)
 8002226:	488b      	ldr	r0, [pc, #556]	; (8002454 <sensorTask+0x23c>)
 8002228:	f7fe feb0 	bl	8000f8c <IMU_Initialise>

	osDelay(400);
 800222c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002230:	f009 fd78 	bl	800bd24 <osDelay>
	Gyro_calibrate(&imu);
 8002234:	4887      	ldr	r0, [pc, #540]	; (8002454 <sensorTask+0x23c>)
 8002236:	f7ff f895 	bl	8001364 <Gyro_calibrate>
	Mag_init(&imu);
 800223a:	4886      	ldr	r0, [pc, #536]	; (8002454 <sensorTask+0x23c>)
 800223c:	f7ff fa04 	bl	8001648 <Mag_init>

	sensor_data.imu = &imu;
 8002240:	4b85      	ldr	r3, [pc, #532]	; (8002458 <sensorTask+0x240>)
 8002242:	4a84      	ldr	r2, [pc, #528]	; (8002454 <sensorTask+0x23c>)
 8002244:	601a      	str	r2, [r3, #0]

	/**I2C scanner for debug purposes **/
	printf("Scanning I2C bus:\r\n");
 8002246:	4885      	ldr	r0, [pc, #532]	; (800245c <sensorTask+0x244>)
 8002248:	f00e fe54 	bl	8010ef4 <puts>
	HAL_StatusTypeDef result;
	uint8_t i;
	for (i = 1; i < 128; i++) {
 800224c:	2301      	movs	r3, #1
 800224e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002252:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8002256:	2b00      	cmp	r3, #0
 8002258:	db23      	blt.n	80022a2 <sensorTask+0x8a>
		 * &hi2c1 is the handle
		 * (uint16_t)(i<<1) is the i2c address left aligned
		 * retries 2
		 * timeout 2
		 */
		result = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (i << 1), 2, 2);
 800225a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800225e:	b29b      	uxth	r3, r3
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	b299      	uxth	r1, r3
 8002264:	2302      	movs	r3, #2
 8002266:	2202      	movs	r2, #2
 8002268:	4879      	ldr	r0, [pc, #484]	; (8002450 <sensorTask+0x238>)
 800226a:	f005 fddf 	bl	8007e2c <HAL_I2C_IsDeviceReady>
 800226e:	4603      	mov	r3, r0
 8002270:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (result != HAL_OK) // HAL_ERROR or HAL_BUSY or HAL_TIMEOUT
 8002274:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002278:	2b00      	cmp	r3, #0
 800227a:	d002      	beq.n	8002282 <sensorTask+0x6a>
				{
			printf("."); // No ACK received at that address
 800227c:	202e      	movs	r0, #46	; 0x2e
 800227e:	f00e fdb5 	bl	8010dec <putchar>
		}
		if (result == HAL_OK) {
 8002282:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002286:	2b00      	cmp	r3, #0
 8002288:	d105      	bne.n	8002296 <sensorTask+0x7e>
			printf("0x%X", i); // Received an ACK at that address
 800228a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800228e:	4619      	mov	r1, r3
 8002290:	4873      	ldr	r0, [pc, #460]	; (8002460 <sensorTask+0x248>)
 8002292:	f00e fd93 	bl	8010dbc <iprintf>
	for (i = 1; i < 128; i++) {
 8002296:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800229a:	3301      	adds	r3, #1
 800229c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80022a0:	e7d7      	b.n	8002252 <sensorTask+0x3a>
		}
	}
	printf("\r\n");
 80022a2:	4870      	ldr	r0, [pc, #448]	; (8002464 <sensorTask+0x24c>)
 80022a4:	f00e fe26 	bl	8010ef4 <puts>

	char sbuf[100] = { 0 };
 80022a8:	2300      	movs	r3, #0
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	f107 0310 	add.w	r3, r7, #16
 80022b0:	2260      	movs	r2, #96	; 0x60
 80022b2:	2100      	movs	r1, #0
 80022b4:	4618      	mov	r0, r3
 80022b6:	f00e f82f 	bl	8010318 <memset>

	uint32_t timeNow = HAL_GetTick();
 80022ba:	f003 fe57 	bl	8005f6c <HAL_GetTick>
 80022be:	67b8      	str	r0, [r7, #120]	; 0x78

	float DEG2RAD = 0.017453292519943295769236907684886f;
 80022c0:	4b69      	ldr	r3, [pc, #420]	; (8002468 <sensorTask+0x250>)
 80022c2:	673b      	str	r3, [r7, #112]	; 0x70

	for (;;) {
		osDelay(80); // 281hz gyro
 80022c4:	2050      	movs	r0, #80	; 0x50
 80022c6:	f009 fd2d 	bl	800bd24 <osDelay>
		osThreadYield();
 80022ca:	f009 fd0b 	bl	800bce4 <osThreadYield>

		IMU_AccelRead(&imu);
 80022ce:	4861      	ldr	r0, [pc, #388]	; (8002454 <sensorTask+0x23c>)
 80022d0:	f7fe ff70 	bl	80011b4 <IMU_AccelRead>
		IMU_GyroRead(&imu);
 80022d4:	485f      	ldr	r0, [pc, #380]	; (8002454 <sensorTask+0x23c>)
 80022d6:	f7ff f8ed 	bl	80014b4 <IMU_GyroRead>
		//Mag_read(&imu);

		quaternionUpdate(imu.gyro[0] * DEG2RAD, imu.gyro[1] * DEG2RAD,
 80022da:	4b5e      	ldr	r3, [pc, #376]	; (8002454 <sensorTask+0x23c>)
 80022dc:	ed93 7a04 	vldr	s14, [r3, #16]
 80022e0:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80022e4:	ee27 8a27 	vmul.f32	s16, s14, s15
 80022e8:	4b5a      	ldr	r3, [pc, #360]	; (8002454 <sensorTask+0x23c>)
 80022ea:	ed93 7a05 	vldr	s14, [r3, #20]
 80022ee:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80022f2:	ee67 8a27 	vmul.f32	s17, s14, s15
				imu.gyro[2] * DEG2RAD, imu.acc[0], imu.acc[1], imu.acc[2],
 80022f6:	4b57      	ldr	r3, [pc, #348]	; (8002454 <sensorTask+0x23c>)
 80022f8:	ed93 7a06 	vldr	s14, [r3, #24]
		quaternionUpdate(imu.gyro[0] * DEG2RAD, imu.gyro[1] * DEG2RAD,
 80022fc:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002300:	ee27 9a27 	vmul.f32	s18, s14, s15
 8002304:	4b53      	ldr	r3, [pc, #332]	; (8002454 <sensorTask+0x23c>)
 8002306:	edd3 9a01 	vldr	s19, [r3, #4]
 800230a:	4b52      	ldr	r3, [pc, #328]	; (8002454 <sensorTask+0x23c>)
 800230c:	ed93 aa02 	vldr	s20, [r3, #8]
 8002310:	4b50      	ldr	r3, [pc, #320]	; (8002454 <sensorTask+0x23c>)
 8002312:	edd3 aa03 	vldr	s21, [r3, #12]
				(HAL_GetTick() - timeNow) * 0.001f);
 8002316:	f003 fe29 	bl	8005f6c <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800231e:	1ad3      	subs	r3, r2, r3
		quaternionUpdate(imu.gyro[0] * DEG2RAD, imu.gyro[1] * DEG2RAD,
 8002320:	ee07 3a90 	vmov	s15, r3
 8002324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002328:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800246c <sensorTask+0x254>
 800232c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002330:	eeb0 3a67 	vmov.f32	s6, s15
 8002334:	eef0 2a6a 	vmov.f32	s5, s21
 8002338:	eeb0 2a4a 	vmov.f32	s4, s20
 800233c:	eef0 1a69 	vmov.f32	s3, s19
 8002340:	eeb0 1a49 	vmov.f32	s2, s18
 8002344:	eef0 0a68 	vmov.f32	s1, s17
 8002348:	eeb0 0a48 	vmov.f32	s0, s16
 800234c:	f000 f8a4 	bl	8002498 <quaternionUpdate>
		timeNow = HAL_GetTick();
 8002350:	f003 fe0c 	bl	8005f6c <HAL_GetTick>
 8002354:	67b8      	str	r0, [r7, #120]	; 0x78

		imu.q[0] = SEq_1;
 8002356:	4b46      	ldr	r3, [pc, #280]	; (8002470 <sensorTask+0x258>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a3e      	ldr	r2, [pc, #248]	; (8002454 <sensorTask+0x23c>)
 800235c:	6593      	str	r3, [r2, #88]	; 0x58
		imu.q[1] = SEq_2;
 800235e:	4b45      	ldr	r3, [pc, #276]	; (8002474 <sensorTask+0x25c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a3c      	ldr	r2, [pc, #240]	; (8002454 <sensorTask+0x23c>)
 8002364:	65d3      	str	r3, [r2, #92]	; 0x5c
		imu.q[2] = SEq_3;
 8002366:	4b44      	ldr	r3, [pc, #272]	; (8002478 <sensorTask+0x260>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a3a      	ldr	r2, [pc, #232]	; (8002454 <sensorTask+0x23c>)
 800236c:	6613      	str	r3, [r2, #96]	; 0x60
		imu.q[3] = SEq_4;
 800236e:	4b43      	ldr	r3, [pc, #268]	; (800247c <sensorTask+0x264>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a38      	ldr	r2, [pc, #224]	; (8002454 <sensorTask+0x23c>)
 8002374:	6653      	str	r3, [r2, #100]	; 0x64

		sensor_data.yaw_abs_prev = sensor_data.yaw_abs;
 8002376:	4b38      	ldr	r3, [pc, #224]	; (8002458 <sensorTask+0x240>)
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	4a37      	ldr	r2, [pc, #220]	; (8002458 <sensorTask+0x240>)
 800237c:	6153      	str	r3, [r2, #20]
		sensor_data.yaw_abs = atan2(
				2.0f * (imu.q[1] * imu.q[2] + imu.q[0] * imu.q[3]),
 800237e:	4b35      	ldr	r3, [pc, #212]	; (8002454 <sensorTask+0x23c>)
 8002380:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8002384:	4b33      	ldr	r3, [pc, #204]	; (8002454 <sensorTask+0x23c>)
 8002386:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800238a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800238e:	4b31      	ldr	r3, [pc, #196]	; (8002454 <sensorTask+0x23c>)
 8002390:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 8002394:	4b2f      	ldr	r3, [pc, #188]	; (8002454 <sensorTask+0x23c>)
 8002396:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800239a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800239e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023a2:	ee77 7aa7 	vadd.f32	s15, s15, s15
		sensor_data.yaw_abs = atan2(
 80023a6:	ee17 0a90 	vmov	r0, s15
 80023aa:	f7fe f8cd 	bl	8000548 <__aeabi_f2d>
 80023ae:	4604      	mov	r4, r0
 80023b0:	460d      	mov	r5, r1
				imu.q[0] * imu.q[0] + imu.q[1] * imu.q[1] - imu.q[2] * imu.q[2]
 80023b2:	4b28      	ldr	r3, [pc, #160]	; (8002454 <sensorTask+0x23c>)
 80023b4:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 80023b8:	4b26      	ldr	r3, [pc, #152]	; (8002454 <sensorTask+0x23c>)
 80023ba:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80023be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023c2:	4b24      	ldr	r3, [pc, #144]	; (8002454 <sensorTask+0x23c>)
 80023c4:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
 80023c8:	4b22      	ldr	r3, [pc, #136]	; (8002454 <sensorTask+0x23c>)
 80023ca:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80023ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023d6:	4b1f      	ldr	r3, [pc, #124]	; (8002454 <sensorTask+0x23c>)
 80023d8:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 80023dc:	4b1d      	ldr	r3, [pc, #116]	; (8002454 <sensorTask+0x23c>)
 80023de:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80023e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023e6:	ee37 7a67 	vsub.f32	s14, s14, s15
						- imu.q[3] * imu.q[3])
 80023ea:	4b1a      	ldr	r3, [pc, #104]	; (8002454 <sensorTask+0x23c>)
 80023ec:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 80023f0:	4b18      	ldr	r3, [pc, #96]	; (8002454 <sensorTask+0x23c>)
 80023f2:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80023f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023fa:	ee77 7a67 	vsub.f32	s15, s14, s15
		sensor_data.yaw_abs = atan2(
 80023fe:	ee17 0a90 	vmov	r0, s15
 8002402:	f7fe f8a1 	bl	8000548 <__aeabi_f2d>
 8002406:	4602      	mov	r2, r0
 8002408:	460b      	mov	r3, r1
 800240a:	ec43 2b11 	vmov	d1, r2, r3
 800240e:	ec45 4b10 	vmov	d0, r4, r5
 8002412:	f00c fb51 	bl	800eab8 <atan2>
 8002416:	ec51 0b10 	vmov	r0, r1, d0
				* 57.295779513082320876798154814105f;
 800241a:	a30b      	add	r3, pc, #44	; (adr r3, 8002448 <sensorTask+0x230>)
 800241c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002420:	f7fe f8ea 	bl	80005f8 <__aeabi_dmul>
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	4610      	mov	r0, r2
 800242a:	4619      	mov	r1, r3
 800242c:	f7fe fbdc 	bl	8000be8 <__aeabi_d2f>
 8002430:	4603      	mov	r3, r0
		sensor_data.yaw_abs = atan2(
 8002432:	4a09      	ldr	r2, [pc, #36]	; (8002458 <sensorTask+0x240>)
 8002434:	6113      	str	r3, [r2, #16]
		sensor_data.yaw_abs_time = timeNow; // note that this method runs the risk of overflow but its every 49 days.
 8002436:	4a08      	ldr	r2, [pc, #32]	; (8002458 <sensorTask+0x240>)
 8002438:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800243a:	6193      	str	r3, [r2, #24]
		 imu.acc[0], imu.acc[1], imu.acc[2], imu.gyro[0], imu.gyro[1],
		 imu.gyro[2], imu.q[0], sensor_data.yaw_abs, sensor_data.ir_distL);
		 */
		//HAL_UART_Transmit(&huart3, (uint8_t*) sbuf, len, 10);
		//	HAL_UART_Receive_IT(&huart3, (uint8_t*) aRxBuffer, 5);
		is_task_alive_struct.senr = true;
 800243c:	4b10      	ldr	r3, [pc, #64]	; (8002480 <sensorTask+0x268>)
 800243e:	2201      	movs	r2, #1
 8002440:	709a      	strb	r2, [r3, #2]
		osDelay(80); // 281hz gyro
 8002442:	e73f      	b.n	80022c4 <sensorTask+0xac>
 8002444:	f3af 8000 	nop.w
 8002448:	20000000 	.word	0x20000000
 800244c:	404ca5dc 	.word	0x404ca5dc
 8002450:	20000978 	.word	0x20000978
 8002454:	20000880 	.word	0x20000880
 8002458:	2000065c 	.word	0x2000065c
 800245c:	080133ac 	.word	0x080133ac
 8002460:	080133c0 	.word	0x080133c0
 8002464:	080133c8 	.word	0x080133c8
 8002468:	3c8efa35 	.word	0x3c8efa35
 800246c:	3a83126f 	.word	0x3a83126f
 8002470:	20000058 	.word	0x20000058
 8002474:	20000864 	.word	0x20000864
 8002478:	20000868 	.word	0x20000868
 800247c:	2000086c 	.word	0x2000086c
 8002480:	20000694 	.word	0x20000694

08002484 <_ext_sig_halt>:

	}
}

void _ext_sig_halt(void) {
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
	controller.emergencyStop();
 8002488:	4802      	ldr	r0, [pc, #8]	; (8002494 <_ext_sig_halt+0x10>)
 800248a:	f001 fb41 	bl	8003b10 <_ZN9AppMotion16MotionController13emergencyStopEv>
}
 800248e:	bf00      	nop
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	200006b0 	.word	0x200006b0

08002498 <quaternionUpdate>:

#define gyroMeasError 3.14159265358979f * (1.0f / 180.0f)
#define beta sqrt(3.0f / 4.0f) * gyroMeasError
void quaternionUpdate(float w_x, float w_y, float w_z, float a_x, float a_y,
		float a_z, float deltat) {
 8002498:	b5b0      	push	{r4, r5, r7, lr}
 800249a:	b0a2      	sub	sp, #136	; 0x88
 800249c:	af00      	add	r7, sp, #0
 800249e:	ed87 0a07 	vstr	s0, [r7, #28]
 80024a2:	edc7 0a06 	vstr	s1, [r7, #24]
 80024a6:	ed87 1a05 	vstr	s2, [r7, #20]
 80024aa:	edc7 1a04 	vstr	s3, [r7, #16]
 80024ae:	ed87 2a03 	vstr	s4, [r7, #12]
 80024b2:	edc7 2a02 	vstr	s5, [r7, #8]
 80024b6:	ed87 3a01 	vstr	s6, [r7, #4]
	float SEqDot_omega_1, SEqDot_omega_2, SEqDot_omega_3, SEqDot_omega_4; // quaternion derivative from gyroscopes elements
	float f_1, f_2, f_3;                          // objective function elements
	float J_11or24, J_12or23, J_13or22, J_14or21, J_32, J_33; // objective function Jacobian elements
	float SEqHatDot_1, SEqHatDot_2, SEqHatDot_3, SEqHatDot_4; // estimated direction of the gyro error

	float halfSEq_1 = 0.5f * SEq_1;
 80024ba:	4bf1      	ldr	r3, [pc, #964]	; (8002880 <quaternionUpdate+0x3e8>)
 80024bc:	edd3 7a00 	vldr	s15, [r3]
 80024c0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80024c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024c8:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	float halfSEq_2 = 0.5f * SEq_2;
 80024cc:	4bed      	ldr	r3, [pc, #948]	; (8002884 <quaternionUpdate+0x3ec>)
 80024ce:	edd3 7a00 	vldr	s15, [r3]
 80024d2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80024d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024da:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	float halfSEq_3 = 0.5f * SEq_3;
 80024de:	4bea      	ldr	r3, [pc, #936]	; (8002888 <quaternionUpdate+0x3f0>)
 80024e0:	edd3 7a00 	vldr	s15, [r3]
 80024e4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80024e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024ec:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	float halfSEq_4 = 0.5f * SEq_4;
 80024f0:	4be6      	ldr	r3, [pc, #920]	; (800288c <quaternionUpdate+0x3f4>)
 80024f2:	edd3 7a00 	vldr	s15, [r3]
 80024f6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80024fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024fe:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	float twoSEq_1 = 2.0f * SEq_1;
 8002502:	4bdf      	ldr	r3, [pc, #892]	; (8002880 <quaternionUpdate+0x3e8>)
 8002504:	edd3 7a00 	vldr	s15, [r3]
 8002508:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800250c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	float twoSEq_2 = 2.0f * SEq_2;
 8002510:	4bdc      	ldr	r3, [pc, #880]	; (8002884 <quaternionUpdate+0x3ec>)
 8002512:	edd3 7a00 	vldr	s15, [r3]
 8002516:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800251a:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	float twoSEq_3 = 2.0f * SEq_3;
 800251e:	4bda      	ldr	r3, [pc, #872]	; (8002888 <quaternionUpdate+0x3f0>)
 8002520:	edd3 7a00 	vldr	s15, [r3]
 8002524:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002528:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

	// Normalize the accelerometer measurement
	norm = sqrt(a_x * a_x + a_y * a_y + a_z * a_z);
 800252c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002530:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002534:	edd7 7a03 	vldr	s15, [r7, #12]
 8002538:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800253c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002540:	edd7 7a02 	vldr	s15, [r7, #8]
 8002544:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002548:	ee77 7a27 	vadd.f32	s15, s14, s15
 800254c:	ee17 0a90 	vmov	r0, s15
 8002550:	f7fd fffa 	bl	8000548 <__aeabi_f2d>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	ec43 2b10 	vmov	d0, r2, r3
 800255c:	f00c fb4c 	bl	800ebf8 <sqrt>
 8002560:	ec53 2b10 	vmov	r2, r3, d0
 8002564:	4610      	mov	r0, r2
 8002566:	4619      	mov	r1, r3
 8002568:	f7fe fb3e 	bl	8000be8 <__aeabi_d2f>
 800256c:	4603      	mov	r3, r0
 800256e:	66bb      	str	r3, [r7, #104]	; 0x68
	a_x /= norm;
 8002570:	edd7 6a04 	vldr	s13, [r7, #16]
 8002574:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002578:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800257c:	edc7 7a04 	vstr	s15, [r7, #16]
	a_y /= norm;
 8002580:	edd7 6a03 	vldr	s13, [r7, #12]
 8002584:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002588:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800258c:	edc7 7a03 	vstr	s15, [r7, #12]
	a_z /= norm;
 8002590:	edd7 6a02 	vldr	s13, [r7, #8]
 8002594:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002598:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800259c:	edc7 7a02 	vstr	s15, [r7, #8]

	// Compute the objective function and Jacobian
	f_1 = twoSEq_2 * SEq_4 - twoSEq_1 * SEq_3 - a_x;
 80025a0:	4bba      	ldr	r3, [pc, #744]	; (800288c <quaternionUpdate+0x3f4>)
 80025a2:	ed93 7a00 	vldr	s14, [r3]
 80025a6:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80025aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025ae:	4bb6      	ldr	r3, [pc, #728]	; (8002888 <quaternionUpdate+0x3f0>)
 80025b0:	edd3 6a00 	vldr	s13, [r3]
 80025b4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80025b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80025c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025c8:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	f_2 = twoSEq_1 * SEq_2 + twoSEq_3 * SEq_4 - a_y;
 80025cc:	4bad      	ldr	r3, [pc, #692]	; (8002884 <quaternionUpdate+0x3ec>)
 80025ce:	ed93 7a00 	vldr	s14, [r3]
 80025d2:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80025d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025da:	4bac      	ldr	r3, [pc, #688]	; (800288c <quaternionUpdate+0x3f4>)
 80025dc:	edd3 6a00 	vldr	s13, [r3]
 80025e0:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80025e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80025f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025f4:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	f_3 = 1.0f - twoSEq_2 * SEq_2 - twoSEq_3 * SEq_3 - a_z;
 80025f8:	4ba2      	ldr	r3, [pc, #648]	; (8002884 <quaternionUpdate+0x3ec>)
 80025fa:	ed93 7a00 	vldr	s14, [r3]
 80025fe:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002606:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800260a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800260e:	4b9e      	ldr	r3, [pc, #632]	; (8002888 <quaternionUpdate+0x3f0>)
 8002610:	edd3 6a00 	vldr	s13, [r3]
 8002614:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002618:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800261c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002620:	edd7 7a02 	vldr	s15, [r7, #8]
 8002624:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002628:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	J_11or24 = twoSEq_3;
 800262c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800262e:	65bb      	str	r3, [r7, #88]	; 0x58
	J_12or23 = 2.0f * SEq_4;
 8002630:	4b96      	ldr	r3, [pc, #600]	; (800288c <quaternionUpdate+0x3f4>)
 8002632:	edd3 7a00 	vldr	s15, [r3]
 8002636:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800263a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	J_13or22 = twoSEq_1;
 800263e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002640:	653b      	str	r3, [r7, #80]	; 0x50
	J_14or21 = twoSEq_2;
 8002642:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002644:	64fb      	str	r3, [r7, #76]	; 0x4c
	J_32 = 2.0f * J_14or21;
 8002646:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800264a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800264e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	J_33 = 2.0f * J_11or24;
 8002652:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002656:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800265a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

	// Compute the gradient (matrix multiplication)
	SEqHatDot_1 = J_14or21 * f_2 - J_11or24 * f_1;
 800265e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002662:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002666:	ee27 7a27 	vmul.f32	s14, s14, s15
 800266a:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800266e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002672:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002676:	ee77 7a67 	vsub.f32	s15, s14, s15
 800267a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	SEqHatDot_2 = J_12or23 * f_1 + J_13or22 * f_2 - J_32 * f_3;
 800267e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002682:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002686:	ee27 7a27 	vmul.f32	s14, s14, s15
 800268a:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800268e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002692:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002696:	ee37 7a27 	vadd.f32	s14, s14, s15
 800269a:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800269e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80026a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026aa:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	SEqHatDot_3 = J_12or23 * f_2 - J_33 * f_3 - J_13or22 * f_1;
 80026ae:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80026b2:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80026b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026ba:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80026be:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80026c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026ca:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80026ce:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80026d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026da:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	SEqHatDot_4 = J_14or21 * f_1 + J_11or24 * f_2;
 80026de:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80026e2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80026e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026ea:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80026ee:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80026f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026fa:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	// Normalize the gradient
	norm = sqrt(
			SEqHatDot_1 * SEqHatDot_1 + SEqHatDot_2 * SEqHatDot_2
 80026fe:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002702:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002706:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800270a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800270e:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ SEqHatDot_3 * SEqHatDot_3 + SEqHatDot_4 * SEqHatDot_4);
 8002712:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002716:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800271a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800271e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002722:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002726:	ee77 7a27 	vadd.f32	s15, s14, s15
	norm = sqrt(
 800272a:	ee17 0a90 	vmov	r0, s15
 800272e:	f7fd ff0b 	bl	8000548 <__aeabi_f2d>
 8002732:	4602      	mov	r2, r0
 8002734:	460b      	mov	r3, r1
 8002736:	ec43 2b10 	vmov	d0, r2, r3
 800273a:	f00c fa5d 	bl	800ebf8 <sqrt>
 800273e:	ec53 2b10 	vmov	r2, r3, d0
 8002742:	4610      	mov	r0, r2
 8002744:	4619      	mov	r1, r3
 8002746:	f7fe fa4f 	bl	8000be8 <__aeabi_d2f>
 800274a:	4603      	mov	r3, r0
 800274c:	66bb      	str	r3, [r7, #104]	; 0x68
	SEqHatDot_1 /= norm;
 800274e:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002752:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002756:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800275a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	SEqHatDot_2 /= norm;
 800275e:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8002762:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002766:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800276a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	SEqHatDot_3 /= norm;
 800276e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8002772:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002776:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800277a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	SEqHatDot_4 /= norm;
 800277e:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8002782:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002786:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800278a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	// Compute the quaternion derivative measured by gyroscopes
	SEqDot_omega_1 = -halfSEq_2 * w_x - halfSEq_3 * w_y - halfSEq_4 * w_z;
 800278e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002792:	eeb1 7a67 	vneg.f32	s14, s15
 8002796:	edd7 7a07 	vldr	s15, [r7, #28]
 800279a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800279e:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 80027a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80027a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027ae:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 80027b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80027b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027be:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	SEqDot_omega_2 = halfSEq_1 * w_x + halfSEq_3 * w_z - halfSEq_4 * w_y;
 80027c2:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80027c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80027ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027ce:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 80027d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80027d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027de:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 80027e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80027e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027ee:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	SEqDot_omega_3 = halfSEq_1 * w_y - halfSEq_2 * w_z + halfSEq_4 * w_x;
 80027f2:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80027f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80027fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027fe:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8002802:	edd7 7a05 	vldr	s15, [r7, #20]
 8002806:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800280a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800280e:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8002812:	edd7 7a07 	vldr	s15, [r7, #28]
 8002816:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800281a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800281e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	SEqDot_omega_4 = halfSEq_1 * w_z + halfSEq_2 * w_y - halfSEq_3 * w_x;
 8002822:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8002826:	edd7 7a05 	vldr	s15, [r7, #20]
 800282a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800282e:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8002832:	edd7 7a06 	vldr	s15, [r7, #24]
 8002836:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800283a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800283e:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8002842:	edd7 7a07 	vldr	s15, [r7, #28]
 8002846:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800284a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800284e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	// Compute then integrate the estimated quaternion derivative
	SEq_1 += (SEqDot_omega_1 - (beta * SEqHatDot_1)) * deltat;
 8002852:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002854:	f7fd fe78 	bl	8000548 <__aeabi_f2d>
 8002858:	4604      	mov	r4, r0
 800285a:	460d      	mov	r5, r1
 800285c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800285e:	f7fd fe73 	bl	8000548 <__aeabi_f2d>
 8002862:	a305      	add	r3, pc, #20	; (adr r3, 8002878 <quaternionUpdate+0x3e0>)
 8002864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002868:	f7fd fec6 	bl	80005f8 <__aeabi_dmul>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	e00e      	b.n	8002890 <quaternionUpdate+0x3f8>
 8002872:	bf00      	nop
 8002874:	f3af 8000 	nop.w
 8002878:	5a6bac7d 	.word	0x5a6bac7d
 800287c:	3f8ef49c 	.word	0x3f8ef49c
 8002880:	20000058 	.word	0x20000058
 8002884:	20000864 	.word	0x20000864
 8002888:	20000868 	.word	0x20000868
 800288c:	2000086c 	.word	0x2000086c
 8002890:	4620      	mov	r0, r4
 8002892:	4629      	mov	r1, r5
 8002894:	f7fd fcf8 	bl	8000288 <__aeabi_dsub>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	4614      	mov	r4, r2
 800289e:	461d      	mov	r5, r3
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f7fd fe51 	bl	8000548 <__aeabi_f2d>
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	4620      	mov	r0, r4
 80028ac:	4629      	mov	r1, r5
 80028ae:	f7fd fea3 	bl	80005f8 <__aeabi_dmul>
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	4614      	mov	r4, r2
 80028b8:	461d      	mov	r5, r3
 80028ba:	4b93      	ldr	r3, [pc, #588]	; (8002b08 <quaternionUpdate+0x670>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7fd fe42 	bl	8000548 <__aeabi_f2d>
 80028c4:	4602      	mov	r2, r0
 80028c6:	460b      	mov	r3, r1
 80028c8:	4620      	mov	r0, r4
 80028ca:	4629      	mov	r1, r5
 80028cc:	f7fd fcde 	bl	800028c <__adddf3>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	4610      	mov	r0, r2
 80028d6:	4619      	mov	r1, r3
 80028d8:	f7fe f986 	bl	8000be8 <__aeabi_d2f>
 80028dc:	4603      	mov	r3, r0
 80028de:	4a8a      	ldr	r2, [pc, #552]	; (8002b08 <quaternionUpdate+0x670>)
 80028e0:	6013      	str	r3, [r2, #0]
	SEq_2 += (SEqDot_omega_2 - (beta * SEqHatDot_2)) * deltat;
 80028e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80028e4:	f7fd fe30 	bl	8000548 <__aeabi_f2d>
 80028e8:	4604      	mov	r4, r0
 80028ea:	460d      	mov	r5, r1
 80028ec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80028ee:	f7fd fe2b 	bl	8000548 <__aeabi_f2d>
 80028f2:	a383      	add	r3, pc, #524	; (adr r3, 8002b00 <quaternionUpdate+0x668>)
 80028f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f8:	f7fd fe7e 	bl	80005f8 <__aeabi_dmul>
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	4620      	mov	r0, r4
 8002902:	4629      	mov	r1, r5
 8002904:	f7fd fcc0 	bl	8000288 <__aeabi_dsub>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	4614      	mov	r4, r2
 800290e:	461d      	mov	r5, r3
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7fd fe19 	bl	8000548 <__aeabi_f2d>
 8002916:	4602      	mov	r2, r0
 8002918:	460b      	mov	r3, r1
 800291a:	4620      	mov	r0, r4
 800291c:	4629      	mov	r1, r5
 800291e:	f7fd fe6b 	bl	80005f8 <__aeabi_dmul>
 8002922:	4602      	mov	r2, r0
 8002924:	460b      	mov	r3, r1
 8002926:	4614      	mov	r4, r2
 8002928:	461d      	mov	r5, r3
 800292a:	4b78      	ldr	r3, [pc, #480]	; (8002b0c <quaternionUpdate+0x674>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f7fd fe0a 	bl	8000548 <__aeabi_f2d>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	4620      	mov	r0, r4
 800293a:	4629      	mov	r1, r5
 800293c:	f7fd fca6 	bl	800028c <__adddf3>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4610      	mov	r0, r2
 8002946:	4619      	mov	r1, r3
 8002948:	f7fe f94e 	bl	8000be8 <__aeabi_d2f>
 800294c:	4603      	mov	r3, r0
 800294e:	4a6f      	ldr	r2, [pc, #444]	; (8002b0c <quaternionUpdate+0x674>)
 8002950:	6013      	str	r3, [r2, #0]
	SEq_3 += (SEqDot_omega_3 - (beta * SEqHatDot_3)) * deltat;
 8002952:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002954:	f7fd fdf8 	bl	8000548 <__aeabi_f2d>
 8002958:	4604      	mov	r4, r0
 800295a:	460d      	mov	r5, r1
 800295c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800295e:	f7fd fdf3 	bl	8000548 <__aeabi_f2d>
 8002962:	a367      	add	r3, pc, #412	; (adr r3, 8002b00 <quaternionUpdate+0x668>)
 8002964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002968:	f7fd fe46 	bl	80005f8 <__aeabi_dmul>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4620      	mov	r0, r4
 8002972:	4629      	mov	r1, r5
 8002974:	f7fd fc88 	bl	8000288 <__aeabi_dsub>
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	4614      	mov	r4, r2
 800297e:	461d      	mov	r5, r3
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f7fd fde1 	bl	8000548 <__aeabi_f2d>
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	4620      	mov	r0, r4
 800298c:	4629      	mov	r1, r5
 800298e:	f7fd fe33 	bl	80005f8 <__aeabi_dmul>
 8002992:	4602      	mov	r2, r0
 8002994:	460b      	mov	r3, r1
 8002996:	4614      	mov	r4, r2
 8002998:	461d      	mov	r5, r3
 800299a:	4b5d      	ldr	r3, [pc, #372]	; (8002b10 <quaternionUpdate+0x678>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7fd fdd2 	bl	8000548 <__aeabi_f2d>
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	4620      	mov	r0, r4
 80029aa:	4629      	mov	r1, r5
 80029ac:	f7fd fc6e 	bl	800028c <__adddf3>
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	4610      	mov	r0, r2
 80029b6:	4619      	mov	r1, r3
 80029b8:	f7fe f916 	bl	8000be8 <__aeabi_d2f>
 80029bc:	4603      	mov	r3, r0
 80029be:	4a54      	ldr	r2, [pc, #336]	; (8002b10 <quaternionUpdate+0x678>)
 80029c0:	6013      	str	r3, [r2, #0]
	SEq_4 += (SEqDot_omega_4 - (beta * SEqHatDot_4)) * deltat;
 80029c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029c4:	f7fd fdc0 	bl	8000548 <__aeabi_f2d>
 80029c8:	4604      	mov	r4, r0
 80029ca:	460d      	mov	r5, r1
 80029cc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80029ce:	f7fd fdbb 	bl	8000548 <__aeabi_f2d>
 80029d2:	a34b      	add	r3, pc, #300	; (adr r3, 8002b00 <quaternionUpdate+0x668>)
 80029d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d8:	f7fd fe0e 	bl	80005f8 <__aeabi_dmul>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	4620      	mov	r0, r4
 80029e2:	4629      	mov	r1, r5
 80029e4:	f7fd fc50 	bl	8000288 <__aeabi_dsub>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4614      	mov	r4, r2
 80029ee:	461d      	mov	r5, r3
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f7fd fda9 	bl	8000548 <__aeabi_f2d>
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	4620      	mov	r0, r4
 80029fc:	4629      	mov	r1, r5
 80029fe:	f7fd fdfb 	bl	80005f8 <__aeabi_dmul>
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	4614      	mov	r4, r2
 8002a08:	461d      	mov	r5, r3
 8002a0a:	4b42      	ldr	r3, [pc, #264]	; (8002b14 <quaternionUpdate+0x67c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fd fd9a 	bl	8000548 <__aeabi_f2d>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	4620      	mov	r0, r4
 8002a1a:	4629      	mov	r1, r5
 8002a1c:	f7fd fc36 	bl	800028c <__adddf3>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	4610      	mov	r0, r2
 8002a26:	4619      	mov	r1, r3
 8002a28:	f7fe f8de 	bl	8000be8 <__aeabi_d2f>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	4a39      	ldr	r2, [pc, #228]	; (8002b14 <quaternionUpdate+0x67c>)
 8002a30:	6013      	str	r3, [r2, #0]

	// Normalize quaternion
	norm = sqrt(SEq_1 * SEq_1 + SEq_2 * SEq_2 + SEq_3 * SEq_3 + SEq_4 * SEq_4);
 8002a32:	4b35      	ldr	r3, [pc, #212]	; (8002b08 <quaternionUpdate+0x670>)
 8002a34:	ed93 7a00 	vldr	s14, [r3]
 8002a38:	4b33      	ldr	r3, [pc, #204]	; (8002b08 <quaternionUpdate+0x670>)
 8002a3a:	edd3 7a00 	vldr	s15, [r3]
 8002a3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a42:	4b32      	ldr	r3, [pc, #200]	; (8002b0c <quaternionUpdate+0x674>)
 8002a44:	edd3 6a00 	vldr	s13, [r3]
 8002a48:	4b30      	ldr	r3, [pc, #192]	; (8002b0c <quaternionUpdate+0x674>)
 8002a4a:	edd3 7a00 	vldr	s15, [r3]
 8002a4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a56:	4b2e      	ldr	r3, [pc, #184]	; (8002b10 <quaternionUpdate+0x678>)
 8002a58:	edd3 6a00 	vldr	s13, [r3]
 8002a5c:	4b2c      	ldr	r3, [pc, #176]	; (8002b10 <quaternionUpdate+0x678>)
 8002a5e:	edd3 7a00 	vldr	s15, [r3]
 8002a62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a6a:	4b2a      	ldr	r3, [pc, #168]	; (8002b14 <quaternionUpdate+0x67c>)
 8002a6c:	edd3 6a00 	vldr	s13, [r3]
 8002a70:	4b28      	ldr	r3, [pc, #160]	; (8002b14 <quaternionUpdate+0x67c>)
 8002a72:	edd3 7a00 	vldr	s15, [r3]
 8002a76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a7e:	ee17 0a90 	vmov	r0, s15
 8002a82:	f7fd fd61 	bl	8000548 <__aeabi_f2d>
 8002a86:	4602      	mov	r2, r0
 8002a88:	460b      	mov	r3, r1
 8002a8a:	ec43 2b10 	vmov	d0, r2, r3
 8002a8e:	f00c f8b3 	bl	800ebf8 <sqrt>
 8002a92:	ec53 2b10 	vmov	r2, r3, d0
 8002a96:	4610      	mov	r0, r2
 8002a98:	4619      	mov	r1, r3
 8002a9a:	f7fe f8a5 	bl	8000be8 <__aeabi_d2f>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	66bb      	str	r3, [r7, #104]	; 0x68
	SEq_1 /= norm;
 8002aa2:	4b19      	ldr	r3, [pc, #100]	; (8002b08 <quaternionUpdate+0x670>)
 8002aa4:	edd3 6a00 	vldr	s13, [r3]
 8002aa8:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002aac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ab0:	4b15      	ldr	r3, [pc, #84]	; (8002b08 <quaternionUpdate+0x670>)
 8002ab2:	edc3 7a00 	vstr	s15, [r3]
	SEq_2 /= norm;
 8002ab6:	4b15      	ldr	r3, [pc, #84]	; (8002b0c <quaternionUpdate+0x674>)
 8002ab8:	edd3 6a00 	vldr	s13, [r3]
 8002abc:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002ac0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ac4:	4b11      	ldr	r3, [pc, #68]	; (8002b0c <quaternionUpdate+0x674>)
 8002ac6:	edc3 7a00 	vstr	s15, [r3]
	SEq_3 /= norm;
 8002aca:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <quaternionUpdate+0x678>)
 8002acc:	edd3 6a00 	vldr	s13, [r3]
 8002ad0:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002ad4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ad8:	4b0d      	ldr	r3, [pc, #52]	; (8002b10 <quaternionUpdate+0x678>)
 8002ada:	edc3 7a00 	vstr	s15, [r3]
	SEq_4 /= norm;
 8002ade:	4b0d      	ldr	r3, [pc, #52]	; (8002b14 <quaternionUpdate+0x67c>)
 8002ae0:	edd3 6a00 	vldr	s13, [r3]
 8002ae4:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002ae8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002aec:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <quaternionUpdate+0x67c>)
 8002aee:	edc3 7a00 	vstr	s15, [r3]
}
 8002af2:	bf00      	nop
 8002af4:	3788      	adds	r7, #136	; 0x88
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bdb0      	pop	{r4, r5, r7, pc}
 8002afa:	bf00      	nop
 8002afc:	f3af 8000 	nop.w
 8002b00:	5a6bac7d 	.word	0x5a6bac7d
 8002b04:	3f8ef49c 	.word	0x3f8ef49c
 8002b08:	20000058 	.word	0x20000058
 8002b0c:	20000864 	.word	0x20000864
 8002b10:	20000868 	.word	0x20000868
 8002b14:	2000086c 	.word	0x2000086c

08002b18 <_Z41__static_initialization_and_destruction_0ii>:
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d125      	bne.n	8002b74 <_Z41__static_initialization_and_destruction_0ii+0x5c>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d120      	bne.n	8002b74 <_Z41__static_initialization_and_destruction_0ii+0x5c>
		.mailbox = { .queue = NULL } };
 8002b32:	4b1b      	ldr	r3, [pc, #108]	; (8002ba0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a1b      	ldr	r2, [pc, #108]	; (8002ba4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8002b38:	6013      	str	r3, [r2, #0]
osMessageQueueId_t ctrlQueue = osMessageQueueNew(10,
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	210c      	movs	r1, #12
 8002b3e:	200a      	movs	r0, #10
 8002b40:	f009 f90b 	bl	800bd5a <osMessageQueueNew>
 8002b44:	4603      	mov	r3, r0
 8002b46:	4a18      	ldr	r2, [pc, #96]	; (8002ba8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8002b48:	6013      	str	r3, [r2, #0]
		.mailbox = { .queue = ctrlQueue } };
 8002b4a:	4b18      	ldr	r3, [pc, #96]	; (8002bac <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a18      	ldr	r2, [pc, #96]	; (8002bb0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8002b50:	6013      	str	r3, [r2, #0]
 8002b52:	4b15      	ldr	r3, [pc, #84]	; (8002ba8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a16      	ldr	r2, [pc, #88]	; (8002bb0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8002b58:	6293      	str	r3, [r2, #40]	; 0x28
AppMotion::MotionController controller(&ctrlCtx);
 8002b5a:	4915      	ldr	r1, [pc, #84]	; (8002bb0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8002b5c:	4815      	ldr	r0, [pc, #84]	; (8002bb4 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8002b5e:	f000 f86d 	bl	8002c3c <_ZN9AppMotion16MotionControllerC1EP5u_ctx>
AppParser::Processor processor(&procCtx, &ctrlCtx);
 8002b62:	4a13      	ldr	r2, [pc, #76]	; (8002bb0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8002b64:	490f      	ldr	r1, [pc, #60]	; (8002ba4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8002b66:	4814      	ldr	r0, [pc, #80]	; (8002bb8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8002b68:	f001 f9e6 	bl	8003f38 <_ZN9AppParser9ProcessorC1EP5u_ctxS2_>
AppParser::Listener listener(&procCtx);
 8002b6c:	490d      	ldr	r1, [pc, #52]	; (8002ba4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8002b6e:	4813      	ldr	r0, [pc, #76]	; (8002bbc <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8002b70:	f001 f9a1 	bl	8003eb6 <_ZN9AppParser8ListenerC1EP5u_ctx>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10d      	bne.n	8002b96 <_Z41__static_initialization_and_destruction_0ii+0x7e>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d108      	bne.n	8002b96 <_Z41__static_initialization_and_destruction_0ii+0x7e>
 8002b84:	480d      	ldr	r0, [pc, #52]	; (8002bbc <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8002b86:	f001 f9a5 	bl	8003ed4 <_ZN9AppParser8ListenerD1Ev>
AppParser::Processor processor(&procCtx, &ctrlCtx);
 8002b8a:	480b      	ldr	r0, [pc, #44]	; (8002bb8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8002b8c:	f001 f9ee 	bl	8003f6c <_ZN9AppParser9ProcessorD1Ev>
AppMotion::MotionController controller(&ctrlCtx);
 8002b90:	4808      	ldr	r0, [pc, #32]	; (8002bb4 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8002b92:	f7ff f9b7 	bl	8001f04 <_ZN9AppMotion16MotionControllerD1Ev>
}
 8002b96:	bf00      	nop
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	2000069c 	.word	0x2000069c
 8002ba4:	20000000 	.word	0x20000000
 8002ba8:	200006ac 	.word	0x200006ac
 8002bac:	200006a0 	.word	0x200006a0
 8002bb0:	2000002c 	.word	0x2000002c
 8002bb4:	200006b0 	.word	0x200006b0
 8002bb8:	2000080c 	.word	0x2000080c
 8002bbc:	20000814 	.word	0x20000814

08002bc0 <_GLOBAL__sub_I_sensor_data>:
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002bc8:	2001      	movs	r0, #1
 8002bca:	f7ff ffa5 	bl	8002b18 <_Z41__static_initialization_and_destruction_0ii>
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <_GLOBAL__sub_D_sensor_data>:
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002bd8:	2000      	movs	r0, #0
 8002bda:	f7ff ff9d 	bl	8002b18 <_Z41__static_initialization_and_destruction_0ii>
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <_ZN9AppMotion16MotionController3mapEfffff>:
	;
	u_ctx *ctx;
	static void motionTask(void *pv);
	static float map(float x, float in_min, float in_max, float out_min, float out_max) {
 8002be0:	b480      	push	{r7}
 8002be2:	b087      	sub	sp, #28
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	ed87 0a05 	vstr	s0, [r7, #20]
 8002bea:	edc7 0a04 	vstr	s1, [r7, #16]
 8002bee:	ed87 1a03 	vstr	s2, [r7, #12]
 8002bf2:	edc7 1a02 	vstr	s3, [r7, #8]
 8002bf6:	ed87 2a01 	vstr	s4, [r7, #4]
	    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002bfa:	ed97 7a05 	vldr	s14, [r7, #20]
 8002bfe:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c02:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c06:	edd7 6a01 	vldr	s13, [r7, #4]
 8002c0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c0e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002c12:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002c16:	ed97 7a03 	vldr	s14, [r7, #12]
 8002c1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c26:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
	}
 8002c2e:	eeb0 0a67 	vmov.f32	s0, s15
 8002c32:	371c      	adds	r7, #28
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <_ZN9AppMotion16MotionControllerC1EP5u_ctx>:
#define REAR_WHEEL_RADIUS_CM 6.5/2
#define REAR_WHEEL_ROTATION_DISTANCE (2 * 3.142 * REAR_WHEEL_RADIUS_CM)
#define ENCODER_PULSES_PER_ROTATION 1560 * 1.045
#define DISTANCE_PER_ENCODER_PULSE (REAR_WHEEL_ROTATION_DISTANCE / ENCODER_PULSES_PER_ROTATION)

MotionController::MotionController(u_ctx *ctx) {
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
	this->ctx = ctx;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	601a      	str	r2, [r3, #0]
	/* Instantiate the physical devices */

}
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
	...

08002c5c <_ZN9AppMotion16MotionController5startEv>:

void MotionController::start(void) {
 8002c5c:	b590      	push	{r4, r7, lr}
 8002c5e:	b08f      	sub	sp, #60	; 0x3c
 8002c60:	af04      	add	r7, sp, #16
 8002c62:	6078      	str	r0, [r7, #4]
	this->servo = new Servo(&htim1, TIM_CHANNEL_1, CENTER_POS_PWM - LEFT_DELTA,
	CENTER_POS_PWM + RIGHT_DELTA, CENTER_POS_PWM);
 8002c64:	2018      	movs	r0, #24
 8002c66:	f00b fee9 	bl	800ea3c <_Znwj>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	461c      	mov	r4, r3
 8002c6e:	2393      	movs	r3, #147	; 0x93
 8002c70:	9301      	str	r3, [sp, #4]
 8002c72:	23f7      	movs	r3, #247	; 0xf7
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	2361      	movs	r3, #97	; 0x61
 8002c78:	2200      	movs	r2, #0
 8002c7a:	4955      	ldr	r1, [pc, #340]	; (8002dd0 <_ZN9AppMotion16MotionController5startEv+0x174>)
 8002c7c:	4620      	mov	r0, r4
 8002c7e:	f000 ff55 	bl	8003b2c <_ZN9AppMotion5ServoC1EP17TIM_HandleTypeDefmmmm>
	this->servo = new Servo(&htim1, TIM_CHANNEL_1, CENTER_POS_PWM - LEFT_DELTA,
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	60dc      	str	r4, [r3, #12]
	this->lmotor = new Motor(&htim8, TIM_CHANNEL_1, GPIOA, GPIOA, GPIO_PIN_5,
	GPIO_PIN_4, 7199);
 8002c86:	2018      	movs	r0, #24
 8002c88:	f00b fed8 	bl	800ea3c <_Znwj>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	461c      	mov	r4, r3
 8002c90:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8002c94:	9303      	str	r3, [sp, #12]
 8002c96:	2310      	movs	r3, #16
 8002c98:	9302      	str	r3, [sp, #8]
 8002c9a:	2320      	movs	r3, #32
 8002c9c:	9301      	str	r3, [sp, #4]
 8002c9e:	4b4d      	ldr	r3, [pc, #308]	; (8002dd4 <_ZN9AppMotion16MotionController5startEv+0x178>)
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	4b4c      	ldr	r3, [pc, #304]	; (8002dd4 <_ZN9AppMotion16MotionController5startEv+0x178>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	494c      	ldr	r1, [pc, #304]	; (8002dd8 <_ZN9AppMotion16MotionController5startEv+0x17c>)
 8002ca8:	4620      	mov	r0, r4
 8002caa:	f000 ff91 	bl	8003bd0 <_ZN9AppMotion5MotorC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefS4_ttm>
	this->lmotor = new Motor(&htim8, TIM_CHANNEL_1, GPIOA, GPIOA, GPIO_PIN_5,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	605c      	str	r4, [r3, #4]
	this->rmotor = new Motor(&htim8, TIM_CHANNEL_2, GPIOA, GPIOA, GPIO_PIN_2,
	GPIO_PIN_3, 7199);
 8002cb2:	2018      	movs	r0, #24
 8002cb4:	f00b fec2 	bl	800ea3c <_Znwj>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	461c      	mov	r4, r3
 8002cbc:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8002cc0:	9303      	str	r3, [sp, #12]
 8002cc2:	2308      	movs	r3, #8
 8002cc4:	9302      	str	r3, [sp, #8]
 8002cc6:	2304      	movs	r3, #4
 8002cc8:	9301      	str	r3, [sp, #4]
 8002cca:	4b42      	ldr	r3, [pc, #264]	; (8002dd4 <_ZN9AppMotion16MotionController5startEv+0x178>)
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	4b41      	ldr	r3, [pc, #260]	; (8002dd4 <_ZN9AppMotion16MotionController5startEv+0x178>)
 8002cd0:	2204      	movs	r2, #4
 8002cd2:	4941      	ldr	r1, [pc, #260]	; (8002dd8 <_ZN9AppMotion16MotionController5startEv+0x17c>)
 8002cd4:	4620      	mov	r0, r4
 8002cd6:	f000 ff7b 	bl	8003bd0 <_ZN9AppMotion5MotorC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefS4_ttm>
	this->rmotor = new Motor(&htim8, TIM_CHANNEL_2, GPIOA, GPIOA, GPIO_PIN_2,
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	609c      	str	r4, [r3, #8]
	float pid_param_right[3] = { 3.1, 0.0, 0.1 };
 8002cde:	4a3f      	ldr	r2, [pc, #252]	; (8002ddc <_ZN9AppMotion16MotionController5startEv+0x180>)
 8002ce0:	f107 0318 	add.w	r3, r7, #24
 8002ce4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ce6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float pid_param_sync[3] = { 5, 0, 1 };
 8002cea:	4a3d      	ldr	r2, [pc, #244]	; (8002de0 <_ZN9AppMotion16MotionController5startEv+0x184>)
 8002cec:	f107 030c 	add.w	r3, r7, #12
 8002cf0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002cf2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	PID_init(&this->left_pid, PID_POSITION, pid_param_right, 7500, 7500);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	3318      	adds	r3, #24
 8002cfa:	f107 0218 	add.w	r2, r7, #24
 8002cfe:	eddf 0a39 	vldr	s1, [pc, #228]	; 8002de4 <_ZN9AppMotion16MotionController5startEv+0x188>
 8002d02:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8002de4 <_ZN9AppMotion16MotionController5startEv+0x188>
 8002d06:	2100      	movs	r1, #0
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f002 f9ba 	bl	8005082 <_Z8PID_initP12pid_type_defhPKfff>
	PID_init(&this->right_pid, PID_POSITION, pid_param_right, 7500, 7500);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	3368      	adds	r3, #104	; 0x68
 8002d12:	f107 0218 	add.w	r2, r7, #24
 8002d16:	eddf 0a33 	vldr	s1, [pc, #204]	; 8002de4 <_ZN9AppMotion16MotionController5startEv+0x188>
 8002d1a:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8002de4 <_ZN9AppMotion16MotionController5startEv+0x188>
 8002d1e:	2100      	movs	r1, #0
 8002d20:	4618      	mov	r0, r3
 8002d22:	f002 f9ae 	bl	8005082 <_Z8PID_initP12pid_type_defhPKfff>
	PID_init(&this->sync_left_pid, 0, pid_param_sync, 1000, 1000);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	33b8      	adds	r3, #184	; 0xb8
 8002d2a:	f107 020c 	add.w	r2, r7, #12
 8002d2e:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8002de8 <_ZN9AppMotion16MotionController5startEv+0x18c>
 8002d32:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8002de8 <_ZN9AppMotion16MotionController5startEv+0x18c>
 8002d36:	2100      	movs	r1, #0
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f002 f9a2 	bl	8005082 <_Z8PID_initP12pid_type_defhPKfff>
	PID_init(&this->sync_right_pid, 0, pid_param_sync, 1000, 1000);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002d44:	f107 020c 	add.w	r2, r7, #12
 8002d48:	eddf 0a27 	vldr	s1, [pc, #156]	; 8002de8 <_ZN9AppMotion16MotionController5startEv+0x18c>
 8002d4c:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8002de8 <_ZN9AppMotion16MotionController5startEv+0x18c>
 8002d50:	2100      	movs	r1, #0
 8002d52:	4618      	mov	r0, r3
 8002d54:	f002 f995 	bl	8005082 <_Z8PID_initP12pid_type_defhPKfff>

	this->lencoder = new Encoder(&htim2, TIM_CHANNEL_ALL);
 8002d58:	2008      	movs	r0, #8
 8002d5a:	f00b fe6f 	bl	800ea3c <_Znwj>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	461c      	mov	r4, r3
 8002d62:	223c      	movs	r2, #60	; 0x3c
 8002d64:	4921      	ldr	r1, [pc, #132]	; (8002dec <_ZN9AppMotion16MotionController5startEv+0x190>)
 8002d66:	4620      	mov	r0, r4
 8002d68:	f001 f82b 	bl	8003dc2 <_ZN9AppMotion7EncoderC1EP17TIM_HandleTypeDefm>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	611c      	str	r4, [r3, #16]
	this->rencoder = new Encoder(&htim3, TIM_CHANNEL_ALL);
 8002d70:	2008      	movs	r0, #8
 8002d72:	f00b fe63 	bl	800ea3c <_Znwj>
 8002d76:	4603      	mov	r3, r0
 8002d78:	461c      	mov	r4, r3
 8002d7a:	223c      	movs	r2, #60	; 0x3c
 8002d7c:	491c      	ldr	r1, [pc, #112]	; (8002df0 <_ZN9AppMotion16MotionController5startEv+0x194>)
 8002d7e:	4620      	mov	r0, r4
 8002d80:	f001 f81f 	bl	8003dc2 <_ZN9AppMotion7EncoderC1EP17TIM_HandleTypeDefm>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	615c      	str	r4, [r3, #20]
	emergency = false;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	instance_wrapper *wrapper_instance = new instance_wrapper();
 8002d90:	2008      	movs	r0, #8
 8002d92:	f00b fe53 	bl	800ea3c <_Znwj>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	605a      	str	r2, [r3, #4]
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24
	wrapper_instance->ctx = ctx;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	601a      	str	r2, [r3, #0]
	wrapper_instance->i = this;
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	605a      	str	r2, [r3, #4]
	this->ctx->runner = osThreadNew(
			(osThreadFunc_t) MotionController::motionTask, wrapper_instance,
			&(ctx->attr));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	1d1a      	adds	r2, r3, #4
	this->ctx->runner = osThreadNew(
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681c      	ldr	r4, [r3, #0]
 8002dba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dbc:	480d      	ldr	r0, [pc, #52]	; (8002df4 <_ZN9AppMotion16MotionController5startEv+0x198>)
 8002dbe:	f008 fefd 	bl	800bbbc <osThreadNew>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	6023      	str	r3, [r4, #0]
	return;
 8002dc6:	bf00      	nop
}
 8002dc8:	372c      	adds	r7, #44	; 0x2c
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd90      	pop	{r4, r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	200009cc 	.word	0x200009cc
 8002dd4:	40020000 	.word	0x40020000
 8002dd8:	20000aa4 	.word	0x20000aa4
 8002ddc:	080133e0 	.word	0x080133e0
 8002de0:	080133ec 	.word	0x080133ec
 8002de4:	45ea6000 	.word	0x45ea6000
 8002de8:	447a0000 	.word	0x447a0000
 8002dec:	20000a14 	.word	0x20000a14
 8002df0:	20000a5c 	.word	0x20000a5c
 8002df4:	08002df9 	.word	0x08002df9

08002df8 <_ZN9AppMotion16MotionController10motionTaskEPv>:


void MotionController::motionTask(void *pv) {
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b092      	sub	sp, #72	; 0x48
 8002dfc:	af02      	add	r7, sp, #8
 8002dfe:	6078      	str	r0, [r7, #4]

	// workaround section START
	instance_wrapper *wrapper = static_cast<instance_wrapper*>(pv);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	63fb      	str	r3, [r7, #60]	; 0x3c
	u_ctx *ctx = wrapper->ctx;
 8002e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	63bb      	str	r3, [r7, #56]	; 0x38
	MotionController *self = wrapper->i;
 8002e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	637b      	str	r3, [r7, #52]	; 0x34

	Motor *lmotor = self->lmotor;
 8002e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	633b      	str	r3, [r7, #48]	; 0x30
	Motor *rmotor = self->rmotor;
 8002e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
	Servo *servo = self->servo;
 8002e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	62bb      	str	r3, [r7, #40]	; 0x28
	osDelay(4500);
 8002e22:	f241 1094 	movw	r0, #4500	; 0x1194
 8002e26:	f008 ff7d 	bl	800bd24 <osDelay>
	servo->turnLeft();
 8002e2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e2c:	f000 fe9d 	bl	8003b6a <_ZN9AppMotion5Servo8turnLeftEv>
		servo->turnRight();
 8002e30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e32:	f000 feab 	bl	8003b8c <_ZN9AppMotion5Servo9turnRightEv>
		servo->turnFront();
 8002e36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e38:	f000 feb9 	bl	8003bae <_ZN9AppMotion5Servo9turnFrontEv>

	/* workaround section END. henceforth refer to any "this" as "self" */
	for (;;) {
		osDelay(50);
 8002e3c:	2032      	movs	r0, #50	; 0x32
 8002e3e:	f008 ff71 	bl	800bd24 <osDelay>
		is_task_alive_struct.motn = true;
 8002e42:	4b4c      	ldr	r3, [pc, #304]	; (8002f74 <_ZN9AppMotion16MotionController10motionTaskEPv+0x17c>)
 8002e44:	2201      	movs	r2, #1
 8002e46:	70da      	strb	r2, [r3, #3]

		//osThreadYield();
		if (osMessageQueueGetCount(ctx->mailbox.queue) > 0) {
 8002e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f009 f8b5 	bl	800bfbc <osMessageQueueGetCount>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	bf14      	ite	ne
 8002e58:	2301      	movne	r3, #1
 8002e5a:	2300      	moveq	r3, #0
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d07c      	beq.n	8002f5c <_ZN9AppMotion16MotionController10motionTaskEPv+0x164>
			HAL_GPIO_WritePin(Movement_Ind_Port, Movement_Ind_Pin, GPIO_PIN_SET);
 8002e62:	2201      	movs	r2, #1
 8002e64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e68:	4843      	ldr	r0, [pc, #268]	; (8002f78 <_ZN9AppMotion16MotionController10motionTaskEPv+0x180>)
 8002e6a:	f004 fb2f 	bl	80074cc <HAL_GPIO_WritePin>
			AppParser::MOTION_PKT_t pkt;
			osMessageQueueGet(ctx->mailbox.queue, &pkt, 0, 5);
 8002e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e70:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002e72:	f107 011c 	add.w	r1, r7, #28
 8002e76:	2305      	movs	r3, #5
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f009 f841 	bl	800bf00 <osMessageQueueGet>
			char buffer[20] = { 0 };
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60bb      	str	r3, [r7, #8]
 8002e82:	f107 030c 	add.w	r3, r7, #12
 8002e86:	2200      	movs	r2, #0
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	605a      	str	r2, [r3, #4]
 8002e8c:	609a      	str	r2, [r3, #8]
 8002e8e:	60da      	str	r2, [r3, #12]
			sprintf((char*) &buffer, "cmd:%ld, arg:%ld\r\n", (uint32_t) pkt.cmd,
 8002e90:	69fa      	ldr	r2, [r7, #28]
 8002e92:	6a3b      	ldr	r3, [r7, #32]
 8002e94:	f107 0008 	add.w	r0, r7, #8
 8002e98:	4938      	ldr	r1, [pc, #224]	; (8002f7c <_ZN9AppMotion16MotionController10motionTaskEPv+0x184>)
 8002e9a:	f00e f925 	bl	80110e8 <siprintf>
					pkt.arg);
			//HAL_UART_Transmit(&huart3, (uint8_t*) buffer, sizeof(buffer), 10);
			if (pkt.cmd == AppParser::MOTION_CMD::MOVE_FWD) {
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d110      	bne.n	8002ec6 <_ZN9AppMotion16MotionController10motionTaskEPv+0xce>
				servo->turnFront();
 8002ea4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ea6:	f000 fe82 	bl	8003bae <_ZN9AppMotion5Servo9turnFrontEv>

				self->move(true, pkt.arg, 35, pkt.is_crawl, pkt.linear);
 8002eaa:	6a39      	ldr	r1, [r7, #32]
 8002eac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002eb0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002eb4:	9201      	str	r2, [sp, #4]
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	2323      	movs	r3, #35	; 0x23
 8002eba:	460a      	mov	r2, r1
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002ec0:	f000 f85e 	bl	8002f80 <_ZN9AppMotion16MotionController4moveEbmmbb>
 8002ec4:	e04a      	b.n	8002f5c <_ZN9AppMotion16MotionController10motionTaskEPv+0x164>

			} else if (pkt.cmd == AppParser::MOTION_CMD::MOVE_BWD) {
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d110      	bne.n	8002eee <_ZN9AppMotion16MotionController10motionTaskEPv+0xf6>
				servo->turnFront();
 8002ecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ece:	f000 fe6e 	bl	8003bae <_ZN9AppMotion5Servo9turnFrontEv>

				self->move(false, pkt.arg, 35, pkt.is_crawl, pkt.linear);
 8002ed2:	6a39      	ldr	r1, [r7, #32]
 8002ed4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002ed8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002edc:	9201      	str	r2, [sp, #4]
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	2323      	movs	r3, #35	; 0x23
 8002ee2:	460a      	mov	r2, r1
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002ee8:	f000 f84a 	bl	8002f80 <_ZN9AppMotion16MotionController4moveEbmmbb>
 8002eec:	e036      	b.n	8002f5c <_ZN9AppMotion16MotionController10motionTaskEPv+0x164>

			} else if (pkt.cmd == AppParser::MOTION_CMD::MOVE_LEFT_FWD) {
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	2b03      	cmp	r3, #3
 8002ef2:	d10a      	bne.n	8002f0a <_ZN9AppMotion16MotionController10motionTaskEPv+0x112>
				self->turn(false, true, pkt.linear, pkt.arg);
 8002ef4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002ef8:	6a3b      	ldr	r3, [r7, #32]
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	4613      	mov	r3, r2
 8002efe:	2201      	movs	r2, #1
 8002f00:	2100      	movs	r1, #0
 8002f02:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f04:	f000 fad0 	bl	80034a8 <_ZN9AppMotion16MotionController4turnEbbbm>
 8002f08:	e028      	b.n	8002f5c <_ZN9AppMotion16MotionController10motionTaskEPv+0x164>

			} else if (pkt.cmd == AppParser::MOTION_CMD::MOVE_RIGHT_FWD)
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d10a      	bne.n	8002f26 <_ZN9AppMotion16MotionController10motionTaskEPv+0x12e>
				self->turn(true, true, pkt.linear, pkt.arg);
 8002f10:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	2101      	movs	r1, #1
 8002f1e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f20:	f000 fac2 	bl	80034a8 <_ZN9AppMotion16MotionController4turnEbbbm>
 8002f24:	e01a      	b.n	8002f5c <_ZN9AppMotion16MotionController10motionTaskEPv+0x164>

			else if (pkt.cmd == AppParser::MOTION_CMD::MOVE_LEFT_BWD) {
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	2b05      	cmp	r3, #5
 8002f2a:	d10a      	bne.n	8002f42 <_ZN9AppMotion16MotionController10motionTaskEPv+0x14a>
				self->turn(false, false, pkt.linear, pkt.arg);
 8002f2c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	4613      	mov	r3, r2
 8002f36:	2200      	movs	r2, #0
 8002f38:	2100      	movs	r1, #0
 8002f3a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f3c:	f000 fab4 	bl	80034a8 <_ZN9AppMotion16MotionController4turnEbbbm>
 8002f40:	e00c      	b.n	8002f5c <_ZN9AppMotion16MotionController10motionTaskEPv+0x164>

			} else if (pkt.cmd == AppParser::MOTION_CMD::MOVE_RIGHT_BWD)
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	2b04      	cmp	r3, #4
 8002f46:	d109      	bne.n	8002f5c <_ZN9AppMotion16MotionController10motionTaskEPv+0x164>
				self->turn(true, false, pkt.linear, pkt.arg);
 8002f48:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
 8002f4e:	9300      	str	r3, [sp, #0]
 8002f50:	4613      	mov	r3, r2
 8002f52:	2200      	movs	r2, #0
 8002f54:	2101      	movs	r1, #1
 8002f56:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f58:	f000 faa6 	bl	80034a8 <_ZN9AppMotion16MotionController4turnEbbbm>
		}
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 8002f5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f60:	4805      	ldr	r0, [pc, #20]	; (8002f78 <_ZN9AppMotion16MotionController10motionTaskEPv+0x180>)
 8002f62:	f004 facc 	bl	80074fe <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(Movement_Ind_Port, Movement_Ind_Pin, GPIO_PIN_RESET);
 8002f66:	2200      	movs	r2, #0
 8002f68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f6c:	4802      	ldr	r0, [pc, #8]	; (8002f78 <_ZN9AppMotion16MotionController10motionTaskEPv+0x180>)
 8002f6e:	f004 faad 	bl	80074cc <HAL_GPIO_WritePin>

	}
 8002f72:	e763      	b.n	8002e3c <_ZN9AppMotion16MotionController10motionTaskEPv+0x44>
 8002f74:	20000694 	.word	0x20000694
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	080133f8 	.word	0x080133f8

08002f80 <_ZN9AppMotion16MotionController4moveEbmmbb>:
}


void MotionController::move(bool isFwd, uint32_t arg, uint32_t speed, bool isCrawl, bool nostop) {
 8002f80:	b5b0      	push	{r4, r5, r7, lr}
 8002f82:	b09c      	sub	sp, #112	; 0x70
 8002f84:	af02      	add	r7, sp, #8
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	607a      	str	r2, [r7, #4]
 8002f8a:	603b      	str	r3, [r7, #0]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	72fb      	strb	r3, [r7, #11]
	emergency = false;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	servo->turnFront();
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 fe06 	bl	8003bae <_ZN9AppMotion5Servo9turnFrontEv>
	isFwd ? lmotor->setForward() : lmotor->setBackward();
 8002fa2:	7afb      	ldrb	r3, [r7, #11]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d005      	beq.n	8002fb4 <_ZN9AppMotion16MotionController4moveEbmmbb+0x34>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f000 fed8 	bl	8003d62 <_ZN9AppMotion5Motor10setForwardEv>
 8002fb2:	e004      	b.n	8002fbe <_ZN9AppMotion16MotionController4moveEbmmbb+0x3e>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f000 feea 	bl	8003d92 <_ZN9AppMotion5Motor11setBackwardEv>
	isFwd ? rmotor->setForward() : rmotor->setBackward();
 8002fbe:	7afb      	ldrb	r3, [r7, #11]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d005      	beq.n	8002fd0 <_ZN9AppMotion16MotionController4moveEbmmbb+0x50>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f000 feca 	bl	8003d62 <_ZN9AppMotion5Motor10setForwardEv>
 8002fce:	e004      	b.n	8002fda <_ZN9AppMotion16MotionController4moveEbmmbb+0x5a>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 fedc 	bl	8003d92 <_ZN9AppMotion5Motor11setBackwardEv>
	lmotor->setSpeed(speed);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	6839      	ldr	r1, [r7, #0]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 fe1b 	bl	8003c1c <_ZN9AppMotion5Motor8setSpeedEm>
	rmotor->setSpeed(speed);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	6839      	ldr	r1, [r7, #0]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f000 fe15 	bl	8003c1c <_ZN9AppMotion5Motor8setSpeedEm>
	if (isCrawl)
 8002ff2:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00b      	beq.n	8003012 <_ZN9AppMotion16MotionController4moveEbmmbb+0x92>
	{
		lmotor->setSpeed(35);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2123      	movs	r1, #35	; 0x23
 8003000:	4618      	mov	r0, r3
 8003002:	f000 fe0b 	bl	8003c1c <_ZN9AppMotion5Motor8setSpeedEm>
		rmotor->setSpeed(35);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	2123      	movs	r1, #35	; 0x23
 800300c:	4618      	mov	r0, r3
 800300e:	f000 fe05 	bl	8003c1c <_ZN9AppMotion5Motor8setSpeedEm>
	}

	uint32_t timeStart = HAL_GetTick();
 8003012:	f002 ffab 	bl	8005f6c <HAL_GetTick>
 8003016:	6478      	str	r0, [r7, #68]	; 0x44
	uint32_t l_encoder_count = lencoder->getCount();
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	4618      	mov	r0, r3
 800301e:	f000 fee5 	bl	8003dec <_ZN9AppMotion7Encoder8getCountEv>
 8003022:	6678      	str	r0, [r7, #100]	; 0x64
	uint32_t r_encoder_count = rencoder->getCount();
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	4618      	mov	r0, r3
 800302a:	f000 fedf 	bl	8003dec <_ZN9AppMotion7Encoder8getCountEv>
 800302e:	6638      	str	r0, [r7, #96]	; 0x60
	double target = (double) arg / DISTANCE_PER_ENCODER_PULSE;
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7fd fa67 	bl	8000504 <__aeabi_ui2d>
 8003036:	a3f8      	add	r3, pc, #992	; (adr r3, 8003418 <_ZN9AppMotion16MotionController4moveEbmmbb+0x498>)
 8003038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303c:	f7fd fc06 	bl	800084c <__aeabi_ddiv>
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	double cur_left = 0, cur_right = 0;
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	f04f 0300 	mov.w	r3, #0
 8003050:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8003054:	f04f 0200 	mov.w	r2, #0
 8003058:	f04f 0300 	mov.w	r3, #0
 800305c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	float count_left = 0, count_right = 0;
 8003060:	f04f 0300 	mov.w	r3, #0
 8003064:	637b      	str	r3, [r7, #52]	; 0x34
 8003066:	f04f 0300 	mov.w	r3, #0
 800306a:	633b      	str	r3, [r7, #48]	; 0x30
	double speed_error = 0;
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	f04f 0300 	mov.w	r3, #0
 8003074:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	do {

		count_left = (double) lencoder->getDelta(l_encoder_count,
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	691c      	ldr	r4, [r3, #16]
				lencoder->getCount());
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	691b      	ldr	r3, [r3, #16]
		count_left = (double) lencoder->getDelta(l_encoder_count,
 8003080:	4618      	mov	r0, r3
 8003082:	f000 feb3 	bl	8003dec <_ZN9AppMotion7Encoder8getCountEv>
 8003086:	4603      	mov	r3, r0
 8003088:	461a      	mov	r2, r3
 800308a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800308c:	4620      	mov	r0, r4
 800308e:	f000 febb 	bl	8003e08 <_ZN9AppMotion7Encoder8getDeltaEmm>
 8003092:	4603      	mov	r3, r0
 8003094:	4618      	mov	r0, r3
 8003096:	f7fd fa35 	bl	8000504 <__aeabi_ui2d>
 800309a:	4602      	mov	r2, r0
 800309c:	460b      	mov	r3, r1
 800309e:	4610      	mov	r0, r2
 80030a0:	4619      	mov	r1, r3
 80030a2:	f7fd fda1 	bl	8000be8 <__aeabi_d2f>
 80030a6:	4603      	mov	r3, r0
 80030a8:	637b      	str	r3, [r7, #52]	; 0x34
		count_right = (double) rencoder->getDelta(r_encoder_count,
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	695c      	ldr	r4, [r3, #20]
				rencoder->getCount());
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	695b      	ldr	r3, [r3, #20]
		count_right = (double) rencoder->getDelta(r_encoder_count,
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 fe9a 	bl	8003dec <_ZN9AppMotion7Encoder8getCountEv>
 80030b8:	4603      	mov	r3, r0
 80030ba:	461a      	mov	r2, r3
 80030bc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80030be:	4620      	mov	r0, r4
 80030c0:	f000 fea2 	bl	8003e08 <_ZN9AppMotion7Encoder8getDeltaEmm>
 80030c4:	4603      	mov	r3, r0
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fd fa1c 	bl	8000504 <__aeabi_ui2d>
 80030cc:	4602      	mov	r2, r0
 80030ce:	460b      	mov	r3, r1
 80030d0:	4610      	mov	r0, r2
 80030d2:	4619      	mov	r1, r3
 80030d4:	f7fd fd88 	bl	8000be8 <__aeabi_d2f>
 80030d8:	4603      	mov	r3, r0
 80030da:	633b      	str	r3, [r7, #48]	; 0x30

		cur_left += count_left;
 80030dc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80030de:	f7fd fa33 	bl	8000548 <__aeabi_f2d>
 80030e2:	4602      	mov	r2, r0
 80030e4:	460b      	mov	r3, r1
 80030e6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80030ea:	f7fd f8cf 	bl	800028c <__adddf3>
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		cur_right += count_right;
 80030f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030f8:	f7fd fa26 	bl	8000548 <__aeabi_f2d>
 80030fc:	4602      	mov	r2, r0
 80030fe:	460b      	mov	r3, r1
 8003100:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003104:	f7fd f8c2 	bl	800028c <__adddf3>
 8003108:	4602      	mov	r2, r0
 800310a:	460b      	mov	r3, r1
 800310c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		speed_error += (count_left - count_right);
 8003110:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003114:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003118:	ee77 7a67 	vsub.f32	s15, s14, s15
 800311c:	ee17 0a90 	vmov	r0, s15
 8003120:	f7fd fa12 	bl	8000548 <__aeabi_f2d>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800312c:	f7fd f8ae 	bl	800028c <__adddf3>
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		if (!isCrawl && !nostop) {
 8003138:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 800313c:	f083 0301 	eor.w	r3, r3, #1
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 8113 	beq.w	800336e <_ZN9AppMotion16MotionController4moveEbmmbb+0x3ee>
 8003148:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800314c:	f083 0301 	eor.w	r3, r3, #1
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	f000 810b 	beq.w	800336e <_ZN9AppMotion16MotionController4moveEbmmbb+0x3ee>
			if (cur_left > target - 2000 || cur_right > target - 2000) {
 8003158:	f04f 0200 	mov.w	r2, #0
 800315c:	4bb0      	ldr	r3, [pc, #704]	; (8003420 <_ZN9AppMotion16MotionController4moveEbmmbb+0x4a0>)
 800315e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003162:	f7fd f891 	bl	8000288 <__aeabi_dsub>
 8003166:	4602      	mov	r2, r0
 8003168:	460b      	mov	r3, r1
 800316a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800316e:	f7fd fcd3 	bl	8000b18 <__aeabi_dcmpgt>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10f      	bne.n	8003198 <_ZN9AppMotion16MotionController4moveEbmmbb+0x218>
 8003178:	f04f 0200 	mov.w	r2, #0
 800317c:	4ba8      	ldr	r3, [pc, #672]	; (8003420 <_ZN9AppMotion16MotionController4moveEbmmbb+0x4a0>)
 800317e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003182:	f7fd f881 	bl	8000288 <__aeabi_dsub>
 8003186:	4602      	mov	r2, r0
 8003188:	460b      	mov	r3, r1
 800318a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800318e:	f7fd fcc3 	bl	8000b18 <__aeabi_dcmpgt>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d048      	beq.n	800322a <_ZN9AppMotion16MotionController4moveEbmmbb+0x2aa>
				lmotor->setSpeed(map(target - cur_left, 2000, 330, 35, 15));
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	685c      	ldr	r4, [r3, #4]
 800319c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80031a0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80031a4:	f7fd f870 	bl	8000288 <__aeabi_dsub>
 80031a8:	4602      	mov	r2, r0
 80031aa:	460b      	mov	r3, r1
 80031ac:	4610      	mov	r0, r2
 80031ae:	4619      	mov	r1, r3
 80031b0:	f7fd fd1a 	bl	8000be8 <__aeabi_d2f>
 80031b4:	4603      	mov	r3, r0
 80031b6:	eeb2 2a0e 	vmov.f32	s4, #46	; 0x41700000  15.0
 80031ba:	eddf 1a9a 	vldr	s3, [pc, #616]	; 8003424 <_ZN9AppMotion16MotionController4moveEbmmbb+0x4a4>
 80031be:	ed9f 1a9a 	vldr	s2, [pc, #616]	; 8003428 <_ZN9AppMotion16MotionController4moveEbmmbb+0x4a8>
 80031c2:	eddf 0a9a 	vldr	s1, [pc, #616]	; 800342c <_ZN9AppMotion16MotionController4moveEbmmbb+0x4ac>
 80031c6:	ee00 3a10 	vmov	s0, r3
 80031ca:	f7ff fd09 	bl	8002be0 <_ZN9AppMotion16MotionController3mapEfffff>
 80031ce:	eef0 7a40 	vmov.f32	s15, s0
 80031d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031d6:	ee17 1a90 	vmov	r1, s15
 80031da:	4620      	mov	r0, r4
 80031dc:	f000 fd1e 	bl	8003c1c <_ZN9AppMotion5Motor8setSpeedEm>
				rmotor->setSpeed(map(target - cur_right, 2000, 330, 35, 15));
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	689c      	ldr	r4, [r3, #8]
 80031e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80031e8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80031ec:	f7fd f84c 	bl	8000288 <__aeabi_dsub>
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	4610      	mov	r0, r2
 80031f6:	4619      	mov	r1, r3
 80031f8:	f7fd fcf6 	bl	8000be8 <__aeabi_d2f>
 80031fc:	4603      	mov	r3, r0
 80031fe:	eeb2 2a0e 	vmov.f32	s4, #46	; 0x41700000  15.0
 8003202:	eddf 1a88 	vldr	s3, [pc, #544]	; 8003424 <_ZN9AppMotion16MotionController4moveEbmmbb+0x4a4>
 8003206:	ed9f 1a88 	vldr	s2, [pc, #544]	; 8003428 <_ZN9AppMotion16MotionController4moveEbmmbb+0x4a8>
 800320a:	eddf 0a88 	vldr	s1, [pc, #544]	; 800342c <_ZN9AppMotion16MotionController4moveEbmmbb+0x4ac>
 800320e:	ee00 3a10 	vmov	s0, r3
 8003212:	f7ff fce5 	bl	8002be0 <_ZN9AppMotion16MotionController3mapEfffff>
 8003216:	eef0 7a40 	vmov.f32	s15, s0
 800321a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800321e:	ee17 1a90 	vmov	r1, s15
 8003222:	4620      	mov	r0, r4
 8003224:	f000 fcfa 	bl	8003c1c <_ZN9AppMotion5Motor8setSpeedEm>
 8003228:	e0a1      	b.n	800336e <_ZN9AppMotion16MotionController4moveEbmmbb+0x3ee>
			} else {
				float pid_left = PID_calc(&this->left_pid, target - cur_left,
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f103 0418 	add.w	r4, r3, #24
 8003230:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003234:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003238:	f7fd f826 	bl	8000288 <__aeabi_dsub>
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4610      	mov	r0, r2
 8003242:	4619      	mov	r1, r3
 8003244:	f7fd fcd0 	bl	8000be8 <__aeabi_d2f>
 8003248:	4605      	mov	r5, r0
 800324a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800324e:	f7fd fccb 	bl	8000be8 <__aeabi_d2f>
 8003252:	4603      	mov	r3, r0
 8003254:	ee00 3a90 	vmov	s1, r3
 8003258:	ee00 5a10 	vmov	s0, r5
 800325c:	4620      	mov	r0, r4
 800325e:	f001 ff67 	bl	8005130 <_Z8PID_calcP12pid_type_defff>
 8003262:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
						target);
				float pid_right = PID_calc(&this->right_pid, target - cur_right,
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f103 0468 	add.w	r4, r3, #104	; 0x68
 800326c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003270:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003274:	f7fd f808 	bl	8000288 <__aeabi_dsub>
 8003278:	4602      	mov	r2, r0
 800327a:	460b      	mov	r3, r1
 800327c:	4610      	mov	r0, r2
 800327e:	4619      	mov	r1, r3
 8003280:	f7fd fcb2 	bl	8000be8 <__aeabi_d2f>
 8003284:	4605      	mov	r5, r0
 8003286:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800328a:	f7fd fcad 	bl	8000be8 <__aeabi_d2f>
 800328e:	4603      	mov	r3, r0
 8003290:	ee00 3a90 	vmov	s1, r3
 8003294:	ee00 5a10 	vmov	s0, r5
 8003298:	4620      	mov	r0, r4
 800329a:	f001 ff49 	bl	8005130 <_Z8PID_calcP12pid_type_defff>
 800329e:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
						target);
				float pid_left_d = PID_calc(&this->sync_left_pid, speed_error,
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 80032a8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80032ac:	f7fd fc9c 	bl	8000be8 <__aeabi_d2f>
 80032b0:	4603      	mov	r3, r0
 80032b2:	eddf 0a5f 	vldr	s1, [pc, #380]	; 8003430 <_ZN9AppMotion16MotionController4moveEbmmbb+0x4b0>
 80032b6:	ee00 3a10 	vmov	s0, r3
 80032ba:	4620      	mov	r0, r4
 80032bc:	f001 ff38 	bl	8005130 <_Z8PID_calcP12pid_type_defff>
 80032c0:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
						0);
				float pid_right_d = PID_calc(&this->sync_right_pid,
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f503 7484 	add.w	r4, r3, #264	; 0x108
 80032ca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80032ce:	f7fd fc8b 	bl	8000be8 <__aeabi_d2f>
 80032d2:	4603      	mov	r3, r0
 80032d4:	ee07 3a90 	vmov	s15, r3
 80032d8:	eef1 7a67 	vneg.f32	s15, s15
 80032dc:	eddf 0a54 	vldr	s1, [pc, #336]	; 8003430 <_ZN9AppMotion16MotionController4moveEbmmbb+0x4b0>
 80032e0:	eeb0 0a67 	vmov.f32	s0, s15
 80032e4:	4620      	mov	r0, r4
 80032e6:	f001 ff23 	bl	8005130 <_Z8PID_calcP12pid_type_defff>
 80032ea:	ed87 0a08 	vstr	s0, [r7, #32]
						-speed_error, 0);
				lmotor->_setDutyCycleVal(
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	685b      	ldr	r3, [r3, #4]
						(uint32_t) (
								(pid_left + pid_left_d) > 1000 ?
 80032f2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80032f6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80032fa:	ee77 7a27 	vadd.f32	s15, s14, s15
				lmotor->_setDutyCycleVal(
 80032fe:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8003434 <_ZN9AppMotion16MotionController4moveEbmmbb+0x4b4>
 8003302:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800330a:	dd0a      	ble.n	8003322 <_ZN9AppMotion16MotionController4moveEbmmbb+0x3a2>
										(pid_left + pid_left_d) : 1000));
 800330c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003310:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003314:	ee77 7a27 	vadd.f32	s15, s14, s15
				lmotor->_setDutyCycleVal(
 8003318:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800331c:	ee17 2a90 	vmov	r2, s15
 8003320:	e001      	b.n	8003326 <_ZN9AppMotion16MotionController4moveEbmmbb+0x3a6>
 8003322:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003326:	4611      	mov	r1, r2
 8003328:	4618      	mov	r0, r3
 800332a:	f000 fcb7 	bl	8003c9c <_ZN9AppMotion5Motor16_setDutyCycleValEm>
				rmotor->_setDutyCycleVal(
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	689b      	ldr	r3, [r3, #8]
						(uint32_t) (
								(pid_right + pid_right_d) > 1000 ?
 8003332:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003336:	edd7 7a08 	vldr	s15, [r7, #32]
 800333a:	ee77 7a27 	vadd.f32	s15, s14, s15
				rmotor->_setDutyCycleVal(
 800333e:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8003434 <_ZN9AppMotion16MotionController4moveEbmmbb+0x4b4>
 8003342:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800334a:	dd0a      	ble.n	8003362 <_ZN9AppMotion16MotionController4moveEbmmbb+0x3e2>
										(pid_right + pid_right_d) : 1000));
 800334c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003350:	edd7 7a08 	vldr	s15, [r7, #32]
 8003354:	ee77 7a27 	vadd.f32	s15, s14, s15
				rmotor->_setDutyCycleVal(
 8003358:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800335c:	ee17 2a90 	vmov	r2, s15
 8003360:	e001      	b.n	8003366 <_ZN9AppMotion16MotionController4moveEbmmbb+0x3e6>
 8003362:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003366:	4611      	mov	r1, r2
 8003368:	4618      	mov	r0, r3
 800336a:	f000 fc97 	bl	8003c9c <_ZN9AppMotion5Motor16_setDutyCycleValEm>
			}
		}
		l_encoder_count = lencoder->getCount();
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	4618      	mov	r0, r3
 8003374:	f000 fd3a 	bl	8003dec <_ZN9AppMotion7Encoder8getCountEv>
 8003378:	6678      	str	r0, [r7, #100]	; 0x64
		r_encoder_count = rencoder->getCount();
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	4618      	mov	r0, r3
 8003380:	f000 fd34 	bl	8003dec <_ZN9AppMotion7Encoder8getCountEv>
 8003384:	6638      	str	r0, [r7, #96]	; 0x60

		if ((cur_left > target && cur_right > target) || emergency)
 8003386:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800338a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800338e:	f7fd fbc3 	bl	8000b18 <__aeabi_dcmpgt>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d008      	beq.n	80033aa <_ZN9AppMotion16MotionController4moveEbmmbb+0x42a>
 8003398:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800339c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80033a0:	f7fd fbba 	bl	8000b18 <__aeabi_dcmpgt>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d104      	bne.n	80033b4 <_ZN9AppMotion16MotionController4moveEbmmbb+0x434>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d028      	beq.n	8003406 <_ZN9AppMotion16MotionController4moveEbmmbb+0x486>
		{
			sensor_data.last_halt_val = (uint32_t) (cur_left>cur_right?cur_right:cur_left) * DISTANCE_PER_ENCODER_PULSE;
 80033b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80033b8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80033bc:	f7fd fbac 	bl	8000b18 <__aeabi_dcmpgt>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d008      	beq.n	80033d8 <_ZN9AppMotion16MotionController4moveEbmmbb+0x458>
 80033c6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80033ca:	f7fd fbed 	bl	8000ba8 <__aeabi_d2uiz>
 80033ce:	4603      	mov	r3, r0
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7fd f897 	bl	8000504 <__aeabi_ui2d>
 80033d6:	e007      	b.n	80033e8 <_ZN9AppMotion16MotionController4moveEbmmbb+0x468>
 80033d8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80033dc:	f7fd fbe4 	bl	8000ba8 <__aeabi_d2uiz>
 80033e0:	4603      	mov	r3, r0
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7fd f88e 	bl	8000504 <__aeabi_ui2d>
 80033e8:	a30b      	add	r3, pc, #44	; (adr r3, 8003418 <_ZN9AppMotion16MotionController4moveEbmmbb+0x498>)
 80033ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ee:	f7fd f903 	bl	80005f8 <__aeabi_dmul>
 80033f2:	4602      	mov	r2, r0
 80033f4:	460b      	mov	r3, r1
 80033f6:	4610      	mov	r0, r2
 80033f8:	4619      	mov	r1, r3
 80033fa:	f7fd fbd5 	bl	8000ba8 <__aeabi_d2uiz>
 80033fe:	4603      	mov	r3, r0
 8003400:	4a0d      	ldr	r2, [pc, #52]	; (8003438 <_ZN9AppMotion16MotionController4moveEbmmbb+0x4b8>)
 8003402:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8003404:	e01a      	b.n	800343c <_ZN9AppMotion16MotionController4moveEbmmbb+0x4bc>
		}


		osDelay(10);
 8003406:	200a      	movs	r0, #10
 8003408:	f008 fc8c 	bl	800bd24 <osDelay>
		sensor_data.last_halt_val = arg;
 800340c:	4a0a      	ldr	r2, [pc, #40]	; (8003438 <_ZN9AppMotion16MotionController4moveEbmmbb+0x4b8>)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6353      	str	r3, [r2, #52]	; 0x34
		osThreadYield();
 8003412:	f008 fc67 	bl	800bce4 <osThreadYield>
 8003416:	e62f      	b.n	8003078 <_ZN9AppMotion16MotionController4moveEbmmbb+0xf8>
 8003418:	c65572b1 	.word	0xc65572b1
 800341c:	3f8c04ac 	.word	0x3f8c04ac
 8003420:	409f4000 	.word	0x409f4000
 8003424:	420c0000 	.word	0x420c0000
 8003428:	43a50000 	.word	0x43a50000
 800342c:	44fa0000 	.word	0x44fa0000
 8003430:	00000000 	.word	0x00000000
 8003434:	447a0000 	.word	0x447a0000
 8003438:	2000065c 	.word	0x2000065c

	} while (1);
	uint8_t buf[10] = { 0 };
 800343c:	2300      	movs	r3, #0
 800343e:	617b      	str	r3, [r7, #20]
 8003440:	f107 0318 	add.w	r3, r7, #24
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	809a      	strh	r2, [r3, #4]
	snprintf((char*) buf, sizeof(buf), "%4.0f", cur_left - cur_right);
 800344a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800344e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003452:	f7fc ff19 	bl	8000288 <__aeabi_dsub>
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	f107 0014 	add.w	r0, r7, #20
 800345e:	e9cd 2300 	strd	r2, r3, [sp]
 8003462:	4a0f      	ldr	r2, [pc, #60]	; (80034a0 <_ZN9AppMotion16MotionController4moveEbmmbb+0x520>)
 8003464:	210a      	movs	r1, #10
 8003466:	f00d fe0b 	bl	8011080 <sniprintf>
	OLED_ShowString(85, 48, (uint8_t*) &buf);
 800346a:	f107 0314 	add.w	r3, r7, #20
 800346e:	461a      	mov	r2, r3
 8003470:	2130      	movs	r1, #48	; 0x30
 8003472:	2055      	movs	r0, #85	; 0x55
 8003474:	f7fe fb42 	bl	8001afc <OLED_ShowString>
	OLED_Refresh_Gram();
 8003478:	f7fe f8f6 	bl	8001668 <OLED_Refresh_Gram>
	emergency = false;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	lmotor->halt();
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	4618      	mov	r0, r3
 800348a:	f000 fc3d 	bl	8003d08 <_ZN9AppMotion5Motor4haltEv>
	rmotor->halt();
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	4618      	mov	r0, r3
 8003494:	f000 fc38 	bl	8003d08 <_ZN9AppMotion5Motor4haltEv>
}
 8003498:	bf00      	nop
 800349a:	3768      	adds	r7, #104	; 0x68
 800349c:	46bd      	mov	sp, r7
 800349e:	bdb0      	pop	{r4, r5, r7, pc}
 80034a0:	0801340c 	.word	0x0801340c
 80034a4:	00000000 	.word	0x00000000

080034a8 <_ZN9AppMotion16MotionController4turnEbbbm>:

void MotionController::turn(bool isRight, bool isFwd, bool arc, uint32_t arg) {
 80034a8:	b590      	push	{r4, r7, lr}
 80034aa:	ed2d 8b02 	vpush	{d8}
 80034ae:	b093      	sub	sp, #76	; 0x4c
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	4608      	mov	r0, r1
 80034b6:	4611      	mov	r1, r2
 80034b8:	461a      	mov	r2, r3
 80034ba:	4603      	mov	r3, r0
 80034bc:	70fb      	strb	r3, [r7, #3]
 80034be:	460b      	mov	r3, r1
 80034c0:	70bb      	strb	r3, [r7, #2]
 80034c2:	4613      	mov	r3, r2
 80034c4:	707b      	strb	r3, [r7, #1]
	emergency = false;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	isRight ? servo->turnRight() : servo->turnLeft();
 80034ce:	78fb      	ldrb	r3, [r7, #3]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d005      	beq.n	80034e0 <_ZN9AppMotion16MotionController4turnEbbbm+0x38>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	4618      	mov	r0, r3
 80034da:	f000 fb57 	bl	8003b8c <_ZN9AppMotion5Servo9turnRightEv>
 80034de:	e004      	b.n	80034ea <_ZN9AppMotion16MotionController4turnEbbbm+0x42>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f000 fb40 	bl	8003b6a <_ZN9AppMotion5Servo8turnLeftEv>

	isFwd ? lmotor->setForward() : lmotor->setBackward();
 80034ea:	78bb      	ldrb	r3, [r7, #2]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d005      	beq.n	80034fc <_ZN9AppMotion16MotionController4turnEbbbm+0x54>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 fc34 	bl	8003d62 <_ZN9AppMotion5Motor10setForwardEv>
 80034fa:	e004      	b.n	8003506 <_ZN9AppMotion16MotionController4turnEbbbm+0x5e>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	4618      	mov	r0, r3
 8003502:	f000 fc46 	bl	8003d92 <_ZN9AppMotion5Motor11setBackwardEv>
	isFwd ? rmotor->setForward() : rmotor->setBackward();
 8003506:	78bb      	ldrb	r3, [r7, #2]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d005      	beq.n	8003518 <_ZN9AppMotion16MotionController4turnEbbbm+0x70>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	4618      	mov	r0, r3
 8003512:	f000 fc26 	bl	8003d62 <_ZN9AppMotion5Motor10setForwardEv>
 8003516:	e004      	b.n	8003522 <_ZN9AppMotion16MotionController4turnEbbbm+0x7a>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	4618      	mov	r0, r3
 800351e:	f000 fc38 	bl	8003d92 <_ZN9AppMotion5Motor11setBackwardEv>
	isRight ? lmotor->setSpeed(35) : lmotor->setSpeed(0);
 8003522:	78fb      	ldrb	r3, [r7, #3]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d006      	beq.n	8003536 <_ZN9AppMotion16MotionController4turnEbbbm+0x8e>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	2123      	movs	r1, #35	; 0x23
 800352e:	4618      	mov	r0, r3
 8003530:	f000 fb74 	bl	8003c1c <_ZN9AppMotion5Motor8setSpeedEm>
 8003534:	e005      	b.n	8003542 <_ZN9AppMotion16MotionController4turnEbbbm+0x9a>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2100      	movs	r1, #0
 800353c:	4618      	mov	r0, r3
 800353e:	f000 fb6d 	bl	8003c1c <_ZN9AppMotion5Motor8setSpeedEm>
	isRight ? rmotor->setSpeed(0) : rmotor->setSpeed(35);
 8003542:	78fb      	ldrb	r3, [r7, #3]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d006      	beq.n	8003556 <_ZN9AppMotion16MotionController4turnEbbbm+0xae>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	2100      	movs	r1, #0
 800354e:	4618      	mov	r0, r3
 8003550:	f000 fb64 	bl	8003c1c <_ZN9AppMotion5Motor8setSpeedEm>
 8003554:	e005      	b.n	8003562 <_ZN9AppMotion16MotionController4turnEbbbm+0xba>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	2123      	movs	r1, #35	; 0x23
 800355c:	4618      	mov	r0, r3
 800355e:	f000 fb5d 	bl	8003c1c <_ZN9AppMotion5Motor8setSpeedEm>
	if(arc) // arc increases turn radius
 8003562:	787b      	ldrb	r3, [r7, #1]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d01f      	beq.n	80035a8 <_ZN9AppMotion16MotionController4turnEbbbm+0x100>
	{
		isRight ? lmotor->setSpeed(55) : lmotor->setSpeed(20);
 8003568:	78fb      	ldrb	r3, [r7, #3]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d006      	beq.n	800357c <_ZN9AppMotion16MotionController4turnEbbbm+0xd4>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2137      	movs	r1, #55	; 0x37
 8003574:	4618      	mov	r0, r3
 8003576:	f000 fb51 	bl	8003c1c <_ZN9AppMotion5Motor8setSpeedEm>
 800357a:	e005      	b.n	8003588 <_ZN9AppMotion16MotionController4turnEbbbm+0xe0>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2114      	movs	r1, #20
 8003582:	4618      	mov	r0, r3
 8003584:	f000 fb4a 	bl	8003c1c <_ZN9AppMotion5Motor8setSpeedEm>
		isRight ? rmotor->setSpeed(20) : rmotor->setSpeed(55);
 8003588:	78fb      	ldrb	r3, [r7, #3]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d006      	beq.n	800359c <_ZN9AppMotion16MotionController4turnEbbbm+0xf4>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	2114      	movs	r1, #20
 8003594:	4618      	mov	r0, r3
 8003596:	f000 fb41 	bl	8003c1c <_ZN9AppMotion5Motor8setSpeedEm>
 800359a:	e005      	b.n	80035a8 <_ZN9AppMotion16MotionController4turnEbbbm+0x100>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	2137      	movs	r1, #55	; 0x37
 80035a2:	4618      	mov	r0, r3
 80035a4:	f000 fb3a 	bl	8003c1c <_ZN9AppMotion5Motor8setSpeedEm>
	}
	uint32_t timeNow = HAL_GetTick();
 80035a8:	f002 fce0 	bl	8005f6c <HAL_GetTick>
 80035ac:	6378      	str	r0, [r7, #52]	; 0x34
	uint32_t timeStart = timeNow;
 80035ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b0:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t buf[30] = { 0 };
 80035b2:	2300      	movs	r3, #0
 80035b4:	60bb      	str	r3, [r7, #8]
 80035b6:	f107 030c 	add.w	r3, r7, #12
 80035ba:	2200      	movs	r2, #0
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	605a      	str	r2, [r3, #4]
 80035c0:	609a      	str	r2, [r3, #8]
 80035c2:	60da      	str	r2, [r3, #12]
 80035c4:	611a      	str	r2, [r3, #16]
 80035c6:	615a      	str	r2, [r3, #20]
 80035c8:	831a      	strh	r2, [r3, #24]
	float target_yaw = 0;
 80035ca:	f04f 0300 	mov.w	r3, #0
 80035ce:	647b      	str	r3, [r7, #68]	; 0x44
	float req = ((float) arg) ;
 80035d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035d2:	ee07 3a90 	vmov	s15, r3
 80035d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035da:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float cur = sensor_data.yaw_abs; //[-179,180]
 80035de:	4ba4      	ldr	r3, [pc, #656]	; (8003870 <_ZN9AppMotion16MotionController4turnEbbbm+0x3c8>)
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	643b      	str	r3, [r7, #64]	; 0x40
	float prev_yaw = cur;
 80035e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035e6:	62bb      	str	r3, [r7, #40]	; 0x28
	float last_target_dist = 99999.0f; // overshoot protection
 80035e8:	4ba2      	ldr	r3, [pc, #648]	; (8003874 <_ZN9AppMotion16MotionController4turnEbbbm+0x3cc>)
 80035ea:	63fb      	str	r3, [r7, #60]	; 0x3c
	float bwd_diffn_delta = 0;
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	63bb      	str	r3, [r7, #56]	; 0x38

	if((!isRight && isFwd) || (isRight && !isFwd) ) //increase
 80035f2:	78fb      	ldrb	r3, [r7, #3]
 80035f4:	f083 0301 	eor.w	r3, r3, #1
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d002      	beq.n	8003604 <_ZN9AppMotion16MotionController4turnEbbbm+0x15c>
 80035fe:	78bb      	ldrb	r3, [r7, #2]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d108      	bne.n	8003616 <_ZN9AppMotion16MotionController4turnEbbbm+0x16e>
 8003604:	78fb      	ldrb	r3, [r7, #3]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d02c      	beq.n	8003664 <_ZN9AppMotion16MotionController4turnEbbbm+0x1bc>
 800360a:	78bb      	ldrb	r3, [r7, #2]
 800360c:	f083 0301 	eor.w	r3, r3, #1
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d026      	beq.n	8003664 <_ZN9AppMotion16MotionController4turnEbbbm+0x1bc>
	{
		if((req + cur) > 179) target_yaw = -180 + (req - (180 - cur));
 8003616:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800361a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800361e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003622:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8003878 <_ZN9AppMotion16MotionController4turnEbbbm+0x3d0>
 8003626:	eef4 7ac7 	vcmpe.f32	s15, s14
 800362a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800362e:	dd10      	ble.n	8003652 <_ZN9AppMotion16MotionController4turnEbbbm+0x1aa>
 8003630:	ed9f 7a92 	vldr	s14, [pc, #584]	; 800387c <_ZN9AppMotion16MotionController4turnEbbbm+0x3d4>
 8003634:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003638:	ee77 7a67 	vsub.f32	s15, s14, s15
 800363c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003640:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003644:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800387c <_ZN9AppMotion16MotionController4turnEbbbm+0x3d4>
 8003648:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800364c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 8003650:	e02e      	b.n	80036b0 <_ZN9AppMotion16MotionController4turnEbbbm+0x208>
		else target_yaw = req + cur;
 8003652:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003656:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800365a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800365e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		if((req + cur) > 179) target_yaw = -180 + (req - (180 - cur));
 8003662:	e025      	b.n	80036b0 <_ZN9AppMotion16MotionController4turnEbbbm+0x208>
	}
	else
	{
		if((cur - req) < -179) target_yaw = 180 - (req + (-180 - cur));
 8003664:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003668:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800366c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003670:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8003880 <_ZN9AppMotion16MotionController4turnEbbbm+0x3d8>
 8003674:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800367c:	d510      	bpl.n	80036a0 <_ZN9AppMotion16MotionController4turnEbbbm+0x1f8>
 800367e:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8003884 <_ZN9AppMotion16MotionController4turnEbbbm+0x3dc>
 8003682:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003686:	ee37 7a67 	vsub.f32	s14, s14, s15
 800368a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800368e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003692:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 800387c <_ZN9AppMotion16MotionController4turnEbbbm+0x3d4>
 8003696:	ee77 7a67 	vsub.f32	s15, s14, s15
 800369a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 800369e:	e007      	b.n	80036b0 <_ZN9AppMotion16MotionController4turnEbbbm+0x208>
		else target_yaw = cur - req;
 80036a0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80036a4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80036a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036ac:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	}

	do{
		if (abs(target_yaw - cur) < 45 ) {
 80036b0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80036b4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80036b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036c0:	ee17 3a90 	vmov	r3, s15
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	bfb8      	it	lt
 80036c8:	425b      	neglt	r3, r3
 80036ca:	2b2c      	cmp	r3, #44	; 0x2c
 80036cc:	dc54      	bgt.n	8003778 <_ZN9AppMotion16MotionController4turnEbbbm+0x2d0>
			if(isRight) lmotor->setSpeed((uint32_t)map(abs(target_yaw - cur), 45, 0, 30, 15));
 80036ce:	78fb      	ldrb	r3, [r7, #3]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d028      	beq.n	8003726 <_ZN9AppMotion16MotionController4turnEbbbm+0x27e>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685c      	ldr	r4, [r3, #4]
 80036d8:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80036dc:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80036e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036e8:	ee17 3a90 	vmov	r3, s15
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	bfb8      	it	lt
 80036f0:	425b      	neglt	r3, r3
 80036f2:	ee07 3a90 	vmov	s15, r3
 80036f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036fa:	eeb2 2a0e 	vmov.f32	s4, #46	; 0x41700000  15.0
 80036fe:	eef3 1a0e 	vmov.f32	s3, #62	; 0x41f00000  30.0
 8003702:	ed9f 1a61 	vldr	s2, [pc, #388]	; 8003888 <_ZN9AppMotion16MotionController4turnEbbbm+0x3e0>
 8003706:	eddf 0a61 	vldr	s1, [pc, #388]	; 800388c <_ZN9AppMotion16MotionController4turnEbbbm+0x3e4>
 800370a:	eeb0 0a67 	vmov.f32	s0, s15
 800370e:	f7ff fa67 	bl	8002be0 <_ZN9AppMotion16MotionController3mapEfffff>
 8003712:	eef0 7a40 	vmov.f32	s15, s0
 8003716:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800371a:	ee17 1a90 	vmov	r1, s15
 800371e:	4620      	mov	r0, r4
 8003720:	f000 fa7c 	bl	8003c1c <_ZN9AppMotion5Motor8setSpeedEm>
 8003724:	e0f6      	b.n	8003914 <_ZN9AppMotion16MotionController4turnEbbbm+0x46c>

			else rmotor->setSpeed((uint32_t)map(abs(target_yaw - cur), 45, 0, 30, 15));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689c      	ldr	r4, [r3, #8]
 800372a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800372e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003732:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003736:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800373a:	ee17 3a90 	vmov	r3, s15
 800373e:	2b00      	cmp	r3, #0
 8003740:	bfb8      	it	lt
 8003742:	425b      	neglt	r3, r3
 8003744:	ee07 3a90 	vmov	s15, r3
 8003748:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800374c:	eeb2 2a0e 	vmov.f32	s4, #46	; 0x41700000  15.0
 8003750:	eef3 1a0e 	vmov.f32	s3, #62	; 0x41f00000  30.0
 8003754:	ed9f 1a4c 	vldr	s2, [pc, #304]	; 8003888 <_ZN9AppMotion16MotionController4turnEbbbm+0x3e0>
 8003758:	eddf 0a4c 	vldr	s1, [pc, #304]	; 800388c <_ZN9AppMotion16MotionController4turnEbbbm+0x3e4>
 800375c:	eeb0 0a67 	vmov.f32	s0, s15
 8003760:	f7ff fa3e 	bl	8002be0 <_ZN9AppMotion16MotionController3mapEfffff>
 8003764:	eef0 7a40 	vmov.f32	s15, s0
 8003768:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800376c:	ee17 1a90 	vmov	r1, s15
 8003770:	4620      	mov	r0, r4
 8003772:	f000 fa53 	bl	8003c1c <_ZN9AppMotion5Motor8setSpeedEm>
 8003776:	e0cd      	b.n	8003914 <_ZN9AppMotion16MotionController4turnEbbbm+0x46c>
		}
		else if(fmod(abs(abs(target_yaw) - abs(cur)), 180) < 45 )
 8003778:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800377c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003780:	ee17 3a90 	vmov	r3, s15
 8003784:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003788:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800378c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003790:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003794:	ee17 3a90 	vmov	r3, s15
 8003798:	2b00      	cmp	r3, #0
 800379a:	bfb8      	it	lt
 800379c:	425b      	neglt	r3, r3
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	bfb8      	it	lt
 80037a4:	425b      	neglt	r3, r3
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7fc febc 	bl	8000524 <__aeabi_i2d>
 80037ac:	4602      	mov	r2, r0
 80037ae:	460b      	mov	r3, r1
 80037b0:	ed9f 1b2d 	vldr	d1, [pc, #180]	; 8003868 <_ZN9AppMotion16MotionController4turnEbbbm+0x3c0>
 80037b4:	ec43 2b10 	vmov	d0, r2, r3
 80037b8:	f00b f980 	bl	800eabc <fmod>
 80037bc:	ec51 0b10 	vmov	r0, r1, d0
 80037c0:	2301      	movs	r3, #1
 80037c2:	461c      	mov	r4, r3
 80037c4:	f04f 0200 	mov.w	r2, #0
 80037c8:	4b31      	ldr	r3, [pc, #196]	; (8003890 <_ZN9AppMotion16MotionController4turnEbbbm+0x3e8>)
 80037ca:	f7fd f987 	bl	8000adc <__aeabi_dcmplt>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <_ZN9AppMotion16MotionController4turnEbbbm+0x330>
 80037d4:	2300      	movs	r3, #0
 80037d6:	461c      	mov	r4, r3
 80037d8:	b2e3      	uxtb	r3, r4
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 809a 	beq.w	8003914 <_ZN9AppMotion16MotionController4turnEbbbm+0x46c>
		{
			if(isRight) lmotor->setSpeed((uint32_t)map(fmod(abs(abs(target_yaw) - abs(cur)), 180), 45, 0, 30, 15));
 80037e0:	78fb      	ldrb	r3, [r7, #3]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d056      	beq.n	8003894 <_ZN9AppMotion16MotionController4turnEbbbm+0x3ec>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685c      	ldr	r4, [r3, #4]
 80037ea:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80037ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037f2:	ee17 3a90 	vmov	r3, s15
 80037f6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80037fa:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80037fe:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003802:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003806:	ee17 3a90 	vmov	r3, s15
 800380a:	2b00      	cmp	r3, #0
 800380c:	bfb8      	it	lt
 800380e:	425b      	neglt	r3, r3
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	bfb8      	it	lt
 8003816:	425b      	neglt	r3, r3
 8003818:	4618      	mov	r0, r3
 800381a:	f7fc fe83 	bl	8000524 <__aeabi_i2d>
 800381e:	4602      	mov	r2, r0
 8003820:	460b      	mov	r3, r1
 8003822:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8003868 <_ZN9AppMotion16MotionController4turnEbbbm+0x3c0>
 8003826:	ec43 2b10 	vmov	d0, r2, r3
 800382a:	f00b f947 	bl	800eabc <fmod>
 800382e:	ec53 2b10 	vmov	r2, r3, d0
 8003832:	4610      	mov	r0, r2
 8003834:	4619      	mov	r1, r3
 8003836:	f7fd f9d7 	bl	8000be8 <__aeabi_d2f>
 800383a:	4603      	mov	r3, r0
 800383c:	eeb2 2a0e 	vmov.f32	s4, #46	; 0x41700000  15.0
 8003840:	eef3 1a0e 	vmov.f32	s3, #62	; 0x41f00000  30.0
 8003844:	ed9f 1a10 	vldr	s2, [pc, #64]	; 8003888 <_ZN9AppMotion16MotionController4turnEbbbm+0x3e0>
 8003848:	eddf 0a10 	vldr	s1, [pc, #64]	; 800388c <_ZN9AppMotion16MotionController4turnEbbbm+0x3e4>
 800384c:	ee00 3a10 	vmov	s0, r3
 8003850:	f7ff f9c6 	bl	8002be0 <_ZN9AppMotion16MotionController3mapEfffff>
 8003854:	eef0 7a40 	vmov.f32	s15, s0
 8003858:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800385c:	ee17 1a90 	vmov	r1, s15
 8003860:	4620      	mov	r0, r4
 8003862:	f000 f9db 	bl	8003c1c <_ZN9AppMotion5Motor8setSpeedEm>
 8003866:	e055      	b.n	8003914 <_ZN9AppMotion16MotionController4turnEbbbm+0x46c>
 8003868:	00000000 	.word	0x00000000
 800386c:	40668000 	.word	0x40668000
 8003870:	2000065c 	.word	0x2000065c
 8003874:	47c34f80 	.word	0x47c34f80
 8003878:	43330000 	.word	0x43330000
 800387c:	43340000 	.word	0x43340000
 8003880:	c3330000 	.word	0xc3330000
 8003884:	c3340000 	.word	0xc3340000
 8003888:	00000000 	.word	0x00000000
 800388c:	42340000 	.word	0x42340000
 8003890:	40468000 	.word	0x40468000

			else rmotor->setSpeed((uint32_t)map(fmod(abs(abs(target_yaw) - abs(cur)), 180), 45, 0, 30, 15));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689c      	ldr	r4, [r3, #8]
 8003898:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800389c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038a0:	ee17 3a90 	vmov	r3, s15
 80038a4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80038a8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80038ac:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80038b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038b4:	ee17 3a90 	vmov	r3, s15
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	bfb8      	it	lt
 80038bc:	425b      	neglt	r3, r3
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	bfb8      	it	lt
 80038c4:	425b      	neglt	r3, r3
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7fc fe2c 	bl	8000524 <__aeabi_i2d>
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	ed9f 1b87 	vldr	d1, [pc, #540]	; 8003af0 <_ZN9AppMotion16MotionController4turnEbbbm+0x648>
 80038d4:	ec43 2b10 	vmov	d0, r2, r3
 80038d8:	f00b f8f0 	bl	800eabc <fmod>
 80038dc:	ec53 2b10 	vmov	r2, r3, d0
 80038e0:	4610      	mov	r0, r2
 80038e2:	4619      	mov	r1, r3
 80038e4:	f7fd f980 	bl	8000be8 <__aeabi_d2f>
 80038e8:	4603      	mov	r3, r0
 80038ea:	eeb2 2a0e 	vmov.f32	s4, #46	; 0x41700000  15.0
 80038ee:	eef3 1a0e 	vmov.f32	s3, #62	; 0x41f00000  30.0
 80038f2:	ed9f 1a81 	vldr	s2, [pc, #516]	; 8003af8 <_ZN9AppMotion16MotionController4turnEbbbm+0x650>
 80038f6:	eddf 0a81 	vldr	s1, [pc, #516]	; 8003afc <_ZN9AppMotion16MotionController4turnEbbbm+0x654>
 80038fa:	ee00 3a10 	vmov	s0, r3
 80038fe:	f7ff f96f 	bl	8002be0 <_ZN9AppMotion16MotionController3mapEfffff>
 8003902:	eef0 7a40 	vmov.f32	s15, s0
 8003906:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800390a:	ee17 1a90 	vmov	r1, s15
 800390e:	4620      	mov	r0, r4
 8003910:	f000 f984 	bl	8003c1c <_ZN9AppMotion5Motor8setSpeedEm>
		}

		timeNow = HAL_GetTick();
 8003914:	f002 fb2a 	bl	8005f6c <HAL_GetTick>
 8003918:	6378      	str	r0, [r7, #52]	; 0x34
		 * abs(sensor_data.yaw_abs - sensor_data.yaw_abs_prev) is STEP SIZE
		 * 50 is TIME PER STEP
		 * sgn(sensor_data.yaw_abs - sensor_data.yaw_abs_prev) is DIRECTION
		 *
		 * */
		if(timeNow != sensor_data.yaw_abs_time)
 800391a:	4b79      	ldr	r3, [pc, #484]	; (8003b00 <_ZN9AppMotion16MotionController4turnEbbbm+0x658>)
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003920:	429a      	cmp	r2, r3
 8003922:	d028      	beq.n	8003976 <_ZN9AppMotion16MotionController4turnEbbbm+0x4ce>
			bwd_diffn_delta = abs(sensor_data.yaw_abs - sensor_data.yaw_abs_prev) * (float)(abs(timeNow - sensor_data.yaw_abs_time)/80);
 8003924:	4b76      	ldr	r3, [pc, #472]	; (8003b00 <_ZN9AppMotion16MotionController4turnEbbbm+0x658>)
 8003926:	ed93 7a04 	vldr	s14, [r3, #16]
 800392a:	4b75      	ldr	r3, [pc, #468]	; (8003b00 <_ZN9AppMotion16MotionController4turnEbbbm+0x658>)
 800392c:	edd3 7a05 	vldr	s15, [r3, #20]
 8003930:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003934:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003938:	ee17 3a90 	vmov	r3, s15
 800393c:	2b00      	cmp	r3, #0
 800393e:	bfb8      	it	lt
 8003940:	425b      	neglt	r3, r3
 8003942:	ee07 3a90 	vmov	s15, r3
 8003946:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800394a:	4b6d      	ldr	r3, [pc, #436]	; (8003b00 <_ZN9AppMotion16MotionController4turnEbbbm+0x658>)
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	bfb8      	it	lt
 8003956:	425b      	neglt	r3, r3
 8003958:	4a6a      	ldr	r2, [pc, #424]	; (8003b04 <_ZN9AppMotion16MotionController4turnEbbbm+0x65c>)
 800395a:	fb82 1203 	smull	r1, r2, r2, r3
 800395e:	1152      	asrs	r2, r2, #5
 8003960:	17db      	asrs	r3, r3, #31
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	ee07 3a90 	vmov	s15, r3
 8003968:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800396c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003970:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 8003974:	e002      	b.n	800397c <_ZN9AppMotion16MotionController4turnEbbbm+0x4d4>
		else
			bwd_diffn_delta = 0;
 8003976:	f04f 0300 	mov.w	r3, #0
 800397a:	63bb      	str	r3, [r7, #56]	; 0x38
		cur = sensor_data.yaw_abs +  (bwd_diffn_delta * sgn(sensor_data.yaw_abs - sensor_data.yaw_abs_prev)); // already dlpf and qtn filtered
 800397c:	4b60      	ldr	r3, [pc, #384]	; (8003b00 <_ZN9AppMotion16MotionController4turnEbbbm+0x658>)
 800397e:	ed93 8a04 	vldr	s16, [r3, #16]
 8003982:	4b5f      	ldr	r3, [pc, #380]	; (8003b00 <_ZN9AppMotion16MotionController4turnEbbbm+0x658>)
 8003984:	ed93 7a04 	vldr	s14, [r3, #16]
 8003988:	4b5d      	ldr	r3, [pc, #372]	; (8003b00 <_ZN9AppMotion16MotionController4turnEbbbm+0x658>)
 800398a:	edd3 7a05 	vldr	s15, [r3, #20]
 800398e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003992:	eeb0 0a67 	vmov.f32	s0, s15
 8003996:	f000 fa6d 	bl	8003e74 <_ZN9AppMotion16MotionController3sgnIfEEiT_>
 800399a:	ee07 0a90 	vmov	s15, r0
 800399e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039a2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80039a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039aa:	ee78 7a27 	vadd.f32	s15, s16, s15
 80039ae:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		sensor_data.yaw_cur_dbg = cur;
 80039b2:	4a53      	ldr	r2, [pc, #332]	; (8003b00 <_ZN9AppMotion16MotionController4turnEbbbm+0x658>)
 80039b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039b6:	61d3      	str	r3, [r2, #28]
		prev_yaw = cur;
 80039b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039ba:	62bb      	str	r3, [r7, #40]	; 0x28
		//break off immediately if overshoot
		if (last_target_dist < abs(target_yaw - cur)
 80039bc:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80039c0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80039c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039cc:	ee17 3a90 	vmov	r3, s15
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	bfb8      	it	lt
 80039d4:	425b      	neglt	r3, r3
 80039d6:	ee07 3a90 	vmov	s15, r3
 80039da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039de:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80039e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ea:	d50e      	bpl.n	8003a0a <_ZN9AppMotion16MotionController4turnEbbbm+0x562>
				&& abs(target_yaw - cur) < 15)
 80039ec:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80039f0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80039f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039fc:	ee17 3a90 	vmov	r3, s15
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	bfb8      	it	lt
 8003a04:	425b      	neglt	r3, r3
 8003a06:	2b0e      	cmp	r3, #14
 8003a08:	dd5b      	ble.n	8003ac2 <_ZN9AppMotion16MotionController4turnEbbbm+0x61a>
			break;
		else last_target_dist = abs(target_yaw - cur);
 8003a0a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003a0e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003a12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a1a:	ee17 3a90 	vmov	r3, s15
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	bfb8      	it	lt
 8003a22:	425b      	neglt	r3, r3
 8003a24:	ee07 3a90 	vmov	s15, r3
 8003a28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a2c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

		if (abs(target_yaw - cur) <= 0.25
 8003a30:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003a34:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003a38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a40:	ee17 3a90 	vmov	r3, s15
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	bfb8      	it	lt
 8003a48:	425b      	neglt	r3, r3
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fc fd6a 	bl	8000524 <__aeabi_i2d>
				|| (HAL_GetTick() - timeStart) > 10000)
 8003a50:	f04f 0200 	mov.w	r2, #0
 8003a54:	4b2c      	ldr	r3, [pc, #176]	; (8003b08 <_ZN9AppMotion16MotionController4turnEbbbm+0x660>)
 8003a56:	f7fd f84b 	bl	8000af0 <__aeabi_dcmple>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d108      	bne.n	8003a72 <_ZN9AppMotion16MotionController4turnEbbbm+0x5ca>
 8003a60:	f002 fa84 	bl	8005f6c <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	f242 7210 	movw	r2, #10000	; 0x2710
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d901      	bls.n	8003a76 <_ZN9AppMotion16MotionController4turnEbbbm+0x5ce>
 8003a72:	2301      	movs	r3, #1
 8003a74:	e000      	b.n	8003a78 <_ZN9AppMotion16MotionController4turnEbbbm+0x5d0>
 8003a76:	2300      	movs	r3, #0
		if (abs(target_yaw - cur) <= 0.25
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d019      	beq.n	8003ab0 <_ZN9AppMotion16MotionController4turnEbbbm+0x608>
		{
			sensor_data.last_halt_val = ((uint32_t)abs(target_yaw - cur)) %180;
 8003a7c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003a80:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003a84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a8c:	ee17 3a90 	vmov	r3, s15
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	bfb8      	it	lt
 8003a94:	425b      	neglt	r3, r3
 8003a96:	461a      	mov	r2, r3
 8003a98:	0893      	lsrs	r3, r2, #2
 8003a9a:	491c      	ldr	r1, [pc, #112]	; (8003b0c <_ZN9AppMotion16MotionController4turnEbbbm+0x664>)
 8003a9c:	fba1 1303 	umull	r1, r3, r1, r3
 8003aa0:	089b      	lsrs	r3, r3, #2
 8003aa2:	21b4      	movs	r1, #180	; 0xb4
 8003aa4:	fb01 f303 	mul.w	r3, r1, r3
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	4a15      	ldr	r2, [pc, #84]	; (8003b00 <_ZN9AppMotion16MotionController4turnEbbbm+0x658>)
 8003aac:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8003aae:	e008      	b.n	8003ac2 <_ZN9AppMotion16MotionController4turnEbbbm+0x61a>
		}

		sensor_data.last_halt_val = arg;
 8003ab0:	4a13      	ldr	r2, [pc, #76]	; (8003b00 <_ZN9AppMotion16MotionController4turnEbbbm+0x658>)
 8003ab2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ab4:	6353      	str	r3, [r2, #52]	; 0x34
		osDelay(2);
 8003ab6:	2002      	movs	r0, #2
 8003ab8:	f008 f934 	bl	800bd24 <osDelay>
		osThreadYield(); // need to ensure yield for the sensortask
 8003abc:	f008 f912 	bl	800bce4 <osThreadYield>
		if (abs(target_yaw - cur) < 45 ) {
 8003ac0:	e5f6      	b.n	80036b0 <_ZN9AppMotion16MotionController4turnEbbbm+0x208>

	} while (1);

	emergency = false;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	lmotor->halt();
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 f91a 	bl	8003d08 <_ZN9AppMotion5Motor4haltEv>
	rmotor->halt();
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f000 f915 	bl	8003d08 <_ZN9AppMotion5Motor4haltEv>
}
 8003ade:	bf00      	nop
 8003ae0:	374c      	adds	r7, #76	; 0x4c
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	ecbd 8b02 	vpop	{d8}
 8003ae8:	bd90      	pop	{r4, r7, pc}
 8003aea:	bf00      	nop
 8003aec:	f3af 8000 	nop.w
 8003af0:	00000000 	.word	0x00000000
 8003af4:	40668000 	.word	0x40668000
 8003af8:	00000000 	.word	0x00000000
 8003afc:	42340000 	.word	0x42340000
 8003b00:	2000065c 	.word	0x2000065c
 8003b04:	66666667 	.word	0x66666667
 8003b08:	3fd00000 	.word	0x3fd00000
 8003b0c:	16c16c17 	.word	0x16c16c17

08003b10 <_ZN9AppMotion16MotionController13emergencyStopEv>:

void MotionController::emergencyStop() {
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
	emergency = true;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <_ZN9AppMotion5ServoC1EP17TIM_HandleTypeDefmmmm>:

Servo::Servo(TIM_HandleTypeDef *ctrl, uint32_t channel, uint32_t min,
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
 8003b38:	603b      	str	r3, [r7, #0]
		uint32_t max, uint32_t center) {
	this->htimer = ctrl;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	601a      	str	r2, [r3, #0]
	this->channel = channel;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	605a      	str	r2, [r3, #4]
	this->MIN_PWM = min;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	60da      	str	r2, [r3, #12]
	this->MAX_PWM = max;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	611a      	str	r2, [r3, #16]
	this->CTR_PWM = center;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	69fa      	ldr	r2, [r7, #28]
 8003b56:	615a      	str	r2, [r3, #20]
	HAL_TIM_PWM_Start(ctrl, channel);
 8003b58:	6879      	ldr	r1, [r7, #4]
 8003b5a:	68b8      	ldr	r0, [r7, #8]
 8003b5c:	f005 fbfc 	bl	8009358 <HAL_TIM_PWM_Start>
}
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <_ZN9AppMotion5Servo8turnLeftEv>:

void Servo::turnLeft() {
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b082      	sub	sp, #8
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
	this->htimer->Instance->CCR1 = MIN_PWM;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	68d2      	ldr	r2, [r2, #12]
 8003b7c:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(TURN_DELAY_MS);
 8003b7e:	20fa      	movs	r0, #250	; 0xfa
 8003b80:	f008 f8d0 	bl	800bd24 <osDelay>

}
 8003b84:	bf00      	nop
 8003b86:	3708      	adds	r7, #8
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <_ZN9AppMotion5Servo9turnRightEv>:
void Servo::turnRight() {
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
	this->htimer->Instance->CCR1 = MAX_PWM;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6912      	ldr	r2, [r2, #16]
 8003b9e:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(TURN_DELAY_MS);
 8003ba0:	20fa      	movs	r0, #250	; 0xfa
 8003ba2:	f008 f8bf 	bl	800bd24 <osDelay>
}
 8003ba6:	bf00      	nop
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <_ZN9AppMotion5Servo9turnFrontEv>:

void Servo::turnFront() {
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b082      	sub	sp, #8
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
	this->htimer->Instance->CCR1 = CTR_PWM;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	6952      	ldr	r2, [r2, #20]
 8003bc0:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(TURN_DELAY_MS);
 8003bc2:	20fa      	movs	r0, #250	; 0xfa
 8003bc4:	f008 f8ae 	bl	800bd24 <osDelay>
}
 8003bc8:	bf00      	nop
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <_ZN9AppMotion5MotorC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefS4_ttm>:

Motor::Motor(TIM_HandleTypeDef *ctrl, uint32_t channel, GPIO_TypeDef *gpioAPort,
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
 8003bdc:	603b      	str	r3, [r7, #0]
		GPIO_TypeDef *gpioBPort, uint16_t gpioApin, uint16_t gpioBpin,
		uint32_t pwm_period) {

	this->htimer = ctrl;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	601a      	str	r2, [r3, #0]
	this->channel = channel;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	605a      	str	r2, [r3, #4]
	this->period = pwm_period;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bee:	609a      	str	r2, [r3, #8]
	this->gpioAPort = gpioAPort;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	60da      	str	r2, [r3, #12]
	this->gpioBPort = gpioBPort;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	611a      	str	r2, [r3, #16]
	this->gpioAPin = gpioApin;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8bba      	ldrh	r2, [r7, #28]
 8003c00:	829a      	strh	r2, [r3, #20]
	this->gpioBpin = gpioBpin;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8c3a      	ldrh	r2, [r7, #32]
 8003c06:	82da      	strh	r2, [r3, #22]
	HAL_TIM_PWM_Start(ctrl, channel);
 8003c08:	6879      	ldr	r1, [r7, #4]
 8003c0a:	68b8      	ldr	r0, [r7, #8]
 8003c0c:	f005 fba4 	bl	8009358 <HAL_TIM_PWM_Start>

}
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
	...

08003c1c <_ZN9AppMotion5Motor8setSpeedEm>:

bool Motor::setSpeed(uint32_t percent) {
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
	if (percent > 100)
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	2b64      	cmp	r3, #100	; 0x64
 8003c2a:	d901      	bls.n	8003c30 <_ZN9AppMotion5Motor8setSpeedEm+0x14>
		return false;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	e02d      	b.n	8003c8c <_ZN9AppMotion5Motor8setSpeedEm+0x70>
	uint32_t value = this->period / 100 * percent;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	4a18      	ldr	r2, [pc, #96]	; (8003c98 <_ZN9AppMotion5Motor8setSpeedEm+0x7c>)
 8003c36:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3a:	095a      	lsrs	r2, r3, #5
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	fb02 f303 	mul.w	r3, r2, r3
 8003c42:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(this->htimer, this->channel, value);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d105      	bne.n	8003c58 <_ZN9AppMotion5Motor8setSpeedEm+0x3c>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	635a      	str	r2, [r3, #52]	; 0x34
 8003c56:	e018      	b.n	8003c8a <_ZN9AppMotion5Motor8setSpeedEm+0x6e>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	2b04      	cmp	r3, #4
 8003c5e:	d105      	bne.n	8003c6c <_ZN9AppMotion5Motor8setSpeedEm+0x50>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	639a      	str	r2, [r3, #56]	; 0x38
 8003c6a:	e00e      	b.n	8003c8a <_ZN9AppMotion5Motor8setSpeedEm+0x6e>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	d105      	bne.n	8003c80 <_ZN9AppMotion5Motor8setSpeedEm+0x64>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	63da      	str	r2, [r3, #60]	; 0x3c
 8003c7e:	e004      	b.n	8003c8a <_ZN9AppMotion5Motor8setSpeedEm+0x6e>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	641a      	str	r2, [r3, #64]	; 0x40
	return true;
 8003c8a:	2301      	movs	r3, #1
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3714      	adds	r7, #20
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	51eb851f 	.word	0x51eb851f

08003c9c <_ZN9AppMotion5Motor16_setDutyCycleValEm>:

bool Motor::_setDutyCycleVal(uint32_t dc) {
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
	if (dc > this->period)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d901      	bls.n	8003cb4 <_ZN9AppMotion5Motor16_setDutyCycleValEm+0x18>
		return false;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	e023      	b.n	8003cfc <_ZN9AppMotion5Motor16_setDutyCycleValEm+0x60>
		__HAL_TIM_SET_COMPARE(this->htimer, this->channel, dc);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d105      	bne.n	8003cc8 <_ZN9AppMotion5Motor16_setDutyCycleValEm+0x2c>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	635a      	str	r2, [r3, #52]	; 0x34
 8003cc6:	e018      	b.n	8003cfa <_ZN9AppMotion5Motor16_setDutyCycleValEm+0x5e>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	2b04      	cmp	r3, #4
 8003cce:	d105      	bne.n	8003cdc <_ZN9AppMotion5Motor16_setDutyCycleValEm+0x40>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	639a      	str	r2, [r3, #56]	; 0x38
 8003cda:	e00e      	b.n	8003cfa <_ZN9AppMotion5Motor16_setDutyCycleValEm+0x5e>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	d105      	bne.n	8003cf0 <_ZN9AppMotion5Motor16_setDutyCycleValEm+0x54>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	63da      	str	r2, [r3, #60]	; 0x3c
 8003cee:	e004      	b.n	8003cfa <_ZN9AppMotion5Motor16_setDutyCycleValEm+0x5e>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	641a      	str	r2, [r3, #64]	; 0x40
	return true;
 8003cfa:	2301      	movs	r3, #1
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <_ZN9AppMotion5Motor4haltEv>:

void Motor::halt() {
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(this->htimer, this->channel, 0);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d105      	bne.n	8003d24 <_ZN9AppMotion5Motor4haltEv+0x1c>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003d22:	e018      	b.n	8003d56 <_ZN9AppMotion5Motor4haltEv+0x4e>
	__HAL_TIM_SET_COMPARE(this->htimer, this->channel, 0);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	2b04      	cmp	r3, #4
 8003d2a:	d105      	bne.n	8003d38 <_ZN9AppMotion5Motor4haltEv+0x30>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2200      	movs	r2, #0
 8003d34:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003d36:	e00e      	b.n	8003d56 <_ZN9AppMotion5Motor4haltEv+0x4e>
	__HAL_TIM_SET_COMPARE(this->htimer, this->channel, 0);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d105      	bne.n	8003d4c <_ZN9AppMotion5Motor4haltEv+0x44>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2200      	movs	r2, #0
 8003d48:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003d4a:	e004      	b.n	8003d56 <_ZN9AppMotion5Motor4haltEv+0x4e>
	__HAL_TIM_SET_COMPARE(this->htimer, this->channel, 0);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2200      	movs	r2, #0
 8003d54:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <_ZN9AppMotion5Motor10setForwardEv>:

void Motor::setForward() {
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b082      	sub	sp, #8
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->gpioAPort, this->gpioAPin, GPIO_PIN_RESET);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68d8      	ldr	r0, [r3, #12]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	8a9b      	ldrh	r3, [r3, #20]
 8003d72:	2200      	movs	r2, #0
 8003d74:	4619      	mov	r1, r3
 8003d76:	f003 fba9 	bl	80074cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(this->gpioBPort, this->gpioBpin, GPIO_PIN_SET);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6918      	ldr	r0, [r3, #16]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	8adb      	ldrh	r3, [r3, #22]
 8003d82:	2201      	movs	r2, #1
 8003d84:	4619      	mov	r1, r3
 8003d86:	f003 fba1 	bl	80074cc <HAL_GPIO_WritePin>
}
 8003d8a:	bf00      	nop
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <_ZN9AppMotion5Motor11setBackwardEv>:

void Motor::setBackward() {
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b082      	sub	sp, #8
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->gpioAPort, this->gpioAPin, GPIO_PIN_SET);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68d8      	ldr	r0, [r3, #12]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	8a9b      	ldrh	r3, [r3, #20]
 8003da2:	2201      	movs	r2, #1
 8003da4:	4619      	mov	r1, r3
 8003da6:	f003 fb91 	bl	80074cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(this->gpioBPort, this->gpioBpin, GPIO_PIN_RESET);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6918      	ldr	r0, [r3, #16]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	8adb      	ldrh	r3, [r3, #22]
 8003db2:	2200      	movs	r2, #0
 8003db4:	4619      	mov	r1, r3
 8003db6:	f003 fb89 	bl	80074cc <HAL_GPIO_WritePin>
}
 8003dba:	bf00      	nop
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <_ZN9AppMotion7EncoderC1EP17TIM_HandleTypeDefm>:

Encoder::Encoder(TIM_HandleTypeDef *ctrl, uint32_t channel) {
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b084      	sub	sp, #16
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	60f8      	str	r0, [r7, #12]
 8003dca:	60b9      	str	r1, [r7, #8]
 8003dcc:	607a      	str	r2, [r7, #4]

	this->htimer = ctrl;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	601a      	str	r2, [r3, #0]
	this->channel = channel;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	605a      	str	r2, [r3, #4]
	HAL_TIM_Encoder_Start(ctrl, channel);
 8003dda:	6879      	ldr	r1, [r7, #4]
 8003ddc:	68b8      	ldr	r0, [r7, #8]
 8003dde:	f005 fc29 	bl	8009634 <HAL_TIM_Encoder_Start>

}
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	4618      	mov	r0, r3
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <_ZN9AppMotion7Encoder8getCountEv>:

uint32_t Encoder::getCount(void) {
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
	return (uint32_t) __HAL_TIM_GET_COUNTER(this->htimer);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <_ZN9AppMotion7Encoder8getDeltaEmm>:

uint32_t Encoder::getDelta(uint32_t ct1, uint32_t ct2) {
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
	if (__HAL_TIM_IS_TIM_COUNTING_DOWN(this->htimer)) {
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0310 	and.w	r3, r3, #16
 8003e20:	2b10      	cmp	r3, #16
 8003e22:	bf0c      	ite	eq
 8003e24:	2301      	moveq	r3, #1
 8003e26:	2300      	movne	r3, #0
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00e      	beq.n	8003e4c <_ZN9AppMotion7Encoder8getDeltaEmm+0x44>
		if (ct2 <= ct1) {
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d803      	bhi.n	8003e3e <_ZN9AppMotion7Encoder8getDeltaEmm+0x36>
			return ct1 - ct2;
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	e014      	b.n	8003e68 <_ZN9AppMotion7Encoder8getDeltaEmm+0x60>
		} else {
			return (65535 - ct2) + ct1;
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8003e48:	33ff      	adds	r3, #255	; 0xff
 8003e4a:	e00d      	b.n	8003e68 <_ZN9AppMotion7Encoder8getDeltaEmm+0x60>
		}
	} else {
		if (ct2 >= ct1) {
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d303      	bcc.n	8003e5c <_ZN9AppMotion7Encoder8getDeltaEmm+0x54>
			return ct2 - ct1;
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	e005      	b.n	8003e68 <_ZN9AppMotion7Encoder8getDeltaEmm+0x60>
		} else {
			return (65535 - ct1) + ct2;
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8003e66:	33ff      	adds	r3, #255	; 0xff
		}
	}
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3714      	adds	r7, #20
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <_ZN9AppMotion16MotionController3sgnIfEEiT_>:
	template <typename T> static int sgn(T val) {
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	ed87 0a01 	vstr	s0, [r7, #4]
	    return (T(0) < val) - (val < T(0));
 8003e7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e8a:	bfcc      	ite	gt
 8003e8c:	2301      	movgt	r3, #1
 8003e8e:	2300      	movle	r3, #0
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	461a      	mov	r2, r3
 8003e94:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ea0:	bf4c      	ite	mi
 8003ea2:	2301      	movmi	r3, #1
 8003ea4:	2300      	movpl	r3, #0
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	1ad3      	subs	r3, r2, r3
	}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <_ZN9AppParser8ListenerC1EP5u_ctx>:
bool Processor::_signal_obstr = false;
bool Processor::_obstr_txed = false;

static volatile BUF_CMP_t uartRxBuf[10];
static volatile BUF_CMP_t uartOKBuf[10];
Listener::Listener(u_ctx *ctx) {
 8003eb6:	b480      	push	{r7}
 8003eb8:	b083      	sub	sp, #12
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
 8003ebe:	6039      	str	r1, [r7, #0]
	this->ctx = ctx;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	601a      	str	r2, [r3, #0]
}
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <_ZN9AppParser8ListenerD1Ev>:

Listener::~Listener() {
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
}
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
	...

08003eec <_ZN9AppParser8Listener6invokeEv>:
;
// not needed

/*! called from ISR */
volatile void Listener::invoke() {
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b088      	sub	sp, #32
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
	//osMutexRelease(this->ctx->mailbox.lock);
	AppMessage_t msg;
	memcpy(&msg.buffer, (const BUF_CMP_t*) &uartRxBuf, 10);
 8003ef4:	4a0e      	ldr	r2, [pc, #56]	; (8003f30 <_ZN9AppParser8Listener6invokeEv+0x44>)
 8003ef6:	f107 030c 	add.w	r3, r7, #12
 8003efa:	ca07      	ldmia	r2, {r0, r1, r2}
 8003efc:	c303      	stmia	r3!, {r0, r1}
 8003efe:	801a      	strh	r2, [r3, #0]
	memset((BUF_CMP_t*) &uartRxBuf, 0, 10);
 8003f00:	220a      	movs	r2, #10
 8003f02:	2100      	movs	r1, #0
 8003f04:	480a      	ldr	r0, [pc, #40]	; (8003f30 <_ZN9AppParser8Listener6invokeEv+0x44>)
 8003f06:	f00c fa07 	bl	8010318 <memset>
	osStatus_t tmp = osMessageQueuePut(ctx->mailbox.queue, &msg, 0, 0);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003f10:	f107 010c 	add.w	r1, r7, #12
 8003f14:	2300      	movs	r3, #0
 8003f16:	2200      	movs	r2, #0
 8003f18:	f007 ff92 	bl	800be40 <osMessageQueuePut>
 8003f1c:	61f8      	str	r0, [r7, #28]
	//HAL_UART_Transmit(&huart3, (uint8_t *)ibuf, sizeof(ibuf), 10);
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 8003f1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f22:	4804      	ldr	r0, [pc, #16]	; (8003f34 <_ZN9AppParser8Listener6invokeEv+0x48>)
 8003f24:	f003 faeb 	bl	80074fe <HAL_GPIO_TogglePin>

	//HAL_UART_Receive_DMA(&huart3, (uint8_t *) aRxBuffer, 5);
}
 8003f28:	bf00      	nop
 8003f2a:	3720      	adds	r7, #32
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	20000874 	.word	0x20000874
 8003f34:	40021000 	.word	0x40021000

08003f38 <_ZN9AppParser9ProcessorC1EP5u_ctxS2_>:

Processor::Processor(u_ctx *rx_ctx, u_ctx *tx_ctx) {
 8003f38:	b590      	push	{r4, r7, lr}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
	this->this_ctx = rx_ctx;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	601a      	str	r2, [r3, #0]
	this->o_ctx = tx_ctx;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	605a      	str	r2, [r3, #4]
	this->this_ctx->mailbox.queue = osMessageQueueNew(10, sizeof(AppMessage_t),
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681c      	ldr	r4, [r3, #0]
 8003f54:	2200      	movs	r2, #0
 8003f56:	2110      	movs	r1, #16
 8003f58:	200a      	movs	r0, #10
 8003f5a:	f007 fefe 	bl	800bd5a <osMessageQueueNew>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	62a3      	str	r3, [r4, #40]	; 0x28
	NULL);
}
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	4618      	mov	r0, r3
 8003f66:	3714      	adds	r7, #20
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd90      	pop	{r4, r7, pc}

08003f6c <_ZN9AppParser9ProcessorD1Ev>:

Processor::~Processor() {
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
}
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4618      	mov	r0, r3
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
	...

08003f84 <_ZN9AppParser9Processor5startEv>:
void Processor::startImpl(void *_this) // hardfaults on queue for some reason so made static
		{
	//static_cast<Processor *>(_this)->processorTask();
}

void Processor::start(void) {
 8003f84:	b590      	push	{r4, r7, lr}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
	ctx_wrapper *wrapper_instance = new ctx_wrapper();
 8003f8c:	2008      	movs	r0, #8
 8003f8e:	f00a fd55 	bl	800ea3c <_Znwj>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2200      	movs	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	605a      	str	r2, [r3, #4]
 8003f9c:	60fb      	str	r3, [r7, #12]
	wrapper_instance->rx_ctx = this_ctx;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	601a      	str	r2, [r3, #0]
	wrapper_instance->tx_ctx = o_ctx;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	605a      	str	r2, [r3, #4]
// pass context information to the thread fn since there is some issue with making the fn a class instance.
// note that this_ctx refers to this class and o_ctx refers to the (o)ther class, i.e. the destination, MotionController
	this->this_ctx->runner = osThreadNew(
			(osThreadFunc_t) Processor::processorTask, wrapper_instance,
			&(this_ctx->attr));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	1d1a      	adds	r2, r3, #4
	this->this_ctx->runner = osThreadNew(
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681c      	ldr	r4, [r3, #0]
 8003fb8:	68f9      	ldr	r1, [r7, #12]
 8003fba:	4804      	ldr	r0, [pc, #16]	; (8003fcc <_ZN9AppParser9Processor5startEv+0x48>)
 8003fbc:	f007 fdfe 	bl	800bbbc <osThreadNew>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	6023      	str	r3, [r4, #0]

	return;
 8003fc4:	bf00      	nop
}
 8003fc6:	3714      	adds	r7, #20
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd90      	pop	{r4, r7, pc}
 8003fcc:	08003fd1 	.word	0x08003fd1

08003fd0 <_ZN9AppParser9Processor13processorTaskEPv>:

void Processor::processorTask(void *pv) {
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b094      	sub	sp, #80	; 0x50
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart3, (BUF_CMP_t*) uartRxBuf, 10);
 8003fd8:	220a      	movs	r2, #10
 8003fda:	49b2      	ldr	r1, [pc, #712]	; (80042a4 <_ZN9AppParser9Processor13processorTaskEPv+0x2d4>)
 8003fdc:	48b2      	ldr	r0, [pc, #712]	; (80042a8 <_ZN9AppParser9Processor13processorTaskEPv+0x2d8>)
 8003fde:	f006 fb4f 	bl	800a680 <HAL_UART_Receive_DMA>

	ctx_wrapper *wrapper = static_cast<ctx_wrapper*>(pv);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	64bb      	str	r3, [r7, #72]	; 0x48

	// Access rx_ctx and tx_ctx pointers from the wrapper
	u_ctx *rx_ctx = wrapper->rx_ctx;
 8003fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	647b      	str	r3, [r7, #68]	; 0x44
	u_ctx *tx_ctx = wrapper->tx_ctx;
 8003fec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	643b      	str	r3, [r7, #64]	; 0x40

	for (;;) {

		//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
		is_task_alive_struct.proc = true;
 8003ff2:	4bae      	ldr	r3, [pc, #696]	; (80042ac <_ZN9AppParser9Processor13processorTaskEPv+0x2dc>)
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	701a      	strb	r2, [r3, #0]

		osDelay(10);
 8003ff8:	200a      	movs	r0, #10
 8003ffa:	f007 fe93 	bl	800bd24 <osDelay>
		osThreadYield();
 8003ffe:	f007 fe71 	bl	800bce4 <osThreadYield>
		 * enough for this purpose..
		 *
		 * Any alternative to get per-byte interrupt etc., will require rewriting of the HAL funcs
		 * or polling mechanism.
		 */
		uint32_t buf_fill = 0;
 8004002:	2300      	movs	r3, #0
 8004004:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (uint32_t i = 0; i < sizeof(uartRxBuf); i++) {
 8004006:	2300      	movs	r3, #0
 8004008:	64fb      	str	r3, [r7, #76]	; 0x4c
 800400a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800400c:	2b09      	cmp	r3, #9
 800400e:	d81d      	bhi.n	800404c <_ZN9AppParser9Processor13processorTaskEPv+0x7c>
			if (uartRxBuf[i] != 0) {
 8004010:	4aa4      	ldr	r2, [pc, #656]	; (80042a4 <_ZN9AppParser9Processor13processorTaskEPv+0x2d4>)
 8004012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004014:	4413      	add	r3, r2
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	bf14      	ite	ne
 800401e:	2301      	movne	r3, #1
 8004020:	2300      	moveq	r3, #0
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00d      	beq.n	8004044 <_ZN9AppParser9Processor13processorTaskEPv+0x74>
				HAL_UART_DMAStop(&huart3);
 8004028:	489f      	ldr	r0, [pc, #636]	; (80042a8 <_ZN9AppParser9Processor13processorTaskEPv+0x2d8>)
 800402a:	f006 fb59 	bl	800a6e0 <HAL_UART_DMAStop>
				HAL_UART_Receive_DMA(&huart3, (BUF_CMP_t*) uartRxBuf, 10);
 800402e:	220a      	movs	r2, #10
 8004030:	499c      	ldr	r1, [pc, #624]	; (80042a4 <_ZN9AppParser9Processor13processorTaskEPv+0x2d4>)
 8004032:	489d      	ldr	r0, [pc, #628]	; (80042a8 <_ZN9AppParser9Processor13processorTaskEPv+0x2d8>)
 8004034:	f006 fb24 	bl	800a680 <HAL_UART_Receive_DMA>
				memset((BUF_CMP_t*) &uartRxBuf, 0, 10);
 8004038:	220a      	movs	r2, #10
 800403a:	2100      	movs	r1, #0
 800403c:	4899      	ldr	r0, [pc, #612]	; (80042a4 <_ZN9AppParser9Processor13processorTaskEPv+0x2d4>)
 800403e:	f00c f96b 	bl	8010318 <memset>
				break;
 8004042:	e003      	b.n	800404c <_ZN9AppParser9Processor13processorTaskEPv+0x7c>
		for (uint32_t i = 0; i < sizeof(uartRxBuf); i++) {
 8004044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004046:	3301      	adds	r3, #1
 8004048:	64fb      	str	r3, [r7, #76]	; 0x4c
 800404a:	e7de      	b.n	800400a <_ZN9AppParser9Processor13processorTaskEPv+0x3a>
			}
		}

		/* end buffer cleaning algorithm */

		sensor_data.ql = osMessageQueueGetCount(rx_ctx->mailbox.queue);
 800404c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800404e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004050:	4618      	mov	r0, r3
 8004052:	f007 ffb3 	bl	800bfbc <osMessageQueueGetCount>
 8004056:	4603      	mov	r3, r0
 8004058:	4a95      	ldr	r2, [pc, #596]	; (80042b0 <_ZN9AppParser9Processor13processorTaskEPv+0x2e0>)
 800405a:	6253      	str	r3, [r2, #36]	; 0x24
		if (uxQueueMessagesWaiting((QueueHandle_t) rx_ctx->mailbox.queue)) {
 800405c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800405e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004060:	4618      	mov	r0, r3
 8004062:	f008 fcdb 	bl	800ca1c <uxQueueMessagesWaiting>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	bf14      	ite	ne
 800406c:	2301      	movne	r3, #1
 800406e:	2300      	moveq	r3, #0
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 8134 	beq.w	80042e0 <_ZN9AppParser9Processor13processorTaskEPv+0x310>

			AppMessage_t msg;
			osMessageQueueGet(rx_ctx->mailbox.queue, &msg.buffer, 0, 5);
 8004078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800407a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800407c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004080:	2305      	movs	r3, #5
 8004082:	2200      	movs	r2, #0
 8004084:	f007 ff3c 	bl	800bf00 <osMessageQueueGet>
			// osMessageQueueReset(procCtx.mailbox.queue);

			/* DATA VALIDATION */
			if (!isEq<BUF_CMP_t>(START_CHAR, msg.buffer[0])) {
 8004088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800408c:	4619      	mov	r1, r3
 800408e:	4889      	ldr	r0, [pc, #548]	; (80042b4 <_ZN9AppParser9Processor13processorTaskEPv+0x2e4>)
 8004090:	f000 fb28 	bl	80046e4 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8004094:	4603      	mov	r3, r0
 8004096:	f083 0301 	eor.w	r3, r3, #1
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b00      	cmp	r3, #0
 800409e:	d005      	beq.n	80040ac <_ZN9AppParser9Processor13processorTaskEPv+0xdc>
				HAL_UART_Transmit(&huart3, (BUF_CMP_t*) nack, sizeof(nack), 10);
 80040a0:	230a      	movs	r3, #10
 80040a2:	2204      	movs	r2, #4
 80040a4:	4984      	ldr	r1, [pc, #528]	; (80042b8 <_ZN9AppParser9Processor13processorTaskEPv+0x2e8>)
 80040a6:	4880      	ldr	r0, [pc, #512]	; (80042a8 <_ZN9AppParser9Processor13processorTaskEPv+0x2d8>)
 80040a8:	f006 fa58 	bl	800a55c <HAL_UART_Transmit>
			}
			if (!isEq<BUF_CMP_t>(END_CHAR, msg.buffer[9])) {
 80040ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040b0:	3309      	adds	r3, #9
 80040b2:	4619      	mov	r1, r3
 80040b4:	4881      	ldr	r0, [pc, #516]	; (80042bc <_ZN9AppParser9Processor13processorTaskEPv+0x2ec>)
 80040b6:	f000 fb15 	bl	80046e4 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 80040ba:	4603      	mov	r3, r0
 80040bc:	f083 0301 	eor.w	r3, r3, #1
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d005      	beq.n	80040d2 <_ZN9AppParser9Processor13processorTaskEPv+0x102>
				HAL_UART_Transmit(&huart3, (BUF_CMP_t*) nack, sizeof(nack), 10);
 80040c6:	230a      	movs	r3, #10
 80040c8:	2204      	movs	r2, #4
 80040ca:	497b      	ldr	r1, [pc, #492]	; (80042b8 <_ZN9AppParser9Processor13processorTaskEPv+0x2e8>)
 80040cc:	4876      	ldr	r0, [pc, #472]	; (80042a8 <_ZN9AppParser9Processor13processorTaskEPv+0x2d8>)
 80040ce:	f006 fa45 	bl	800a55c <HAL_UART_Transmit>
			}
			/******************/

			// do request stuff
			if (isEq<BUF_CMP_t>(REQ_CHAR, msg.buffer[1])) {
 80040d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040d6:	3301      	adds	r3, #1
 80040d8:	4619      	mov	r1, r3
 80040da:	4879      	ldr	r0, [pc, #484]	; (80042c0 <_ZN9AppParser9Processor13processorTaskEPv+0x2f0>)
 80040dc:	f000 fb02 	bl	80046e4 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d046      	beq.n	8004174 <_ZN9AppParser9Processor13processorTaskEPv+0x1a4>
				if (isEq(SENSOR_CHAR, msg.buffer[2])) {
 80040e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040ea:	3302      	adds	r3, #2
 80040ec:	4619      	mov	r1, r3
 80040ee:	4875      	ldr	r0, [pc, #468]	; (80042c4 <_ZN9AppParser9Processor13processorTaskEPv+0x2f4>)
 80040f0:	f000 faf8 	bl	80046e4 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d005      	beq.n	8004106 <_ZN9AppParser9Processor13processorTaskEPv+0x136>
					returnSensorRequestCmd(msg.buffer[3]);
 80040fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 f90c 	bl	800431c <_ZN9AppParser9Processor22returnSensorRequestCmdEh>
 8004104:	e0c8      	b.n	8004298 <_ZN9AppParser9Processor13processorTaskEPv+0x2c8>
				} else if (isEq(AUX_CHAR, msg.buffer[2])) {
 8004106:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800410a:	3302      	adds	r3, #2
 800410c:	4619      	mov	r1, r3
 800410e:	486e      	ldr	r0, [pc, #440]	; (80042c8 <_ZN9AppParser9Processor13processorTaskEPv+0x2f8>)
 8004110:	f000 fae8 	bl	80046e4 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 80be 	beq.w	8004298 <_ZN9AppParser9Processor13processorTaskEPv+0x2c8>
					if (isEq(LAST_HALT_CHAR, msg.buffer[3])) {
 800411c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004120:	3303      	adds	r3, #3
 8004122:	4619      	mov	r1, r3
 8004124:	4869      	ldr	r0, [pc, #420]	; (80042cc <_ZN9AppParser9Processor13processorTaskEPv+0x2fc>)
 8004126:	f000 fadd 	bl	80046e4 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	f000 80b3 	beq.w	8004298 <_ZN9AppParser9Processor13processorTaskEPv+0x2c8>
						uint8_t tx_buf[25] = { 0 };
 8004132:	2300      	movs	r3, #0
 8004134:	60bb      	str	r3, [r7, #8]
 8004136:	f107 030c 	add.w	r3, r7, #12
 800413a:	2200      	movs	r2, #0
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	605a      	str	r2, [r3, #4]
 8004140:	609a      	str	r2, [r3, #8]
 8004142:	60da      	str	r2, [r3, #12]
 8004144:	611a      	str	r2, [r3, #16]
 8004146:	751a      	strb	r2, [r3, #20]
						snprintf((char*) &tx_buf, sizeof(tx_buf), "%ld",
 8004148:	4b59      	ldr	r3, [pc, #356]	; (80042b0 <_ZN9AppParser9Processor13processorTaskEPv+0x2e0>)
 800414a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800414c:	f107 0008 	add.w	r0, r7, #8
 8004150:	4a5f      	ldr	r2, [pc, #380]	; (80042d0 <_ZN9AppParser9Processor13processorTaskEPv+0x300>)
 8004152:	2119      	movs	r1, #25
 8004154:	f00c ff94 	bl	8011080 <sniprintf>
										sensor_data.last_halt_val);
								HAL_UART_Transmit(&huart3, (BUF_CMP_t*) tx_buf, strlen((char*) tx_buf),
 8004158:	f107 0308 	add.w	r3, r7, #8
 800415c:	4618      	mov	r0, r3
 800415e:	f7fc f837 	bl	80001d0 <strlen>
 8004162:	4603      	mov	r3, r0
 8004164:	b29a      	uxth	r2, r3
 8004166:	f107 0108 	add.w	r1, r7, #8
 800416a:	230a      	movs	r3, #10
 800416c:	484e      	ldr	r0, [pc, #312]	; (80042a8 <_ZN9AppParser9Processor13processorTaskEPv+0x2d8>)
 800416e:	f006 f9f5 	bl	800a55c <HAL_UART_Transmit>
 8004172:	e091      	b.n	8004298 <_ZN9AppParser9Processor13processorTaskEPv+0x2c8>
										10);
					}
				}

			} else if (isEq<BUF_CMP_t>(CMD_CHAR, msg.buffer[1])) {
 8004174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004178:	3301      	adds	r3, #1
 800417a:	4619      	mov	r1, r3
 800417c:	4855      	ldr	r0, [pc, #340]	; (80042d4 <_ZN9AppParser9Processor13processorTaskEPv+0x304>)
 800417e:	f000 fab1 	bl	80046e4 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d07f      	beq.n	8004288 <_ZN9AppParser9Processor13processorTaskEPv+0x2b8>
				// do command stuff

				switch (msg.buffer[2]) {
 8004188:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800418c:	2b6d      	cmp	r3, #109	; 0x6d
 800418e:	d002      	beq.n	8004196 <_ZN9AppParser9Processor13processorTaskEPv+0x1c6>
 8004190:	2b73      	cmp	r3, #115	; 0x73
 8004192:	d036      	beq.n	8004202 <_ZN9AppParser9Processor13processorTaskEPv+0x232>
 8004194:	e080      	b.n	8004298 <_ZN9AppParser9Processor13processorTaskEPv+0x2c8>
				case MOTOR_CHAR: {
					if (isEq(HALT_CHAR, msg.buffer[3])) {
 8004196:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800419a:	3303      	adds	r3, #3
 800419c:	4619      	mov	r1, r3
 800419e:	484e      	ldr	r0, [pc, #312]	; (80042d8 <_ZN9AppParser9Processor13processorTaskEPv+0x308>)
 80041a0:	f000 faa0 	bl	80046e4 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00d      	beq.n	80041c6 <_ZN9AppParser9Processor13processorTaskEPv+0x1f6>
						_ext_sig_halt();
 80041aa:	f7fe f96b 	bl	8002484 <_ext_sig_halt>
						osMessageQueueReset(rx_ctx->mailbox.queue); // remove all movement from queue such that it works async
 80041ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b2:	4618      	mov	r0, r3
 80041b4:	f007 ff22 	bl	800bffc <osMessageQueueReset>
						HAL_UART_Transmit(&huart3, (BUF_CMP_t*) ack,
 80041b8:	230a      	movs	r3, #10
 80041ba:	2204      	movs	r2, #4
 80041bc:	4947      	ldr	r1, [pc, #284]	; (80042dc <_ZN9AppParser9Processor13processorTaskEPv+0x30c>)
 80041be:	483a      	ldr	r0, [pc, #232]	; (80042a8 <_ZN9AppParser9Processor13processorTaskEPv+0x2d8>)
 80041c0:	f006 f9cc 	bl	800a55c <HAL_UART_Transmit>
														sizeof(ack), 10);
						break;
 80041c4:	e068      	b.n	8004298 <_ZN9AppParser9Processor13processorTaskEPv+0x2c8>
					}
					MOTION_PKT_t *pkt = getMotionCmdFromBytes(
 80041c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 f9ce 	bl	800456c <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh>
 80041d0:	6378      	str	r0, [r7, #52]	; 0x34
							(uint8_t*) &msg.buffer);
					if (pkt == NULL) {
 80041d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d106      	bne.n	80041e6 <_ZN9AppParser9Processor13processorTaskEPv+0x216>
						HAL_UART_Transmit(&huart3, (BUF_CMP_t*) nack,
 80041d8:	230a      	movs	r3, #10
 80041da:	2204      	movs	r2, #4
 80041dc:	4936      	ldr	r1, [pc, #216]	; (80042b8 <_ZN9AppParser9Processor13processorTaskEPv+0x2e8>)
 80041de:	4832      	ldr	r0, [pc, #200]	; (80042a8 <_ZN9AppParser9Processor13processorTaskEPv+0x2d8>)
 80041e0:	f006 f9bc 	bl	800a55c <HAL_UART_Transmit>
								sizeof(nack), 10);
						break;
 80041e4:	e058      	b.n	8004298 <_ZN9AppParser9Processor13processorTaskEPv+0x2c8>
					}

					osMessageQueuePut(tx_ctx->mailbox.queue, pkt, 0, 0);
 80041e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041e8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80041ea:	2300      	movs	r3, #0
 80041ec:	2200      	movs	r2, #0
 80041ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80041f0:	f007 fe26 	bl	800be40 <osMessageQueuePut>
					HAL_UART_Transmit(&huart3, (BUF_CMP_t*) ack, sizeof(ack),
 80041f4:	230a      	movs	r3, #10
 80041f6:	2204      	movs	r2, #4
 80041f8:	4938      	ldr	r1, [pc, #224]	; (80042dc <_ZN9AppParser9Processor13processorTaskEPv+0x30c>)
 80041fa:	482b      	ldr	r0, [pc, #172]	; (80042a8 <_ZN9AppParser9Processor13processorTaskEPv+0x2d8>)
 80041fc:	f006 f9ae 	bl	800a55c <HAL_UART_Transmit>
							10);
					break;
 8004200:	e04a      	b.n	8004298 <_ZN9AppParser9Processor13processorTaskEPv+0x2c8>
				}
				case SENSOR_CHAR: {
					uint32_t val = strtol((const char*) &msg.buffer[4], NULL,
 8004202:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004206:	3304      	adds	r3, #4
 8004208:	220a      	movs	r2, #10
 800420a:	2100      	movs	r1, #0
 800420c:	4618      	mov	r0, r3
 800420e:	f00d f851 	bl	80112b4 <strtol>
 8004212:	4603      	mov	r3, r0
							10);
 8004214:	63bb      	str	r3, [r7, #56]	; 0x38
					if (val == 0)
 8004216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004218:	2b00      	cmp	r3, #0
 800421a:	d03c      	beq.n	8004296 <_ZN9AppParser9Processor13processorTaskEPv+0x2c6>
						break;

					switch (msg.buffer[3]) {
 800421c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004220:	2b65      	cmp	r3, #101	; 0x65
 8004222:	d019      	beq.n	8004258 <_ZN9AppParser9Processor13processorTaskEPv+0x288>
 8004224:	2b77      	cmp	r3, #119	; 0x77
 8004226:	d137      	bne.n	8004298 <_ZN9AppParser9Processor13processorTaskEPv+0x2c8>

					case IR_L_CHAR: {
						sensor_data.ir_dist_th_L = (float) val;
 8004228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800422a:	ee07 3a90 	vmov	s15, r3
 800422e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004232:	4b1f      	ldr	r3, [pc, #124]	; (80042b0 <_ZN9AppParser9Processor13processorTaskEPv+0x2e0>)
 8004234:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
						if (val == 999)
 8004238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800423a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800423e:	4293      	cmp	r3, r2
 8004240:	d103      	bne.n	800424a <_ZN9AppParser9Processor13processorTaskEPv+0x27a>
							sensor_data.ir_dist_th_L = 0;
 8004242:	4b1b      	ldr	r3, [pc, #108]	; (80042b0 <_ZN9AppParser9Processor13processorTaskEPv+0x2e0>)
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	62da      	str	r2, [r3, #44]	; 0x2c
						HAL_UART_Transmit(&huart3, (BUF_CMP_t*) ack,
 800424a:	230a      	movs	r3, #10
 800424c:	2204      	movs	r2, #4
 800424e:	4923      	ldr	r1, [pc, #140]	; (80042dc <_ZN9AppParser9Processor13processorTaskEPv+0x30c>)
 8004250:	4815      	ldr	r0, [pc, #84]	; (80042a8 <_ZN9AppParser9Processor13processorTaskEPv+0x2d8>)
 8004252:	f006 f983 	bl	800a55c <HAL_UART_Transmit>
								sizeof(ack), 10);
						break;
 8004256:	e01f      	b.n	8004298 <_ZN9AppParser9Processor13processorTaskEPv+0x2c8>
					}
					case IR_R_CHAR: {
						sensor_data.ir_dist_th_R = (float) val;
 8004258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800425a:	ee07 3a90 	vmov	s15, r3
 800425e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004262:	4b13      	ldr	r3, [pc, #76]	; (80042b0 <_ZN9AppParser9Processor13processorTaskEPv+0x2e0>)
 8004264:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
						if (val == 999)
 8004268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800426e:	4293      	cmp	r3, r2
 8004270:	d103      	bne.n	800427a <_ZN9AppParser9Processor13processorTaskEPv+0x2aa>
							sensor_data.ir_dist_th_R = 0;
 8004272:	4b0f      	ldr	r3, [pc, #60]	; (80042b0 <_ZN9AppParser9Processor13processorTaskEPv+0x2e0>)
 8004274:	f04f 0200 	mov.w	r2, #0
 8004278:	631a      	str	r2, [r3, #48]	; 0x30
						HAL_UART_Transmit(&huart3, (BUF_CMP_t*) ack,
 800427a:	230a      	movs	r3, #10
 800427c:	2204      	movs	r2, #4
 800427e:	4917      	ldr	r1, [pc, #92]	; (80042dc <_ZN9AppParser9Processor13processorTaskEPv+0x30c>)
 8004280:	4809      	ldr	r0, [pc, #36]	; (80042a8 <_ZN9AppParser9Processor13processorTaskEPv+0x2d8>)
 8004282:	f006 f96b 	bl	800a55c <HAL_UART_Transmit>
								sizeof(ack), 10);
						break;
 8004286:	e007      	b.n	8004298 <_ZN9AppParser9Processor13processorTaskEPv+0x2c8>
				default: {
					// something went wrong..
				}
				}
			} else {
				HAL_UART_Transmit(&huart3, (BUF_CMP_t*) nack, sizeof(nack), 10);
 8004288:	230a      	movs	r3, #10
 800428a:	2204      	movs	r2, #4
 800428c:	490a      	ldr	r1, [pc, #40]	; (80042b8 <_ZN9AppParser9Processor13processorTaskEPv+0x2e8>)
 800428e:	4806      	ldr	r0, [pc, #24]	; (80042a8 <_ZN9AppParser9Processor13processorTaskEPv+0x2d8>)
 8004290:	f006 f964 	bl	800a55c <HAL_UART_Transmit>
 8004294:	e000      	b.n	8004298 <_ZN9AppParser9Processor13processorTaskEPv+0x2c8>
						break;
 8004296:	bf00      	nop
			}

			HAL_UART_Receive_DMA(&huart3, (BUF_CMP_t*) uartRxBuf, 10); // re-enable DMA buf for rx
 8004298:	220a      	movs	r2, #10
 800429a:	4902      	ldr	r1, [pc, #8]	; (80042a4 <_ZN9AppParser9Processor13processorTaskEPv+0x2d4>)
 800429c:	4802      	ldr	r0, [pc, #8]	; (80042a8 <_ZN9AppParser9Processor13processorTaskEPv+0x2d8>)
 800429e:	f006 f9ef 	bl	800a680 <HAL_UART_Receive_DMA>
 80042a2:	e6a6      	b.n	8003ff2 <_ZN9AppParser9Processor13processorTaskEPv+0x22>
 80042a4:	20000874 	.word	0x20000874
 80042a8:	20000aec 	.word	0x20000aec
 80042ac:	20000694 	.word	0x20000694
 80042b0:	2000065c 	.word	0x2000065c
 80042b4:	08013f28 	.word	0x08013f28
 80042b8:	08013418 	.word	0x08013418
 80042bc:	08013f32 	.word	0x08013f32
 80042c0:	08013f2a 	.word	0x08013f2a
 80042c4:	08013f2b 	.word	0x08013f2b
 80042c8:	08013f2c 	.word	0x08013f2c
 80042cc:	08013f31 	.word	0x08013f31
 80042d0:	08013428 	.word	0x08013428
 80042d4:	08013f29 	.word	0x08013f29
 80042d8:	08013f2e 	.word	0x08013f2e
 80042dc:	08013414 	.word	0x08013414
		} else if (_signal_obstr) // specifically lower priority than RX
 80042e0:	4b0a      	ldr	r3, [pc, #40]	; (800430c <_ZN9AppParser9Processor13processorTaskEPv+0x33c>)
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f43f ae84 	beq.w	8003ff2 <_ZN9AppParser9Processor13processorTaskEPv+0x22>
		{
			if (!_obstr_txed)
 80042ea:	4b09      	ldr	r3, [pc, #36]	; (8004310 <_ZN9AppParser9Processor13processorTaskEPv+0x340>)
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	f083 0301 	eor.w	r3, r3, #1
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d005      	beq.n	8004304 <_ZN9AppParser9Processor13processorTaskEPv+0x334>
				HAL_UART_Transmit(&huart3, (BUF_CMP_t*) obstr, sizeof(obstr),
 80042f8:	230a      	movs	r3, #10
 80042fa:	2204      	movs	r2, #4
 80042fc:	4905      	ldr	r1, [pc, #20]	; (8004314 <_ZN9AppParser9Processor13processorTaskEPv+0x344>)
 80042fe:	4806      	ldr	r0, [pc, #24]	; (8004318 <_ZN9AppParser9Processor13processorTaskEPv+0x348>)
 8004300:	f006 f92c 	bl	800a55c <HAL_UART_Transmit>
						10);
			_obstr_txed = true;
 8004304:	4b02      	ldr	r3, [pc, #8]	; (8004310 <_ZN9AppParser9Processor13processorTaskEPv+0x340>)
 8004306:	2201      	movs	r2, #1
 8004308:	701a      	strb	r2, [r3, #0]
		}

	}
 800430a:	e672      	b.n	8003ff2 <_ZN9AppParser9Processor13processorTaskEPv+0x22>
 800430c:	20000870 	.word	0x20000870
 8004310:	20000871 	.word	0x20000871
 8004314:	08013420 	.word	0x08013420
 8004318:	20000aec 	.word	0x20000aec

0800431c <_ZN9AppParser9Processor22returnSensorRequestCmdEh>:

}

void Processor::returnSensorRequestCmd(BUF_CMP_t id) {
 800431c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004320:	b092      	sub	sp, #72	; 0x48
 8004322:	af08      	add	r7, sp, #32
 8004324:	4603      	mov	r3, r0
 8004326:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buf[25] = { 0 };
 8004328:	2300      	movs	r3, #0
 800432a:	60fb      	str	r3, [r7, #12]
 800432c:	f107 0310 	add.w	r3, r7, #16
 8004330:	2200      	movs	r2, #0
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	605a      	str	r2, [r3, #4]
 8004336:	609a      	str	r2, [r3, #8]
 8004338:	60da      	str	r2, [r3, #12]
 800433a:	611a      	str	r2, [r3, #16]
 800433c:	751a      	strb	r2, [r3, #20]

	switch (id) {
 800433e:	79fb      	ldrb	r3, [r7, #7]
 8004340:	3b65      	subs	r3, #101	; 0x65
 8004342:	2b14      	cmp	r3, #20
 8004344:	f200 80fc 	bhi.w	8004540 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x224>
 8004348:	a201      	add	r2, pc, #4	; (adr r2, 8004350 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x34>)
 800434a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434e:	bf00      	nop
 8004350:	080043df 	.word	0x080043df
 8004354:	08004541 	.word	0x08004541
 8004358:	08004453 	.word	0x08004453
 800435c:	08004541 	.word	0x08004541
 8004360:	08004541 	.word	0x08004541
 8004364:	08004541 	.word	0x08004541
 8004368:	080044c9 	.word	0x080044c9
 800436c:	08004541 	.word	0x08004541
 8004370:	08004541 	.word	0x08004541
 8004374:	08004541 	.word	0x08004541
 8004378:	08004541 	.word	0x08004541
 800437c:	08004541 	.word	0x08004541
 8004380:	08004541 	.word	0x08004541
 8004384:	08004541 	.word	0x08004541
 8004388:	08004541 	.word	0x08004541
 800438c:	08004541 	.word	0x08004541
 8004390:	08004419 	.word	0x08004419
 8004394:	08004541 	.word	0x08004541
 8004398:	080043a5 	.word	0x080043a5
 800439c:	08004541 	.word	0x08004541
 80043a0:	0800448f 	.word	0x0800448f
	case IR_L_CHAR: {
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f",
				sensor_data.ir_distL);
 80043a4:	4b6c      	ldr	r3, [pc, #432]	; (8004558 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x23c>)
 80043a6:	685b      	ldr	r3, [r3, #4]
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f",
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7fc f8cd 	bl	8000548 <__aeabi_f2d>
 80043ae:	4602      	mov	r2, r0
 80043b0:	460b      	mov	r3, r1
 80043b2:	f107 000c 	add.w	r0, r7, #12
 80043b6:	e9cd 2300 	strd	r2, r3, [sp]
 80043ba:	4a68      	ldr	r2, [pc, #416]	; (800455c <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x240>)
 80043bc:	2119      	movs	r1, #25
 80043be:	f00c fe5f 	bl	8011080 <sniprintf>
		HAL_UART_Transmit(&huart3, (BUF_CMP_t*) tx_buf, strlen((char*) tx_buf),
 80043c2:	f107 030c 	add.w	r3, r7, #12
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7fb ff02 	bl	80001d0 <strlen>
 80043cc:	4603      	mov	r3, r0
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	f107 010c 	add.w	r1, r7, #12
 80043d4:	230a      	movs	r3, #10
 80043d6:	4862      	ldr	r0, [pc, #392]	; (8004560 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x244>)
 80043d8:	f006 f8c0 	bl	800a55c <HAL_UART_Transmit>
				10);
		break;
 80043dc:	e0b7      	b.n	800454e <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x232>
	}
	case IR_R_CHAR: {
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f",
				sensor_data.ir_distR);
 80043de:	4b5e      	ldr	r3, [pc, #376]	; (8004558 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x23c>)
 80043e0:	689b      	ldr	r3, [r3, #8]
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f",
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7fc f8b0 	bl	8000548 <__aeabi_f2d>
 80043e8:	4602      	mov	r2, r0
 80043ea:	460b      	mov	r3, r1
 80043ec:	f107 000c 	add.w	r0, r7, #12
 80043f0:	e9cd 2300 	strd	r2, r3, [sp]
 80043f4:	4a59      	ldr	r2, [pc, #356]	; (800455c <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x240>)
 80043f6:	2119      	movs	r1, #25
 80043f8:	f00c fe42 	bl	8011080 <sniprintf>
		HAL_UART_Transmit(&huart3, (BUF_CMP_t*) tx_buf, strlen((char*) tx_buf),
 80043fc:	f107 030c 	add.w	r3, r7, #12
 8004400:	4618      	mov	r0, r3
 8004402:	f7fb fee5 	bl	80001d0 <strlen>
 8004406:	4603      	mov	r3, r0
 8004408:	b29a      	uxth	r2, r3
 800440a:	f107 010c 	add.w	r1, r7, #12
 800440e:	230a      	movs	r3, #10
 8004410:	4853      	ldr	r0, [pc, #332]	; (8004560 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x244>)
 8004412:	f006 f8a3 	bl	800a55c <HAL_UART_Transmit>
				10);
		break;
 8004416:	e09a      	b.n	800454e <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x232>
	}
	case USOUND_CHAR: {
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f",
				sensor_data.usonic_dist);
 8004418:	4b4f      	ldr	r3, [pc, #316]	; (8004558 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x23c>)
 800441a:	68db      	ldr	r3, [r3, #12]
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f",
 800441c:	4618      	mov	r0, r3
 800441e:	f7fc f893 	bl	8000548 <__aeabi_f2d>
 8004422:	4602      	mov	r2, r0
 8004424:	460b      	mov	r3, r1
 8004426:	f107 000c 	add.w	r0, r7, #12
 800442a:	e9cd 2300 	strd	r2, r3, [sp]
 800442e:	4a4b      	ldr	r2, [pc, #300]	; (800455c <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x240>)
 8004430:	2119      	movs	r1, #25
 8004432:	f00c fe25 	bl	8011080 <sniprintf>
		HAL_UART_Transmit(&huart3, (BUF_CMP_t*) tx_buf, strlen((char*) tx_buf),
 8004436:	f107 030c 	add.w	r3, r7, #12
 800443a:	4618      	mov	r0, r3
 800443c:	f7fb fec8 	bl	80001d0 <strlen>
 8004440:	4603      	mov	r3, r0
 8004442:	b29a      	uxth	r2, r3
 8004444:	f107 010c 	add.w	r1, r7, #12
 8004448:	230a      	movs	r3, #10
 800444a:	4845      	ldr	r0, [pc, #276]	; (8004560 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x244>)
 800444c:	f006 f886 	bl	800a55c <HAL_UART_Transmit>
				10);
		break;
 8004450:	e07d      	b.n	800454e <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x232>
	}
	case GY_Z_CHAR: {
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f",
				sensor_data.imu->gyro[2]);
 8004452:	4b41      	ldr	r3, [pc, #260]	; (8004558 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x23c>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	699b      	ldr	r3, [r3, #24]
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f",
 8004458:	4618      	mov	r0, r3
 800445a:	f7fc f875 	bl	8000548 <__aeabi_f2d>
 800445e:	4602      	mov	r2, r0
 8004460:	460b      	mov	r3, r1
 8004462:	f107 000c 	add.w	r0, r7, #12
 8004466:	e9cd 2300 	strd	r2, r3, [sp]
 800446a:	4a3c      	ldr	r2, [pc, #240]	; (800455c <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x240>)
 800446c:	2119      	movs	r1, #25
 800446e:	f00c fe07 	bl	8011080 <sniprintf>
		HAL_UART_Transmit(&huart3, (BUF_CMP_t*) tx_buf, strlen((char*) tx_buf),
 8004472:	f107 030c 	add.w	r3, r7, #12
 8004476:	4618      	mov	r0, r3
 8004478:	f7fb feaa 	bl	80001d0 <strlen>
 800447c:	4603      	mov	r3, r0
 800447e:	b29a      	uxth	r2, r3
 8004480:	f107 010c 	add.w	r1, r7, #12
 8004484:	230a      	movs	r3, #10
 8004486:	4836      	ldr	r0, [pc, #216]	; (8004560 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x244>)
 8004488:	f006 f868 	bl	800a55c <HAL_UART_Transmit>
				10);
		break;
 800448c:	e05f      	b.n	800454e <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x232>
	}
	case QTRN_YAW_CHAR: {
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f", sensor_data.yaw_abs);
 800448e:	4b32      	ldr	r3, [pc, #200]	; (8004558 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x23c>)
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	4618      	mov	r0, r3
 8004494:	f7fc f858 	bl	8000548 <__aeabi_f2d>
 8004498:	4602      	mov	r2, r0
 800449a:	460b      	mov	r3, r1
 800449c:	f107 000c 	add.w	r0, r7, #12
 80044a0:	e9cd 2300 	strd	r2, r3, [sp]
 80044a4:	4a2d      	ldr	r2, [pc, #180]	; (800455c <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x240>)
 80044a6:	2119      	movs	r1, #25
 80044a8:	f00c fdea 	bl	8011080 <sniprintf>
		HAL_UART_Transmit(&huart3, (BUF_CMP_t*) tx_buf, strlen((char*) tx_buf),
 80044ac:	f107 030c 	add.w	r3, r7, #12
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7fb fe8d 	bl	80001d0 <strlen>
 80044b6:	4603      	mov	r3, r0
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	f107 010c 	add.w	r1, r7, #12
 80044be:	230a      	movs	r3, #10
 80044c0:	4827      	ldr	r0, [pc, #156]	; (8004560 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x244>)
 80044c2:	f006 f84b 	bl	800a55c <HAL_UART_Transmit>
				10);
		break;
 80044c6:	e042      	b.n	800454e <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x232>
	}
	case QTRN_ALL_CHAR: {
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.1f;%4.1f;%4.1f;%4.1f",
				sensor_data.imu->q[0], sensor_data.imu->q[1],
 80044c8:	4b23      	ldr	r3, [pc, #140]	; (8004558 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x23c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.1f;%4.1f;%4.1f;%4.1f",
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fc f83a 	bl	8000548 <__aeabi_f2d>
 80044d4:	4604      	mov	r4, r0
 80044d6:	460d      	mov	r5, r1
				sensor_data.imu->q[0], sensor_data.imu->q[1],
 80044d8:	4b1f      	ldr	r3, [pc, #124]	; (8004558 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x23c>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.1f;%4.1f;%4.1f;%4.1f",
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fc f832 	bl	8000548 <__aeabi_f2d>
 80044e4:	4680      	mov	r8, r0
 80044e6:	4689      	mov	r9, r1
				sensor_data.imu->q[2], sensor_data.imu->q[3]);
 80044e8:	4b1b      	ldr	r3, [pc, #108]	; (8004558 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x23c>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.1f;%4.1f;%4.1f;%4.1f",
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7fc f82a 	bl	8000548 <__aeabi_f2d>
 80044f4:	4682      	mov	sl, r0
 80044f6:	468b      	mov	fp, r1
				sensor_data.imu->q[2], sensor_data.imu->q[3]);
 80044f8:	4b17      	ldr	r3, [pc, #92]	; (8004558 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x23c>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.1f;%4.1f;%4.1f;%4.1f",
 80044fe:	4618      	mov	r0, r3
 8004500:	f7fc f822 	bl	8000548 <__aeabi_f2d>
 8004504:	4602      	mov	r2, r0
 8004506:	460b      	mov	r3, r1
 8004508:	f107 000c 	add.w	r0, r7, #12
 800450c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004510:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8004514:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004518:	e9cd 4500 	strd	r4, r5, [sp]
 800451c:	4a11      	ldr	r2, [pc, #68]	; (8004564 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x248>)
 800451e:	2119      	movs	r1, #25
 8004520:	f00c fdae 	bl	8011080 <sniprintf>
		HAL_UART_Transmit(&huart3, (BUF_CMP_t*) tx_buf, strlen((char*) tx_buf),
 8004524:	f107 030c 	add.w	r3, r7, #12
 8004528:	4618      	mov	r0, r3
 800452a:	f7fb fe51 	bl	80001d0 <strlen>
 800452e:	4603      	mov	r3, r0
 8004530:	b29a      	uxth	r2, r3
 8004532:	f107 010c 	add.w	r1, r7, #12
 8004536:	230a      	movs	r3, #10
 8004538:	4809      	ldr	r0, [pc, #36]	; (8004560 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x244>)
 800453a:	f006 f80f 	bl	800a55c <HAL_UART_Transmit>
				10);
		break;
 800453e:	e006      	b.n	800454e <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x232>
	}
	default: {
		HAL_UART_Transmit(&huart3, (BUF_CMP_t*) nack, sizeof(nack), 10);
 8004540:	230a      	movs	r3, #10
 8004542:	2204      	movs	r2, #4
 8004544:	4908      	ldr	r1, [pc, #32]	; (8004568 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x24c>)
 8004546:	4806      	ldr	r0, [pc, #24]	; (8004560 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x244>)
 8004548:	f006 f808 	bl	800a55c <HAL_UART_Transmit>
	}
	}
}
 800454c:	bf00      	nop
 800454e:	bf00      	nop
 8004550:	3728      	adds	r7, #40	; 0x28
 8004552:	46bd      	mov	sp, r7
 8004554:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004558:	2000065c 	.word	0x2000065c
 800455c:	0801342c 	.word	0x0801342c
 8004560:	20000aec 	.word	0x20000aec
 8004564:	08013434 	.word	0x08013434
 8004568:	08013418 	.word	0x08013418

0800456c <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh>:

MOTION_PKT_t* Processor::getMotionCmdFromBytes(BUF_CMP_t *bytes) {
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]

	uint32_t val = strtol((const char*) &bytes[4], NULL, 10);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	3304      	adds	r3, #4
 8004578:	220a      	movs	r2, #10
 800457a:	2100      	movs	r1, #0
 800457c:	4618      	mov	r0, r3
 800457e:	f00c fe99 	bl	80112b4 <strtol>
 8004582:	4603      	mov	r3, r0
 8004584:	60fb      	str	r3, [r7, #12]
	if (val == 0)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d101      	bne.n	8004590 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x24>
		return NULL; // invalid input or no action
 800458c:	2300      	movs	r3, #0
 800458e:	e09e      	b.n	80046ce <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x162>
	MOTION_PKT_t *pkt = new MOTION_PKT_t();
 8004590:	200c      	movs	r0, #12
 8004592:	f00a fa53 	bl	800ea3c <_Znwj>
 8004596:	4603      	mov	r3, r0
 8004598:	4619      	mov	r1, r3
 800459a:	460a      	mov	r2, r1
 800459c:	2300      	movs	r3, #0
 800459e:	6013      	str	r3, [r2, #0]
 80045a0:	6053      	str	r3, [r2, #4]
 80045a2:	6093      	str	r3, [r2, #8]
 80045a4:	60b9      	str	r1, [r7, #8]
	pkt->arg = val;
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	605a      	str	r2, [r3, #4]

	switch (bytes[3]) {
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	3303      	adds	r3, #3
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	3b62      	subs	r3, #98	; 0x62
 80045b4:	2b10      	cmp	r3, #16
 80045b6:	f200 8087 	bhi.w	80046c8 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x15c>
 80045ba:	a201      	add	r2, pc, #4	; (adr r2, 80045c0 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x54>)
 80045bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c0:	08004635 	.word	0x08004635
 80045c4:	080046c9 	.word	0x080046c9
 80045c8:	080046c9 	.word	0x080046c9
 80045cc:	080046c9 	.word	0x080046c9
 80045d0:	08004605 	.word	0x08004605
 80045d4:	080046c9 	.word	0x080046c9
 80045d8:	080046c9 	.word	0x080046c9
 80045dc:	080046c9 	.word	0x080046c9
 80045e0:	080046c9 	.word	0x080046c9
 80045e4:	080046c9 	.word	0x080046c9
 80045e8:	08004665 	.word	0x08004665
 80045ec:	080046c9 	.word	0x080046c9
 80045f0:	080046c9 	.word	0x080046c9
 80045f4:	080046c9 	.word	0x080046c9
 80045f8:	080046c9 	.word	0x080046c9
 80045fc:	080046c9 	.word	0x080046c9
 8004600:	08004697 	.word	0x08004697
	case FWD_CHAR: {
		pkt->cmd = MOVE_FWD;
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2200      	movs	r2, #0
 8004608:	601a      	str	r2, [r3, #0]
		pkt->is_crawl =(bool) (isEq<BUF_CMP_t>(CRAWL_CHAR, bytes[7]));
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	3307      	adds	r3, #7
 800460e:	4619      	mov	r1, r3
 8004610:	4831      	ldr	r0, [pc, #196]	; (80046d8 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x16c>)
 8004612:	f000 f867 	bl	80046e4 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8004616:	4603      	mov	r3, r0
 8004618:	461a      	mov	r2, r3
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	729a      	strb	r2, [r3, #10]
		pkt->linear =(bool) (isEq<BUF_CMP_t>(LINEAR_CHAR, bytes[8]));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	3308      	adds	r3, #8
 8004622:	4619      	mov	r1, r3
 8004624:	482d      	ldr	r0, [pc, #180]	; (80046dc <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x170>)
 8004626:	f000 f85d 	bl	80046e4 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 800462a:	4603      	mov	r3, r0
 800462c:	461a      	mov	r2, r3
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	72da      	strb	r2, [r3, #11]
		break;
 8004632:	e04b      	b.n	80046cc <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x160>
	}
	case BWD_CHAR: {
		pkt->cmd = MOVE_BWD;
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	2201      	movs	r2, #1
 8004638:	601a      	str	r2, [r3, #0]
		pkt->is_crawl =(bool) (isEq<BUF_CMP_t>(CRAWL_CHAR, bytes[7]));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	3307      	adds	r3, #7
 800463e:	4619      	mov	r1, r3
 8004640:	4825      	ldr	r0, [pc, #148]	; (80046d8 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x16c>)
 8004642:	f000 f84f 	bl	80046e4 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8004646:	4603      	mov	r3, r0
 8004648:	461a      	mov	r2, r3
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	729a      	strb	r2, [r3, #10]
		pkt->linear =(bool) (isEq<BUF_CMP_t>(LINEAR_CHAR, bytes[8]));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	3308      	adds	r3, #8
 8004652:	4619      	mov	r1, r3
 8004654:	4821      	ldr	r0, [pc, #132]	; (80046dc <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x170>)
 8004656:	f000 f845 	bl	80046e4 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 800465a:	4603      	mov	r3, r0
 800465c:	461a      	mov	r2, r3
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	72da      	strb	r2, [r3, #11]
		break;
 8004662:	e033      	b.n	80046cc <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x160>
	}
	case LEFT_CHAR: {
		pkt->cmd =
				(bool) (isEq<BUF_CMP_t>(BWD_CHAR, bytes[7])) ?
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3307      	adds	r3, #7
 8004668:	4619      	mov	r1, r3
 800466a:	481d      	ldr	r0, [pc, #116]	; (80046e0 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x174>)
 800466c:	f000 f83a 	bl	80046e4 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x10e>
 8004676:	2205      	movs	r2, #5
 8004678:	e000      	b.n	800467c <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x110>
 800467a:	2203      	movs	r2, #3
		pkt->cmd =
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	601a      	str	r2, [r3, #0]
						MOVE_LEFT_BWD : MOVE_LEFT_FWD;
		pkt->linear =(bool) (isEq<BUF_CMP_t>(LINEAR_CHAR, bytes[8]));
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	3308      	adds	r3, #8
 8004684:	4619      	mov	r1, r3
 8004686:	4815      	ldr	r0, [pc, #84]	; (80046dc <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x170>)
 8004688:	f000 f82c 	bl	80046e4 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 800468c:	4603      	mov	r3, r0
 800468e:	461a      	mov	r2, r3
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	72da      	strb	r2, [r3, #11]
		break;
 8004694:	e01a      	b.n	80046cc <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x160>
	}
	case RIGHT_CHAR: {
		pkt->cmd =
				(bool) (isEq<BUF_CMP_t>(BWD_CHAR, bytes[7])) ?
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	3307      	adds	r3, #7
 800469a:	4619      	mov	r1, r3
 800469c:	4810      	ldr	r0, [pc, #64]	; (80046e0 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x174>)
 800469e:	f000 f821 	bl	80046e4 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d001      	beq.n	80046ac <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x140>
 80046a8:	2204      	movs	r2, #4
 80046aa:	e000      	b.n	80046ae <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x142>
 80046ac:	2202      	movs	r2, #2
		pkt->cmd =
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	601a      	str	r2, [r3, #0]
						MOVE_RIGHT_BWD : MOVE_RIGHT_FWD;
		pkt->linear =(bool) (isEq<BUF_CMP_t>(LINEAR_CHAR, bytes[8]));
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	3308      	adds	r3, #8
 80046b6:	4619      	mov	r1, r3
 80046b8:	4808      	ldr	r0, [pc, #32]	; (80046dc <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x170>)
 80046ba:	f000 f813 	bl	80046e4 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 80046be:	4603      	mov	r3, r0
 80046c0:	461a      	mov	r2, r3
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	72da      	strb	r2, [r3, #11]
		break;
 80046c6:	e001      	b.n	80046cc <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x160>

	}

	default:
		// something went wrong..
		return NULL;
 80046c8:	2300      	movs	r3, #0
 80046ca:	e000      	b.n	80046ce <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x162>
	}

	return pkt;
 80046cc:	68bb      	ldr	r3, [r7, #8]

}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	08013f2f 	.word	0x08013f2f
 80046dc:	08013f30 	.word	0x08013f30
 80046e0:	08013f2d 	.word	0x08013f2d

080046e4 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>:
	static bool isEq(const T &a, const T &b)
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
		return a == b;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	781a      	ldrb	r2, [r3, #0]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	bf0c      	ite	eq
 80046fa:	2301      	moveq	r3, #1
 80046fc:	2300      	movne	r3, #0
 80046fe:	b2db      	uxtb	r3, r3
	}
 8004700:	4618      	mov	r0, r3
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
PUTCHAR_PROTOTYPE {
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8004714:	1d39      	adds	r1, r7, #4
 8004716:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800471a:	2201      	movs	r2, #1
 800471c:	4803      	ldr	r0, [pc, #12]	; (800472c <__io_putchar+0x20>)
 800471e:	f005 ff1d 	bl	800a55c <HAL_UART_Transmit>

	return ch;
 8004722:	687b      	ldr	r3, [r7, #4]
}
 8004724:	4618      	mov	r0, r3
 8004726:	3708      	adds	r7, #8
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	20000aec 	.word	0x20000aec

08004730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004734:	f001 fbe4 	bl	8005f00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004738:	f000 f844 	bl	80047c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800473c:	f000 fbb6 	bl	8004eac <MX_GPIO_Init>
  MX_DMA_Init();
 8004740:	f000 fb8c 	bl	8004e5c <MX_DMA_Init>
  MX_TIM8_Init();
 8004744:	f000 fab6 	bl	8004cb4 <MX_TIM8_Init>
  MX_TIM1_Init();
 8004748:	f000 f96c 	bl	8004a24 <MX_TIM1_Init>
  MX_TIM2_Init();
 800474c:	f000 fa0a 	bl	8004b64 <MX_TIM2_Init>
  MX_TIM3_Init();
 8004750:	f000 fa5c 	bl	8004c0c <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8004754:	f000 fb58 	bl	8004e08 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8004758:	f000 f936 	bl	80049c8 <MX_I2C1_Init>
  MX_ADC1_Init();
 800475c:	f000 f890 	bl	8004880 <MX_ADC1_Init>
  MX_ADC2_Init();
 8004760:	f000 f8e0 	bl	8004924 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(Movement_Ind_Port, Movement_Ind_Pin, GPIO_PIN_RESET);
 8004764:	2200      	movs	r2, #0
 8004766:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800476a:	480f      	ldr	r0, [pc, #60]	; (80047a8 <main+0x78>)
 800476c:	f002 feae 	bl	80074cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Collision_Ind_Port, Collision_Ind_Pin, GPIO_PIN_RESET);
 8004770:	2200      	movs	r2, #0
 8004772:	2110      	movs	r1, #16
 8004774:	480d      	ldr	r0, [pc, #52]	; (80047ac <main+0x7c>)
 8004776:	f002 fea9 	bl	80074cc <HAL_GPIO_WritePin>


	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 800477a:	4a0d      	ldr	r2, [pc, #52]	; (80047b0 <main+0x80>)
 800477c:	2100      	movs	r1, #0
 800477e:	480d      	ldr	r0, [pc, #52]	; (80047b4 <main+0x84>)
 8004780:	f007 fa1c 	bl	800bbbc <osThreadNew>
 8004784:	4603      	mov	r3, r0
 8004786:	4a0c      	ldr	r2, [pc, #48]	; (80047b8 <main+0x88>)
 8004788:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	defaultTaskHandle = osThreadNew(sensorTask, NULL, &sensorTask_attr);
 800478a:	4a0c      	ldr	r2, [pc, #48]	; (80047bc <main+0x8c>)
 800478c:	2100      	movs	r1, #0
 800478e:	480c      	ldr	r0, [pc, #48]	; (80047c0 <main+0x90>)
 8004790:	f007 fa14 	bl	800bbbc <osThreadNew>
 8004794:	4603      	mov	r3, r0
 8004796:	4a08      	ldr	r2, [pc, #32]	; (80047b8 <main+0x88>)
 8004798:	6013      	str	r3, [r2, #0]
	initializeCPPconstructs();
 800479a:	f7fd fbe3 	bl	8001f64 <initializeCPPconstructs>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800479e:	f007 f9c3 	bl	800bb28 <osKernelInitialize>
/**
* @}
*/

  /* Start scheduler */
  osKernelStart();
 80047a2:	f007 f9e5 	bl	800bb70 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80047a6:	e7fe      	b.n	80047a6 <main+0x76>
 80047a8:	40021000 	.word	0x40021000
 80047ac:	40020c00 	.word	0x40020c00
 80047b0:	08013f34 	.word	0x08013f34
 80047b4:	08005045 	.word	0x08005045
 80047b8:	20000c20 	.word	0x20000c20
 80047bc:	08013f58 	.word	0x08013f58
 80047c0:	08002219 	.word	0x08002219

080047c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b094      	sub	sp, #80	; 0x50
 80047c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80047ca:	f107 0320 	add.w	r3, r7, #32
 80047ce:	2230      	movs	r2, #48	; 0x30
 80047d0:	2100      	movs	r1, #0
 80047d2:	4618      	mov	r0, r3
 80047d4:	f00b fda0 	bl	8010318 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80047d8:	f107 030c 	add.w	r3, r7, #12
 80047dc:	2200      	movs	r2, #0
 80047de:	601a      	str	r2, [r3, #0]
 80047e0:	605a      	str	r2, [r3, #4]
 80047e2:	609a      	str	r2, [r3, #8]
 80047e4:	60da      	str	r2, [r3, #12]
 80047e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80047e8:	2300      	movs	r3, #0
 80047ea:	60bb      	str	r3, [r7, #8]
 80047ec:	4b22      	ldr	r3, [pc, #136]	; (8004878 <SystemClock_Config+0xb4>)
 80047ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f0:	4a21      	ldr	r2, [pc, #132]	; (8004878 <SystemClock_Config+0xb4>)
 80047f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047f6:	6413      	str	r3, [r2, #64]	; 0x40
 80047f8:	4b1f      	ldr	r3, [pc, #124]	; (8004878 <SystemClock_Config+0xb4>)
 80047fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004800:	60bb      	str	r3, [r7, #8]
 8004802:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004804:	2300      	movs	r3, #0
 8004806:	607b      	str	r3, [r7, #4]
 8004808:	4b1c      	ldr	r3, [pc, #112]	; (800487c <SystemClock_Config+0xb8>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a1b      	ldr	r2, [pc, #108]	; (800487c <SystemClock_Config+0xb8>)
 800480e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004812:	6013      	str	r3, [r2, #0]
 8004814:	4b19      	ldr	r3, [pc, #100]	; (800487c <SystemClock_Config+0xb8>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800481c:	607b      	str	r3, [r7, #4]
 800481e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004820:	2302      	movs	r3, #2
 8004822:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004824:	2301      	movs	r3, #1
 8004826:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004828:	2310      	movs	r3, #16
 800482a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800482c:	2300      	movs	r3, #0
 800482e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004830:	f107 0320 	add.w	r3, r7, #32
 8004834:	4618      	mov	r0, r3
 8004836:	f003 ffab 	bl	8008790 <HAL_RCC_OscConfig>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d001      	beq.n	8004844 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8004840:	f000 fc1a 	bl	8005078 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004844:	230f      	movs	r3, #15
 8004846:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004848:	2300      	movs	r3, #0
 800484a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800484c:	2300      	movs	r3, #0
 800484e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004850:	2300      	movs	r3, #0
 8004852:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004854:	2300      	movs	r3, #0
 8004856:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004858:	f107 030c 	add.w	r3, r7, #12
 800485c:	2100      	movs	r1, #0
 800485e:	4618      	mov	r0, r3
 8004860:	f004 fa0e 	bl	8008c80 <HAL_RCC_ClockConfig>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800486a:	f000 fc05 	bl	8005078 <Error_Handler>
  }
}
 800486e:	bf00      	nop
 8004870:	3750      	adds	r7, #80	; 0x50
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	40023800 	.word	0x40023800
 800487c:	40007000 	.word	0x40007000

08004880 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004886:	463b      	mov	r3, r7
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	605a      	str	r2, [r3, #4]
 800488e:	609a      	str	r2, [r3, #8]
 8004890:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004892:	4b21      	ldr	r3, [pc, #132]	; (8004918 <MX_ADC1_Init+0x98>)
 8004894:	4a21      	ldr	r2, [pc, #132]	; (800491c <MX_ADC1_Init+0x9c>)
 8004896:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004898:	4b1f      	ldr	r3, [pc, #124]	; (8004918 <MX_ADC1_Init+0x98>)
 800489a:	2200      	movs	r2, #0
 800489c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800489e:	4b1e      	ldr	r3, [pc, #120]	; (8004918 <MX_ADC1_Init+0x98>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80048a4:	4b1c      	ldr	r3, [pc, #112]	; (8004918 <MX_ADC1_Init+0x98>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80048aa:	4b1b      	ldr	r3, [pc, #108]	; (8004918 <MX_ADC1_Init+0x98>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80048b0:	4b19      	ldr	r3, [pc, #100]	; (8004918 <MX_ADC1_Init+0x98>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80048b8:	4b17      	ldr	r3, [pc, #92]	; (8004918 <MX_ADC1_Init+0x98>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80048be:	4b16      	ldr	r3, [pc, #88]	; (8004918 <MX_ADC1_Init+0x98>)
 80048c0:	4a17      	ldr	r2, [pc, #92]	; (8004920 <MX_ADC1_Init+0xa0>)
 80048c2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80048c4:	4b14      	ldr	r3, [pc, #80]	; (8004918 <MX_ADC1_Init+0x98>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80048ca:	4b13      	ldr	r3, [pc, #76]	; (8004918 <MX_ADC1_Init+0x98>)
 80048cc:	2201      	movs	r2, #1
 80048ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80048d0:	4b11      	ldr	r3, [pc, #68]	; (8004918 <MX_ADC1_Init+0x98>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80048d8:	4b0f      	ldr	r3, [pc, #60]	; (8004918 <MX_ADC1_Init+0x98>)
 80048da:	2201      	movs	r2, #1
 80048dc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80048de:	480e      	ldr	r0, [pc, #56]	; (8004918 <MX_ADC1_Init+0x98>)
 80048e0:	f001 fb74 	bl	8005fcc <HAL_ADC_Init>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80048ea:	f000 fbc5 	bl	8005078 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80048ee:	230a      	movs	r3, #10
 80048f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80048f2:	2301      	movs	r3, #1
 80048f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80048f6:	2300      	movs	r3, #0
 80048f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80048fa:	463b      	mov	r3, r7
 80048fc:	4619      	mov	r1, r3
 80048fe:	4806      	ldr	r0, [pc, #24]	; (8004918 <MX_ADC1_Init+0x98>)
 8004900:	f001 fd46 	bl	8006390 <HAL_ADC_ConfigChannel>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d001      	beq.n	800490e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800490a:	f000 fbb5 	bl	8005078 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800490e:	bf00      	nop
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	200008e8 	.word	0x200008e8
 800491c:	40012000 	.word	0x40012000
 8004920:	0f000001 	.word	0x0f000001

08004924 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800492a:	463b      	mov	r3, r7
 800492c:	2200      	movs	r2, #0
 800492e:	601a      	str	r2, [r3, #0]
 8004930:	605a      	str	r2, [r3, #4]
 8004932:	609a      	str	r2, [r3, #8]
 8004934:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8004936:	4b21      	ldr	r3, [pc, #132]	; (80049bc <MX_ADC2_Init+0x98>)
 8004938:	4a21      	ldr	r2, [pc, #132]	; (80049c0 <MX_ADC2_Init+0x9c>)
 800493a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800493c:	4b1f      	ldr	r3, [pc, #124]	; (80049bc <MX_ADC2_Init+0x98>)
 800493e:	2200      	movs	r2, #0
 8004940:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004942:	4b1e      	ldr	r3, [pc, #120]	; (80049bc <MX_ADC2_Init+0x98>)
 8004944:	2200      	movs	r2, #0
 8004946:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8004948:	4b1c      	ldr	r3, [pc, #112]	; (80049bc <MX_ADC2_Init+0x98>)
 800494a:	2200      	movs	r2, #0
 800494c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800494e:	4b1b      	ldr	r3, [pc, #108]	; (80049bc <MX_ADC2_Init+0x98>)
 8004950:	2200      	movs	r2, #0
 8004952:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004954:	4b19      	ldr	r3, [pc, #100]	; (80049bc <MX_ADC2_Init+0x98>)
 8004956:	2200      	movs	r2, #0
 8004958:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800495c:	4b17      	ldr	r3, [pc, #92]	; (80049bc <MX_ADC2_Init+0x98>)
 800495e:	2200      	movs	r2, #0
 8004960:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004962:	4b16      	ldr	r3, [pc, #88]	; (80049bc <MX_ADC2_Init+0x98>)
 8004964:	4a17      	ldr	r2, [pc, #92]	; (80049c4 <MX_ADC2_Init+0xa0>)
 8004966:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004968:	4b14      	ldr	r3, [pc, #80]	; (80049bc <MX_ADC2_Init+0x98>)
 800496a:	2200      	movs	r2, #0
 800496c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800496e:	4b13      	ldr	r3, [pc, #76]	; (80049bc <MX_ADC2_Init+0x98>)
 8004970:	2201      	movs	r2, #1
 8004972:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8004974:	4b11      	ldr	r3, [pc, #68]	; (80049bc <MX_ADC2_Init+0x98>)
 8004976:	2200      	movs	r2, #0
 8004978:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800497c:	4b0f      	ldr	r3, [pc, #60]	; (80049bc <MX_ADC2_Init+0x98>)
 800497e:	2201      	movs	r2, #1
 8004980:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004982:	480e      	ldr	r0, [pc, #56]	; (80049bc <MX_ADC2_Init+0x98>)
 8004984:	f001 fb22 	bl	8005fcc <HAL_ADC_Init>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 800498e:	f000 fb73 	bl	8005078 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004992:	2300      	movs	r3, #0
 8004994:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004996:	2301      	movs	r3, #1
 8004998:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800499a:	2300      	movs	r3, #0
 800499c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800499e:	463b      	mov	r3, r7
 80049a0:	4619      	mov	r1, r3
 80049a2:	4806      	ldr	r0, [pc, #24]	; (80049bc <MX_ADC2_Init+0x98>)
 80049a4:	f001 fcf4 	bl	8006390 <HAL_ADC_ConfigChannel>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80049ae:	f000 fb63 	bl	8005078 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80049b2:	bf00      	nop
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	20000930 	.word	0x20000930
 80049c0:	40012100 	.word	0x40012100
 80049c4:	0f000001 	.word	0x0f000001

080049c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80049cc:	4b12      	ldr	r3, [pc, #72]	; (8004a18 <MX_I2C1_Init+0x50>)
 80049ce:	4a13      	ldr	r2, [pc, #76]	; (8004a1c <MX_I2C1_Init+0x54>)
 80049d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80049d2:	4b11      	ldr	r3, [pc, #68]	; (8004a18 <MX_I2C1_Init+0x50>)
 80049d4:	4a12      	ldr	r2, [pc, #72]	; (8004a20 <MX_I2C1_Init+0x58>)
 80049d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80049d8:	4b0f      	ldr	r3, [pc, #60]	; (8004a18 <MX_I2C1_Init+0x50>)
 80049da:	2200      	movs	r2, #0
 80049dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80049de:	4b0e      	ldr	r3, [pc, #56]	; (8004a18 <MX_I2C1_Init+0x50>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80049e4:	4b0c      	ldr	r3, [pc, #48]	; (8004a18 <MX_I2C1_Init+0x50>)
 80049e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80049ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80049ec:	4b0a      	ldr	r3, [pc, #40]	; (8004a18 <MX_I2C1_Init+0x50>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80049f2:	4b09      	ldr	r3, [pc, #36]	; (8004a18 <MX_I2C1_Init+0x50>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80049f8:	4b07      	ldr	r3, [pc, #28]	; (8004a18 <MX_I2C1_Init+0x50>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80049fe:	4b06      	ldr	r3, [pc, #24]	; (8004a18 <MX_I2C1_Init+0x50>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004a04:	4804      	ldr	r0, [pc, #16]	; (8004a18 <MX_I2C1_Init+0x50>)
 8004a06:	f002 fdad 	bl	8007564 <HAL_I2C_Init>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d001      	beq.n	8004a14 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004a10:	f000 fb32 	bl	8005078 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004a14:	bf00      	nop
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	20000978 	.word	0x20000978
 8004a1c:	40005400 	.word	0x40005400
 8004a20:	00061a80 	.word	0x00061a80

08004a24 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b096      	sub	sp, #88	; 0x58
 8004a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004a2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004a2e:	2200      	movs	r2, #0
 8004a30:	601a      	str	r2, [r3, #0]
 8004a32:	605a      	str	r2, [r3, #4]
 8004a34:	609a      	str	r2, [r3, #8]
 8004a36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004a42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a46:	2200      	movs	r2, #0
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	605a      	str	r2, [r3, #4]
 8004a4c:	609a      	str	r2, [r3, #8]
 8004a4e:	60da      	str	r2, [r3, #12]
 8004a50:	611a      	str	r2, [r3, #16]
 8004a52:	615a      	str	r2, [r3, #20]
 8004a54:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004a56:	1d3b      	adds	r3, r7, #4
 8004a58:	2220      	movs	r2, #32
 8004a5a:	2100      	movs	r1, #0
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f00b fc5b 	bl	8010318 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004a62:	4b3e      	ldr	r3, [pc, #248]	; (8004b5c <MX_TIM1_Init+0x138>)
 8004a64:	4a3e      	ldr	r2, [pc, #248]	; (8004b60 <MX_TIM1_Init+0x13c>)
 8004a66:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8004a68:	4b3c      	ldr	r3, [pc, #240]	; (8004b5c <MX_TIM1_Init+0x138>)
 8004a6a:	22a0      	movs	r2, #160	; 0xa0
 8004a6c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a6e:	4b3b      	ldr	r3, [pc, #236]	; (8004b5c <MX_TIM1_Init+0x138>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8004a74:	4b39      	ldr	r3, [pc, #228]	; (8004b5c <MX_TIM1_Init+0x138>)
 8004a76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a7a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a7c:	4b37      	ldr	r3, [pc, #220]	; (8004b5c <MX_TIM1_Init+0x138>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004a82:	4b36      	ldr	r3, [pc, #216]	; (8004b5c <MX_TIM1_Init+0x138>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004a88:	4b34      	ldr	r3, [pc, #208]	; (8004b5c <MX_TIM1_Init+0x138>)
 8004a8a:	2280      	movs	r2, #128	; 0x80
 8004a8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004a8e:	4833      	ldr	r0, [pc, #204]	; (8004b5c <MX_TIM1_Init+0x138>)
 8004a90:	f004 fb48 	bl	8009124 <HAL_TIM_Base_Init>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8004a9a:	f000 faed 	bl	8005078 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004aa2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004aa4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	482c      	ldr	r0, [pc, #176]	; (8004b5c <MX_TIM1_Init+0x138>)
 8004aac:	f005 f81a 	bl	8009ae4 <HAL_TIM_ConfigClockSource>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d001      	beq.n	8004aba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004ab6:	f000 fadf 	bl	8005078 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004aba:	4828      	ldr	r0, [pc, #160]	; (8004b5c <MX_TIM1_Init+0x138>)
 8004abc:	f004 fbf2 	bl	80092a4 <HAL_TIM_PWM_Init>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8004ac6:	f000 fad7 	bl	8005078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004aca:	2300      	movs	r3, #0
 8004acc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004ad2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	4820      	ldr	r0, [pc, #128]	; (8004b5c <MX_TIM1_Init+0x138>)
 8004ada:	f005 fc03 	bl	800a2e4 <HAL_TIMEx_MasterConfigSynchronization>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d001      	beq.n	8004ae8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8004ae4:	f000 fac8 	bl	8005078 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004ae8:	2360      	movs	r3, #96	; 0x60
 8004aea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004aec:	2300      	movs	r3, #0
 8004aee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004af0:	2300      	movs	r3, #0
 8004af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004af4:	2300      	movs	r3, #0
 8004af6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004af8:	2300      	movs	r3, #0
 8004afa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004afc:	2300      	movs	r3, #0
 8004afe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004b00:	2300      	movs	r3, #0
 8004b02:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b08:	2200      	movs	r2, #0
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	4813      	ldr	r0, [pc, #76]	; (8004b5c <MX_TIM1_Init+0x138>)
 8004b0e:	f004 ff27 	bl	8009960 <HAL_TIM_PWM_ConfigChannel>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d001      	beq.n	8004b1c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8004b18:	f000 faae 	bl	8005078 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004b20:	2300      	movs	r3, #0
 8004b22:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004b24:	2300      	movs	r3, #0
 8004b26:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004b30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b34:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004b36:	2300      	movs	r3, #0
 8004b38:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004b3a:	1d3b      	adds	r3, r7, #4
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4807      	ldr	r0, [pc, #28]	; (8004b5c <MX_TIM1_Init+0x138>)
 8004b40:	f005 fc4c 	bl	800a3dc <HAL_TIMEx_ConfigBreakDeadTime>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8004b4a:	f000 fa95 	bl	8005078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004b4e:	4803      	ldr	r0, [pc, #12]	; (8004b5c <MX_TIM1_Init+0x138>)
 8004b50:	f000 fe38 	bl	80057c4 <HAL_TIM_MspPostInit>

}
 8004b54:	bf00      	nop
 8004b56:	3758      	adds	r7, #88	; 0x58
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	200009cc 	.word	0x200009cc
 8004b60:	40010000 	.word	0x40010000

08004b64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b08c      	sub	sp, #48	; 0x30
 8004b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004b6a:	f107 030c 	add.w	r3, r7, #12
 8004b6e:	2224      	movs	r2, #36	; 0x24
 8004b70:	2100      	movs	r1, #0
 8004b72:	4618      	mov	r0, r3
 8004b74:	f00b fbd0 	bl	8010318 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b78:	1d3b      	adds	r3, r7, #4
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004b80:	4b21      	ldr	r3, [pc, #132]	; (8004c08 <MX_TIM2_Init+0xa4>)
 8004b82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004b86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004b88:	4b1f      	ldr	r3, [pc, #124]	; (8004c08 <MX_TIM2_Init+0xa4>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b8e:	4b1e      	ldr	r3, [pc, #120]	; (8004c08 <MX_TIM2_Init+0xa4>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8004b94:	4b1c      	ldr	r3, [pc, #112]	; (8004c08 <MX_TIM2_Init+0xa4>)
 8004b96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b9c:	4b1a      	ldr	r3, [pc, #104]	; (8004c08 <MX_TIM2_Init+0xa4>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ba2:	4b19      	ldr	r3, [pc, #100]	; (8004c08 <MX_TIM2_Init+0xa4>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004bac:	2300      	movs	r3, #0
 8004bae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8004bb8:	230a      	movs	r3, #10
 8004bba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8004bcc:	f107 030c 	add.w	r3, r7, #12
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	480d      	ldr	r0, [pc, #52]	; (8004c08 <MX_TIM2_Init+0xa4>)
 8004bd4:	f004 fc88 	bl	80094e8 <HAL_TIM_Encoder_Init>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d001      	beq.n	8004be2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8004bde:	f000 fa4b 	bl	8005078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004be2:	2300      	movs	r3, #0
 8004be4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004be6:	2300      	movs	r3, #0
 8004be8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004bea:	1d3b      	adds	r3, r7, #4
 8004bec:	4619      	mov	r1, r3
 8004bee:	4806      	ldr	r0, [pc, #24]	; (8004c08 <MX_TIM2_Init+0xa4>)
 8004bf0:	f005 fb78 	bl	800a2e4 <HAL_TIMEx_MasterConfigSynchronization>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8004bfa:	f000 fa3d 	bl	8005078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004bfe:	bf00      	nop
 8004c00:	3730      	adds	r7, #48	; 0x30
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	20000a14 	.word	0x20000a14

08004c0c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b08c      	sub	sp, #48	; 0x30
 8004c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004c12:	f107 030c 	add.w	r3, r7, #12
 8004c16:	2224      	movs	r2, #36	; 0x24
 8004c18:	2100      	movs	r1, #0
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f00b fb7c 	bl	8010318 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c20:	1d3b      	adds	r3, r7, #4
 8004c22:	2200      	movs	r2, #0
 8004c24:	601a      	str	r2, [r3, #0]
 8004c26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004c28:	4b20      	ldr	r3, [pc, #128]	; (8004cac <MX_TIM3_Init+0xa0>)
 8004c2a:	4a21      	ldr	r2, [pc, #132]	; (8004cb0 <MX_TIM3_Init+0xa4>)
 8004c2c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004c2e:	4b1f      	ldr	r3, [pc, #124]	; (8004cac <MX_TIM3_Init+0xa0>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c34:	4b1d      	ldr	r3, [pc, #116]	; (8004cac <MX_TIM3_Init+0xa0>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004c3a:	4b1c      	ldr	r3, [pc, #112]	; (8004cac <MX_TIM3_Init+0xa0>)
 8004c3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c40:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c42:	4b1a      	ldr	r3, [pc, #104]	; (8004cac <MX_TIM3_Init+0xa0>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c48:	4b18      	ldr	r3, [pc, #96]	; (8004cac <MX_TIM3_Init+0xa0>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004c52:	2300      	movs	r3, #0
 8004c54:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004c56:	2301      	movs	r3, #1
 8004c58:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8004c5e:	230a      	movs	r3, #10
 8004c60:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004c62:	2300      	movs	r3, #0
 8004c64:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004c66:	2301      	movs	r3, #1
 8004c68:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004c72:	f107 030c 	add.w	r3, r7, #12
 8004c76:	4619      	mov	r1, r3
 8004c78:	480c      	ldr	r0, [pc, #48]	; (8004cac <MX_TIM3_Init+0xa0>)
 8004c7a:	f004 fc35 	bl	80094e8 <HAL_TIM_Encoder_Init>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8004c84:	f000 f9f8 	bl	8005078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004c90:	1d3b      	adds	r3, r7, #4
 8004c92:	4619      	mov	r1, r3
 8004c94:	4805      	ldr	r0, [pc, #20]	; (8004cac <MX_TIM3_Init+0xa0>)
 8004c96:	f005 fb25 	bl	800a2e4 <HAL_TIMEx_MasterConfigSynchronization>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d001      	beq.n	8004ca4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8004ca0:	f000 f9ea 	bl	8005078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004ca4:	bf00      	nop
 8004ca6:	3730      	adds	r7, #48	; 0x30
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	20000a5c 	.word	0x20000a5c
 8004cb0:	40000400 	.word	0x40000400

08004cb4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b096      	sub	sp, #88	; 0x58
 8004cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004cba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	601a      	str	r2, [r3, #0]
 8004cc2:	605a      	str	r2, [r3, #4]
 8004cc4:	609a      	str	r2, [r3, #8]
 8004cc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cc8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004ccc:	2200      	movs	r2, #0
 8004cce:	601a      	str	r2, [r3, #0]
 8004cd0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	601a      	str	r2, [r3, #0]
 8004cda:	605a      	str	r2, [r3, #4]
 8004cdc:	609a      	str	r2, [r3, #8]
 8004cde:	60da      	str	r2, [r3, #12]
 8004ce0:	611a      	str	r2, [r3, #16]
 8004ce2:	615a      	str	r2, [r3, #20]
 8004ce4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004ce6:	1d3b      	adds	r3, r7, #4
 8004ce8:	2220      	movs	r2, #32
 8004cea:	2100      	movs	r1, #0
 8004cec:	4618      	mov	r0, r3
 8004cee:	f00b fb13 	bl	8010318 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004cf2:	4b43      	ldr	r3, [pc, #268]	; (8004e00 <MX_TIM8_Init+0x14c>)
 8004cf4:	4a43      	ldr	r2, [pc, #268]	; (8004e04 <MX_TIM8_Init+0x150>)
 8004cf6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8004cf8:	4b41      	ldr	r3, [pc, #260]	; (8004e00 <MX_TIM8_Init+0x14c>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cfe:	4b40      	ldr	r3, [pc, #256]	; (8004e00 <MX_TIM8_Init+0x14c>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8004d04:	4b3e      	ldr	r3, [pc, #248]	; (8004e00 <MX_TIM8_Init+0x14c>)
 8004d06:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8004d0a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d0c:	4b3c      	ldr	r3, [pc, #240]	; (8004e00 <MX_TIM8_Init+0x14c>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004d12:	4b3b      	ldr	r3, [pc, #236]	; (8004e00 <MX_TIM8_Init+0x14c>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d18:	4b39      	ldr	r3, [pc, #228]	; (8004e00 <MX_TIM8_Init+0x14c>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8004d1e:	4838      	ldr	r0, [pc, #224]	; (8004e00 <MX_TIM8_Init+0x14c>)
 8004d20:	f004 fa00 	bl	8009124 <HAL_TIM_Base_Init>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8004d2a:	f000 f9a5 	bl	8005078 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d32:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8004d34:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004d38:	4619      	mov	r1, r3
 8004d3a:	4831      	ldr	r0, [pc, #196]	; (8004e00 <MX_TIM8_Init+0x14c>)
 8004d3c:	f004 fed2 	bl	8009ae4 <HAL_TIM_ConfigClockSource>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8004d46:	f000 f997 	bl	8005078 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8004d4a:	482d      	ldr	r0, [pc, #180]	; (8004e00 <MX_TIM8_Init+0x14c>)
 8004d4c:	f004 faaa 	bl	80092a4 <HAL_TIM_PWM_Init>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8004d56:	f000 f98f 	bl	8005078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004d62:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004d66:	4619      	mov	r1, r3
 8004d68:	4825      	ldr	r0, [pc, #148]	; (8004e00 <MX_TIM8_Init+0x14c>)
 8004d6a:	f005 fabb 	bl	800a2e4 <HAL_TIMEx_MasterConfigSynchronization>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d001      	beq.n	8004d78 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8004d74:	f000 f980 	bl	8005078 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d78:	2360      	movs	r3, #96	; 0x60
 8004d7a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d80:	2300      	movs	r3, #0
 8004d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004d84:	2300      	movs	r3, #0
 8004d86:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004d90:	2300      	movs	r3, #0
 8004d92:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d98:	2200      	movs	r2, #0
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	4818      	ldr	r0, [pc, #96]	; (8004e00 <MX_TIM8_Init+0x14c>)
 8004d9e:	f004 fddf 	bl	8009960 <HAL_TIM_PWM_ConfigChannel>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d001      	beq.n	8004dac <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8004da8:	f000 f966 	bl	8005078 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004db0:	2204      	movs	r2, #4
 8004db2:	4619      	mov	r1, r3
 8004db4:	4812      	ldr	r0, [pc, #72]	; (8004e00 <MX_TIM8_Init+0x14c>)
 8004db6:	f004 fdd3 	bl	8009960 <HAL_TIM_PWM_ConfigChannel>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8004dc0:	f000 f95a 	bl	8005078 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004dd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ddc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004dde:	2300      	movs	r3, #0
 8004de0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004de2:	1d3b      	adds	r3, r7, #4
 8004de4:	4619      	mov	r1, r3
 8004de6:	4806      	ldr	r0, [pc, #24]	; (8004e00 <MX_TIM8_Init+0x14c>)
 8004de8:	f005 faf8 	bl	800a3dc <HAL_TIMEx_ConfigBreakDeadTime>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8004df2:	f000 f941 	bl	8005078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8004df6:	bf00      	nop
 8004df8:	3758      	adds	r7, #88	; 0x58
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	20000aa4 	.word	0x20000aa4
 8004e04:	40010400 	.word	0x40010400

08004e08 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004e0c:	4b11      	ldr	r3, [pc, #68]	; (8004e54 <MX_USART3_UART_Init+0x4c>)
 8004e0e:	4a12      	ldr	r2, [pc, #72]	; (8004e58 <MX_USART3_UART_Init+0x50>)
 8004e10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004e12:	4b10      	ldr	r3, [pc, #64]	; (8004e54 <MX_USART3_UART_Init+0x4c>)
 8004e14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004e18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004e1a:	4b0e      	ldr	r3, [pc, #56]	; (8004e54 <MX_USART3_UART_Init+0x4c>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004e20:	4b0c      	ldr	r3, [pc, #48]	; (8004e54 <MX_USART3_UART_Init+0x4c>)
 8004e22:	2200      	movs	r2, #0
 8004e24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004e26:	4b0b      	ldr	r3, [pc, #44]	; (8004e54 <MX_USART3_UART_Init+0x4c>)
 8004e28:	2200      	movs	r2, #0
 8004e2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004e2c:	4b09      	ldr	r3, [pc, #36]	; (8004e54 <MX_USART3_UART_Init+0x4c>)
 8004e2e:	220c      	movs	r2, #12
 8004e30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e32:	4b08      	ldr	r3, [pc, #32]	; (8004e54 <MX_USART3_UART_Init+0x4c>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e38:	4b06      	ldr	r3, [pc, #24]	; (8004e54 <MX_USART3_UART_Init+0x4c>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004e3e:	4805      	ldr	r0, [pc, #20]	; (8004e54 <MX_USART3_UART_Init+0x4c>)
 8004e40:	f005 fb32 	bl	800a4a8 <HAL_UART_Init>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d001      	beq.n	8004e4e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004e4a:	f000 f915 	bl	8005078 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004e4e:	bf00      	nop
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	20000aec 	.word	0x20000aec
 8004e58:	40004800 	.word	0x40004800

08004e5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004e62:	2300      	movs	r3, #0
 8004e64:	607b      	str	r3, [r7, #4]
 8004e66:	4b10      	ldr	r3, [pc, #64]	; (8004ea8 <MX_DMA_Init+0x4c>)
 8004e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6a:	4a0f      	ldr	r2, [pc, #60]	; (8004ea8 <MX_DMA_Init+0x4c>)
 8004e6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e70:	6313      	str	r3, [r2, #48]	; 0x30
 8004e72:	4b0d      	ldr	r3, [pc, #52]	; (8004ea8 <MX_DMA_Init+0x4c>)
 8004e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e7a:	607b      	str	r3, [r7, #4]
 8004e7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8004e7e:	2200      	movs	r2, #0
 8004e80:	2105      	movs	r1, #5
 8004e82:	200c      	movs	r0, #12
 8004e84:	f001 fd5a 	bl	800693c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8004e88:	200c      	movs	r0, #12
 8004e8a:	f001 fd73 	bl	8006974 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8004e8e:	2200      	movs	r2, #0
 8004e90:	2105      	movs	r1, #5
 8004e92:	200e      	movs	r0, #14
 8004e94:	f001 fd52 	bl	800693c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8004e98:	200e      	movs	r0, #14
 8004e9a:	f001 fd6b 	bl	8006974 <HAL_NVIC_EnableIRQ>

}
 8004e9e:	bf00      	nop
 8004ea0:	3708      	adds	r7, #8
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	40023800 	.word	0x40023800

08004eac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b08a      	sub	sp, #40	; 0x28
 8004eb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004eb2:	f107 0314 	add.w	r3, r7, #20
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	601a      	str	r2, [r3, #0]
 8004eba:	605a      	str	r2, [r3, #4]
 8004ebc:	609a      	str	r2, [r3, #8]
 8004ebe:	60da      	str	r2, [r3, #12]
 8004ec0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	613b      	str	r3, [r7, #16]
 8004ec6:	4b5b      	ldr	r3, [pc, #364]	; (8005034 <MX_GPIO_Init+0x188>)
 8004ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eca:	4a5a      	ldr	r2, [pc, #360]	; (8005034 <MX_GPIO_Init+0x188>)
 8004ecc:	f043 0310 	orr.w	r3, r3, #16
 8004ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ed2:	4b58      	ldr	r3, [pc, #352]	; (8005034 <MX_GPIO_Init+0x188>)
 8004ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed6:	f003 0310 	and.w	r3, r3, #16
 8004eda:	613b      	str	r3, [r7, #16]
 8004edc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ede:	2300      	movs	r3, #0
 8004ee0:	60fb      	str	r3, [r7, #12]
 8004ee2:	4b54      	ldr	r3, [pc, #336]	; (8005034 <MX_GPIO_Init+0x188>)
 8004ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee6:	4a53      	ldr	r2, [pc, #332]	; (8005034 <MX_GPIO_Init+0x188>)
 8004ee8:	f043 0304 	orr.w	r3, r3, #4
 8004eec:	6313      	str	r3, [r2, #48]	; 0x30
 8004eee:	4b51      	ldr	r3, [pc, #324]	; (8005034 <MX_GPIO_Init+0x188>)
 8004ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef2:	f003 0304 	and.w	r3, r3, #4
 8004ef6:	60fb      	str	r3, [r7, #12]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004efa:	2300      	movs	r3, #0
 8004efc:	60bb      	str	r3, [r7, #8]
 8004efe:	4b4d      	ldr	r3, [pc, #308]	; (8005034 <MX_GPIO_Init+0x188>)
 8004f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f02:	4a4c      	ldr	r2, [pc, #304]	; (8005034 <MX_GPIO_Init+0x188>)
 8004f04:	f043 0301 	orr.w	r3, r3, #1
 8004f08:	6313      	str	r3, [r2, #48]	; 0x30
 8004f0a:	4b4a      	ldr	r3, [pc, #296]	; (8005034 <MX_GPIO_Init+0x188>)
 8004f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	60bb      	str	r3, [r7, #8]
 8004f14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f16:	2300      	movs	r3, #0
 8004f18:	607b      	str	r3, [r7, #4]
 8004f1a:	4b46      	ldr	r3, [pc, #280]	; (8005034 <MX_GPIO_Init+0x188>)
 8004f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1e:	4a45      	ldr	r2, [pc, #276]	; (8005034 <MX_GPIO_Init+0x188>)
 8004f20:	f043 0308 	orr.w	r3, r3, #8
 8004f24:	6313      	str	r3, [r2, #48]	; 0x30
 8004f26:	4b43      	ldr	r3, [pc, #268]	; (8005034 <MX_GPIO_Init+0x188>)
 8004f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2a:	f003 0308 	and.w	r3, r3, #8
 8004f2e:	607b      	str	r3, [r7, #4]
 8004f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f32:	2300      	movs	r3, #0
 8004f34:	603b      	str	r3, [r7, #0]
 8004f36:	4b3f      	ldr	r3, [pc, #252]	; (8005034 <MX_GPIO_Init+0x188>)
 8004f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3a:	4a3e      	ldr	r2, [pc, #248]	; (8005034 <MX_GPIO_Init+0x188>)
 8004f3c:	f043 0302 	orr.w	r3, r3, #2
 8004f40:	6313      	str	r3, [r2, #48]	; 0x30
 8004f42:	4b3c      	ldr	r3, [pc, #240]	; (8005034 <MX_GPIO_Init+0x188>)
 8004f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	603b      	str	r3, [r7, #0]
 8004f4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCLK_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f242 51e0 	movw	r1, #9696	; 0x25e0
 8004f54:	4838      	ldr	r0, [pc, #224]	; (8005038 <MX_GPIO_Init+0x18c>)
 8004f56:	f002 fab9 	bl	80074cc <HAL_GPIO_WritePin>
                          |LED3_Pin|GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	213c      	movs	r1, #60	; 0x3c
 8004f5e:	4837      	ldr	r0, [pc, #220]	; (800503c <MX_GPIO_Init+0x190>)
 8004f60:	f002 fab4 	bl	80074cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8004f64:	2200      	movs	r2, #0
 8004f66:	2110      	movs	r1, #16
 8004f68:	4835      	ldr	r0, [pc, #212]	; (8005040 <MX_GPIO_Init+0x194>)
 8004f6a:	f002 faaf 	bl	80074cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCLK_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           PE13 */
  GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8004f6e:	f242 13e0 	movw	r3, #8672	; 0x21e0
 8004f72:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f74:	2301      	movs	r3, #1
 8004f76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f80:	f107 0314 	add.w	r3, r7, #20
 8004f84:	4619      	mov	r1, r3
 8004f86:	482c      	ldr	r0, [pc, #176]	; (8005038 <MX_GPIO_Init+0x18c>)
 8004f88:	f002 f904 	bl	8007194 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin;
 8004f8c:	231c      	movs	r3, #28
 8004f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f90:	2301      	movs	r3, #1
 8004f92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f94:	2300      	movs	r3, #0
 8004f96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004f98:	2302      	movs	r3, #2
 8004f9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f9c:	f107 0314 	add.w	r3, r7, #20
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	4826      	ldr	r0, [pc, #152]	; (800503c <MX_GPIO_Init+0x190>)
 8004fa4:	f002 f8f6 	bl	8007194 <HAL_GPIO_Init>

  /*Configure GPIO pin : BIN2_Pin */
  GPIO_InitStruct.Pin = BIN2_Pin;
 8004fa8:	2320      	movs	r3, #32
 8004faa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fac:	2301      	movs	r3, #1
 8004fae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BIN2_GPIO_Port, &GPIO_InitStruct);
 8004fb8:	f107 0314 	add.w	r3, r7, #20
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	481f      	ldr	r0, [pc, #124]	; (800503c <MX_GPIO_Init+0x190>)
 8004fc0:	f002 f8e8 	bl	8007194 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8004fc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8004fd6:	f107 0314 	add.w	r3, r7, #20
 8004fda:	4619      	mov	r1, r3
 8004fdc:	4816      	ldr	r0, [pc, #88]	; (8005038 <MX_GPIO_Init+0x18c>)
 8004fde:	f002 f8d9 	bl	8007194 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004fe2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fe6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004fe8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004fec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ff2:	f107 0314 	add.w	r3, r7, #20
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	4811      	ldr	r0, [pc, #68]	; (8005040 <MX_GPIO_Init+0x194>)
 8004ffa:	f002 f8cb 	bl	8007194 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004ffe:	2310      	movs	r3, #16
 8005000:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005002:	2301      	movs	r3, #1
 8005004:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005006:	2300      	movs	r3, #0
 8005008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800500a:	2300      	movs	r3, #0
 800500c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800500e:	f107 0314 	add.w	r3, r7, #20
 8005012:	4619      	mov	r1, r3
 8005014:	480a      	ldr	r0, [pc, #40]	; (8005040 <MX_GPIO_Init+0x194>)
 8005016:	f002 f8bd 	bl	8007194 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800501a:	2200      	movs	r2, #0
 800501c:	2105      	movs	r1, #5
 800501e:	2017      	movs	r0, #23
 8005020:	f001 fc8c 	bl	800693c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005024:	2017      	movs	r0, #23
 8005026:	f001 fca5 	bl	8006974 <HAL_NVIC_EnableIRQ>

}
 800502a:	bf00      	nop
 800502c:	3728      	adds	r7, #40	; 0x28
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	40023800 	.word	0x40023800
 8005038:	40021000 	.word	0x40021000
 800503c:	40020000 	.word	0x40020000
 8005040:	40020c00 	.word	0x40020c00

08005044 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
	/* Infinite loop */

	for (;;) {

		//OLED_Refresh_Gram(); // Refresh Ram
		osDelay(50);
 800504c:	2032      	movs	r0, #50	; 0x32
 800504e:	f006 fe69 	bl	800bd24 <osDelay>
 8005052:	e7fb      	b.n	800504c <StartDefaultTask+0x8>

08005054 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a04      	ldr	r2, [pc, #16]	; (8005074 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d101      	bne.n	800506a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005066:	f000 ff6d 	bl	8005f44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800506a:	bf00      	nop
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	40001400 	.word	0x40001400

08005078 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005078:	b480      	push	{r7}
 800507a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800507c:	b672      	cpsid	i
}
 800507e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8005080:	e7fe      	b.n	8005080 <Error_Handler+0x8>

08005082 <_Z8PID_initP12pid_type_defhPKfff>:
  * @param[in]      max_out: pid最大输出
  * @param[in]      max_iout: pid最大积分输出
  * @retval         none
  */
void PID_init(pid_type_def *pid, uint8_t mode, const float PID[3], float max_out, float max_iout)
{
 8005082:	b480      	push	{r7}
 8005084:	b087      	sub	sp, #28
 8005086:	af00      	add	r7, sp, #0
 8005088:	6178      	str	r0, [r7, #20]
 800508a:	460b      	mov	r3, r1
 800508c:	60fa      	str	r2, [r7, #12]
 800508e:	ed87 0a02 	vstr	s0, [r7, #8]
 8005092:	edc7 0a01 	vstr	s1, [r7, #4]
 8005096:	74fb      	strb	r3, [r7, #19]
    if (pid == NULL || PID == NULL)
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d042      	beq.n	8005124 <_Z8PID_initP12pid_type_defhPKfff+0xa2>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d03f      	beq.n	8005124 <_Z8PID_initP12pid_type_defhPKfff+0xa2>
    {
        return;
    }
    pid->mode = mode;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	7cfa      	ldrb	r2, [r7, #19]
 80050a8:	701a      	strb	r2, [r3, #0]
    pid->Kp = PID[0];
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	605a      	str	r2, [r3, #4]
    pid->Ki = PID[1];
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	3304      	adds	r3, #4
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	609a      	str	r2, [r3, #8]
    pid->Kd = PID[2];
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	3308      	adds	r3, #8
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	60da      	str	r2, [r3, #12]
    pid->max_out = max_out;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	611a      	str	r2, [r3, #16]
    pid->max_iout = max_iout;
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	615a      	str	r2, [r3, #20]
    pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	f04f 0200 	mov.w	r2, #0
 80050d8:	639a      	str	r2, [r3, #56]	; 0x38
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	635a      	str	r2, [r3, #52]	; 0x34
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	631a      	str	r2, [r3, #48]	; 0x30
    pid->error[0] = pid->error[1] = pid->error[2] = pid->Pout = pid->Iout = pid->Dout = pid->out = 0.0f;
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f04f 0200 	mov.w	r2, #0
 80050f0:	621a      	str	r2, [r3, #32]
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	6a1a      	ldr	r2, [r3, #32]
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	629a      	str	r2, [r3, #40]	; 0x28
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	625a      	str	r2, [r3, #36]	; 0x24
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	645a      	str	r2, [r3, #68]	; 0x44
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	641a      	str	r2, [r3, #64]	; 0x40
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	63da      	str	r2, [r3, #60]	; 0x3c
 8005122:	e000      	b.n	8005126 <_Z8PID_initP12pid_type_defhPKfff+0xa4>
        return;
 8005124:	bf00      	nop
}
 8005126:	371c      	adds	r7, #28
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <_Z8PID_calcP12pid_type_defff>:
  * @param[in]      ref: 反馈数据
  * @param[in]      set: 设定值
  * @retval         pid输出
  */
float PID_calc(pid_type_def *pid, float ref, float set)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	ed87 0a02 	vstr	s0, [r7, #8]
 800513c:	edc7 0a01 	vstr	s1, [r7, #4]
    if (pid == NULL)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d102      	bne.n	800514c <_Z8PID_calcP12pid_type_defff+0x1c>
    {
        return 0.0f;
 8005146:	f04f 0300 	mov.w	r3, #0
 800514a:	e130      	b.n	80053ae <_Z8PID_calcP12pid_type_defff+0x27e>
    }

    pid->error[2] = pid->error[1];
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	645a      	str	r2, [r3, #68]	; 0x44
    pid->error[1] = pid->error[0];
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	641a      	str	r2, [r3, #64]	; 0x40
    pid->set = set;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	619a      	str	r2, [r3, #24]
    pid->fdb = ref;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	68ba      	ldr	r2, [r7, #8]
 8005166:	61da      	str	r2, [r3, #28]
    pid->error[0] = set - ref;
 8005168:	ed97 7a01 	vldr	s14, [r7, #4]
 800516c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005170:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    if (pid->mode == PID_POSITION)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	f040 8095 	bne.w	80052ae <_Z8PID_calcP12pid_type_defff+0x17e>
    {
        pid->Pout = pid->Kp * pid->error[0];
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	ed93 7a01 	vldr	s14, [r3, #4]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8005190:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
        pid->Iout += pid->Ki * pid->error[0];
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	edd3 6a02 	vldr	s13, [r3, #8]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80051ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	639a      	str	r2, [r3, #56]	; 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	635a      	str	r2, [r3, #52]	; 0x34
        pid->Dbuf[0] = (pid->error[0] - pid->error[1]);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80051d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	ed93 7a03 	vldr	s14, [r3, #12]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80051ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        LimitMax(pid->Iout, pid->max_iout);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	edd3 7a05 	vldr	s15, [r3, #20]
 8005202:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800520a:	dd04      	ble.n	8005216 <_Z8PID_calcP12pid_type_defff+0xe6>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	695a      	ldr	r2, [r3, #20]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	629a      	str	r2, [r3, #40]	; 0x28
 8005214:	e014      	b.n	8005240 <_Z8PID_calcP12pid_type_defff+0x110>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	edd3 7a05 	vldr	s15, [r3, #20]
 8005222:	eef1 7a67 	vneg.f32	s15, s15
 8005226:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800522a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800522e:	d507      	bpl.n	8005240 <_Z8PID_calcP12pid_type_defff+0x110>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	edd3 7a05 	vldr	s15, [r3, #20]
 8005236:	eef1 7a67 	vneg.f32	s15, s15
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        pid->out = pid->Pout + pid->Iout + pid->Dout;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800524c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005256:	ee77 7a27 	vadd.f32	s15, s14, s15
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	ed93 7a08 	vldr	s14, [r3, #32]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	edd3 7a04 	vldr	s15, [r3, #16]
 800526c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005274:	dd04      	ble.n	8005280 <_Z8PID_calcP12pid_type_defff+0x150>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	691a      	ldr	r2, [r3, #16]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	621a      	str	r2, [r3, #32]
 800527e:	e094      	b.n	80053aa <_Z8PID_calcP12pid_type_defff+0x27a>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	ed93 7a08 	vldr	s14, [r3, #32]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	edd3 7a04 	vldr	s15, [r3, #16]
 800528c:	eef1 7a67 	vneg.f32	s15, s15
 8005290:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005298:	f140 8087 	bpl.w	80053aa <_Z8PID_calcP12pid_type_defff+0x27a>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	edd3 7a04 	vldr	s15, [r3, #16]
 80052a2:	eef1 7a67 	vneg.f32	s15, s15
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	edc3 7a08 	vstr	s15, [r3, #32]
 80052ac:	e07d      	b.n	80053aa <_Z8PID_calcP12pid_type_defff+0x27a>
    }
    else if (pid->mode == PID_DELTA)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d179      	bne.n	80053aa <_Z8PID_calcP12pid_type_defff+0x27a>
    {
        pid->Pout = pid->Kp * (pid->error[0] - pid->error[1]);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	ed93 7a01 	vldr	s14, [r3, #4]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80052c8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80052cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
        pid->Iout = pid->Ki * pid->error[0];
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	ed93 7a02 	vldr	s14, [r3, #8]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80052e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	639a      	str	r2, [r3, #56]	; 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	635a      	str	r2, [r3, #52]	; 0x34
        pid->Dbuf[0] = (pid->error[0] - 2.0f * pid->error[1] + pid->error[2]);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8005308:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800530c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8005316:	ee77 7a27 	vadd.f32	s15, s14, s15
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	ed93 7a03 	vldr	s14, [r3, #12]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800532c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        pid->out += pid->Pout + pid->Iout + pid->Dout;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	ed93 7a08 	vldr	s14, [r3, #32]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005348:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005356:	ee77 7a27 	vadd.f32	s15, s14, s15
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	ed93 7a08 	vldr	s14, [r3, #32]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	edd3 7a04 	vldr	s15, [r3, #16]
 800536c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005374:	dd04      	ble.n	8005380 <_Z8PID_calcP12pid_type_defff+0x250>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	691a      	ldr	r2, [r3, #16]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	621a      	str	r2, [r3, #32]
 800537e:	e014      	b.n	80053aa <_Z8PID_calcP12pid_type_defff+0x27a>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	ed93 7a08 	vldr	s14, [r3, #32]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	edd3 7a04 	vldr	s15, [r3, #16]
 800538c:	eef1 7a67 	vneg.f32	s15, s15
 8005390:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005398:	d507      	bpl.n	80053aa <_Z8PID_calcP12pid_type_defff+0x27a>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	edd3 7a04 	vldr	s15, [r3, #16]
 80053a0:	eef1 7a67 	vneg.f32	s15, s15
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	edc3 7a08 	vstr	s15, [r3, #32]
    }
    return pid->out;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
}
 80053ae:	ee07 3a90 	vmov	s15, r3
 80053b2:	eeb0 0a67 	vmov.f32	s0, s15
 80053b6:	3714      	adds	r7, #20
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053c6:	2300      	movs	r3, #0
 80053c8:	607b      	str	r3, [r7, #4]
 80053ca:	4b12      	ldr	r3, [pc, #72]	; (8005414 <HAL_MspInit+0x54>)
 80053cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ce:	4a11      	ldr	r2, [pc, #68]	; (8005414 <HAL_MspInit+0x54>)
 80053d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053d4:	6453      	str	r3, [r2, #68]	; 0x44
 80053d6:	4b0f      	ldr	r3, [pc, #60]	; (8005414 <HAL_MspInit+0x54>)
 80053d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053de:	607b      	str	r3, [r7, #4]
 80053e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80053e2:	2300      	movs	r3, #0
 80053e4:	603b      	str	r3, [r7, #0]
 80053e6:	4b0b      	ldr	r3, [pc, #44]	; (8005414 <HAL_MspInit+0x54>)
 80053e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ea:	4a0a      	ldr	r2, [pc, #40]	; (8005414 <HAL_MspInit+0x54>)
 80053ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053f0:	6413      	str	r3, [r2, #64]	; 0x40
 80053f2:	4b08      	ldr	r3, [pc, #32]	; (8005414 <HAL_MspInit+0x54>)
 80053f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053fa:	603b      	str	r3, [r7, #0]
 80053fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80053fe:	2200      	movs	r2, #0
 8005400:	210f      	movs	r1, #15
 8005402:	f06f 0001 	mvn.w	r0, #1
 8005406:	f001 fa99 	bl	800693c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800540a:	bf00      	nop
 800540c:	3708      	adds	r7, #8
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	40023800 	.word	0x40023800

08005418 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b08c      	sub	sp, #48	; 0x30
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005420:	f107 031c 	add.w	r3, r7, #28
 8005424:	2200      	movs	r2, #0
 8005426:	601a      	str	r2, [r3, #0]
 8005428:	605a      	str	r2, [r3, #4]
 800542a:	609a      	str	r2, [r3, #8]
 800542c:	60da      	str	r2, [r3, #12]
 800542e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a2e      	ldr	r2, [pc, #184]	; (80054f0 <HAL_ADC_MspInit+0xd8>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d128      	bne.n	800548c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800543a:	2300      	movs	r3, #0
 800543c:	61bb      	str	r3, [r7, #24]
 800543e:	4b2d      	ldr	r3, [pc, #180]	; (80054f4 <HAL_ADC_MspInit+0xdc>)
 8005440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005442:	4a2c      	ldr	r2, [pc, #176]	; (80054f4 <HAL_ADC_MspInit+0xdc>)
 8005444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005448:	6453      	str	r3, [r2, #68]	; 0x44
 800544a:	4b2a      	ldr	r3, [pc, #168]	; (80054f4 <HAL_ADC_MspInit+0xdc>)
 800544c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005452:	61bb      	str	r3, [r7, #24]
 8005454:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005456:	2300      	movs	r3, #0
 8005458:	617b      	str	r3, [r7, #20]
 800545a:	4b26      	ldr	r3, [pc, #152]	; (80054f4 <HAL_ADC_MspInit+0xdc>)
 800545c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545e:	4a25      	ldr	r2, [pc, #148]	; (80054f4 <HAL_ADC_MspInit+0xdc>)
 8005460:	f043 0304 	orr.w	r3, r3, #4
 8005464:	6313      	str	r3, [r2, #48]	; 0x30
 8005466:	4b23      	ldr	r3, [pc, #140]	; (80054f4 <HAL_ADC_MspInit+0xdc>)
 8005468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546a:	f003 0304 	and.w	r3, r3, #4
 800546e:	617b      	str	r3, [r7, #20]
 8005470:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005472:	2301      	movs	r3, #1
 8005474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005476:	2303      	movs	r3, #3
 8005478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800547a:	2300      	movs	r3, #0
 800547c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800547e:	f107 031c 	add.w	r3, r7, #28
 8005482:	4619      	mov	r1, r3
 8005484:	481c      	ldr	r0, [pc, #112]	; (80054f8 <HAL_ADC_MspInit+0xe0>)
 8005486:	f001 fe85 	bl	8007194 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800548a:	e02c      	b.n	80054e6 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a1a      	ldr	r2, [pc, #104]	; (80054fc <HAL_ADC_MspInit+0xe4>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d127      	bne.n	80054e6 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005496:	2300      	movs	r3, #0
 8005498:	613b      	str	r3, [r7, #16]
 800549a:	4b16      	ldr	r3, [pc, #88]	; (80054f4 <HAL_ADC_MspInit+0xdc>)
 800549c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800549e:	4a15      	ldr	r2, [pc, #84]	; (80054f4 <HAL_ADC_MspInit+0xdc>)
 80054a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054a4:	6453      	str	r3, [r2, #68]	; 0x44
 80054a6:	4b13      	ldr	r3, [pc, #76]	; (80054f4 <HAL_ADC_MspInit+0xdc>)
 80054a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054ae:	613b      	str	r3, [r7, #16]
 80054b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054b2:	2300      	movs	r3, #0
 80054b4:	60fb      	str	r3, [r7, #12]
 80054b6:	4b0f      	ldr	r3, [pc, #60]	; (80054f4 <HAL_ADC_MspInit+0xdc>)
 80054b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ba:	4a0e      	ldr	r2, [pc, #56]	; (80054f4 <HAL_ADC_MspInit+0xdc>)
 80054bc:	f043 0301 	orr.w	r3, r3, #1
 80054c0:	6313      	str	r3, [r2, #48]	; 0x30
 80054c2:	4b0c      	ldr	r3, [pc, #48]	; (80054f4 <HAL_ADC_MspInit+0xdc>)
 80054c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	60fb      	str	r3, [r7, #12]
 80054cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80054ce:	2301      	movs	r3, #1
 80054d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80054d2:	2303      	movs	r3, #3
 80054d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054d6:	2300      	movs	r3, #0
 80054d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054da:	f107 031c 	add.w	r3, r7, #28
 80054de:	4619      	mov	r1, r3
 80054e0:	4807      	ldr	r0, [pc, #28]	; (8005500 <HAL_ADC_MspInit+0xe8>)
 80054e2:	f001 fe57 	bl	8007194 <HAL_GPIO_Init>
}
 80054e6:	bf00      	nop
 80054e8:	3730      	adds	r7, #48	; 0x30
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	40012000 	.word	0x40012000
 80054f4:	40023800 	.word	0x40023800
 80054f8:	40020800 	.word	0x40020800
 80054fc:	40012100 	.word	0x40012100
 8005500:	40020000 	.word	0x40020000

08005504 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b08a      	sub	sp, #40	; 0x28
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800550c:	f107 0314 	add.w	r3, r7, #20
 8005510:	2200      	movs	r2, #0
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	605a      	str	r2, [r3, #4]
 8005516:	609a      	str	r2, [r3, #8]
 8005518:	60da      	str	r2, [r3, #12]
 800551a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a19      	ldr	r2, [pc, #100]	; (8005588 <HAL_I2C_MspInit+0x84>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d12c      	bne.n	8005580 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005526:	2300      	movs	r3, #0
 8005528:	613b      	str	r3, [r7, #16]
 800552a:	4b18      	ldr	r3, [pc, #96]	; (800558c <HAL_I2C_MspInit+0x88>)
 800552c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552e:	4a17      	ldr	r2, [pc, #92]	; (800558c <HAL_I2C_MspInit+0x88>)
 8005530:	f043 0302 	orr.w	r3, r3, #2
 8005534:	6313      	str	r3, [r2, #48]	; 0x30
 8005536:	4b15      	ldr	r3, [pc, #84]	; (800558c <HAL_I2C_MspInit+0x88>)
 8005538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	613b      	str	r3, [r7, #16]
 8005540:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005542:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005546:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005548:	2312      	movs	r3, #18
 800554a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800554c:	2300      	movs	r3, #0
 800554e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005550:	2303      	movs	r3, #3
 8005552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005554:	2304      	movs	r3, #4
 8005556:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005558:	f107 0314 	add.w	r3, r7, #20
 800555c:	4619      	mov	r1, r3
 800555e:	480c      	ldr	r0, [pc, #48]	; (8005590 <HAL_I2C_MspInit+0x8c>)
 8005560:	f001 fe18 	bl	8007194 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005564:	2300      	movs	r3, #0
 8005566:	60fb      	str	r3, [r7, #12]
 8005568:	4b08      	ldr	r3, [pc, #32]	; (800558c <HAL_I2C_MspInit+0x88>)
 800556a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556c:	4a07      	ldr	r2, [pc, #28]	; (800558c <HAL_I2C_MspInit+0x88>)
 800556e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005572:	6413      	str	r3, [r2, #64]	; 0x40
 8005574:	4b05      	ldr	r3, [pc, #20]	; (800558c <HAL_I2C_MspInit+0x88>)
 8005576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800557c:	60fb      	str	r3, [r7, #12]
 800557e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005580:	bf00      	nop
 8005582:	3728      	adds	r7, #40	; 0x28
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	40005400 	.word	0x40005400
 800558c:	40023800 	.word	0x40023800
 8005590:	40020400 	.word	0x40020400

08005594 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b08c      	sub	sp, #48	; 0x30
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800559c:	f107 031c 	add.w	r3, r7, #28
 80055a0:	2200      	movs	r2, #0
 80055a2:	601a      	str	r2, [r3, #0]
 80055a4:	605a      	str	r2, [r3, #4]
 80055a6:	609a      	str	r2, [r3, #8]
 80055a8:	60da      	str	r2, [r3, #12]
 80055aa:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a32      	ldr	r2, [pc, #200]	; (800567c <HAL_TIM_Base_MspInit+0xe8>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d12d      	bne.n	8005612 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80055b6:	2300      	movs	r3, #0
 80055b8:	61bb      	str	r3, [r7, #24]
 80055ba:	4b31      	ldr	r3, [pc, #196]	; (8005680 <HAL_TIM_Base_MspInit+0xec>)
 80055bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055be:	4a30      	ldr	r2, [pc, #192]	; (8005680 <HAL_TIM_Base_MspInit+0xec>)
 80055c0:	f043 0301 	orr.w	r3, r3, #1
 80055c4:	6453      	str	r3, [r2, #68]	; 0x44
 80055c6:	4b2e      	ldr	r3, [pc, #184]	; (8005680 <HAL_TIM_Base_MspInit+0xec>)
 80055c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	61bb      	str	r3, [r7, #24]
 80055d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80055d2:	2300      	movs	r3, #0
 80055d4:	617b      	str	r3, [r7, #20]
 80055d6:	4b2a      	ldr	r3, [pc, #168]	; (8005680 <HAL_TIM_Base_MspInit+0xec>)
 80055d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055da:	4a29      	ldr	r2, [pc, #164]	; (8005680 <HAL_TIM_Base_MspInit+0xec>)
 80055dc:	f043 0310 	orr.w	r3, r3, #16
 80055e0:	6313      	str	r3, [r2, #48]	; 0x30
 80055e2:	4b27      	ldr	r3, [pc, #156]	; (8005680 <HAL_TIM_Base_MspInit+0xec>)
 80055e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e6:	f003 0310 	and.w	r3, r3, #16
 80055ea:	617b      	str	r3, [r7, #20]
 80055ec:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Servo_Pin;
 80055ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80055f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055f4:	2302      	movs	r3, #2
 80055f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055f8:	2300      	movs	r3, #0
 80055fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055fc:	2300      	movs	r3, #0
 80055fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005600:	2301      	movs	r3, #1
 8005602:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Servo_GPIO_Port, &GPIO_InitStruct);
 8005604:	f107 031c 	add.w	r3, r7, #28
 8005608:	4619      	mov	r1, r3
 800560a:	481e      	ldr	r0, [pc, #120]	; (8005684 <HAL_TIM_Base_MspInit+0xf0>)
 800560c:	f001 fdc2 	bl	8007194 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005610:	e030      	b.n	8005674 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM8)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a1c      	ldr	r2, [pc, #112]	; (8005688 <HAL_TIM_Base_MspInit+0xf4>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d12b      	bne.n	8005674 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800561c:	2300      	movs	r3, #0
 800561e:	613b      	str	r3, [r7, #16]
 8005620:	4b17      	ldr	r3, [pc, #92]	; (8005680 <HAL_TIM_Base_MspInit+0xec>)
 8005622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005624:	4a16      	ldr	r2, [pc, #88]	; (8005680 <HAL_TIM_Base_MspInit+0xec>)
 8005626:	f043 0302 	orr.w	r3, r3, #2
 800562a:	6453      	str	r3, [r2, #68]	; 0x44
 800562c:	4b14      	ldr	r3, [pc, #80]	; (8005680 <HAL_TIM_Base_MspInit+0xec>)
 800562e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005630:	f003 0302 	and.w	r3, r3, #2
 8005634:	613b      	str	r3, [r7, #16]
 8005636:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005638:	2300      	movs	r3, #0
 800563a:	60fb      	str	r3, [r7, #12]
 800563c:	4b10      	ldr	r3, [pc, #64]	; (8005680 <HAL_TIM_Base_MspInit+0xec>)
 800563e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005640:	4a0f      	ldr	r2, [pc, #60]	; (8005680 <HAL_TIM_Base_MspInit+0xec>)
 8005642:	f043 0304 	orr.w	r3, r3, #4
 8005646:	6313      	str	r3, [r2, #48]	; 0x30
 8005648:	4b0d      	ldr	r3, [pc, #52]	; (8005680 <HAL_TIM_Base_MspInit+0xec>)
 800564a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564c:	f003 0304 	and.w	r3, r3, #4
 8005650:	60fb      	str	r3, [r7, #12]
 8005652:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8005654:	23c0      	movs	r3, #192	; 0xc0
 8005656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005658:	2302      	movs	r3, #2
 800565a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800565c:	2300      	movs	r3, #0
 800565e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005660:	2300      	movs	r3, #0
 8005662:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005664:	2303      	movs	r3, #3
 8005666:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005668:	f107 031c 	add.w	r3, r7, #28
 800566c:	4619      	mov	r1, r3
 800566e:	4807      	ldr	r0, [pc, #28]	; (800568c <HAL_TIM_Base_MspInit+0xf8>)
 8005670:	f001 fd90 	bl	8007194 <HAL_GPIO_Init>
}
 8005674:	bf00      	nop
 8005676:	3730      	adds	r7, #48	; 0x30
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	40010000 	.word	0x40010000
 8005680:	40023800 	.word	0x40023800
 8005684:	40021000 	.word	0x40021000
 8005688:	40010400 	.word	0x40010400
 800568c:	40020800 	.word	0x40020800

08005690 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b08c      	sub	sp, #48	; 0x30
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005698:	f107 031c 	add.w	r3, r7, #28
 800569c:	2200      	movs	r2, #0
 800569e:	601a      	str	r2, [r3, #0]
 80056a0:	605a      	str	r2, [r3, #4]
 80056a2:	609a      	str	r2, [r3, #8]
 80056a4:	60da      	str	r2, [r3, #12]
 80056a6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056b0:	d14b      	bne.n	800574a <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80056b2:	2300      	movs	r3, #0
 80056b4:	61bb      	str	r3, [r7, #24]
 80056b6:	4b3f      	ldr	r3, [pc, #252]	; (80057b4 <HAL_TIM_Encoder_MspInit+0x124>)
 80056b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ba:	4a3e      	ldr	r2, [pc, #248]	; (80057b4 <HAL_TIM_Encoder_MspInit+0x124>)
 80056bc:	f043 0301 	orr.w	r3, r3, #1
 80056c0:	6413      	str	r3, [r2, #64]	; 0x40
 80056c2:	4b3c      	ldr	r3, [pc, #240]	; (80057b4 <HAL_TIM_Encoder_MspInit+0x124>)
 80056c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	61bb      	str	r3, [r7, #24]
 80056cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056ce:	2300      	movs	r3, #0
 80056d0:	617b      	str	r3, [r7, #20]
 80056d2:	4b38      	ldr	r3, [pc, #224]	; (80057b4 <HAL_TIM_Encoder_MspInit+0x124>)
 80056d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d6:	4a37      	ldr	r2, [pc, #220]	; (80057b4 <HAL_TIM_Encoder_MspInit+0x124>)
 80056d8:	f043 0301 	orr.w	r3, r3, #1
 80056dc:	6313      	str	r3, [r2, #48]	; 0x30
 80056de:	4b35      	ldr	r3, [pc, #212]	; (80057b4 <HAL_TIM_Encoder_MspInit+0x124>)
 80056e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	617b      	str	r3, [r7, #20]
 80056e8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056ea:	2300      	movs	r3, #0
 80056ec:	613b      	str	r3, [r7, #16]
 80056ee:	4b31      	ldr	r3, [pc, #196]	; (80057b4 <HAL_TIM_Encoder_MspInit+0x124>)
 80056f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f2:	4a30      	ldr	r2, [pc, #192]	; (80057b4 <HAL_TIM_Encoder_MspInit+0x124>)
 80056f4:	f043 0302 	orr.w	r3, r3, #2
 80056f8:	6313      	str	r3, [r2, #48]	; 0x30
 80056fa:	4b2e      	ldr	r3, [pc, #184]	; (80057b4 <HAL_TIM_Encoder_MspInit+0x124>)
 80056fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fe:	f003 0302 	and.w	r3, r3, #2
 8005702:	613b      	str	r3, [r7, #16]
 8005704:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800570a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800570c:	2302      	movs	r3, #2
 800570e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005710:	2300      	movs	r3, #0
 8005712:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005714:	2300      	movs	r3, #0
 8005716:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005718:	2301      	movs	r3, #1
 800571a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800571c:	f107 031c 	add.w	r3, r7, #28
 8005720:	4619      	mov	r1, r3
 8005722:	4825      	ldr	r0, [pc, #148]	; (80057b8 <HAL_TIM_Encoder_MspInit+0x128>)
 8005724:	f001 fd36 	bl	8007194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005728:	2308      	movs	r3, #8
 800572a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800572c:	2302      	movs	r3, #2
 800572e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005730:	2300      	movs	r3, #0
 8005732:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005734:	2300      	movs	r3, #0
 8005736:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005738:	2301      	movs	r3, #1
 800573a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800573c:	f107 031c 	add.w	r3, r7, #28
 8005740:	4619      	mov	r1, r3
 8005742:	481e      	ldr	r0, [pc, #120]	; (80057bc <HAL_TIM_Encoder_MspInit+0x12c>)
 8005744:	f001 fd26 	bl	8007194 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005748:	e030      	b.n	80057ac <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a1c      	ldr	r2, [pc, #112]	; (80057c0 <HAL_TIM_Encoder_MspInit+0x130>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d12b      	bne.n	80057ac <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005754:	2300      	movs	r3, #0
 8005756:	60fb      	str	r3, [r7, #12]
 8005758:	4b16      	ldr	r3, [pc, #88]	; (80057b4 <HAL_TIM_Encoder_MspInit+0x124>)
 800575a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575c:	4a15      	ldr	r2, [pc, #84]	; (80057b4 <HAL_TIM_Encoder_MspInit+0x124>)
 800575e:	f043 0302 	orr.w	r3, r3, #2
 8005762:	6413      	str	r3, [r2, #64]	; 0x40
 8005764:	4b13      	ldr	r3, [pc, #76]	; (80057b4 <HAL_TIM_Encoder_MspInit+0x124>)
 8005766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	60fb      	str	r3, [r7, #12]
 800576e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005770:	2300      	movs	r3, #0
 8005772:	60bb      	str	r3, [r7, #8]
 8005774:	4b0f      	ldr	r3, [pc, #60]	; (80057b4 <HAL_TIM_Encoder_MspInit+0x124>)
 8005776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005778:	4a0e      	ldr	r2, [pc, #56]	; (80057b4 <HAL_TIM_Encoder_MspInit+0x124>)
 800577a:	f043 0301 	orr.w	r3, r3, #1
 800577e:	6313      	str	r3, [r2, #48]	; 0x30
 8005780:	4b0c      	ldr	r3, [pc, #48]	; (80057b4 <HAL_TIM_Encoder_MspInit+0x124>)
 8005782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005784:	f003 0301 	and.w	r3, r3, #1
 8005788:	60bb      	str	r3, [r7, #8]
 800578a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800578c:	23c0      	movs	r3, #192	; 0xc0
 800578e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005790:	2302      	movs	r3, #2
 8005792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005794:	2300      	movs	r3, #0
 8005796:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005798:	2300      	movs	r3, #0
 800579a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800579c:	2302      	movs	r3, #2
 800579e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057a0:	f107 031c 	add.w	r3, r7, #28
 80057a4:	4619      	mov	r1, r3
 80057a6:	4804      	ldr	r0, [pc, #16]	; (80057b8 <HAL_TIM_Encoder_MspInit+0x128>)
 80057a8:	f001 fcf4 	bl	8007194 <HAL_GPIO_Init>
}
 80057ac:	bf00      	nop
 80057ae:	3730      	adds	r7, #48	; 0x30
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	40023800 	.word	0x40023800
 80057b8:	40020000 	.word	0x40020000
 80057bc:	40020400 	.word	0x40020400
 80057c0:	40000400 	.word	0x40000400

080057c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b088      	sub	sp, #32
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057cc:	f107 030c 	add.w	r3, r7, #12
 80057d0:	2200      	movs	r2, #0
 80057d2:	601a      	str	r2, [r3, #0]
 80057d4:	605a      	str	r2, [r3, #4]
 80057d6:	609a      	str	r2, [r3, #8]
 80057d8:	60da      	str	r2, [r3, #12]
 80057da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a12      	ldr	r2, [pc, #72]	; (800582c <HAL_TIM_MspPostInit+0x68>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d11e      	bne.n	8005824 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80057e6:	2300      	movs	r3, #0
 80057e8:	60bb      	str	r3, [r7, #8]
 80057ea:	4b11      	ldr	r3, [pc, #68]	; (8005830 <HAL_TIM_MspPostInit+0x6c>)
 80057ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ee:	4a10      	ldr	r2, [pc, #64]	; (8005830 <HAL_TIM_MspPostInit+0x6c>)
 80057f0:	f043 0310 	orr.w	r3, r3, #16
 80057f4:	6313      	str	r3, [r2, #48]	; 0x30
 80057f6:	4b0e      	ldr	r3, [pc, #56]	; (8005830 <HAL_TIM_MspPostInit+0x6c>)
 80057f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fa:	f003 0310 	and.w	r3, r3, #16
 80057fe:	60bb      	str	r3, [r7, #8]
 8005800:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005802:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005806:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005808:	2302      	movs	r3, #2
 800580a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800580c:	2300      	movs	r3, #0
 800580e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005810:	2300      	movs	r3, #0
 8005812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005814:	2301      	movs	r3, #1
 8005816:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005818:	f107 030c 	add.w	r3, r7, #12
 800581c:	4619      	mov	r1, r3
 800581e:	4805      	ldr	r0, [pc, #20]	; (8005834 <HAL_TIM_MspPostInit+0x70>)
 8005820:	f001 fcb8 	bl	8007194 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005824:	bf00      	nop
 8005826:	3720      	adds	r7, #32
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	40010000 	.word	0x40010000
 8005830:	40023800 	.word	0x40023800
 8005834:	40021000 	.word	0x40021000

08005838 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b08a      	sub	sp, #40	; 0x28
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005840:	f107 0314 	add.w	r3, r7, #20
 8005844:	2200      	movs	r2, #0
 8005846:	601a      	str	r2, [r3, #0]
 8005848:	605a      	str	r2, [r3, #4]
 800584a:	609a      	str	r2, [r3, #8]
 800584c:	60da      	str	r2, [r3, #12]
 800584e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a5d      	ldr	r2, [pc, #372]	; (80059cc <HAL_UART_MspInit+0x194>)
 8005856:	4293      	cmp	r3, r2
 8005858:	f040 80b4 	bne.w	80059c4 <HAL_UART_MspInit+0x18c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800585c:	2300      	movs	r3, #0
 800585e:	613b      	str	r3, [r7, #16]
 8005860:	4b5b      	ldr	r3, [pc, #364]	; (80059d0 <HAL_UART_MspInit+0x198>)
 8005862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005864:	4a5a      	ldr	r2, [pc, #360]	; (80059d0 <HAL_UART_MspInit+0x198>)
 8005866:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800586a:	6413      	str	r3, [r2, #64]	; 0x40
 800586c:	4b58      	ldr	r3, [pc, #352]	; (80059d0 <HAL_UART_MspInit+0x198>)
 800586e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005870:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005874:	613b      	str	r3, [r7, #16]
 8005876:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005878:	2300      	movs	r3, #0
 800587a:	60fb      	str	r3, [r7, #12]
 800587c:	4b54      	ldr	r3, [pc, #336]	; (80059d0 <HAL_UART_MspInit+0x198>)
 800587e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005880:	4a53      	ldr	r2, [pc, #332]	; (80059d0 <HAL_UART_MspInit+0x198>)
 8005882:	f043 0304 	orr.w	r3, r3, #4
 8005886:	6313      	str	r3, [r2, #48]	; 0x30
 8005888:	4b51      	ldr	r3, [pc, #324]	; (80059d0 <HAL_UART_MspInit+0x198>)
 800588a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588c:	f003 0304 	and.w	r3, r3, #4
 8005890:	60fb      	str	r3, [r7, #12]
 8005892:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005894:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800589a:	2302      	movs	r3, #2
 800589c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800589e:	2300      	movs	r3, #0
 80058a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80058a2:	2302      	movs	r3, #2
 80058a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80058a6:	2307      	movs	r3, #7
 80058a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058aa:	f107 0314 	add.w	r3, r7, #20
 80058ae:	4619      	mov	r1, r3
 80058b0:	4848      	ldr	r0, [pc, #288]	; (80059d4 <HAL_UART_MspInit+0x19c>)
 80058b2:	f001 fc6f 	bl	8007194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80058b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80058ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058bc:	2302      	movs	r3, #2
 80058be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80058c0:	2302      	movs	r3, #2
 80058c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80058c4:	2302      	movs	r3, #2
 80058c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80058c8:	2307      	movs	r3, #7
 80058ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058cc:	f107 0314 	add.w	r3, r7, #20
 80058d0:	4619      	mov	r1, r3
 80058d2:	4840      	ldr	r0, [pc, #256]	; (80059d4 <HAL_UART_MspInit+0x19c>)
 80058d4:	f001 fc5e 	bl	8007194 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80058d8:	4b3f      	ldr	r3, [pc, #252]	; (80059d8 <HAL_UART_MspInit+0x1a0>)
 80058da:	4a40      	ldr	r2, [pc, #256]	; (80059dc <HAL_UART_MspInit+0x1a4>)
 80058dc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80058de:	4b3e      	ldr	r3, [pc, #248]	; (80059d8 <HAL_UART_MspInit+0x1a0>)
 80058e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80058e4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80058e6:	4b3c      	ldr	r3, [pc, #240]	; (80059d8 <HAL_UART_MspInit+0x1a0>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80058ec:	4b3a      	ldr	r3, [pc, #232]	; (80059d8 <HAL_UART_MspInit+0x1a0>)
 80058ee:	2200      	movs	r2, #0
 80058f0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80058f2:	4b39      	ldr	r3, [pc, #228]	; (80059d8 <HAL_UART_MspInit+0x1a0>)
 80058f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80058f8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80058fa:	4b37      	ldr	r3, [pc, #220]	; (80059d8 <HAL_UART_MspInit+0x1a0>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005900:	4b35      	ldr	r3, [pc, #212]	; (80059d8 <HAL_UART_MspInit+0x1a0>)
 8005902:	2200      	movs	r2, #0
 8005904:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8005906:	4b34      	ldr	r3, [pc, #208]	; (80059d8 <HAL_UART_MspInit+0x1a0>)
 8005908:	2200      	movs	r2, #0
 800590a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800590c:	4b32      	ldr	r3, [pc, #200]	; (80059d8 <HAL_UART_MspInit+0x1a0>)
 800590e:	2200      	movs	r2, #0
 8005910:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005912:	4b31      	ldr	r3, [pc, #196]	; (80059d8 <HAL_UART_MspInit+0x1a0>)
 8005914:	2204      	movs	r2, #4
 8005916:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005918:	4b2f      	ldr	r3, [pc, #188]	; (80059d8 <HAL_UART_MspInit+0x1a0>)
 800591a:	2203      	movs	r2, #3
 800591c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800591e:	4b2e      	ldr	r3, [pc, #184]	; (80059d8 <HAL_UART_MspInit+0x1a0>)
 8005920:	2200      	movs	r2, #0
 8005922:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005924:	4b2c      	ldr	r3, [pc, #176]	; (80059d8 <HAL_UART_MspInit+0x1a0>)
 8005926:	2200      	movs	r2, #0
 8005928:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800592a:	482b      	ldr	r0, [pc, #172]	; (80059d8 <HAL_UART_MspInit+0x1a0>)
 800592c:	f001 f830 	bl	8006990 <HAL_DMA_Init>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d001      	beq.n	800593a <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 8005936:	f7ff fb9f 	bl	8005078 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a26      	ldr	r2, [pc, #152]	; (80059d8 <HAL_UART_MspInit+0x1a0>)
 800593e:	639a      	str	r2, [r3, #56]	; 0x38
 8005940:	4a25      	ldr	r2, [pc, #148]	; (80059d8 <HAL_UART_MspInit+0x1a0>)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8005946:	4b26      	ldr	r3, [pc, #152]	; (80059e0 <HAL_UART_MspInit+0x1a8>)
 8005948:	4a26      	ldr	r2, [pc, #152]	; (80059e4 <HAL_UART_MspInit+0x1ac>)
 800594a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800594c:	4b24      	ldr	r3, [pc, #144]	; (80059e0 <HAL_UART_MspInit+0x1a8>)
 800594e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005952:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005954:	4b22      	ldr	r3, [pc, #136]	; (80059e0 <HAL_UART_MspInit+0x1a8>)
 8005956:	2240      	movs	r2, #64	; 0x40
 8005958:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800595a:	4b21      	ldr	r3, [pc, #132]	; (80059e0 <HAL_UART_MspInit+0x1a8>)
 800595c:	2200      	movs	r2, #0
 800595e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005960:	4b1f      	ldr	r3, [pc, #124]	; (80059e0 <HAL_UART_MspInit+0x1a8>)
 8005962:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005966:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005968:	4b1d      	ldr	r3, [pc, #116]	; (80059e0 <HAL_UART_MspInit+0x1a8>)
 800596a:	2200      	movs	r2, #0
 800596c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800596e:	4b1c      	ldr	r3, [pc, #112]	; (80059e0 <HAL_UART_MspInit+0x1a8>)
 8005970:	2200      	movs	r2, #0
 8005972:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8005974:	4b1a      	ldr	r3, [pc, #104]	; (80059e0 <HAL_UART_MspInit+0x1a8>)
 8005976:	2200      	movs	r2, #0
 8005978:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800597a:	4b19      	ldr	r3, [pc, #100]	; (80059e0 <HAL_UART_MspInit+0x1a8>)
 800597c:	2200      	movs	r2, #0
 800597e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005980:	4b17      	ldr	r3, [pc, #92]	; (80059e0 <HAL_UART_MspInit+0x1a8>)
 8005982:	2204      	movs	r2, #4
 8005984:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005986:	4b16      	ldr	r3, [pc, #88]	; (80059e0 <HAL_UART_MspInit+0x1a8>)
 8005988:	2203      	movs	r2, #3
 800598a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800598c:	4b14      	ldr	r3, [pc, #80]	; (80059e0 <HAL_UART_MspInit+0x1a8>)
 800598e:	2200      	movs	r2, #0
 8005990:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005992:	4b13      	ldr	r3, [pc, #76]	; (80059e0 <HAL_UART_MspInit+0x1a8>)
 8005994:	2200      	movs	r2, #0
 8005996:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8005998:	4811      	ldr	r0, [pc, #68]	; (80059e0 <HAL_UART_MspInit+0x1a8>)
 800599a:	f000 fff9 	bl	8006990 <HAL_DMA_Init>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d001      	beq.n	80059a8 <HAL_UART_MspInit+0x170>
    {
      Error_Handler();
 80059a4:	f7ff fb68 	bl	8005078 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a0d      	ldr	r2, [pc, #52]	; (80059e0 <HAL_UART_MspInit+0x1a8>)
 80059ac:	635a      	str	r2, [r3, #52]	; 0x34
 80059ae:	4a0c      	ldr	r2, [pc, #48]	; (80059e0 <HAL_UART_MspInit+0x1a8>)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80059b4:	2200      	movs	r2, #0
 80059b6:	2105      	movs	r1, #5
 80059b8:	2027      	movs	r0, #39	; 0x27
 80059ba:	f000 ffbf 	bl	800693c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80059be:	2027      	movs	r0, #39	; 0x27
 80059c0:	f000 ffd8 	bl	8006974 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80059c4:	bf00      	nop
 80059c6:	3728      	adds	r7, #40	; 0x28
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	40004800 	.word	0x40004800
 80059d0:	40023800 	.word	0x40023800
 80059d4:	40020800 	.word	0x40020800
 80059d8:	20000b60 	.word	0x20000b60
 80059dc:	40026028 	.word	0x40026028
 80059e0:	20000bc0 	.word	0x20000bc0
 80059e4:	40026058 	.word	0x40026058

080059e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b08e      	sub	sp, #56	; 0x38
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80059f0:	2300      	movs	r3, #0
 80059f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80059f4:	2300      	movs	r3, #0
 80059f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80059f8:	2300      	movs	r3, #0
 80059fa:	60fb      	str	r3, [r7, #12]
 80059fc:	4b33      	ldr	r3, [pc, #204]	; (8005acc <HAL_InitTick+0xe4>)
 80059fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a00:	4a32      	ldr	r2, [pc, #200]	; (8005acc <HAL_InitTick+0xe4>)
 8005a02:	f043 0320 	orr.w	r3, r3, #32
 8005a06:	6413      	str	r3, [r2, #64]	; 0x40
 8005a08:	4b30      	ldr	r3, [pc, #192]	; (8005acc <HAL_InitTick+0xe4>)
 8005a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0c:	f003 0320 	and.w	r3, r3, #32
 8005a10:	60fb      	str	r3, [r7, #12]
 8005a12:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005a14:	f107 0210 	add.w	r2, r7, #16
 8005a18:	f107 0314 	add.w	r3, r7, #20
 8005a1c:	4611      	mov	r1, r2
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f003 fb4e 	bl	80090c0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005a24:	6a3b      	ldr	r3, [r7, #32]
 8005a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d103      	bne.n	8005a36 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005a2e:	f003 fb1f 	bl	8009070 <HAL_RCC_GetPCLK1Freq>
 8005a32:	6378      	str	r0, [r7, #52]	; 0x34
 8005a34:	e004      	b.n	8005a40 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005a36:	f003 fb1b 	bl	8009070 <HAL_RCC_GetPCLK1Freq>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	005b      	lsls	r3, r3, #1
 8005a3e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a42:	4a23      	ldr	r2, [pc, #140]	; (8005ad0 <HAL_InitTick+0xe8>)
 8005a44:	fba2 2303 	umull	r2, r3, r2, r3
 8005a48:	0c9b      	lsrs	r3, r3, #18
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8005a4e:	4b21      	ldr	r3, [pc, #132]	; (8005ad4 <HAL_InitTick+0xec>)
 8005a50:	4a21      	ldr	r2, [pc, #132]	; (8005ad8 <HAL_InitTick+0xf0>)
 8005a52:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8005a54:	4b1f      	ldr	r3, [pc, #124]	; (8005ad4 <HAL_InitTick+0xec>)
 8005a56:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005a5a:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8005a5c:	4a1d      	ldr	r2, [pc, #116]	; (8005ad4 <HAL_InitTick+0xec>)
 8005a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a60:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8005a62:	4b1c      	ldr	r3, [pc, #112]	; (8005ad4 <HAL_InitTick+0xec>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a68:	4b1a      	ldr	r3, [pc, #104]	; (8005ad4 <HAL_InitTick+0xec>)
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a6e:	4b19      	ldr	r3, [pc, #100]	; (8005ad4 <HAL_InitTick+0xec>)
 8005a70:	2200      	movs	r2, #0
 8005a72:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8005a74:	4817      	ldr	r0, [pc, #92]	; (8005ad4 <HAL_InitTick+0xec>)
 8005a76:	f003 fb55 	bl	8009124 <HAL_TIM_Base_Init>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8005a80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d11b      	bne.n	8005ac0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8005a88:	4812      	ldr	r0, [pc, #72]	; (8005ad4 <HAL_InitTick+0xec>)
 8005a8a:	f003 fb9b 	bl	80091c4 <HAL_TIM_Base_Start_IT>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8005a94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d111      	bne.n	8005ac0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005a9c:	2037      	movs	r0, #55	; 0x37
 8005a9e:	f000 ff69 	bl	8006974 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2b0f      	cmp	r3, #15
 8005aa6:	d808      	bhi.n	8005aba <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	6879      	ldr	r1, [r7, #4]
 8005aac:	2037      	movs	r0, #55	; 0x37
 8005aae:	f000 ff45 	bl	800693c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005ab2:	4a0a      	ldr	r2, [pc, #40]	; (8005adc <HAL_InitTick+0xf4>)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6013      	str	r3, [r2, #0]
 8005ab8:	e002      	b.n	8005ac0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8005ac0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3738      	adds	r7, #56	; 0x38
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	40023800 	.word	0x40023800
 8005ad0:	431bde83 	.word	0x431bde83
 8005ad4:	20000c24 	.word	0x20000c24
 8005ad8:	40001400 	.word	0x40001400
 8005adc:	20000060 	.word	0x20000060

08005ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005ae4:	e7fe      	b.n	8005ae4 <NMI_Handler+0x4>

08005ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005aea:	e7fe      	b.n	8005aea <HardFault_Handler+0x4>

08005aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005aec:	b480      	push	{r7}
 8005aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005af0:	e7fe      	b.n	8005af0 <MemManage_Handler+0x4>

08005af2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005af2:	b480      	push	{r7}
 8005af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005af6:	e7fe      	b.n	8005af6 <BusFault_Handler+0x4>

08005af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005af8:	b480      	push	{r7}
 8005afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005afc:	e7fe      	b.n	8005afc <UsageFault_Handler+0x4>

08005afe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005afe:	b480      	push	{r7}
 8005b00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005b02:	bf00      	nop
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005b10:	4802      	ldr	r0, [pc, #8]	; (8005b1c <DMA1_Stream1_IRQHandler+0x10>)
 8005b12:	f001 f8d5 	bl	8006cc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8005b16:	bf00      	nop
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	20000b60 	.word	0x20000b60

08005b20 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8005b24:	4802      	ldr	r0, [pc, #8]	; (8005b30 <DMA1_Stream3_IRQHandler+0x10>)
 8005b26:	f001 f8cb 	bl	8006cc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8005b2a:	bf00      	nop
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	20000bc0 	.word	0x20000bc0

08005b34 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005b38:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005b3c:	f001 fcfa 	bl	8007534 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005b40:	bf00      	nop
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005b48:	4802      	ldr	r0, [pc, #8]	; (8005b54 <USART3_IRQHandler+0x10>)
 8005b4a:	f004 fe49 	bl	800a7e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005b4e:	bf00      	nop
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	20000aec 	.word	0x20000aec

08005b58 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005b5c:	4802      	ldr	r0, [pc, #8]	; (8005b68 <TIM7_IRQHandler+0x10>)
 8005b5e:	f003 fdf7 	bl	8009750 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005b62:	bf00      	nop
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	20000c24 	.word	0x20000c24

08005b6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	af00      	add	r7, sp, #0
  return 1;
 8005b70:	2301      	movs	r3, #1
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <_kill>:

int _kill(int pid, int sig)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005b86:	f00a fa91 	bl	80100ac <__errno>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2216      	movs	r2, #22
 8005b8e:	601a      	str	r2, [r3, #0]
  return -1;
 8005b90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3708      	adds	r7, #8
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <_exit>:

void _exit (int status)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f7ff ffe7 	bl	8005b7c <_kill>
  while (1) {}    /* Make sure we hang here */
 8005bae:	e7fe      	b.n	8005bae <_exit+0x12>

08005bb0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	617b      	str	r3, [r7, #20]
 8005bc0:	e00a      	b.n	8005bd8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005bc2:	f3af 8000 	nop.w
 8005bc6:	4601      	mov	r1, r0
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	1c5a      	adds	r2, r3, #1
 8005bcc:	60ba      	str	r2, [r7, #8]
 8005bce:	b2ca      	uxtb	r2, r1
 8005bd0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	617b      	str	r3, [r7, #20]
 8005bd8:	697a      	ldr	r2, [r7, #20]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	dbf0      	blt.n	8005bc2 <_read+0x12>
  }

  return len;
 8005be0:	687b      	ldr	r3, [r7, #4]
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3718      	adds	r7, #24
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b086      	sub	sp, #24
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	60f8      	str	r0, [r7, #12]
 8005bf2:	60b9      	str	r1, [r7, #8]
 8005bf4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	617b      	str	r3, [r7, #20]
 8005bfa:	e009      	b.n	8005c10 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	1c5a      	adds	r2, r3, #1
 8005c00:	60ba      	str	r2, [r7, #8]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7fe fd81 	bl	800470c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	617b      	str	r3, [r7, #20]
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	dbf1      	blt.n	8005bfc <_write+0x12>
  }
  return len;
 8005c18:	687b      	ldr	r3, [r7, #4]
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3718      	adds	r7, #24
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}

08005c22 <_close>:

int _close(int file)
{
 8005c22:	b480      	push	{r7}
 8005c24:	b083      	sub	sp, #12
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005c2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b083      	sub	sp, #12
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
 8005c42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005c4a:	605a      	str	r2, [r3, #4]
  return 0;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	370c      	adds	r7, #12
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <_isatty>:

int _isatty(int file)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b083      	sub	sp, #12
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005c62:	2301      	movs	r3, #1
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3714      	adds	r7, #20
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
	...

08005c8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b086      	sub	sp, #24
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005c94:	4a14      	ldr	r2, [pc, #80]	; (8005ce8 <_sbrk+0x5c>)
 8005c96:	4b15      	ldr	r3, [pc, #84]	; (8005cec <_sbrk+0x60>)
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005ca0:	4b13      	ldr	r3, [pc, #76]	; (8005cf0 <_sbrk+0x64>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d102      	bne.n	8005cae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005ca8:	4b11      	ldr	r3, [pc, #68]	; (8005cf0 <_sbrk+0x64>)
 8005caa:	4a12      	ldr	r2, [pc, #72]	; (8005cf4 <_sbrk+0x68>)
 8005cac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005cae:	4b10      	ldr	r3, [pc, #64]	; (8005cf0 <_sbrk+0x64>)
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d207      	bcs.n	8005ccc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005cbc:	f00a f9f6 	bl	80100ac <__errno>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	220c      	movs	r2, #12
 8005cc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8005cca:	e009      	b.n	8005ce0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005ccc:	4b08      	ldr	r3, [pc, #32]	; (8005cf0 <_sbrk+0x64>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005cd2:	4b07      	ldr	r3, [pc, #28]	; (8005cf0 <_sbrk+0x64>)
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4413      	add	r3, r2
 8005cda:	4a05      	ldr	r2, [pc, #20]	; (8005cf0 <_sbrk+0x64>)
 8005cdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005cde:	68fb      	ldr	r3, [r7, #12]
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3718      	adds	r7, #24
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	20020000 	.word	0x20020000
 8005cec:	00000800 	.word	0x00000800
 8005cf0:	20000c6c 	.word	0x20000c6c
 8005cf4:	20005cb8 	.word	0x20005cb8

08005cf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005cfc:	4b06      	ldr	r3, [pc, #24]	; (8005d18 <SystemInit+0x20>)
 8005cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d02:	4a05      	ldr	r2, [pc, #20]	; (8005d18 <SystemInit+0x20>)
 8005d04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005d0c:	bf00      	nop
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	e000ed00 	.word	0xe000ed00

08005d1c <Reset_Handler>:
 8005d1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005d54 <LoopFillZerobss+0x12>
 8005d20:	480d      	ldr	r0, [pc, #52]	; (8005d58 <LoopFillZerobss+0x16>)
 8005d22:	490e      	ldr	r1, [pc, #56]	; (8005d5c <LoopFillZerobss+0x1a>)
 8005d24:	4a0e      	ldr	r2, [pc, #56]	; (8005d60 <LoopFillZerobss+0x1e>)
 8005d26:	2300      	movs	r3, #0
 8005d28:	e002      	b.n	8005d30 <LoopCopyDataInit>

08005d2a <CopyDataInit>:
 8005d2a:	58d4      	ldr	r4, [r2, r3]
 8005d2c:	50c4      	str	r4, [r0, r3]
 8005d2e:	3304      	adds	r3, #4

08005d30 <LoopCopyDataInit>:
 8005d30:	18c4      	adds	r4, r0, r3
 8005d32:	428c      	cmp	r4, r1
 8005d34:	d3f9      	bcc.n	8005d2a <CopyDataInit>
 8005d36:	4a0b      	ldr	r2, [pc, #44]	; (8005d64 <LoopFillZerobss+0x22>)
 8005d38:	4c0b      	ldr	r4, [pc, #44]	; (8005d68 <LoopFillZerobss+0x26>)
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	e001      	b.n	8005d42 <LoopFillZerobss>

08005d3e <FillZerobss>:
 8005d3e:	6013      	str	r3, [r2, #0]
 8005d40:	3204      	adds	r2, #4

08005d42 <LoopFillZerobss>:
 8005d42:	42a2      	cmp	r2, r4
 8005d44:	d3fb      	bcc.n	8005d3e <FillZerobss>
 8005d46:	f7ff ffd7 	bl	8005cf8 <SystemInit>
 8005d4a:	f00a faab 	bl	80102a4 <__libc_init_array>
 8005d4e:	f7fe fcef 	bl	8004730 <main>
 8005d52:	4770      	bx	lr
 8005d54:	20020000 	.word	0x20020000
 8005d58:	20000000 	.word	0x20000000
 8005d5c:	2000023c 	.word	0x2000023c
 8005d60:	08014444 	.word	0x08014444
 8005d64:	2000023c 	.word	0x2000023c
 8005d68:	20005cb8 	.word	0x20005cb8

08005d6c <ADC_IRQHandler>:
 8005d6c:	e7fe      	b.n	8005d6c <ADC_IRQHandler>

08005d6e <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b084      	sub	sp, #16
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d104      	bne.n	8005d86 <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8005d7c:	b672      	cpsid	i
}
 8005d7e:	bf00      	nop
 8005d80:	f7ff f97a 	bl	8005078 <Error_Handler>
 8005d84:	e7fe      	b.n	8005d84 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8005d86:	2300      	movs	r3, #0
 8005d88:	60fb      	str	r3, [r7, #12]
 8005d8a:	e007      	b.n	8005d9c <stm32_lock_init+0x2e>
  {
    lock->basepri[i] = 0;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	2100      	movs	r1, #0
 8005d92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	3301      	adds	r3, #1
 8005d9a:	60fb      	str	r3, [r7, #12]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d9f4      	bls.n	8005d8c <stm32_lock_init+0x1e>
  }
  lock->nesting_level = 0;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	721a      	strb	r2, [r3, #8]
}
 8005da8:	bf00      	nop
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d104      	bne.n	8005dc8 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8005dbe:	b672      	cpsid	i
}
 8005dc0:	bf00      	nop
 8005dc2:	f7ff f959 	bl	8005078 <Error_Handler>
 8005dc6:	e7fe      	b.n	8005dc6 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	7a1b      	ldrb	r3, [r3, #8]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d904      	bls.n	8005dda <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8005dd0:	b672      	cpsid	i
}
 8005dd2:	bf00      	nop
 8005dd4:	f7ff f950 	bl	8005078 <Error_Handler>
 8005dd8:	e7fe      	b.n	8005dd8 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	7a1b      	ldrb	r3, [r3, #8]
 8005dde:	1c5a      	adds	r2, r3, #1
 8005de0:	b2d1      	uxtb	r1, r2
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	7211      	strb	r1, [r2, #8]
 8005de6:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005de8:	f3ef 8211 	mrs	r2, BASEPRI
 8005dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df0:	f383 8811 	msr	BASEPRI, r3
 8005df4:	f3bf 8f6f 	isb	sy
 8005df8:	f3bf 8f4f 	dsb	sy
 8005dfc:	60fa      	str	r2, [r7, #12]
 8005dfe:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8005e08:	bf00      	nop
 8005e0a:	3710      	adds	r7, #16
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d104      	bne.n	8005e28 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8005e1e:	b672      	cpsid	i
}
 8005e20:	bf00      	nop
 8005e22:	f7ff f929 	bl	8005078 <Error_Handler>
 8005e26:	e7fe      	b.n	8005e26 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	7a1b      	ldrb	r3, [r3, #8]
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	b2da      	uxtb	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	7a1b      	ldrb	r3, [r3, #8]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d904      	bls.n	8005e46 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8005e3c:	b672      	cpsid	i
}
 8005e3e:	bf00      	nop
 8005e40:	f7ff f91a 	bl	8005078 <Error_Handler>
 8005e44:	e7fe      	b.n	8005e44 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	7a1b      	ldrb	r3, [r3, #8]
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e52:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005e5a:	bf00      	nop
}
 8005e5c:	bf00      	nop
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d105      	bne.n	8005e7e <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8005e72:	f00a f91b 	bl	80100ac <__errno>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2216      	movs	r2, #22
 8005e7a:	601a      	str	r2, [r3, #0]
    return;
 8005e7c:	e015      	b.n	8005eaa <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8005e7e:	200c      	movs	r0, #12
 8005e80:	f00a fa34 	bl	80102ec <malloc>
 8005e84:	4603      	mov	r3, r0
 8005e86:	461a      	mov	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d005      	beq.n	8005ea0 <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7ff ff68 	bl	8005d6e <stm32_lock_init>
    return;
 8005e9e:	e004      	b.n	8005eaa <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 8005ea0:	b672      	cpsid	i
}
 8005ea2:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8005ea4:	f7ff f8e8 	bl	8005078 <Error_Handler>
 8005ea8:	e7fe      	b.n	8005ea8 <__retarget_lock_init_recursive+0x44>
}
 8005eaa:	3708      	adds	r7, #8
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d104      	bne.n	8005ec8 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8005ebe:	b672      	cpsid	i
}
 8005ec0:	bf00      	nop
 8005ec2:	f7ff f8d9 	bl	8005078 <Error_Handler>
 8005ec6:	e7fe      	b.n	8005ec6 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7ff ff70 	bl	8005db0 <stm32_lock_acquire>
}
 8005ed0:	bf00      	nop
 8005ed2:	3708      	adds	r7, #8
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d104      	bne.n	8005ef0 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8005ee6:	b672      	cpsid	i
}
 8005ee8:	bf00      	nop
 8005eea:	f7ff f8c5 	bl	8005078 <Error_Handler>
 8005eee:	e7fe      	b.n	8005eee <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7ff ff8c 	bl	8005e10 <stm32_lock_release>
}
 8005ef8:	bf00      	nop
 8005efa:	3708      	adds	r7, #8
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005f04:	4b0e      	ldr	r3, [pc, #56]	; (8005f40 <HAL_Init+0x40>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a0d      	ldr	r2, [pc, #52]	; (8005f40 <HAL_Init+0x40>)
 8005f0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005f10:	4b0b      	ldr	r3, [pc, #44]	; (8005f40 <HAL_Init+0x40>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a0a      	ldr	r2, [pc, #40]	; (8005f40 <HAL_Init+0x40>)
 8005f16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005f1c:	4b08      	ldr	r3, [pc, #32]	; (8005f40 <HAL_Init+0x40>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a07      	ldr	r2, [pc, #28]	; (8005f40 <HAL_Init+0x40>)
 8005f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005f28:	2003      	movs	r0, #3
 8005f2a:	f000 fcfc 	bl	8006926 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005f2e:	200f      	movs	r0, #15
 8005f30:	f7ff fd5a 	bl	80059e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005f34:	f7ff fa44 	bl	80053c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	40023c00 	.word	0x40023c00

08005f44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005f44:	b480      	push	{r7}
 8005f46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005f48:	4b06      	ldr	r3, [pc, #24]	; (8005f64 <HAL_IncTick+0x20>)
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	4b06      	ldr	r3, [pc, #24]	; (8005f68 <HAL_IncTick+0x24>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4413      	add	r3, r2
 8005f54:	4a04      	ldr	r2, [pc, #16]	; (8005f68 <HAL_IncTick+0x24>)
 8005f56:	6013      	str	r3, [r2, #0]
}
 8005f58:	bf00      	nop
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	20000064 	.word	0x20000064
 8005f68:	20000c94 	.word	0x20000c94

08005f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8005f70:	4b03      	ldr	r3, [pc, #12]	; (8005f80 <HAL_GetTick+0x14>)
 8005f72:	681b      	ldr	r3, [r3, #0]
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	20000c94 	.word	0x20000c94

08005f84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005f8c:	f7ff ffee 	bl	8005f6c <HAL_GetTick>
 8005f90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f9c:	d005      	beq.n	8005faa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005f9e:	4b0a      	ldr	r3, [pc, #40]	; (8005fc8 <HAL_Delay+0x44>)
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005faa:	bf00      	nop
 8005fac:	f7ff ffde 	bl	8005f6c <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d8f7      	bhi.n	8005fac <HAL_Delay+0x28>
  {
  }
}
 8005fbc:	bf00      	nop
 8005fbe:	bf00      	nop
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	20000064 	.word	0x20000064

08005fcc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d101      	bne.n	8005fe2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e033      	b.n	800604a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d109      	bne.n	8005ffe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f7ff fa14 	bl	8005418 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006002:	f003 0310 	and.w	r3, r3, #16
 8006006:	2b00      	cmp	r3, #0
 8006008:	d118      	bne.n	800603c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006012:	f023 0302 	bic.w	r3, r3, #2
 8006016:	f043 0202 	orr.w	r2, r3, #2
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 fad8 	bl	80065d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602e:	f023 0303 	bic.w	r3, r3, #3
 8006032:	f043 0201 	orr.w	r2, r3, #1
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	641a      	str	r2, [r3, #64]	; 0x40
 800603a:	e001      	b.n	8006040 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006048:	7bfb      	ldrb	r3, [r7, #15]
}
 800604a:	4618      	mov	r0, r3
 800604c:	3710      	adds	r7, #16
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
	...

08006054 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800605c:	2300      	movs	r3, #0
 800605e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006066:	2b01      	cmp	r3, #1
 8006068:	d101      	bne.n	800606e <HAL_ADC_Start+0x1a>
 800606a:	2302      	movs	r3, #2
 800606c:	e0b2      	b.n	80061d4 <HAL_ADC_Start+0x180>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	f003 0301 	and.w	r3, r3, #1
 8006080:	2b01      	cmp	r3, #1
 8006082:	d018      	beq.n	80060b6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	689a      	ldr	r2, [r3, #8]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f042 0201 	orr.w	r2, r2, #1
 8006092:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006094:	4b52      	ldr	r3, [pc, #328]	; (80061e0 <HAL_ADC_Start+0x18c>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a52      	ldr	r2, [pc, #328]	; (80061e4 <HAL_ADC_Start+0x190>)
 800609a:	fba2 2303 	umull	r2, r3, r2, r3
 800609e:	0c9a      	lsrs	r2, r3, #18
 80060a0:	4613      	mov	r3, r2
 80060a2:	005b      	lsls	r3, r3, #1
 80060a4:	4413      	add	r3, r2
 80060a6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80060a8:	e002      	b.n	80060b0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	3b01      	subs	r3, #1
 80060ae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d1f9      	bne.n	80060aa <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d17a      	bne.n	80061ba <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80060cc:	f023 0301 	bic.w	r3, r3, #1
 80060d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d007      	beq.n	80060f6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80060ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006102:	d106      	bne.n	8006112 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006108:	f023 0206 	bic.w	r2, r3, #6
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	645a      	str	r2, [r3, #68]	; 0x44
 8006110:	e002      	b.n	8006118 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006120:	4b31      	ldr	r3, [pc, #196]	; (80061e8 <HAL_ADC_Start+0x194>)
 8006122:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800612c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f003 031f 	and.w	r3, r3, #31
 8006136:	2b00      	cmp	r3, #0
 8006138:	d12a      	bne.n	8006190 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a2b      	ldr	r2, [pc, #172]	; (80061ec <HAL_ADC_Start+0x198>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d015      	beq.n	8006170 <HAL_ADC_Start+0x11c>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a29      	ldr	r2, [pc, #164]	; (80061f0 <HAL_ADC_Start+0x19c>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d105      	bne.n	800615a <HAL_ADC_Start+0x106>
 800614e:	4b26      	ldr	r3, [pc, #152]	; (80061e8 <HAL_ADC_Start+0x194>)
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f003 031f 	and.w	r3, r3, #31
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00a      	beq.n	8006170 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a25      	ldr	r2, [pc, #148]	; (80061f4 <HAL_ADC_Start+0x1a0>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d136      	bne.n	80061d2 <HAL_ADC_Start+0x17e>
 8006164:	4b20      	ldr	r3, [pc, #128]	; (80061e8 <HAL_ADC_Start+0x194>)
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	f003 0310 	and.w	r3, r3, #16
 800616c:	2b00      	cmp	r3, #0
 800616e:	d130      	bne.n	80061d2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d129      	bne.n	80061d2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	689a      	ldr	r2, [r3, #8]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800618c:	609a      	str	r2, [r3, #8]
 800618e:	e020      	b.n	80061d2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a15      	ldr	r2, [pc, #84]	; (80061ec <HAL_ADC_Start+0x198>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d11b      	bne.n	80061d2 <HAL_ADC_Start+0x17e>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d114      	bne.n	80061d2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	689a      	ldr	r2, [r3, #8]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80061b6:	609a      	str	r2, [r3, #8]
 80061b8:	e00b      	b.n	80061d2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061be:	f043 0210 	orr.w	r2, r3, #16
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ca:	f043 0201 	orr.w	r2, r3, #1
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3714      	adds	r7, #20
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	2000005c 	.word	0x2000005c
 80061e4:	431bde83 	.word	0x431bde83
 80061e8:	40012300 	.word	0x40012300
 80061ec:	40012000 	.word	0x40012000
 80061f0:	40012100 	.word	0x40012100
 80061f4:	40012200 	.word	0x40012200

080061f8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006206:	2b01      	cmp	r3, #1
 8006208:	d101      	bne.n	800620e <HAL_ADC_Stop+0x16>
 800620a:	2302      	movs	r3, #2
 800620c:	e021      	b.n	8006252 <HAL_ADC_Stop+0x5a>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2201      	movs	r2, #1
 8006212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	689a      	ldr	r2, [r3, #8]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f022 0201 	bic.w	r2, r2, #1
 8006224:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	f003 0301 	and.w	r3, r3, #1
 8006230:	2b00      	cmp	r3, #0
 8006232:	d109      	bne.n	8006248 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006238:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800623c:	f023 0301 	bic.w	r3, r3, #1
 8006240:	f043 0201 	orr.w	r2, r3, #1
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b084      	sub	sp, #16
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
 8006266:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006268:	2300      	movs	r3, #0
 800626a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800627a:	d113      	bne.n	80062a4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800628a:	d10b      	bne.n	80062a4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006290:	f043 0220 	orr.w	r2, r3, #32
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e063      	b.n	800636c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80062a4:	f7ff fe62 	bl	8005f6c <HAL_GetTick>
 80062a8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80062aa:	e021      	b.n	80062f0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b2:	d01d      	beq.n	80062f0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d007      	beq.n	80062ca <HAL_ADC_PollForConversion+0x6c>
 80062ba:	f7ff fe57 	bl	8005f6c <HAL_GetTick>
 80062be:	4602      	mov	r2, r0
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	1ad3      	subs	r3, r2, r3
 80062c4:	683a      	ldr	r2, [r7, #0]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d212      	bcs.n	80062f0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 0302 	and.w	r3, r3, #2
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	d00b      	beq.n	80062f0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062dc:	f043 0204 	orr.w	r2, r3, #4
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	e03d      	b.n	800636c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 0302 	and.w	r3, r3, #2
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d1d6      	bne.n	80062ac <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f06f 0212 	mvn.w	r2, #18
 8006306:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d123      	bne.n	800636a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006326:	2b00      	cmp	r3, #0
 8006328:	d11f      	bne.n	800636a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006330:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006334:	2b00      	cmp	r3, #0
 8006336:	d006      	beq.n	8006346 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006342:	2b00      	cmp	r3, #0
 8006344:	d111      	bne.n	800636a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006356:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d105      	bne.n	800636a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006362:	f043 0201 	orr.w	r2, r3, #1
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8006382:	4618      	mov	r0, r3
 8006384:	370c      	adds	r7, #12
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
	...

08006390 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800639a:	2300      	movs	r3, #0
 800639c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d101      	bne.n	80063ac <HAL_ADC_ConfigChannel+0x1c>
 80063a8:	2302      	movs	r3, #2
 80063aa:	e105      	b.n	80065b8 <HAL_ADC_ConfigChannel+0x228>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2b09      	cmp	r3, #9
 80063ba:	d925      	bls.n	8006408 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68d9      	ldr	r1, [r3, #12]
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	461a      	mov	r2, r3
 80063ca:	4613      	mov	r3, r2
 80063cc:	005b      	lsls	r3, r3, #1
 80063ce:	4413      	add	r3, r2
 80063d0:	3b1e      	subs	r3, #30
 80063d2:	2207      	movs	r2, #7
 80063d4:	fa02 f303 	lsl.w	r3, r2, r3
 80063d8:	43da      	mvns	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	400a      	ands	r2, r1
 80063e0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68d9      	ldr	r1, [r3, #12]
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	689a      	ldr	r2, [r3, #8]
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	4618      	mov	r0, r3
 80063f4:	4603      	mov	r3, r0
 80063f6:	005b      	lsls	r3, r3, #1
 80063f8:	4403      	add	r3, r0
 80063fa:	3b1e      	subs	r3, #30
 80063fc:	409a      	lsls	r2, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	430a      	orrs	r2, r1
 8006404:	60da      	str	r2, [r3, #12]
 8006406:	e022      	b.n	800644e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	6919      	ldr	r1, [r3, #16]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	b29b      	uxth	r3, r3
 8006414:	461a      	mov	r2, r3
 8006416:	4613      	mov	r3, r2
 8006418:	005b      	lsls	r3, r3, #1
 800641a:	4413      	add	r3, r2
 800641c:	2207      	movs	r2, #7
 800641e:	fa02 f303 	lsl.w	r3, r2, r3
 8006422:	43da      	mvns	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	400a      	ands	r2, r1
 800642a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	6919      	ldr	r1, [r3, #16]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	689a      	ldr	r2, [r3, #8]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	b29b      	uxth	r3, r3
 800643c:	4618      	mov	r0, r3
 800643e:	4603      	mov	r3, r0
 8006440:	005b      	lsls	r3, r3, #1
 8006442:	4403      	add	r3, r0
 8006444:	409a      	lsls	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	430a      	orrs	r2, r1
 800644c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	2b06      	cmp	r3, #6
 8006454:	d824      	bhi.n	80064a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	685a      	ldr	r2, [r3, #4]
 8006460:	4613      	mov	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4413      	add	r3, r2
 8006466:	3b05      	subs	r3, #5
 8006468:	221f      	movs	r2, #31
 800646a:	fa02 f303 	lsl.w	r3, r2, r3
 800646e:	43da      	mvns	r2, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	400a      	ands	r2, r1
 8006476:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	b29b      	uxth	r3, r3
 8006484:	4618      	mov	r0, r3
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	685a      	ldr	r2, [r3, #4]
 800648a:	4613      	mov	r3, r2
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	4413      	add	r3, r2
 8006490:	3b05      	subs	r3, #5
 8006492:	fa00 f203 	lsl.w	r2, r0, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	430a      	orrs	r2, r1
 800649c:	635a      	str	r2, [r3, #52]	; 0x34
 800649e:	e04c      	b.n	800653a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	2b0c      	cmp	r3, #12
 80064a6:	d824      	bhi.n	80064f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	685a      	ldr	r2, [r3, #4]
 80064b2:	4613      	mov	r3, r2
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	4413      	add	r3, r2
 80064b8:	3b23      	subs	r3, #35	; 0x23
 80064ba:	221f      	movs	r2, #31
 80064bc:	fa02 f303 	lsl.w	r3, r2, r3
 80064c0:	43da      	mvns	r2, r3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	400a      	ands	r2, r1
 80064c8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	4618      	mov	r0, r3
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	685a      	ldr	r2, [r3, #4]
 80064dc:	4613      	mov	r3, r2
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	4413      	add	r3, r2
 80064e2:	3b23      	subs	r3, #35	; 0x23
 80064e4:	fa00 f203 	lsl.w	r2, r0, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	430a      	orrs	r2, r1
 80064ee:	631a      	str	r2, [r3, #48]	; 0x30
 80064f0:	e023      	b.n	800653a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	685a      	ldr	r2, [r3, #4]
 80064fc:	4613      	mov	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	3b41      	subs	r3, #65	; 0x41
 8006504:	221f      	movs	r2, #31
 8006506:	fa02 f303 	lsl.w	r3, r2, r3
 800650a:	43da      	mvns	r2, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	400a      	ands	r2, r1
 8006512:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	b29b      	uxth	r3, r3
 8006520:	4618      	mov	r0, r3
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	685a      	ldr	r2, [r3, #4]
 8006526:	4613      	mov	r3, r2
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	4413      	add	r3, r2
 800652c:	3b41      	subs	r3, #65	; 0x41
 800652e:	fa00 f203 	lsl.w	r2, r0, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	430a      	orrs	r2, r1
 8006538:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800653a:	4b22      	ldr	r3, [pc, #136]	; (80065c4 <HAL_ADC_ConfigChannel+0x234>)
 800653c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a21      	ldr	r2, [pc, #132]	; (80065c8 <HAL_ADC_ConfigChannel+0x238>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d109      	bne.n	800655c <HAL_ADC_ConfigChannel+0x1cc>
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2b12      	cmp	r3, #18
 800654e:	d105      	bne.n	800655c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a19      	ldr	r2, [pc, #100]	; (80065c8 <HAL_ADC_ConfigChannel+0x238>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d123      	bne.n	80065ae <HAL_ADC_ConfigChannel+0x21e>
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2b10      	cmp	r3, #16
 800656c:	d003      	beq.n	8006576 <HAL_ADC_ConfigChannel+0x1e6>
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2b11      	cmp	r3, #17
 8006574:	d11b      	bne.n	80065ae <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2b10      	cmp	r3, #16
 8006588:	d111      	bne.n	80065ae <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800658a:	4b10      	ldr	r3, [pc, #64]	; (80065cc <HAL_ADC_ConfigChannel+0x23c>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a10      	ldr	r2, [pc, #64]	; (80065d0 <HAL_ADC_ConfigChannel+0x240>)
 8006590:	fba2 2303 	umull	r2, r3, r2, r3
 8006594:	0c9a      	lsrs	r2, r3, #18
 8006596:	4613      	mov	r3, r2
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	4413      	add	r3, r2
 800659c:	005b      	lsls	r3, r3, #1
 800659e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80065a0:	e002      	b.n	80065a8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	3b01      	subs	r3, #1
 80065a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1f9      	bne.n	80065a2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3714      	adds	r7, #20
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr
 80065c4:	40012300 	.word	0x40012300
 80065c8:	40012000 	.word	0x40012000
 80065cc:	2000005c 	.word	0x2000005c
 80065d0:	431bde83 	.word	0x431bde83

080065d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80065dc:	4b79      	ldr	r3, [pc, #484]	; (80067c4 <ADC_Init+0x1f0>)
 80065de:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	685a      	ldr	r2, [r3, #4]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	431a      	orrs	r2, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	685a      	ldr	r2, [r3, #4]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006608:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	6859      	ldr	r1, [r3, #4]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	021a      	lsls	r2, r3, #8
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	685a      	ldr	r2, [r3, #4]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800662c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	6859      	ldr	r1, [r3, #4]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	689a      	ldr	r2, [r3, #8]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	430a      	orrs	r2, r1
 800663e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	689a      	ldr	r2, [r3, #8]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800664e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6899      	ldr	r1, [r3, #8]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	68da      	ldr	r2, [r3, #12]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006666:	4a58      	ldr	r2, [pc, #352]	; (80067c8 <ADC_Init+0x1f4>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d022      	beq.n	80066b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	689a      	ldr	r2, [r3, #8]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800667a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	6899      	ldr	r1, [r3, #8]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	430a      	orrs	r2, r1
 800668c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	689a      	ldr	r2, [r3, #8]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800669c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	6899      	ldr	r1, [r3, #8]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	430a      	orrs	r2, r1
 80066ae:	609a      	str	r2, [r3, #8]
 80066b0:	e00f      	b.n	80066d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	689a      	ldr	r2, [r3, #8]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80066c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	689a      	ldr	r2, [r3, #8]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80066d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689a      	ldr	r2, [r3, #8]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f022 0202 	bic.w	r2, r2, #2
 80066e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	6899      	ldr	r1, [r3, #8]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	7e1b      	ldrb	r3, [r3, #24]
 80066ec:	005a      	lsls	r2, r3, #1
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	430a      	orrs	r2, r1
 80066f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d01b      	beq.n	8006738 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	685a      	ldr	r2, [r3, #4]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800670e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	685a      	ldr	r2, [r3, #4]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800671e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	6859      	ldr	r1, [r3, #4]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672a:	3b01      	subs	r3, #1
 800672c:	035a      	lsls	r2, r3, #13
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	430a      	orrs	r2, r1
 8006734:	605a      	str	r2, [r3, #4]
 8006736:	e007      	b.n	8006748 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006746:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006756:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	69db      	ldr	r3, [r3, #28]
 8006762:	3b01      	subs	r3, #1
 8006764:	051a      	lsls	r2, r3, #20
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	430a      	orrs	r2, r1
 800676c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	689a      	ldr	r2, [r3, #8]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800677c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	6899      	ldr	r1, [r3, #8]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800678a:	025a      	lsls	r2, r3, #9
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	430a      	orrs	r2, r1
 8006792:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	689a      	ldr	r2, [r3, #8]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	6899      	ldr	r1, [r3, #8]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	029a      	lsls	r2, r3, #10
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	430a      	orrs	r2, r1
 80067b6:	609a      	str	r2, [r3, #8]
}
 80067b8:	bf00      	nop
 80067ba:	3714      	adds	r7, #20
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr
 80067c4:	40012300 	.word	0x40012300
 80067c8:	0f000001 	.word	0x0f000001

080067cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f003 0307 	and.w	r3, r3, #7
 80067da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80067dc:	4b0c      	ldr	r3, [pc, #48]	; (8006810 <__NVIC_SetPriorityGrouping+0x44>)
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80067e2:	68ba      	ldr	r2, [r7, #8]
 80067e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80067e8:	4013      	ands	r3, r2
 80067ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80067f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80067f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80067fe:	4a04      	ldr	r2, [pc, #16]	; (8006810 <__NVIC_SetPriorityGrouping+0x44>)
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	60d3      	str	r3, [r2, #12]
}
 8006804:	bf00      	nop
 8006806:	3714      	adds	r7, #20
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr
 8006810:	e000ed00 	.word	0xe000ed00

08006814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006814:	b480      	push	{r7}
 8006816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006818:	4b04      	ldr	r3, [pc, #16]	; (800682c <__NVIC_GetPriorityGrouping+0x18>)
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	0a1b      	lsrs	r3, r3, #8
 800681e:	f003 0307 	and.w	r3, r3, #7
}
 8006822:	4618      	mov	r0, r3
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr
 800682c:	e000ed00 	.word	0xe000ed00

08006830 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	4603      	mov	r3, r0
 8006838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800683a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800683e:	2b00      	cmp	r3, #0
 8006840:	db0b      	blt.n	800685a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006842:	79fb      	ldrb	r3, [r7, #7]
 8006844:	f003 021f 	and.w	r2, r3, #31
 8006848:	4907      	ldr	r1, [pc, #28]	; (8006868 <__NVIC_EnableIRQ+0x38>)
 800684a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800684e:	095b      	lsrs	r3, r3, #5
 8006850:	2001      	movs	r0, #1
 8006852:	fa00 f202 	lsl.w	r2, r0, r2
 8006856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800685a:	bf00      	nop
 800685c:	370c      	adds	r7, #12
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	e000e100 	.word	0xe000e100

0800686c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	4603      	mov	r3, r0
 8006874:	6039      	str	r1, [r7, #0]
 8006876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800687c:	2b00      	cmp	r3, #0
 800687e:	db0a      	blt.n	8006896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	b2da      	uxtb	r2, r3
 8006884:	490c      	ldr	r1, [pc, #48]	; (80068b8 <__NVIC_SetPriority+0x4c>)
 8006886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800688a:	0112      	lsls	r2, r2, #4
 800688c:	b2d2      	uxtb	r2, r2
 800688e:	440b      	add	r3, r1
 8006890:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006894:	e00a      	b.n	80068ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	b2da      	uxtb	r2, r3
 800689a:	4908      	ldr	r1, [pc, #32]	; (80068bc <__NVIC_SetPriority+0x50>)
 800689c:	79fb      	ldrb	r3, [r7, #7]
 800689e:	f003 030f 	and.w	r3, r3, #15
 80068a2:	3b04      	subs	r3, #4
 80068a4:	0112      	lsls	r2, r2, #4
 80068a6:	b2d2      	uxtb	r2, r2
 80068a8:	440b      	add	r3, r1
 80068aa:	761a      	strb	r2, [r3, #24]
}
 80068ac:	bf00      	nop
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr
 80068b8:	e000e100 	.word	0xe000e100
 80068bc:	e000ed00 	.word	0xe000ed00

080068c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b089      	sub	sp, #36	; 0x24
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f003 0307 	and.w	r3, r3, #7
 80068d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	f1c3 0307 	rsb	r3, r3, #7
 80068da:	2b04      	cmp	r3, #4
 80068dc:	bf28      	it	cs
 80068de:	2304      	movcs	r3, #4
 80068e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	3304      	adds	r3, #4
 80068e6:	2b06      	cmp	r3, #6
 80068e8:	d902      	bls.n	80068f0 <NVIC_EncodePriority+0x30>
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	3b03      	subs	r3, #3
 80068ee:	e000      	b.n	80068f2 <NVIC_EncodePriority+0x32>
 80068f0:	2300      	movs	r3, #0
 80068f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80068f4:	f04f 32ff 	mov.w	r2, #4294967295
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	fa02 f303 	lsl.w	r3, r2, r3
 80068fe:	43da      	mvns	r2, r3
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	401a      	ands	r2, r3
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006908:	f04f 31ff 	mov.w	r1, #4294967295
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	fa01 f303 	lsl.w	r3, r1, r3
 8006912:	43d9      	mvns	r1, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006918:	4313      	orrs	r3, r2
         );
}
 800691a:	4618      	mov	r0, r3
 800691c:	3724      	adds	r7, #36	; 0x24
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr

08006926 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006926:	b580      	push	{r7, lr}
 8006928:	b082      	sub	sp, #8
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f7ff ff4c 	bl	80067cc <__NVIC_SetPriorityGrouping>
}
 8006934:	bf00      	nop
 8006936:	3708      	adds	r7, #8
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800693c:	b580      	push	{r7, lr}
 800693e:	b086      	sub	sp, #24
 8006940:	af00      	add	r7, sp, #0
 8006942:	4603      	mov	r3, r0
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	607a      	str	r2, [r7, #4]
 8006948:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800694a:	2300      	movs	r3, #0
 800694c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800694e:	f7ff ff61 	bl	8006814 <__NVIC_GetPriorityGrouping>
 8006952:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	68b9      	ldr	r1, [r7, #8]
 8006958:	6978      	ldr	r0, [r7, #20]
 800695a:	f7ff ffb1 	bl	80068c0 <NVIC_EncodePriority>
 800695e:	4602      	mov	r2, r0
 8006960:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006964:	4611      	mov	r1, r2
 8006966:	4618      	mov	r0, r3
 8006968:	f7ff ff80 	bl	800686c <__NVIC_SetPriority>
}
 800696c:	bf00      	nop
 800696e:	3718      	adds	r7, #24
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	4603      	mov	r3, r0
 800697c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800697e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006982:	4618      	mov	r0, r3
 8006984:	f7ff ff54 	bl	8006830 <__NVIC_EnableIRQ>
}
 8006988:	bf00      	nop
 800698a:	3708      	adds	r7, #8
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006998:	2300      	movs	r3, #0
 800699a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800699c:	f7ff fae6 	bl	8005f6c <HAL_GetTick>
 80069a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d101      	bne.n	80069ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e099      	b.n	8006ae0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2202      	movs	r2, #2
 80069b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f022 0201 	bic.w	r2, r2, #1
 80069ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80069cc:	e00f      	b.n	80069ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80069ce:	f7ff facd 	bl	8005f6c <HAL_GetTick>
 80069d2:	4602      	mov	r2, r0
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	2b05      	cmp	r3, #5
 80069da:	d908      	bls.n	80069ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2220      	movs	r2, #32
 80069e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2203      	movs	r2, #3
 80069e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e078      	b.n	8006ae0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 0301 	and.w	r3, r3, #1
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1e8      	bne.n	80069ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006a04:	697a      	ldr	r2, [r7, #20]
 8006a06:	4b38      	ldr	r3, [pc, #224]	; (8006ae8 <HAL_DMA_Init+0x158>)
 8006a08:	4013      	ands	r3, r2
 8006a0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685a      	ldr	r2, [r3, #4]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006a1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	699b      	ldr	r3, [r3, #24]
 8006a2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6a1b      	ldr	r3, [r3, #32]
 8006a38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006a3a:	697a      	ldr	r2, [r7, #20]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a44:	2b04      	cmp	r3, #4
 8006a46:	d107      	bne.n	8006a58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a50:	4313      	orrs	r3, r2
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	f023 0307 	bic.w	r3, r3, #7
 8006a6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7e:	2b04      	cmp	r3, #4
 8006a80:	d117      	bne.n	8006ab2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d00e      	beq.n	8006ab2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 fb01 	bl	800709c <DMA_CheckFifoParam>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d008      	beq.n	8006ab2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2240      	movs	r2, #64	; 0x40
 8006aa4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e016      	b.n	8006ae0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 fab8 	bl	8007030 <DMA_CalcBaseAndBitshift>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ac8:	223f      	movs	r2, #63	; 0x3f
 8006aca:	409a      	lsls	r2, r3
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3718      	adds	r7, #24
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	f010803f 	.word	0xf010803f

08006aec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b086      	sub	sp, #24
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
 8006af8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006afa:	2300      	movs	r3, #0
 8006afc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b02:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d101      	bne.n	8006b12 <HAL_DMA_Start_IT+0x26>
 8006b0e:	2302      	movs	r3, #2
 8006b10:	e040      	b.n	8006b94 <HAL_DMA_Start_IT+0xa8>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2201      	movs	r2, #1
 8006b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d12f      	bne.n	8006b86 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2202      	movs	r2, #2
 8006b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2200      	movs	r2, #0
 8006b32:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	68b9      	ldr	r1, [r7, #8]
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f000 fa4a 	bl	8006fd4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b44:	223f      	movs	r2, #63	; 0x3f
 8006b46:	409a      	lsls	r2, r3
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f042 0216 	orr.w	r2, r2, #22
 8006b5a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d007      	beq.n	8006b74 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f042 0208 	orr.w	r2, r2, #8
 8006b72:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f042 0201 	orr.w	r2, r2, #1
 8006b82:	601a      	str	r2, [r3, #0]
 8006b84:	e005      	b.n	8006b92 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006b8e:	2302      	movs	r3, #2
 8006b90:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3718      	adds	r7, #24
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ba8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006baa:	f7ff f9df 	bl	8005f6c <HAL_GetTick>
 8006bae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d008      	beq.n	8006bce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2280      	movs	r2, #128	; 0x80
 8006bc0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e052      	b.n	8006c74 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f022 0216 	bic.w	r2, r2, #22
 8006bdc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	695a      	ldr	r2, [r3, #20]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d103      	bne.n	8006bfe <HAL_DMA_Abort+0x62>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d007      	beq.n	8006c0e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f022 0208 	bic.w	r2, r2, #8
 8006c0c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f022 0201 	bic.w	r2, r2, #1
 8006c1c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006c1e:	e013      	b.n	8006c48 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006c20:	f7ff f9a4 	bl	8005f6c <HAL_GetTick>
 8006c24:	4602      	mov	r2, r0
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	2b05      	cmp	r3, #5
 8006c2c:	d90c      	bls.n	8006c48 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2220      	movs	r2, #32
 8006c32:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2203      	movs	r2, #3
 8006c38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	e015      	b.n	8006c74 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 0301 	and.w	r3, r3, #1
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d1e4      	bne.n	8006c20 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c5a:	223f      	movs	r2, #63	; 0x3f
 8006c5c:	409a      	lsls	r2, r3
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2201      	movs	r2, #1
 8006c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3710      	adds	r7, #16
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d004      	beq.n	8006c9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2280      	movs	r2, #128	; 0x80
 8006c94:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e00c      	b.n	8006cb4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2205      	movs	r2, #5
 8006c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f022 0201 	bic.w	r2, r2, #1
 8006cb0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b086      	sub	sp, #24
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006ccc:	4b8e      	ldr	r3, [pc, #568]	; (8006f08 <HAL_DMA_IRQHandler+0x248>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a8e      	ldr	r2, [pc, #568]	; (8006f0c <HAL_DMA_IRQHandler+0x24c>)
 8006cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006cd6:	0a9b      	lsrs	r3, r3, #10
 8006cd8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cde:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cea:	2208      	movs	r2, #8
 8006cec:	409a      	lsls	r2, r3
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d01a      	beq.n	8006d2c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 0304 	and.w	r3, r3, #4
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d013      	beq.n	8006d2c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f022 0204 	bic.w	r2, r2, #4
 8006d12:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d18:	2208      	movs	r2, #8
 8006d1a:	409a      	lsls	r2, r3
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d24:	f043 0201 	orr.w	r2, r3, #1
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d30:	2201      	movs	r2, #1
 8006d32:	409a      	lsls	r2, r3
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	4013      	ands	r3, r2
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d012      	beq.n	8006d62 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	695b      	ldr	r3, [r3, #20]
 8006d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00b      	beq.n	8006d62 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d4e:	2201      	movs	r2, #1
 8006d50:	409a      	lsls	r2, r3
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d5a:	f043 0202 	orr.w	r2, r3, #2
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d66:	2204      	movs	r2, #4
 8006d68:	409a      	lsls	r2, r3
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d012      	beq.n	8006d98 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 0302 	and.w	r3, r3, #2
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00b      	beq.n	8006d98 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d84:	2204      	movs	r2, #4
 8006d86:	409a      	lsls	r2, r3
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d90:	f043 0204 	orr.w	r2, r3, #4
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d9c:	2210      	movs	r2, #16
 8006d9e:	409a      	lsls	r2, r3
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	4013      	ands	r3, r2
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d043      	beq.n	8006e30 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 0308 	and.w	r3, r3, #8
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d03c      	beq.n	8006e30 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dba:	2210      	movs	r2, #16
 8006dbc:	409a      	lsls	r2, r3
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d018      	beq.n	8006e02 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d108      	bne.n	8006df0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d024      	beq.n	8006e30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	4798      	blx	r3
 8006dee:	e01f      	b.n	8006e30 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d01b      	beq.n	8006e30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	4798      	blx	r3
 8006e00:	e016      	b.n	8006e30 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d107      	bne.n	8006e20 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f022 0208 	bic.w	r2, r2, #8
 8006e1e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d003      	beq.n	8006e30 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e34:	2220      	movs	r2, #32
 8006e36:	409a      	lsls	r2, r3
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f000 808f 	beq.w	8006f60 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 0310 	and.w	r3, r3, #16
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f000 8087 	beq.w	8006f60 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e56:	2220      	movs	r2, #32
 8006e58:	409a      	lsls	r2, r3
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b05      	cmp	r3, #5
 8006e68:	d136      	bne.n	8006ed8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f022 0216 	bic.w	r2, r2, #22
 8006e78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	695a      	ldr	r2, [r3, #20]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e88:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d103      	bne.n	8006e9a <HAL_DMA_IRQHandler+0x1da>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d007      	beq.n	8006eaa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f022 0208 	bic.w	r2, r2, #8
 8006ea8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eae:	223f      	movs	r2, #63	; 0x3f
 8006eb0:	409a      	lsls	r2, r3
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d07e      	beq.n	8006fcc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	4798      	blx	r3
        }
        return;
 8006ed6:	e079      	b.n	8006fcc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d01d      	beq.n	8006f22 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d10d      	bne.n	8006f10 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d031      	beq.n	8006f60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	4798      	blx	r3
 8006f04:	e02c      	b.n	8006f60 <HAL_DMA_IRQHandler+0x2a0>
 8006f06:	bf00      	nop
 8006f08:	2000005c 	.word	0x2000005c
 8006f0c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d023      	beq.n	8006f60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	4798      	blx	r3
 8006f20:	e01e      	b.n	8006f60 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d10f      	bne.n	8006f50 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f022 0210 	bic.w	r2, r2, #16
 8006f3e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d003      	beq.n	8006f60 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d032      	beq.n	8006fce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f6c:	f003 0301 	and.w	r3, r3, #1
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d022      	beq.n	8006fba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2205      	movs	r2, #5
 8006f78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f022 0201 	bic.w	r2, r2, #1
 8006f8a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	3301      	adds	r3, #1
 8006f90:	60bb      	str	r3, [r7, #8]
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d307      	bcc.n	8006fa8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 0301 	and.w	r3, r3, #1
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d1f2      	bne.n	8006f8c <HAL_DMA_IRQHandler+0x2cc>
 8006fa6:	e000      	b.n	8006faa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006fa8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d005      	beq.n	8006fce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	4798      	blx	r3
 8006fca:	e000      	b.n	8006fce <HAL_DMA_IRQHandler+0x30e>
        return;
 8006fcc:	bf00      	nop
    }
  }
}
 8006fce:	3718      	adds	r7, #24
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	607a      	str	r2, [r7, #4]
 8006fe0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006ff0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	683a      	ldr	r2, [r7, #0]
 8006ff8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	2b40      	cmp	r3, #64	; 0x40
 8007000:	d108      	bne.n	8007014 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68ba      	ldr	r2, [r7, #8]
 8007010:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007012:	e007      	b.n	8007024 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68ba      	ldr	r2, [r7, #8]
 800701a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	60da      	str	r2, [r3, #12]
}
 8007024:	bf00      	nop
 8007026:	3714      	adds	r7, #20
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	b2db      	uxtb	r3, r3
 800703e:	3b10      	subs	r3, #16
 8007040:	4a14      	ldr	r2, [pc, #80]	; (8007094 <DMA_CalcBaseAndBitshift+0x64>)
 8007042:	fba2 2303 	umull	r2, r3, r2, r3
 8007046:	091b      	lsrs	r3, r3, #4
 8007048:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800704a:	4a13      	ldr	r2, [pc, #76]	; (8007098 <DMA_CalcBaseAndBitshift+0x68>)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	4413      	add	r3, r2
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	461a      	mov	r2, r3
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2b03      	cmp	r3, #3
 800705c:	d909      	bls.n	8007072 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007066:	f023 0303 	bic.w	r3, r3, #3
 800706a:	1d1a      	adds	r2, r3, #4
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	659a      	str	r2, [r3, #88]	; 0x58
 8007070:	e007      	b.n	8007082 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800707a:	f023 0303 	bic.w	r3, r3, #3
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007086:	4618      	mov	r0, r3
 8007088:	3714      	adds	r7, #20
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	aaaaaaab 	.word	0xaaaaaaab
 8007098:	08013f94 	.word	0x08013f94

0800709c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070a4:	2300      	movs	r3, #0
 80070a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	699b      	ldr	r3, [r3, #24]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d11f      	bne.n	80070f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	2b03      	cmp	r3, #3
 80070ba:	d856      	bhi.n	800716a <DMA_CheckFifoParam+0xce>
 80070bc:	a201      	add	r2, pc, #4	; (adr r2, 80070c4 <DMA_CheckFifoParam+0x28>)
 80070be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c2:	bf00      	nop
 80070c4:	080070d5 	.word	0x080070d5
 80070c8:	080070e7 	.word	0x080070e7
 80070cc:	080070d5 	.word	0x080070d5
 80070d0:	0800716b 	.word	0x0800716b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d046      	beq.n	800716e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80070e4:	e043      	b.n	800716e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80070ee:	d140      	bne.n	8007172 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80070f4:	e03d      	b.n	8007172 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	699b      	ldr	r3, [r3, #24]
 80070fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070fe:	d121      	bne.n	8007144 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	2b03      	cmp	r3, #3
 8007104:	d837      	bhi.n	8007176 <DMA_CheckFifoParam+0xda>
 8007106:	a201      	add	r2, pc, #4	; (adr r2, 800710c <DMA_CheckFifoParam+0x70>)
 8007108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800710c:	0800711d 	.word	0x0800711d
 8007110:	08007123 	.word	0x08007123
 8007114:	0800711d 	.word	0x0800711d
 8007118:	08007135 	.word	0x08007135
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	73fb      	strb	r3, [r7, #15]
      break;
 8007120:	e030      	b.n	8007184 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007126:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800712a:	2b00      	cmp	r3, #0
 800712c:	d025      	beq.n	800717a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007132:	e022      	b.n	800717a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007138:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800713c:	d11f      	bne.n	800717e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007142:	e01c      	b.n	800717e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	2b02      	cmp	r3, #2
 8007148:	d903      	bls.n	8007152 <DMA_CheckFifoParam+0xb6>
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	2b03      	cmp	r3, #3
 800714e:	d003      	beq.n	8007158 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007150:	e018      	b.n	8007184 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	73fb      	strb	r3, [r7, #15]
      break;
 8007156:	e015      	b.n	8007184 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007160:	2b00      	cmp	r3, #0
 8007162:	d00e      	beq.n	8007182 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	73fb      	strb	r3, [r7, #15]
      break;
 8007168:	e00b      	b.n	8007182 <DMA_CheckFifoParam+0xe6>
      break;
 800716a:	bf00      	nop
 800716c:	e00a      	b.n	8007184 <DMA_CheckFifoParam+0xe8>
      break;
 800716e:	bf00      	nop
 8007170:	e008      	b.n	8007184 <DMA_CheckFifoParam+0xe8>
      break;
 8007172:	bf00      	nop
 8007174:	e006      	b.n	8007184 <DMA_CheckFifoParam+0xe8>
      break;
 8007176:	bf00      	nop
 8007178:	e004      	b.n	8007184 <DMA_CheckFifoParam+0xe8>
      break;
 800717a:	bf00      	nop
 800717c:	e002      	b.n	8007184 <DMA_CheckFifoParam+0xe8>
      break;   
 800717e:	bf00      	nop
 8007180:	e000      	b.n	8007184 <DMA_CheckFifoParam+0xe8>
      break;
 8007182:	bf00      	nop
    }
  } 
  
  return status; 
 8007184:	7bfb      	ldrb	r3, [r7, #15]
}
 8007186:	4618      	mov	r0, r3
 8007188:	3714      	adds	r7, #20
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop

08007194 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007194:	b480      	push	{r7}
 8007196:	b089      	sub	sp, #36	; 0x24
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800719e:	2300      	movs	r3, #0
 80071a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80071a2:	2300      	movs	r3, #0
 80071a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80071a6:	2300      	movs	r3, #0
 80071a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80071aa:	2300      	movs	r3, #0
 80071ac:	61fb      	str	r3, [r7, #28]
 80071ae:	e16b      	b.n	8007488 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80071b0:	2201      	movs	r2, #1
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	fa02 f303 	lsl.w	r3, r2, r3
 80071b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	697a      	ldr	r2, [r7, #20]
 80071c0:	4013      	ands	r3, r2
 80071c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80071c4:	693a      	ldr	r2, [r7, #16]
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	f040 815a 	bne.w	8007482 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	f003 0303 	and.w	r3, r3, #3
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d005      	beq.n	80071e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	d130      	bne.n	8007248 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	005b      	lsls	r3, r3, #1
 80071f0:	2203      	movs	r2, #3
 80071f2:	fa02 f303 	lsl.w	r3, r2, r3
 80071f6:	43db      	mvns	r3, r3
 80071f8:	69ba      	ldr	r2, [r7, #24]
 80071fa:	4013      	ands	r3, r2
 80071fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	68da      	ldr	r2, [r3, #12]
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	005b      	lsls	r3, r3, #1
 8007206:	fa02 f303 	lsl.w	r3, r2, r3
 800720a:	69ba      	ldr	r2, [r7, #24]
 800720c:	4313      	orrs	r3, r2
 800720e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	69ba      	ldr	r2, [r7, #24]
 8007214:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800721c:	2201      	movs	r2, #1
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	fa02 f303 	lsl.w	r3, r2, r3
 8007224:	43db      	mvns	r3, r3
 8007226:	69ba      	ldr	r2, [r7, #24]
 8007228:	4013      	ands	r3, r2
 800722a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	091b      	lsrs	r3, r3, #4
 8007232:	f003 0201 	and.w	r2, r3, #1
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	fa02 f303 	lsl.w	r3, r2, r3
 800723c:	69ba      	ldr	r2, [r7, #24]
 800723e:	4313      	orrs	r3, r2
 8007240:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	69ba      	ldr	r2, [r7, #24]
 8007246:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	f003 0303 	and.w	r3, r3, #3
 8007250:	2b03      	cmp	r3, #3
 8007252:	d017      	beq.n	8007284 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	005b      	lsls	r3, r3, #1
 800725e:	2203      	movs	r2, #3
 8007260:	fa02 f303 	lsl.w	r3, r2, r3
 8007264:	43db      	mvns	r3, r3
 8007266:	69ba      	ldr	r2, [r7, #24]
 8007268:	4013      	ands	r3, r2
 800726a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	689a      	ldr	r2, [r3, #8]
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	005b      	lsls	r3, r3, #1
 8007274:	fa02 f303 	lsl.w	r3, r2, r3
 8007278:	69ba      	ldr	r2, [r7, #24]
 800727a:	4313      	orrs	r3, r2
 800727c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	69ba      	ldr	r2, [r7, #24]
 8007282:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	f003 0303 	and.w	r3, r3, #3
 800728c:	2b02      	cmp	r3, #2
 800728e:	d123      	bne.n	80072d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	08da      	lsrs	r2, r3, #3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	3208      	adds	r2, #8
 8007298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800729c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	f003 0307 	and.w	r3, r3, #7
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	220f      	movs	r2, #15
 80072a8:	fa02 f303 	lsl.w	r3, r2, r3
 80072ac:	43db      	mvns	r3, r3
 80072ae:	69ba      	ldr	r2, [r7, #24]
 80072b0:	4013      	ands	r3, r2
 80072b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	691a      	ldr	r2, [r3, #16]
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	f003 0307 	and.w	r3, r3, #7
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	fa02 f303 	lsl.w	r3, r2, r3
 80072c4:	69ba      	ldr	r2, [r7, #24]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	08da      	lsrs	r2, r3, #3
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	3208      	adds	r2, #8
 80072d2:	69b9      	ldr	r1, [r7, #24]
 80072d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	005b      	lsls	r3, r3, #1
 80072e2:	2203      	movs	r2, #3
 80072e4:	fa02 f303 	lsl.w	r3, r2, r3
 80072e8:	43db      	mvns	r3, r3
 80072ea:	69ba      	ldr	r2, [r7, #24]
 80072ec:	4013      	ands	r3, r2
 80072ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	f003 0203 	and.w	r2, r3, #3
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	005b      	lsls	r3, r3, #1
 80072fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007300:	69ba      	ldr	r2, [r7, #24]
 8007302:	4313      	orrs	r3, r2
 8007304:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	69ba      	ldr	r2, [r7, #24]
 800730a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007314:	2b00      	cmp	r3, #0
 8007316:	f000 80b4 	beq.w	8007482 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800731a:	2300      	movs	r3, #0
 800731c:	60fb      	str	r3, [r7, #12]
 800731e:	4b60      	ldr	r3, [pc, #384]	; (80074a0 <HAL_GPIO_Init+0x30c>)
 8007320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007322:	4a5f      	ldr	r2, [pc, #380]	; (80074a0 <HAL_GPIO_Init+0x30c>)
 8007324:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007328:	6453      	str	r3, [r2, #68]	; 0x44
 800732a:	4b5d      	ldr	r3, [pc, #372]	; (80074a0 <HAL_GPIO_Init+0x30c>)
 800732c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800732e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007332:	60fb      	str	r3, [r7, #12]
 8007334:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007336:	4a5b      	ldr	r2, [pc, #364]	; (80074a4 <HAL_GPIO_Init+0x310>)
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	089b      	lsrs	r3, r3, #2
 800733c:	3302      	adds	r3, #2
 800733e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007342:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	f003 0303 	and.w	r3, r3, #3
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	220f      	movs	r2, #15
 800734e:	fa02 f303 	lsl.w	r3, r2, r3
 8007352:	43db      	mvns	r3, r3
 8007354:	69ba      	ldr	r2, [r7, #24]
 8007356:	4013      	ands	r3, r2
 8007358:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4a52      	ldr	r2, [pc, #328]	; (80074a8 <HAL_GPIO_Init+0x314>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d02b      	beq.n	80073ba <HAL_GPIO_Init+0x226>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a51      	ldr	r2, [pc, #324]	; (80074ac <HAL_GPIO_Init+0x318>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d025      	beq.n	80073b6 <HAL_GPIO_Init+0x222>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a50      	ldr	r2, [pc, #320]	; (80074b0 <HAL_GPIO_Init+0x31c>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d01f      	beq.n	80073b2 <HAL_GPIO_Init+0x21e>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a4f      	ldr	r2, [pc, #316]	; (80074b4 <HAL_GPIO_Init+0x320>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d019      	beq.n	80073ae <HAL_GPIO_Init+0x21a>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a4e      	ldr	r2, [pc, #312]	; (80074b8 <HAL_GPIO_Init+0x324>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d013      	beq.n	80073aa <HAL_GPIO_Init+0x216>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4a4d      	ldr	r2, [pc, #308]	; (80074bc <HAL_GPIO_Init+0x328>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d00d      	beq.n	80073a6 <HAL_GPIO_Init+0x212>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4a4c      	ldr	r2, [pc, #304]	; (80074c0 <HAL_GPIO_Init+0x32c>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d007      	beq.n	80073a2 <HAL_GPIO_Init+0x20e>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4a4b      	ldr	r2, [pc, #300]	; (80074c4 <HAL_GPIO_Init+0x330>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d101      	bne.n	800739e <HAL_GPIO_Init+0x20a>
 800739a:	2307      	movs	r3, #7
 800739c:	e00e      	b.n	80073bc <HAL_GPIO_Init+0x228>
 800739e:	2308      	movs	r3, #8
 80073a0:	e00c      	b.n	80073bc <HAL_GPIO_Init+0x228>
 80073a2:	2306      	movs	r3, #6
 80073a4:	e00a      	b.n	80073bc <HAL_GPIO_Init+0x228>
 80073a6:	2305      	movs	r3, #5
 80073a8:	e008      	b.n	80073bc <HAL_GPIO_Init+0x228>
 80073aa:	2304      	movs	r3, #4
 80073ac:	e006      	b.n	80073bc <HAL_GPIO_Init+0x228>
 80073ae:	2303      	movs	r3, #3
 80073b0:	e004      	b.n	80073bc <HAL_GPIO_Init+0x228>
 80073b2:	2302      	movs	r3, #2
 80073b4:	e002      	b.n	80073bc <HAL_GPIO_Init+0x228>
 80073b6:	2301      	movs	r3, #1
 80073b8:	e000      	b.n	80073bc <HAL_GPIO_Init+0x228>
 80073ba:	2300      	movs	r3, #0
 80073bc:	69fa      	ldr	r2, [r7, #28]
 80073be:	f002 0203 	and.w	r2, r2, #3
 80073c2:	0092      	lsls	r2, r2, #2
 80073c4:	4093      	lsls	r3, r2
 80073c6:	69ba      	ldr	r2, [r7, #24]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80073cc:	4935      	ldr	r1, [pc, #212]	; (80074a4 <HAL_GPIO_Init+0x310>)
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	089b      	lsrs	r3, r3, #2
 80073d2:	3302      	adds	r3, #2
 80073d4:	69ba      	ldr	r2, [r7, #24]
 80073d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80073da:	4b3b      	ldr	r3, [pc, #236]	; (80074c8 <HAL_GPIO_Init+0x334>)
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	43db      	mvns	r3, r3
 80073e4:	69ba      	ldr	r2, [r7, #24]
 80073e6:	4013      	ands	r3, r2
 80073e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d003      	beq.n	80073fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80073f6:	69ba      	ldr	r2, [r7, #24]
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80073fe:	4a32      	ldr	r2, [pc, #200]	; (80074c8 <HAL_GPIO_Init+0x334>)
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007404:	4b30      	ldr	r3, [pc, #192]	; (80074c8 <HAL_GPIO_Init+0x334>)
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	43db      	mvns	r3, r3
 800740e:	69ba      	ldr	r2, [r7, #24]
 8007410:	4013      	ands	r3, r2
 8007412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800741c:	2b00      	cmp	r3, #0
 800741e:	d003      	beq.n	8007428 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007420:	69ba      	ldr	r2, [r7, #24]
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	4313      	orrs	r3, r2
 8007426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007428:	4a27      	ldr	r2, [pc, #156]	; (80074c8 <HAL_GPIO_Init+0x334>)
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800742e:	4b26      	ldr	r3, [pc, #152]	; (80074c8 <HAL_GPIO_Init+0x334>)
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	43db      	mvns	r3, r3
 8007438:	69ba      	ldr	r2, [r7, #24]
 800743a:	4013      	ands	r3, r2
 800743c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007446:	2b00      	cmp	r3, #0
 8007448:	d003      	beq.n	8007452 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800744a:	69ba      	ldr	r2, [r7, #24]
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	4313      	orrs	r3, r2
 8007450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007452:	4a1d      	ldr	r2, [pc, #116]	; (80074c8 <HAL_GPIO_Init+0x334>)
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007458:	4b1b      	ldr	r3, [pc, #108]	; (80074c8 <HAL_GPIO_Init+0x334>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	43db      	mvns	r3, r3
 8007462:	69ba      	ldr	r2, [r7, #24]
 8007464:	4013      	ands	r3, r2
 8007466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007470:	2b00      	cmp	r3, #0
 8007472:	d003      	beq.n	800747c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007474:	69ba      	ldr	r2, [r7, #24]
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	4313      	orrs	r3, r2
 800747a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800747c:	4a12      	ldr	r2, [pc, #72]	; (80074c8 <HAL_GPIO_Init+0x334>)
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	3301      	adds	r3, #1
 8007486:	61fb      	str	r3, [r7, #28]
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	2b0f      	cmp	r3, #15
 800748c:	f67f ae90 	bls.w	80071b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007490:	bf00      	nop
 8007492:	bf00      	nop
 8007494:	3724      	adds	r7, #36	; 0x24
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop
 80074a0:	40023800 	.word	0x40023800
 80074a4:	40013800 	.word	0x40013800
 80074a8:	40020000 	.word	0x40020000
 80074ac:	40020400 	.word	0x40020400
 80074b0:	40020800 	.word	0x40020800
 80074b4:	40020c00 	.word	0x40020c00
 80074b8:	40021000 	.word	0x40021000
 80074bc:	40021400 	.word	0x40021400
 80074c0:	40021800 	.word	0x40021800
 80074c4:	40021c00 	.word	0x40021c00
 80074c8:	40013c00 	.word	0x40013c00

080074cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	460b      	mov	r3, r1
 80074d6:	807b      	strh	r3, [r7, #2]
 80074d8:	4613      	mov	r3, r2
 80074da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80074dc:	787b      	ldrb	r3, [r7, #1]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d003      	beq.n	80074ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80074e2:	887a      	ldrh	r2, [r7, #2]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80074e8:	e003      	b.n	80074f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80074ea:	887b      	ldrh	r3, [r7, #2]
 80074ec:	041a      	lsls	r2, r3, #16
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	619a      	str	r2, [r3, #24]
}
 80074f2:	bf00      	nop
 80074f4:	370c      	adds	r7, #12
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr

080074fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80074fe:	b480      	push	{r7}
 8007500:	b085      	sub	sp, #20
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
 8007506:	460b      	mov	r3, r1
 8007508:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	695b      	ldr	r3, [r3, #20]
 800750e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007510:	887a      	ldrh	r2, [r7, #2]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	4013      	ands	r3, r2
 8007516:	041a      	lsls	r2, r3, #16
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	43d9      	mvns	r1, r3
 800751c:	887b      	ldrh	r3, [r7, #2]
 800751e:	400b      	ands	r3, r1
 8007520:	431a      	orrs	r2, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	619a      	str	r2, [r3, #24]
}
 8007526:	bf00      	nop
 8007528:	3714      	adds	r7, #20
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr
	...

08007534 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	4603      	mov	r3, r0
 800753c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800753e:	4b08      	ldr	r3, [pc, #32]	; (8007560 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007540:	695a      	ldr	r2, [r3, #20]
 8007542:	88fb      	ldrh	r3, [r7, #6]
 8007544:	4013      	ands	r3, r2
 8007546:	2b00      	cmp	r3, #0
 8007548:	d006      	beq.n	8007558 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800754a:	4a05      	ldr	r2, [pc, #20]	; (8007560 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800754c:	88fb      	ldrh	r3, [r7, #6]
 800754e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007550:	88fb      	ldrh	r3, [r7, #6]
 8007552:	4618      	mov	r0, r3
 8007554:	f7fa fce2 	bl	8001f1c <HAL_GPIO_EXTI_Callback>
  }
}
 8007558:	bf00      	nop
 800755a:	3708      	adds	r7, #8
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	40013c00 	.word	0x40013c00

08007564 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d101      	bne.n	8007576 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e12b      	b.n	80077ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800757c:	b2db      	uxtb	r3, r3
 800757e:	2b00      	cmp	r3, #0
 8007580:	d106      	bne.n	8007590 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f7fd ffba 	bl	8005504 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2224      	movs	r2, #36	; 0x24
 8007594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f022 0201 	bic.w	r2, r2, #1
 80075a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80075b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80075c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80075c8:	f001 fd52 	bl	8009070 <HAL_RCC_GetPCLK1Freq>
 80075cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	4a81      	ldr	r2, [pc, #516]	; (80077d8 <HAL_I2C_Init+0x274>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d807      	bhi.n	80075e8 <HAL_I2C_Init+0x84>
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	4a80      	ldr	r2, [pc, #512]	; (80077dc <HAL_I2C_Init+0x278>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	bf94      	ite	ls
 80075e0:	2301      	movls	r3, #1
 80075e2:	2300      	movhi	r3, #0
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	e006      	b.n	80075f6 <HAL_I2C_Init+0x92>
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	4a7d      	ldr	r2, [pc, #500]	; (80077e0 <HAL_I2C_Init+0x27c>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	bf94      	ite	ls
 80075f0:	2301      	movls	r3, #1
 80075f2:	2300      	movhi	r3, #0
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d001      	beq.n	80075fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e0e7      	b.n	80077ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	4a78      	ldr	r2, [pc, #480]	; (80077e4 <HAL_I2C_Init+0x280>)
 8007602:	fba2 2303 	umull	r2, r3, r2, r3
 8007606:	0c9b      	lsrs	r3, r3, #18
 8007608:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	68ba      	ldr	r2, [r7, #8]
 800761a:	430a      	orrs	r2, r1
 800761c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	6a1b      	ldr	r3, [r3, #32]
 8007624:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	4a6a      	ldr	r2, [pc, #424]	; (80077d8 <HAL_I2C_Init+0x274>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d802      	bhi.n	8007638 <HAL_I2C_Init+0xd4>
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	3301      	adds	r3, #1
 8007636:	e009      	b.n	800764c <HAL_I2C_Init+0xe8>
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800763e:	fb02 f303 	mul.w	r3, r2, r3
 8007642:	4a69      	ldr	r2, [pc, #420]	; (80077e8 <HAL_I2C_Init+0x284>)
 8007644:	fba2 2303 	umull	r2, r3, r2, r3
 8007648:	099b      	lsrs	r3, r3, #6
 800764a:	3301      	adds	r3, #1
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	6812      	ldr	r2, [r2, #0]
 8007650:	430b      	orrs	r3, r1
 8007652:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	69db      	ldr	r3, [r3, #28]
 800765a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800765e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	495c      	ldr	r1, [pc, #368]	; (80077d8 <HAL_I2C_Init+0x274>)
 8007668:	428b      	cmp	r3, r1
 800766a:	d819      	bhi.n	80076a0 <HAL_I2C_Init+0x13c>
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	1e59      	subs	r1, r3, #1
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	005b      	lsls	r3, r3, #1
 8007676:	fbb1 f3f3 	udiv	r3, r1, r3
 800767a:	1c59      	adds	r1, r3, #1
 800767c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007680:	400b      	ands	r3, r1
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00a      	beq.n	800769c <HAL_I2C_Init+0x138>
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	1e59      	subs	r1, r3, #1
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	005b      	lsls	r3, r3, #1
 8007690:	fbb1 f3f3 	udiv	r3, r1, r3
 8007694:	3301      	adds	r3, #1
 8007696:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800769a:	e051      	b.n	8007740 <HAL_I2C_Init+0x1dc>
 800769c:	2304      	movs	r3, #4
 800769e:	e04f      	b.n	8007740 <HAL_I2C_Init+0x1dc>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d111      	bne.n	80076cc <HAL_I2C_Init+0x168>
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	1e58      	subs	r0, r3, #1
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6859      	ldr	r1, [r3, #4]
 80076b0:	460b      	mov	r3, r1
 80076b2:	005b      	lsls	r3, r3, #1
 80076b4:	440b      	add	r3, r1
 80076b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80076ba:	3301      	adds	r3, #1
 80076bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	bf0c      	ite	eq
 80076c4:	2301      	moveq	r3, #1
 80076c6:	2300      	movne	r3, #0
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	e012      	b.n	80076f2 <HAL_I2C_Init+0x18e>
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	1e58      	subs	r0, r3, #1
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6859      	ldr	r1, [r3, #4]
 80076d4:	460b      	mov	r3, r1
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	440b      	add	r3, r1
 80076da:	0099      	lsls	r1, r3, #2
 80076dc:	440b      	add	r3, r1
 80076de:	fbb0 f3f3 	udiv	r3, r0, r3
 80076e2:	3301      	adds	r3, #1
 80076e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	bf0c      	ite	eq
 80076ec:	2301      	moveq	r3, #1
 80076ee:	2300      	movne	r3, #0
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d001      	beq.n	80076fa <HAL_I2C_Init+0x196>
 80076f6:	2301      	movs	r3, #1
 80076f8:	e022      	b.n	8007740 <HAL_I2C_Init+0x1dc>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d10e      	bne.n	8007720 <HAL_I2C_Init+0x1bc>
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	1e58      	subs	r0, r3, #1
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6859      	ldr	r1, [r3, #4]
 800770a:	460b      	mov	r3, r1
 800770c:	005b      	lsls	r3, r3, #1
 800770e:	440b      	add	r3, r1
 8007710:	fbb0 f3f3 	udiv	r3, r0, r3
 8007714:	3301      	adds	r3, #1
 8007716:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800771a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800771e:	e00f      	b.n	8007740 <HAL_I2C_Init+0x1dc>
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	1e58      	subs	r0, r3, #1
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6859      	ldr	r1, [r3, #4]
 8007728:	460b      	mov	r3, r1
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	440b      	add	r3, r1
 800772e:	0099      	lsls	r1, r3, #2
 8007730:	440b      	add	r3, r1
 8007732:	fbb0 f3f3 	udiv	r3, r0, r3
 8007736:	3301      	adds	r3, #1
 8007738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800773c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007740:	6879      	ldr	r1, [r7, #4]
 8007742:	6809      	ldr	r1, [r1, #0]
 8007744:	4313      	orrs	r3, r2
 8007746:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	69da      	ldr	r2, [r3, #28]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a1b      	ldr	r3, [r3, #32]
 800775a:	431a      	orrs	r2, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	430a      	orrs	r2, r1
 8007762:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800776e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	6911      	ldr	r1, [r2, #16]
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	68d2      	ldr	r2, [r2, #12]
 800777a:	4311      	orrs	r1, r2
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	6812      	ldr	r2, [r2, #0]
 8007780:	430b      	orrs	r3, r1
 8007782:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	695a      	ldr	r2, [r3, #20]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	699b      	ldr	r3, [r3, #24]
 8007796:	431a      	orrs	r2, r3
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	430a      	orrs	r2, r1
 800779e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f042 0201 	orr.w	r2, r2, #1
 80077ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2220      	movs	r2, #32
 80077ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3710      	adds	r7, #16
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	000186a0 	.word	0x000186a0
 80077dc:	001e847f 	.word	0x001e847f
 80077e0:	003d08ff 	.word	0x003d08ff
 80077e4:	431bde83 	.word	0x431bde83
 80077e8:	10624dd3 	.word	0x10624dd3

080077ec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b088      	sub	sp, #32
 80077f0:	af02      	add	r7, sp, #8
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	4608      	mov	r0, r1
 80077f6:	4611      	mov	r1, r2
 80077f8:	461a      	mov	r2, r3
 80077fa:	4603      	mov	r3, r0
 80077fc:	817b      	strh	r3, [r7, #10]
 80077fe:	460b      	mov	r3, r1
 8007800:	813b      	strh	r3, [r7, #8]
 8007802:	4613      	mov	r3, r2
 8007804:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007806:	f7fe fbb1 	bl	8005f6c <HAL_GetTick>
 800780a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007812:	b2db      	uxtb	r3, r3
 8007814:	2b20      	cmp	r3, #32
 8007816:	f040 80d9 	bne.w	80079cc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	9300      	str	r3, [sp, #0]
 800781e:	2319      	movs	r3, #25
 8007820:	2201      	movs	r2, #1
 8007822:	496d      	ldr	r1, [pc, #436]	; (80079d8 <HAL_I2C_Mem_Write+0x1ec>)
 8007824:	68f8      	ldr	r0, [r7, #12]
 8007826:	f000 fdad 	bl	8008384 <I2C_WaitOnFlagUntilTimeout>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d001      	beq.n	8007834 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007830:	2302      	movs	r3, #2
 8007832:	e0cc      	b.n	80079ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800783a:	2b01      	cmp	r3, #1
 800783c:	d101      	bne.n	8007842 <HAL_I2C_Mem_Write+0x56>
 800783e:	2302      	movs	r3, #2
 8007840:	e0c5      	b.n	80079ce <HAL_I2C_Mem_Write+0x1e2>
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2201      	movs	r2, #1
 8007846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 0301 	and.w	r3, r3, #1
 8007854:	2b01      	cmp	r3, #1
 8007856:	d007      	beq.n	8007868 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f042 0201 	orr.w	r2, r2, #1
 8007866:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007876:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2221      	movs	r2, #33	; 0x21
 800787c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2240      	movs	r2, #64	; 0x40
 8007884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6a3a      	ldr	r2, [r7, #32]
 8007892:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007898:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800789e:	b29a      	uxth	r2, r3
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	4a4d      	ldr	r2, [pc, #308]	; (80079dc <HAL_I2C_Mem_Write+0x1f0>)
 80078a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80078aa:	88f8      	ldrh	r0, [r7, #6]
 80078ac:	893a      	ldrh	r2, [r7, #8]
 80078ae:	8979      	ldrh	r1, [r7, #10]
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	9301      	str	r3, [sp, #4]
 80078b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b6:	9300      	str	r3, [sp, #0]
 80078b8:	4603      	mov	r3, r0
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f000 fbe4 	bl	8008088 <I2C_RequestMemoryWrite>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d052      	beq.n	800796c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e081      	b.n	80079ce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078ca:	697a      	ldr	r2, [r7, #20]
 80078cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078ce:	68f8      	ldr	r0, [r7, #12]
 80078d0:	f000 fe2e 	bl	8008530 <I2C_WaitOnTXEFlagUntilTimeout>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00d      	beq.n	80078f6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078de:	2b04      	cmp	r3, #4
 80078e0:	d107      	bne.n	80078f2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	e06b      	b.n	80079ce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fa:	781a      	ldrb	r2, [r3, #0]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007906:	1c5a      	adds	r2, r3, #1
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007910:	3b01      	subs	r3, #1
 8007912:	b29a      	uxth	r2, r3
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800791c:	b29b      	uxth	r3, r3
 800791e:	3b01      	subs	r3, #1
 8007920:	b29a      	uxth	r2, r3
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	695b      	ldr	r3, [r3, #20]
 800792c:	f003 0304 	and.w	r3, r3, #4
 8007930:	2b04      	cmp	r3, #4
 8007932:	d11b      	bne.n	800796c <HAL_I2C_Mem_Write+0x180>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007938:	2b00      	cmp	r3, #0
 800793a:	d017      	beq.n	800796c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007940:	781a      	ldrb	r2, [r3, #0]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794c:	1c5a      	adds	r2, r3, #1
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007956:	3b01      	subs	r3, #1
 8007958:	b29a      	uxth	r2, r3
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007962:	b29b      	uxth	r3, r3
 8007964:	3b01      	subs	r3, #1
 8007966:	b29a      	uxth	r2, r3
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007970:	2b00      	cmp	r3, #0
 8007972:	d1aa      	bne.n	80078ca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007974:	697a      	ldr	r2, [r7, #20]
 8007976:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f000 fe1a 	bl	80085b2 <I2C_WaitOnBTFFlagUntilTimeout>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00d      	beq.n	80079a0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007988:	2b04      	cmp	r3, #4
 800798a:	d107      	bne.n	800799c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800799a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	e016      	b.n	80079ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2220      	movs	r2, #32
 80079b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2200      	movs	r2, #0
 80079bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80079c8:	2300      	movs	r3, #0
 80079ca:	e000      	b.n	80079ce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80079cc:	2302      	movs	r3, #2
  }
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3718      	adds	r7, #24
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	00100002 	.word	0x00100002
 80079dc:	ffff0000 	.word	0xffff0000

080079e0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b08c      	sub	sp, #48	; 0x30
 80079e4:	af02      	add	r7, sp, #8
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	4608      	mov	r0, r1
 80079ea:	4611      	mov	r1, r2
 80079ec:	461a      	mov	r2, r3
 80079ee:	4603      	mov	r3, r0
 80079f0:	817b      	strh	r3, [r7, #10]
 80079f2:	460b      	mov	r3, r1
 80079f4:	813b      	strh	r3, [r7, #8]
 80079f6:	4613      	mov	r3, r2
 80079f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80079fa:	f7fe fab7 	bl	8005f6c <HAL_GetTick>
 80079fe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	2b20      	cmp	r3, #32
 8007a0a:	f040 8208 	bne.w	8007e1e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a10:	9300      	str	r3, [sp, #0]
 8007a12:	2319      	movs	r3, #25
 8007a14:	2201      	movs	r2, #1
 8007a16:	497b      	ldr	r1, [pc, #492]	; (8007c04 <HAL_I2C_Mem_Read+0x224>)
 8007a18:	68f8      	ldr	r0, [r7, #12]
 8007a1a:	f000 fcb3 	bl	8008384 <I2C_WaitOnFlagUntilTimeout>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d001      	beq.n	8007a28 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007a24:	2302      	movs	r3, #2
 8007a26:	e1fb      	b.n	8007e20 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d101      	bne.n	8007a36 <HAL_I2C_Mem_Read+0x56>
 8007a32:	2302      	movs	r3, #2
 8007a34:	e1f4      	b.n	8007e20 <HAL_I2C_Mem_Read+0x440>
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f003 0301 	and.w	r3, r3, #1
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d007      	beq.n	8007a5c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f042 0201 	orr.w	r2, r2, #1
 8007a5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2222      	movs	r2, #34	; 0x22
 8007a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2240      	movs	r2, #64	; 0x40
 8007a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007a8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	4a5b      	ldr	r2, [pc, #364]	; (8007c08 <HAL_I2C_Mem_Read+0x228>)
 8007a9c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007a9e:	88f8      	ldrh	r0, [r7, #6]
 8007aa0:	893a      	ldrh	r2, [r7, #8]
 8007aa2:	8979      	ldrh	r1, [r7, #10]
 8007aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa6:	9301      	str	r3, [sp, #4]
 8007aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aaa:	9300      	str	r3, [sp, #0]
 8007aac:	4603      	mov	r3, r0
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f000 fb80 	bl	80081b4 <I2C_RequestMemoryRead>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d001      	beq.n	8007abe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e1b0      	b.n	8007e20 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d113      	bne.n	8007aee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	623b      	str	r3, [r7, #32]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	695b      	ldr	r3, [r3, #20]
 8007ad0:	623b      	str	r3, [r7, #32]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	699b      	ldr	r3, [r3, #24]
 8007ad8:	623b      	str	r3, [r7, #32]
 8007ada:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007aea:	601a      	str	r2, [r3, #0]
 8007aec:	e184      	b.n	8007df8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d11b      	bne.n	8007b2e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b06:	2300      	movs	r3, #0
 8007b08:	61fb      	str	r3, [r7, #28]
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	695b      	ldr	r3, [r3, #20]
 8007b10:	61fb      	str	r3, [r7, #28]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	699b      	ldr	r3, [r3, #24]
 8007b18:	61fb      	str	r3, [r7, #28]
 8007b1a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b2a:	601a      	str	r2, [r3, #0]
 8007b2c:	e164      	b.n	8007df8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d11b      	bne.n	8007b6e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b44:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b56:	2300      	movs	r3, #0
 8007b58:	61bb      	str	r3, [r7, #24]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	695b      	ldr	r3, [r3, #20]
 8007b60:	61bb      	str	r3, [r7, #24]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	699b      	ldr	r3, [r3, #24]
 8007b68:	61bb      	str	r3, [r7, #24]
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	e144      	b.n	8007df8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b6e:	2300      	movs	r3, #0
 8007b70:	617b      	str	r3, [r7, #20]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	695b      	ldr	r3, [r3, #20]
 8007b78:	617b      	str	r3, [r7, #20]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	699b      	ldr	r3, [r3, #24]
 8007b80:	617b      	str	r3, [r7, #20]
 8007b82:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007b84:	e138      	b.n	8007df8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b8a:	2b03      	cmp	r3, #3
 8007b8c:	f200 80f1 	bhi.w	8007d72 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d123      	bne.n	8007be0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b9c:	68f8      	ldr	r0, [r7, #12]
 8007b9e:	f000 fd49 	bl	8008634 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d001      	beq.n	8007bac <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e139      	b.n	8007e20 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	691a      	ldr	r2, [r3, #16]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb6:	b2d2      	uxtb	r2, r2
 8007bb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbe:	1c5a      	adds	r2, r3, #1
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	b29a      	uxth	r2, r3
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	b29a      	uxth	r2, r3
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007bde:	e10b      	b.n	8007df8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007be4:	2b02      	cmp	r3, #2
 8007be6:	d14e      	bne.n	8007c86 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bea:	9300      	str	r3, [sp, #0]
 8007bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bee:	2200      	movs	r2, #0
 8007bf0:	4906      	ldr	r1, [pc, #24]	; (8007c0c <HAL_I2C_Mem_Read+0x22c>)
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f000 fbc6 	bl	8008384 <I2C_WaitOnFlagUntilTimeout>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d008      	beq.n	8007c10 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e10e      	b.n	8007e20 <HAL_I2C_Mem_Read+0x440>
 8007c02:	bf00      	nop
 8007c04:	00100002 	.word	0x00100002
 8007c08:	ffff0000 	.word	0xffff0000
 8007c0c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	691a      	ldr	r2, [r3, #16]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2a:	b2d2      	uxtb	r2, r2
 8007c2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c32:	1c5a      	adds	r2, r3, #1
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	b29a      	uxth	r2, r3
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	b29a      	uxth	r2, r3
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	691a      	ldr	r2, [r3, #16]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5c:	b2d2      	uxtb	r2, r2
 8007c5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c64:	1c5a      	adds	r2, r3, #1
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c6e:	3b01      	subs	r3, #1
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007c84:	e0b8      	b.n	8007df8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c88:	9300      	str	r3, [sp, #0]
 8007c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	4966      	ldr	r1, [pc, #408]	; (8007e28 <HAL_I2C_Mem_Read+0x448>)
 8007c90:	68f8      	ldr	r0, [r7, #12]
 8007c92:	f000 fb77 	bl	8008384 <I2C_WaitOnFlagUntilTimeout>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d001      	beq.n	8007ca0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e0bf      	b.n	8007e20 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	691a      	ldr	r2, [r3, #16]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cba:	b2d2      	uxtb	r2, r2
 8007cbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc2:	1c5a      	adds	r2, r3, #1
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	b29a      	uxth	r2, r3
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	3b01      	subs	r3, #1
 8007cdc:	b29a      	uxth	r2, r3
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce4:	9300      	str	r3, [sp, #0]
 8007ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce8:	2200      	movs	r2, #0
 8007cea:	494f      	ldr	r1, [pc, #316]	; (8007e28 <HAL_I2C_Mem_Read+0x448>)
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	f000 fb49 	bl	8008384 <I2C_WaitOnFlagUntilTimeout>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d001      	beq.n	8007cfc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e091      	b.n	8007e20 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	691a      	ldr	r2, [r3, #16]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d16:	b2d2      	uxtb	r2, r2
 8007d18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1e:	1c5a      	adds	r2, r3, #1
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d28:	3b01      	subs	r3, #1
 8007d2a:	b29a      	uxth	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	3b01      	subs	r3, #1
 8007d38:	b29a      	uxth	r2, r3
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	691a      	ldr	r2, [r3, #16]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d48:	b2d2      	uxtb	r2, r2
 8007d4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d50:	1c5a      	adds	r2, r3, #1
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	3b01      	subs	r3, #1
 8007d6a:	b29a      	uxth	r2, r3
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007d70:	e042      	b.n	8007df8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d76:	68f8      	ldr	r0, [r7, #12]
 8007d78:	f000 fc5c 	bl	8008634 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d001      	beq.n	8007d86 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	e04c      	b.n	8007e20 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	691a      	ldr	r2, [r3, #16]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d90:	b2d2      	uxtb	r2, r2
 8007d92:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d98:	1c5a      	adds	r2, r3, #1
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007da2:	3b01      	subs	r3, #1
 8007da4:	b29a      	uxth	r2, r3
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	3b01      	subs	r3, #1
 8007db2:	b29a      	uxth	r2, r3
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	695b      	ldr	r3, [r3, #20]
 8007dbe:	f003 0304 	and.w	r3, r3, #4
 8007dc2:	2b04      	cmp	r3, #4
 8007dc4:	d118      	bne.n	8007df8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	691a      	ldr	r2, [r3, #16]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd0:	b2d2      	uxtb	r2, r2
 8007dd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd8:	1c5a      	adds	r2, r3, #1
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007de2:	3b01      	subs	r3, #1
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	3b01      	subs	r3, #1
 8007df2:	b29a      	uxth	r2, r3
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f47f aec2 	bne.w	8007b86 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2220      	movs	r2, #32
 8007e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2200      	movs	r2, #0
 8007e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	e000      	b.n	8007e20 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007e1e:	2302      	movs	r3, #2
  }
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3728      	adds	r7, #40	; 0x28
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	00010004 	.word	0x00010004

08007e2c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b08a      	sub	sp, #40	; 0x28
 8007e30:	af02      	add	r7, sp, #8
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	607a      	str	r2, [r7, #4]
 8007e36:	603b      	str	r3, [r7, #0]
 8007e38:	460b      	mov	r3, r1
 8007e3a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8007e3c:	f7fe f896 	bl	8005f6c <HAL_GetTick>
 8007e40:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8007e42:	2300      	movs	r3, #0
 8007e44:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	2b20      	cmp	r3, #32
 8007e50:	f040 8111 	bne.w	8008076 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	9300      	str	r3, [sp, #0]
 8007e58:	2319      	movs	r3, #25
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	4988      	ldr	r1, [pc, #544]	; (8008080 <HAL_I2C_IsDeviceReady+0x254>)
 8007e5e:	68f8      	ldr	r0, [r7, #12]
 8007e60:	f000 fa90 	bl	8008384 <I2C_WaitOnFlagUntilTimeout>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d001      	beq.n	8007e6e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8007e6a:	2302      	movs	r3, #2
 8007e6c:	e104      	b.n	8008078 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d101      	bne.n	8007e7c <HAL_I2C_IsDeviceReady+0x50>
 8007e78:	2302      	movs	r3, #2
 8007e7a:	e0fd      	b.n	8008078 <HAL_I2C_IsDeviceReady+0x24c>
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f003 0301 	and.w	r3, r3, #1
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d007      	beq.n	8007ea2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f042 0201 	orr.w	r2, r2, #1
 8007ea0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007eb0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2224      	movs	r2, #36	; 0x24
 8007eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	4a70      	ldr	r2, [pc, #448]	; (8008084 <HAL_I2C_IsDeviceReady+0x258>)
 8007ec4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ed4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	9300      	str	r3, [sp, #0]
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007ee2:	68f8      	ldr	r0, [r7, #12]
 8007ee4:	f000 fa4e 	bl	8008384 <I2C_WaitOnFlagUntilTimeout>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00d      	beq.n	8007f0a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ef8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007efc:	d103      	bne.n	8007f06 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f04:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8007f06:	2303      	movs	r3, #3
 8007f08:	e0b6      	b.n	8008078 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007f0a:	897b      	ldrh	r3, [r7, #10]
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	461a      	mov	r2, r3
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007f18:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8007f1a:	f7fe f827 	bl	8005f6c <HAL_GetTick>
 8007f1e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	695b      	ldr	r3, [r3, #20]
 8007f26:	f003 0302 	and.w	r3, r3, #2
 8007f2a:	2b02      	cmp	r3, #2
 8007f2c:	bf0c      	ite	eq
 8007f2e:	2301      	moveq	r3, #1
 8007f30:	2300      	movne	r3, #0
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	695b      	ldr	r3, [r3, #20]
 8007f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f44:	bf0c      	ite	eq
 8007f46:	2301      	moveq	r3, #1
 8007f48:	2300      	movne	r3, #0
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007f4e:	e025      	b.n	8007f9c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007f50:	f7fe f80c 	bl	8005f6c <HAL_GetTick>
 8007f54:	4602      	mov	r2, r0
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	1ad3      	subs	r3, r2, r3
 8007f5a:	683a      	ldr	r2, [r7, #0]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d302      	bcc.n	8007f66 <HAL_I2C_IsDeviceReady+0x13a>
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d103      	bne.n	8007f6e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	22a0      	movs	r2, #160	; 0xa0
 8007f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	695b      	ldr	r3, [r3, #20]
 8007f74:	f003 0302 	and.w	r3, r3, #2
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	bf0c      	ite	eq
 8007f7c:	2301      	moveq	r3, #1
 8007f7e:	2300      	movne	r3, #0
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	695b      	ldr	r3, [r3, #20]
 8007f8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f92:	bf0c      	ite	eq
 8007f94:	2301      	moveq	r3, #1
 8007f96:	2300      	movne	r3, #0
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	2ba0      	cmp	r3, #160	; 0xa0
 8007fa6:	d005      	beq.n	8007fb4 <HAL_I2C_IsDeviceReady+0x188>
 8007fa8:	7dfb      	ldrb	r3, [r7, #23]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d102      	bne.n	8007fb4 <HAL_I2C_IsDeviceReady+0x188>
 8007fae:	7dbb      	ldrb	r3, [r7, #22]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d0cd      	beq.n	8007f50 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2220      	movs	r2, #32
 8007fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	695b      	ldr	r3, [r3, #20]
 8007fc2:	f003 0302 	and.w	r3, r3, #2
 8007fc6:	2b02      	cmp	r3, #2
 8007fc8:	d129      	bne.n	800801e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fd8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fda:	2300      	movs	r3, #0
 8007fdc:	613b      	str	r3, [r7, #16]
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	695b      	ldr	r3, [r3, #20]
 8007fe4:	613b      	str	r3, [r7, #16]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	699b      	ldr	r3, [r3, #24]
 8007fec:	613b      	str	r3, [r7, #16]
 8007fee:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	9300      	str	r3, [sp, #0]
 8007ff4:	2319      	movs	r3, #25
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	4921      	ldr	r1, [pc, #132]	; (8008080 <HAL_I2C_IsDeviceReady+0x254>)
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f000 f9c2 	bl	8008384 <I2C_WaitOnFlagUntilTimeout>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d001      	beq.n	800800a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e036      	b.n	8008078 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2220      	movs	r2, #32
 800800e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2200      	movs	r2, #0
 8008016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800801a:	2300      	movs	r3, #0
 800801c:	e02c      	b.n	8008078 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800802c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008036:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008038:	69fb      	ldr	r3, [r7, #28]
 800803a:	9300      	str	r3, [sp, #0]
 800803c:	2319      	movs	r3, #25
 800803e:	2201      	movs	r2, #1
 8008040:	490f      	ldr	r1, [pc, #60]	; (8008080 <HAL_I2C_IsDeviceReady+0x254>)
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f000 f99e 	bl	8008384 <I2C_WaitOnFlagUntilTimeout>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d001      	beq.n	8008052 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	e012      	b.n	8008078 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	3301      	adds	r3, #1
 8008056:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8008058:	69ba      	ldr	r2, [r7, #24]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	429a      	cmp	r2, r3
 800805e:	f4ff af32 	bcc.w	8007ec6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2220      	movs	r2, #32
 8008066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2200      	movs	r2, #0
 800806e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	e000      	b.n	8008078 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8008076:	2302      	movs	r3, #2
  }
}
 8008078:	4618      	mov	r0, r3
 800807a:	3720      	adds	r7, #32
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}
 8008080:	00100002 	.word	0x00100002
 8008084:	ffff0000 	.word	0xffff0000

08008088 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b088      	sub	sp, #32
 800808c:	af02      	add	r7, sp, #8
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	4608      	mov	r0, r1
 8008092:	4611      	mov	r1, r2
 8008094:	461a      	mov	r2, r3
 8008096:	4603      	mov	r3, r0
 8008098:	817b      	strh	r3, [r7, #10]
 800809a:	460b      	mov	r3, r1
 800809c:	813b      	strh	r3, [r7, #8]
 800809e:	4613      	mov	r3, r2
 80080a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80080b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b4:	9300      	str	r3, [sp, #0]
 80080b6:	6a3b      	ldr	r3, [r7, #32]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80080be:	68f8      	ldr	r0, [r7, #12]
 80080c0:	f000 f960 	bl	8008384 <I2C_WaitOnFlagUntilTimeout>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00d      	beq.n	80080e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080d8:	d103      	bne.n	80080e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80080e2:	2303      	movs	r3, #3
 80080e4:	e05f      	b.n	80081a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80080e6:	897b      	ldrh	r3, [r7, #10]
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	461a      	mov	r2, r3
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80080f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80080f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f8:	6a3a      	ldr	r2, [r7, #32]
 80080fa:	492d      	ldr	r1, [pc, #180]	; (80081b0 <I2C_RequestMemoryWrite+0x128>)
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	f000 f998 	bl	8008432 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d001      	beq.n	800810c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	e04c      	b.n	80081a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800810c:	2300      	movs	r3, #0
 800810e:	617b      	str	r3, [r7, #20]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	695b      	ldr	r3, [r3, #20]
 8008116:	617b      	str	r3, [r7, #20]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	699b      	ldr	r3, [r3, #24]
 800811e:	617b      	str	r3, [r7, #20]
 8008120:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008124:	6a39      	ldr	r1, [r7, #32]
 8008126:	68f8      	ldr	r0, [r7, #12]
 8008128:	f000 fa02 	bl	8008530 <I2C_WaitOnTXEFlagUntilTimeout>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d00d      	beq.n	800814e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008136:	2b04      	cmp	r3, #4
 8008138:	d107      	bne.n	800814a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008148:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	e02b      	b.n	80081a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800814e:	88fb      	ldrh	r3, [r7, #6]
 8008150:	2b01      	cmp	r3, #1
 8008152:	d105      	bne.n	8008160 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008154:	893b      	ldrh	r3, [r7, #8]
 8008156:	b2da      	uxtb	r2, r3
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	611a      	str	r2, [r3, #16]
 800815e:	e021      	b.n	80081a4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008160:	893b      	ldrh	r3, [r7, #8]
 8008162:	0a1b      	lsrs	r3, r3, #8
 8008164:	b29b      	uxth	r3, r3
 8008166:	b2da      	uxtb	r2, r3
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800816e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008170:	6a39      	ldr	r1, [r7, #32]
 8008172:	68f8      	ldr	r0, [r7, #12]
 8008174:	f000 f9dc 	bl	8008530 <I2C_WaitOnTXEFlagUntilTimeout>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00d      	beq.n	800819a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008182:	2b04      	cmp	r3, #4
 8008184:	d107      	bne.n	8008196 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008194:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	e005      	b.n	80081a6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800819a:	893b      	ldrh	r3, [r7, #8]
 800819c:	b2da      	uxtb	r2, r3
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3718      	adds	r7, #24
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	00010002 	.word	0x00010002

080081b4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b088      	sub	sp, #32
 80081b8:	af02      	add	r7, sp, #8
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	4608      	mov	r0, r1
 80081be:	4611      	mov	r1, r2
 80081c0:	461a      	mov	r2, r3
 80081c2:	4603      	mov	r3, r0
 80081c4:	817b      	strh	r3, [r7, #10]
 80081c6:	460b      	mov	r3, r1
 80081c8:	813b      	strh	r3, [r7, #8]
 80081ca:	4613      	mov	r3, r2
 80081cc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80081dc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80081ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f0:	9300      	str	r3, [sp, #0]
 80081f2:	6a3b      	ldr	r3, [r7, #32]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80081fa:	68f8      	ldr	r0, [r7, #12]
 80081fc:	f000 f8c2 	bl	8008384 <I2C_WaitOnFlagUntilTimeout>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d00d      	beq.n	8008222 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008214:	d103      	bne.n	800821e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f44f 7200 	mov.w	r2, #512	; 0x200
 800821c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800821e:	2303      	movs	r3, #3
 8008220:	e0aa      	b.n	8008378 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008222:	897b      	ldrh	r3, [r7, #10]
 8008224:	b2db      	uxtb	r3, r3
 8008226:	461a      	mov	r2, r3
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008230:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008234:	6a3a      	ldr	r2, [r7, #32]
 8008236:	4952      	ldr	r1, [pc, #328]	; (8008380 <I2C_RequestMemoryRead+0x1cc>)
 8008238:	68f8      	ldr	r0, [r7, #12]
 800823a:	f000 f8fa 	bl	8008432 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800823e:	4603      	mov	r3, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d001      	beq.n	8008248 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008244:	2301      	movs	r3, #1
 8008246:	e097      	b.n	8008378 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008248:	2300      	movs	r3, #0
 800824a:	617b      	str	r3, [r7, #20]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	695b      	ldr	r3, [r3, #20]
 8008252:	617b      	str	r3, [r7, #20]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	699b      	ldr	r3, [r3, #24]
 800825a:	617b      	str	r3, [r7, #20]
 800825c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800825e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008260:	6a39      	ldr	r1, [r7, #32]
 8008262:	68f8      	ldr	r0, [r7, #12]
 8008264:	f000 f964 	bl	8008530 <I2C_WaitOnTXEFlagUntilTimeout>
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d00d      	beq.n	800828a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008272:	2b04      	cmp	r3, #4
 8008274:	d107      	bne.n	8008286 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008284:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008286:	2301      	movs	r3, #1
 8008288:	e076      	b.n	8008378 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800828a:	88fb      	ldrh	r3, [r7, #6]
 800828c:	2b01      	cmp	r3, #1
 800828e:	d105      	bne.n	800829c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008290:	893b      	ldrh	r3, [r7, #8]
 8008292:	b2da      	uxtb	r2, r3
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	611a      	str	r2, [r3, #16]
 800829a:	e021      	b.n	80082e0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800829c:	893b      	ldrh	r3, [r7, #8]
 800829e:	0a1b      	lsrs	r3, r3, #8
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	b2da      	uxtb	r2, r3
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80082aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082ac:	6a39      	ldr	r1, [r7, #32]
 80082ae:	68f8      	ldr	r0, [r7, #12]
 80082b0:	f000 f93e 	bl	8008530 <I2C_WaitOnTXEFlagUntilTimeout>
 80082b4:	4603      	mov	r3, r0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d00d      	beq.n	80082d6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082be:	2b04      	cmp	r3, #4
 80082c0:	d107      	bne.n	80082d2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80082d2:	2301      	movs	r3, #1
 80082d4:	e050      	b.n	8008378 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80082d6:	893b      	ldrh	r3, [r7, #8]
 80082d8:	b2da      	uxtb	r2, r3
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80082e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082e2:	6a39      	ldr	r1, [r7, #32]
 80082e4:	68f8      	ldr	r0, [r7, #12]
 80082e6:	f000 f923 	bl	8008530 <I2C_WaitOnTXEFlagUntilTimeout>
 80082ea:	4603      	mov	r3, r0
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d00d      	beq.n	800830c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f4:	2b04      	cmp	r3, #4
 80082f6:	d107      	bne.n	8008308 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008306:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	e035      	b.n	8008378 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800831a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800831c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831e:	9300      	str	r3, [sp, #0]
 8008320:	6a3b      	ldr	r3, [r7, #32]
 8008322:	2200      	movs	r2, #0
 8008324:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	f000 f82b 	bl	8008384 <I2C_WaitOnFlagUntilTimeout>
 800832e:	4603      	mov	r3, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00d      	beq.n	8008350 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800833e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008342:	d103      	bne.n	800834c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f44f 7200 	mov.w	r2, #512	; 0x200
 800834a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800834c:	2303      	movs	r3, #3
 800834e:	e013      	b.n	8008378 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008350:	897b      	ldrh	r3, [r7, #10]
 8008352:	b2db      	uxtb	r3, r3
 8008354:	f043 0301 	orr.w	r3, r3, #1
 8008358:	b2da      	uxtb	r2, r3
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008362:	6a3a      	ldr	r2, [r7, #32]
 8008364:	4906      	ldr	r1, [pc, #24]	; (8008380 <I2C_RequestMemoryRead+0x1cc>)
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	f000 f863 	bl	8008432 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800836c:	4603      	mov	r3, r0
 800836e:	2b00      	cmp	r3, #0
 8008370:	d001      	beq.n	8008376 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	e000      	b.n	8008378 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008376:	2300      	movs	r3, #0
}
 8008378:	4618      	mov	r0, r3
 800837a:	3718      	adds	r7, #24
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}
 8008380:	00010002 	.word	0x00010002

08008384 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	603b      	str	r3, [r7, #0]
 8008390:	4613      	mov	r3, r2
 8008392:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008394:	e025      	b.n	80083e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800839c:	d021      	beq.n	80083e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800839e:	f7fd fde5 	bl	8005f6c <HAL_GetTick>
 80083a2:	4602      	mov	r2, r0
 80083a4:	69bb      	ldr	r3, [r7, #24]
 80083a6:	1ad3      	subs	r3, r2, r3
 80083a8:	683a      	ldr	r2, [r7, #0]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d302      	bcc.n	80083b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d116      	bne.n	80083e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2200      	movs	r2, #0
 80083b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2220      	movs	r2, #32
 80083be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2200      	movs	r2, #0
 80083c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ce:	f043 0220 	orr.w	r2, r3, #32
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2200      	movs	r2, #0
 80083da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	e023      	b.n	800842a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	0c1b      	lsrs	r3, r3, #16
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d10d      	bne.n	8008408 <I2C_WaitOnFlagUntilTimeout+0x84>
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	695b      	ldr	r3, [r3, #20]
 80083f2:	43da      	mvns	r2, r3
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	4013      	ands	r3, r2
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	bf0c      	ite	eq
 80083fe:	2301      	moveq	r3, #1
 8008400:	2300      	movne	r3, #0
 8008402:	b2db      	uxtb	r3, r3
 8008404:	461a      	mov	r2, r3
 8008406:	e00c      	b.n	8008422 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	699b      	ldr	r3, [r3, #24]
 800840e:	43da      	mvns	r2, r3
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	4013      	ands	r3, r2
 8008414:	b29b      	uxth	r3, r3
 8008416:	2b00      	cmp	r3, #0
 8008418:	bf0c      	ite	eq
 800841a:	2301      	moveq	r3, #1
 800841c:	2300      	movne	r3, #0
 800841e:	b2db      	uxtb	r3, r3
 8008420:	461a      	mov	r2, r3
 8008422:	79fb      	ldrb	r3, [r7, #7]
 8008424:	429a      	cmp	r2, r3
 8008426:	d0b6      	beq.n	8008396 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008428:	2300      	movs	r3, #0
}
 800842a:	4618      	mov	r0, r3
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b084      	sub	sp, #16
 8008436:	af00      	add	r7, sp, #0
 8008438:	60f8      	str	r0, [r7, #12]
 800843a:	60b9      	str	r1, [r7, #8]
 800843c:	607a      	str	r2, [r7, #4]
 800843e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008440:	e051      	b.n	80084e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	695b      	ldr	r3, [r3, #20]
 8008448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800844c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008450:	d123      	bne.n	800849a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008460:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800846a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2200      	movs	r2, #0
 8008470:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2220      	movs	r2, #32
 8008476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008486:	f043 0204 	orr.w	r2, r3, #4
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2200      	movs	r2, #0
 8008492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	e046      	b.n	8008528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084a0:	d021      	beq.n	80084e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084a2:	f7fd fd63 	bl	8005f6c <HAL_GetTick>
 80084a6:	4602      	mov	r2, r0
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	1ad3      	subs	r3, r2, r3
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d302      	bcc.n	80084b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d116      	bne.n	80084e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2200      	movs	r2, #0
 80084bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2220      	movs	r2, #32
 80084c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2200      	movs	r2, #0
 80084ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d2:	f043 0220 	orr.w	r2, r3, #32
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2200      	movs	r2, #0
 80084de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	e020      	b.n	8008528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	0c1b      	lsrs	r3, r3, #16
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d10c      	bne.n	800850a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	695b      	ldr	r3, [r3, #20]
 80084f6:	43da      	mvns	r2, r3
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	4013      	ands	r3, r2
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	2b00      	cmp	r3, #0
 8008500:	bf14      	ite	ne
 8008502:	2301      	movne	r3, #1
 8008504:	2300      	moveq	r3, #0
 8008506:	b2db      	uxtb	r3, r3
 8008508:	e00b      	b.n	8008522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	699b      	ldr	r3, [r3, #24]
 8008510:	43da      	mvns	r2, r3
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	4013      	ands	r3, r2
 8008516:	b29b      	uxth	r3, r3
 8008518:	2b00      	cmp	r3, #0
 800851a:	bf14      	ite	ne
 800851c:	2301      	movne	r3, #1
 800851e:	2300      	moveq	r3, #0
 8008520:	b2db      	uxtb	r3, r3
 8008522:	2b00      	cmp	r3, #0
 8008524:	d18d      	bne.n	8008442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008526:	2300      	movs	r3, #0
}
 8008528:	4618      	mov	r0, r3
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800853c:	e02d      	b.n	800859a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f000 f8ce 	bl	80086e0 <I2C_IsAcknowledgeFailed>
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d001      	beq.n	800854e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800854a:	2301      	movs	r3, #1
 800854c:	e02d      	b.n	80085aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008554:	d021      	beq.n	800859a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008556:	f7fd fd09 	bl	8005f6c <HAL_GetTick>
 800855a:	4602      	mov	r2, r0
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	1ad3      	subs	r3, r2, r3
 8008560:	68ba      	ldr	r2, [r7, #8]
 8008562:	429a      	cmp	r2, r3
 8008564:	d302      	bcc.n	800856c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d116      	bne.n	800859a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2200      	movs	r2, #0
 8008570:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2220      	movs	r2, #32
 8008576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2200      	movs	r2, #0
 800857e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008586:	f043 0220 	orr.w	r2, r3, #32
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2200      	movs	r2, #0
 8008592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	e007      	b.n	80085aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	695b      	ldr	r3, [r3, #20]
 80085a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085a4:	2b80      	cmp	r3, #128	; 0x80
 80085a6:	d1ca      	bne.n	800853e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80085a8:	2300      	movs	r3, #0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}

080085b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80085b2:	b580      	push	{r7, lr}
 80085b4:	b084      	sub	sp, #16
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	60f8      	str	r0, [r7, #12]
 80085ba:	60b9      	str	r1, [r7, #8]
 80085bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80085be:	e02d      	b.n	800861c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f000 f88d 	bl	80086e0 <I2C_IsAcknowledgeFailed>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d001      	beq.n	80085d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	e02d      	b.n	800862c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d6:	d021      	beq.n	800861c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085d8:	f7fd fcc8 	bl	8005f6c <HAL_GetTick>
 80085dc:	4602      	mov	r2, r0
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	1ad3      	subs	r3, r2, r3
 80085e2:	68ba      	ldr	r2, [r7, #8]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d302      	bcc.n	80085ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d116      	bne.n	800861c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2200      	movs	r2, #0
 80085f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2220      	movs	r2, #32
 80085f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2200      	movs	r2, #0
 8008600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008608:	f043 0220 	orr.w	r2, r3, #32
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2200      	movs	r2, #0
 8008614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	e007      	b.n	800862c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	695b      	ldr	r3, [r3, #20]
 8008622:	f003 0304 	and.w	r3, r3, #4
 8008626:	2b04      	cmp	r3, #4
 8008628:	d1ca      	bne.n	80085c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800862a:	2300      	movs	r3, #0
}
 800862c:	4618      	mov	r0, r3
 800862e:	3710      	adds	r7, #16
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008640:	e042      	b.n	80086c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	695b      	ldr	r3, [r3, #20]
 8008648:	f003 0310 	and.w	r3, r3, #16
 800864c:	2b10      	cmp	r3, #16
 800864e:	d119      	bne.n	8008684 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f06f 0210 	mvn.w	r2, #16
 8008658:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2200      	movs	r2, #0
 800865e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2220      	movs	r2, #32
 8008664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2200      	movs	r2, #0
 800866c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2200      	movs	r2, #0
 800867c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	e029      	b.n	80086d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008684:	f7fd fc72 	bl	8005f6c <HAL_GetTick>
 8008688:	4602      	mov	r2, r0
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	1ad3      	subs	r3, r2, r3
 800868e:	68ba      	ldr	r2, [r7, #8]
 8008690:	429a      	cmp	r2, r3
 8008692:	d302      	bcc.n	800869a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d116      	bne.n	80086c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2200      	movs	r2, #0
 800869e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2220      	movs	r2, #32
 80086a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2200      	movs	r2, #0
 80086ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b4:	f043 0220 	orr.w	r2, r3, #32
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2200      	movs	r2, #0
 80086c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	e007      	b.n	80086d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	695b      	ldr	r3, [r3, #20]
 80086ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086d2:	2b40      	cmp	r3, #64	; 0x40
 80086d4:	d1b5      	bne.n	8008642 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80086d6:	2300      	movs	r3, #0
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3710      	adds	r7, #16
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b083      	sub	sp, #12
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	695b      	ldr	r3, [r3, #20]
 80086ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086f6:	d11b      	bne.n	8008730 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008700:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2220      	movs	r2, #32
 800870c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800871c:	f043 0204 	orr.w	r2, r3, #4
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800872c:	2301      	movs	r3, #1
 800872e:	e000      	b.n	8008732 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	370c      	adds	r7, #12
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr
	...

08008740 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8008746:	4b06      	ldr	r3, [pc, #24]	; (8008760 <HAL_PWR_EnableBkUpAccess+0x20>)
 8008748:	2201      	movs	r2, #1
 800874a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 800874c:	4b05      	ldr	r3, [pc, #20]	; (8008764 <HAL_PWR_EnableBkUpAccess+0x24>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8008752:	687b      	ldr	r3, [r7, #4]
}
 8008754:	bf00      	nop
 8008756:	370c      	adds	r7, #12
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr
 8008760:	420e0020 	.word	0x420e0020
 8008764:	40007000 	.word	0x40007000

08008768 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 800876e:	4b06      	ldr	r3, [pc, #24]	; (8008788 <HAL_PWR_DisableBkUpAccess+0x20>)
 8008770:	2200      	movs	r2, #0
 8008772:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8008774:	4b05      	ldr	r3, [pc, #20]	; (800878c <HAL_PWR_DisableBkUpAccess+0x24>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800877a:	687b      	ldr	r3, [r7, #4]
}
 800877c:	bf00      	nop
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr
 8008788:	420e0020 	.word	0x420e0020
 800878c:	40007000 	.word	0x40007000

08008790 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b086      	sub	sp, #24
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d101      	bne.n	80087a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800879e:	2301      	movs	r3, #1
 80087a0:	e267      	b.n	8008c72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f003 0301 	and.w	r3, r3, #1
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d075      	beq.n	800889a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80087ae:	4b88      	ldr	r3, [pc, #544]	; (80089d0 <HAL_RCC_OscConfig+0x240>)
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	f003 030c 	and.w	r3, r3, #12
 80087b6:	2b04      	cmp	r3, #4
 80087b8:	d00c      	beq.n	80087d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80087ba:	4b85      	ldr	r3, [pc, #532]	; (80089d0 <HAL_RCC_OscConfig+0x240>)
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80087c2:	2b08      	cmp	r3, #8
 80087c4:	d112      	bne.n	80087ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80087c6:	4b82      	ldr	r3, [pc, #520]	; (80089d0 <HAL_RCC_OscConfig+0x240>)
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80087d2:	d10b      	bne.n	80087ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087d4:	4b7e      	ldr	r3, [pc, #504]	; (80089d0 <HAL_RCC_OscConfig+0x240>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d05b      	beq.n	8008898 <HAL_RCC_OscConfig+0x108>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d157      	bne.n	8008898 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80087e8:	2301      	movs	r3, #1
 80087ea:	e242      	b.n	8008c72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087f4:	d106      	bne.n	8008804 <HAL_RCC_OscConfig+0x74>
 80087f6:	4b76      	ldr	r3, [pc, #472]	; (80089d0 <HAL_RCC_OscConfig+0x240>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a75      	ldr	r2, [pc, #468]	; (80089d0 <HAL_RCC_OscConfig+0x240>)
 80087fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008800:	6013      	str	r3, [r2, #0]
 8008802:	e01d      	b.n	8008840 <HAL_RCC_OscConfig+0xb0>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800880c:	d10c      	bne.n	8008828 <HAL_RCC_OscConfig+0x98>
 800880e:	4b70      	ldr	r3, [pc, #448]	; (80089d0 <HAL_RCC_OscConfig+0x240>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a6f      	ldr	r2, [pc, #444]	; (80089d0 <HAL_RCC_OscConfig+0x240>)
 8008814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008818:	6013      	str	r3, [r2, #0]
 800881a:	4b6d      	ldr	r3, [pc, #436]	; (80089d0 <HAL_RCC_OscConfig+0x240>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a6c      	ldr	r2, [pc, #432]	; (80089d0 <HAL_RCC_OscConfig+0x240>)
 8008820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008824:	6013      	str	r3, [r2, #0]
 8008826:	e00b      	b.n	8008840 <HAL_RCC_OscConfig+0xb0>
 8008828:	4b69      	ldr	r3, [pc, #420]	; (80089d0 <HAL_RCC_OscConfig+0x240>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a68      	ldr	r2, [pc, #416]	; (80089d0 <HAL_RCC_OscConfig+0x240>)
 800882e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008832:	6013      	str	r3, [r2, #0]
 8008834:	4b66      	ldr	r3, [pc, #408]	; (80089d0 <HAL_RCC_OscConfig+0x240>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a65      	ldr	r2, [pc, #404]	; (80089d0 <HAL_RCC_OscConfig+0x240>)
 800883a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800883e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d013      	beq.n	8008870 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008848:	f7fd fb90 	bl	8005f6c <HAL_GetTick>
 800884c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800884e:	e008      	b.n	8008862 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008850:	f7fd fb8c 	bl	8005f6c <HAL_GetTick>
 8008854:	4602      	mov	r2, r0
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	1ad3      	subs	r3, r2, r3
 800885a:	2b64      	cmp	r3, #100	; 0x64
 800885c:	d901      	bls.n	8008862 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800885e:	2303      	movs	r3, #3
 8008860:	e207      	b.n	8008c72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008862:	4b5b      	ldr	r3, [pc, #364]	; (80089d0 <HAL_RCC_OscConfig+0x240>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800886a:	2b00      	cmp	r3, #0
 800886c:	d0f0      	beq.n	8008850 <HAL_RCC_OscConfig+0xc0>
 800886e:	e014      	b.n	800889a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008870:	f7fd fb7c 	bl	8005f6c <HAL_GetTick>
 8008874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008876:	e008      	b.n	800888a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008878:	f7fd fb78 	bl	8005f6c <HAL_GetTick>
 800887c:	4602      	mov	r2, r0
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	1ad3      	subs	r3, r2, r3
 8008882:	2b64      	cmp	r3, #100	; 0x64
 8008884:	d901      	bls.n	800888a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008886:	2303      	movs	r3, #3
 8008888:	e1f3      	b.n	8008c72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800888a:	4b51      	ldr	r3, [pc, #324]	; (80089d0 <HAL_RCC_OscConfig+0x240>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008892:	2b00      	cmp	r3, #0
 8008894:	d1f0      	bne.n	8008878 <HAL_RCC_OscConfig+0xe8>
 8008896:	e000      	b.n	800889a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f003 0302 	and.w	r3, r3, #2
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d063      	beq.n	800896e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80088a6:	4b4a      	ldr	r3, [pc, #296]	; (80089d0 <HAL_RCC_OscConfig+0x240>)
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	f003 030c 	and.w	r3, r3, #12
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d00b      	beq.n	80088ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80088b2:	4b47      	ldr	r3, [pc, #284]	; (80089d0 <HAL_RCC_OscConfig+0x240>)
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80088ba:	2b08      	cmp	r3, #8
 80088bc:	d11c      	bne.n	80088f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80088be:	4b44      	ldr	r3, [pc, #272]	; (80089d0 <HAL_RCC_OscConfig+0x240>)
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d116      	bne.n	80088f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80088ca:	4b41      	ldr	r3, [pc, #260]	; (80089d0 <HAL_RCC_OscConfig+0x240>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f003 0302 	and.w	r3, r3, #2
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d005      	beq.n	80088e2 <HAL_RCC_OscConfig+0x152>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d001      	beq.n	80088e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80088de:	2301      	movs	r3, #1
 80088e0:	e1c7      	b.n	8008c72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088e2:	4b3b      	ldr	r3, [pc, #236]	; (80089d0 <HAL_RCC_OscConfig+0x240>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	691b      	ldr	r3, [r3, #16]
 80088ee:	00db      	lsls	r3, r3, #3
 80088f0:	4937      	ldr	r1, [pc, #220]	; (80089d0 <HAL_RCC_OscConfig+0x240>)
 80088f2:	4313      	orrs	r3, r2
 80088f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80088f6:	e03a      	b.n	800896e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d020      	beq.n	8008942 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008900:	4b34      	ldr	r3, [pc, #208]	; (80089d4 <HAL_RCC_OscConfig+0x244>)
 8008902:	2201      	movs	r2, #1
 8008904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008906:	f7fd fb31 	bl	8005f6c <HAL_GetTick>
 800890a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800890c:	e008      	b.n	8008920 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800890e:	f7fd fb2d 	bl	8005f6c <HAL_GetTick>
 8008912:	4602      	mov	r2, r0
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	1ad3      	subs	r3, r2, r3
 8008918:	2b02      	cmp	r3, #2
 800891a:	d901      	bls.n	8008920 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800891c:	2303      	movs	r3, #3
 800891e:	e1a8      	b.n	8008c72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008920:	4b2b      	ldr	r3, [pc, #172]	; (80089d0 <HAL_RCC_OscConfig+0x240>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 0302 	and.w	r3, r3, #2
 8008928:	2b00      	cmp	r3, #0
 800892a:	d0f0      	beq.n	800890e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800892c:	4b28      	ldr	r3, [pc, #160]	; (80089d0 <HAL_RCC_OscConfig+0x240>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	00db      	lsls	r3, r3, #3
 800893a:	4925      	ldr	r1, [pc, #148]	; (80089d0 <HAL_RCC_OscConfig+0x240>)
 800893c:	4313      	orrs	r3, r2
 800893e:	600b      	str	r3, [r1, #0]
 8008940:	e015      	b.n	800896e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008942:	4b24      	ldr	r3, [pc, #144]	; (80089d4 <HAL_RCC_OscConfig+0x244>)
 8008944:	2200      	movs	r2, #0
 8008946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008948:	f7fd fb10 	bl	8005f6c <HAL_GetTick>
 800894c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800894e:	e008      	b.n	8008962 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008950:	f7fd fb0c 	bl	8005f6c <HAL_GetTick>
 8008954:	4602      	mov	r2, r0
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	1ad3      	subs	r3, r2, r3
 800895a:	2b02      	cmp	r3, #2
 800895c:	d901      	bls.n	8008962 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800895e:	2303      	movs	r3, #3
 8008960:	e187      	b.n	8008c72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008962:	4b1b      	ldr	r3, [pc, #108]	; (80089d0 <HAL_RCC_OscConfig+0x240>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f003 0302 	and.w	r3, r3, #2
 800896a:	2b00      	cmp	r3, #0
 800896c:	d1f0      	bne.n	8008950 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f003 0308 	and.w	r3, r3, #8
 8008976:	2b00      	cmp	r3, #0
 8008978:	d036      	beq.n	80089e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	695b      	ldr	r3, [r3, #20]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d016      	beq.n	80089b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008982:	4b15      	ldr	r3, [pc, #84]	; (80089d8 <HAL_RCC_OscConfig+0x248>)
 8008984:	2201      	movs	r2, #1
 8008986:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008988:	f7fd faf0 	bl	8005f6c <HAL_GetTick>
 800898c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800898e:	e008      	b.n	80089a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008990:	f7fd faec 	bl	8005f6c <HAL_GetTick>
 8008994:	4602      	mov	r2, r0
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	1ad3      	subs	r3, r2, r3
 800899a:	2b02      	cmp	r3, #2
 800899c:	d901      	bls.n	80089a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800899e:	2303      	movs	r3, #3
 80089a0:	e167      	b.n	8008c72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80089a2:	4b0b      	ldr	r3, [pc, #44]	; (80089d0 <HAL_RCC_OscConfig+0x240>)
 80089a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089a6:	f003 0302 	and.w	r3, r3, #2
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d0f0      	beq.n	8008990 <HAL_RCC_OscConfig+0x200>
 80089ae:	e01b      	b.n	80089e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80089b0:	4b09      	ldr	r3, [pc, #36]	; (80089d8 <HAL_RCC_OscConfig+0x248>)
 80089b2:	2200      	movs	r2, #0
 80089b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80089b6:	f7fd fad9 	bl	8005f6c <HAL_GetTick>
 80089ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80089bc:	e00e      	b.n	80089dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80089be:	f7fd fad5 	bl	8005f6c <HAL_GetTick>
 80089c2:	4602      	mov	r2, r0
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	1ad3      	subs	r3, r2, r3
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	d907      	bls.n	80089dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80089cc:	2303      	movs	r3, #3
 80089ce:	e150      	b.n	8008c72 <HAL_RCC_OscConfig+0x4e2>
 80089d0:	40023800 	.word	0x40023800
 80089d4:	42470000 	.word	0x42470000
 80089d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80089dc:	4b88      	ldr	r3, [pc, #544]	; (8008c00 <HAL_RCC_OscConfig+0x470>)
 80089de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089e0:	f003 0302 	and.w	r3, r3, #2
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d1ea      	bne.n	80089be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f003 0304 	and.w	r3, r3, #4
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f000 8097 	beq.w	8008b24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80089f6:	2300      	movs	r3, #0
 80089f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80089fa:	4b81      	ldr	r3, [pc, #516]	; (8008c00 <HAL_RCC_OscConfig+0x470>)
 80089fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d10f      	bne.n	8008a26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a06:	2300      	movs	r3, #0
 8008a08:	60bb      	str	r3, [r7, #8]
 8008a0a:	4b7d      	ldr	r3, [pc, #500]	; (8008c00 <HAL_RCC_OscConfig+0x470>)
 8008a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a0e:	4a7c      	ldr	r2, [pc, #496]	; (8008c00 <HAL_RCC_OscConfig+0x470>)
 8008a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a14:	6413      	str	r3, [r2, #64]	; 0x40
 8008a16:	4b7a      	ldr	r3, [pc, #488]	; (8008c00 <HAL_RCC_OscConfig+0x470>)
 8008a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a1e:	60bb      	str	r3, [r7, #8]
 8008a20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008a22:	2301      	movs	r3, #1
 8008a24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a26:	4b77      	ldr	r3, [pc, #476]	; (8008c04 <HAL_RCC_OscConfig+0x474>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d118      	bne.n	8008a64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008a32:	4b74      	ldr	r3, [pc, #464]	; (8008c04 <HAL_RCC_OscConfig+0x474>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a73      	ldr	r2, [pc, #460]	; (8008c04 <HAL_RCC_OscConfig+0x474>)
 8008a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008a3e:	f7fd fa95 	bl	8005f6c <HAL_GetTick>
 8008a42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a44:	e008      	b.n	8008a58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a46:	f7fd fa91 	bl	8005f6c <HAL_GetTick>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	1ad3      	subs	r3, r2, r3
 8008a50:	2b02      	cmp	r3, #2
 8008a52:	d901      	bls.n	8008a58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008a54:	2303      	movs	r3, #3
 8008a56:	e10c      	b.n	8008c72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a58:	4b6a      	ldr	r3, [pc, #424]	; (8008c04 <HAL_RCC_OscConfig+0x474>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d0f0      	beq.n	8008a46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d106      	bne.n	8008a7a <HAL_RCC_OscConfig+0x2ea>
 8008a6c:	4b64      	ldr	r3, [pc, #400]	; (8008c00 <HAL_RCC_OscConfig+0x470>)
 8008a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a70:	4a63      	ldr	r2, [pc, #396]	; (8008c00 <HAL_RCC_OscConfig+0x470>)
 8008a72:	f043 0301 	orr.w	r3, r3, #1
 8008a76:	6713      	str	r3, [r2, #112]	; 0x70
 8008a78:	e01c      	b.n	8008ab4 <HAL_RCC_OscConfig+0x324>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	2b05      	cmp	r3, #5
 8008a80:	d10c      	bne.n	8008a9c <HAL_RCC_OscConfig+0x30c>
 8008a82:	4b5f      	ldr	r3, [pc, #380]	; (8008c00 <HAL_RCC_OscConfig+0x470>)
 8008a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a86:	4a5e      	ldr	r2, [pc, #376]	; (8008c00 <HAL_RCC_OscConfig+0x470>)
 8008a88:	f043 0304 	orr.w	r3, r3, #4
 8008a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8008a8e:	4b5c      	ldr	r3, [pc, #368]	; (8008c00 <HAL_RCC_OscConfig+0x470>)
 8008a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a92:	4a5b      	ldr	r2, [pc, #364]	; (8008c00 <HAL_RCC_OscConfig+0x470>)
 8008a94:	f043 0301 	orr.w	r3, r3, #1
 8008a98:	6713      	str	r3, [r2, #112]	; 0x70
 8008a9a:	e00b      	b.n	8008ab4 <HAL_RCC_OscConfig+0x324>
 8008a9c:	4b58      	ldr	r3, [pc, #352]	; (8008c00 <HAL_RCC_OscConfig+0x470>)
 8008a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aa0:	4a57      	ldr	r2, [pc, #348]	; (8008c00 <HAL_RCC_OscConfig+0x470>)
 8008aa2:	f023 0301 	bic.w	r3, r3, #1
 8008aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8008aa8:	4b55      	ldr	r3, [pc, #340]	; (8008c00 <HAL_RCC_OscConfig+0x470>)
 8008aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aac:	4a54      	ldr	r2, [pc, #336]	; (8008c00 <HAL_RCC_OscConfig+0x470>)
 8008aae:	f023 0304 	bic.w	r3, r3, #4
 8008ab2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d015      	beq.n	8008ae8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008abc:	f7fd fa56 	bl	8005f6c <HAL_GetTick>
 8008ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ac2:	e00a      	b.n	8008ada <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ac4:	f7fd fa52 	bl	8005f6c <HAL_GetTick>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	1ad3      	subs	r3, r2, r3
 8008ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d901      	bls.n	8008ada <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008ad6:	2303      	movs	r3, #3
 8008ad8:	e0cb      	b.n	8008c72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ada:	4b49      	ldr	r3, [pc, #292]	; (8008c00 <HAL_RCC_OscConfig+0x470>)
 8008adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ade:	f003 0302 	and.w	r3, r3, #2
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d0ee      	beq.n	8008ac4 <HAL_RCC_OscConfig+0x334>
 8008ae6:	e014      	b.n	8008b12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ae8:	f7fd fa40 	bl	8005f6c <HAL_GetTick>
 8008aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008aee:	e00a      	b.n	8008b06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008af0:	f7fd fa3c 	bl	8005f6c <HAL_GetTick>
 8008af4:	4602      	mov	r2, r0
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	1ad3      	subs	r3, r2, r3
 8008afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d901      	bls.n	8008b06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008b02:	2303      	movs	r3, #3
 8008b04:	e0b5      	b.n	8008c72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b06:	4b3e      	ldr	r3, [pc, #248]	; (8008c00 <HAL_RCC_OscConfig+0x470>)
 8008b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b0a:	f003 0302 	and.w	r3, r3, #2
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d1ee      	bne.n	8008af0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008b12:	7dfb      	ldrb	r3, [r7, #23]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d105      	bne.n	8008b24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b18:	4b39      	ldr	r3, [pc, #228]	; (8008c00 <HAL_RCC_OscConfig+0x470>)
 8008b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b1c:	4a38      	ldr	r2, [pc, #224]	; (8008c00 <HAL_RCC_OscConfig+0x470>)
 8008b1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	699b      	ldr	r3, [r3, #24]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	f000 80a1 	beq.w	8008c70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008b2e:	4b34      	ldr	r3, [pc, #208]	; (8008c00 <HAL_RCC_OscConfig+0x470>)
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	f003 030c 	and.w	r3, r3, #12
 8008b36:	2b08      	cmp	r3, #8
 8008b38:	d05c      	beq.n	8008bf4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	699b      	ldr	r3, [r3, #24]
 8008b3e:	2b02      	cmp	r3, #2
 8008b40:	d141      	bne.n	8008bc6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b42:	4b31      	ldr	r3, [pc, #196]	; (8008c08 <HAL_RCC_OscConfig+0x478>)
 8008b44:	2200      	movs	r2, #0
 8008b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b48:	f7fd fa10 	bl	8005f6c <HAL_GetTick>
 8008b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b4e:	e008      	b.n	8008b62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b50:	f7fd fa0c 	bl	8005f6c <HAL_GetTick>
 8008b54:	4602      	mov	r2, r0
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	1ad3      	subs	r3, r2, r3
 8008b5a:	2b02      	cmp	r3, #2
 8008b5c:	d901      	bls.n	8008b62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008b5e:	2303      	movs	r3, #3
 8008b60:	e087      	b.n	8008c72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b62:	4b27      	ldr	r3, [pc, #156]	; (8008c00 <HAL_RCC_OscConfig+0x470>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d1f0      	bne.n	8008b50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	69da      	ldr	r2, [r3, #28]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6a1b      	ldr	r3, [r3, #32]
 8008b76:	431a      	orrs	r2, r3
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7c:	019b      	lsls	r3, r3, #6
 8008b7e:	431a      	orrs	r2, r3
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b84:	085b      	lsrs	r3, r3, #1
 8008b86:	3b01      	subs	r3, #1
 8008b88:	041b      	lsls	r3, r3, #16
 8008b8a:	431a      	orrs	r2, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b90:	061b      	lsls	r3, r3, #24
 8008b92:	491b      	ldr	r1, [pc, #108]	; (8008c00 <HAL_RCC_OscConfig+0x470>)
 8008b94:	4313      	orrs	r3, r2
 8008b96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b98:	4b1b      	ldr	r3, [pc, #108]	; (8008c08 <HAL_RCC_OscConfig+0x478>)
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b9e:	f7fd f9e5 	bl	8005f6c <HAL_GetTick>
 8008ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ba4:	e008      	b.n	8008bb8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ba6:	f7fd f9e1 	bl	8005f6c <HAL_GetTick>
 8008baa:	4602      	mov	r2, r0
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	1ad3      	subs	r3, r2, r3
 8008bb0:	2b02      	cmp	r3, #2
 8008bb2:	d901      	bls.n	8008bb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008bb4:	2303      	movs	r3, #3
 8008bb6:	e05c      	b.n	8008c72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008bb8:	4b11      	ldr	r3, [pc, #68]	; (8008c00 <HAL_RCC_OscConfig+0x470>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d0f0      	beq.n	8008ba6 <HAL_RCC_OscConfig+0x416>
 8008bc4:	e054      	b.n	8008c70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bc6:	4b10      	ldr	r3, [pc, #64]	; (8008c08 <HAL_RCC_OscConfig+0x478>)
 8008bc8:	2200      	movs	r2, #0
 8008bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bcc:	f7fd f9ce 	bl	8005f6c <HAL_GetTick>
 8008bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008bd2:	e008      	b.n	8008be6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008bd4:	f7fd f9ca 	bl	8005f6c <HAL_GetTick>
 8008bd8:	4602      	mov	r2, r0
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	1ad3      	subs	r3, r2, r3
 8008bde:	2b02      	cmp	r3, #2
 8008be0:	d901      	bls.n	8008be6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008be2:	2303      	movs	r3, #3
 8008be4:	e045      	b.n	8008c72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008be6:	4b06      	ldr	r3, [pc, #24]	; (8008c00 <HAL_RCC_OscConfig+0x470>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d1f0      	bne.n	8008bd4 <HAL_RCC_OscConfig+0x444>
 8008bf2:	e03d      	b.n	8008c70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	699b      	ldr	r3, [r3, #24]
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d107      	bne.n	8008c0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	e038      	b.n	8008c72 <HAL_RCC_OscConfig+0x4e2>
 8008c00:	40023800 	.word	0x40023800
 8008c04:	40007000 	.word	0x40007000
 8008c08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008c0c:	4b1b      	ldr	r3, [pc, #108]	; (8008c7c <HAL_RCC_OscConfig+0x4ec>)
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	699b      	ldr	r3, [r3, #24]
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d028      	beq.n	8008c6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d121      	bne.n	8008c6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d11a      	bne.n	8008c6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008c36:	68fa      	ldr	r2, [r7, #12]
 8008c38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008c3c:	4013      	ands	r3, r2
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008c42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d111      	bne.n	8008c6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c52:	085b      	lsrs	r3, r3, #1
 8008c54:	3b01      	subs	r3, #1
 8008c56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d107      	bne.n	8008c6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d001      	beq.n	8008c70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e000      	b.n	8008c72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008c70:	2300      	movs	r3, #0
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3718      	adds	r7, #24
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	40023800 	.word	0x40023800

08008c80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d101      	bne.n	8008c94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c90:	2301      	movs	r3, #1
 8008c92:	e0cc      	b.n	8008e2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008c94:	4b68      	ldr	r3, [pc, #416]	; (8008e38 <HAL_RCC_ClockConfig+0x1b8>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f003 0307 	and.w	r3, r3, #7
 8008c9c:	683a      	ldr	r2, [r7, #0]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d90c      	bls.n	8008cbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ca2:	4b65      	ldr	r3, [pc, #404]	; (8008e38 <HAL_RCC_ClockConfig+0x1b8>)
 8008ca4:	683a      	ldr	r2, [r7, #0]
 8008ca6:	b2d2      	uxtb	r2, r2
 8008ca8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008caa:	4b63      	ldr	r3, [pc, #396]	; (8008e38 <HAL_RCC_ClockConfig+0x1b8>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f003 0307 	and.w	r3, r3, #7
 8008cb2:	683a      	ldr	r2, [r7, #0]
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d001      	beq.n	8008cbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e0b8      	b.n	8008e2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f003 0302 	and.w	r3, r3, #2
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d020      	beq.n	8008d0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f003 0304 	and.w	r3, r3, #4
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d005      	beq.n	8008ce0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008cd4:	4b59      	ldr	r3, [pc, #356]	; (8008e3c <HAL_RCC_ClockConfig+0x1bc>)
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	4a58      	ldr	r2, [pc, #352]	; (8008e3c <HAL_RCC_ClockConfig+0x1bc>)
 8008cda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008cde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f003 0308 	and.w	r3, r3, #8
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d005      	beq.n	8008cf8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008cec:	4b53      	ldr	r3, [pc, #332]	; (8008e3c <HAL_RCC_ClockConfig+0x1bc>)
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	4a52      	ldr	r2, [pc, #328]	; (8008e3c <HAL_RCC_ClockConfig+0x1bc>)
 8008cf2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008cf6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008cf8:	4b50      	ldr	r3, [pc, #320]	; (8008e3c <HAL_RCC_ClockConfig+0x1bc>)
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	494d      	ldr	r1, [pc, #308]	; (8008e3c <HAL_RCC_ClockConfig+0x1bc>)
 8008d06:	4313      	orrs	r3, r2
 8008d08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f003 0301 	and.w	r3, r3, #1
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d044      	beq.n	8008da0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d107      	bne.n	8008d2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d1e:	4b47      	ldr	r3, [pc, #284]	; (8008e3c <HAL_RCC_ClockConfig+0x1bc>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d119      	bne.n	8008d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e07f      	b.n	8008e2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	2b02      	cmp	r3, #2
 8008d34:	d003      	beq.n	8008d3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008d3a:	2b03      	cmp	r3, #3
 8008d3c:	d107      	bne.n	8008d4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d3e:	4b3f      	ldr	r3, [pc, #252]	; (8008e3c <HAL_RCC_ClockConfig+0x1bc>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d109      	bne.n	8008d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	e06f      	b.n	8008e2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d4e:	4b3b      	ldr	r3, [pc, #236]	; (8008e3c <HAL_RCC_ClockConfig+0x1bc>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f003 0302 	and.w	r3, r3, #2
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d101      	bne.n	8008d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	e067      	b.n	8008e2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008d5e:	4b37      	ldr	r3, [pc, #220]	; (8008e3c <HAL_RCC_ClockConfig+0x1bc>)
 8008d60:	689b      	ldr	r3, [r3, #8]
 8008d62:	f023 0203 	bic.w	r2, r3, #3
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	4934      	ldr	r1, [pc, #208]	; (8008e3c <HAL_RCC_ClockConfig+0x1bc>)
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008d70:	f7fd f8fc 	bl	8005f6c <HAL_GetTick>
 8008d74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d76:	e00a      	b.n	8008d8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d78:	f7fd f8f8 	bl	8005f6c <HAL_GetTick>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	1ad3      	subs	r3, r2, r3
 8008d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d901      	bls.n	8008d8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008d8a:	2303      	movs	r3, #3
 8008d8c:	e04f      	b.n	8008e2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d8e:	4b2b      	ldr	r3, [pc, #172]	; (8008e3c <HAL_RCC_ClockConfig+0x1bc>)
 8008d90:	689b      	ldr	r3, [r3, #8]
 8008d92:	f003 020c 	and.w	r2, r3, #12
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d1eb      	bne.n	8008d78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008da0:	4b25      	ldr	r3, [pc, #148]	; (8008e38 <HAL_RCC_ClockConfig+0x1b8>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f003 0307 	and.w	r3, r3, #7
 8008da8:	683a      	ldr	r2, [r7, #0]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d20c      	bcs.n	8008dc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dae:	4b22      	ldr	r3, [pc, #136]	; (8008e38 <HAL_RCC_ClockConfig+0x1b8>)
 8008db0:	683a      	ldr	r2, [r7, #0]
 8008db2:	b2d2      	uxtb	r2, r2
 8008db4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008db6:	4b20      	ldr	r3, [pc, #128]	; (8008e38 <HAL_RCC_ClockConfig+0x1b8>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f003 0307 	and.w	r3, r3, #7
 8008dbe:	683a      	ldr	r2, [r7, #0]
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d001      	beq.n	8008dc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e032      	b.n	8008e2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f003 0304 	and.w	r3, r3, #4
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d008      	beq.n	8008de6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008dd4:	4b19      	ldr	r3, [pc, #100]	; (8008e3c <HAL_RCC_ClockConfig+0x1bc>)
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	68db      	ldr	r3, [r3, #12]
 8008de0:	4916      	ldr	r1, [pc, #88]	; (8008e3c <HAL_RCC_ClockConfig+0x1bc>)
 8008de2:	4313      	orrs	r3, r2
 8008de4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f003 0308 	and.w	r3, r3, #8
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d009      	beq.n	8008e06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008df2:	4b12      	ldr	r3, [pc, #72]	; (8008e3c <HAL_RCC_ClockConfig+0x1bc>)
 8008df4:	689b      	ldr	r3, [r3, #8]
 8008df6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	691b      	ldr	r3, [r3, #16]
 8008dfe:	00db      	lsls	r3, r3, #3
 8008e00:	490e      	ldr	r1, [pc, #56]	; (8008e3c <HAL_RCC_ClockConfig+0x1bc>)
 8008e02:	4313      	orrs	r3, r2
 8008e04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008e06:	f000 f821 	bl	8008e4c <HAL_RCC_GetSysClockFreq>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	4b0b      	ldr	r3, [pc, #44]	; (8008e3c <HAL_RCC_ClockConfig+0x1bc>)
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	091b      	lsrs	r3, r3, #4
 8008e12:	f003 030f 	and.w	r3, r3, #15
 8008e16:	490a      	ldr	r1, [pc, #40]	; (8008e40 <HAL_RCC_ClockConfig+0x1c0>)
 8008e18:	5ccb      	ldrb	r3, [r1, r3]
 8008e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e1e:	4a09      	ldr	r2, [pc, #36]	; (8008e44 <HAL_RCC_ClockConfig+0x1c4>)
 8008e20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008e22:	4b09      	ldr	r3, [pc, #36]	; (8008e48 <HAL_RCC_ClockConfig+0x1c8>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7fc fdde 	bl	80059e8 <HAL_InitTick>

  return HAL_OK;
 8008e2c:	2300      	movs	r3, #0
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3710      	adds	r7, #16
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	40023c00 	.word	0x40023c00
 8008e3c:	40023800 	.word	0x40023800
 8008e40:	08013f7c 	.word	0x08013f7c
 8008e44:	2000005c 	.word	0x2000005c
 8008e48:	20000060 	.word	0x20000060

08008e4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e50:	b094      	sub	sp, #80	; 0x50
 8008e52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008e54:	2300      	movs	r3, #0
 8008e56:	647b      	str	r3, [r7, #68]	; 0x44
 8008e58:	2300      	movs	r3, #0
 8008e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008e60:	2300      	movs	r3, #0
 8008e62:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008e64:	4b79      	ldr	r3, [pc, #484]	; (800904c <HAL_RCC_GetSysClockFreq+0x200>)
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	f003 030c 	and.w	r3, r3, #12
 8008e6c:	2b08      	cmp	r3, #8
 8008e6e:	d00d      	beq.n	8008e8c <HAL_RCC_GetSysClockFreq+0x40>
 8008e70:	2b08      	cmp	r3, #8
 8008e72:	f200 80e1 	bhi.w	8009038 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d002      	beq.n	8008e80 <HAL_RCC_GetSysClockFreq+0x34>
 8008e7a:	2b04      	cmp	r3, #4
 8008e7c:	d003      	beq.n	8008e86 <HAL_RCC_GetSysClockFreq+0x3a>
 8008e7e:	e0db      	b.n	8009038 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008e80:	4b73      	ldr	r3, [pc, #460]	; (8009050 <HAL_RCC_GetSysClockFreq+0x204>)
 8008e82:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008e84:	e0db      	b.n	800903e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008e86:	4b73      	ldr	r3, [pc, #460]	; (8009054 <HAL_RCC_GetSysClockFreq+0x208>)
 8008e88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008e8a:	e0d8      	b.n	800903e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008e8c:	4b6f      	ldr	r3, [pc, #444]	; (800904c <HAL_RCC_GetSysClockFreq+0x200>)
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e94:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008e96:	4b6d      	ldr	r3, [pc, #436]	; (800904c <HAL_RCC_GetSysClockFreq+0x200>)
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d063      	beq.n	8008f6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008ea2:	4b6a      	ldr	r3, [pc, #424]	; (800904c <HAL_RCC_GetSysClockFreq+0x200>)
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	099b      	lsrs	r3, r3, #6
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	63bb      	str	r3, [r7, #56]	; 0x38
 8008eac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eb4:	633b      	str	r3, [r7, #48]	; 0x30
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	637b      	str	r3, [r7, #52]	; 0x34
 8008eba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008ebe:	4622      	mov	r2, r4
 8008ec0:	462b      	mov	r3, r5
 8008ec2:	f04f 0000 	mov.w	r0, #0
 8008ec6:	f04f 0100 	mov.w	r1, #0
 8008eca:	0159      	lsls	r1, r3, #5
 8008ecc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008ed0:	0150      	lsls	r0, r2, #5
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	4621      	mov	r1, r4
 8008ed8:	1a51      	subs	r1, r2, r1
 8008eda:	6139      	str	r1, [r7, #16]
 8008edc:	4629      	mov	r1, r5
 8008ede:	eb63 0301 	sbc.w	r3, r3, r1
 8008ee2:	617b      	str	r3, [r7, #20]
 8008ee4:	f04f 0200 	mov.w	r2, #0
 8008ee8:	f04f 0300 	mov.w	r3, #0
 8008eec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008ef0:	4659      	mov	r1, fp
 8008ef2:	018b      	lsls	r3, r1, #6
 8008ef4:	4651      	mov	r1, sl
 8008ef6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008efa:	4651      	mov	r1, sl
 8008efc:	018a      	lsls	r2, r1, #6
 8008efe:	4651      	mov	r1, sl
 8008f00:	ebb2 0801 	subs.w	r8, r2, r1
 8008f04:	4659      	mov	r1, fp
 8008f06:	eb63 0901 	sbc.w	r9, r3, r1
 8008f0a:	f04f 0200 	mov.w	r2, #0
 8008f0e:	f04f 0300 	mov.w	r3, #0
 8008f12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008f16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008f1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008f1e:	4690      	mov	r8, r2
 8008f20:	4699      	mov	r9, r3
 8008f22:	4623      	mov	r3, r4
 8008f24:	eb18 0303 	adds.w	r3, r8, r3
 8008f28:	60bb      	str	r3, [r7, #8]
 8008f2a:	462b      	mov	r3, r5
 8008f2c:	eb49 0303 	adc.w	r3, r9, r3
 8008f30:	60fb      	str	r3, [r7, #12]
 8008f32:	f04f 0200 	mov.w	r2, #0
 8008f36:	f04f 0300 	mov.w	r3, #0
 8008f3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008f3e:	4629      	mov	r1, r5
 8008f40:	024b      	lsls	r3, r1, #9
 8008f42:	4621      	mov	r1, r4
 8008f44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008f48:	4621      	mov	r1, r4
 8008f4a:	024a      	lsls	r2, r1, #9
 8008f4c:	4610      	mov	r0, r2
 8008f4e:	4619      	mov	r1, r3
 8008f50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f52:	2200      	movs	r2, #0
 8008f54:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008f5c:	f7f7 fe94 	bl	8000c88 <__aeabi_uldivmod>
 8008f60:	4602      	mov	r2, r0
 8008f62:	460b      	mov	r3, r1
 8008f64:	4613      	mov	r3, r2
 8008f66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f68:	e058      	b.n	800901c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008f6a:	4b38      	ldr	r3, [pc, #224]	; (800904c <HAL_RCC_GetSysClockFreq+0x200>)
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	099b      	lsrs	r3, r3, #6
 8008f70:	2200      	movs	r2, #0
 8008f72:	4618      	mov	r0, r3
 8008f74:	4611      	mov	r1, r2
 8008f76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008f7a:	623b      	str	r3, [r7, #32]
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8008f80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008f84:	4642      	mov	r2, r8
 8008f86:	464b      	mov	r3, r9
 8008f88:	f04f 0000 	mov.w	r0, #0
 8008f8c:	f04f 0100 	mov.w	r1, #0
 8008f90:	0159      	lsls	r1, r3, #5
 8008f92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008f96:	0150      	lsls	r0, r2, #5
 8008f98:	4602      	mov	r2, r0
 8008f9a:	460b      	mov	r3, r1
 8008f9c:	4641      	mov	r1, r8
 8008f9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8008fa2:	4649      	mov	r1, r9
 8008fa4:	eb63 0b01 	sbc.w	fp, r3, r1
 8008fa8:	f04f 0200 	mov.w	r2, #0
 8008fac:	f04f 0300 	mov.w	r3, #0
 8008fb0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008fb4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008fb8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008fbc:	ebb2 040a 	subs.w	r4, r2, sl
 8008fc0:	eb63 050b 	sbc.w	r5, r3, fp
 8008fc4:	f04f 0200 	mov.w	r2, #0
 8008fc8:	f04f 0300 	mov.w	r3, #0
 8008fcc:	00eb      	lsls	r3, r5, #3
 8008fce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008fd2:	00e2      	lsls	r2, r4, #3
 8008fd4:	4614      	mov	r4, r2
 8008fd6:	461d      	mov	r5, r3
 8008fd8:	4643      	mov	r3, r8
 8008fda:	18e3      	adds	r3, r4, r3
 8008fdc:	603b      	str	r3, [r7, #0]
 8008fde:	464b      	mov	r3, r9
 8008fe0:	eb45 0303 	adc.w	r3, r5, r3
 8008fe4:	607b      	str	r3, [r7, #4]
 8008fe6:	f04f 0200 	mov.w	r2, #0
 8008fea:	f04f 0300 	mov.w	r3, #0
 8008fee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008ff2:	4629      	mov	r1, r5
 8008ff4:	028b      	lsls	r3, r1, #10
 8008ff6:	4621      	mov	r1, r4
 8008ff8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008ffc:	4621      	mov	r1, r4
 8008ffe:	028a      	lsls	r2, r1, #10
 8009000:	4610      	mov	r0, r2
 8009002:	4619      	mov	r1, r3
 8009004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009006:	2200      	movs	r2, #0
 8009008:	61bb      	str	r3, [r7, #24]
 800900a:	61fa      	str	r2, [r7, #28]
 800900c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009010:	f7f7 fe3a 	bl	8000c88 <__aeabi_uldivmod>
 8009014:	4602      	mov	r2, r0
 8009016:	460b      	mov	r3, r1
 8009018:	4613      	mov	r3, r2
 800901a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800901c:	4b0b      	ldr	r3, [pc, #44]	; (800904c <HAL_RCC_GetSysClockFreq+0x200>)
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	0c1b      	lsrs	r3, r3, #16
 8009022:	f003 0303 	and.w	r3, r3, #3
 8009026:	3301      	adds	r3, #1
 8009028:	005b      	lsls	r3, r3, #1
 800902a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800902c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800902e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009030:	fbb2 f3f3 	udiv	r3, r2, r3
 8009034:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009036:	e002      	b.n	800903e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009038:	4b05      	ldr	r3, [pc, #20]	; (8009050 <HAL_RCC_GetSysClockFreq+0x204>)
 800903a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800903c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800903e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009040:	4618      	mov	r0, r3
 8009042:	3750      	adds	r7, #80	; 0x50
 8009044:	46bd      	mov	sp, r7
 8009046:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800904a:	bf00      	nop
 800904c:	40023800 	.word	0x40023800
 8009050:	00f42400 	.word	0x00f42400
 8009054:	007a1200 	.word	0x007a1200

08009058 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009058:	b480      	push	{r7}
 800905a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800905c:	4b03      	ldr	r3, [pc, #12]	; (800906c <HAL_RCC_GetHCLKFreq+0x14>)
 800905e:	681b      	ldr	r3, [r3, #0]
}
 8009060:	4618      	mov	r0, r3
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr
 800906a:	bf00      	nop
 800906c:	2000005c 	.word	0x2000005c

08009070 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009074:	f7ff fff0 	bl	8009058 <HAL_RCC_GetHCLKFreq>
 8009078:	4602      	mov	r2, r0
 800907a:	4b05      	ldr	r3, [pc, #20]	; (8009090 <HAL_RCC_GetPCLK1Freq+0x20>)
 800907c:	689b      	ldr	r3, [r3, #8]
 800907e:	0a9b      	lsrs	r3, r3, #10
 8009080:	f003 0307 	and.w	r3, r3, #7
 8009084:	4903      	ldr	r1, [pc, #12]	; (8009094 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009086:	5ccb      	ldrb	r3, [r1, r3]
 8009088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800908c:	4618      	mov	r0, r3
 800908e:	bd80      	pop	{r7, pc}
 8009090:	40023800 	.word	0x40023800
 8009094:	08013f8c 	.word	0x08013f8c

08009098 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800909c:	f7ff ffdc 	bl	8009058 <HAL_RCC_GetHCLKFreq>
 80090a0:	4602      	mov	r2, r0
 80090a2:	4b05      	ldr	r3, [pc, #20]	; (80090b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	0b5b      	lsrs	r3, r3, #13
 80090a8:	f003 0307 	and.w	r3, r3, #7
 80090ac:	4903      	ldr	r1, [pc, #12]	; (80090bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80090ae:	5ccb      	ldrb	r3, [r1, r3]
 80090b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	bd80      	pop	{r7, pc}
 80090b8:	40023800 	.word	0x40023800
 80090bc:	08013f8c 	.word	0x08013f8c

080090c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	220f      	movs	r2, #15
 80090ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80090d0:	4b12      	ldr	r3, [pc, #72]	; (800911c <HAL_RCC_GetClockConfig+0x5c>)
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	f003 0203 	and.w	r2, r3, #3
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80090dc:	4b0f      	ldr	r3, [pc, #60]	; (800911c <HAL_RCC_GetClockConfig+0x5c>)
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80090e8:	4b0c      	ldr	r3, [pc, #48]	; (800911c <HAL_RCC_GetClockConfig+0x5c>)
 80090ea:	689b      	ldr	r3, [r3, #8]
 80090ec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80090f4:	4b09      	ldr	r3, [pc, #36]	; (800911c <HAL_RCC_GetClockConfig+0x5c>)
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	08db      	lsrs	r3, r3, #3
 80090fa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009102:	4b07      	ldr	r3, [pc, #28]	; (8009120 <HAL_RCC_GetClockConfig+0x60>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f003 0207 	and.w	r2, r3, #7
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	601a      	str	r2, [r3, #0]
}
 800910e:	bf00      	nop
 8009110:	370c      	adds	r7, #12
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr
 800911a:	bf00      	nop
 800911c:	40023800 	.word	0x40023800
 8009120:	40023c00 	.word	0x40023c00

08009124 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d101      	bne.n	8009136 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	e041      	b.n	80091ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800913c:	b2db      	uxtb	r3, r3
 800913e:	2b00      	cmp	r3, #0
 8009140:	d106      	bne.n	8009150 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2200      	movs	r2, #0
 8009146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f7fc fa22 	bl	8005594 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2202      	movs	r2, #2
 8009154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	3304      	adds	r3, #4
 8009160:	4619      	mov	r1, r3
 8009162:	4610      	mov	r0, r2
 8009164:	f000 fdae 	bl	8009cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2201      	movs	r2, #1
 800916c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2201      	movs	r2, #1
 8009174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2201      	movs	r2, #1
 800917c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2201      	movs	r2, #1
 8009184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2201      	movs	r2, #1
 800918c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2201      	movs	r2, #1
 8009194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2201      	movs	r2, #1
 800919c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2201      	movs	r2, #1
 80091ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2201      	movs	r2, #1
 80091b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091b8:	2300      	movs	r3, #0
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3708      	adds	r7, #8
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
	...

080091c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b085      	sub	sp, #20
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d001      	beq.n	80091dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80091d8:	2301      	movs	r3, #1
 80091da:	e04e      	b.n	800927a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2202      	movs	r2, #2
 80091e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	68da      	ldr	r2, [r3, #12]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f042 0201 	orr.w	r2, r2, #1
 80091f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a23      	ldr	r2, [pc, #140]	; (8009288 <HAL_TIM_Base_Start_IT+0xc4>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d022      	beq.n	8009244 <HAL_TIM_Base_Start_IT+0x80>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009206:	d01d      	beq.n	8009244 <HAL_TIM_Base_Start_IT+0x80>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a1f      	ldr	r2, [pc, #124]	; (800928c <HAL_TIM_Base_Start_IT+0xc8>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d018      	beq.n	8009244 <HAL_TIM_Base_Start_IT+0x80>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4a1e      	ldr	r2, [pc, #120]	; (8009290 <HAL_TIM_Base_Start_IT+0xcc>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d013      	beq.n	8009244 <HAL_TIM_Base_Start_IT+0x80>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a1c      	ldr	r2, [pc, #112]	; (8009294 <HAL_TIM_Base_Start_IT+0xd0>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d00e      	beq.n	8009244 <HAL_TIM_Base_Start_IT+0x80>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a1b      	ldr	r2, [pc, #108]	; (8009298 <HAL_TIM_Base_Start_IT+0xd4>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d009      	beq.n	8009244 <HAL_TIM_Base_Start_IT+0x80>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4a19      	ldr	r2, [pc, #100]	; (800929c <HAL_TIM_Base_Start_IT+0xd8>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d004      	beq.n	8009244 <HAL_TIM_Base_Start_IT+0x80>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a18      	ldr	r2, [pc, #96]	; (80092a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d111      	bne.n	8009268 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	f003 0307 	and.w	r3, r3, #7
 800924e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2b06      	cmp	r3, #6
 8009254:	d010      	beq.n	8009278 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f042 0201 	orr.w	r2, r2, #1
 8009264:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009266:	e007      	b.n	8009278 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f042 0201 	orr.w	r2, r2, #1
 8009276:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	3714      	adds	r7, #20
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr
 8009286:	bf00      	nop
 8009288:	40010000 	.word	0x40010000
 800928c:	40000400 	.word	0x40000400
 8009290:	40000800 	.word	0x40000800
 8009294:	40000c00 	.word	0x40000c00
 8009298:	40010400 	.word	0x40010400
 800929c:	40014000 	.word	0x40014000
 80092a0:	40001800 	.word	0x40001800

080092a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d101      	bne.n	80092b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	e041      	b.n	800933a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d106      	bne.n	80092d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2200      	movs	r2, #0
 80092c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 f839 	bl	8009342 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2202      	movs	r2, #2
 80092d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	3304      	adds	r3, #4
 80092e0:	4619      	mov	r1, r3
 80092e2:	4610      	mov	r0, r2
 80092e4:	f000 fcee 	bl	8009cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2201      	movs	r2, #1
 8009304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2201      	movs	r2, #1
 800930c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2201      	movs	r2, #1
 8009314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2201      	movs	r2, #1
 800931c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2201      	movs	r2, #1
 800932c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2201      	movs	r2, #1
 8009334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009338:	2300      	movs	r3, #0
}
 800933a:	4618      	mov	r0, r3
 800933c:	3708      	adds	r7, #8
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009342:	b480      	push	{r7}
 8009344:	b083      	sub	sp, #12
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800934a:	bf00      	nop
 800934c:	370c      	adds	r7, #12
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr
	...

08009358 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d109      	bne.n	800937c <HAL_TIM_PWM_Start+0x24>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800936e:	b2db      	uxtb	r3, r3
 8009370:	2b01      	cmp	r3, #1
 8009372:	bf14      	ite	ne
 8009374:	2301      	movne	r3, #1
 8009376:	2300      	moveq	r3, #0
 8009378:	b2db      	uxtb	r3, r3
 800937a:	e022      	b.n	80093c2 <HAL_TIM_PWM_Start+0x6a>
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	2b04      	cmp	r3, #4
 8009380:	d109      	bne.n	8009396 <HAL_TIM_PWM_Start+0x3e>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009388:	b2db      	uxtb	r3, r3
 800938a:	2b01      	cmp	r3, #1
 800938c:	bf14      	ite	ne
 800938e:	2301      	movne	r3, #1
 8009390:	2300      	moveq	r3, #0
 8009392:	b2db      	uxtb	r3, r3
 8009394:	e015      	b.n	80093c2 <HAL_TIM_PWM_Start+0x6a>
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	2b08      	cmp	r3, #8
 800939a:	d109      	bne.n	80093b0 <HAL_TIM_PWM_Start+0x58>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	bf14      	ite	ne
 80093a8:	2301      	movne	r3, #1
 80093aa:	2300      	moveq	r3, #0
 80093ac:	b2db      	uxtb	r3, r3
 80093ae:	e008      	b.n	80093c2 <HAL_TIM_PWM_Start+0x6a>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	bf14      	ite	ne
 80093bc:	2301      	movne	r3, #1
 80093be:	2300      	moveq	r3, #0
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d001      	beq.n	80093ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80093c6:	2301      	movs	r3, #1
 80093c8:	e07c      	b.n	80094c4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d104      	bne.n	80093da <HAL_TIM_PWM_Start+0x82>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2202      	movs	r2, #2
 80093d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80093d8:	e013      	b.n	8009402 <HAL_TIM_PWM_Start+0xaa>
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	2b04      	cmp	r3, #4
 80093de:	d104      	bne.n	80093ea <HAL_TIM_PWM_Start+0x92>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2202      	movs	r2, #2
 80093e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80093e8:	e00b      	b.n	8009402 <HAL_TIM_PWM_Start+0xaa>
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	2b08      	cmp	r3, #8
 80093ee:	d104      	bne.n	80093fa <HAL_TIM_PWM_Start+0xa2>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2202      	movs	r2, #2
 80093f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80093f8:	e003      	b.n	8009402 <HAL_TIM_PWM_Start+0xaa>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2202      	movs	r2, #2
 80093fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	2201      	movs	r2, #1
 8009408:	6839      	ldr	r1, [r7, #0]
 800940a:	4618      	mov	r0, r3
 800940c:	f000 ff44 	bl	800a298 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a2d      	ldr	r2, [pc, #180]	; (80094cc <HAL_TIM_PWM_Start+0x174>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d004      	beq.n	8009424 <HAL_TIM_PWM_Start+0xcc>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a2c      	ldr	r2, [pc, #176]	; (80094d0 <HAL_TIM_PWM_Start+0x178>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d101      	bne.n	8009428 <HAL_TIM_PWM_Start+0xd0>
 8009424:	2301      	movs	r3, #1
 8009426:	e000      	b.n	800942a <HAL_TIM_PWM_Start+0xd2>
 8009428:	2300      	movs	r3, #0
 800942a:	2b00      	cmp	r3, #0
 800942c:	d007      	beq.n	800943e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800943c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4a22      	ldr	r2, [pc, #136]	; (80094cc <HAL_TIM_PWM_Start+0x174>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d022      	beq.n	800948e <HAL_TIM_PWM_Start+0x136>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009450:	d01d      	beq.n	800948e <HAL_TIM_PWM_Start+0x136>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a1f      	ldr	r2, [pc, #124]	; (80094d4 <HAL_TIM_PWM_Start+0x17c>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d018      	beq.n	800948e <HAL_TIM_PWM_Start+0x136>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4a1d      	ldr	r2, [pc, #116]	; (80094d8 <HAL_TIM_PWM_Start+0x180>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d013      	beq.n	800948e <HAL_TIM_PWM_Start+0x136>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a1c      	ldr	r2, [pc, #112]	; (80094dc <HAL_TIM_PWM_Start+0x184>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d00e      	beq.n	800948e <HAL_TIM_PWM_Start+0x136>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4a16      	ldr	r2, [pc, #88]	; (80094d0 <HAL_TIM_PWM_Start+0x178>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d009      	beq.n	800948e <HAL_TIM_PWM_Start+0x136>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4a18      	ldr	r2, [pc, #96]	; (80094e0 <HAL_TIM_PWM_Start+0x188>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d004      	beq.n	800948e <HAL_TIM_PWM_Start+0x136>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4a16      	ldr	r2, [pc, #88]	; (80094e4 <HAL_TIM_PWM_Start+0x18c>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d111      	bne.n	80094b2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	f003 0307 	and.w	r3, r3, #7
 8009498:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2b06      	cmp	r3, #6
 800949e:	d010      	beq.n	80094c2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f042 0201 	orr.w	r2, r2, #1
 80094ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094b0:	e007      	b.n	80094c2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f042 0201 	orr.w	r2, r2, #1
 80094c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80094c2:	2300      	movs	r3, #0
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3710      	adds	r7, #16
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	40010000 	.word	0x40010000
 80094d0:	40010400 	.word	0x40010400
 80094d4:	40000400 	.word	0x40000400
 80094d8:	40000800 	.word	0x40000800
 80094dc:	40000c00 	.word	0x40000c00
 80094e0:	40014000 	.word	0x40014000
 80094e4:	40001800 	.word	0x40001800

080094e8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b086      	sub	sp, #24
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d101      	bne.n	80094fc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80094f8:	2301      	movs	r3, #1
 80094fa:	e097      	b.n	800962c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009502:	b2db      	uxtb	r3, r3
 8009504:	2b00      	cmp	r3, #0
 8009506:	d106      	bne.n	8009516 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2200      	movs	r2, #0
 800950c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f7fc f8bd 	bl	8005690 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2202      	movs	r2, #2
 800951a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	689b      	ldr	r3, [r3, #8]
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	6812      	ldr	r2, [r2, #0]
 8009528:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800952c:	f023 0307 	bic.w	r3, r3, #7
 8009530:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	3304      	adds	r3, #4
 800953a:	4619      	mov	r1, r3
 800953c:	4610      	mov	r0, r2
 800953e:	f000 fbc1 	bl	8009cc4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	699b      	ldr	r3, [r3, #24]
 8009550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	6a1b      	ldr	r3, [r3, #32]
 8009558:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	697a      	ldr	r2, [r7, #20]
 8009560:	4313      	orrs	r3, r2
 8009562:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800956a:	f023 0303 	bic.w	r3, r3, #3
 800956e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	689a      	ldr	r2, [r3, #8]
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	699b      	ldr	r3, [r3, #24]
 8009578:	021b      	lsls	r3, r3, #8
 800957a:	4313      	orrs	r3, r2
 800957c:	693a      	ldr	r2, [r7, #16]
 800957e:	4313      	orrs	r3, r2
 8009580:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009588:	f023 030c 	bic.w	r3, r3, #12
 800958c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009594:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009598:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	68da      	ldr	r2, [r3, #12]
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	69db      	ldr	r3, [r3, #28]
 80095a2:	021b      	lsls	r3, r3, #8
 80095a4:	4313      	orrs	r3, r2
 80095a6:	693a      	ldr	r2, [r7, #16]
 80095a8:	4313      	orrs	r3, r2
 80095aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	691b      	ldr	r3, [r3, #16]
 80095b0:	011a      	lsls	r2, r3, #4
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	6a1b      	ldr	r3, [r3, #32]
 80095b6:	031b      	lsls	r3, r3, #12
 80095b8:	4313      	orrs	r3, r2
 80095ba:	693a      	ldr	r2, [r7, #16]
 80095bc:	4313      	orrs	r3, r2
 80095be:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80095c6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80095ce:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	685a      	ldr	r2, [r3, #4]
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	695b      	ldr	r3, [r3, #20]
 80095d8:	011b      	lsls	r3, r3, #4
 80095da:	4313      	orrs	r3, r2
 80095dc:	68fa      	ldr	r2, [r7, #12]
 80095de:	4313      	orrs	r3, r2
 80095e0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	697a      	ldr	r2, [r7, #20]
 80095e8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	693a      	ldr	r2, [r7, #16]
 80095f0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	68fa      	ldr	r2, [r7, #12]
 80095f8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2201      	movs	r2, #1
 80095fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2201      	movs	r2, #1
 8009606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2201      	movs	r2, #1
 800960e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2201      	movs	r2, #1
 8009616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2201      	movs	r2, #1
 800961e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2201      	movs	r2, #1
 8009626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800962a:	2300      	movs	r3, #0
}
 800962c:	4618      	mov	r0, r3
 800962e:	3718      	adds	r7, #24
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b084      	sub	sp, #16
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009644:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800964c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009654:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800965c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d110      	bne.n	8009686 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009664:	7bfb      	ldrb	r3, [r7, #15]
 8009666:	2b01      	cmp	r3, #1
 8009668:	d102      	bne.n	8009670 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800966a:	7b7b      	ldrb	r3, [r7, #13]
 800966c:	2b01      	cmp	r3, #1
 800966e:	d001      	beq.n	8009674 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009670:	2301      	movs	r3, #1
 8009672:	e069      	b.n	8009748 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2202      	movs	r2, #2
 8009678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2202      	movs	r2, #2
 8009680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009684:	e031      	b.n	80096ea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	2b04      	cmp	r3, #4
 800968a:	d110      	bne.n	80096ae <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800968c:	7bbb      	ldrb	r3, [r7, #14]
 800968e:	2b01      	cmp	r3, #1
 8009690:	d102      	bne.n	8009698 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009692:	7b3b      	ldrb	r3, [r7, #12]
 8009694:	2b01      	cmp	r3, #1
 8009696:	d001      	beq.n	800969c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009698:	2301      	movs	r3, #1
 800969a:	e055      	b.n	8009748 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2202      	movs	r2, #2
 80096a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2202      	movs	r2, #2
 80096a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80096ac:	e01d      	b.n	80096ea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80096ae:	7bfb      	ldrb	r3, [r7, #15]
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d108      	bne.n	80096c6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80096b4:	7bbb      	ldrb	r3, [r7, #14]
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	d105      	bne.n	80096c6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80096ba:	7b7b      	ldrb	r3, [r7, #13]
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d102      	bne.n	80096c6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80096c0:	7b3b      	ldrb	r3, [r7, #12]
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d001      	beq.n	80096ca <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80096c6:	2301      	movs	r3, #1
 80096c8:	e03e      	b.n	8009748 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2202      	movs	r2, #2
 80096ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2202      	movs	r2, #2
 80096d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2202      	movs	r2, #2
 80096de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2202      	movs	r2, #2
 80096e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d003      	beq.n	80096f8 <HAL_TIM_Encoder_Start+0xc4>
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	2b04      	cmp	r3, #4
 80096f4:	d008      	beq.n	8009708 <HAL_TIM_Encoder_Start+0xd4>
 80096f6:	e00f      	b.n	8009718 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	2201      	movs	r2, #1
 80096fe:	2100      	movs	r1, #0
 8009700:	4618      	mov	r0, r3
 8009702:	f000 fdc9 	bl	800a298 <TIM_CCxChannelCmd>
      break;
 8009706:	e016      	b.n	8009736 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	2201      	movs	r2, #1
 800970e:	2104      	movs	r1, #4
 8009710:	4618      	mov	r0, r3
 8009712:	f000 fdc1 	bl	800a298 <TIM_CCxChannelCmd>
      break;
 8009716:	e00e      	b.n	8009736 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	2201      	movs	r2, #1
 800971e:	2100      	movs	r1, #0
 8009720:	4618      	mov	r0, r3
 8009722:	f000 fdb9 	bl	800a298 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	2201      	movs	r2, #1
 800972c:	2104      	movs	r1, #4
 800972e:	4618      	mov	r0, r3
 8009730:	f000 fdb2 	bl	800a298 <TIM_CCxChannelCmd>
      break;
 8009734:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f042 0201 	orr.w	r2, r2, #1
 8009744:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009746:	2300      	movs	r3, #0
}
 8009748:	4618      	mov	r0, r3
 800974a:	3710      	adds	r7, #16
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	691b      	ldr	r3, [r3, #16]
 800975e:	f003 0302 	and.w	r3, r3, #2
 8009762:	2b02      	cmp	r3, #2
 8009764:	d122      	bne.n	80097ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	68db      	ldr	r3, [r3, #12]
 800976c:	f003 0302 	and.w	r3, r3, #2
 8009770:	2b02      	cmp	r3, #2
 8009772:	d11b      	bne.n	80097ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f06f 0202 	mvn.w	r2, #2
 800977c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2201      	movs	r2, #1
 8009782:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	699b      	ldr	r3, [r3, #24]
 800978a:	f003 0303 	and.w	r3, r3, #3
 800978e:	2b00      	cmp	r3, #0
 8009790:	d003      	beq.n	800979a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 fa77 	bl	8009c86 <HAL_TIM_IC_CaptureCallback>
 8009798:	e005      	b.n	80097a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 fa69 	bl	8009c72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f000 fa7a 	bl	8009c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	691b      	ldr	r3, [r3, #16]
 80097b2:	f003 0304 	and.w	r3, r3, #4
 80097b6:	2b04      	cmp	r3, #4
 80097b8:	d122      	bne.n	8009800 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	68db      	ldr	r3, [r3, #12]
 80097c0:	f003 0304 	and.w	r3, r3, #4
 80097c4:	2b04      	cmp	r3, #4
 80097c6:	d11b      	bne.n	8009800 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f06f 0204 	mvn.w	r2, #4
 80097d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2202      	movs	r2, #2
 80097d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	699b      	ldr	r3, [r3, #24]
 80097de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d003      	beq.n	80097ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 fa4d 	bl	8009c86 <HAL_TIM_IC_CaptureCallback>
 80097ec:	e005      	b.n	80097fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 fa3f 	bl	8009c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 fa50 	bl	8009c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	691b      	ldr	r3, [r3, #16]
 8009806:	f003 0308 	and.w	r3, r3, #8
 800980a:	2b08      	cmp	r3, #8
 800980c:	d122      	bne.n	8009854 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	68db      	ldr	r3, [r3, #12]
 8009814:	f003 0308 	and.w	r3, r3, #8
 8009818:	2b08      	cmp	r3, #8
 800981a:	d11b      	bne.n	8009854 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f06f 0208 	mvn.w	r2, #8
 8009824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2204      	movs	r2, #4
 800982a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	69db      	ldr	r3, [r3, #28]
 8009832:	f003 0303 	and.w	r3, r3, #3
 8009836:	2b00      	cmp	r3, #0
 8009838:	d003      	beq.n	8009842 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 fa23 	bl	8009c86 <HAL_TIM_IC_CaptureCallback>
 8009840:	e005      	b.n	800984e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 fa15 	bl	8009c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f000 fa26 	bl	8009c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2200      	movs	r2, #0
 8009852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	691b      	ldr	r3, [r3, #16]
 800985a:	f003 0310 	and.w	r3, r3, #16
 800985e:	2b10      	cmp	r3, #16
 8009860:	d122      	bne.n	80098a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	68db      	ldr	r3, [r3, #12]
 8009868:	f003 0310 	and.w	r3, r3, #16
 800986c:	2b10      	cmp	r3, #16
 800986e:	d11b      	bne.n	80098a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f06f 0210 	mvn.w	r2, #16
 8009878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2208      	movs	r2, #8
 800987e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	69db      	ldr	r3, [r3, #28]
 8009886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800988a:	2b00      	cmp	r3, #0
 800988c:	d003      	beq.n	8009896 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 f9f9 	bl	8009c86 <HAL_TIM_IC_CaptureCallback>
 8009894:	e005      	b.n	80098a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f000 f9eb 	bl	8009c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f000 f9fc 	bl	8009c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	691b      	ldr	r3, [r3, #16]
 80098ae:	f003 0301 	and.w	r3, r3, #1
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	d10e      	bne.n	80098d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	68db      	ldr	r3, [r3, #12]
 80098bc:	f003 0301 	and.w	r3, r3, #1
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d107      	bne.n	80098d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f06f 0201 	mvn.w	r2, #1
 80098cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f7fb fbc0 	bl	8005054 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	691b      	ldr	r3, [r3, #16]
 80098da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098de:	2b80      	cmp	r3, #128	; 0x80
 80098e0:	d10e      	bne.n	8009900 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	68db      	ldr	r3, [r3, #12]
 80098e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098ec:	2b80      	cmp	r3, #128	; 0x80
 80098ee:	d107      	bne.n	8009900 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80098f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 fdca 	bl	800a494 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	691b      	ldr	r3, [r3, #16]
 8009906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800990a:	2b40      	cmp	r3, #64	; 0x40
 800990c:	d10e      	bne.n	800992c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	68db      	ldr	r3, [r3, #12]
 8009914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009918:	2b40      	cmp	r3, #64	; 0x40
 800991a:	d107      	bne.n	800992c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 f9c1 	bl	8009cae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	691b      	ldr	r3, [r3, #16]
 8009932:	f003 0320 	and.w	r3, r3, #32
 8009936:	2b20      	cmp	r3, #32
 8009938:	d10e      	bne.n	8009958 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	68db      	ldr	r3, [r3, #12]
 8009940:	f003 0320 	and.w	r3, r3, #32
 8009944:	2b20      	cmp	r3, #32
 8009946:	d107      	bne.n	8009958 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f06f 0220 	mvn.w	r2, #32
 8009950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 fd94 	bl	800a480 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009958:	bf00      	nop
 800995a:	3708      	adds	r7, #8
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b086      	sub	sp, #24
 8009964:	af00      	add	r7, sp, #0
 8009966:	60f8      	str	r0, [r7, #12]
 8009968:	60b9      	str	r1, [r7, #8]
 800996a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800996c:	2300      	movs	r3, #0
 800996e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009976:	2b01      	cmp	r3, #1
 8009978:	d101      	bne.n	800997e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800997a:	2302      	movs	r3, #2
 800997c:	e0ae      	b.n	8009adc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2201      	movs	r2, #1
 8009982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2b0c      	cmp	r3, #12
 800998a:	f200 809f 	bhi.w	8009acc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800998e:	a201      	add	r2, pc, #4	; (adr r2, 8009994 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009994:	080099c9 	.word	0x080099c9
 8009998:	08009acd 	.word	0x08009acd
 800999c:	08009acd 	.word	0x08009acd
 80099a0:	08009acd 	.word	0x08009acd
 80099a4:	08009a09 	.word	0x08009a09
 80099a8:	08009acd 	.word	0x08009acd
 80099ac:	08009acd 	.word	0x08009acd
 80099b0:	08009acd 	.word	0x08009acd
 80099b4:	08009a4b 	.word	0x08009a4b
 80099b8:	08009acd 	.word	0x08009acd
 80099bc:	08009acd 	.word	0x08009acd
 80099c0:	08009acd 	.word	0x08009acd
 80099c4:	08009a8b 	.word	0x08009a8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	68b9      	ldr	r1, [r7, #8]
 80099ce:	4618      	mov	r0, r3
 80099d0:	f000 fa18 	bl	8009e04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	699a      	ldr	r2, [r3, #24]
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f042 0208 	orr.w	r2, r2, #8
 80099e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	699a      	ldr	r2, [r3, #24]
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f022 0204 	bic.w	r2, r2, #4
 80099f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	6999      	ldr	r1, [r3, #24]
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	691a      	ldr	r2, [r3, #16]
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	430a      	orrs	r2, r1
 8009a04:	619a      	str	r2, [r3, #24]
      break;
 8009a06:	e064      	b.n	8009ad2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	68b9      	ldr	r1, [r7, #8]
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f000 fa68 	bl	8009ee4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	699a      	ldr	r2, [r3, #24]
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	699a      	ldr	r2, [r3, #24]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	6999      	ldr	r1, [r3, #24]
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	691b      	ldr	r3, [r3, #16]
 8009a3e:	021a      	lsls	r2, r3, #8
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	430a      	orrs	r2, r1
 8009a46:	619a      	str	r2, [r3, #24]
      break;
 8009a48:	e043      	b.n	8009ad2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	68b9      	ldr	r1, [r7, #8]
 8009a50:	4618      	mov	r0, r3
 8009a52:	f000 fabd 	bl	8009fd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	69da      	ldr	r2, [r3, #28]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f042 0208 	orr.w	r2, r2, #8
 8009a64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	69da      	ldr	r2, [r3, #28]
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f022 0204 	bic.w	r2, r2, #4
 8009a74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	69d9      	ldr	r1, [r3, #28]
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	691a      	ldr	r2, [r3, #16]
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	430a      	orrs	r2, r1
 8009a86:	61da      	str	r2, [r3, #28]
      break;
 8009a88:	e023      	b.n	8009ad2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	68b9      	ldr	r1, [r7, #8]
 8009a90:	4618      	mov	r0, r3
 8009a92:	f000 fb11 	bl	800a0b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	69da      	ldr	r2, [r3, #28]
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009aa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	69da      	ldr	r2, [r3, #28]
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ab4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	69d9      	ldr	r1, [r3, #28]
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	691b      	ldr	r3, [r3, #16]
 8009ac0:	021a      	lsls	r2, r3, #8
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	430a      	orrs	r2, r1
 8009ac8:	61da      	str	r2, [r3, #28]
      break;
 8009aca:	e002      	b.n	8009ad2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009acc:	2301      	movs	r3, #1
 8009ace:	75fb      	strb	r3, [r7, #23]
      break;
 8009ad0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3718      	adds	r7, #24
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}

08009ae4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009aee:	2300      	movs	r3, #0
 8009af0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d101      	bne.n	8009b00 <HAL_TIM_ConfigClockSource+0x1c>
 8009afc:	2302      	movs	r3, #2
 8009afe:	e0b4      	b.n	8009c6a <HAL_TIM_ConfigClockSource+0x186>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2201      	movs	r2, #1
 8009b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2202      	movs	r2, #2
 8009b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	689b      	ldr	r3, [r3, #8]
 8009b16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009b1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	68ba      	ldr	r2, [r7, #8]
 8009b2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b38:	d03e      	beq.n	8009bb8 <HAL_TIM_ConfigClockSource+0xd4>
 8009b3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b3e:	f200 8087 	bhi.w	8009c50 <HAL_TIM_ConfigClockSource+0x16c>
 8009b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b46:	f000 8086 	beq.w	8009c56 <HAL_TIM_ConfigClockSource+0x172>
 8009b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b4e:	d87f      	bhi.n	8009c50 <HAL_TIM_ConfigClockSource+0x16c>
 8009b50:	2b70      	cmp	r3, #112	; 0x70
 8009b52:	d01a      	beq.n	8009b8a <HAL_TIM_ConfigClockSource+0xa6>
 8009b54:	2b70      	cmp	r3, #112	; 0x70
 8009b56:	d87b      	bhi.n	8009c50 <HAL_TIM_ConfigClockSource+0x16c>
 8009b58:	2b60      	cmp	r3, #96	; 0x60
 8009b5a:	d050      	beq.n	8009bfe <HAL_TIM_ConfigClockSource+0x11a>
 8009b5c:	2b60      	cmp	r3, #96	; 0x60
 8009b5e:	d877      	bhi.n	8009c50 <HAL_TIM_ConfigClockSource+0x16c>
 8009b60:	2b50      	cmp	r3, #80	; 0x50
 8009b62:	d03c      	beq.n	8009bde <HAL_TIM_ConfigClockSource+0xfa>
 8009b64:	2b50      	cmp	r3, #80	; 0x50
 8009b66:	d873      	bhi.n	8009c50 <HAL_TIM_ConfigClockSource+0x16c>
 8009b68:	2b40      	cmp	r3, #64	; 0x40
 8009b6a:	d058      	beq.n	8009c1e <HAL_TIM_ConfigClockSource+0x13a>
 8009b6c:	2b40      	cmp	r3, #64	; 0x40
 8009b6e:	d86f      	bhi.n	8009c50 <HAL_TIM_ConfigClockSource+0x16c>
 8009b70:	2b30      	cmp	r3, #48	; 0x30
 8009b72:	d064      	beq.n	8009c3e <HAL_TIM_ConfigClockSource+0x15a>
 8009b74:	2b30      	cmp	r3, #48	; 0x30
 8009b76:	d86b      	bhi.n	8009c50 <HAL_TIM_ConfigClockSource+0x16c>
 8009b78:	2b20      	cmp	r3, #32
 8009b7a:	d060      	beq.n	8009c3e <HAL_TIM_ConfigClockSource+0x15a>
 8009b7c:	2b20      	cmp	r3, #32
 8009b7e:	d867      	bhi.n	8009c50 <HAL_TIM_ConfigClockSource+0x16c>
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d05c      	beq.n	8009c3e <HAL_TIM_ConfigClockSource+0x15a>
 8009b84:	2b10      	cmp	r3, #16
 8009b86:	d05a      	beq.n	8009c3e <HAL_TIM_ConfigClockSource+0x15a>
 8009b88:	e062      	b.n	8009c50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6818      	ldr	r0, [r3, #0]
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	6899      	ldr	r1, [r3, #8]
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	685a      	ldr	r2, [r3, #4]
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	68db      	ldr	r3, [r3, #12]
 8009b9a:	f000 fb5d 	bl	800a258 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009bac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	68ba      	ldr	r2, [r7, #8]
 8009bb4:	609a      	str	r2, [r3, #8]
      break;
 8009bb6:	e04f      	b.n	8009c58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6818      	ldr	r0, [r3, #0]
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	6899      	ldr	r1, [r3, #8]
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	685a      	ldr	r2, [r3, #4]
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	f000 fb46 	bl	800a258 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	689a      	ldr	r2, [r3, #8]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009bda:	609a      	str	r2, [r3, #8]
      break;
 8009bdc:	e03c      	b.n	8009c58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6818      	ldr	r0, [r3, #0]
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	6859      	ldr	r1, [r3, #4]
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	68db      	ldr	r3, [r3, #12]
 8009bea:	461a      	mov	r2, r3
 8009bec:	f000 faba 	bl	800a164 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	2150      	movs	r1, #80	; 0x50
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f000 fb13 	bl	800a222 <TIM_ITRx_SetConfig>
      break;
 8009bfc:	e02c      	b.n	8009c58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6818      	ldr	r0, [r3, #0]
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	6859      	ldr	r1, [r3, #4]
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	68db      	ldr	r3, [r3, #12]
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	f000 fad9 	bl	800a1c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	2160      	movs	r1, #96	; 0x60
 8009c16:	4618      	mov	r0, r3
 8009c18:	f000 fb03 	bl	800a222 <TIM_ITRx_SetConfig>
      break;
 8009c1c:	e01c      	b.n	8009c58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6818      	ldr	r0, [r3, #0]
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	6859      	ldr	r1, [r3, #4]
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	68db      	ldr	r3, [r3, #12]
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	f000 fa9a 	bl	800a164 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	2140      	movs	r1, #64	; 0x40
 8009c36:	4618      	mov	r0, r3
 8009c38:	f000 faf3 	bl	800a222 <TIM_ITRx_SetConfig>
      break;
 8009c3c:	e00c      	b.n	8009c58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681a      	ldr	r2, [r3, #0]
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4619      	mov	r1, r3
 8009c48:	4610      	mov	r0, r2
 8009c4a:	f000 faea 	bl	800a222 <TIM_ITRx_SetConfig>
      break;
 8009c4e:	e003      	b.n	8009c58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009c50:	2301      	movs	r3, #1
 8009c52:	73fb      	strb	r3, [r7, #15]
      break;
 8009c54:	e000      	b.n	8009c58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009c56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2200      	movs	r2, #0
 8009c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3710      	adds	r7, #16
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}

08009c72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c72:	b480      	push	{r7}
 8009c74:	b083      	sub	sp, #12
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c7a:	bf00      	nop
 8009c7c:	370c      	adds	r7, #12
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr

08009c86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009c86:	b480      	push	{r7}
 8009c88:	b083      	sub	sp, #12
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009c8e:	bf00      	nop
 8009c90:	370c      	adds	r7, #12
 8009c92:	46bd      	mov	sp, r7
 8009c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c98:	4770      	bx	lr

08009c9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c9a:	b480      	push	{r7}
 8009c9c:	b083      	sub	sp, #12
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009ca2:	bf00      	nop
 8009ca4:	370c      	adds	r7, #12
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr

08009cae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009cae:	b480      	push	{r7}
 8009cb0:	b083      	sub	sp, #12
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009cb6:	bf00      	nop
 8009cb8:	370c      	adds	r7, #12
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr
	...

08009cc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b085      	sub	sp, #20
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	4a40      	ldr	r2, [pc, #256]	; (8009dd8 <TIM_Base_SetConfig+0x114>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d013      	beq.n	8009d04 <TIM_Base_SetConfig+0x40>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ce2:	d00f      	beq.n	8009d04 <TIM_Base_SetConfig+0x40>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	4a3d      	ldr	r2, [pc, #244]	; (8009ddc <TIM_Base_SetConfig+0x118>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d00b      	beq.n	8009d04 <TIM_Base_SetConfig+0x40>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	4a3c      	ldr	r2, [pc, #240]	; (8009de0 <TIM_Base_SetConfig+0x11c>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d007      	beq.n	8009d04 <TIM_Base_SetConfig+0x40>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	4a3b      	ldr	r2, [pc, #236]	; (8009de4 <TIM_Base_SetConfig+0x120>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d003      	beq.n	8009d04 <TIM_Base_SetConfig+0x40>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	4a3a      	ldr	r2, [pc, #232]	; (8009de8 <TIM_Base_SetConfig+0x124>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d108      	bne.n	8009d16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	685b      	ldr	r3, [r3, #4]
 8009d10:	68fa      	ldr	r2, [r7, #12]
 8009d12:	4313      	orrs	r3, r2
 8009d14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	4a2f      	ldr	r2, [pc, #188]	; (8009dd8 <TIM_Base_SetConfig+0x114>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d02b      	beq.n	8009d76 <TIM_Base_SetConfig+0xb2>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d24:	d027      	beq.n	8009d76 <TIM_Base_SetConfig+0xb2>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	4a2c      	ldr	r2, [pc, #176]	; (8009ddc <TIM_Base_SetConfig+0x118>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d023      	beq.n	8009d76 <TIM_Base_SetConfig+0xb2>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	4a2b      	ldr	r2, [pc, #172]	; (8009de0 <TIM_Base_SetConfig+0x11c>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d01f      	beq.n	8009d76 <TIM_Base_SetConfig+0xb2>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	4a2a      	ldr	r2, [pc, #168]	; (8009de4 <TIM_Base_SetConfig+0x120>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d01b      	beq.n	8009d76 <TIM_Base_SetConfig+0xb2>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	4a29      	ldr	r2, [pc, #164]	; (8009de8 <TIM_Base_SetConfig+0x124>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d017      	beq.n	8009d76 <TIM_Base_SetConfig+0xb2>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	4a28      	ldr	r2, [pc, #160]	; (8009dec <TIM_Base_SetConfig+0x128>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d013      	beq.n	8009d76 <TIM_Base_SetConfig+0xb2>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	4a27      	ldr	r2, [pc, #156]	; (8009df0 <TIM_Base_SetConfig+0x12c>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d00f      	beq.n	8009d76 <TIM_Base_SetConfig+0xb2>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	4a26      	ldr	r2, [pc, #152]	; (8009df4 <TIM_Base_SetConfig+0x130>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d00b      	beq.n	8009d76 <TIM_Base_SetConfig+0xb2>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	4a25      	ldr	r2, [pc, #148]	; (8009df8 <TIM_Base_SetConfig+0x134>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d007      	beq.n	8009d76 <TIM_Base_SetConfig+0xb2>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	4a24      	ldr	r2, [pc, #144]	; (8009dfc <TIM_Base_SetConfig+0x138>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d003      	beq.n	8009d76 <TIM_Base_SetConfig+0xb2>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	4a23      	ldr	r2, [pc, #140]	; (8009e00 <TIM_Base_SetConfig+0x13c>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d108      	bne.n	8009d88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	68db      	ldr	r3, [r3, #12]
 8009d82:	68fa      	ldr	r2, [r7, #12]
 8009d84:	4313      	orrs	r3, r2
 8009d86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	695b      	ldr	r3, [r3, #20]
 8009d92:	4313      	orrs	r3, r2
 8009d94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	689a      	ldr	r2, [r3, #8]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	681a      	ldr	r2, [r3, #0]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	4a0a      	ldr	r2, [pc, #40]	; (8009dd8 <TIM_Base_SetConfig+0x114>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d003      	beq.n	8009dbc <TIM_Base_SetConfig+0xf8>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	4a0c      	ldr	r2, [pc, #48]	; (8009de8 <TIM_Base_SetConfig+0x124>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d103      	bne.n	8009dc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	691a      	ldr	r2, [r3, #16]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	615a      	str	r2, [r3, #20]
}
 8009dca:	bf00      	nop
 8009dcc:	3714      	adds	r7, #20
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd4:	4770      	bx	lr
 8009dd6:	bf00      	nop
 8009dd8:	40010000 	.word	0x40010000
 8009ddc:	40000400 	.word	0x40000400
 8009de0:	40000800 	.word	0x40000800
 8009de4:	40000c00 	.word	0x40000c00
 8009de8:	40010400 	.word	0x40010400
 8009dec:	40014000 	.word	0x40014000
 8009df0:	40014400 	.word	0x40014400
 8009df4:	40014800 	.word	0x40014800
 8009df8:	40001800 	.word	0x40001800
 8009dfc:	40001c00 	.word	0x40001c00
 8009e00:	40002000 	.word	0x40002000

08009e04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b087      	sub	sp, #28
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6a1b      	ldr	r3, [r3, #32]
 8009e12:	f023 0201 	bic.w	r2, r3, #1
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6a1b      	ldr	r3, [r3, #32]
 8009e1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	699b      	ldr	r3, [r3, #24]
 8009e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f023 0303 	bic.w	r3, r3, #3
 8009e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	68fa      	ldr	r2, [r7, #12]
 8009e42:	4313      	orrs	r3, r2
 8009e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	f023 0302 	bic.w	r3, r3, #2
 8009e4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	689b      	ldr	r3, [r3, #8]
 8009e52:	697a      	ldr	r2, [r7, #20]
 8009e54:	4313      	orrs	r3, r2
 8009e56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	4a20      	ldr	r2, [pc, #128]	; (8009edc <TIM_OC1_SetConfig+0xd8>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d003      	beq.n	8009e68 <TIM_OC1_SetConfig+0x64>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	4a1f      	ldr	r2, [pc, #124]	; (8009ee0 <TIM_OC1_SetConfig+0xdc>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d10c      	bne.n	8009e82 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	f023 0308 	bic.w	r3, r3, #8
 8009e6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	68db      	ldr	r3, [r3, #12]
 8009e74:	697a      	ldr	r2, [r7, #20]
 8009e76:	4313      	orrs	r3, r2
 8009e78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	f023 0304 	bic.w	r3, r3, #4
 8009e80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	4a15      	ldr	r2, [pc, #84]	; (8009edc <TIM_OC1_SetConfig+0xd8>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d003      	beq.n	8009e92 <TIM_OC1_SetConfig+0x8e>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	4a14      	ldr	r2, [pc, #80]	; (8009ee0 <TIM_OC1_SetConfig+0xdc>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d111      	bne.n	8009eb6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	695b      	ldr	r3, [r3, #20]
 8009ea6:	693a      	ldr	r2, [r7, #16]
 8009ea8:	4313      	orrs	r3, r2
 8009eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	699b      	ldr	r3, [r3, #24]
 8009eb0:	693a      	ldr	r2, [r7, #16]
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	693a      	ldr	r2, [r7, #16]
 8009eba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	68fa      	ldr	r2, [r7, #12]
 8009ec0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	685a      	ldr	r2, [r3, #4]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	697a      	ldr	r2, [r7, #20]
 8009ece:	621a      	str	r2, [r3, #32]
}
 8009ed0:	bf00      	nop
 8009ed2:	371c      	adds	r7, #28
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr
 8009edc:	40010000 	.word	0x40010000
 8009ee0:	40010400 	.word	0x40010400

08009ee4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b087      	sub	sp, #28
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6a1b      	ldr	r3, [r3, #32]
 8009ef2:	f023 0210 	bic.w	r2, r3, #16
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6a1b      	ldr	r3, [r3, #32]
 8009efe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	699b      	ldr	r3, [r3, #24]
 8009f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	021b      	lsls	r3, r3, #8
 8009f22:	68fa      	ldr	r2, [r7, #12]
 8009f24:	4313      	orrs	r3, r2
 8009f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	f023 0320 	bic.w	r3, r3, #32
 8009f2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	689b      	ldr	r3, [r3, #8]
 8009f34:	011b      	lsls	r3, r3, #4
 8009f36:	697a      	ldr	r2, [r7, #20]
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	4a22      	ldr	r2, [pc, #136]	; (8009fc8 <TIM_OC2_SetConfig+0xe4>)
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d003      	beq.n	8009f4c <TIM_OC2_SetConfig+0x68>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	4a21      	ldr	r2, [pc, #132]	; (8009fcc <TIM_OC2_SetConfig+0xe8>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d10d      	bne.n	8009f68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	011b      	lsls	r3, r3, #4
 8009f5a:	697a      	ldr	r2, [r7, #20]
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	4a17      	ldr	r2, [pc, #92]	; (8009fc8 <TIM_OC2_SetConfig+0xe4>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d003      	beq.n	8009f78 <TIM_OC2_SetConfig+0x94>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	4a16      	ldr	r2, [pc, #88]	; (8009fcc <TIM_OC2_SetConfig+0xe8>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d113      	bne.n	8009fa0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	695b      	ldr	r3, [r3, #20]
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	693a      	ldr	r2, [r7, #16]
 8009f90:	4313      	orrs	r3, r2
 8009f92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	699b      	ldr	r3, [r3, #24]
 8009f98:	009b      	lsls	r3, r3, #2
 8009f9a:	693a      	ldr	r2, [r7, #16]
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	693a      	ldr	r2, [r7, #16]
 8009fa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	68fa      	ldr	r2, [r7, #12]
 8009faa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	685a      	ldr	r2, [r3, #4]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	697a      	ldr	r2, [r7, #20]
 8009fb8:	621a      	str	r2, [r3, #32]
}
 8009fba:	bf00      	nop
 8009fbc:	371c      	adds	r7, #28
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc4:	4770      	bx	lr
 8009fc6:	bf00      	nop
 8009fc8:	40010000 	.word	0x40010000
 8009fcc:	40010400 	.word	0x40010400

08009fd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b087      	sub	sp, #28
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6a1b      	ldr	r3, [r3, #32]
 8009fde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6a1b      	ldr	r3, [r3, #32]
 8009fea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	69db      	ldr	r3, [r3, #28]
 8009ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f023 0303 	bic.w	r3, r3, #3
 800a006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	68fa      	ldr	r2, [r7, #12]
 800a00e:	4313      	orrs	r3, r2
 800a010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a018:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	689b      	ldr	r3, [r3, #8]
 800a01e:	021b      	lsls	r3, r3, #8
 800a020:	697a      	ldr	r2, [r7, #20]
 800a022:	4313      	orrs	r3, r2
 800a024:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	4a21      	ldr	r2, [pc, #132]	; (800a0b0 <TIM_OC3_SetConfig+0xe0>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d003      	beq.n	800a036 <TIM_OC3_SetConfig+0x66>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	4a20      	ldr	r2, [pc, #128]	; (800a0b4 <TIM_OC3_SetConfig+0xe4>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d10d      	bne.n	800a052 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a03c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	68db      	ldr	r3, [r3, #12]
 800a042:	021b      	lsls	r3, r3, #8
 800a044:	697a      	ldr	r2, [r7, #20]
 800a046:	4313      	orrs	r3, r2
 800a048:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a050:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	4a16      	ldr	r2, [pc, #88]	; (800a0b0 <TIM_OC3_SetConfig+0xe0>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d003      	beq.n	800a062 <TIM_OC3_SetConfig+0x92>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	4a15      	ldr	r2, [pc, #84]	; (800a0b4 <TIM_OC3_SetConfig+0xe4>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d113      	bne.n	800a08a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a068:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a070:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	695b      	ldr	r3, [r3, #20]
 800a076:	011b      	lsls	r3, r3, #4
 800a078:	693a      	ldr	r2, [r7, #16]
 800a07a:	4313      	orrs	r3, r2
 800a07c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	699b      	ldr	r3, [r3, #24]
 800a082:	011b      	lsls	r3, r3, #4
 800a084:	693a      	ldr	r2, [r7, #16]
 800a086:	4313      	orrs	r3, r2
 800a088:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	693a      	ldr	r2, [r7, #16]
 800a08e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	68fa      	ldr	r2, [r7, #12]
 800a094:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	685a      	ldr	r2, [r3, #4]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	697a      	ldr	r2, [r7, #20]
 800a0a2:	621a      	str	r2, [r3, #32]
}
 800a0a4:	bf00      	nop
 800a0a6:	371c      	adds	r7, #28
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr
 800a0b0:	40010000 	.word	0x40010000
 800a0b4:	40010400 	.word	0x40010400

0800a0b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b087      	sub	sp, #28
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6a1b      	ldr	r3, [r3, #32]
 800a0c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6a1b      	ldr	r3, [r3, #32]
 800a0d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	69db      	ldr	r3, [r3, #28]
 800a0de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	021b      	lsls	r3, r3, #8
 800a0f6:	68fa      	ldr	r2, [r7, #12]
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a102:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	689b      	ldr	r3, [r3, #8]
 800a108:	031b      	lsls	r3, r3, #12
 800a10a:	693a      	ldr	r2, [r7, #16]
 800a10c:	4313      	orrs	r3, r2
 800a10e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	4a12      	ldr	r2, [pc, #72]	; (800a15c <TIM_OC4_SetConfig+0xa4>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d003      	beq.n	800a120 <TIM_OC4_SetConfig+0x68>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	4a11      	ldr	r2, [pc, #68]	; (800a160 <TIM_OC4_SetConfig+0xa8>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d109      	bne.n	800a134 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a126:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	695b      	ldr	r3, [r3, #20]
 800a12c:	019b      	lsls	r3, r3, #6
 800a12e:	697a      	ldr	r2, [r7, #20]
 800a130:	4313      	orrs	r3, r2
 800a132:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	697a      	ldr	r2, [r7, #20]
 800a138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	68fa      	ldr	r2, [r7, #12]
 800a13e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	685a      	ldr	r2, [r3, #4]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	693a      	ldr	r2, [r7, #16]
 800a14c:	621a      	str	r2, [r3, #32]
}
 800a14e:	bf00      	nop
 800a150:	371c      	adds	r7, #28
 800a152:	46bd      	mov	sp, r7
 800a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a158:	4770      	bx	lr
 800a15a:	bf00      	nop
 800a15c:	40010000 	.word	0x40010000
 800a160:	40010400 	.word	0x40010400

0800a164 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a164:	b480      	push	{r7}
 800a166:	b087      	sub	sp, #28
 800a168:	af00      	add	r7, sp, #0
 800a16a:	60f8      	str	r0, [r7, #12]
 800a16c:	60b9      	str	r1, [r7, #8]
 800a16e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	6a1b      	ldr	r3, [r3, #32]
 800a174:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	6a1b      	ldr	r3, [r3, #32]
 800a17a:	f023 0201 	bic.w	r2, r3, #1
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	699b      	ldr	r3, [r3, #24]
 800a186:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a18e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	011b      	lsls	r3, r3, #4
 800a194:	693a      	ldr	r2, [r7, #16]
 800a196:	4313      	orrs	r3, r2
 800a198:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	f023 030a 	bic.w	r3, r3, #10
 800a1a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a1a2:	697a      	ldr	r2, [r7, #20]
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	693a      	ldr	r2, [r7, #16]
 800a1ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	697a      	ldr	r2, [r7, #20]
 800a1b4:	621a      	str	r2, [r3, #32]
}
 800a1b6:	bf00      	nop
 800a1b8:	371c      	adds	r7, #28
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr

0800a1c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1c2:	b480      	push	{r7}
 800a1c4:	b087      	sub	sp, #28
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	60f8      	str	r0, [r7, #12]
 800a1ca:	60b9      	str	r1, [r7, #8]
 800a1cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	6a1b      	ldr	r3, [r3, #32]
 800a1d2:	f023 0210 	bic.w	r2, r3, #16
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	699b      	ldr	r3, [r3, #24]
 800a1de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	6a1b      	ldr	r3, [r3, #32]
 800a1e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a1ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	031b      	lsls	r3, r3, #12
 800a1f2:	697a      	ldr	r2, [r7, #20]
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a1fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	011b      	lsls	r3, r3, #4
 800a204:	693a      	ldr	r2, [r7, #16]
 800a206:	4313      	orrs	r3, r2
 800a208:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	697a      	ldr	r2, [r7, #20]
 800a20e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	693a      	ldr	r2, [r7, #16]
 800a214:	621a      	str	r2, [r3, #32]
}
 800a216:	bf00      	nop
 800a218:	371c      	adds	r7, #28
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr

0800a222 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a222:	b480      	push	{r7}
 800a224:	b085      	sub	sp, #20
 800a226:	af00      	add	r7, sp, #0
 800a228:	6078      	str	r0, [r7, #4]
 800a22a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	689b      	ldr	r3, [r3, #8]
 800a230:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a238:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a23a:	683a      	ldr	r2, [r7, #0]
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	4313      	orrs	r3, r2
 800a240:	f043 0307 	orr.w	r3, r3, #7
 800a244:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	68fa      	ldr	r2, [r7, #12]
 800a24a:	609a      	str	r2, [r3, #8]
}
 800a24c:	bf00      	nop
 800a24e:	3714      	adds	r7, #20
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a258:	b480      	push	{r7}
 800a25a:	b087      	sub	sp, #28
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	60f8      	str	r0, [r7, #12]
 800a260:	60b9      	str	r1, [r7, #8]
 800a262:	607a      	str	r2, [r7, #4]
 800a264:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	689b      	ldr	r3, [r3, #8]
 800a26a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a272:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	021a      	lsls	r2, r3, #8
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	431a      	orrs	r2, r3
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	4313      	orrs	r3, r2
 800a280:	697a      	ldr	r2, [r7, #20]
 800a282:	4313      	orrs	r3, r2
 800a284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	697a      	ldr	r2, [r7, #20]
 800a28a:	609a      	str	r2, [r3, #8]
}
 800a28c:	bf00      	nop
 800a28e:	371c      	adds	r7, #28
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a298:	b480      	push	{r7}
 800a29a:	b087      	sub	sp, #28
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	60f8      	str	r0, [r7, #12]
 800a2a0:	60b9      	str	r1, [r7, #8]
 800a2a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	f003 031f 	and.w	r3, r3, #31
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a2b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	6a1a      	ldr	r2, [r3, #32]
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	43db      	mvns	r3, r3
 800a2ba:	401a      	ands	r2, r3
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	6a1a      	ldr	r2, [r3, #32]
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	f003 031f 	and.w	r3, r3, #31
 800a2ca:	6879      	ldr	r1, [r7, #4]
 800a2cc:	fa01 f303 	lsl.w	r3, r1, r3
 800a2d0:	431a      	orrs	r2, r3
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	621a      	str	r2, [r3, #32]
}
 800a2d6:	bf00      	nop
 800a2d8:	371c      	adds	r7, #28
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e0:	4770      	bx	lr
	...

0800a2e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b085      	sub	sp, #20
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2f4:	2b01      	cmp	r3, #1
 800a2f6:	d101      	bne.n	800a2fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a2f8:	2302      	movs	r3, #2
 800a2fa:	e05a      	b.n	800a3b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2201      	movs	r2, #1
 800a300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2202      	movs	r2, #2
 800a308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	689b      	ldr	r3, [r3, #8]
 800a31a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a322:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	68fa      	ldr	r2, [r7, #12]
 800a32a:	4313      	orrs	r3, r2
 800a32c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	68fa      	ldr	r2, [r7, #12]
 800a334:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4a21      	ldr	r2, [pc, #132]	; (800a3c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d022      	beq.n	800a386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a348:	d01d      	beq.n	800a386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4a1d      	ldr	r2, [pc, #116]	; (800a3c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d018      	beq.n	800a386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4a1b      	ldr	r2, [pc, #108]	; (800a3c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d013      	beq.n	800a386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4a1a      	ldr	r2, [pc, #104]	; (800a3cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d00e      	beq.n	800a386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4a18      	ldr	r2, [pc, #96]	; (800a3d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d009      	beq.n	800a386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4a17      	ldr	r2, [pc, #92]	; (800a3d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d004      	beq.n	800a386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a15      	ldr	r2, [pc, #84]	; (800a3d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d10c      	bne.n	800a3a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a38c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	68ba      	ldr	r2, [r7, #8]
 800a394:	4313      	orrs	r3, r2
 800a396:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	68ba      	ldr	r2, [r7, #8]
 800a39e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a3b0:	2300      	movs	r3, #0
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3714      	adds	r7, #20
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3bc:	4770      	bx	lr
 800a3be:	bf00      	nop
 800a3c0:	40010000 	.word	0x40010000
 800a3c4:	40000400 	.word	0x40000400
 800a3c8:	40000800 	.word	0x40000800
 800a3cc:	40000c00 	.word	0x40000c00
 800a3d0:	40010400 	.word	0x40010400
 800a3d4:	40014000 	.word	0x40014000
 800a3d8:	40001800 	.word	0x40001800

0800a3dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b085      	sub	sp, #20
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d101      	bne.n	800a3f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a3f4:	2302      	movs	r3, #2
 800a3f6:	e03d      	b.n	800a474 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	68db      	ldr	r3, [r3, #12]
 800a40a:	4313      	orrs	r3, r2
 800a40c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	689b      	ldr	r3, [r3, #8]
 800a418:	4313      	orrs	r3, r2
 800a41a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	4313      	orrs	r3, r2
 800a428:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	4313      	orrs	r3, r2
 800a436:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	691b      	ldr	r3, [r3, #16]
 800a442:	4313      	orrs	r3, r2
 800a444:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	695b      	ldr	r3, [r3, #20]
 800a450:	4313      	orrs	r3, r2
 800a452:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	69db      	ldr	r3, [r3, #28]
 800a45e:	4313      	orrs	r3, r2
 800a460:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	68fa      	ldr	r2, [r7, #12]
 800a468:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2200      	movs	r2, #0
 800a46e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a472:	2300      	movs	r3, #0
}
 800a474:	4618      	mov	r0, r3
 800a476:	3714      	adds	r7, #20
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr

0800a480 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a480:	b480      	push	{r7}
 800a482:	b083      	sub	sp, #12
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a488:	bf00      	nop
 800a48a:	370c      	adds	r7, #12
 800a48c:	46bd      	mov	sp, r7
 800a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a492:	4770      	bx	lr

0800a494 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a494:	b480      	push	{r7}
 800a496:	b083      	sub	sp, #12
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a49c:	bf00      	nop
 800a49e:	370c      	adds	r7, #12
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a6:	4770      	bx	lr

0800a4a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b082      	sub	sp, #8
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d101      	bne.n	800a4ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	e04a      	b.n	800a550 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4c0:	b2db      	uxtb	r3, r3
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d111      	bne.n	800a4ea <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f000 fc6a 	bl	800ada8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d102      	bne.n	800a4e2 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	4a1e      	ldr	r2, [pc, #120]	; (800a558 <HAL_UART_Init+0xb0>)
 800a4e0:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2224      	movs	r2, #36	; 0x24
 800a4ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	68da      	ldr	r2, [r3, #12]
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a500:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f001 f858 	bl	800b5b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	691a      	ldr	r2, [r3, #16]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a516:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	695a      	ldr	r2, [r3, #20]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a526:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	68da      	ldr	r2, [r3, #12]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a536:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2200      	movs	r2, #0
 800a53c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2220      	movs	r2, #32
 800a542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2220      	movs	r2, #32
 800a54a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a54e:	2300      	movs	r3, #0
}
 800a550:	4618      	mov	r0, r3
 800a552:	3708      	adds	r7, #8
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}
 800a558:	08005839 	.word	0x08005839

0800a55c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b08a      	sub	sp, #40	; 0x28
 800a560:	af02      	add	r7, sp, #8
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	60b9      	str	r1, [r7, #8]
 800a566:	603b      	str	r3, [r7, #0]
 800a568:	4613      	mov	r3, r2
 800a56a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a56c:	2300      	movs	r3, #0
 800a56e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a576:	b2db      	uxtb	r3, r3
 800a578:	2b20      	cmp	r3, #32
 800a57a:	d17c      	bne.n	800a676 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d002      	beq.n	800a588 <HAL_UART_Transmit+0x2c>
 800a582:	88fb      	ldrh	r3, [r7, #6]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d101      	bne.n	800a58c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a588:	2301      	movs	r3, #1
 800a58a:	e075      	b.n	800a678 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a592:	2b01      	cmp	r3, #1
 800a594:	d101      	bne.n	800a59a <HAL_UART_Transmit+0x3e>
 800a596:	2302      	movs	r3, #2
 800a598:	e06e      	b.n	800a678 <HAL_UART_Transmit+0x11c>
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	2201      	movs	r2, #1
 800a59e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2221      	movs	r2, #33	; 0x21
 800a5ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a5b0:	f7fb fcdc 	bl	8005f6c <HAL_GetTick>
 800a5b4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	88fa      	ldrh	r2, [r7, #6]
 800a5ba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	88fa      	ldrh	r2, [r7, #6]
 800a5c0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	689b      	ldr	r3, [r3, #8]
 800a5c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5ca:	d108      	bne.n	800a5de <HAL_UART_Transmit+0x82>
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	691b      	ldr	r3, [r3, #16]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d104      	bne.n	800a5de <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	61bb      	str	r3, [r7, #24]
 800a5dc:	e003      	b.n	800a5e6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a5ee:	e02a      	b.n	800a646 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	9300      	str	r3, [sp, #0]
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	2180      	movs	r1, #128	; 0x80
 800a5fa:	68f8      	ldr	r0, [r7, #12]
 800a5fc:	f000 fd09 	bl	800b012 <UART_WaitOnFlagUntilTimeout>
 800a600:	4603      	mov	r3, r0
 800a602:	2b00      	cmp	r3, #0
 800a604:	d001      	beq.n	800a60a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a606:	2303      	movs	r3, #3
 800a608:	e036      	b.n	800a678 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a60a:	69fb      	ldr	r3, [r7, #28]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d10b      	bne.n	800a628 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a610:	69bb      	ldr	r3, [r7, #24]
 800a612:	881b      	ldrh	r3, [r3, #0]
 800a614:	461a      	mov	r2, r3
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a61e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a620:	69bb      	ldr	r3, [r7, #24]
 800a622:	3302      	adds	r3, #2
 800a624:	61bb      	str	r3, [r7, #24]
 800a626:	e007      	b.n	800a638 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a628:	69fb      	ldr	r3, [r7, #28]
 800a62a:	781a      	ldrb	r2, [r3, #0]
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a632:	69fb      	ldr	r3, [r7, #28]
 800a634:	3301      	adds	r3, #1
 800a636:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a63c:	b29b      	uxth	r3, r3
 800a63e:	3b01      	subs	r3, #1
 800a640:	b29a      	uxth	r2, r3
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a64a:	b29b      	uxth	r3, r3
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d1cf      	bne.n	800a5f0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	9300      	str	r3, [sp, #0]
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	2200      	movs	r2, #0
 800a658:	2140      	movs	r1, #64	; 0x40
 800a65a:	68f8      	ldr	r0, [r7, #12]
 800a65c:	f000 fcd9 	bl	800b012 <UART_WaitOnFlagUntilTimeout>
 800a660:	4603      	mov	r3, r0
 800a662:	2b00      	cmp	r3, #0
 800a664:	d001      	beq.n	800a66a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a666:	2303      	movs	r3, #3
 800a668:	e006      	b.n	800a678 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	2220      	movs	r2, #32
 800a66e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a672:	2300      	movs	r3, #0
 800a674:	e000      	b.n	800a678 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a676:	2302      	movs	r3, #2
  }
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3720      	adds	r7, #32
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b084      	sub	sp, #16
 800a684:	af00      	add	r7, sp, #0
 800a686:	60f8      	str	r0, [r7, #12]
 800a688:	60b9      	str	r1, [r7, #8]
 800a68a:	4613      	mov	r3, r2
 800a68c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a694:	b2db      	uxtb	r3, r3
 800a696:	2b20      	cmp	r3, #32
 800a698:	d11d      	bne.n	800a6d6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d002      	beq.n	800a6a6 <HAL_UART_Receive_DMA+0x26>
 800a6a0:	88fb      	ldrh	r3, [r7, #6]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d101      	bne.n	800a6aa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e016      	b.n	800a6d8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6b0:	2b01      	cmp	r3, #1
 800a6b2:	d101      	bne.n	800a6b8 <HAL_UART_Receive_DMA+0x38>
 800a6b4:	2302      	movs	r3, #2
 800a6b6:	e00f      	b.n	800a6d8 <HAL_UART_Receive_DMA+0x58>
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a6c6:	88fb      	ldrh	r3, [r7, #6]
 800a6c8:	461a      	mov	r2, r3
 800a6ca:	68b9      	ldr	r1, [r7, #8]
 800a6cc:	68f8      	ldr	r0, [r7, #12]
 800a6ce:	f000 fd0f 	bl	800b0f0 <UART_Start_Receive_DMA>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	e000      	b.n	800a6d8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a6d6:	2302      	movs	r3, #2
  }
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3710      	adds	r7, #16
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}

0800a6e0 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b090      	sub	sp, #64	; 0x40
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	695b      	ldr	r3, [r3, #20]
 800a6f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6f6:	2b80      	cmp	r3, #128	; 0x80
 800a6f8:	bf0c      	ite	eq
 800a6fa:	2301      	moveq	r3, #1
 800a6fc:	2300      	movne	r3, #0
 800a6fe:	b2db      	uxtb	r3, r3
 800a700:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a708:	b2db      	uxtb	r3, r3
 800a70a:	2b21      	cmp	r3, #33	; 0x21
 800a70c:	d128      	bne.n	800a760 <HAL_UART_DMAStop+0x80>
 800a70e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a710:	2b00      	cmp	r3, #0
 800a712:	d025      	beq.n	800a760 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	3314      	adds	r3, #20
 800a71a:	627b      	str	r3, [r7, #36]	; 0x24
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71e:	e853 3f00 	ldrex	r3, [r3]
 800a722:	623b      	str	r3, [r7, #32]
   return(result);
 800a724:	6a3b      	ldr	r3, [r7, #32]
 800a726:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a72a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	3314      	adds	r3, #20
 800a732:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a734:	633a      	str	r2, [r7, #48]	; 0x30
 800a736:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a738:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a73a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a73c:	e841 2300 	strex	r3, r2, [r1]
 800a740:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a744:	2b00      	cmp	r3, #0
 800a746:	d1e5      	bne.n	800a714 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d004      	beq.n	800a75a <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a754:	4618      	mov	r0, r3
 800a756:	f7fc fa21 	bl	8006b9c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f000 fd66 	bl	800b22c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	695b      	ldr	r3, [r3, #20]
 800a766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a76a:	2b40      	cmp	r3, #64	; 0x40
 800a76c:	bf0c      	ite	eq
 800a76e:	2301      	moveq	r3, #1
 800a770:	2300      	movne	r3, #0
 800a772:	b2db      	uxtb	r3, r3
 800a774:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a77c:	b2db      	uxtb	r3, r3
 800a77e:	2b22      	cmp	r3, #34	; 0x22
 800a780:	d128      	bne.n	800a7d4 <HAL_UART_DMAStop+0xf4>
 800a782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a784:	2b00      	cmp	r3, #0
 800a786:	d025      	beq.n	800a7d4 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	3314      	adds	r3, #20
 800a78e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	e853 3f00 	ldrex	r3, [r3]
 800a796:	60fb      	str	r3, [r7, #12]
   return(result);
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a79e:	637b      	str	r3, [r7, #52]	; 0x34
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	3314      	adds	r3, #20
 800a7a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7a8:	61fa      	str	r2, [r7, #28]
 800a7aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ac:	69b9      	ldr	r1, [r7, #24]
 800a7ae:	69fa      	ldr	r2, [r7, #28]
 800a7b0:	e841 2300 	strex	r3, r2, [r1]
 800a7b4:	617b      	str	r3, [r7, #20]
   return(result);
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d1e5      	bne.n	800a788 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d004      	beq.n	800a7ce <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f7fc f9e7 	bl	8006b9c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f000 fd54 	bl	800b27c <UART_EndRxTransfer>
  }

  return HAL_OK;
 800a7d4:	2300      	movs	r3, #0
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3740      	adds	r7, #64	; 0x40
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}
	...

0800a7e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b0ba      	sub	sp, #232	; 0xe8
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	695b      	ldr	r3, [r3, #20]
 800a802:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a806:	2300      	movs	r3, #0
 800a808:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a80c:	2300      	movs	r3, #0
 800a80e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a816:	f003 030f 	and.w	r3, r3, #15
 800a81a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a81e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a822:	2b00      	cmp	r3, #0
 800a824:	d10f      	bne.n	800a846 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a82a:	f003 0320 	and.w	r3, r3, #32
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d009      	beq.n	800a846 <HAL_UART_IRQHandler+0x66>
 800a832:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a836:	f003 0320 	and.w	r3, r3, #32
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d003      	beq.n	800a846 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 fdfd 	bl	800b43e <UART_Receive_IT>
      return;
 800a844:	e25b      	b.n	800acfe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a846:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	f000 80e1 	beq.w	800aa12 <HAL_UART_IRQHandler+0x232>
 800a850:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a854:	f003 0301 	and.w	r3, r3, #1
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d106      	bne.n	800a86a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a85c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a860:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a864:	2b00      	cmp	r3, #0
 800a866:	f000 80d4 	beq.w	800aa12 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a86a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a86e:	f003 0301 	and.w	r3, r3, #1
 800a872:	2b00      	cmp	r3, #0
 800a874:	d00b      	beq.n	800a88e <HAL_UART_IRQHandler+0xae>
 800a876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a87a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d005      	beq.n	800a88e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a886:	f043 0201 	orr.w	r2, r3, #1
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a88e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a892:	f003 0304 	and.w	r3, r3, #4
 800a896:	2b00      	cmp	r3, #0
 800a898:	d00b      	beq.n	800a8b2 <HAL_UART_IRQHandler+0xd2>
 800a89a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a89e:	f003 0301 	and.w	r3, r3, #1
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d005      	beq.n	800a8b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8aa:	f043 0202 	orr.w	r2, r3, #2
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a8b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8b6:	f003 0302 	and.w	r3, r3, #2
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d00b      	beq.n	800a8d6 <HAL_UART_IRQHandler+0xf6>
 800a8be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a8c2:	f003 0301 	and.w	r3, r3, #1
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d005      	beq.n	800a8d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ce:	f043 0204 	orr.w	r2, r3, #4
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a8d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8da:	f003 0308 	and.w	r3, r3, #8
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d011      	beq.n	800a906 <HAL_UART_IRQHandler+0x126>
 800a8e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8e6:	f003 0320 	and.w	r3, r3, #32
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d105      	bne.n	800a8fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a8ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a8f2:	f003 0301 	and.w	r3, r3, #1
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d005      	beq.n	800a906 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8fe:	f043 0208 	orr.w	r2, r3, #8
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	f000 81f2 	beq.w	800acf4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a914:	f003 0320 	and.w	r3, r3, #32
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d008      	beq.n	800a92e <HAL_UART_IRQHandler+0x14e>
 800a91c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a920:	f003 0320 	and.w	r3, r3, #32
 800a924:	2b00      	cmp	r3, #0
 800a926:	d002      	beq.n	800a92e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 fd88 	bl	800b43e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	695b      	ldr	r3, [r3, #20]
 800a934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a938:	2b40      	cmp	r3, #64	; 0x40
 800a93a:	bf0c      	ite	eq
 800a93c:	2301      	moveq	r3, #1
 800a93e:	2300      	movne	r3, #0
 800a940:	b2db      	uxtb	r3, r3
 800a942:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a94a:	f003 0308 	and.w	r3, r3, #8
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d103      	bne.n	800a95a <HAL_UART_IRQHandler+0x17a>
 800a952:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a956:	2b00      	cmp	r3, #0
 800a958:	d051      	beq.n	800a9fe <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f000 fc8e 	bl	800b27c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	695b      	ldr	r3, [r3, #20]
 800a966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a96a:	2b40      	cmp	r3, #64	; 0x40
 800a96c:	d142      	bne.n	800a9f4 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	3314      	adds	r3, #20
 800a974:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a978:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a97c:	e853 3f00 	ldrex	r3, [r3]
 800a980:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a984:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a988:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a98c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	3314      	adds	r3, #20
 800a996:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a99a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a99e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a9a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a9aa:	e841 2300 	strex	r3, r2, [r1]
 800a9ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a9b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d1d9      	bne.n	800a96e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d013      	beq.n	800a9ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9c6:	4a7f      	ldr	r2, [pc, #508]	; (800abc4 <HAL_UART_IRQHandler+0x3e4>)
 800a9c8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f7fc f954 	bl	8006c7c <HAL_DMA_Abort_IT>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d019      	beq.n	800aa0e <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a9e4:	4610      	mov	r0, r2
 800a9e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9e8:	e011      	b.n	800aa0e <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9f2:	e00c      	b.n	800aa0e <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9fc:	e007      	b.n	800aa0e <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800aa0c:	e172      	b.n	800acf4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa0e:	bf00      	nop
    return;
 800aa10:	e170      	b.n	800acf4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa16:	2b01      	cmp	r3, #1
 800aa18:	f040 814c 	bne.w	800acb4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800aa1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa20:	f003 0310 	and.w	r3, r3, #16
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	f000 8145 	beq.w	800acb4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800aa2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa2e:	f003 0310 	and.w	r3, r3, #16
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	f000 813e 	beq.w	800acb4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aa38:	2300      	movs	r3, #0
 800aa3a:	60bb      	str	r3, [r7, #8]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	60bb      	str	r3, [r7, #8]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	685b      	ldr	r3, [r3, #4]
 800aa4a:	60bb      	str	r3, [r7, #8]
 800aa4c:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	695b      	ldr	r3, [r3, #20]
 800aa54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa58:	2b40      	cmp	r3, #64	; 0x40
 800aa5a:	f040 80b5 	bne.w	800abc8 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800aa6a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	f000 8142 	beq.w	800acf8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aa78:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	f080 813b 	bcs.w	800acf8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aa88:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa8e:	69db      	ldr	r3, [r3, #28]
 800aa90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa94:	f000 8088 	beq.w	800aba8 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	330c      	adds	r3, #12
 800aa9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aaa6:	e853 3f00 	ldrex	r3, [r3]
 800aaaa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800aaae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aab2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aab6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	330c      	adds	r3, #12
 800aac0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800aac4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800aac8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aacc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800aad0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800aad4:	e841 2300 	strex	r3, r2, [r1]
 800aad8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800aadc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d1d9      	bne.n	800aa98 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	3314      	adds	r3, #20
 800aaea:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aaee:	e853 3f00 	ldrex	r3, [r3]
 800aaf2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800aaf4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aaf6:	f023 0301 	bic.w	r3, r3, #1
 800aafa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	3314      	adds	r3, #20
 800ab04:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ab08:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ab0c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab0e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ab10:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ab14:	e841 2300 	strex	r3, r2, [r1]
 800ab18:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ab1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d1e1      	bne.n	800aae4 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	3314      	adds	r3, #20
 800ab26:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ab2a:	e853 3f00 	ldrex	r3, [r3]
 800ab2e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ab30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	3314      	adds	r3, #20
 800ab40:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ab44:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ab46:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab48:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ab4a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ab4c:	e841 2300 	strex	r3, r2, [r1]
 800ab50:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ab52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d1e3      	bne.n	800ab20 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2220      	movs	r2, #32
 800ab5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2200      	movs	r2, #0
 800ab64:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	330c      	adds	r3, #12
 800ab6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab70:	e853 3f00 	ldrex	r3, [r3]
 800ab74:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ab76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab78:	f023 0310 	bic.w	r3, r3, #16
 800ab7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	330c      	adds	r3, #12
 800ab86:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ab8a:	65ba      	str	r2, [r7, #88]	; 0x58
 800ab8c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab8e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ab90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ab92:	e841 2300 	strex	r3, r2, [r1]
 800ab96:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ab98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d1e3      	bne.n	800ab66 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aba2:	4618      	mov	r0, r3
 800aba4:	f7fb fffa 	bl	8006b9c <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800abac:	687a      	ldr	r2, [r7, #4]
 800abae:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800abb4:	b292      	uxth	r2, r2
 800abb6:	1a8a      	subs	r2, r1, r2
 800abb8:	b292      	uxth	r2, r2
 800abba:	4611      	mov	r1, r2
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800abc0:	e09a      	b.n	800acf8 <HAL_UART_IRQHandler+0x518>
 800abc2:	bf00      	nop
 800abc4:	0800b343 	.word	0x0800b343
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	1ad3      	subs	r3, r2, r3
 800abd4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800abdc:	b29b      	uxth	r3, r3
 800abde:	2b00      	cmp	r3, #0
 800abe0:	f000 808c 	beq.w	800acfc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800abe4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800abe8:	2b00      	cmp	r3, #0
 800abea:	f000 8087 	beq.w	800acfc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	330c      	adds	r3, #12
 800abf4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abf8:	e853 3f00 	ldrex	r3, [r3]
 800abfc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800abfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ac04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	330c      	adds	r3, #12
 800ac0e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ac12:	647a      	str	r2, [r7, #68]	; 0x44
 800ac14:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ac18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac1a:	e841 2300 	strex	r3, r2, [r1]
 800ac1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ac20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d1e3      	bne.n	800abee <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	3314      	adds	r3, #20
 800ac2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac30:	e853 3f00 	ldrex	r3, [r3]
 800ac34:	623b      	str	r3, [r7, #32]
   return(result);
 800ac36:	6a3b      	ldr	r3, [r7, #32]
 800ac38:	f023 0301 	bic.w	r3, r3, #1
 800ac3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	3314      	adds	r3, #20
 800ac46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ac4a:	633a      	str	r2, [r7, #48]	; 0x30
 800ac4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac52:	e841 2300 	strex	r3, r2, [r1]
 800ac56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ac58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d1e3      	bne.n	800ac26 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2220      	movs	r2, #32
 800ac62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	330c      	adds	r3, #12
 800ac72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	e853 3f00 	ldrex	r3, [r3]
 800ac7a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f023 0310 	bic.w	r3, r3, #16
 800ac82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	330c      	adds	r3, #12
 800ac8c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ac90:	61fa      	str	r2, [r7, #28]
 800ac92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac94:	69b9      	ldr	r1, [r7, #24]
 800ac96:	69fa      	ldr	r2, [r7, #28]
 800ac98:	e841 2300 	strex	r3, r2, [r1]
 800ac9c:	617b      	str	r3, [r7, #20]
   return(result);
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d1e3      	bne.n	800ac6c <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aca8:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800acac:	4611      	mov	r1, r2
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800acb2:	e023      	b.n	800acfc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800acb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d009      	beq.n	800acd4 <HAL_UART_IRQHandler+0x4f4>
 800acc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d003      	beq.n	800acd4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 fb4d 	bl	800b36c <UART_Transmit_IT>
    return;
 800acd2:	e014      	b.n	800acfe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800acd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d00e      	beq.n	800acfe <HAL_UART_IRQHandler+0x51e>
 800ace0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ace4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d008      	beq.n	800acfe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f000 fb8d 	bl	800b40c <UART_EndTransmit_IT>
    return;
 800acf2:	e004      	b.n	800acfe <HAL_UART_IRQHandler+0x51e>
    return;
 800acf4:	bf00      	nop
 800acf6:	e002      	b.n	800acfe <HAL_UART_IRQHandler+0x51e>
      return;
 800acf8:	bf00      	nop
 800acfa:	e000      	b.n	800acfe <HAL_UART_IRQHandler+0x51e>
      return;
 800acfc:	bf00      	nop
  }
}
 800acfe:	37e8      	adds	r7, #232	; 0xe8
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}

0800ad04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b083      	sub	sp, #12
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ad0c:	bf00      	nop
 800ad0e:	370c      	adds	r7, #12
 800ad10:	46bd      	mov	sp, r7
 800ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad16:	4770      	bx	lr

0800ad18 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b083      	sub	sp, #12
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800ad20:	bf00      	nop
 800ad22:	370c      	adds	r7, #12
 800ad24:	46bd      	mov	sp, r7
 800ad26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2a:	4770      	bx	lr

0800ad2c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b083      	sub	sp, #12
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800ad34:	bf00      	nop
 800ad36:	370c      	adds	r7, #12
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr

0800ad40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ad40:	b480      	push	{r7}
 800ad42:	b083      	sub	sp, #12
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ad48:	bf00      	nop
 800ad4a:	370c      	adds	r7, #12
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr

0800ad54 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b083      	sub	sp, #12
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800ad5c:	bf00      	nop
 800ad5e:	370c      	adds	r7, #12
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr

0800ad68 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b083      	sub	sp, #12
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800ad70:	bf00      	nop
 800ad72:	370c      	adds	r7, #12
 800ad74:	46bd      	mov	sp, r7
 800ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7a:	4770      	bx	lr

0800ad7c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b083      	sub	sp, #12
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800ad84:	bf00      	nop
 800ad86:	370c      	adds	r7, #12
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8e:	4770      	bx	lr

0800ad90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ad90:	b480      	push	{r7}
 800ad92:	b083      	sub	sp, #12
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	460b      	mov	r3, r1
 800ad9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ad9c:	bf00      	nop
 800ad9e:	370c      	adds	r7, #12
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr

0800ada8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b083      	sub	sp, #12
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	4a10      	ldr	r2, [pc, #64]	; (800adf4 <UART_InitCallbacksToDefault+0x4c>)
 800adb4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	4a0f      	ldr	r2, [pc, #60]	; (800adf8 <UART_InitCallbacksToDefault+0x50>)
 800adba:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	4a0f      	ldr	r2, [pc, #60]	; (800adfc <UART_InitCallbacksToDefault+0x54>)
 800adc0:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	4a0e      	ldr	r2, [pc, #56]	; (800ae00 <UART_InitCallbacksToDefault+0x58>)
 800adc6:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	4a0e      	ldr	r2, [pc, #56]	; (800ae04 <UART_InitCallbacksToDefault+0x5c>)
 800adcc:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	4a0d      	ldr	r2, [pc, #52]	; (800ae08 <UART_InitCallbacksToDefault+0x60>)
 800add2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	4a0d      	ldr	r2, [pc, #52]	; (800ae0c <UART_InitCallbacksToDefault+0x64>)
 800add8:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	4a0c      	ldr	r2, [pc, #48]	; (800ae10 <UART_InitCallbacksToDefault+0x68>)
 800adde:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	4a0c      	ldr	r2, [pc, #48]	; (800ae14 <UART_InitCallbacksToDefault+0x6c>)
 800ade4:	669a      	str	r2, [r3, #104]	; 0x68

}
 800ade6:	bf00      	nop
 800ade8:	370c      	adds	r7, #12
 800adea:	46bd      	mov	sp, r7
 800adec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf0:	4770      	bx	lr
 800adf2:	bf00      	nop
 800adf4:	0800ad19 	.word	0x0800ad19
 800adf8:	0800ad05 	.word	0x0800ad05
 800adfc:	0800ad2d 	.word	0x0800ad2d
 800ae00:	08001f3d 	.word	0x08001f3d
 800ae04:	0800ad41 	.word	0x0800ad41
 800ae08:	0800ad55 	.word	0x0800ad55
 800ae0c:	0800ad69 	.word	0x0800ad69
 800ae10:	0800ad7d 	.word	0x0800ad7d
 800ae14:	0800ad91 	.word	0x0800ad91

0800ae18 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b09c      	sub	sp, #112	; 0x70
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae24:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d172      	bne.n	800af1a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800ae34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae36:	2200      	movs	r2, #0
 800ae38:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	330c      	adds	r3, #12
 800ae40:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae44:	e853 3f00 	ldrex	r3, [r3]
 800ae48:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ae4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae50:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	330c      	adds	r3, #12
 800ae58:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ae5a:	65ba      	str	r2, [r7, #88]	; 0x58
 800ae5c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae5e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ae60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ae62:	e841 2300 	strex	r3, r2, [r1]
 800ae66:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ae68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d1e5      	bne.n	800ae3a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	3314      	adds	r3, #20
 800ae74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae78:	e853 3f00 	ldrex	r3, [r3]
 800ae7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ae7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae80:	f023 0301 	bic.w	r3, r3, #1
 800ae84:	667b      	str	r3, [r7, #100]	; 0x64
 800ae86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	3314      	adds	r3, #20
 800ae8c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ae8e:	647a      	str	r2, [r7, #68]	; 0x44
 800ae90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ae94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae96:	e841 2300 	strex	r3, r2, [r1]
 800ae9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ae9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d1e5      	bne.n	800ae6e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	3314      	adds	r3, #20
 800aea8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeac:	e853 3f00 	ldrex	r3, [r3]
 800aeb0:	623b      	str	r3, [r7, #32]
   return(result);
 800aeb2:	6a3b      	ldr	r3, [r7, #32]
 800aeb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aeb8:	663b      	str	r3, [r7, #96]	; 0x60
 800aeba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	3314      	adds	r3, #20
 800aec0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aec2:	633a      	str	r2, [r7, #48]	; 0x30
 800aec4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aec6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aeca:	e841 2300 	strex	r3, r2, [r1]
 800aece:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d1e5      	bne.n	800aea2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800aed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aed8:	2220      	movs	r2, #32
 800aeda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aee2:	2b01      	cmp	r3, #1
 800aee4:	d119      	bne.n	800af1a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	330c      	adds	r3, #12
 800aeec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	e853 3f00 	ldrex	r3, [r3]
 800aef4:	60fb      	str	r3, [r7, #12]
   return(result);
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f023 0310 	bic.w	r3, r3, #16
 800aefc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aefe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	330c      	adds	r3, #12
 800af04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800af06:	61fa      	str	r2, [r7, #28]
 800af08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af0a:	69b9      	ldr	r1, [r7, #24]
 800af0c:	69fa      	ldr	r2, [r7, #28]
 800af0e:	e841 2300 	strex	r3, r2, [r1]
 800af12:	617b      	str	r3, [r7, #20]
   return(result);
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d1e5      	bne.n	800aee6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af1e:	2b01      	cmp	r3, #1
 800af20:	d107      	bne.n	800af32 <UART_DMAReceiveCplt+0x11a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800af22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af26:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800af28:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800af2a:	4611      	mov	r1, r2
 800af2c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800af2e:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800af30:	e003      	b.n	800af3a <UART_DMAReceiveCplt+0x122>
    huart->RxCpltCallback(huart);
 800af32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af36:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800af38:	4798      	blx	r3
}
 800af3a:	bf00      	nop
 800af3c:	3770      	adds	r7, #112	; 0x70
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}

0800af42 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800af42:	b580      	push	{r7, lr}
 800af44:	b084      	sub	sp, #16
 800af46:	af00      	add	r7, sp, #0
 800af48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af4e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af54:	2b01      	cmp	r3, #1
 800af56:	d109      	bne.n	800af6c <UART_DMARxHalfCplt+0x2a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af5c:	68fa      	ldr	r2, [r7, #12]
 800af5e:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800af60:	0852      	lsrs	r2, r2, #1
 800af62:	b292      	uxth	r2, r2
 800af64:	4611      	mov	r1, r2
 800af66:	68f8      	ldr	r0, [r7, #12]
 800af68:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800af6a:	e003      	b.n	800af74 <UART_DMARxHalfCplt+0x32>
    huart->RxHalfCpltCallback(huart);
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af70:	68f8      	ldr	r0, [r7, #12]
 800af72:	4798      	blx	r3
}
 800af74:	bf00      	nop
 800af76:	3710      	adds	r7, #16
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b084      	sub	sp, #16
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800af84:	2300      	movs	r3, #0
 800af86:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af8c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	695b      	ldr	r3, [r3, #20]
 800af94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af98:	2b80      	cmp	r3, #128	; 0x80
 800af9a:	bf0c      	ite	eq
 800af9c:	2301      	moveq	r3, #1
 800af9e:	2300      	movne	r3, #0
 800afa0:	b2db      	uxtb	r3, r3
 800afa2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afaa:	b2db      	uxtb	r3, r3
 800afac:	2b21      	cmp	r3, #33	; 0x21
 800afae:	d108      	bne.n	800afc2 <UART_DMAError+0x46>
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d005      	beq.n	800afc2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	2200      	movs	r2, #0
 800afba:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800afbc:	68b8      	ldr	r0, [r7, #8]
 800afbe:	f000 f935 	bl	800b22c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	695b      	ldr	r3, [r3, #20]
 800afc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afcc:	2b40      	cmp	r3, #64	; 0x40
 800afce:	bf0c      	ite	eq
 800afd0:	2301      	moveq	r3, #1
 800afd2:	2300      	movne	r3, #0
 800afd4:	b2db      	uxtb	r3, r3
 800afd6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800afde:	b2db      	uxtb	r3, r3
 800afe0:	2b22      	cmp	r3, #34	; 0x22
 800afe2:	d108      	bne.n	800aff6 <UART_DMAError+0x7a>
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d005      	beq.n	800aff6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	2200      	movs	r2, #0
 800afee:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800aff0:	68b8      	ldr	r0, [r7, #8]
 800aff2:	f000 f943 	bl	800b27c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800affa:	f043 0210 	orr.w	r2, r3, #16
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b006:	68b8      	ldr	r0, [r7, #8]
 800b008:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b00a:	bf00      	nop
 800b00c:	3710      	adds	r7, #16
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}

0800b012 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b012:	b580      	push	{r7, lr}
 800b014:	b090      	sub	sp, #64	; 0x40
 800b016:	af00      	add	r7, sp, #0
 800b018:	60f8      	str	r0, [r7, #12]
 800b01a:	60b9      	str	r1, [r7, #8]
 800b01c:	603b      	str	r3, [r7, #0]
 800b01e:	4613      	mov	r3, r2
 800b020:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b022:	e050      	b.n	800b0c6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b024:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b02a:	d04c      	beq.n	800b0c6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b02c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d007      	beq.n	800b042 <UART_WaitOnFlagUntilTimeout+0x30>
 800b032:	f7fa ff9b 	bl	8005f6c <HAL_GetTick>
 800b036:	4602      	mov	r2, r0
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	1ad3      	subs	r3, r2, r3
 800b03c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b03e:	429a      	cmp	r2, r3
 800b040:	d241      	bcs.n	800b0c6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	330c      	adds	r3, #12
 800b048:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b04c:	e853 3f00 	ldrex	r3, [r3]
 800b050:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b054:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b058:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	330c      	adds	r3, #12
 800b060:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b062:	637a      	str	r2, [r7, #52]	; 0x34
 800b064:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b066:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b068:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b06a:	e841 2300 	strex	r3, r2, [r1]
 800b06e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b072:	2b00      	cmp	r3, #0
 800b074:	d1e5      	bne.n	800b042 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	3314      	adds	r3, #20
 800b07c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	e853 3f00 	ldrex	r3, [r3]
 800b084:	613b      	str	r3, [r7, #16]
   return(result);
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	f023 0301 	bic.w	r3, r3, #1
 800b08c:	63bb      	str	r3, [r7, #56]	; 0x38
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	3314      	adds	r3, #20
 800b094:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b096:	623a      	str	r2, [r7, #32]
 800b098:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b09a:	69f9      	ldr	r1, [r7, #28]
 800b09c:	6a3a      	ldr	r2, [r7, #32]
 800b09e:	e841 2300 	strex	r3, r2, [r1]
 800b0a2:	61bb      	str	r3, [r7, #24]
   return(result);
 800b0a4:	69bb      	ldr	r3, [r7, #24]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d1e5      	bne.n	800b076 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	2220      	movs	r2, #32
 800b0ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	2220      	movs	r2, #32
 800b0b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b0c2:	2303      	movs	r3, #3
 800b0c4:	e00f      	b.n	800b0e6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	681a      	ldr	r2, [r3, #0]
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	4013      	ands	r3, r2
 800b0d0:	68ba      	ldr	r2, [r7, #8]
 800b0d2:	429a      	cmp	r2, r3
 800b0d4:	bf0c      	ite	eq
 800b0d6:	2301      	moveq	r3, #1
 800b0d8:	2300      	movne	r3, #0
 800b0da:	b2db      	uxtb	r3, r3
 800b0dc:	461a      	mov	r2, r3
 800b0de:	79fb      	ldrb	r3, [r7, #7]
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	d09f      	beq.n	800b024 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b0e4:	2300      	movs	r3, #0
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3740      	adds	r7, #64	; 0x40
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}
	...

0800b0f0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b098      	sub	sp, #96	; 0x60
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	60f8      	str	r0, [r7, #12]
 800b0f8:	60b9      	str	r1, [r7, #8]
 800b0fa:	4613      	mov	r3, r2
 800b0fc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b0fe:	68ba      	ldr	r2, [r7, #8]
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	88fa      	ldrh	r2, [r7, #6]
 800b108:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2200      	movs	r2, #0
 800b10e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	2222      	movs	r2, #34	; 0x22
 800b114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b11c:	4a40      	ldr	r2, [pc, #256]	; (800b220 <UART_Start_Receive_DMA+0x130>)
 800b11e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b124:	4a3f      	ldr	r2, [pc, #252]	; (800b224 <UART_Start_Receive_DMA+0x134>)
 800b126:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b12c:	4a3e      	ldr	r2, [pc, #248]	; (800b228 <UART_Start_Receive_DMA+0x138>)
 800b12e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b134:	2200      	movs	r2, #0
 800b136:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b138:	f107 0308 	add.w	r3, r7, #8
 800b13c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	3304      	adds	r3, #4
 800b148:	4619      	mov	r1, r3
 800b14a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b14c:	681a      	ldr	r2, [r3, #0]
 800b14e:	88fb      	ldrh	r3, [r7, #6]
 800b150:	f7fb fccc 	bl	8006aec <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b154:	2300      	movs	r3, #0
 800b156:	613b      	str	r3, [r7, #16]
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	613b      	str	r3, [r7, #16]
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	685b      	ldr	r3, [r3, #4]
 800b166:	613b      	str	r3, [r7, #16]
 800b168:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	2200      	movs	r2, #0
 800b16e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	691b      	ldr	r3, [r3, #16]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d019      	beq.n	800b1ae <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	330c      	adds	r3, #12
 800b180:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b184:	e853 3f00 	ldrex	r3, [r3]
 800b188:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b18a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b18c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b190:	65bb      	str	r3, [r7, #88]	; 0x58
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	330c      	adds	r3, #12
 800b198:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b19a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b19c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b19e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b1a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b1a2:	e841 2300 	strex	r3, r2, [r1]
 800b1a6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b1a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d1e5      	bne.n	800b17a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	3314      	adds	r3, #20
 800b1b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1b8:	e853 3f00 	ldrex	r3, [r3]
 800b1bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c0:	f043 0301 	orr.w	r3, r3, #1
 800b1c4:	657b      	str	r3, [r7, #84]	; 0x54
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	3314      	adds	r3, #20
 800b1cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b1ce:	63ba      	str	r2, [r7, #56]	; 0x38
 800b1d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b1d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b1d6:	e841 2300 	strex	r3, r2, [r1]
 800b1da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d1e5      	bne.n	800b1ae <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	3314      	adds	r3, #20
 800b1e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ea:	69bb      	ldr	r3, [r7, #24]
 800b1ec:	e853 3f00 	ldrex	r3, [r3]
 800b1f0:	617b      	str	r3, [r7, #20]
   return(result);
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1f8:	653b      	str	r3, [r7, #80]	; 0x50
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	3314      	adds	r3, #20
 800b200:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b202:	627a      	str	r2, [r7, #36]	; 0x24
 800b204:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b206:	6a39      	ldr	r1, [r7, #32]
 800b208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b20a:	e841 2300 	strex	r3, r2, [r1]
 800b20e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b210:	69fb      	ldr	r3, [r7, #28]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d1e5      	bne.n	800b1e2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800b216:	2300      	movs	r3, #0
}
 800b218:	4618      	mov	r0, r3
 800b21a:	3760      	adds	r7, #96	; 0x60
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}
 800b220:	0800ae19 	.word	0x0800ae19
 800b224:	0800af43 	.word	0x0800af43
 800b228:	0800af7d 	.word	0x0800af7d

0800b22c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b089      	sub	sp, #36	; 0x24
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	330c      	adds	r3, #12
 800b23a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	e853 3f00 	ldrex	r3, [r3]
 800b242:	60bb      	str	r3, [r7, #8]
   return(result);
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b24a:	61fb      	str	r3, [r7, #28]
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	330c      	adds	r3, #12
 800b252:	69fa      	ldr	r2, [r7, #28]
 800b254:	61ba      	str	r2, [r7, #24]
 800b256:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b258:	6979      	ldr	r1, [r7, #20]
 800b25a:	69ba      	ldr	r2, [r7, #24]
 800b25c:	e841 2300 	strex	r3, r2, [r1]
 800b260:	613b      	str	r3, [r7, #16]
   return(result);
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d1e5      	bne.n	800b234 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2220      	movs	r2, #32
 800b26c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b270:	bf00      	nop
 800b272:	3724      	adds	r7, #36	; 0x24
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr

0800b27c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b095      	sub	sp, #84	; 0x54
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	330c      	adds	r3, #12
 800b28a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b28c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b28e:	e853 3f00 	ldrex	r3, [r3]
 800b292:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b296:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b29a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	330c      	adds	r3, #12
 800b2a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b2a4:	643a      	str	r2, [r7, #64]	; 0x40
 800b2a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b2aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b2ac:	e841 2300 	strex	r3, r2, [r1]
 800b2b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d1e5      	bne.n	800b284 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	3314      	adds	r3, #20
 800b2be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2c0:	6a3b      	ldr	r3, [r7, #32]
 800b2c2:	e853 3f00 	ldrex	r3, [r3]
 800b2c6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b2c8:	69fb      	ldr	r3, [r7, #28]
 800b2ca:	f023 0301 	bic.w	r3, r3, #1
 800b2ce:	64bb      	str	r3, [r7, #72]	; 0x48
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	3314      	adds	r3, #20
 800b2d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b2da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b2de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2e0:	e841 2300 	strex	r3, r2, [r1]
 800b2e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d1e5      	bne.n	800b2b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2f0:	2b01      	cmp	r3, #1
 800b2f2:	d119      	bne.n	800b328 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	330c      	adds	r3, #12
 800b2fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	e853 3f00 	ldrex	r3, [r3]
 800b302:	60bb      	str	r3, [r7, #8]
   return(result);
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	f023 0310 	bic.w	r3, r3, #16
 800b30a:	647b      	str	r3, [r7, #68]	; 0x44
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	330c      	adds	r3, #12
 800b312:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b314:	61ba      	str	r2, [r7, #24]
 800b316:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b318:	6979      	ldr	r1, [r7, #20]
 800b31a:	69ba      	ldr	r2, [r7, #24]
 800b31c:	e841 2300 	strex	r3, r2, [r1]
 800b320:	613b      	str	r3, [r7, #16]
   return(result);
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d1e5      	bne.n	800b2f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2220      	movs	r2, #32
 800b32c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2200      	movs	r2, #0
 800b334:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b336:	bf00      	nop
 800b338:	3754      	adds	r7, #84	; 0x54
 800b33a:	46bd      	mov	sp, r7
 800b33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b340:	4770      	bx	lr

0800b342 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b342:	b580      	push	{r7, lr}
 800b344:	b084      	sub	sp, #16
 800b346:	af00      	add	r7, sp, #0
 800b348:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b34e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	2200      	movs	r2, #0
 800b354:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2200      	movs	r2, #0
 800b35a:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b360:	68f8      	ldr	r0, [r7, #12]
 800b362:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b364:	bf00      	nop
 800b366:	3710      	adds	r7, #16
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}

0800b36c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b085      	sub	sp, #20
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b37a:	b2db      	uxtb	r3, r3
 800b37c:	2b21      	cmp	r3, #33	; 0x21
 800b37e:	d13e      	bne.n	800b3fe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	689b      	ldr	r3, [r3, #8]
 800b384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b388:	d114      	bne.n	800b3b4 <UART_Transmit_IT+0x48>
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	691b      	ldr	r3, [r3, #16]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d110      	bne.n	800b3b4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6a1b      	ldr	r3, [r3, #32]
 800b396:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	881b      	ldrh	r3, [r3, #0]
 800b39c:	461a      	mov	r2, r3
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b3a6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6a1b      	ldr	r3, [r3, #32]
 800b3ac:	1c9a      	adds	r2, r3, #2
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	621a      	str	r2, [r3, #32]
 800b3b2:	e008      	b.n	800b3c6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6a1b      	ldr	r3, [r3, #32]
 800b3b8:	1c59      	adds	r1, r3, #1
 800b3ba:	687a      	ldr	r2, [r7, #4]
 800b3bc:	6211      	str	r1, [r2, #32]
 800b3be:	781a      	ldrb	r2, [r3, #0]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b3ca:	b29b      	uxth	r3, r3
 800b3cc:	3b01      	subs	r3, #1
 800b3ce:	b29b      	uxth	r3, r3
 800b3d0:	687a      	ldr	r2, [r7, #4]
 800b3d2:	4619      	mov	r1, r3
 800b3d4:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d10f      	bne.n	800b3fa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	68da      	ldr	r2, [r3, #12]
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b3e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	68da      	ldr	r2, [r3, #12]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b3f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	e000      	b.n	800b400 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b3fe:	2302      	movs	r3, #2
  }
}
 800b400:	4618      	mov	r0, r3
 800b402:	3714      	adds	r7, #20
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr

0800b40c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b082      	sub	sp, #8
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	68da      	ldr	r2, [r3, #12]
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b422:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2220      	movs	r2, #32
 800b428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b434:	2300      	movs	r3, #0
}
 800b436:	4618      	mov	r0, r3
 800b438:	3708      	adds	r7, #8
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}

0800b43e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b43e:	b580      	push	{r7, lr}
 800b440:	b08c      	sub	sp, #48	; 0x30
 800b442:	af00      	add	r7, sp, #0
 800b444:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b44c:	b2db      	uxtb	r3, r3
 800b44e:	2b22      	cmp	r3, #34	; 0x22
 800b450:	f040 80ad 	bne.w	800b5ae <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	689b      	ldr	r3, [r3, #8]
 800b458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b45c:	d117      	bne.n	800b48e <UART_Receive_IT+0x50>
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	691b      	ldr	r3, [r3, #16]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d113      	bne.n	800b48e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b466:	2300      	movs	r3, #0
 800b468:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b46e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	685b      	ldr	r3, [r3, #4]
 800b476:	b29b      	uxth	r3, r3
 800b478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b47c:	b29a      	uxth	r2, r3
 800b47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b480:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b486:	1c9a      	adds	r2, r3, #2
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	629a      	str	r2, [r3, #40]	; 0x28
 800b48c:	e026      	b.n	800b4dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b492:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b494:	2300      	movs	r3, #0
 800b496:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	689b      	ldr	r3, [r3, #8]
 800b49c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4a0:	d007      	beq.n	800b4b2 <UART_Receive_IT+0x74>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	689b      	ldr	r3, [r3, #8]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d10a      	bne.n	800b4c0 <UART_Receive_IT+0x82>
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	691b      	ldr	r3, [r3, #16]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d106      	bne.n	800b4c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	b2da      	uxtb	r2, r3
 800b4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4bc:	701a      	strb	r2, [r3, #0]
 800b4be:	e008      	b.n	800b4d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	685b      	ldr	r3, [r3, #4]
 800b4c6:	b2db      	uxtb	r3, r3
 800b4c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4cc:	b2da      	uxtb	r2, r3
 800b4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4d6:	1c5a      	adds	r2, r3, #1
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b4e0:	b29b      	uxth	r3, r3
 800b4e2:	3b01      	subs	r3, #1
 800b4e4:	b29b      	uxth	r3, r3
 800b4e6:	687a      	ldr	r2, [r7, #4]
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d15c      	bne.n	800b5aa <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	68da      	ldr	r2, [r3, #12]
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f022 0220 	bic.w	r2, r2, #32
 800b4fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	68da      	ldr	r2, [r3, #12]
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b50e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	695a      	ldr	r2, [r3, #20]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	f022 0201 	bic.w	r2, r2, #1
 800b51e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2220      	movs	r2, #32
 800b524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b52c:	2b01      	cmp	r3, #1
 800b52e:	d136      	bne.n	800b59e <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2200      	movs	r2, #0
 800b534:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	330c      	adds	r3, #12
 800b53c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	e853 3f00 	ldrex	r3, [r3]
 800b544:	613b      	str	r3, [r7, #16]
   return(result);
 800b546:	693b      	ldr	r3, [r7, #16]
 800b548:	f023 0310 	bic.w	r3, r3, #16
 800b54c:	627b      	str	r3, [r7, #36]	; 0x24
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	330c      	adds	r3, #12
 800b554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b556:	623a      	str	r2, [r7, #32]
 800b558:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b55a:	69f9      	ldr	r1, [r7, #28]
 800b55c:	6a3a      	ldr	r2, [r7, #32]
 800b55e:	e841 2300 	strex	r3, r2, [r1]
 800b562:	61bb      	str	r3, [r7, #24]
   return(result);
 800b564:	69bb      	ldr	r3, [r7, #24]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d1e5      	bne.n	800b536 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f003 0310 	and.w	r3, r3, #16
 800b574:	2b10      	cmp	r3, #16
 800b576:	d10a      	bne.n	800b58e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b578:	2300      	movs	r3, #0
 800b57a:	60fb      	str	r3, [r7, #12]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	60fb      	str	r3, [r7, #12]
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	60fb      	str	r3, [r7, #12]
 800b58c:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b592:	687a      	ldr	r2, [r7, #4]
 800b594:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800b596:	4611      	mov	r1, r2
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	4798      	blx	r3
 800b59c:	e003      	b.n	800b5a6 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	e002      	b.n	800b5b0 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	e000      	b.n	800b5b0 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800b5ae:	2302      	movs	r3, #2
  }
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3730      	adds	r7, #48	; 0x30
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}

0800b5b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b5b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b5bc:	b0c0      	sub	sp, #256	; 0x100
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b5c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	691b      	ldr	r3, [r3, #16]
 800b5cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b5d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5d4:	68d9      	ldr	r1, [r3, #12]
 800b5d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5da:	681a      	ldr	r2, [r3, #0]
 800b5dc:	ea40 0301 	orr.w	r3, r0, r1
 800b5e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b5e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5e6:	689a      	ldr	r2, [r3, #8]
 800b5e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5ec:	691b      	ldr	r3, [r3, #16]
 800b5ee:	431a      	orrs	r2, r3
 800b5f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5f4:	695b      	ldr	r3, [r3, #20]
 800b5f6:	431a      	orrs	r2, r3
 800b5f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5fc:	69db      	ldr	r3, [r3, #28]
 800b5fe:	4313      	orrs	r3, r2
 800b600:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	68db      	ldr	r3, [r3, #12]
 800b60c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b610:	f021 010c 	bic.w	r1, r1, #12
 800b614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b618:	681a      	ldr	r2, [r3, #0]
 800b61a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b61e:	430b      	orrs	r3, r1
 800b620:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	695b      	ldr	r3, [r3, #20]
 800b62a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b62e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b632:	6999      	ldr	r1, [r3, #24]
 800b634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b638:	681a      	ldr	r2, [r3, #0]
 800b63a:	ea40 0301 	orr.w	r3, r0, r1
 800b63e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b644:	681a      	ldr	r2, [r3, #0]
 800b646:	4b8f      	ldr	r3, [pc, #572]	; (800b884 <UART_SetConfig+0x2cc>)
 800b648:	429a      	cmp	r2, r3
 800b64a:	d005      	beq.n	800b658 <UART_SetConfig+0xa0>
 800b64c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b650:	681a      	ldr	r2, [r3, #0]
 800b652:	4b8d      	ldr	r3, [pc, #564]	; (800b888 <UART_SetConfig+0x2d0>)
 800b654:	429a      	cmp	r2, r3
 800b656:	d104      	bne.n	800b662 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b658:	f7fd fd1e 	bl	8009098 <HAL_RCC_GetPCLK2Freq>
 800b65c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b660:	e003      	b.n	800b66a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b662:	f7fd fd05 	bl	8009070 <HAL_RCC_GetPCLK1Freq>
 800b666:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b66a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b66e:	69db      	ldr	r3, [r3, #28]
 800b670:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b674:	f040 810c 	bne.w	800b890 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b678:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b67c:	2200      	movs	r2, #0
 800b67e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b682:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b686:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b68a:	4622      	mov	r2, r4
 800b68c:	462b      	mov	r3, r5
 800b68e:	1891      	adds	r1, r2, r2
 800b690:	65b9      	str	r1, [r7, #88]	; 0x58
 800b692:	415b      	adcs	r3, r3
 800b694:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b696:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b69a:	4621      	mov	r1, r4
 800b69c:	eb12 0801 	adds.w	r8, r2, r1
 800b6a0:	4629      	mov	r1, r5
 800b6a2:	eb43 0901 	adc.w	r9, r3, r1
 800b6a6:	f04f 0200 	mov.w	r2, #0
 800b6aa:	f04f 0300 	mov.w	r3, #0
 800b6ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b6b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b6b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b6ba:	4690      	mov	r8, r2
 800b6bc:	4699      	mov	r9, r3
 800b6be:	4623      	mov	r3, r4
 800b6c0:	eb18 0303 	adds.w	r3, r8, r3
 800b6c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b6c8:	462b      	mov	r3, r5
 800b6ca:	eb49 0303 	adc.w	r3, r9, r3
 800b6ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b6d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6d6:	685b      	ldr	r3, [r3, #4]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b6de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b6e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b6e6:	460b      	mov	r3, r1
 800b6e8:	18db      	adds	r3, r3, r3
 800b6ea:	653b      	str	r3, [r7, #80]	; 0x50
 800b6ec:	4613      	mov	r3, r2
 800b6ee:	eb42 0303 	adc.w	r3, r2, r3
 800b6f2:	657b      	str	r3, [r7, #84]	; 0x54
 800b6f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b6f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b6fc:	f7f5 fac4 	bl	8000c88 <__aeabi_uldivmod>
 800b700:	4602      	mov	r2, r0
 800b702:	460b      	mov	r3, r1
 800b704:	4b61      	ldr	r3, [pc, #388]	; (800b88c <UART_SetConfig+0x2d4>)
 800b706:	fba3 2302 	umull	r2, r3, r3, r2
 800b70a:	095b      	lsrs	r3, r3, #5
 800b70c:	011c      	lsls	r4, r3, #4
 800b70e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b712:	2200      	movs	r2, #0
 800b714:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b718:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b71c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b720:	4642      	mov	r2, r8
 800b722:	464b      	mov	r3, r9
 800b724:	1891      	adds	r1, r2, r2
 800b726:	64b9      	str	r1, [r7, #72]	; 0x48
 800b728:	415b      	adcs	r3, r3
 800b72a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b72c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b730:	4641      	mov	r1, r8
 800b732:	eb12 0a01 	adds.w	sl, r2, r1
 800b736:	4649      	mov	r1, r9
 800b738:	eb43 0b01 	adc.w	fp, r3, r1
 800b73c:	f04f 0200 	mov.w	r2, #0
 800b740:	f04f 0300 	mov.w	r3, #0
 800b744:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b748:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b74c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b750:	4692      	mov	sl, r2
 800b752:	469b      	mov	fp, r3
 800b754:	4643      	mov	r3, r8
 800b756:	eb1a 0303 	adds.w	r3, sl, r3
 800b75a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b75e:	464b      	mov	r3, r9
 800b760:	eb4b 0303 	adc.w	r3, fp, r3
 800b764:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b76c:	685b      	ldr	r3, [r3, #4]
 800b76e:	2200      	movs	r2, #0
 800b770:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b774:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b778:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b77c:	460b      	mov	r3, r1
 800b77e:	18db      	adds	r3, r3, r3
 800b780:	643b      	str	r3, [r7, #64]	; 0x40
 800b782:	4613      	mov	r3, r2
 800b784:	eb42 0303 	adc.w	r3, r2, r3
 800b788:	647b      	str	r3, [r7, #68]	; 0x44
 800b78a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b78e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b792:	f7f5 fa79 	bl	8000c88 <__aeabi_uldivmod>
 800b796:	4602      	mov	r2, r0
 800b798:	460b      	mov	r3, r1
 800b79a:	4611      	mov	r1, r2
 800b79c:	4b3b      	ldr	r3, [pc, #236]	; (800b88c <UART_SetConfig+0x2d4>)
 800b79e:	fba3 2301 	umull	r2, r3, r3, r1
 800b7a2:	095b      	lsrs	r3, r3, #5
 800b7a4:	2264      	movs	r2, #100	; 0x64
 800b7a6:	fb02 f303 	mul.w	r3, r2, r3
 800b7aa:	1acb      	subs	r3, r1, r3
 800b7ac:	00db      	lsls	r3, r3, #3
 800b7ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b7b2:	4b36      	ldr	r3, [pc, #216]	; (800b88c <UART_SetConfig+0x2d4>)
 800b7b4:	fba3 2302 	umull	r2, r3, r3, r2
 800b7b8:	095b      	lsrs	r3, r3, #5
 800b7ba:	005b      	lsls	r3, r3, #1
 800b7bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b7c0:	441c      	add	r4, r3
 800b7c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b7cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b7d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b7d4:	4642      	mov	r2, r8
 800b7d6:	464b      	mov	r3, r9
 800b7d8:	1891      	adds	r1, r2, r2
 800b7da:	63b9      	str	r1, [r7, #56]	; 0x38
 800b7dc:	415b      	adcs	r3, r3
 800b7de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b7e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b7e4:	4641      	mov	r1, r8
 800b7e6:	1851      	adds	r1, r2, r1
 800b7e8:	6339      	str	r1, [r7, #48]	; 0x30
 800b7ea:	4649      	mov	r1, r9
 800b7ec:	414b      	adcs	r3, r1
 800b7ee:	637b      	str	r3, [r7, #52]	; 0x34
 800b7f0:	f04f 0200 	mov.w	r2, #0
 800b7f4:	f04f 0300 	mov.w	r3, #0
 800b7f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b7fc:	4659      	mov	r1, fp
 800b7fe:	00cb      	lsls	r3, r1, #3
 800b800:	4651      	mov	r1, sl
 800b802:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b806:	4651      	mov	r1, sl
 800b808:	00ca      	lsls	r2, r1, #3
 800b80a:	4610      	mov	r0, r2
 800b80c:	4619      	mov	r1, r3
 800b80e:	4603      	mov	r3, r0
 800b810:	4642      	mov	r2, r8
 800b812:	189b      	adds	r3, r3, r2
 800b814:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b818:	464b      	mov	r3, r9
 800b81a:	460a      	mov	r2, r1
 800b81c:	eb42 0303 	adc.w	r3, r2, r3
 800b820:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b828:	685b      	ldr	r3, [r3, #4]
 800b82a:	2200      	movs	r2, #0
 800b82c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b830:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b834:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b838:	460b      	mov	r3, r1
 800b83a:	18db      	adds	r3, r3, r3
 800b83c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b83e:	4613      	mov	r3, r2
 800b840:	eb42 0303 	adc.w	r3, r2, r3
 800b844:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b846:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b84a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b84e:	f7f5 fa1b 	bl	8000c88 <__aeabi_uldivmod>
 800b852:	4602      	mov	r2, r0
 800b854:	460b      	mov	r3, r1
 800b856:	4b0d      	ldr	r3, [pc, #52]	; (800b88c <UART_SetConfig+0x2d4>)
 800b858:	fba3 1302 	umull	r1, r3, r3, r2
 800b85c:	095b      	lsrs	r3, r3, #5
 800b85e:	2164      	movs	r1, #100	; 0x64
 800b860:	fb01 f303 	mul.w	r3, r1, r3
 800b864:	1ad3      	subs	r3, r2, r3
 800b866:	00db      	lsls	r3, r3, #3
 800b868:	3332      	adds	r3, #50	; 0x32
 800b86a:	4a08      	ldr	r2, [pc, #32]	; (800b88c <UART_SetConfig+0x2d4>)
 800b86c:	fba2 2303 	umull	r2, r3, r2, r3
 800b870:	095b      	lsrs	r3, r3, #5
 800b872:	f003 0207 	and.w	r2, r3, #7
 800b876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	4422      	add	r2, r4
 800b87e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b880:	e105      	b.n	800ba8e <UART_SetConfig+0x4d6>
 800b882:	bf00      	nop
 800b884:	40011000 	.word	0x40011000
 800b888:	40011400 	.word	0x40011400
 800b88c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b890:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b894:	2200      	movs	r2, #0
 800b896:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b89a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b89e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b8a2:	4642      	mov	r2, r8
 800b8a4:	464b      	mov	r3, r9
 800b8a6:	1891      	adds	r1, r2, r2
 800b8a8:	6239      	str	r1, [r7, #32]
 800b8aa:	415b      	adcs	r3, r3
 800b8ac:	627b      	str	r3, [r7, #36]	; 0x24
 800b8ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b8b2:	4641      	mov	r1, r8
 800b8b4:	1854      	adds	r4, r2, r1
 800b8b6:	4649      	mov	r1, r9
 800b8b8:	eb43 0501 	adc.w	r5, r3, r1
 800b8bc:	f04f 0200 	mov.w	r2, #0
 800b8c0:	f04f 0300 	mov.w	r3, #0
 800b8c4:	00eb      	lsls	r3, r5, #3
 800b8c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b8ca:	00e2      	lsls	r2, r4, #3
 800b8cc:	4614      	mov	r4, r2
 800b8ce:	461d      	mov	r5, r3
 800b8d0:	4643      	mov	r3, r8
 800b8d2:	18e3      	adds	r3, r4, r3
 800b8d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b8d8:	464b      	mov	r3, r9
 800b8da:	eb45 0303 	adc.w	r3, r5, r3
 800b8de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b8e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8e6:	685b      	ldr	r3, [r3, #4]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b8ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b8f2:	f04f 0200 	mov.w	r2, #0
 800b8f6:	f04f 0300 	mov.w	r3, #0
 800b8fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b8fe:	4629      	mov	r1, r5
 800b900:	008b      	lsls	r3, r1, #2
 800b902:	4621      	mov	r1, r4
 800b904:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b908:	4621      	mov	r1, r4
 800b90a:	008a      	lsls	r2, r1, #2
 800b90c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b910:	f7f5 f9ba 	bl	8000c88 <__aeabi_uldivmod>
 800b914:	4602      	mov	r2, r0
 800b916:	460b      	mov	r3, r1
 800b918:	4b60      	ldr	r3, [pc, #384]	; (800ba9c <UART_SetConfig+0x4e4>)
 800b91a:	fba3 2302 	umull	r2, r3, r3, r2
 800b91e:	095b      	lsrs	r3, r3, #5
 800b920:	011c      	lsls	r4, r3, #4
 800b922:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b926:	2200      	movs	r2, #0
 800b928:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b92c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b930:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b934:	4642      	mov	r2, r8
 800b936:	464b      	mov	r3, r9
 800b938:	1891      	adds	r1, r2, r2
 800b93a:	61b9      	str	r1, [r7, #24]
 800b93c:	415b      	adcs	r3, r3
 800b93e:	61fb      	str	r3, [r7, #28]
 800b940:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b944:	4641      	mov	r1, r8
 800b946:	1851      	adds	r1, r2, r1
 800b948:	6139      	str	r1, [r7, #16]
 800b94a:	4649      	mov	r1, r9
 800b94c:	414b      	adcs	r3, r1
 800b94e:	617b      	str	r3, [r7, #20]
 800b950:	f04f 0200 	mov.w	r2, #0
 800b954:	f04f 0300 	mov.w	r3, #0
 800b958:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b95c:	4659      	mov	r1, fp
 800b95e:	00cb      	lsls	r3, r1, #3
 800b960:	4651      	mov	r1, sl
 800b962:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b966:	4651      	mov	r1, sl
 800b968:	00ca      	lsls	r2, r1, #3
 800b96a:	4610      	mov	r0, r2
 800b96c:	4619      	mov	r1, r3
 800b96e:	4603      	mov	r3, r0
 800b970:	4642      	mov	r2, r8
 800b972:	189b      	adds	r3, r3, r2
 800b974:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b978:	464b      	mov	r3, r9
 800b97a:	460a      	mov	r2, r1
 800b97c:	eb42 0303 	adc.w	r3, r2, r3
 800b980:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b988:	685b      	ldr	r3, [r3, #4]
 800b98a:	2200      	movs	r2, #0
 800b98c:	67bb      	str	r3, [r7, #120]	; 0x78
 800b98e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b990:	f04f 0200 	mov.w	r2, #0
 800b994:	f04f 0300 	mov.w	r3, #0
 800b998:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b99c:	4649      	mov	r1, r9
 800b99e:	008b      	lsls	r3, r1, #2
 800b9a0:	4641      	mov	r1, r8
 800b9a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b9a6:	4641      	mov	r1, r8
 800b9a8:	008a      	lsls	r2, r1, #2
 800b9aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b9ae:	f7f5 f96b 	bl	8000c88 <__aeabi_uldivmod>
 800b9b2:	4602      	mov	r2, r0
 800b9b4:	460b      	mov	r3, r1
 800b9b6:	4b39      	ldr	r3, [pc, #228]	; (800ba9c <UART_SetConfig+0x4e4>)
 800b9b8:	fba3 1302 	umull	r1, r3, r3, r2
 800b9bc:	095b      	lsrs	r3, r3, #5
 800b9be:	2164      	movs	r1, #100	; 0x64
 800b9c0:	fb01 f303 	mul.w	r3, r1, r3
 800b9c4:	1ad3      	subs	r3, r2, r3
 800b9c6:	011b      	lsls	r3, r3, #4
 800b9c8:	3332      	adds	r3, #50	; 0x32
 800b9ca:	4a34      	ldr	r2, [pc, #208]	; (800ba9c <UART_SetConfig+0x4e4>)
 800b9cc:	fba2 2303 	umull	r2, r3, r2, r3
 800b9d0:	095b      	lsrs	r3, r3, #5
 800b9d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b9d6:	441c      	add	r4, r3
 800b9d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b9dc:	2200      	movs	r2, #0
 800b9de:	673b      	str	r3, [r7, #112]	; 0x70
 800b9e0:	677a      	str	r2, [r7, #116]	; 0x74
 800b9e2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b9e6:	4642      	mov	r2, r8
 800b9e8:	464b      	mov	r3, r9
 800b9ea:	1891      	adds	r1, r2, r2
 800b9ec:	60b9      	str	r1, [r7, #8]
 800b9ee:	415b      	adcs	r3, r3
 800b9f0:	60fb      	str	r3, [r7, #12]
 800b9f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b9f6:	4641      	mov	r1, r8
 800b9f8:	1851      	adds	r1, r2, r1
 800b9fa:	6039      	str	r1, [r7, #0]
 800b9fc:	4649      	mov	r1, r9
 800b9fe:	414b      	adcs	r3, r1
 800ba00:	607b      	str	r3, [r7, #4]
 800ba02:	f04f 0200 	mov.w	r2, #0
 800ba06:	f04f 0300 	mov.w	r3, #0
 800ba0a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ba0e:	4659      	mov	r1, fp
 800ba10:	00cb      	lsls	r3, r1, #3
 800ba12:	4651      	mov	r1, sl
 800ba14:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ba18:	4651      	mov	r1, sl
 800ba1a:	00ca      	lsls	r2, r1, #3
 800ba1c:	4610      	mov	r0, r2
 800ba1e:	4619      	mov	r1, r3
 800ba20:	4603      	mov	r3, r0
 800ba22:	4642      	mov	r2, r8
 800ba24:	189b      	adds	r3, r3, r2
 800ba26:	66bb      	str	r3, [r7, #104]	; 0x68
 800ba28:	464b      	mov	r3, r9
 800ba2a:	460a      	mov	r2, r1
 800ba2c:	eb42 0303 	adc.w	r3, r2, r3
 800ba30:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ba32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	663b      	str	r3, [r7, #96]	; 0x60
 800ba3c:	667a      	str	r2, [r7, #100]	; 0x64
 800ba3e:	f04f 0200 	mov.w	r2, #0
 800ba42:	f04f 0300 	mov.w	r3, #0
 800ba46:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ba4a:	4649      	mov	r1, r9
 800ba4c:	008b      	lsls	r3, r1, #2
 800ba4e:	4641      	mov	r1, r8
 800ba50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ba54:	4641      	mov	r1, r8
 800ba56:	008a      	lsls	r2, r1, #2
 800ba58:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ba5c:	f7f5 f914 	bl	8000c88 <__aeabi_uldivmod>
 800ba60:	4602      	mov	r2, r0
 800ba62:	460b      	mov	r3, r1
 800ba64:	4b0d      	ldr	r3, [pc, #52]	; (800ba9c <UART_SetConfig+0x4e4>)
 800ba66:	fba3 1302 	umull	r1, r3, r3, r2
 800ba6a:	095b      	lsrs	r3, r3, #5
 800ba6c:	2164      	movs	r1, #100	; 0x64
 800ba6e:	fb01 f303 	mul.w	r3, r1, r3
 800ba72:	1ad3      	subs	r3, r2, r3
 800ba74:	011b      	lsls	r3, r3, #4
 800ba76:	3332      	adds	r3, #50	; 0x32
 800ba78:	4a08      	ldr	r2, [pc, #32]	; (800ba9c <UART_SetConfig+0x4e4>)
 800ba7a:	fba2 2303 	umull	r2, r3, r2, r3
 800ba7e:	095b      	lsrs	r3, r3, #5
 800ba80:	f003 020f 	and.w	r2, r3, #15
 800ba84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	4422      	add	r2, r4
 800ba8c:	609a      	str	r2, [r3, #8]
}
 800ba8e:	bf00      	nop
 800ba90:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ba94:	46bd      	mov	sp, r7
 800ba96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ba9a:	bf00      	nop
 800ba9c:	51eb851f 	.word	0x51eb851f

0800baa0 <__NVIC_SetPriority>:
{
 800baa0:	b480      	push	{r7}
 800baa2:	b083      	sub	sp, #12
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	4603      	mov	r3, r0
 800baa8:	6039      	str	r1, [r7, #0]
 800baaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800baac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	db0a      	blt.n	800baca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	b2da      	uxtb	r2, r3
 800bab8:	490c      	ldr	r1, [pc, #48]	; (800baec <__NVIC_SetPriority+0x4c>)
 800baba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800babe:	0112      	lsls	r2, r2, #4
 800bac0:	b2d2      	uxtb	r2, r2
 800bac2:	440b      	add	r3, r1
 800bac4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800bac8:	e00a      	b.n	800bae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	b2da      	uxtb	r2, r3
 800bace:	4908      	ldr	r1, [pc, #32]	; (800baf0 <__NVIC_SetPriority+0x50>)
 800bad0:	79fb      	ldrb	r3, [r7, #7]
 800bad2:	f003 030f 	and.w	r3, r3, #15
 800bad6:	3b04      	subs	r3, #4
 800bad8:	0112      	lsls	r2, r2, #4
 800bada:	b2d2      	uxtb	r2, r2
 800badc:	440b      	add	r3, r1
 800bade:	761a      	strb	r2, [r3, #24]
}
 800bae0:	bf00      	nop
 800bae2:	370c      	adds	r7, #12
 800bae4:	46bd      	mov	sp, r7
 800bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baea:	4770      	bx	lr
 800baec:	e000e100 	.word	0xe000e100
 800baf0:	e000ed00 	.word	0xe000ed00

0800baf4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800baf4:	b580      	push	{r7, lr}
 800baf6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800baf8:	4b05      	ldr	r3, [pc, #20]	; (800bb10 <SysTick_Handler+0x1c>)
 800bafa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bafc:	f001 ff38 	bl	800d970 <xTaskGetSchedulerState>
 800bb00:	4603      	mov	r3, r0
 800bb02:	2b01      	cmp	r3, #1
 800bb04:	d001      	beq.n	800bb0a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bb06:	f002 fd1f 	bl	800e548 <xPortSysTickHandler>
  }
}
 800bb0a:	bf00      	nop
 800bb0c:	bd80      	pop	{r7, pc}
 800bb0e:	bf00      	nop
 800bb10:	e000e010 	.word	0xe000e010

0800bb14 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bb14:	b580      	push	{r7, lr}
 800bb16:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bb18:	2100      	movs	r1, #0
 800bb1a:	f06f 0004 	mvn.w	r0, #4
 800bb1e:	f7ff ffbf 	bl	800baa0 <__NVIC_SetPriority>
#endif
}
 800bb22:	bf00      	nop
 800bb24:	bd80      	pop	{r7, pc}
	...

0800bb28 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bb28:	b480      	push	{r7}
 800bb2a:	b083      	sub	sp, #12
 800bb2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb2e:	f3ef 8305 	mrs	r3, IPSR
 800bb32:	603b      	str	r3, [r7, #0]
  return(result);
 800bb34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d003      	beq.n	800bb42 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bb3a:	f06f 0305 	mvn.w	r3, #5
 800bb3e:	607b      	str	r3, [r7, #4]
 800bb40:	e00c      	b.n	800bb5c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bb42:	4b0a      	ldr	r3, [pc, #40]	; (800bb6c <osKernelInitialize+0x44>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d105      	bne.n	800bb56 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bb4a:	4b08      	ldr	r3, [pc, #32]	; (800bb6c <osKernelInitialize+0x44>)
 800bb4c:	2201      	movs	r2, #1
 800bb4e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bb50:	2300      	movs	r3, #0
 800bb52:	607b      	str	r3, [r7, #4]
 800bb54:	e002      	b.n	800bb5c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bb56:	f04f 33ff 	mov.w	r3, #4294967295
 800bb5a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bb5c:	687b      	ldr	r3, [r7, #4]
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	370c      	adds	r7, #12
 800bb62:	46bd      	mov	sp, r7
 800bb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb68:	4770      	bx	lr
 800bb6a:	bf00      	nop
 800bb6c:	20000c98 	.word	0x20000c98

0800bb70 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b082      	sub	sp, #8
 800bb74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb76:	f3ef 8305 	mrs	r3, IPSR
 800bb7a:	603b      	str	r3, [r7, #0]
  return(result);
 800bb7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d003      	beq.n	800bb8a <osKernelStart+0x1a>
    stat = osErrorISR;
 800bb82:	f06f 0305 	mvn.w	r3, #5
 800bb86:	607b      	str	r3, [r7, #4]
 800bb88:	e010      	b.n	800bbac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bb8a:	4b0b      	ldr	r3, [pc, #44]	; (800bbb8 <osKernelStart+0x48>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	2b01      	cmp	r3, #1
 800bb90:	d109      	bne.n	800bba6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bb92:	f7ff ffbf 	bl	800bb14 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bb96:	4b08      	ldr	r3, [pc, #32]	; (800bbb8 <osKernelStart+0x48>)
 800bb98:	2202      	movs	r2, #2
 800bb9a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bb9c:	f001 fac4 	bl	800d128 <vTaskStartScheduler>
      stat = osOK;
 800bba0:	2300      	movs	r3, #0
 800bba2:	607b      	str	r3, [r7, #4]
 800bba4:	e002      	b.n	800bbac <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bba6:	f04f 33ff 	mov.w	r3, #4294967295
 800bbaa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bbac:	687b      	ldr	r3, [r7, #4]
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3708      	adds	r7, #8
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}
 800bbb6:	bf00      	nop
 800bbb8:	20000c98 	.word	0x20000c98

0800bbbc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b08e      	sub	sp, #56	; 0x38
 800bbc0:	af04      	add	r7, sp, #16
 800bbc2:	60f8      	str	r0, [r7, #12]
 800bbc4:	60b9      	str	r1, [r7, #8]
 800bbc6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bbcc:	f3ef 8305 	mrs	r3, IPSR
 800bbd0:	617b      	str	r3, [r7, #20]
  return(result);
 800bbd2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d17f      	bne.n	800bcd8 <osThreadNew+0x11c>
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d07c      	beq.n	800bcd8 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800bbde:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bbe2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bbe4:	2318      	movs	r3, #24
 800bbe6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800bbec:	f04f 33ff 	mov.w	r3, #4294967295
 800bbf0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d045      	beq.n	800bc84 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d002      	beq.n	800bc06 <osThreadNew+0x4a>
        name = attr->name;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	699b      	ldr	r3, [r3, #24]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d002      	beq.n	800bc14 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	699b      	ldr	r3, [r3, #24]
 800bc12:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bc14:	69fb      	ldr	r3, [r7, #28]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d008      	beq.n	800bc2c <osThreadNew+0x70>
 800bc1a:	69fb      	ldr	r3, [r7, #28]
 800bc1c:	2b38      	cmp	r3, #56	; 0x38
 800bc1e:	d805      	bhi.n	800bc2c <osThreadNew+0x70>
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	685b      	ldr	r3, [r3, #4]
 800bc24:	f003 0301 	and.w	r3, r3, #1
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d001      	beq.n	800bc30 <osThreadNew+0x74>
        return (NULL);
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	e054      	b.n	800bcda <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	695b      	ldr	r3, [r3, #20]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d003      	beq.n	800bc40 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	695b      	ldr	r3, [r3, #20]
 800bc3c:	089b      	lsrs	r3, r3, #2
 800bc3e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	689b      	ldr	r3, [r3, #8]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d00e      	beq.n	800bc66 <osThreadNew+0xaa>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	68db      	ldr	r3, [r3, #12]
 800bc4c:	2bbb      	cmp	r3, #187	; 0xbb
 800bc4e:	d90a      	bls.n	800bc66 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d006      	beq.n	800bc66 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	695b      	ldr	r3, [r3, #20]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d002      	beq.n	800bc66 <osThreadNew+0xaa>
        mem = 1;
 800bc60:	2301      	movs	r3, #1
 800bc62:	61bb      	str	r3, [r7, #24]
 800bc64:	e010      	b.n	800bc88 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	689b      	ldr	r3, [r3, #8]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d10c      	bne.n	800bc88 <osThreadNew+0xcc>
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	68db      	ldr	r3, [r3, #12]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d108      	bne.n	800bc88 <osThreadNew+0xcc>
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	691b      	ldr	r3, [r3, #16]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d104      	bne.n	800bc88 <osThreadNew+0xcc>
          mem = 0;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	61bb      	str	r3, [r7, #24]
 800bc82:	e001      	b.n	800bc88 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800bc84:	2300      	movs	r3, #0
 800bc86:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bc88:	69bb      	ldr	r3, [r7, #24]
 800bc8a:	2b01      	cmp	r3, #1
 800bc8c:	d110      	bne.n	800bcb0 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bc92:	687a      	ldr	r2, [r7, #4]
 800bc94:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bc96:	9202      	str	r2, [sp, #8]
 800bc98:	9301      	str	r3, [sp, #4]
 800bc9a:	69fb      	ldr	r3, [r7, #28]
 800bc9c:	9300      	str	r3, [sp, #0]
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	6a3a      	ldr	r2, [r7, #32]
 800bca2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bca4:	68f8      	ldr	r0, [r7, #12]
 800bca6:	f001 f863 	bl	800cd70 <xTaskCreateStatic>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	613b      	str	r3, [r7, #16]
 800bcae:	e013      	b.n	800bcd8 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800bcb0:	69bb      	ldr	r3, [r7, #24]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d110      	bne.n	800bcd8 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bcb6:	6a3b      	ldr	r3, [r7, #32]
 800bcb8:	b29a      	uxth	r2, r3
 800bcba:	f107 0310 	add.w	r3, r7, #16
 800bcbe:	9301      	str	r3, [sp, #4]
 800bcc0:	69fb      	ldr	r3, [r7, #28]
 800bcc2:	9300      	str	r3, [sp, #0]
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bcc8:	68f8      	ldr	r0, [r7, #12]
 800bcca:	f001 f8ae 	bl	800ce2a <xTaskCreate>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	2b01      	cmp	r3, #1
 800bcd2:	d001      	beq.n	800bcd8 <osThreadNew+0x11c>
            hTask = NULL;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bcd8:	693b      	ldr	r3, [r7, #16]
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3728      	adds	r7, #40	; 0x28
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}
	...

0800bce4 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 800bce4:	b480      	push	{r7}
 800bce6:	b083      	sub	sp, #12
 800bce8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bcea:	f3ef 8305 	mrs	r3, IPSR
 800bcee:	603b      	str	r3, [r7, #0]
  return(result);
 800bcf0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d003      	beq.n	800bcfe <osThreadYield+0x1a>
    stat = osErrorISR;
 800bcf6:	f06f 0305 	mvn.w	r3, #5
 800bcfa:	607b      	str	r3, [r7, #4]
 800bcfc:	e009      	b.n	800bd12 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	607b      	str	r3, [r7, #4]
    taskYIELD();
 800bd02:	4b07      	ldr	r3, [pc, #28]	; (800bd20 <osThreadYield+0x3c>)
 800bd04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd08:	601a      	str	r2, [r3, #0]
 800bd0a:	f3bf 8f4f 	dsb	sy
 800bd0e:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 800bd12:	687b      	ldr	r3, [r7, #4]
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	370c      	adds	r7, #12
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1e:	4770      	bx	lr
 800bd20:	e000ed04 	.word	0xe000ed04

0800bd24 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b084      	sub	sp, #16
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd2c:	f3ef 8305 	mrs	r3, IPSR
 800bd30:	60bb      	str	r3, [r7, #8]
  return(result);
 800bd32:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d003      	beq.n	800bd40 <osDelay+0x1c>
    stat = osErrorISR;
 800bd38:	f06f 0305 	mvn.w	r3, #5
 800bd3c:	60fb      	str	r3, [r7, #12]
 800bd3e:	e007      	b.n	800bd50 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800bd40:	2300      	movs	r3, #0
 800bd42:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d002      	beq.n	800bd50 <osDelay+0x2c>
      vTaskDelay(ticks);
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f001 f9b8 	bl	800d0c0 <vTaskDelay>
    }
  }

  return (stat);
 800bd50:	68fb      	ldr	r3, [r7, #12]
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3710      	adds	r7, #16
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}

0800bd5a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800bd5a:	b580      	push	{r7, lr}
 800bd5c:	b08a      	sub	sp, #40	; 0x28
 800bd5e:	af02      	add	r7, sp, #8
 800bd60:	60f8      	str	r0, [r7, #12]
 800bd62:	60b9      	str	r1, [r7, #8]
 800bd64:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800bd66:	2300      	movs	r3, #0
 800bd68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd6a:	f3ef 8305 	mrs	r3, IPSR
 800bd6e:	613b      	str	r3, [r7, #16]
  return(result);
 800bd70:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d15f      	bne.n	800be36 <osMessageQueueNew+0xdc>
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d05c      	beq.n	800be36 <osMessageQueueNew+0xdc>
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d059      	beq.n	800be36 <osMessageQueueNew+0xdc>
    mem = -1;
 800bd82:	f04f 33ff 	mov.w	r3, #4294967295
 800bd86:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d029      	beq.n	800bde2 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	689b      	ldr	r3, [r3, #8]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d012      	beq.n	800bdbc <osMessageQueueNew+0x62>
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	68db      	ldr	r3, [r3, #12]
 800bd9a:	2b4f      	cmp	r3, #79	; 0x4f
 800bd9c:	d90e      	bls.n	800bdbc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d00a      	beq.n	800bdbc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	695a      	ldr	r2, [r3, #20]
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	68b9      	ldr	r1, [r7, #8]
 800bdae:	fb01 f303 	mul.w	r3, r1, r3
 800bdb2:	429a      	cmp	r2, r3
 800bdb4:	d302      	bcc.n	800bdbc <osMessageQueueNew+0x62>
        mem = 1;
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	61bb      	str	r3, [r7, #24]
 800bdba:	e014      	b.n	800bde6 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	689b      	ldr	r3, [r3, #8]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d110      	bne.n	800bde6 <osMessageQueueNew+0x8c>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	68db      	ldr	r3, [r3, #12]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d10c      	bne.n	800bde6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d108      	bne.n	800bde6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	695b      	ldr	r3, [r3, #20]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d104      	bne.n	800bde6 <osMessageQueueNew+0x8c>
          mem = 0;
 800bddc:	2300      	movs	r3, #0
 800bdde:	61bb      	str	r3, [r7, #24]
 800bde0:	e001      	b.n	800bde6 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800bde2:	2300      	movs	r3, #0
 800bde4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bde6:	69bb      	ldr	r3, [r7, #24]
 800bde8:	2b01      	cmp	r3, #1
 800bdea:	d10b      	bne.n	800be04 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	691a      	ldr	r2, [r3, #16]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	689b      	ldr	r3, [r3, #8]
 800bdf4:	2100      	movs	r1, #0
 800bdf6:	9100      	str	r1, [sp, #0]
 800bdf8:	68b9      	ldr	r1, [r7, #8]
 800bdfa:	68f8      	ldr	r0, [r7, #12]
 800bdfc:	f000 fa63 	bl	800c2c6 <xQueueGenericCreateStatic>
 800be00:	61f8      	str	r0, [r7, #28]
 800be02:	e008      	b.n	800be16 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800be04:	69bb      	ldr	r3, [r7, #24]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d105      	bne.n	800be16 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800be0a:	2200      	movs	r2, #0
 800be0c:	68b9      	ldr	r1, [r7, #8]
 800be0e:	68f8      	ldr	r0, [r7, #12]
 800be10:	f000 fad1 	bl	800c3b6 <xQueueGenericCreate>
 800be14:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800be16:	69fb      	ldr	r3, [r7, #28]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d00c      	beq.n	800be36 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d003      	beq.n	800be2a <osMessageQueueNew+0xd0>
        name = attr->name;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	617b      	str	r3, [r7, #20]
 800be28:	e001      	b.n	800be2e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800be2a:	2300      	movs	r3, #0
 800be2c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800be2e:	6979      	ldr	r1, [r7, #20]
 800be30:	69f8      	ldr	r0, [r7, #28]
 800be32:	f000 ff3f 	bl	800ccb4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800be36:	69fb      	ldr	r3, [r7, #28]
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3720      	adds	r7, #32
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}

0800be40 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800be40:	b580      	push	{r7, lr}
 800be42:	b088      	sub	sp, #32
 800be44:	af00      	add	r7, sp, #0
 800be46:	60f8      	str	r0, [r7, #12]
 800be48:	60b9      	str	r1, [r7, #8]
 800be4a:	603b      	str	r3, [r7, #0]
 800be4c:	4613      	mov	r3, r2
 800be4e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800be54:	2300      	movs	r3, #0
 800be56:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be58:	f3ef 8305 	mrs	r3, IPSR
 800be5c:	617b      	str	r3, [r7, #20]
  return(result);
 800be5e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800be60:	2b00      	cmp	r3, #0
 800be62:	d028      	beq.n	800beb6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800be64:	69bb      	ldr	r3, [r7, #24]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d005      	beq.n	800be76 <osMessageQueuePut+0x36>
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d002      	beq.n	800be76 <osMessageQueuePut+0x36>
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d003      	beq.n	800be7e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800be76:	f06f 0303 	mvn.w	r3, #3
 800be7a:	61fb      	str	r3, [r7, #28]
 800be7c:	e038      	b.n	800bef0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800be7e:	2300      	movs	r3, #0
 800be80:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800be82:	f107 0210 	add.w	r2, r7, #16
 800be86:	2300      	movs	r3, #0
 800be88:	68b9      	ldr	r1, [r7, #8]
 800be8a:	69b8      	ldr	r0, [r7, #24]
 800be8c:	f000 fbd6 	bl	800c63c <xQueueGenericSendFromISR>
 800be90:	4603      	mov	r3, r0
 800be92:	2b01      	cmp	r3, #1
 800be94:	d003      	beq.n	800be9e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800be96:	f06f 0302 	mvn.w	r3, #2
 800be9a:	61fb      	str	r3, [r7, #28]
 800be9c:	e028      	b.n	800bef0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d025      	beq.n	800bef0 <osMessageQueuePut+0xb0>
 800bea4:	4b15      	ldr	r3, [pc, #84]	; (800befc <osMessageQueuePut+0xbc>)
 800bea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800beaa:	601a      	str	r2, [r3, #0]
 800beac:	f3bf 8f4f 	dsb	sy
 800beb0:	f3bf 8f6f 	isb	sy
 800beb4:	e01c      	b.n	800bef0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800beb6:	69bb      	ldr	r3, [r7, #24]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d002      	beq.n	800bec2 <osMessageQueuePut+0x82>
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d103      	bne.n	800beca <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800bec2:	f06f 0303 	mvn.w	r3, #3
 800bec6:	61fb      	str	r3, [r7, #28]
 800bec8:	e012      	b.n	800bef0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800beca:	2300      	movs	r3, #0
 800becc:	683a      	ldr	r2, [r7, #0]
 800bece:	68b9      	ldr	r1, [r7, #8]
 800bed0:	69b8      	ldr	r0, [r7, #24]
 800bed2:	f000 facd 	bl	800c470 <xQueueGenericSend>
 800bed6:	4603      	mov	r3, r0
 800bed8:	2b01      	cmp	r3, #1
 800beda:	d009      	beq.n	800bef0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d003      	beq.n	800beea <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800bee2:	f06f 0301 	mvn.w	r3, #1
 800bee6:	61fb      	str	r3, [r7, #28]
 800bee8:	e002      	b.n	800bef0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800beea:	f06f 0302 	mvn.w	r3, #2
 800beee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800bef0:	69fb      	ldr	r3, [r7, #28]
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3720      	adds	r7, #32
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}
 800befa:	bf00      	nop
 800befc:	e000ed04 	.word	0xe000ed04

0800bf00 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b088      	sub	sp, #32
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	60f8      	str	r0, [r7, #12]
 800bf08:	60b9      	str	r1, [r7, #8]
 800bf0a:	607a      	str	r2, [r7, #4]
 800bf0c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bf12:	2300      	movs	r3, #0
 800bf14:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf16:	f3ef 8305 	mrs	r3, IPSR
 800bf1a:	617b      	str	r3, [r7, #20]
  return(result);
 800bf1c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d028      	beq.n	800bf74 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bf22:	69bb      	ldr	r3, [r7, #24]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d005      	beq.n	800bf34 <osMessageQueueGet+0x34>
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d002      	beq.n	800bf34 <osMessageQueueGet+0x34>
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d003      	beq.n	800bf3c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800bf34:	f06f 0303 	mvn.w	r3, #3
 800bf38:	61fb      	str	r3, [r7, #28]
 800bf3a:	e037      	b.n	800bfac <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800bf40:	f107 0310 	add.w	r3, r7, #16
 800bf44:	461a      	mov	r2, r3
 800bf46:	68b9      	ldr	r1, [r7, #8]
 800bf48:	69b8      	ldr	r0, [r7, #24]
 800bf4a:	f000 fce7 	bl	800c91c <xQueueReceiveFromISR>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	2b01      	cmp	r3, #1
 800bf52:	d003      	beq.n	800bf5c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800bf54:	f06f 0302 	mvn.w	r3, #2
 800bf58:	61fb      	str	r3, [r7, #28]
 800bf5a:	e027      	b.n	800bfac <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800bf5c:	693b      	ldr	r3, [r7, #16]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d024      	beq.n	800bfac <osMessageQueueGet+0xac>
 800bf62:	4b15      	ldr	r3, [pc, #84]	; (800bfb8 <osMessageQueueGet+0xb8>)
 800bf64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf68:	601a      	str	r2, [r3, #0]
 800bf6a:	f3bf 8f4f 	dsb	sy
 800bf6e:	f3bf 8f6f 	isb	sy
 800bf72:	e01b      	b.n	800bfac <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bf74:	69bb      	ldr	r3, [r7, #24]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d002      	beq.n	800bf80 <osMessageQueueGet+0x80>
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d103      	bne.n	800bf88 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800bf80:	f06f 0303 	mvn.w	r3, #3
 800bf84:	61fb      	str	r3, [r7, #28]
 800bf86:	e011      	b.n	800bfac <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bf88:	683a      	ldr	r2, [r7, #0]
 800bf8a:	68b9      	ldr	r1, [r7, #8]
 800bf8c:	69b8      	ldr	r0, [r7, #24]
 800bf8e:	f000 fbf1 	bl	800c774 <xQueueReceive>
 800bf92:	4603      	mov	r3, r0
 800bf94:	2b01      	cmp	r3, #1
 800bf96:	d009      	beq.n	800bfac <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d003      	beq.n	800bfa6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800bf9e:	f06f 0301 	mvn.w	r3, #1
 800bfa2:	61fb      	str	r3, [r7, #28]
 800bfa4:	e002      	b.n	800bfac <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800bfa6:	f06f 0302 	mvn.w	r3, #2
 800bfaa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800bfac:	69fb      	ldr	r3, [r7, #28]
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3720      	adds	r7, #32
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
 800bfb6:	bf00      	nop
 800bfb8:	e000ed04 	.word	0xe000ed04

0800bfbc <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b086      	sub	sp, #24
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d102      	bne.n	800bfd4 <osMessageQueueGetCount+0x18>
    count = 0U;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	617b      	str	r3, [r7, #20]
 800bfd2:	e00e      	b.n	800bff2 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bfd4:	f3ef 8305 	mrs	r3, IPSR
 800bfd8:	60fb      	str	r3, [r7, #12]
  return(result);
 800bfda:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d004      	beq.n	800bfea <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800bfe0:	6938      	ldr	r0, [r7, #16]
 800bfe2:	f000 fd39 	bl	800ca58 <uxQueueMessagesWaitingFromISR>
 800bfe6:	6178      	str	r0, [r7, #20]
 800bfe8:	e003      	b.n	800bff2 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800bfea:	6938      	ldr	r0, [r7, #16]
 800bfec:	f000 fd16 	bl	800ca1c <uxQueueMessagesWaiting>
 800bff0:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800bff2:	697b      	ldr	r3, [r7, #20]
}
 800bff4:	4618      	mov	r0, r3
 800bff6:	3718      	adds	r7, #24
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}

0800bffc <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b086      	sub	sp, #24
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c008:	f3ef 8305 	mrs	r3, IPSR
 800c00c:	60fb      	str	r3, [r7, #12]
  return(result);
 800c00e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c010:	2b00      	cmp	r3, #0
 800c012:	d003      	beq.n	800c01c <osMessageQueueReset+0x20>
    stat = osErrorISR;
 800c014:	f06f 0305 	mvn.w	r3, #5
 800c018:	617b      	str	r3, [r7, #20]
 800c01a:	e00c      	b.n	800c036 <osMessageQueueReset+0x3a>
  }
  else if (hQueue == NULL) {
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d103      	bne.n	800c02a <osMessageQueueReset+0x2e>
    stat = osErrorParameter;
 800c022:	f06f 0303 	mvn.w	r3, #3
 800c026:	617b      	str	r3, [r7, #20]
 800c028:	e005      	b.n	800c036 <osMessageQueueReset+0x3a>
  }
  else {
    stat = osOK;
 800c02a:	2300      	movs	r3, #0
 800c02c:	617b      	str	r3, [r7, #20]
    (void)xQueueReset (hQueue);
 800c02e:	2100      	movs	r1, #0
 800c030:	6938      	ldr	r0, [r7, #16]
 800c032:	f000 f8ed 	bl	800c210 <xQueueGenericReset>
  }

  return (stat);
 800c036:	697b      	ldr	r3, [r7, #20]
}
 800c038:	4618      	mov	r0, r3
 800c03a:	3718      	adds	r7, #24
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}

0800c040 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c040:	b480      	push	{r7}
 800c042:	b085      	sub	sp, #20
 800c044:	af00      	add	r7, sp, #0
 800c046:	60f8      	str	r0, [r7, #12]
 800c048:	60b9      	str	r1, [r7, #8]
 800c04a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	4a07      	ldr	r2, [pc, #28]	; (800c06c <vApplicationGetIdleTaskMemory+0x2c>)
 800c050:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	4a06      	ldr	r2, [pc, #24]	; (800c070 <vApplicationGetIdleTaskMemory+0x30>)
 800c056:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c05e:	601a      	str	r2, [r3, #0]
}
 800c060:	bf00      	nop
 800c062:	3714      	adds	r7, #20
 800c064:	46bd      	mov	sp, r7
 800c066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06a:	4770      	bx	lr
 800c06c:	20000c9c 	.word	0x20000c9c
 800c070:	20000d58 	.word	0x20000d58

0800c074 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c074:	b480      	push	{r7}
 800c076:	b085      	sub	sp, #20
 800c078:	af00      	add	r7, sp, #0
 800c07a:	60f8      	str	r0, [r7, #12]
 800c07c:	60b9      	str	r1, [r7, #8]
 800c07e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	4a07      	ldr	r2, [pc, #28]	; (800c0a0 <vApplicationGetTimerTaskMemory+0x2c>)
 800c084:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	4a06      	ldr	r2, [pc, #24]	; (800c0a4 <vApplicationGetTimerTaskMemory+0x30>)
 800c08a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c092:	601a      	str	r2, [r3, #0]
}
 800c094:	bf00      	nop
 800c096:	3714      	adds	r7, #20
 800c098:	46bd      	mov	sp, r7
 800c09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09e:	4770      	bx	lr
 800c0a0:	20001158 	.word	0x20001158
 800c0a4:	20001214 	.word	0x20001214

0800c0a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b083      	sub	sp, #12
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f103 0208 	add.w	r2, r3, #8
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f04f 32ff 	mov.w	r2, #4294967295
 800c0c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f103 0208 	add.w	r2, r3, #8
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f103 0208 	add.w	r2, r3, #8
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2200      	movs	r2, #0
 800c0da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c0dc:	bf00      	nop
 800c0de:	370c      	adds	r7, #12
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e6:	4770      	bx	lr

0800c0e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b083      	sub	sp, #12
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c0f6:	bf00      	nop
 800c0f8:	370c      	adds	r7, #12
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c100:	4770      	bx	lr

0800c102 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c102:	b480      	push	{r7}
 800c104:	b085      	sub	sp, #20
 800c106:	af00      	add	r7, sp, #0
 800c108:	6078      	str	r0, [r7, #4]
 800c10a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	685b      	ldr	r3, [r3, #4]
 800c110:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	68fa      	ldr	r2, [r7, #12]
 800c116:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	689a      	ldr	r2, [r3, #8]
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	689b      	ldr	r3, [r3, #8]
 800c124:	683a      	ldr	r2, [r7, #0]
 800c126:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	683a      	ldr	r2, [r7, #0]
 800c12c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	687a      	ldr	r2, [r7, #4]
 800c132:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	1c5a      	adds	r2, r3, #1
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	601a      	str	r2, [r3, #0]
}
 800c13e:	bf00      	nop
 800c140:	3714      	adds	r7, #20
 800c142:	46bd      	mov	sp, r7
 800c144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c148:	4770      	bx	lr

0800c14a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c14a:	b480      	push	{r7}
 800c14c:	b085      	sub	sp, #20
 800c14e:	af00      	add	r7, sp, #0
 800c150:	6078      	str	r0, [r7, #4]
 800c152:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c160:	d103      	bne.n	800c16a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	691b      	ldr	r3, [r3, #16]
 800c166:	60fb      	str	r3, [r7, #12]
 800c168:	e00c      	b.n	800c184 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	3308      	adds	r3, #8
 800c16e:	60fb      	str	r3, [r7, #12]
 800c170:	e002      	b.n	800c178 <vListInsert+0x2e>
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	685b      	ldr	r3, [r3, #4]
 800c176:	60fb      	str	r3, [r7, #12]
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	685b      	ldr	r3, [r3, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	68ba      	ldr	r2, [r7, #8]
 800c180:	429a      	cmp	r2, r3
 800c182:	d2f6      	bcs.n	800c172 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	685a      	ldr	r2, [r3, #4]
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	685b      	ldr	r3, [r3, #4]
 800c190:	683a      	ldr	r2, [r7, #0]
 800c192:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	68fa      	ldr	r2, [r7, #12]
 800c198:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	683a      	ldr	r2, [r7, #0]
 800c19e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	687a      	ldr	r2, [r7, #4]
 800c1a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	1c5a      	adds	r2, r3, #1
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	601a      	str	r2, [r3, #0]
}
 800c1b0:	bf00      	nop
 800c1b2:	3714      	adds	r7, #20
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ba:	4770      	bx	lr

0800c1bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b085      	sub	sp, #20
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	691b      	ldr	r3, [r3, #16]
 800c1c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	685b      	ldr	r3, [r3, #4]
 800c1ce:	687a      	ldr	r2, [r7, #4]
 800c1d0:	6892      	ldr	r2, [r2, #8]
 800c1d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	689b      	ldr	r3, [r3, #8]
 800c1d8:	687a      	ldr	r2, [r7, #4]
 800c1da:	6852      	ldr	r2, [r2, #4]
 800c1dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	685b      	ldr	r3, [r3, #4]
 800c1e2:	687a      	ldr	r2, [r7, #4]
 800c1e4:	429a      	cmp	r2, r3
 800c1e6:	d103      	bne.n	800c1f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	689a      	ldr	r2, [r3, #8]
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	1e5a      	subs	r2, r3, #1
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	681b      	ldr	r3, [r3, #0]
}
 800c204:	4618      	mov	r0, r3
 800c206:	3714      	adds	r7, #20
 800c208:	46bd      	mov	sp, r7
 800c20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20e:	4770      	bx	lr

0800c210 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b084      	sub	sp, #16
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d10a      	bne.n	800c23a <xQueueGenericReset+0x2a>
	__asm volatile
 800c224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c228:	f383 8811 	msr	BASEPRI, r3
 800c22c:	f3bf 8f6f 	isb	sy
 800c230:	f3bf 8f4f 	dsb	sy
 800c234:	60bb      	str	r3, [r7, #8]
}
 800c236:	bf00      	nop
 800c238:	e7fe      	b.n	800c238 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c23a:	f002 f8f3 	bl	800e424 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	681a      	ldr	r2, [r3, #0]
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c246:	68f9      	ldr	r1, [r7, #12]
 800c248:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c24a:	fb01 f303 	mul.w	r3, r1, r3
 800c24e:	441a      	add	r2, r3
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	2200      	movs	r2, #0
 800c258:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	681a      	ldr	r2, [r3, #0]
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	681a      	ldr	r2, [r3, #0]
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c26a:	3b01      	subs	r3, #1
 800c26c:	68f9      	ldr	r1, [r7, #12]
 800c26e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c270:	fb01 f303 	mul.w	r3, r1, r3
 800c274:	441a      	add	r2, r3
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	22ff      	movs	r2, #255	; 0xff
 800c27e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	22ff      	movs	r2, #255	; 0xff
 800c286:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d109      	bne.n	800c2a4 <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	691b      	ldr	r3, [r3, #16]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d00f      	beq.n	800c2b8 <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	3310      	adds	r3, #16
 800c29c:	4618      	mov	r0, r3
 800c29e:	f001 f9ab 	bl	800d5f8 <xTaskRemoveFromEventList>
 800c2a2:	e009      	b.n	800c2b8 <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	3310      	adds	r3, #16
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f7ff fefd 	bl	800c0a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	3324      	adds	r3, #36	; 0x24
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f7ff fef8 	bl	800c0a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c2b8:	f002 f8e4 	bl	800e484 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c2bc:	2301      	movs	r3, #1
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	3710      	adds	r7, #16
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}

0800c2c6 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c2c6:	b580      	push	{r7, lr}
 800c2c8:	b08e      	sub	sp, #56	; 0x38
 800c2ca:	af02      	add	r7, sp, #8
 800c2cc:	60f8      	str	r0, [r7, #12]
 800c2ce:	60b9      	str	r1, [r7, #8]
 800c2d0:	607a      	str	r2, [r7, #4]
 800c2d2:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d10a      	bne.n	800c2f0 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2de:	f383 8811 	msr	BASEPRI, r3
 800c2e2:	f3bf 8f6f 	isb	sy
 800c2e6:	f3bf 8f4f 	dsb	sy
 800c2ea:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c2ec:	bf00      	nop
 800c2ee:	e7fe      	b.n	800c2ee <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d10a      	bne.n	800c30c <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2fa:	f383 8811 	msr	BASEPRI, r3
 800c2fe:	f3bf 8f6f 	isb	sy
 800c302:	f3bf 8f4f 	dsb	sy
 800c306:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c308:	bf00      	nop
 800c30a:	e7fe      	b.n	800c30a <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d002      	beq.n	800c318 <xQueueGenericCreateStatic+0x52>
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d001      	beq.n	800c31c <xQueueGenericCreateStatic+0x56>
 800c318:	2301      	movs	r3, #1
 800c31a:	e000      	b.n	800c31e <xQueueGenericCreateStatic+0x58>
 800c31c:	2300      	movs	r3, #0
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d10a      	bne.n	800c338 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c326:	f383 8811 	msr	BASEPRI, r3
 800c32a:	f3bf 8f6f 	isb	sy
 800c32e:	f3bf 8f4f 	dsb	sy
 800c332:	623b      	str	r3, [r7, #32]
}
 800c334:	bf00      	nop
 800c336:	e7fe      	b.n	800c336 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d102      	bne.n	800c344 <xQueueGenericCreateStatic+0x7e>
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d101      	bne.n	800c348 <xQueueGenericCreateStatic+0x82>
 800c344:	2301      	movs	r3, #1
 800c346:	e000      	b.n	800c34a <xQueueGenericCreateStatic+0x84>
 800c348:	2300      	movs	r3, #0
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d10a      	bne.n	800c364 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c352:	f383 8811 	msr	BASEPRI, r3
 800c356:	f3bf 8f6f 	isb	sy
 800c35a:	f3bf 8f4f 	dsb	sy
 800c35e:	61fb      	str	r3, [r7, #28]
}
 800c360:	bf00      	nop
 800c362:	e7fe      	b.n	800c362 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c364:	2350      	movs	r3, #80	; 0x50
 800c366:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	2b50      	cmp	r3, #80	; 0x50
 800c36c:	d00a      	beq.n	800c384 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c372:	f383 8811 	msr	BASEPRI, r3
 800c376:	f3bf 8f6f 	isb	sy
 800c37a:	f3bf 8f4f 	dsb	sy
 800c37e:	61bb      	str	r3, [r7, #24]
}
 800c380:	bf00      	nop
 800c382:	e7fe      	b.n	800c382 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c384:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d00d      	beq.n	800c3ac <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c392:	2201      	movs	r2, #1
 800c394:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c398:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c39e:	9300      	str	r3, [sp, #0]
 800c3a0:	4613      	mov	r3, r2
 800c3a2:	687a      	ldr	r2, [r7, #4]
 800c3a4:	68b9      	ldr	r1, [r7, #8]
 800c3a6:	68f8      	ldr	r0, [r7, #12]
 800c3a8:	f000 f83f 	bl	800c42a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3730      	adds	r7, #48	; 0x30
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}

0800c3b6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c3b6:	b580      	push	{r7, lr}
 800c3b8:	b08a      	sub	sp, #40	; 0x28
 800c3ba:	af02      	add	r7, sp, #8
 800c3bc:	60f8      	str	r0, [r7, #12]
 800c3be:	60b9      	str	r1, [r7, #8]
 800c3c0:	4613      	mov	r3, r2
 800c3c2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d10a      	bne.n	800c3e0 <xQueueGenericCreate+0x2a>
	__asm volatile
 800c3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ce:	f383 8811 	msr	BASEPRI, r3
 800c3d2:	f3bf 8f6f 	isb	sy
 800c3d6:	f3bf 8f4f 	dsb	sy
 800c3da:	613b      	str	r3, [r7, #16]
}
 800c3dc:	bf00      	nop
 800c3de:	e7fe      	b.n	800c3de <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	68ba      	ldr	r2, [r7, #8]
 800c3e4:	fb02 f303 	mul.w	r3, r2, r3
 800c3e8:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c3ea:	69fb      	ldr	r3, [r7, #28]
 800c3ec:	3350      	adds	r3, #80	; 0x50
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f002 f93a 	bl	800e668 <pvPortMalloc>
 800c3f4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c3f6:	69bb      	ldr	r3, [r7, #24]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d011      	beq.n	800c420 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c3fc:	69bb      	ldr	r3, [r7, #24]
 800c3fe:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c400:	697b      	ldr	r3, [r7, #20]
 800c402:	3350      	adds	r3, #80	; 0x50
 800c404:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c406:	69bb      	ldr	r3, [r7, #24]
 800c408:	2200      	movs	r2, #0
 800c40a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c40e:	79fa      	ldrb	r2, [r7, #7]
 800c410:	69bb      	ldr	r3, [r7, #24]
 800c412:	9300      	str	r3, [sp, #0]
 800c414:	4613      	mov	r3, r2
 800c416:	697a      	ldr	r2, [r7, #20]
 800c418:	68b9      	ldr	r1, [r7, #8]
 800c41a:	68f8      	ldr	r0, [r7, #12]
 800c41c:	f000 f805 	bl	800c42a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c420:	69bb      	ldr	r3, [r7, #24]
	}
 800c422:	4618      	mov	r0, r3
 800c424:	3720      	adds	r7, #32
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}

0800c42a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c42a:	b580      	push	{r7, lr}
 800c42c:	b084      	sub	sp, #16
 800c42e:	af00      	add	r7, sp, #0
 800c430:	60f8      	str	r0, [r7, #12]
 800c432:	60b9      	str	r1, [r7, #8]
 800c434:	607a      	str	r2, [r7, #4]
 800c436:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d103      	bne.n	800c446 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c43e:	69bb      	ldr	r3, [r7, #24]
 800c440:	69ba      	ldr	r2, [r7, #24]
 800c442:	601a      	str	r2, [r3, #0]
 800c444:	e002      	b.n	800c44c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c446:	69bb      	ldr	r3, [r7, #24]
 800c448:	687a      	ldr	r2, [r7, #4]
 800c44a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c44c:	69bb      	ldr	r3, [r7, #24]
 800c44e:	68fa      	ldr	r2, [r7, #12]
 800c450:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c452:	69bb      	ldr	r3, [r7, #24]
 800c454:	68ba      	ldr	r2, [r7, #8]
 800c456:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c458:	2101      	movs	r1, #1
 800c45a:	69b8      	ldr	r0, [r7, #24]
 800c45c:	f7ff fed8 	bl	800c210 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c460:	69bb      	ldr	r3, [r7, #24]
 800c462:	78fa      	ldrb	r2, [r7, #3]
 800c464:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c468:	bf00      	nop
 800c46a:	3710      	adds	r7, #16
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}

0800c470 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b08e      	sub	sp, #56	; 0x38
 800c474:	af00      	add	r7, sp, #0
 800c476:	60f8      	str	r0, [r7, #12]
 800c478:	60b9      	str	r1, [r7, #8]
 800c47a:	607a      	str	r2, [r7, #4]
 800c47c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c47e:	2300      	movs	r3, #0
 800c480:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d10a      	bne.n	800c4a2 <xQueueGenericSend+0x32>
	__asm volatile
 800c48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c490:	f383 8811 	msr	BASEPRI, r3
 800c494:	f3bf 8f6f 	isb	sy
 800c498:	f3bf 8f4f 	dsb	sy
 800c49c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c49e:	bf00      	nop
 800c4a0:	e7fe      	b.n	800c4a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d103      	bne.n	800c4b0 <xQueueGenericSend+0x40>
 800c4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d101      	bne.n	800c4b4 <xQueueGenericSend+0x44>
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	e000      	b.n	800c4b6 <xQueueGenericSend+0x46>
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d10a      	bne.n	800c4d0 <xQueueGenericSend+0x60>
	__asm volatile
 800c4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4be:	f383 8811 	msr	BASEPRI, r3
 800c4c2:	f3bf 8f6f 	isb	sy
 800c4c6:	f3bf 8f4f 	dsb	sy
 800c4ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c4cc:	bf00      	nop
 800c4ce:	e7fe      	b.n	800c4ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	2b02      	cmp	r3, #2
 800c4d4:	d103      	bne.n	800c4de <xQueueGenericSend+0x6e>
 800c4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4da:	2b01      	cmp	r3, #1
 800c4dc:	d101      	bne.n	800c4e2 <xQueueGenericSend+0x72>
 800c4de:	2301      	movs	r3, #1
 800c4e0:	e000      	b.n	800c4e4 <xQueueGenericSend+0x74>
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d10a      	bne.n	800c4fe <xQueueGenericSend+0x8e>
	__asm volatile
 800c4e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ec:	f383 8811 	msr	BASEPRI, r3
 800c4f0:	f3bf 8f6f 	isb	sy
 800c4f4:	f3bf 8f4f 	dsb	sy
 800c4f8:	623b      	str	r3, [r7, #32]
}
 800c4fa:	bf00      	nop
 800c4fc:	e7fe      	b.n	800c4fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c4fe:	f001 fa37 	bl	800d970 <xTaskGetSchedulerState>
 800c502:	4603      	mov	r3, r0
 800c504:	2b00      	cmp	r3, #0
 800c506:	d102      	bne.n	800c50e <xQueueGenericSend+0x9e>
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d101      	bne.n	800c512 <xQueueGenericSend+0xa2>
 800c50e:	2301      	movs	r3, #1
 800c510:	e000      	b.n	800c514 <xQueueGenericSend+0xa4>
 800c512:	2300      	movs	r3, #0
 800c514:	2b00      	cmp	r3, #0
 800c516:	d10a      	bne.n	800c52e <xQueueGenericSend+0xbe>
	__asm volatile
 800c518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c51c:	f383 8811 	msr	BASEPRI, r3
 800c520:	f3bf 8f6f 	isb	sy
 800c524:	f3bf 8f4f 	dsb	sy
 800c528:	61fb      	str	r3, [r7, #28]
}
 800c52a:	bf00      	nop
 800c52c:	e7fe      	b.n	800c52c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c52e:	f001 ff79 	bl	800e424 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c534:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c53a:	429a      	cmp	r2, r3
 800c53c:	d302      	bcc.n	800c544 <xQueueGenericSend+0xd4>
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	2b02      	cmp	r3, #2
 800c542:	d112      	bne.n	800c56a <xQueueGenericSend+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c544:	683a      	ldr	r2, [r7, #0]
 800c546:	68b9      	ldr	r1, [r7, #8]
 800c548:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c54a:	f000 faa3 	bl	800ca94 <prvCopyDataToQueue>
 800c54e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c554:	2b00      	cmp	r3, #0
 800c556:	d004      	beq.n	800c562 <xQueueGenericSend+0xf2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c55a:	3324      	adds	r3, #36	; 0x24
 800c55c:	4618      	mov	r0, r3
 800c55e:	f001 f84b 	bl	800d5f8 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c562:	f001 ff8f 	bl	800e484 <vPortExitCritical>
				return pdPASS;
 800c566:	2301      	movs	r3, #1
 800c568:	e062      	b.n	800c630 <xQueueGenericSend+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d103      	bne.n	800c578 <xQueueGenericSend+0x108>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c570:	f001 ff88 	bl	800e484 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c574:	2300      	movs	r3, #0
 800c576:	e05b      	b.n	800c630 <xQueueGenericSend+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d106      	bne.n	800c58c <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c57e:	f107 0314 	add.w	r3, r7, #20
 800c582:	4618      	mov	r0, r3
 800c584:	f001 f89c 	bl	800d6c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c588:	2301      	movs	r3, #1
 800c58a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c58c:	f001 ff7a 	bl	800e484 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c590:	f000 fe3a 	bl	800d208 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c594:	f001 ff46 	bl	800e424 <vPortEnterCritical>
 800c598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c59a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c59e:	b25b      	sxtb	r3, r3
 800c5a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5a4:	d103      	bne.n	800c5ae <xQueueGenericSend+0x13e>
 800c5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c5b4:	b25b      	sxtb	r3, r3
 800c5b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5ba:	d103      	bne.n	800c5c4 <xQueueGenericSend+0x154>
 800c5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5be:	2200      	movs	r2, #0
 800c5c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c5c4:	f001 ff5e 	bl	800e484 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c5c8:	1d3a      	adds	r2, r7, #4
 800c5ca:	f107 0314 	add.w	r3, r7, #20
 800c5ce:	4611      	mov	r1, r2
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	f001 f88b 	bl	800d6ec <xTaskCheckForTimeOut>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d123      	bne.n	800c624 <xQueueGenericSend+0x1b4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c5dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c5de:	f000 fb51 	bl	800cc84 <prvIsQueueFull>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d017      	beq.n	800c618 <xQueueGenericSend+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ea:	3310      	adds	r3, #16
 800c5ec:	687a      	ldr	r2, [r7, #4]
 800c5ee:	4611      	mov	r1, r2
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f000 ffb1 	bl	800d558 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c5f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c5f8:	f000 fadc 	bl	800cbb4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c5fc:	f000 fe12 	bl	800d224 <xTaskResumeAll>
 800c600:	4603      	mov	r3, r0
 800c602:	2b00      	cmp	r3, #0
 800c604:	d193      	bne.n	800c52e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c606:	4b0c      	ldr	r3, [pc, #48]	; (800c638 <xQueueGenericSend+0x1c8>)
 800c608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c60c:	601a      	str	r2, [r3, #0]
 800c60e:	f3bf 8f4f 	dsb	sy
 800c612:	f3bf 8f6f 	isb	sy
 800c616:	e78a      	b.n	800c52e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c618:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c61a:	f000 facb 	bl	800cbb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c61e:	f000 fe01 	bl	800d224 <xTaskResumeAll>
 800c622:	e784      	b.n	800c52e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c624:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c626:	f000 fac5 	bl	800cbb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c62a:	f000 fdfb 	bl	800d224 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c62e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c630:	4618      	mov	r0, r3
 800c632:	3738      	adds	r7, #56	; 0x38
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}
 800c638:	e000ed04 	.word	0xe000ed04

0800c63c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b090      	sub	sp, #64	; 0x40
 800c640:	af00      	add	r7, sp, #0
 800c642:	60f8      	str	r0, [r7, #12]
 800c644:	60b9      	str	r1, [r7, #8]
 800c646:	607a      	str	r2, [r7, #4]
 800c648:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c650:	2b00      	cmp	r3, #0
 800c652:	d10a      	bne.n	800c66a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c658:	f383 8811 	msr	BASEPRI, r3
 800c65c:	f3bf 8f6f 	isb	sy
 800c660:	f3bf 8f4f 	dsb	sy
 800c664:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c666:	bf00      	nop
 800c668:	e7fe      	b.n	800c668 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d103      	bne.n	800c678 <xQueueGenericSendFromISR+0x3c>
 800c670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c674:	2b00      	cmp	r3, #0
 800c676:	d101      	bne.n	800c67c <xQueueGenericSendFromISR+0x40>
 800c678:	2301      	movs	r3, #1
 800c67a:	e000      	b.n	800c67e <xQueueGenericSendFromISR+0x42>
 800c67c:	2300      	movs	r3, #0
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d10a      	bne.n	800c698 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c682:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c686:	f383 8811 	msr	BASEPRI, r3
 800c68a:	f3bf 8f6f 	isb	sy
 800c68e:	f3bf 8f4f 	dsb	sy
 800c692:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c694:	bf00      	nop
 800c696:	e7fe      	b.n	800c696 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	2b02      	cmp	r3, #2
 800c69c:	d103      	bne.n	800c6a6 <xQueueGenericSendFromISR+0x6a>
 800c69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6a2:	2b01      	cmp	r3, #1
 800c6a4:	d101      	bne.n	800c6aa <xQueueGenericSendFromISR+0x6e>
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	e000      	b.n	800c6ac <xQueueGenericSendFromISR+0x70>
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d10a      	bne.n	800c6c6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b4:	f383 8811 	msr	BASEPRI, r3
 800c6b8:	f3bf 8f6f 	isb	sy
 800c6bc:	f3bf 8f4f 	dsb	sy
 800c6c0:	623b      	str	r3, [r7, #32]
}
 800c6c2:	bf00      	nop
 800c6c4:	e7fe      	b.n	800c6c4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c6c6:	f001 ff8f 	bl	800e5e8 <vPortValidateInterruptPriority>
	__asm volatile
 800c6ca:	f3ef 8211 	mrs	r2, BASEPRI
 800c6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d2:	f383 8811 	msr	BASEPRI, r3
 800c6d6:	f3bf 8f6f 	isb	sy
 800c6da:	f3bf 8f4f 	dsb	sy
 800c6de:	61fa      	str	r2, [r7, #28]
 800c6e0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800c6e2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c6e4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c6e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c6ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6ee:	429a      	cmp	r2, r3
 800c6f0:	d302      	bcc.n	800c6f8 <xQueueGenericSendFromISR+0xbc>
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	2b02      	cmp	r3, #2
 800c6f6:	d12f      	bne.n	800c758 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c6fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c706:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c708:	683a      	ldr	r2, [r7, #0]
 800c70a:	68b9      	ldr	r1, [r7, #8]
 800c70c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c70e:	f000 f9c1 	bl	800ca94 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c712:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c71a:	d112      	bne.n	800c742 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c71e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c720:	2b00      	cmp	r3, #0
 800c722:	d016      	beq.n	800c752 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c726:	3324      	adds	r3, #36	; 0x24
 800c728:	4618      	mov	r0, r3
 800c72a:	f000 ff65 	bl	800d5f8 <xTaskRemoveFromEventList>
 800c72e:	4603      	mov	r3, r0
 800c730:	2b00      	cmp	r3, #0
 800c732:	d00e      	beq.n	800c752 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d00b      	beq.n	800c752 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2201      	movs	r2, #1
 800c73e:	601a      	str	r2, [r3, #0]
 800c740:	e007      	b.n	800c752 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c742:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c746:	3301      	adds	r3, #1
 800c748:	b2db      	uxtb	r3, r3
 800c74a:	b25a      	sxtb	r2, r3
 800c74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c74e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c752:	2301      	movs	r3, #1
 800c754:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c756:	e001      	b.n	800c75c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c758:	2300      	movs	r3, #0
 800c75a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c75c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c75e:	617b      	str	r3, [r7, #20]
	__asm volatile
 800c760:	697b      	ldr	r3, [r7, #20]
 800c762:	f383 8811 	msr	BASEPRI, r3
}
 800c766:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c76a:	4618      	mov	r0, r3
 800c76c:	3740      	adds	r7, #64	; 0x40
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd80      	pop	{r7, pc}
	...

0800c774 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b08c      	sub	sp, #48	; 0x30
 800c778:	af00      	add	r7, sp, #0
 800c77a:	60f8      	str	r0, [r7, #12]
 800c77c:	60b9      	str	r1, [r7, #8]
 800c77e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c780:	2300      	movs	r3, #0
 800c782:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d10a      	bne.n	800c7a4 <xQueueReceive+0x30>
	__asm volatile
 800c78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c792:	f383 8811 	msr	BASEPRI, r3
 800c796:	f3bf 8f6f 	isb	sy
 800c79a:	f3bf 8f4f 	dsb	sy
 800c79e:	623b      	str	r3, [r7, #32]
}
 800c7a0:	bf00      	nop
 800c7a2:	e7fe      	b.n	800c7a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d103      	bne.n	800c7b2 <xQueueReceive+0x3e>
 800c7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d101      	bne.n	800c7b6 <xQueueReceive+0x42>
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	e000      	b.n	800c7b8 <xQueueReceive+0x44>
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d10a      	bne.n	800c7d2 <xQueueReceive+0x5e>
	__asm volatile
 800c7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c0:	f383 8811 	msr	BASEPRI, r3
 800c7c4:	f3bf 8f6f 	isb	sy
 800c7c8:	f3bf 8f4f 	dsb	sy
 800c7cc:	61fb      	str	r3, [r7, #28]
}
 800c7ce:	bf00      	nop
 800c7d0:	e7fe      	b.n	800c7d0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c7d2:	f001 f8cd 	bl	800d970 <xTaskGetSchedulerState>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d102      	bne.n	800c7e2 <xQueueReceive+0x6e>
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d101      	bne.n	800c7e6 <xQueueReceive+0x72>
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	e000      	b.n	800c7e8 <xQueueReceive+0x74>
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d10a      	bne.n	800c802 <xQueueReceive+0x8e>
	__asm volatile
 800c7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f0:	f383 8811 	msr	BASEPRI, r3
 800c7f4:	f3bf 8f6f 	isb	sy
 800c7f8:	f3bf 8f4f 	dsb	sy
 800c7fc:	61bb      	str	r3, [r7, #24]
}
 800c7fe:	bf00      	nop
 800c800:	e7fe      	b.n	800c800 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c802:	f001 fe0f 	bl	800e424 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c80a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d014      	beq.n	800c83c <xQueueReceive+0xc8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c812:	68b9      	ldr	r1, [r7, #8]
 800c814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c816:	f000 f9a7 	bl	800cb68 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c81c:	1e5a      	subs	r2, r3, #1
 800c81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c820:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c824:	691b      	ldr	r3, [r3, #16]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d004      	beq.n	800c834 <xQueueReceive+0xc0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c82c:	3310      	adds	r3, #16
 800c82e:	4618      	mov	r0, r3
 800c830:	f000 fee2 	bl	800d5f8 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c834:	f001 fe26 	bl	800e484 <vPortExitCritical>
				return pdPASS;
 800c838:	2301      	movs	r3, #1
 800c83a:	e069      	b.n	800c910 <xQueueReceive+0x19c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d103      	bne.n	800c84a <xQueueReceive+0xd6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c842:	f001 fe1f 	bl	800e484 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c846:	2300      	movs	r3, #0
 800c848:	e062      	b.n	800c910 <xQueueReceive+0x19c>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d106      	bne.n	800c85e <xQueueReceive+0xea>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c850:	f107 0310 	add.w	r3, r7, #16
 800c854:	4618      	mov	r0, r3
 800c856:	f000 ff33 	bl	800d6c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c85a:	2301      	movs	r3, #1
 800c85c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c85e:	f001 fe11 	bl	800e484 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c862:	f000 fcd1 	bl	800d208 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c866:	f001 fddd 	bl	800e424 <vPortEnterCritical>
 800c86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c86c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c870:	b25b      	sxtb	r3, r3
 800c872:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c876:	d103      	bne.n	800c880 <xQueueReceive+0x10c>
 800c878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c87a:	2200      	movs	r2, #0
 800c87c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c882:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c886:	b25b      	sxtb	r3, r3
 800c888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c88c:	d103      	bne.n	800c896 <xQueueReceive+0x122>
 800c88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c890:	2200      	movs	r2, #0
 800c892:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c896:	f001 fdf5 	bl	800e484 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c89a:	1d3a      	adds	r2, r7, #4
 800c89c:	f107 0310 	add.w	r3, r7, #16
 800c8a0:	4611      	mov	r1, r2
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f000 ff22 	bl	800d6ec <xTaskCheckForTimeOut>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d123      	bne.n	800c8f6 <xQueueReceive+0x182>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c8ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8b0:	f000 f9d2 	bl	800cc58 <prvIsQueueEmpty>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d017      	beq.n	800c8ea <xQueueReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8bc:	3324      	adds	r3, #36	; 0x24
 800c8be:	687a      	ldr	r2, [r7, #4]
 800c8c0:	4611      	mov	r1, r2
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f000 fe48 	bl	800d558 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c8c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8ca:	f000 f973 	bl	800cbb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c8ce:	f000 fca9 	bl	800d224 <xTaskResumeAll>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d194      	bne.n	800c802 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c8d8:	4b0f      	ldr	r3, [pc, #60]	; (800c918 <xQueueReceive+0x1a4>)
 800c8da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8de:	601a      	str	r2, [r3, #0]
 800c8e0:	f3bf 8f4f 	dsb	sy
 800c8e4:	f3bf 8f6f 	isb	sy
 800c8e8:	e78b      	b.n	800c802 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c8ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8ec:	f000 f962 	bl	800cbb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c8f0:	f000 fc98 	bl	800d224 <xTaskResumeAll>
 800c8f4:	e785      	b.n	800c802 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c8f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8f8:	f000 f95c 	bl	800cbb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c8fc:	f000 fc92 	bl	800d224 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c900:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c902:	f000 f9a9 	bl	800cc58 <prvIsQueueEmpty>
 800c906:	4603      	mov	r3, r0
 800c908:	2b00      	cmp	r3, #0
 800c90a:	f43f af7a 	beq.w	800c802 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c90e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c910:	4618      	mov	r0, r3
 800c912:	3730      	adds	r7, #48	; 0x30
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}
 800c918:	e000ed04 	.word	0xe000ed04

0800c91c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b08e      	sub	sp, #56	; 0x38
 800c920:	af00      	add	r7, sp, #0
 800c922:	60f8      	str	r0, [r7, #12]
 800c924:	60b9      	str	r1, [r7, #8]
 800c926:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d10a      	bne.n	800c948 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c936:	f383 8811 	msr	BASEPRI, r3
 800c93a:	f3bf 8f6f 	isb	sy
 800c93e:	f3bf 8f4f 	dsb	sy
 800c942:	623b      	str	r3, [r7, #32]
}
 800c944:	bf00      	nop
 800c946:	e7fe      	b.n	800c946 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d103      	bne.n	800c956 <xQueueReceiveFromISR+0x3a>
 800c94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c952:	2b00      	cmp	r3, #0
 800c954:	d101      	bne.n	800c95a <xQueueReceiveFromISR+0x3e>
 800c956:	2301      	movs	r3, #1
 800c958:	e000      	b.n	800c95c <xQueueReceiveFromISR+0x40>
 800c95a:	2300      	movs	r3, #0
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d10a      	bne.n	800c976 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c964:	f383 8811 	msr	BASEPRI, r3
 800c968:	f3bf 8f6f 	isb	sy
 800c96c:	f3bf 8f4f 	dsb	sy
 800c970:	61fb      	str	r3, [r7, #28]
}
 800c972:	bf00      	nop
 800c974:	e7fe      	b.n	800c974 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c976:	f001 fe37 	bl	800e5e8 <vPortValidateInterruptPriority>
	__asm volatile
 800c97a:	f3ef 8211 	mrs	r2, BASEPRI
 800c97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c982:	f383 8811 	msr	BASEPRI, r3
 800c986:	f3bf 8f6f 	isb	sy
 800c98a:	f3bf 8f4f 	dsb	sy
 800c98e:	61ba      	str	r2, [r7, #24]
 800c990:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c992:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c994:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c99a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d02f      	beq.n	800ca02 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c9a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c9ac:	68b9      	ldr	r1, [r7, #8]
 800c9ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c9b0:	f000 f8da 	bl	800cb68 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9b6:	1e5a      	subs	r2, r3, #1
 800c9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ba:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c9bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c9c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9c4:	d112      	bne.n	800c9ec <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9c8:	691b      	ldr	r3, [r3, #16]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d016      	beq.n	800c9fc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9d0:	3310      	adds	r3, #16
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	f000 fe10 	bl	800d5f8 <xTaskRemoveFromEventList>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d00e      	beq.n	800c9fc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d00b      	beq.n	800c9fc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	601a      	str	r2, [r3, #0]
 800c9ea:	e007      	b.n	800c9fc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c9ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9f0:	3301      	adds	r3, #1
 800c9f2:	b2db      	uxtb	r3, r3
 800c9f4:	b25a      	sxtb	r2, r3
 800c9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	637b      	str	r3, [r7, #52]	; 0x34
 800ca00:	e001      	b.n	800ca06 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ca02:	2300      	movs	r3, #0
 800ca04:	637b      	str	r3, [r7, #52]	; 0x34
 800ca06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca08:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ca0a:	693b      	ldr	r3, [r7, #16]
 800ca0c:	f383 8811 	msr	BASEPRI, r3
}
 800ca10:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ca12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3738      	adds	r7, #56	; 0x38
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}

0800ca1c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b084      	sub	sp, #16
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d10a      	bne.n	800ca40 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800ca2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca2e:	f383 8811 	msr	BASEPRI, r3
 800ca32:	f3bf 8f6f 	isb	sy
 800ca36:	f3bf 8f4f 	dsb	sy
 800ca3a:	60bb      	str	r3, [r7, #8]
}
 800ca3c:	bf00      	nop
 800ca3e:	e7fe      	b.n	800ca3e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800ca40:	f001 fcf0 	bl	800e424 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca48:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800ca4a:	f001 fd1b 	bl	800e484 <vPortExitCritical>

	return uxReturn;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800ca50:	4618      	mov	r0, r3
 800ca52:	3710      	adds	r7, #16
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}

0800ca58 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b087      	sub	sp, #28
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800ca64:	697b      	ldr	r3, [r7, #20]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d10a      	bne.n	800ca80 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800ca6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca6e:	f383 8811 	msr	BASEPRI, r3
 800ca72:	f3bf 8f6f 	isb	sy
 800ca76:	f3bf 8f4f 	dsb	sy
 800ca7a:	60fb      	str	r3, [r7, #12]
}
 800ca7c:	bf00      	nop
 800ca7e:	e7fe      	b.n	800ca7e <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800ca80:	697b      	ldr	r3, [r7, #20]
 800ca82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca84:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800ca86:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800ca88:	4618      	mov	r0, r3
 800ca8a:	371c      	adds	r7, #28
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca92:	4770      	bx	lr

0800ca94 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b086      	sub	sp, #24
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	60f8      	str	r0, [r7, #12]
 800ca9c:	60b9      	str	r1, [r7, #8]
 800ca9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800caa0:	2300      	movs	r3, #0
 800caa2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caa8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d10d      	bne.n	800cace <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d14d      	bne.n	800cb56 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	689b      	ldr	r3, [r3, #8]
 800cabe:	4618      	mov	r0, r3
 800cac0:	f000 ff74 	bl	800d9ac <xTaskPriorityDisinherit>
 800cac4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	2200      	movs	r2, #0
 800caca:	609a      	str	r2, [r3, #8]
 800cacc:	e043      	b.n	800cb56 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d119      	bne.n	800cb08 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	6858      	ldr	r0, [r3, #4]
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cadc:	461a      	mov	r2, r3
 800cade:	68b9      	ldr	r1, [r7, #8]
 800cae0:	f003 fc0c 	bl	80102fc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	685a      	ldr	r2, [r3, #4]
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caec:	441a      	add	r2, r3
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	685a      	ldr	r2, [r3, #4]
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	689b      	ldr	r3, [r3, #8]
 800cafa:	429a      	cmp	r2, r3
 800cafc:	d32b      	bcc.n	800cb56 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	681a      	ldr	r2, [r3, #0]
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	605a      	str	r2, [r3, #4]
 800cb06:	e026      	b.n	800cb56 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	68d8      	ldr	r0, [r3, #12]
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb10:	461a      	mov	r2, r3
 800cb12:	68b9      	ldr	r1, [r7, #8]
 800cb14:	f003 fbf2 	bl	80102fc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	68da      	ldr	r2, [r3, #12]
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb20:	425b      	negs	r3, r3
 800cb22:	441a      	add	r2, r3
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	68da      	ldr	r2, [r3, #12]
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	429a      	cmp	r2, r3
 800cb32:	d207      	bcs.n	800cb44 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	689a      	ldr	r2, [r3, #8]
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb3c:	425b      	negs	r3, r3
 800cb3e:	441a      	add	r2, r3
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2b02      	cmp	r3, #2
 800cb48:	d105      	bne.n	800cb56 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cb4a:	693b      	ldr	r3, [r7, #16]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d002      	beq.n	800cb56 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cb50:	693b      	ldr	r3, [r7, #16]
 800cb52:	3b01      	subs	r3, #1
 800cb54:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cb56:	693b      	ldr	r3, [r7, #16]
 800cb58:	1c5a      	adds	r2, r3, #1
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cb5e:	697b      	ldr	r3, [r7, #20]
}
 800cb60:	4618      	mov	r0, r3
 800cb62:	3718      	adds	r7, #24
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}

0800cb68 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b082      	sub	sp, #8
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d018      	beq.n	800cbac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	68da      	ldr	r2, [r3, #12]
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb82:	441a      	add	r2, r3
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	68da      	ldr	r2, [r3, #12]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	689b      	ldr	r3, [r3, #8]
 800cb90:	429a      	cmp	r2, r3
 800cb92:	d303      	bcc.n	800cb9c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681a      	ldr	r2, [r3, #0]
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	68d9      	ldr	r1, [r3, #12]
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cba4:	461a      	mov	r2, r3
 800cba6:	6838      	ldr	r0, [r7, #0]
 800cba8:	f003 fba8 	bl	80102fc <memcpy>
	}
}
 800cbac:	bf00      	nop
 800cbae:	3708      	adds	r7, #8
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}

0800cbb4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b084      	sub	sp, #16
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cbbc:	f001 fc32 	bl	800e424 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cbc6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cbc8:	e011      	b.n	800cbee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d012      	beq.n	800cbf8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	3324      	adds	r3, #36	; 0x24
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f000 fd0e 	bl	800d5f8 <xTaskRemoveFromEventList>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d001      	beq.n	800cbe6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cbe2:	f000 fde5 	bl	800d7b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cbe6:	7bfb      	ldrb	r3, [r7, #15]
 800cbe8:	3b01      	subs	r3, #1
 800cbea:	b2db      	uxtb	r3, r3
 800cbec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cbee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	dce9      	bgt.n	800cbca <prvUnlockQueue+0x16>
 800cbf6:	e000      	b.n	800cbfa <prvUnlockQueue+0x46>
					break;
 800cbf8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	22ff      	movs	r2, #255	; 0xff
 800cbfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cc02:	f001 fc3f 	bl	800e484 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cc06:	f001 fc0d 	bl	800e424 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cc10:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cc12:	e011      	b.n	800cc38 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	691b      	ldr	r3, [r3, #16]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d012      	beq.n	800cc42 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	3310      	adds	r3, #16
 800cc20:	4618      	mov	r0, r3
 800cc22:	f000 fce9 	bl	800d5f8 <xTaskRemoveFromEventList>
 800cc26:	4603      	mov	r3, r0
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d001      	beq.n	800cc30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cc2c:	f000 fdc0 	bl	800d7b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cc30:	7bbb      	ldrb	r3, [r7, #14]
 800cc32:	3b01      	subs	r3, #1
 800cc34:	b2db      	uxtb	r3, r3
 800cc36:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cc38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	dce9      	bgt.n	800cc14 <prvUnlockQueue+0x60>
 800cc40:	e000      	b.n	800cc44 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cc42:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	22ff      	movs	r2, #255	; 0xff
 800cc48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cc4c:	f001 fc1a 	bl	800e484 <vPortExitCritical>
}
 800cc50:	bf00      	nop
 800cc52:	3710      	adds	r7, #16
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}

0800cc58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b084      	sub	sp, #16
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cc60:	f001 fbe0 	bl	800e424 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d102      	bne.n	800cc72 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	60fb      	str	r3, [r7, #12]
 800cc70:	e001      	b.n	800cc76 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cc72:	2300      	movs	r3, #0
 800cc74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cc76:	f001 fc05 	bl	800e484 <vPortExitCritical>

	return xReturn;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	3710      	adds	r7, #16
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}

0800cc84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b084      	sub	sp, #16
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cc8c:	f001 fbca 	bl	800e424 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc98:	429a      	cmp	r2, r3
 800cc9a:	d102      	bne.n	800cca2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	60fb      	str	r3, [r7, #12]
 800cca0:	e001      	b.n	800cca6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cca2:	2300      	movs	r3, #0
 800cca4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cca6:	f001 fbed 	bl	800e484 <vPortExitCritical>

	return xReturn;
 800ccaa:	68fb      	ldr	r3, [r7, #12]
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	3710      	adds	r7, #16
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}

0800ccb4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ccb4:	b480      	push	{r7}
 800ccb6:	b085      	sub	sp, #20
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
 800ccbc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	60fb      	str	r3, [r7, #12]
 800ccc2:	e014      	b.n	800ccee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ccc4:	4a0f      	ldr	r2, [pc, #60]	; (800cd04 <vQueueAddToRegistry+0x50>)
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d10b      	bne.n	800cce8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ccd0:	490c      	ldr	r1, [pc, #48]	; (800cd04 <vQueueAddToRegistry+0x50>)
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	683a      	ldr	r2, [r7, #0]
 800ccd6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ccda:	4a0a      	ldr	r2, [pc, #40]	; (800cd04 <vQueueAddToRegistry+0x50>)
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	00db      	lsls	r3, r3, #3
 800cce0:	4413      	add	r3, r2
 800cce2:	687a      	ldr	r2, [r7, #4]
 800cce4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cce6:	e006      	b.n	800ccf6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	3301      	adds	r3, #1
 800ccec:	60fb      	str	r3, [r7, #12]
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	2b07      	cmp	r3, #7
 800ccf2:	d9e7      	bls.n	800ccc4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ccf4:	bf00      	nop
 800ccf6:	bf00      	nop
 800ccf8:	3714      	adds	r7, #20
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd00:	4770      	bx	lr
 800cd02:	bf00      	nop
 800cd04:	20001a14 	.word	0x20001a14

0800cd08 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b086      	sub	sp, #24
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	60f8      	str	r0, [r7, #12]
 800cd10:	60b9      	str	r1, [r7, #8]
 800cd12:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cd18:	f001 fb84 	bl	800e424 <vPortEnterCritical>
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cd22:	b25b      	sxtb	r3, r3
 800cd24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd28:	d103      	bne.n	800cd32 <vQueueWaitForMessageRestricted+0x2a>
 800cd2a:	697b      	ldr	r3, [r7, #20]
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cd38:	b25b      	sxtb	r3, r3
 800cd3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd3e:	d103      	bne.n	800cd48 <vQueueWaitForMessageRestricted+0x40>
 800cd40:	697b      	ldr	r3, [r7, #20]
 800cd42:	2200      	movs	r2, #0
 800cd44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cd48:	f001 fb9c 	bl	800e484 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d106      	bne.n	800cd62 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	3324      	adds	r3, #36	; 0x24
 800cd58:	687a      	ldr	r2, [r7, #4]
 800cd5a:	68b9      	ldr	r1, [r7, #8]
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f000 fc1f 	bl	800d5a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cd62:	6978      	ldr	r0, [r7, #20]
 800cd64:	f7ff ff26 	bl	800cbb4 <prvUnlockQueue>
	}
 800cd68:	bf00      	nop
 800cd6a:	3718      	adds	r7, #24
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}

0800cd70 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b08e      	sub	sp, #56	; 0x38
 800cd74:	af04      	add	r7, sp, #16
 800cd76:	60f8      	str	r0, [r7, #12]
 800cd78:	60b9      	str	r1, [r7, #8]
 800cd7a:	607a      	str	r2, [r7, #4]
 800cd7c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cd7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d10a      	bne.n	800cd9a <xTaskCreateStatic+0x2a>
	__asm volatile
 800cd84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd88:	f383 8811 	msr	BASEPRI, r3
 800cd8c:	f3bf 8f6f 	isb	sy
 800cd90:	f3bf 8f4f 	dsb	sy
 800cd94:	623b      	str	r3, [r7, #32]
}
 800cd96:	bf00      	nop
 800cd98:	e7fe      	b.n	800cd98 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cd9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d10a      	bne.n	800cdb6 <xTaskCreateStatic+0x46>
	__asm volatile
 800cda0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda4:	f383 8811 	msr	BASEPRI, r3
 800cda8:	f3bf 8f6f 	isb	sy
 800cdac:	f3bf 8f4f 	dsb	sy
 800cdb0:	61fb      	str	r3, [r7, #28]
}
 800cdb2:	bf00      	nop
 800cdb4:	e7fe      	b.n	800cdb4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cdb6:	23bc      	movs	r3, #188	; 0xbc
 800cdb8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cdba:	693b      	ldr	r3, [r7, #16]
 800cdbc:	2bbc      	cmp	r3, #188	; 0xbc
 800cdbe:	d00a      	beq.n	800cdd6 <xTaskCreateStatic+0x66>
	__asm volatile
 800cdc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc4:	f383 8811 	msr	BASEPRI, r3
 800cdc8:	f3bf 8f6f 	isb	sy
 800cdcc:	f3bf 8f4f 	dsb	sy
 800cdd0:	61bb      	str	r3, [r7, #24]
}
 800cdd2:	bf00      	nop
 800cdd4:	e7fe      	b.n	800cdd4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cdd6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cdd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d01e      	beq.n	800ce1c <xTaskCreateStatic+0xac>
 800cdde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d01b      	beq.n	800ce1c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cde4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cdec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cdee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf0:	2202      	movs	r2, #2
 800cdf2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	9303      	str	r3, [sp, #12]
 800cdfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdfc:	9302      	str	r3, [sp, #8]
 800cdfe:	f107 0314 	add.w	r3, r7, #20
 800ce02:	9301      	str	r3, [sp, #4]
 800ce04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce06:	9300      	str	r3, [sp, #0]
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	687a      	ldr	r2, [r7, #4]
 800ce0c:	68b9      	ldr	r1, [r7, #8]
 800ce0e:	68f8      	ldr	r0, [r7, #12]
 800ce10:	f000 f850 	bl	800ceb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ce14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ce16:	f000 f8f3 	bl	800d000 <prvAddNewTaskToReadyList>
 800ce1a:	e001      	b.n	800ce20 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ce20:	697b      	ldr	r3, [r7, #20]
	}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3728      	adds	r7, #40	; 0x28
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}

0800ce2a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ce2a:	b580      	push	{r7, lr}
 800ce2c:	b08c      	sub	sp, #48	; 0x30
 800ce2e:	af04      	add	r7, sp, #16
 800ce30:	60f8      	str	r0, [r7, #12]
 800ce32:	60b9      	str	r1, [r7, #8]
 800ce34:	603b      	str	r3, [r7, #0]
 800ce36:	4613      	mov	r3, r2
 800ce38:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ce3a:	88fb      	ldrh	r3, [r7, #6]
 800ce3c:	009b      	lsls	r3, r3, #2
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f001 fc12 	bl	800e668 <pvPortMalloc>
 800ce44:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ce46:	697b      	ldr	r3, [r7, #20]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d00e      	beq.n	800ce6a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ce4c:	20bc      	movs	r0, #188	; 0xbc
 800ce4e:	f001 fc0b 	bl	800e668 <pvPortMalloc>
 800ce52:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ce54:	69fb      	ldr	r3, [r7, #28]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d003      	beq.n	800ce62 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ce5a:	69fb      	ldr	r3, [r7, #28]
 800ce5c:	697a      	ldr	r2, [r7, #20]
 800ce5e:	631a      	str	r2, [r3, #48]	; 0x30
 800ce60:	e005      	b.n	800ce6e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ce62:	6978      	ldr	r0, [r7, #20]
 800ce64:	f001 fccc 	bl	800e800 <vPortFree>
 800ce68:	e001      	b.n	800ce6e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ce6e:	69fb      	ldr	r3, [r7, #28]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d017      	beq.n	800cea4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ce74:	69fb      	ldr	r3, [r7, #28]
 800ce76:	2200      	movs	r2, #0
 800ce78:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ce7c:	88fa      	ldrh	r2, [r7, #6]
 800ce7e:	2300      	movs	r3, #0
 800ce80:	9303      	str	r3, [sp, #12]
 800ce82:	69fb      	ldr	r3, [r7, #28]
 800ce84:	9302      	str	r3, [sp, #8]
 800ce86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce88:	9301      	str	r3, [sp, #4]
 800ce8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce8c:	9300      	str	r3, [sp, #0]
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	68b9      	ldr	r1, [r7, #8]
 800ce92:	68f8      	ldr	r0, [r7, #12]
 800ce94:	f000 f80e 	bl	800ceb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ce98:	69f8      	ldr	r0, [r7, #28]
 800ce9a:	f000 f8b1 	bl	800d000 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ce9e:	2301      	movs	r3, #1
 800cea0:	61bb      	str	r3, [r7, #24]
 800cea2:	e002      	b.n	800ceaa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cea4:	f04f 33ff 	mov.w	r3, #4294967295
 800cea8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ceaa:	69bb      	ldr	r3, [r7, #24]
	}
 800ceac:	4618      	mov	r0, r3
 800ceae:	3720      	adds	r7, #32
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}

0800ceb4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b088      	sub	sp, #32
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	60f8      	str	r0, [r7, #12]
 800cebc:	60b9      	str	r1, [r7, #8]
 800cebe:	607a      	str	r2, [r7, #4]
 800cec0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cec4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	009b      	lsls	r3, r3, #2
 800ceca:	461a      	mov	r2, r3
 800cecc:	21a5      	movs	r1, #165	; 0xa5
 800cece:	f003 fa23 	bl	8010318 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ced2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ced4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cedc:	3b01      	subs	r3, #1
 800cede:	009b      	lsls	r3, r3, #2
 800cee0:	4413      	add	r3, r2
 800cee2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cee4:	69bb      	ldr	r3, [r7, #24]
 800cee6:	f023 0307 	bic.w	r3, r3, #7
 800ceea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ceec:	69bb      	ldr	r3, [r7, #24]
 800ceee:	f003 0307 	and.w	r3, r3, #7
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d00a      	beq.n	800cf0c <prvInitialiseNewTask+0x58>
	__asm volatile
 800cef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cefa:	f383 8811 	msr	BASEPRI, r3
 800cefe:	f3bf 8f6f 	isb	sy
 800cf02:	f3bf 8f4f 	dsb	sy
 800cf06:	617b      	str	r3, [r7, #20]
}
 800cf08:	bf00      	nop
 800cf0a:	e7fe      	b.n	800cf0a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cf0c:	68bb      	ldr	r3, [r7, #8]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d01f      	beq.n	800cf52 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cf12:	2300      	movs	r3, #0
 800cf14:	61fb      	str	r3, [r7, #28]
 800cf16:	e012      	b.n	800cf3e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cf18:	68ba      	ldr	r2, [r7, #8]
 800cf1a:	69fb      	ldr	r3, [r7, #28]
 800cf1c:	4413      	add	r3, r2
 800cf1e:	7819      	ldrb	r1, [r3, #0]
 800cf20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf22:	69fb      	ldr	r3, [r7, #28]
 800cf24:	4413      	add	r3, r2
 800cf26:	3334      	adds	r3, #52	; 0x34
 800cf28:	460a      	mov	r2, r1
 800cf2a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cf2c:	68ba      	ldr	r2, [r7, #8]
 800cf2e:	69fb      	ldr	r3, [r7, #28]
 800cf30:	4413      	add	r3, r2
 800cf32:	781b      	ldrb	r3, [r3, #0]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d006      	beq.n	800cf46 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cf38:	69fb      	ldr	r3, [r7, #28]
 800cf3a:	3301      	adds	r3, #1
 800cf3c:	61fb      	str	r3, [r7, #28]
 800cf3e:	69fb      	ldr	r3, [r7, #28]
 800cf40:	2b0f      	cmp	r3, #15
 800cf42:	d9e9      	bls.n	800cf18 <prvInitialiseNewTask+0x64>
 800cf44:	e000      	b.n	800cf48 <prvInitialiseNewTask+0x94>
			{
				break;
 800cf46:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cf48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cf50:	e003      	b.n	800cf5a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cf52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf54:	2200      	movs	r2, #0
 800cf56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cf5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf5c:	2b37      	cmp	r3, #55	; 0x37
 800cf5e:	d901      	bls.n	800cf64 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cf60:	2337      	movs	r3, #55	; 0x37
 800cf62:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cf64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf68:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cf6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf6e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cf70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf72:	2200      	movs	r2, #0
 800cf74:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cf76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf78:	3304      	adds	r3, #4
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f7ff f8b4 	bl	800c0e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cf80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf82:	3318      	adds	r3, #24
 800cf84:	4618      	mov	r0, r3
 800cf86:	f7ff f8af 	bl	800c0e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cf8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf8e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf92:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cf96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf98:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cf9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf9e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cfa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cfa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfaa:	2200      	movs	r2, #0
 800cfac:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cfb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfb2:	3354      	adds	r3, #84	; 0x54
 800cfb4:	2260      	movs	r2, #96	; 0x60
 800cfb6:	2100      	movs	r1, #0
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f003 f9ad 	bl	8010318 <memset>
 800cfbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfc0:	4a0c      	ldr	r2, [pc, #48]	; (800cff4 <prvInitialiseNewTask+0x140>)
 800cfc2:	659a      	str	r2, [r3, #88]	; 0x58
 800cfc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfc6:	4a0c      	ldr	r2, [pc, #48]	; (800cff8 <prvInitialiseNewTask+0x144>)
 800cfc8:	65da      	str	r2, [r3, #92]	; 0x5c
 800cfca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfcc:	4a0b      	ldr	r2, [pc, #44]	; (800cffc <prvInitialiseNewTask+0x148>)
 800cfce:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cfd0:	683a      	ldr	r2, [r7, #0]
 800cfd2:	68f9      	ldr	r1, [r7, #12]
 800cfd4:	69b8      	ldr	r0, [r7, #24]
 800cfd6:	f001 f8f9 	bl	800e1cc <pxPortInitialiseStack>
 800cfda:	4602      	mov	r2, r0
 800cfdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfde:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cfe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d002      	beq.n	800cfec <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cfe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cfea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cfec:	bf00      	nop
 800cfee:	3720      	adds	r7, #32
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}
 800cff4:	08014070 	.word	0x08014070
 800cff8:	08014090 	.word	0x08014090
 800cffc:	08014050 	.word	0x08014050

0800d000 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b082      	sub	sp, #8
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d008:	f001 fa0c 	bl	800e424 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d00c:	4b26      	ldr	r3, [pc, #152]	; (800d0a8 <prvAddNewTaskToReadyList+0xa8>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	3301      	adds	r3, #1
 800d012:	4a25      	ldr	r2, [pc, #148]	; (800d0a8 <prvAddNewTaskToReadyList+0xa8>)
 800d014:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d016:	4b25      	ldr	r3, [pc, #148]	; (800d0ac <prvAddNewTaskToReadyList+0xac>)
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d109      	bne.n	800d032 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d01e:	4a23      	ldr	r2, [pc, #140]	; (800d0ac <prvAddNewTaskToReadyList+0xac>)
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d024:	4b20      	ldr	r3, [pc, #128]	; (800d0a8 <prvAddNewTaskToReadyList+0xa8>)
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	2b01      	cmp	r3, #1
 800d02a:	d110      	bne.n	800d04e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d02c:	f000 fbde 	bl	800d7ec <prvInitialiseTaskLists>
 800d030:	e00d      	b.n	800d04e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d032:	4b1f      	ldr	r3, [pc, #124]	; (800d0b0 <prvAddNewTaskToReadyList+0xb0>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d109      	bne.n	800d04e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d03a:	4b1c      	ldr	r3, [pc, #112]	; (800d0ac <prvAddNewTaskToReadyList+0xac>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d044:	429a      	cmp	r2, r3
 800d046:	d802      	bhi.n	800d04e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d048:	4a18      	ldr	r2, [pc, #96]	; (800d0ac <prvAddNewTaskToReadyList+0xac>)
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d04e:	4b19      	ldr	r3, [pc, #100]	; (800d0b4 <prvAddNewTaskToReadyList+0xb4>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	3301      	adds	r3, #1
 800d054:	4a17      	ldr	r2, [pc, #92]	; (800d0b4 <prvAddNewTaskToReadyList+0xb4>)
 800d056:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d058:	4b16      	ldr	r3, [pc, #88]	; (800d0b4 <prvAddNewTaskToReadyList+0xb4>)
 800d05a:	681a      	ldr	r2, [r3, #0]
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d064:	4b14      	ldr	r3, [pc, #80]	; (800d0b8 <prvAddNewTaskToReadyList+0xb8>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	429a      	cmp	r2, r3
 800d06a:	d903      	bls.n	800d074 <prvAddNewTaskToReadyList+0x74>
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d070:	4a11      	ldr	r2, [pc, #68]	; (800d0b8 <prvAddNewTaskToReadyList+0xb8>)
 800d072:	6013      	str	r3, [r2, #0]
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d078:	4613      	mov	r3, r2
 800d07a:	009b      	lsls	r3, r3, #2
 800d07c:	4413      	add	r3, r2
 800d07e:	009b      	lsls	r3, r3, #2
 800d080:	4a0e      	ldr	r2, [pc, #56]	; (800d0bc <prvAddNewTaskToReadyList+0xbc>)
 800d082:	441a      	add	r2, r3
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	3304      	adds	r3, #4
 800d088:	4619      	mov	r1, r3
 800d08a:	4610      	mov	r0, r2
 800d08c:	f7ff f839 	bl	800c102 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d090:	f001 f9f8 	bl	800e484 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d094:	4b06      	ldr	r3, [pc, #24]	; (800d0b0 <prvAddNewTaskToReadyList+0xb0>)
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d001      	beq.n	800d0a0 <prvAddNewTaskToReadyList+0xa0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d09c:	4b03      	ldr	r3, [pc, #12]	; (800d0ac <prvAddNewTaskToReadyList+0xac>)
 800d09e:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d0a0:	bf00      	nop
 800d0a2:	3708      	adds	r7, #8
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}
 800d0a8:	20001f28 	.word	0x20001f28
 800d0ac:	20001a54 	.word	0x20001a54
 800d0b0:	20001f34 	.word	0x20001f34
 800d0b4:	20001f44 	.word	0x20001f44
 800d0b8:	20001f30 	.word	0x20001f30
 800d0bc:	20001a58 	.word	0x20001a58

0800d0c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b084      	sub	sp, #16
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d017      	beq.n	800d102 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d0d2:	4b13      	ldr	r3, [pc, #76]	; (800d120 <vTaskDelay+0x60>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d00a      	beq.n	800d0f0 <vTaskDelay+0x30>
	__asm volatile
 800d0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0de:	f383 8811 	msr	BASEPRI, r3
 800d0e2:	f3bf 8f6f 	isb	sy
 800d0e6:	f3bf 8f4f 	dsb	sy
 800d0ea:	60bb      	str	r3, [r7, #8]
}
 800d0ec:	bf00      	nop
 800d0ee:	e7fe      	b.n	800d0ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d0f0:	f000 f88a 	bl	800d208 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d0f4:	2100      	movs	r1, #0
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f000 fcc6 	bl	800da88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d0fc:	f000 f892 	bl	800d224 <xTaskResumeAll>
 800d100:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d107      	bne.n	800d118 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d108:	4b06      	ldr	r3, [pc, #24]	; (800d124 <vTaskDelay+0x64>)
 800d10a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d10e:	601a      	str	r2, [r3, #0]
 800d110:	f3bf 8f4f 	dsb	sy
 800d114:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d118:	bf00      	nop
 800d11a:	3710      	adds	r7, #16
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bd80      	pop	{r7, pc}
 800d120:	20001f50 	.word	0x20001f50
 800d124:	e000ed04 	.word	0xe000ed04

0800d128 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b08a      	sub	sp, #40	; 0x28
 800d12c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d12e:	2300      	movs	r3, #0
 800d130:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d132:	2300      	movs	r3, #0
 800d134:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d136:	463a      	mov	r2, r7
 800d138:	1d39      	adds	r1, r7, #4
 800d13a:	f107 0308 	add.w	r3, r7, #8
 800d13e:	4618      	mov	r0, r3
 800d140:	f7fe ff7e 	bl	800c040 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d144:	6839      	ldr	r1, [r7, #0]
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	68ba      	ldr	r2, [r7, #8]
 800d14a:	9202      	str	r2, [sp, #8]
 800d14c:	9301      	str	r3, [sp, #4]
 800d14e:	2300      	movs	r3, #0
 800d150:	9300      	str	r3, [sp, #0]
 800d152:	2300      	movs	r3, #0
 800d154:	460a      	mov	r2, r1
 800d156:	4924      	ldr	r1, [pc, #144]	; (800d1e8 <vTaskStartScheduler+0xc0>)
 800d158:	4824      	ldr	r0, [pc, #144]	; (800d1ec <vTaskStartScheduler+0xc4>)
 800d15a:	f7ff fe09 	bl	800cd70 <xTaskCreateStatic>
 800d15e:	4603      	mov	r3, r0
 800d160:	4a23      	ldr	r2, [pc, #140]	; (800d1f0 <vTaskStartScheduler+0xc8>)
 800d162:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d164:	4b22      	ldr	r3, [pc, #136]	; (800d1f0 <vTaskStartScheduler+0xc8>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d002      	beq.n	800d172 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d16c:	2301      	movs	r3, #1
 800d16e:	617b      	str	r3, [r7, #20]
 800d170:	e001      	b.n	800d176 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d172:	2300      	movs	r3, #0
 800d174:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	2b01      	cmp	r3, #1
 800d17a:	d102      	bne.n	800d182 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d17c:	f000 fcd8 	bl	800db30 <xTimerCreateTimerTask>
 800d180:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	2b01      	cmp	r3, #1
 800d186:	d11b      	bne.n	800d1c0 <vTaskStartScheduler+0x98>
	__asm volatile
 800d188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d18c:	f383 8811 	msr	BASEPRI, r3
 800d190:	f3bf 8f6f 	isb	sy
 800d194:	f3bf 8f4f 	dsb	sy
 800d198:	613b      	str	r3, [r7, #16]
}
 800d19a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d19c:	4b15      	ldr	r3, [pc, #84]	; (800d1f4 <vTaskStartScheduler+0xcc>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	3354      	adds	r3, #84	; 0x54
 800d1a2:	4a15      	ldr	r2, [pc, #84]	; (800d1f8 <vTaskStartScheduler+0xd0>)
 800d1a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d1a6:	4b15      	ldr	r3, [pc, #84]	; (800d1fc <vTaskStartScheduler+0xd4>)
 800d1a8:	f04f 32ff 	mov.w	r2, #4294967295
 800d1ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d1ae:	4b14      	ldr	r3, [pc, #80]	; (800d200 <vTaskStartScheduler+0xd8>)
 800d1b0:	2201      	movs	r2, #1
 800d1b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d1b4:	4b13      	ldr	r3, [pc, #76]	; (800d204 <vTaskStartScheduler+0xdc>)
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d1ba:	f001 f891 	bl	800e2e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d1be:	e00e      	b.n	800d1de <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d1c0:	697b      	ldr	r3, [r7, #20]
 800d1c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1c6:	d10a      	bne.n	800d1de <vTaskStartScheduler+0xb6>
	__asm volatile
 800d1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1cc:	f383 8811 	msr	BASEPRI, r3
 800d1d0:	f3bf 8f6f 	isb	sy
 800d1d4:	f3bf 8f4f 	dsb	sy
 800d1d8:	60fb      	str	r3, [r7, #12]
}
 800d1da:	bf00      	nop
 800d1dc:	e7fe      	b.n	800d1dc <vTaskStartScheduler+0xb4>
}
 800d1de:	bf00      	nop
 800d1e0:	3718      	adds	r7, #24
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bd80      	pop	{r7, pc}
 800d1e6:	bf00      	nop
 800d1e8:	08013464 	.word	0x08013464
 800d1ec:	0800d7c9 	.word	0x0800d7c9
 800d1f0:	20001f4c 	.word	0x20001f4c
 800d1f4:	20001a54 	.word	0x20001a54
 800d1f8:	2000006c 	.word	0x2000006c
 800d1fc:	20001f48 	.word	0x20001f48
 800d200:	20001f34 	.word	0x20001f34
 800d204:	20001f2c 	.word	0x20001f2c

0800d208 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d208:	b480      	push	{r7}
 800d20a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d20c:	4b04      	ldr	r3, [pc, #16]	; (800d220 <vTaskSuspendAll+0x18>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	3301      	adds	r3, #1
 800d212:	4a03      	ldr	r2, [pc, #12]	; (800d220 <vTaskSuspendAll+0x18>)
 800d214:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d216:	bf00      	nop
 800d218:	46bd      	mov	sp, r7
 800d21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21e:	4770      	bx	lr
 800d220:	20001f50 	.word	0x20001f50

0800d224 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b084      	sub	sp, #16
 800d228:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d22a:	2300      	movs	r3, #0
 800d22c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d22e:	2300      	movs	r3, #0
 800d230:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d232:	4b3c      	ldr	r3, [pc, #240]	; (800d324 <xTaskResumeAll+0x100>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d10a      	bne.n	800d250 <xTaskResumeAll+0x2c>
	__asm volatile
 800d23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d23e:	f383 8811 	msr	BASEPRI, r3
 800d242:	f3bf 8f6f 	isb	sy
 800d246:	f3bf 8f4f 	dsb	sy
 800d24a:	603b      	str	r3, [r7, #0]
}
 800d24c:	bf00      	nop
 800d24e:	e7fe      	b.n	800d24e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d250:	f001 f8e8 	bl	800e424 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d254:	4b33      	ldr	r3, [pc, #204]	; (800d324 <xTaskResumeAll+0x100>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	3b01      	subs	r3, #1
 800d25a:	4a32      	ldr	r2, [pc, #200]	; (800d324 <xTaskResumeAll+0x100>)
 800d25c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d25e:	4b31      	ldr	r3, [pc, #196]	; (800d324 <xTaskResumeAll+0x100>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d156      	bne.n	800d314 <xTaskResumeAll+0xf0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d266:	4b30      	ldr	r3, [pc, #192]	; (800d328 <xTaskResumeAll+0x104>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d052      	beq.n	800d314 <xTaskResumeAll+0xf0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d26e:	e02f      	b.n	800d2d0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d270:	4b2e      	ldr	r3, [pc, #184]	; (800d32c <xTaskResumeAll+0x108>)
 800d272:	68db      	ldr	r3, [r3, #12]
 800d274:	68db      	ldr	r3, [r3, #12]
 800d276:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	3318      	adds	r3, #24
 800d27c:	4618      	mov	r0, r3
 800d27e:	f7fe ff9d 	bl	800c1bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	3304      	adds	r3, #4
 800d286:	4618      	mov	r0, r3
 800d288:	f7fe ff98 	bl	800c1bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d290:	4b27      	ldr	r3, [pc, #156]	; (800d330 <xTaskResumeAll+0x10c>)
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	429a      	cmp	r2, r3
 800d296:	d903      	bls.n	800d2a0 <xTaskResumeAll+0x7c>
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d29c:	4a24      	ldr	r2, [pc, #144]	; (800d330 <xTaskResumeAll+0x10c>)
 800d29e:	6013      	str	r3, [r2, #0]
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2a4:	4613      	mov	r3, r2
 800d2a6:	009b      	lsls	r3, r3, #2
 800d2a8:	4413      	add	r3, r2
 800d2aa:	009b      	lsls	r3, r3, #2
 800d2ac:	4a21      	ldr	r2, [pc, #132]	; (800d334 <xTaskResumeAll+0x110>)
 800d2ae:	441a      	add	r2, r3
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	3304      	adds	r3, #4
 800d2b4:	4619      	mov	r1, r3
 800d2b6:	4610      	mov	r0, r2
 800d2b8:	f7fe ff23 	bl	800c102 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2c0:	4b1d      	ldr	r3, [pc, #116]	; (800d338 <xTaskResumeAll+0x114>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2c6:	429a      	cmp	r2, r3
 800d2c8:	d302      	bcc.n	800d2d0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d2ca:	4b1c      	ldr	r3, [pc, #112]	; (800d33c <xTaskResumeAll+0x118>)
 800d2cc:	2201      	movs	r2, #1
 800d2ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d2d0:	4b16      	ldr	r3, [pc, #88]	; (800d32c <xTaskResumeAll+0x108>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d1cb      	bne.n	800d270 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d001      	beq.n	800d2e2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d2de:	f000 fb27 	bl	800d930 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d2e2:	4b17      	ldr	r3, [pc, #92]	; (800d340 <xTaskResumeAll+0x11c>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d2e8:	68bb      	ldr	r3, [r7, #8]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d010      	beq.n	800d310 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d2ee:	f000 f839 	bl	800d364 <xTaskIncrementTick>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d002      	beq.n	800d2fe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d2f8:	4b10      	ldr	r3, [pc, #64]	; (800d33c <xTaskResumeAll+0x118>)
 800d2fa:	2201      	movs	r2, #1
 800d2fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	3b01      	subs	r3, #1
 800d302:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d304:	68bb      	ldr	r3, [r7, #8]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d1f1      	bne.n	800d2ee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d30a:	4b0d      	ldr	r3, [pc, #52]	; (800d340 <xTaskResumeAll+0x11c>)
 800d30c:	2200      	movs	r2, #0
 800d30e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d310:	4b0a      	ldr	r3, [pc, #40]	; (800d33c <xTaskResumeAll+0x118>)
 800d312:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d314:	f001 f8b6 	bl	800e484 <vPortExitCritical>

	return xAlreadyYielded;
 800d318:	687b      	ldr	r3, [r7, #4]
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	3710      	adds	r7, #16
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}
 800d322:	bf00      	nop
 800d324:	20001f50 	.word	0x20001f50
 800d328:	20001f28 	.word	0x20001f28
 800d32c:	20001ee8 	.word	0x20001ee8
 800d330:	20001f30 	.word	0x20001f30
 800d334:	20001a58 	.word	0x20001a58
 800d338:	20001a54 	.word	0x20001a54
 800d33c:	20001f3c 	.word	0x20001f3c
 800d340:	20001f38 	.word	0x20001f38

0800d344 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d344:	b480      	push	{r7}
 800d346:	b083      	sub	sp, #12
 800d348:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d34a:	4b05      	ldr	r3, [pc, #20]	; (800d360 <xTaskGetTickCount+0x1c>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d350:	687b      	ldr	r3, [r7, #4]
}
 800d352:	4618      	mov	r0, r3
 800d354:	370c      	adds	r7, #12
 800d356:	46bd      	mov	sp, r7
 800d358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35c:	4770      	bx	lr
 800d35e:	bf00      	nop
 800d360:	20001f2c 	.word	0x20001f2c

0800d364 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b086      	sub	sp, #24
 800d368:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d36a:	2300      	movs	r3, #0
 800d36c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d36e:	4b3f      	ldr	r3, [pc, #252]	; (800d46c <xTaskIncrementTick+0x108>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d170      	bne.n	800d458 <xTaskIncrementTick+0xf4>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d376:	4b3e      	ldr	r3, [pc, #248]	; (800d470 <xTaskIncrementTick+0x10c>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	3301      	adds	r3, #1
 800d37c:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d37e:	4a3c      	ldr	r2, [pc, #240]	; (800d470 <xTaskIncrementTick+0x10c>)
 800d380:	693b      	ldr	r3, [r7, #16]
 800d382:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d384:	693b      	ldr	r3, [r7, #16]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d120      	bne.n	800d3cc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800d38a:	4b3a      	ldr	r3, [pc, #232]	; (800d474 <xTaskIncrementTick+0x110>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d00a      	beq.n	800d3aa <xTaskIncrementTick+0x46>
	__asm volatile
 800d394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d398:	f383 8811 	msr	BASEPRI, r3
 800d39c:	f3bf 8f6f 	isb	sy
 800d3a0:	f3bf 8f4f 	dsb	sy
 800d3a4:	603b      	str	r3, [r7, #0]
}
 800d3a6:	bf00      	nop
 800d3a8:	e7fe      	b.n	800d3a8 <xTaskIncrementTick+0x44>
 800d3aa:	4b32      	ldr	r3, [pc, #200]	; (800d474 <xTaskIncrementTick+0x110>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	60fb      	str	r3, [r7, #12]
 800d3b0:	4b31      	ldr	r3, [pc, #196]	; (800d478 <xTaskIncrementTick+0x114>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	4a2f      	ldr	r2, [pc, #188]	; (800d474 <xTaskIncrementTick+0x110>)
 800d3b6:	6013      	str	r3, [r2, #0]
 800d3b8:	4a2f      	ldr	r2, [pc, #188]	; (800d478 <xTaskIncrementTick+0x114>)
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	6013      	str	r3, [r2, #0]
 800d3be:	4b2f      	ldr	r3, [pc, #188]	; (800d47c <xTaskIncrementTick+0x118>)
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	3301      	adds	r3, #1
 800d3c4:	4a2d      	ldr	r2, [pc, #180]	; (800d47c <xTaskIncrementTick+0x118>)
 800d3c6:	6013      	str	r3, [r2, #0]
 800d3c8:	f000 fab2 	bl	800d930 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d3cc:	4b2c      	ldr	r3, [pc, #176]	; (800d480 <xTaskIncrementTick+0x11c>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	693a      	ldr	r2, [r7, #16]
 800d3d2:	429a      	cmp	r2, r3
 800d3d4:	d345      	bcc.n	800d462 <xTaskIncrementTick+0xfe>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d3d6:	4b27      	ldr	r3, [pc, #156]	; (800d474 <xTaskIncrementTick+0x110>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d104      	bne.n	800d3ea <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3e0:	4b27      	ldr	r3, [pc, #156]	; (800d480 <xTaskIncrementTick+0x11c>)
 800d3e2:	f04f 32ff 	mov.w	r2, #4294967295
 800d3e6:	601a      	str	r2, [r3, #0]
					break;
 800d3e8:	e03b      	b.n	800d462 <xTaskIncrementTick+0xfe>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3ea:	4b22      	ldr	r3, [pc, #136]	; (800d474 <xTaskIncrementTick+0x110>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	68db      	ldr	r3, [r3, #12]
 800d3f0:	68db      	ldr	r3, [r3, #12]
 800d3f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	685b      	ldr	r3, [r3, #4]
 800d3f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d3fa:	693a      	ldr	r2, [r7, #16]
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	429a      	cmp	r2, r3
 800d400:	d203      	bcs.n	800d40a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d402:	4a1f      	ldr	r2, [pc, #124]	; (800d480 <xTaskIncrementTick+0x11c>)
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d408:	e02b      	b.n	800d462 <xTaskIncrementTick+0xfe>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	3304      	adds	r3, #4
 800d40e:	4618      	mov	r0, r3
 800d410:	f7fe fed4 	bl	800c1bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d004      	beq.n	800d426 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	3318      	adds	r3, #24
 800d420:	4618      	mov	r0, r3
 800d422:	f7fe fecb 	bl	800c1bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d426:	68bb      	ldr	r3, [r7, #8]
 800d428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d42a:	4b16      	ldr	r3, [pc, #88]	; (800d484 <xTaskIncrementTick+0x120>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	429a      	cmp	r2, r3
 800d430:	d903      	bls.n	800d43a <xTaskIncrementTick+0xd6>
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d436:	4a13      	ldr	r2, [pc, #76]	; (800d484 <xTaskIncrementTick+0x120>)
 800d438:	6013      	str	r3, [r2, #0]
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d43e:	4613      	mov	r3, r2
 800d440:	009b      	lsls	r3, r3, #2
 800d442:	4413      	add	r3, r2
 800d444:	009b      	lsls	r3, r3, #2
 800d446:	4a10      	ldr	r2, [pc, #64]	; (800d488 <xTaskIncrementTick+0x124>)
 800d448:	441a      	add	r2, r3
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	3304      	adds	r3, #4
 800d44e:	4619      	mov	r1, r3
 800d450:	4610      	mov	r0, r2
 800d452:	f7fe fe56 	bl	800c102 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d456:	e7be      	b.n	800d3d6 <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d458:	4b0c      	ldr	r3, [pc, #48]	; (800d48c <xTaskIncrementTick+0x128>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	3301      	adds	r3, #1
 800d45e:	4a0b      	ldr	r2, [pc, #44]	; (800d48c <xTaskIncrementTick+0x128>)
 800d460:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d462:	697b      	ldr	r3, [r7, #20]
}
 800d464:	4618      	mov	r0, r3
 800d466:	3718      	adds	r7, #24
 800d468:	46bd      	mov	sp, r7
 800d46a:	bd80      	pop	{r7, pc}
 800d46c:	20001f50 	.word	0x20001f50
 800d470:	20001f2c 	.word	0x20001f2c
 800d474:	20001ee0 	.word	0x20001ee0
 800d478:	20001ee4 	.word	0x20001ee4
 800d47c:	20001f40 	.word	0x20001f40
 800d480:	20001f48 	.word	0x20001f48
 800d484:	20001f30 	.word	0x20001f30
 800d488:	20001a58 	.word	0x20001a58
 800d48c:	20001f38 	.word	0x20001f38

0800d490 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d490:	b480      	push	{r7}
 800d492:	b085      	sub	sp, #20
 800d494:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d496:	4b2a      	ldr	r3, [pc, #168]	; (800d540 <vTaskSwitchContext+0xb0>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d003      	beq.n	800d4a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d49e:	4b29      	ldr	r3, [pc, #164]	; (800d544 <vTaskSwitchContext+0xb4>)
 800d4a0:	2201      	movs	r2, #1
 800d4a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d4a4:	e046      	b.n	800d534 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800d4a6:	4b27      	ldr	r3, [pc, #156]	; (800d544 <vTaskSwitchContext+0xb4>)
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4ac:	4b26      	ldr	r3, [pc, #152]	; (800d548 <vTaskSwitchContext+0xb8>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	60fb      	str	r3, [r7, #12]
 800d4b2:	e010      	b.n	800d4d6 <vTaskSwitchContext+0x46>
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d10a      	bne.n	800d4d0 <vTaskSwitchContext+0x40>
	__asm volatile
 800d4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4be:	f383 8811 	msr	BASEPRI, r3
 800d4c2:	f3bf 8f6f 	isb	sy
 800d4c6:	f3bf 8f4f 	dsb	sy
 800d4ca:	607b      	str	r3, [r7, #4]
}
 800d4cc:	bf00      	nop
 800d4ce:	e7fe      	b.n	800d4ce <vTaskSwitchContext+0x3e>
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	3b01      	subs	r3, #1
 800d4d4:	60fb      	str	r3, [r7, #12]
 800d4d6:	491d      	ldr	r1, [pc, #116]	; (800d54c <vTaskSwitchContext+0xbc>)
 800d4d8:	68fa      	ldr	r2, [r7, #12]
 800d4da:	4613      	mov	r3, r2
 800d4dc:	009b      	lsls	r3, r3, #2
 800d4de:	4413      	add	r3, r2
 800d4e0:	009b      	lsls	r3, r3, #2
 800d4e2:	440b      	add	r3, r1
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d0e4      	beq.n	800d4b4 <vTaskSwitchContext+0x24>
 800d4ea:	68fa      	ldr	r2, [r7, #12]
 800d4ec:	4613      	mov	r3, r2
 800d4ee:	009b      	lsls	r3, r3, #2
 800d4f0:	4413      	add	r3, r2
 800d4f2:	009b      	lsls	r3, r3, #2
 800d4f4:	4a15      	ldr	r2, [pc, #84]	; (800d54c <vTaskSwitchContext+0xbc>)
 800d4f6:	4413      	add	r3, r2
 800d4f8:	60bb      	str	r3, [r7, #8]
 800d4fa:	68bb      	ldr	r3, [r7, #8]
 800d4fc:	685b      	ldr	r3, [r3, #4]
 800d4fe:	685a      	ldr	r2, [r3, #4]
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	605a      	str	r2, [r3, #4]
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	685a      	ldr	r2, [r3, #4]
 800d508:	68bb      	ldr	r3, [r7, #8]
 800d50a:	3308      	adds	r3, #8
 800d50c:	429a      	cmp	r2, r3
 800d50e:	d104      	bne.n	800d51a <vTaskSwitchContext+0x8a>
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	685b      	ldr	r3, [r3, #4]
 800d514:	685a      	ldr	r2, [r3, #4]
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	605a      	str	r2, [r3, #4]
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	685b      	ldr	r3, [r3, #4]
 800d51e:	68db      	ldr	r3, [r3, #12]
 800d520:	4a0b      	ldr	r2, [pc, #44]	; (800d550 <vTaskSwitchContext+0xc0>)
 800d522:	6013      	str	r3, [r2, #0]
 800d524:	4a08      	ldr	r2, [pc, #32]	; (800d548 <vTaskSwitchContext+0xb8>)
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d52a:	4b09      	ldr	r3, [pc, #36]	; (800d550 <vTaskSwitchContext+0xc0>)
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	3354      	adds	r3, #84	; 0x54
 800d530:	4a08      	ldr	r2, [pc, #32]	; (800d554 <vTaskSwitchContext+0xc4>)
 800d532:	6013      	str	r3, [r2, #0]
}
 800d534:	bf00      	nop
 800d536:	3714      	adds	r7, #20
 800d538:	46bd      	mov	sp, r7
 800d53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53e:	4770      	bx	lr
 800d540:	20001f50 	.word	0x20001f50
 800d544:	20001f3c 	.word	0x20001f3c
 800d548:	20001f30 	.word	0x20001f30
 800d54c:	20001a58 	.word	0x20001a58
 800d550:	20001a54 	.word	0x20001a54
 800d554:	2000006c 	.word	0x2000006c

0800d558 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b084      	sub	sp, #16
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
 800d560:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d10a      	bne.n	800d57e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d56c:	f383 8811 	msr	BASEPRI, r3
 800d570:	f3bf 8f6f 	isb	sy
 800d574:	f3bf 8f4f 	dsb	sy
 800d578:	60fb      	str	r3, [r7, #12]
}
 800d57a:	bf00      	nop
 800d57c:	e7fe      	b.n	800d57c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d57e:	4b07      	ldr	r3, [pc, #28]	; (800d59c <vTaskPlaceOnEventList+0x44>)
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	3318      	adds	r3, #24
 800d584:	4619      	mov	r1, r3
 800d586:	6878      	ldr	r0, [r7, #4]
 800d588:	f7fe fddf 	bl	800c14a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d58c:	2101      	movs	r1, #1
 800d58e:	6838      	ldr	r0, [r7, #0]
 800d590:	f000 fa7a 	bl	800da88 <prvAddCurrentTaskToDelayedList>
}
 800d594:	bf00      	nop
 800d596:	3710      	adds	r7, #16
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}
 800d59c:	20001a54 	.word	0x20001a54

0800d5a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b086      	sub	sp, #24
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	60f8      	str	r0, [r7, #12]
 800d5a8:	60b9      	str	r1, [r7, #8]
 800d5aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d10a      	bne.n	800d5c8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5b6:	f383 8811 	msr	BASEPRI, r3
 800d5ba:	f3bf 8f6f 	isb	sy
 800d5be:	f3bf 8f4f 	dsb	sy
 800d5c2:	617b      	str	r3, [r7, #20]
}
 800d5c4:	bf00      	nop
 800d5c6:	e7fe      	b.n	800d5c6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d5c8:	4b0a      	ldr	r3, [pc, #40]	; (800d5f4 <vTaskPlaceOnEventListRestricted+0x54>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	3318      	adds	r3, #24
 800d5ce:	4619      	mov	r1, r3
 800d5d0:	68f8      	ldr	r0, [r7, #12]
 800d5d2:	f7fe fd96 	bl	800c102 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d002      	beq.n	800d5e2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d5dc:	f04f 33ff 	mov.w	r3, #4294967295
 800d5e0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d5e2:	6879      	ldr	r1, [r7, #4]
 800d5e4:	68b8      	ldr	r0, [r7, #8]
 800d5e6:	f000 fa4f 	bl	800da88 <prvAddCurrentTaskToDelayedList>
	}
 800d5ea:	bf00      	nop
 800d5ec:	3718      	adds	r7, #24
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bd80      	pop	{r7, pc}
 800d5f2:	bf00      	nop
 800d5f4:	20001a54 	.word	0x20001a54

0800d5f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b086      	sub	sp, #24
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	68db      	ldr	r3, [r3, #12]
 800d604:	68db      	ldr	r3, [r3, #12]
 800d606:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d608:	693b      	ldr	r3, [r7, #16]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d10a      	bne.n	800d624 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d612:	f383 8811 	msr	BASEPRI, r3
 800d616:	f3bf 8f6f 	isb	sy
 800d61a:	f3bf 8f4f 	dsb	sy
 800d61e:	60fb      	str	r3, [r7, #12]
}
 800d620:	bf00      	nop
 800d622:	e7fe      	b.n	800d622 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d624:	693b      	ldr	r3, [r7, #16]
 800d626:	3318      	adds	r3, #24
 800d628:	4618      	mov	r0, r3
 800d62a:	f7fe fdc7 	bl	800c1bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d62e:	4b1e      	ldr	r3, [pc, #120]	; (800d6a8 <xTaskRemoveFromEventList+0xb0>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d11d      	bne.n	800d672 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d636:	693b      	ldr	r3, [r7, #16]
 800d638:	3304      	adds	r3, #4
 800d63a:	4618      	mov	r0, r3
 800d63c:	f7fe fdbe 	bl	800c1bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d640:	693b      	ldr	r3, [r7, #16]
 800d642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d644:	4b19      	ldr	r3, [pc, #100]	; (800d6ac <xTaskRemoveFromEventList+0xb4>)
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	429a      	cmp	r2, r3
 800d64a:	d903      	bls.n	800d654 <xTaskRemoveFromEventList+0x5c>
 800d64c:	693b      	ldr	r3, [r7, #16]
 800d64e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d650:	4a16      	ldr	r2, [pc, #88]	; (800d6ac <xTaskRemoveFromEventList+0xb4>)
 800d652:	6013      	str	r3, [r2, #0]
 800d654:	693b      	ldr	r3, [r7, #16]
 800d656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d658:	4613      	mov	r3, r2
 800d65a:	009b      	lsls	r3, r3, #2
 800d65c:	4413      	add	r3, r2
 800d65e:	009b      	lsls	r3, r3, #2
 800d660:	4a13      	ldr	r2, [pc, #76]	; (800d6b0 <xTaskRemoveFromEventList+0xb8>)
 800d662:	441a      	add	r2, r3
 800d664:	693b      	ldr	r3, [r7, #16]
 800d666:	3304      	adds	r3, #4
 800d668:	4619      	mov	r1, r3
 800d66a:	4610      	mov	r0, r2
 800d66c:	f7fe fd49 	bl	800c102 <vListInsertEnd>
 800d670:	e005      	b.n	800d67e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d672:	693b      	ldr	r3, [r7, #16]
 800d674:	3318      	adds	r3, #24
 800d676:	4619      	mov	r1, r3
 800d678:	480e      	ldr	r0, [pc, #56]	; (800d6b4 <xTaskRemoveFromEventList+0xbc>)
 800d67a:	f7fe fd42 	bl	800c102 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d67e:	693b      	ldr	r3, [r7, #16]
 800d680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d682:	4b0d      	ldr	r3, [pc, #52]	; (800d6b8 <xTaskRemoveFromEventList+0xc0>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d688:	429a      	cmp	r2, r3
 800d68a:	d905      	bls.n	800d698 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d68c:	2301      	movs	r3, #1
 800d68e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d690:	4b0a      	ldr	r3, [pc, #40]	; (800d6bc <xTaskRemoveFromEventList+0xc4>)
 800d692:	2201      	movs	r2, #1
 800d694:	601a      	str	r2, [r3, #0]
 800d696:	e001      	b.n	800d69c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d698:	2300      	movs	r3, #0
 800d69a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d69c:	697b      	ldr	r3, [r7, #20]
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	3718      	adds	r7, #24
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}
 800d6a6:	bf00      	nop
 800d6a8:	20001f50 	.word	0x20001f50
 800d6ac:	20001f30 	.word	0x20001f30
 800d6b0:	20001a58 	.word	0x20001a58
 800d6b4:	20001ee8 	.word	0x20001ee8
 800d6b8:	20001a54 	.word	0x20001a54
 800d6bc:	20001f3c 	.word	0x20001f3c

0800d6c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b083      	sub	sp, #12
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d6c8:	4b06      	ldr	r3, [pc, #24]	; (800d6e4 <vTaskInternalSetTimeOutState+0x24>)
 800d6ca:	681a      	ldr	r2, [r3, #0]
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d6d0:	4b05      	ldr	r3, [pc, #20]	; (800d6e8 <vTaskInternalSetTimeOutState+0x28>)
 800d6d2:	681a      	ldr	r2, [r3, #0]
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	605a      	str	r2, [r3, #4]
}
 800d6d8:	bf00      	nop
 800d6da:	370c      	adds	r7, #12
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e2:	4770      	bx	lr
 800d6e4:	20001f40 	.word	0x20001f40
 800d6e8:	20001f2c 	.word	0x20001f2c

0800d6ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b088      	sub	sp, #32
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d10a      	bne.n	800d712 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d700:	f383 8811 	msr	BASEPRI, r3
 800d704:	f3bf 8f6f 	isb	sy
 800d708:	f3bf 8f4f 	dsb	sy
 800d70c:	613b      	str	r3, [r7, #16]
}
 800d70e:	bf00      	nop
 800d710:	e7fe      	b.n	800d710 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d10a      	bne.n	800d72e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d71c:	f383 8811 	msr	BASEPRI, r3
 800d720:	f3bf 8f6f 	isb	sy
 800d724:	f3bf 8f4f 	dsb	sy
 800d728:	60fb      	str	r3, [r7, #12]
}
 800d72a:	bf00      	nop
 800d72c:	e7fe      	b.n	800d72c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d72e:	f000 fe79 	bl	800e424 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d732:	4b1d      	ldr	r3, [pc, #116]	; (800d7a8 <xTaskCheckForTimeOut+0xbc>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	685b      	ldr	r3, [r3, #4]
 800d73c:	69ba      	ldr	r2, [r7, #24]
 800d73e:	1ad3      	subs	r3, r2, r3
 800d740:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d74a:	d102      	bne.n	800d752 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d74c:	2300      	movs	r3, #0
 800d74e:	61fb      	str	r3, [r7, #28]
 800d750:	e023      	b.n	800d79a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681a      	ldr	r2, [r3, #0]
 800d756:	4b15      	ldr	r3, [pc, #84]	; (800d7ac <xTaskCheckForTimeOut+0xc0>)
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	429a      	cmp	r2, r3
 800d75c:	d007      	beq.n	800d76e <xTaskCheckForTimeOut+0x82>
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	685b      	ldr	r3, [r3, #4]
 800d762:	69ba      	ldr	r2, [r7, #24]
 800d764:	429a      	cmp	r2, r3
 800d766:	d302      	bcc.n	800d76e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d768:	2301      	movs	r3, #1
 800d76a:	61fb      	str	r3, [r7, #28]
 800d76c:	e015      	b.n	800d79a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	697a      	ldr	r2, [r7, #20]
 800d774:	429a      	cmp	r2, r3
 800d776:	d20b      	bcs.n	800d790 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	681a      	ldr	r2, [r3, #0]
 800d77c:	697b      	ldr	r3, [r7, #20]
 800d77e:	1ad2      	subs	r2, r2, r3
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	f7ff ff9b 	bl	800d6c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d78a:	2300      	movs	r3, #0
 800d78c:	61fb      	str	r3, [r7, #28]
 800d78e:	e004      	b.n	800d79a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	2200      	movs	r2, #0
 800d794:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d796:	2301      	movs	r3, #1
 800d798:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d79a:	f000 fe73 	bl	800e484 <vPortExitCritical>

	return xReturn;
 800d79e:	69fb      	ldr	r3, [r7, #28]
}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3720      	adds	r7, #32
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}
 800d7a8:	20001f2c 	.word	0x20001f2c
 800d7ac:	20001f40 	.word	0x20001f40

0800d7b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d7b4:	4b03      	ldr	r3, [pc, #12]	; (800d7c4 <vTaskMissedYield+0x14>)
 800d7b6:	2201      	movs	r2, #1
 800d7b8:	601a      	str	r2, [r3, #0]
}
 800d7ba:	bf00      	nop
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c2:	4770      	bx	lr
 800d7c4:	20001f3c 	.word	0x20001f3c

0800d7c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b082      	sub	sp, #8
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d7d0:	f000 f84c 	bl	800d86c <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 800d7d4:	4b04      	ldr	r3, [pc, #16]	; (800d7e8 <prvIdleTask+0x20>)
 800d7d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7da:	601a      	str	r2, [r3, #0]
 800d7dc:	f3bf 8f4f 	dsb	sy
 800d7e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d7e4:	e7f4      	b.n	800d7d0 <prvIdleTask+0x8>
 800d7e6:	bf00      	nop
 800d7e8:	e000ed04 	.word	0xe000ed04

0800d7ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b082      	sub	sp, #8
 800d7f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	607b      	str	r3, [r7, #4]
 800d7f6:	e00c      	b.n	800d812 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d7f8:	687a      	ldr	r2, [r7, #4]
 800d7fa:	4613      	mov	r3, r2
 800d7fc:	009b      	lsls	r3, r3, #2
 800d7fe:	4413      	add	r3, r2
 800d800:	009b      	lsls	r3, r3, #2
 800d802:	4a12      	ldr	r2, [pc, #72]	; (800d84c <prvInitialiseTaskLists+0x60>)
 800d804:	4413      	add	r3, r2
 800d806:	4618      	mov	r0, r3
 800d808:	f7fe fc4e 	bl	800c0a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	3301      	adds	r3, #1
 800d810:	607b      	str	r3, [r7, #4]
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2b37      	cmp	r3, #55	; 0x37
 800d816:	d9ef      	bls.n	800d7f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d818:	480d      	ldr	r0, [pc, #52]	; (800d850 <prvInitialiseTaskLists+0x64>)
 800d81a:	f7fe fc45 	bl	800c0a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d81e:	480d      	ldr	r0, [pc, #52]	; (800d854 <prvInitialiseTaskLists+0x68>)
 800d820:	f7fe fc42 	bl	800c0a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d824:	480c      	ldr	r0, [pc, #48]	; (800d858 <prvInitialiseTaskLists+0x6c>)
 800d826:	f7fe fc3f 	bl	800c0a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d82a:	480c      	ldr	r0, [pc, #48]	; (800d85c <prvInitialiseTaskLists+0x70>)
 800d82c:	f7fe fc3c 	bl	800c0a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d830:	480b      	ldr	r0, [pc, #44]	; (800d860 <prvInitialiseTaskLists+0x74>)
 800d832:	f7fe fc39 	bl	800c0a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d836:	4b0b      	ldr	r3, [pc, #44]	; (800d864 <prvInitialiseTaskLists+0x78>)
 800d838:	4a05      	ldr	r2, [pc, #20]	; (800d850 <prvInitialiseTaskLists+0x64>)
 800d83a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d83c:	4b0a      	ldr	r3, [pc, #40]	; (800d868 <prvInitialiseTaskLists+0x7c>)
 800d83e:	4a05      	ldr	r2, [pc, #20]	; (800d854 <prvInitialiseTaskLists+0x68>)
 800d840:	601a      	str	r2, [r3, #0]
}
 800d842:	bf00      	nop
 800d844:	3708      	adds	r7, #8
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}
 800d84a:	bf00      	nop
 800d84c:	20001a58 	.word	0x20001a58
 800d850:	20001eb8 	.word	0x20001eb8
 800d854:	20001ecc 	.word	0x20001ecc
 800d858:	20001ee8 	.word	0x20001ee8
 800d85c:	20001efc 	.word	0x20001efc
 800d860:	20001f14 	.word	0x20001f14
 800d864:	20001ee0 	.word	0x20001ee0
 800d868:	20001ee4 	.word	0x20001ee4

0800d86c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b082      	sub	sp, #8
 800d870:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d872:	e019      	b.n	800d8a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d874:	f000 fdd6 	bl	800e424 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d878:	4b10      	ldr	r3, [pc, #64]	; (800d8bc <prvCheckTasksWaitingTermination+0x50>)
 800d87a:	68db      	ldr	r3, [r3, #12]
 800d87c:	68db      	ldr	r3, [r3, #12]
 800d87e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	3304      	adds	r3, #4
 800d884:	4618      	mov	r0, r3
 800d886:	f7fe fc99 	bl	800c1bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d88a:	4b0d      	ldr	r3, [pc, #52]	; (800d8c0 <prvCheckTasksWaitingTermination+0x54>)
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	3b01      	subs	r3, #1
 800d890:	4a0b      	ldr	r2, [pc, #44]	; (800d8c0 <prvCheckTasksWaitingTermination+0x54>)
 800d892:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d894:	4b0b      	ldr	r3, [pc, #44]	; (800d8c4 <prvCheckTasksWaitingTermination+0x58>)
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	3b01      	subs	r3, #1
 800d89a:	4a0a      	ldr	r2, [pc, #40]	; (800d8c4 <prvCheckTasksWaitingTermination+0x58>)
 800d89c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d89e:	f000 fdf1 	bl	800e484 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f000 f810 	bl	800d8c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d8a8:	4b06      	ldr	r3, [pc, #24]	; (800d8c4 <prvCheckTasksWaitingTermination+0x58>)
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d1e1      	bne.n	800d874 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d8b0:	bf00      	nop
 800d8b2:	bf00      	nop
 800d8b4:	3708      	adds	r7, #8
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}
 800d8ba:	bf00      	nop
 800d8bc:	20001efc 	.word	0x20001efc
 800d8c0:	20001f28 	.word	0x20001f28
 800d8c4:	20001f10 	.word	0x20001f10

0800d8c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b084      	sub	sp, #16
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	3354      	adds	r3, #84	; 0x54
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f003 fb23 	bl	8010f20 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d108      	bne.n	800d8f6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	f000 ff89 	bl	800e800 <vPortFree>
				vPortFree( pxTCB );
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f000 ff86 	bl	800e800 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d8f4:	e018      	b.n	800d928 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d8fc:	2b01      	cmp	r3, #1
 800d8fe:	d103      	bne.n	800d908 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f000 ff7d 	bl	800e800 <vPortFree>
	}
 800d906:	e00f      	b.n	800d928 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d90e:	2b02      	cmp	r3, #2
 800d910:	d00a      	beq.n	800d928 <prvDeleteTCB+0x60>
	__asm volatile
 800d912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d916:	f383 8811 	msr	BASEPRI, r3
 800d91a:	f3bf 8f6f 	isb	sy
 800d91e:	f3bf 8f4f 	dsb	sy
 800d922:	60fb      	str	r3, [r7, #12]
}
 800d924:	bf00      	nop
 800d926:	e7fe      	b.n	800d926 <prvDeleteTCB+0x5e>
	}
 800d928:	bf00      	nop
 800d92a:	3710      	adds	r7, #16
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}

0800d930 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d930:	b480      	push	{r7}
 800d932:	b083      	sub	sp, #12
 800d934:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d936:	4b0c      	ldr	r3, [pc, #48]	; (800d968 <prvResetNextTaskUnblockTime+0x38>)
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d104      	bne.n	800d94a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d940:	4b0a      	ldr	r3, [pc, #40]	; (800d96c <prvResetNextTaskUnblockTime+0x3c>)
 800d942:	f04f 32ff 	mov.w	r2, #4294967295
 800d946:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d948:	e008      	b.n	800d95c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d94a:	4b07      	ldr	r3, [pc, #28]	; (800d968 <prvResetNextTaskUnblockTime+0x38>)
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	68db      	ldr	r3, [r3, #12]
 800d950:	68db      	ldr	r3, [r3, #12]
 800d952:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	685b      	ldr	r3, [r3, #4]
 800d958:	4a04      	ldr	r2, [pc, #16]	; (800d96c <prvResetNextTaskUnblockTime+0x3c>)
 800d95a:	6013      	str	r3, [r2, #0]
}
 800d95c:	bf00      	nop
 800d95e:	370c      	adds	r7, #12
 800d960:	46bd      	mov	sp, r7
 800d962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d966:	4770      	bx	lr
 800d968:	20001ee0 	.word	0x20001ee0
 800d96c:	20001f48 	.word	0x20001f48

0800d970 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d970:	b480      	push	{r7}
 800d972:	b083      	sub	sp, #12
 800d974:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d976:	4b0b      	ldr	r3, [pc, #44]	; (800d9a4 <xTaskGetSchedulerState+0x34>)
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d102      	bne.n	800d984 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d97e:	2301      	movs	r3, #1
 800d980:	607b      	str	r3, [r7, #4]
 800d982:	e008      	b.n	800d996 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d984:	4b08      	ldr	r3, [pc, #32]	; (800d9a8 <xTaskGetSchedulerState+0x38>)
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d102      	bne.n	800d992 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d98c:	2302      	movs	r3, #2
 800d98e:	607b      	str	r3, [r7, #4]
 800d990:	e001      	b.n	800d996 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d992:	2300      	movs	r3, #0
 800d994:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d996:	687b      	ldr	r3, [r7, #4]
	}
 800d998:	4618      	mov	r0, r3
 800d99a:	370c      	adds	r7, #12
 800d99c:	46bd      	mov	sp, r7
 800d99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a2:	4770      	bx	lr
 800d9a4:	20001f34 	.word	0x20001f34
 800d9a8:	20001f50 	.word	0x20001f50

0800d9ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b086      	sub	sp, #24
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d056      	beq.n	800da70 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d9c2:	4b2e      	ldr	r3, [pc, #184]	; (800da7c <xTaskPriorityDisinherit+0xd0>)
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	693a      	ldr	r2, [r7, #16]
 800d9c8:	429a      	cmp	r2, r3
 800d9ca:	d00a      	beq.n	800d9e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9d0:	f383 8811 	msr	BASEPRI, r3
 800d9d4:	f3bf 8f6f 	isb	sy
 800d9d8:	f3bf 8f4f 	dsb	sy
 800d9dc:	60fb      	str	r3, [r7, #12]
}
 800d9de:	bf00      	nop
 800d9e0:	e7fe      	b.n	800d9e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d9e2:	693b      	ldr	r3, [r7, #16]
 800d9e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d10a      	bne.n	800da00 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ee:	f383 8811 	msr	BASEPRI, r3
 800d9f2:	f3bf 8f6f 	isb	sy
 800d9f6:	f3bf 8f4f 	dsb	sy
 800d9fa:	60bb      	str	r3, [r7, #8]
}
 800d9fc:	bf00      	nop
 800d9fe:	e7fe      	b.n	800d9fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800da00:	693b      	ldr	r3, [r7, #16]
 800da02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da04:	1e5a      	subs	r2, r3, #1
 800da06:	693b      	ldr	r3, [r7, #16]
 800da08:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800da0a:	693b      	ldr	r3, [r7, #16]
 800da0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da0e:	693b      	ldr	r3, [r7, #16]
 800da10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da12:	429a      	cmp	r2, r3
 800da14:	d02c      	beq.n	800da70 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800da16:	693b      	ldr	r3, [r7, #16]
 800da18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d128      	bne.n	800da70 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da1e:	693b      	ldr	r3, [r7, #16]
 800da20:	3304      	adds	r3, #4
 800da22:	4618      	mov	r0, r3
 800da24:	f7fe fbca 	bl	800c1bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800da28:	693b      	ldr	r3, [r7, #16]
 800da2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800da2c:	693b      	ldr	r3, [r7, #16]
 800da2e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da30:	693b      	ldr	r3, [r7, #16]
 800da32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da34:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800da38:	693b      	ldr	r3, [r7, #16]
 800da3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800da3c:	693b      	ldr	r3, [r7, #16]
 800da3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da40:	4b0f      	ldr	r3, [pc, #60]	; (800da80 <xTaskPriorityDisinherit+0xd4>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	429a      	cmp	r2, r3
 800da46:	d903      	bls.n	800da50 <xTaskPriorityDisinherit+0xa4>
 800da48:	693b      	ldr	r3, [r7, #16]
 800da4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da4c:	4a0c      	ldr	r2, [pc, #48]	; (800da80 <xTaskPriorityDisinherit+0xd4>)
 800da4e:	6013      	str	r3, [r2, #0]
 800da50:	693b      	ldr	r3, [r7, #16]
 800da52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da54:	4613      	mov	r3, r2
 800da56:	009b      	lsls	r3, r3, #2
 800da58:	4413      	add	r3, r2
 800da5a:	009b      	lsls	r3, r3, #2
 800da5c:	4a09      	ldr	r2, [pc, #36]	; (800da84 <xTaskPriorityDisinherit+0xd8>)
 800da5e:	441a      	add	r2, r3
 800da60:	693b      	ldr	r3, [r7, #16]
 800da62:	3304      	adds	r3, #4
 800da64:	4619      	mov	r1, r3
 800da66:	4610      	mov	r0, r2
 800da68:	f7fe fb4b 	bl	800c102 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800da6c:	2301      	movs	r3, #1
 800da6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800da70:	697b      	ldr	r3, [r7, #20]
	}
 800da72:	4618      	mov	r0, r3
 800da74:	3718      	adds	r7, #24
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}
 800da7a:	bf00      	nop
 800da7c:	20001a54 	.word	0x20001a54
 800da80:	20001f30 	.word	0x20001f30
 800da84:	20001a58 	.word	0x20001a58

0800da88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b084      	sub	sp, #16
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
 800da90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800da92:	4b21      	ldr	r3, [pc, #132]	; (800db18 <prvAddCurrentTaskToDelayedList+0x90>)
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da98:	4b20      	ldr	r3, [pc, #128]	; (800db1c <prvAddCurrentTaskToDelayedList+0x94>)
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	3304      	adds	r3, #4
 800da9e:	4618      	mov	r0, r3
 800daa0:	f7fe fb8c 	bl	800c1bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daaa:	d10a      	bne.n	800dac2 <prvAddCurrentTaskToDelayedList+0x3a>
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d007      	beq.n	800dac2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dab2:	4b1a      	ldr	r3, [pc, #104]	; (800db1c <prvAddCurrentTaskToDelayedList+0x94>)
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	3304      	adds	r3, #4
 800dab8:	4619      	mov	r1, r3
 800daba:	4819      	ldr	r0, [pc, #100]	; (800db20 <prvAddCurrentTaskToDelayedList+0x98>)
 800dabc:	f7fe fb21 	bl	800c102 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dac0:	e026      	b.n	800db10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dac2:	68fa      	ldr	r2, [r7, #12]
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	4413      	add	r3, r2
 800dac8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800daca:	4b14      	ldr	r3, [pc, #80]	; (800db1c <prvAddCurrentTaskToDelayedList+0x94>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	68ba      	ldr	r2, [r7, #8]
 800dad0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dad2:	68ba      	ldr	r2, [r7, #8]
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	429a      	cmp	r2, r3
 800dad8:	d209      	bcs.n	800daee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dada:	4b12      	ldr	r3, [pc, #72]	; (800db24 <prvAddCurrentTaskToDelayedList+0x9c>)
 800dadc:	681a      	ldr	r2, [r3, #0]
 800dade:	4b0f      	ldr	r3, [pc, #60]	; (800db1c <prvAddCurrentTaskToDelayedList+0x94>)
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	3304      	adds	r3, #4
 800dae4:	4619      	mov	r1, r3
 800dae6:	4610      	mov	r0, r2
 800dae8:	f7fe fb2f 	bl	800c14a <vListInsert>
}
 800daec:	e010      	b.n	800db10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800daee:	4b0e      	ldr	r3, [pc, #56]	; (800db28 <prvAddCurrentTaskToDelayedList+0xa0>)
 800daf0:	681a      	ldr	r2, [r3, #0]
 800daf2:	4b0a      	ldr	r3, [pc, #40]	; (800db1c <prvAddCurrentTaskToDelayedList+0x94>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	3304      	adds	r3, #4
 800daf8:	4619      	mov	r1, r3
 800dafa:	4610      	mov	r0, r2
 800dafc:	f7fe fb25 	bl	800c14a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800db00:	4b0a      	ldr	r3, [pc, #40]	; (800db2c <prvAddCurrentTaskToDelayedList+0xa4>)
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	68ba      	ldr	r2, [r7, #8]
 800db06:	429a      	cmp	r2, r3
 800db08:	d202      	bcs.n	800db10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800db0a:	4a08      	ldr	r2, [pc, #32]	; (800db2c <prvAddCurrentTaskToDelayedList+0xa4>)
 800db0c:	68bb      	ldr	r3, [r7, #8]
 800db0e:	6013      	str	r3, [r2, #0]
}
 800db10:	bf00      	nop
 800db12:	3710      	adds	r7, #16
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}
 800db18:	20001f2c 	.word	0x20001f2c
 800db1c:	20001a54 	.word	0x20001a54
 800db20:	20001f14 	.word	0x20001f14
 800db24:	20001ee4 	.word	0x20001ee4
 800db28:	20001ee0 	.word	0x20001ee0
 800db2c:	20001f48 	.word	0x20001f48

0800db30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b08a      	sub	sp, #40	; 0x28
 800db34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800db36:	2300      	movs	r3, #0
 800db38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800db3a:	f000 fb07 	bl	800e14c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800db3e:	4b1c      	ldr	r3, [pc, #112]	; (800dbb0 <xTimerCreateTimerTask+0x80>)
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d021      	beq.n	800db8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800db46:	2300      	movs	r3, #0
 800db48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800db4a:	2300      	movs	r3, #0
 800db4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800db4e:	1d3a      	adds	r2, r7, #4
 800db50:	f107 0108 	add.w	r1, r7, #8
 800db54:	f107 030c 	add.w	r3, r7, #12
 800db58:	4618      	mov	r0, r3
 800db5a:	f7fe fa8b 	bl	800c074 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800db5e:	6879      	ldr	r1, [r7, #4]
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	68fa      	ldr	r2, [r7, #12]
 800db64:	9202      	str	r2, [sp, #8]
 800db66:	9301      	str	r3, [sp, #4]
 800db68:	2302      	movs	r3, #2
 800db6a:	9300      	str	r3, [sp, #0]
 800db6c:	2300      	movs	r3, #0
 800db6e:	460a      	mov	r2, r1
 800db70:	4910      	ldr	r1, [pc, #64]	; (800dbb4 <xTimerCreateTimerTask+0x84>)
 800db72:	4811      	ldr	r0, [pc, #68]	; (800dbb8 <xTimerCreateTimerTask+0x88>)
 800db74:	f7ff f8fc 	bl	800cd70 <xTaskCreateStatic>
 800db78:	4603      	mov	r3, r0
 800db7a:	4a10      	ldr	r2, [pc, #64]	; (800dbbc <xTimerCreateTimerTask+0x8c>)
 800db7c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800db7e:	4b0f      	ldr	r3, [pc, #60]	; (800dbbc <xTimerCreateTimerTask+0x8c>)
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d001      	beq.n	800db8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800db86:	2301      	movs	r3, #1
 800db88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800db8a:	697b      	ldr	r3, [r7, #20]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d10a      	bne.n	800dba6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800db90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db94:	f383 8811 	msr	BASEPRI, r3
 800db98:	f3bf 8f6f 	isb	sy
 800db9c:	f3bf 8f4f 	dsb	sy
 800dba0:	613b      	str	r3, [r7, #16]
}
 800dba2:	bf00      	nop
 800dba4:	e7fe      	b.n	800dba4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800dba6:	697b      	ldr	r3, [r7, #20]
}
 800dba8:	4618      	mov	r0, r3
 800dbaa:	3718      	adds	r7, #24
 800dbac:	46bd      	mov	sp, r7
 800dbae:	bd80      	pop	{r7, pc}
 800dbb0:	20001f84 	.word	0x20001f84
 800dbb4:	0801346c 	.word	0x0801346c
 800dbb8:	0800dcf5 	.word	0x0800dcf5
 800dbbc:	20001f88 	.word	0x20001f88

0800dbc0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b08a      	sub	sp, #40	; 0x28
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	60f8      	str	r0, [r7, #12]
 800dbc8:	60b9      	str	r1, [r7, #8]
 800dbca:	607a      	str	r2, [r7, #4]
 800dbcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d10a      	bne.n	800dbee <xTimerGenericCommand+0x2e>
	__asm volatile
 800dbd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbdc:	f383 8811 	msr	BASEPRI, r3
 800dbe0:	f3bf 8f6f 	isb	sy
 800dbe4:	f3bf 8f4f 	dsb	sy
 800dbe8:	623b      	str	r3, [r7, #32]
}
 800dbea:	bf00      	nop
 800dbec:	e7fe      	b.n	800dbec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dbee:	4b1a      	ldr	r3, [pc, #104]	; (800dc58 <xTimerGenericCommand+0x98>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d02a      	beq.n	800dc4c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dc02:	68bb      	ldr	r3, [r7, #8]
 800dc04:	2b05      	cmp	r3, #5
 800dc06:	dc18      	bgt.n	800dc3a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dc08:	f7ff feb2 	bl	800d970 <xTaskGetSchedulerState>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	2b02      	cmp	r3, #2
 800dc10:	d109      	bne.n	800dc26 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dc12:	4b11      	ldr	r3, [pc, #68]	; (800dc58 <xTimerGenericCommand+0x98>)
 800dc14:	6818      	ldr	r0, [r3, #0]
 800dc16:	f107 0110 	add.w	r1, r7, #16
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc1e:	f7fe fc27 	bl	800c470 <xQueueGenericSend>
 800dc22:	6278      	str	r0, [r7, #36]	; 0x24
 800dc24:	e012      	b.n	800dc4c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800dc26:	4b0c      	ldr	r3, [pc, #48]	; (800dc58 <xTimerGenericCommand+0x98>)
 800dc28:	6818      	ldr	r0, [r3, #0]
 800dc2a:	f107 0110 	add.w	r1, r7, #16
 800dc2e:	2300      	movs	r3, #0
 800dc30:	2200      	movs	r2, #0
 800dc32:	f7fe fc1d 	bl	800c470 <xQueueGenericSend>
 800dc36:	6278      	str	r0, [r7, #36]	; 0x24
 800dc38:	e008      	b.n	800dc4c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dc3a:	4b07      	ldr	r3, [pc, #28]	; (800dc58 <xTimerGenericCommand+0x98>)
 800dc3c:	6818      	ldr	r0, [r3, #0]
 800dc3e:	f107 0110 	add.w	r1, r7, #16
 800dc42:	2300      	movs	r3, #0
 800dc44:	683a      	ldr	r2, [r7, #0]
 800dc46:	f7fe fcf9 	bl	800c63c <xQueueGenericSendFromISR>
 800dc4a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800dc4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dc4e:	4618      	mov	r0, r3
 800dc50:	3728      	adds	r7, #40	; 0x28
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}
 800dc56:	bf00      	nop
 800dc58:	20001f84 	.word	0x20001f84

0800dc5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b088      	sub	sp, #32
 800dc60:	af02      	add	r7, sp, #8
 800dc62:	6078      	str	r0, [r7, #4]
 800dc64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc66:	4b22      	ldr	r3, [pc, #136]	; (800dcf0 <prvProcessExpiredTimer+0x94>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	68db      	ldr	r3, [r3, #12]
 800dc6c:	68db      	ldr	r3, [r3, #12]
 800dc6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	3304      	adds	r3, #4
 800dc74:	4618      	mov	r0, r3
 800dc76:	f7fe faa1 	bl	800c1bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dc7a:	697b      	ldr	r3, [r7, #20]
 800dc7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dc80:	f003 0304 	and.w	r3, r3, #4
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d022      	beq.n	800dcce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dc88:	697b      	ldr	r3, [r7, #20]
 800dc8a:	699a      	ldr	r2, [r3, #24]
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	18d1      	adds	r1, r2, r3
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	683a      	ldr	r2, [r7, #0]
 800dc94:	6978      	ldr	r0, [r7, #20]
 800dc96:	f000 f8d1 	bl	800de3c <prvInsertTimerInActiveList>
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d01f      	beq.n	800dce0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dca0:	2300      	movs	r3, #0
 800dca2:	9300      	str	r3, [sp, #0]
 800dca4:	2300      	movs	r3, #0
 800dca6:	687a      	ldr	r2, [r7, #4]
 800dca8:	2100      	movs	r1, #0
 800dcaa:	6978      	ldr	r0, [r7, #20]
 800dcac:	f7ff ff88 	bl	800dbc0 <xTimerGenericCommand>
 800dcb0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dcb2:	693b      	ldr	r3, [r7, #16]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d113      	bne.n	800dce0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800dcb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcbc:	f383 8811 	msr	BASEPRI, r3
 800dcc0:	f3bf 8f6f 	isb	sy
 800dcc4:	f3bf 8f4f 	dsb	sy
 800dcc8:	60fb      	str	r3, [r7, #12]
}
 800dcca:	bf00      	nop
 800dccc:	e7fe      	b.n	800dccc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dcd4:	f023 0301 	bic.w	r3, r3, #1
 800dcd8:	b2da      	uxtb	r2, r3
 800dcda:	697b      	ldr	r3, [r7, #20]
 800dcdc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dce0:	697b      	ldr	r3, [r7, #20]
 800dce2:	6a1b      	ldr	r3, [r3, #32]
 800dce4:	6978      	ldr	r0, [r7, #20]
 800dce6:	4798      	blx	r3
}
 800dce8:	bf00      	nop
 800dcea:	3718      	adds	r7, #24
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}
 800dcf0:	20001f7c 	.word	0x20001f7c

0800dcf4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b084      	sub	sp, #16
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dcfc:	f107 0308 	add.w	r3, r7, #8
 800dd00:	4618      	mov	r0, r3
 800dd02:	f000 f857 	bl	800ddb4 <prvGetNextExpireTime>
 800dd06:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	4619      	mov	r1, r3
 800dd0c:	68f8      	ldr	r0, [r7, #12]
 800dd0e:	f000 f803 	bl	800dd18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dd12:	f000 f8d5 	bl	800dec0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dd16:	e7f1      	b.n	800dcfc <prvTimerTask+0x8>

0800dd18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b084      	sub	sp, #16
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
 800dd20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dd22:	f7ff fa71 	bl	800d208 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dd26:	f107 0308 	add.w	r3, r7, #8
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	f000 f866 	bl	800ddfc <prvSampleTimeNow>
 800dd30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d130      	bne.n	800dd9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d10a      	bne.n	800dd54 <prvProcessTimerOrBlockTask+0x3c>
 800dd3e:	687a      	ldr	r2, [r7, #4]
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	429a      	cmp	r2, r3
 800dd44:	d806      	bhi.n	800dd54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800dd46:	f7ff fa6d 	bl	800d224 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800dd4a:	68f9      	ldr	r1, [r7, #12]
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	f7ff ff85 	bl	800dc5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800dd52:	e024      	b.n	800dd9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d008      	beq.n	800dd6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dd5a:	4b13      	ldr	r3, [pc, #76]	; (800dda8 <prvProcessTimerOrBlockTask+0x90>)
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d101      	bne.n	800dd68 <prvProcessTimerOrBlockTask+0x50>
 800dd64:	2301      	movs	r3, #1
 800dd66:	e000      	b.n	800dd6a <prvProcessTimerOrBlockTask+0x52>
 800dd68:	2300      	movs	r3, #0
 800dd6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dd6c:	4b0f      	ldr	r3, [pc, #60]	; (800ddac <prvProcessTimerOrBlockTask+0x94>)
 800dd6e:	6818      	ldr	r0, [r3, #0]
 800dd70:	687a      	ldr	r2, [r7, #4]
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	1ad3      	subs	r3, r2, r3
 800dd76:	683a      	ldr	r2, [r7, #0]
 800dd78:	4619      	mov	r1, r3
 800dd7a:	f7fe ffc5 	bl	800cd08 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dd7e:	f7ff fa51 	bl	800d224 <xTaskResumeAll>
 800dd82:	4603      	mov	r3, r0
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d10a      	bne.n	800dd9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dd88:	4b09      	ldr	r3, [pc, #36]	; (800ddb0 <prvProcessTimerOrBlockTask+0x98>)
 800dd8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd8e:	601a      	str	r2, [r3, #0]
 800dd90:	f3bf 8f4f 	dsb	sy
 800dd94:	f3bf 8f6f 	isb	sy
}
 800dd98:	e001      	b.n	800dd9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800dd9a:	f7ff fa43 	bl	800d224 <xTaskResumeAll>
}
 800dd9e:	bf00      	nop
 800dda0:	3710      	adds	r7, #16
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}
 800dda6:	bf00      	nop
 800dda8:	20001f80 	.word	0x20001f80
 800ddac:	20001f84 	.word	0x20001f84
 800ddb0:	e000ed04 	.word	0xe000ed04

0800ddb4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ddb4:	b480      	push	{r7}
 800ddb6:	b085      	sub	sp, #20
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ddbc:	4b0e      	ldr	r3, [pc, #56]	; (800ddf8 <prvGetNextExpireTime+0x44>)
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d101      	bne.n	800ddca <prvGetNextExpireTime+0x16>
 800ddc6:	2201      	movs	r2, #1
 800ddc8:	e000      	b.n	800ddcc <prvGetNextExpireTime+0x18>
 800ddca:	2200      	movs	r2, #0
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d105      	bne.n	800dde4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ddd8:	4b07      	ldr	r3, [pc, #28]	; (800ddf8 <prvGetNextExpireTime+0x44>)
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	68db      	ldr	r3, [r3, #12]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	60fb      	str	r3, [r7, #12]
 800dde2:	e001      	b.n	800dde8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dde4:	2300      	movs	r3, #0
 800dde6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800dde8:	68fb      	ldr	r3, [r7, #12]
}
 800ddea:	4618      	mov	r0, r3
 800ddec:	3714      	adds	r7, #20
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf4:	4770      	bx	lr
 800ddf6:	bf00      	nop
 800ddf8:	20001f7c 	.word	0x20001f7c

0800ddfc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b084      	sub	sp, #16
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800de04:	f7ff fa9e 	bl	800d344 <xTaskGetTickCount>
 800de08:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800de0a:	4b0b      	ldr	r3, [pc, #44]	; (800de38 <prvSampleTimeNow+0x3c>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	68fa      	ldr	r2, [r7, #12]
 800de10:	429a      	cmp	r2, r3
 800de12:	d205      	bcs.n	800de20 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800de14:	f000 f936 	bl	800e084 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2201      	movs	r2, #1
 800de1c:	601a      	str	r2, [r3, #0]
 800de1e:	e002      	b.n	800de26 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2200      	movs	r2, #0
 800de24:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800de26:	4a04      	ldr	r2, [pc, #16]	; (800de38 <prvSampleTimeNow+0x3c>)
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800de2c:	68fb      	ldr	r3, [r7, #12]
}
 800de2e:	4618      	mov	r0, r3
 800de30:	3710      	adds	r7, #16
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}
 800de36:	bf00      	nop
 800de38:	20001f8c 	.word	0x20001f8c

0800de3c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b086      	sub	sp, #24
 800de40:	af00      	add	r7, sp, #0
 800de42:	60f8      	str	r0, [r7, #12]
 800de44:	60b9      	str	r1, [r7, #8]
 800de46:	607a      	str	r2, [r7, #4]
 800de48:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800de4a:	2300      	movs	r3, #0
 800de4c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	68ba      	ldr	r2, [r7, #8]
 800de52:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	68fa      	ldr	r2, [r7, #12]
 800de58:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800de5a:	68ba      	ldr	r2, [r7, #8]
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	429a      	cmp	r2, r3
 800de60:	d812      	bhi.n	800de88 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de62:	687a      	ldr	r2, [r7, #4]
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	1ad2      	subs	r2, r2, r3
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	699b      	ldr	r3, [r3, #24]
 800de6c:	429a      	cmp	r2, r3
 800de6e:	d302      	bcc.n	800de76 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800de70:	2301      	movs	r3, #1
 800de72:	617b      	str	r3, [r7, #20]
 800de74:	e01b      	b.n	800deae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800de76:	4b10      	ldr	r3, [pc, #64]	; (800deb8 <prvInsertTimerInActiveList+0x7c>)
 800de78:	681a      	ldr	r2, [r3, #0]
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	3304      	adds	r3, #4
 800de7e:	4619      	mov	r1, r3
 800de80:	4610      	mov	r0, r2
 800de82:	f7fe f962 	bl	800c14a <vListInsert>
 800de86:	e012      	b.n	800deae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800de88:	687a      	ldr	r2, [r7, #4]
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	429a      	cmp	r2, r3
 800de8e:	d206      	bcs.n	800de9e <prvInsertTimerInActiveList+0x62>
 800de90:	68ba      	ldr	r2, [r7, #8]
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	429a      	cmp	r2, r3
 800de96:	d302      	bcc.n	800de9e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800de98:	2301      	movs	r3, #1
 800de9a:	617b      	str	r3, [r7, #20]
 800de9c:	e007      	b.n	800deae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800de9e:	4b07      	ldr	r3, [pc, #28]	; (800debc <prvInsertTimerInActiveList+0x80>)
 800dea0:	681a      	ldr	r2, [r3, #0]
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	3304      	adds	r3, #4
 800dea6:	4619      	mov	r1, r3
 800dea8:	4610      	mov	r0, r2
 800deaa:	f7fe f94e 	bl	800c14a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800deae:	697b      	ldr	r3, [r7, #20]
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	3718      	adds	r7, #24
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}
 800deb8:	20001f80 	.word	0x20001f80
 800debc:	20001f7c 	.word	0x20001f7c

0800dec0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b08e      	sub	sp, #56	; 0x38
 800dec4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dec6:	e0ca      	b.n	800e05e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2b00      	cmp	r3, #0
 800decc:	da18      	bge.n	800df00 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dece:	1d3b      	adds	r3, r7, #4
 800ded0:	3304      	adds	r3, #4
 800ded2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ded4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d10a      	bne.n	800def0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800deda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dede:	f383 8811 	msr	BASEPRI, r3
 800dee2:	f3bf 8f6f 	isb	sy
 800dee6:	f3bf 8f4f 	dsb	sy
 800deea:	61fb      	str	r3, [r7, #28]
}
 800deec:	bf00      	nop
 800deee:	e7fe      	b.n	800deee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800def0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800def6:	6850      	ldr	r0, [r2, #4]
 800def8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800defa:	6892      	ldr	r2, [r2, #8]
 800defc:	4611      	mov	r1, r2
 800defe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2b00      	cmp	r3, #0
 800df04:	f2c0 80aa 	blt.w	800e05c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800df0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df0e:	695b      	ldr	r3, [r3, #20]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d004      	beq.n	800df1e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800df14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df16:	3304      	adds	r3, #4
 800df18:	4618      	mov	r0, r3
 800df1a:	f7fe f94f 	bl	800c1bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800df1e:	463b      	mov	r3, r7
 800df20:	4618      	mov	r0, r3
 800df22:	f7ff ff6b 	bl	800ddfc <prvSampleTimeNow>
 800df26:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	2b09      	cmp	r3, #9
 800df2c:	f200 8097 	bhi.w	800e05e <prvProcessReceivedCommands+0x19e>
 800df30:	a201      	add	r2, pc, #4	; (adr r2, 800df38 <prvProcessReceivedCommands+0x78>)
 800df32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df36:	bf00      	nop
 800df38:	0800df61 	.word	0x0800df61
 800df3c:	0800df61 	.word	0x0800df61
 800df40:	0800df61 	.word	0x0800df61
 800df44:	0800dfd5 	.word	0x0800dfd5
 800df48:	0800dfe9 	.word	0x0800dfe9
 800df4c:	0800e033 	.word	0x0800e033
 800df50:	0800df61 	.word	0x0800df61
 800df54:	0800df61 	.word	0x0800df61
 800df58:	0800dfd5 	.word	0x0800dfd5
 800df5c:	0800dfe9 	.word	0x0800dfe9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800df60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df66:	f043 0301 	orr.w	r3, r3, #1
 800df6a:	b2da      	uxtb	r2, r3
 800df6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800df72:	68ba      	ldr	r2, [r7, #8]
 800df74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df76:	699b      	ldr	r3, [r3, #24]
 800df78:	18d1      	adds	r1, r2, r3
 800df7a:	68bb      	ldr	r3, [r7, #8]
 800df7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df80:	f7ff ff5c 	bl	800de3c <prvInsertTimerInActiveList>
 800df84:	4603      	mov	r3, r0
 800df86:	2b00      	cmp	r3, #0
 800df88:	d069      	beq.n	800e05e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800df8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df8c:	6a1b      	ldr	r3, [r3, #32]
 800df8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df90:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800df92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df98:	f003 0304 	and.w	r3, r3, #4
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d05e      	beq.n	800e05e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dfa0:	68ba      	ldr	r2, [r7, #8]
 800dfa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa4:	699b      	ldr	r3, [r3, #24]
 800dfa6:	441a      	add	r2, r3
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	9300      	str	r3, [sp, #0]
 800dfac:	2300      	movs	r3, #0
 800dfae:	2100      	movs	r1, #0
 800dfb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dfb2:	f7ff fe05 	bl	800dbc0 <xTimerGenericCommand>
 800dfb6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dfb8:	6a3b      	ldr	r3, [r7, #32]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d14f      	bne.n	800e05e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800dfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfc2:	f383 8811 	msr	BASEPRI, r3
 800dfc6:	f3bf 8f6f 	isb	sy
 800dfca:	f3bf 8f4f 	dsb	sy
 800dfce:	61bb      	str	r3, [r7, #24]
}
 800dfd0:	bf00      	nop
 800dfd2:	e7fe      	b.n	800dfd2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dfd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dfda:	f023 0301 	bic.w	r3, r3, #1
 800dfde:	b2da      	uxtb	r2, r3
 800dfe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfe2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800dfe6:	e03a      	b.n	800e05e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dfe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dfee:	f043 0301 	orr.w	r3, r3, #1
 800dff2:	b2da      	uxtb	r2, r3
 800dff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dff6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dffa:	68ba      	ldr	r2, [r7, #8]
 800dffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dffe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e002:	699b      	ldr	r3, [r3, #24]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d10a      	bne.n	800e01e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e00c:	f383 8811 	msr	BASEPRI, r3
 800e010:	f3bf 8f6f 	isb	sy
 800e014:	f3bf 8f4f 	dsb	sy
 800e018:	617b      	str	r3, [r7, #20]
}
 800e01a:	bf00      	nop
 800e01c:	e7fe      	b.n	800e01c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e020:	699a      	ldr	r2, [r3, #24]
 800e022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e024:	18d1      	adds	r1, r2, r3
 800e026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e02a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e02c:	f7ff ff06 	bl	800de3c <prvInsertTimerInActiveList>
					break;
 800e030:	e015      	b.n	800e05e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e034:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e038:	f003 0302 	and.w	r3, r3, #2
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d103      	bne.n	800e048 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e040:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e042:	f000 fbdd 	bl	800e800 <vPortFree>
 800e046:	e00a      	b.n	800e05e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e04a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e04e:	f023 0301 	bic.w	r3, r3, #1
 800e052:	b2da      	uxtb	r2, r3
 800e054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e056:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e05a:	e000      	b.n	800e05e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e05c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e05e:	4b08      	ldr	r3, [pc, #32]	; (800e080 <prvProcessReceivedCommands+0x1c0>)
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	1d39      	adds	r1, r7, #4
 800e064:	2200      	movs	r2, #0
 800e066:	4618      	mov	r0, r3
 800e068:	f7fe fb84 	bl	800c774 <xQueueReceive>
 800e06c:	4603      	mov	r3, r0
 800e06e:	2b00      	cmp	r3, #0
 800e070:	f47f af2a 	bne.w	800dec8 <prvProcessReceivedCommands+0x8>
	}
}
 800e074:	bf00      	nop
 800e076:	bf00      	nop
 800e078:	3730      	adds	r7, #48	; 0x30
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}
 800e07e:	bf00      	nop
 800e080:	20001f84 	.word	0x20001f84

0800e084 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b088      	sub	sp, #32
 800e088:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e08a:	e048      	b.n	800e11e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e08c:	4b2d      	ldr	r3, [pc, #180]	; (800e144 <prvSwitchTimerLists+0xc0>)
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	68db      	ldr	r3, [r3, #12]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e096:	4b2b      	ldr	r3, [pc, #172]	; (800e144 <prvSwitchTimerLists+0xc0>)
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	68db      	ldr	r3, [r3, #12]
 800e09c:	68db      	ldr	r3, [r3, #12]
 800e09e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	3304      	adds	r3, #4
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	f7fe f889 	bl	800c1bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	6a1b      	ldr	r3, [r3, #32]
 800e0ae:	68f8      	ldr	r0, [r7, #12]
 800e0b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e0b8:	f003 0304 	and.w	r3, r3, #4
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d02e      	beq.n	800e11e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	699b      	ldr	r3, [r3, #24]
 800e0c4:	693a      	ldr	r2, [r7, #16]
 800e0c6:	4413      	add	r3, r2
 800e0c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e0ca:	68ba      	ldr	r2, [r7, #8]
 800e0cc:	693b      	ldr	r3, [r7, #16]
 800e0ce:	429a      	cmp	r2, r3
 800e0d0:	d90e      	bls.n	800e0f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	68ba      	ldr	r2, [r7, #8]
 800e0d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	68fa      	ldr	r2, [r7, #12]
 800e0dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e0de:	4b19      	ldr	r3, [pc, #100]	; (800e144 <prvSwitchTimerLists+0xc0>)
 800e0e0:	681a      	ldr	r2, [r3, #0]
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	3304      	adds	r3, #4
 800e0e6:	4619      	mov	r1, r3
 800e0e8:	4610      	mov	r0, r2
 800e0ea:	f7fe f82e 	bl	800c14a <vListInsert>
 800e0ee:	e016      	b.n	800e11e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	9300      	str	r3, [sp, #0]
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	693a      	ldr	r2, [r7, #16]
 800e0f8:	2100      	movs	r1, #0
 800e0fa:	68f8      	ldr	r0, [r7, #12]
 800e0fc:	f7ff fd60 	bl	800dbc0 <xTimerGenericCommand>
 800e100:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d10a      	bne.n	800e11e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e10c:	f383 8811 	msr	BASEPRI, r3
 800e110:	f3bf 8f6f 	isb	sy
 800e114:	f3bf 8f4f 	dsb	sy
 800e118:	603b      	str	r3, [r7, #0]
}
 800e11a:	bf00      	nop
 800e11c:	e7fe      	b.n	800e11c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e11e:	4b09      	ldr	r3, [pc, #36]	; (800e144 <prvSwitchTimerLists+0xc0>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d1b1      	bne.n	800e08c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e128:	4b06      	ldr	r3, [pc, #24]	; (800e144 <prvSwitchTimerLists+0xc0>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e12e:	4b06      	ldr	r3, [pc, #24]	; (800e148 <prvSwitchTimerLists+0xc4>)
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	4a04      	ldr	r2, [pc, #16]	; (800e144 <prvSwitchTimerLists+0xc0>)
 800e134:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e136:	4a04      	ldr	r2, [pc, #16]	; (800e148 <prvSwitchTimerLists+0xc4>)
 800e138:	697b      	ldr	r3, [r7, #20]
 800e13a:	6013      	str	r3, [r2, #0]
}
 800e13c:	bf00      	nop
 800e13e:	3718      	adds	r7, #24
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}
 800e144:	20001f7c 	.word	0x20001f7c
 800e148:	20001f80 	.word	0x20001f80

0800e14c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b082      	sub	sp, #8
 800e150:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e152:	f000 f967 	bl	800e424 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e156:	4b15      	ldr	r3, [pc, #84]	; (800e1ac <prvCheckForValidListAndQueue+0x60>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d120      	bne.n	800e1a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e15e:	4814      	ldr	r0, [pc, #80]	; (800e1b0 <prvCheckForValidListAndQueue+0x64>)
 800e160:	f7fd ffa2 	bl	800c0a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e164:	4813      	ldr	r0, [pc, #76]	; (800e1b4 <prvCheckForValidListAndQueue+0x68>)
 800e166:	f7fd ff9f 	bl	800c0a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e16a:	4b13      	ldr	r3, [pc, #76]	; (800e1b8 <prvCheckForValidListAndQueue+0x6c>)
 800e16c:	4a10      	ldr	r2, [pc, #64]	; (800e1b0 <prvCheckForValidListAndQueue+0x64>)
 800e16e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e170:	4b12      	ldr	r3, [pc, #72]	; (800e1bc <prvCheckForValidListAndQueue+0x70>)
 800e172:	4a10      	ldr	r2, [pc, #64]	; (800e1b4 <prvCheckForValidListAndQueue+0x68>)
 800e174:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e176:	2300      	movs	r3, #0
 800e178:	9300      	str	r3, [sp, #0]
 800e17a:	4b11      	ldr	r3, [pc, #68]	; (800e1c0 <prvCheckForValidListAndQueue+0x74>)
 800e17c:	4a11      	ldr	r2, [pc, #68]	; (800e1c4 <prvCheckForValidListAndQueue+0x78>)
 800e17e:	2110      	movs	r1, #16
 800e180:	200a      	movs	r0, #10
 800e182:	f7fe f8a0 	bl	800c2c6 <xQueueGenericCreateStatic>
 800e186:	4603      	mov	r3, r0
 800e188:	4a08      	ldr	r2, [pc, #32]	; (800e1ac <prvCheckForValidListAndQueue+0x60>)
 800e18a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e18c:	4b07      	ldr	r3, [pc, #28]	; (800e1ac <prvCheckForValidListAndQueue+0x60>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d005      	beq.n	800e1a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e194:	4b05      	ldr	r3, [pc, #20]	; (800e1ac <prvCheckForValidListAndQueue+0x60>)
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	490b      	ldr	r1, [pc, #44]	; (800e1c8 <prvCheckForValidListAndQueue+0x7c>)
 800e19a:	4618      	mov	r0, r3
 800e19c:	f7fe fd8a 	bl	800ccb4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e1a0:	f000 f970 	bl	800e484 <vPortExitCritical>
}
 800e1a4:	bf00      	nop
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bd80      	pop	{r7, pc}
 800e1aa:	bf00      	nop
 800e1ac:	20001f84 	.word	0x20001f84
 800e1b0:	20001f54 	.word	0x20001f54
 800e1b4:	20001f68 	.word	0x20001f68
 800e1b8:	20001f7c 	.word	0x20001f7c
 800e1bc:	20001f80 	.word	0x20001f80
 800e1c0:	20002030 	.word	0x20002030
 800e1c4:	20001f90 	.word	0x20001f90
 800e1c8:	08013474 	.word	0x08013474

0800e1cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e1cc:	b480      	push	{r7}
 800e1ce:	b085      	sub	sp, #20
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	60f8      	str	r0, [r7, #12]
 800e1d4:	60b9      	str	r1, [r7, #8]
 800e1d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	3b04      	subs	r3, #4
 800e1dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e1e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	3b04      	subs	r3, #4
 800e1ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e1ec:	68bb      	ldr	r3, [r7, #8]
 800e1ee:	f023 0201 	bic.w	r2, r3, #1
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	3b04      	subs	r3, #4
 800e1fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e1fc:	4a0c      	ldr	r2, [pc, #48]	; (800e230 <pxPortInitialiseStack+0x64>)
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	3b14      	subs	r3, #20
 800e206:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e208:	687a      	ldr	r2, [r7, #4]
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	3b04      	subs	r3, #4
 800e212:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	f06f 0202 	mvn.w	r2, #2
 800e21a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	3b20      	subs	r3, #32
 800e220:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e222:	68fb      	ldr	r3, [r7, #12]
}
 800e224:	4618      	mov	r0, r3
 800e226:	3714      	adds	r7, #20
 800e228:	46bd      	mov	sp, r7
 800e22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22e:	4770      	bx	lr
 800e230:	0800e235 	.word	0x0800e235

0800e234 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e234:	b480      	push	{r7}
 800e236:	b085      	sub	sp, #20
 800e238:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e23a:	2300      	movs	r3, #0
 800e23c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e23e:	4b12      	ldr	r3, [pc, #72]	; (800e288 <prvTaskExitError+0x54>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e246:	d00a      	beq.n	800e25e <prvTaskExitError+0x2a>
	__asm volatile
 800e248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e24c:	f383 8811 	msr	BASEPRI, r3
 800e250:	f3bf 8f6f 	isb	sy
 800e254:	f3bf 8f4f 	dsb	sy
 800e258:	60fb      	str	r3, [r7, #12]
}
 800e25a:	bf00      	nop
 800e25c:	e7fe      	b.n	800e25c <prvTaskExitError+0x28>
	__asm volatile
 800e25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e262:	f383 8811 	msr	BASEPRI, r3
 800e266:	f3bf 8f6f 	isb	sy
 800e26a:	f3bf 8f4f 	dsb	sy
 800e26e:	60bb      	str	r3, [r7, #8]
}
 800e270:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e272:	bf00      	nop
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d0fc      	beq.n	800e274 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e27a:	bf00      	nop
 800e27c:	bf00      	nop
 800e27e:	3714      	adds	r7, #20
 800e280:	46bd      	mov	sp, r7
 800e282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e286:	4770      	bx	lr
 800e288:	20000068 	.word	0x20000068
 800e28c:	00000000 	.word	0x00000000

0800e290 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e290:	4b07      	ldr	r3, [pc, #28]	; (800e2b0 <pxCurrentTCBConst2>)
 800e292:	6819      	ldr	r1, [r3, #0]
 800e294:	6808      	ldr	r0, [r1, #0]
 800e296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e29a:	f380 8809 	msr	PSP, r0
 800e29e:	f3bf 8f6f 	isb	sy
 800e2a2:	f04f 0000 	mov.w	r0, #0
 800e2a6:	f380 8811 	msr	BASEPRI, r0
 800e2aa:	4770      	bx	lr
 800e2ac:	f3af 8000 	nop.w

0800e2b0 <pxCurrentTCBConst2>:
 800e2b0:	20001a54 	.word	0x20001a54
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e2b4:	bf00      	nop
 800e2b6:	bf00      	nop

0800e2b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e2b8:	4808      	ldr	r0, [pc, #32]	; (800e2dc <prvPortStartFirstTask+0x24>)
 800e2ba:	6800      	ldr	r0, [r0, #0]
 800e2bc:	6800      	ldr	r0, [r0, #0]
 800e2be:	f380 8808 	msr	MSP, r0
 800e2c2:	f04f 0000 	mov.w	r0, #0
 800e2c6:	f380 8814 	msr	CONTROL, r0
 800e2ca:	b662      	cpsie	i
 800e2cc:	b661      	cpsie	f
 800e2ce:	f3bf 8f4f 	dsb	sy
 800e2d2:	f3bf 8f6f 	isb	sy
 800e2d6:	df00      	svc	0
 800e2d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e2da:	bf00      	nop
 800e2dc:	e000ed08 	.word	0xe000ed08

0800e2e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b086      	sub	sp, #24
 800e2e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e2e6:	4b46      	ldr	r3, [pc, #280]	; (800e400 <xPortStartScheduler+0x120>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	4a46      	ldr	r2, [pc, #280]	; (800e404 <xPortStartScheduler+0x124>)
 800e2ec:	4293      	cmp	r3, r2
 800e2ee:	d10a      	bne.n	800e306 <xPortStartScheduler+0x26>
	__asm volatile
 800e2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2f4:	f383 8811 	msr	BASEPRI, r3
 800e2f8:	f3bf 8f6f 	isb	sy
 800e2fc:	f3bf 8f4f 	dsb	sy
 800e300:	613b      	str	r3, [r7, #16]
}
 800e302:	bf00      	nop
 800e304:	e7fe      	b.n	800e304 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e306:	4b3e      	ldr	r3, [pc, #248]	; (800e400 <xPortStartScheduler+0x120>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	4a3f      	ldr	r2, [pc, #252]	; (800e408 <xPortStartScheduler+0x128>)
 800e30c:	4293      	cmp	r3, r2
 800e30e:	d10a      	bne.n	800e326 <xPortStartScheduler+0x46>
	__asm volatile
 800e310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e314:	f383 8811 	msr	BASEPRI, r3
 800e318:	f3bf 8f6f 	isb	sy
 800e31c:	f3bf 8f4f 	dsb	sy
 800e320:	60fb      	str	r3, [r7, #12]
}
 800e322:	bf00      	nop
 800e324:	e7fe      	b.n	800e324 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e326:	4b39      	ldr	r3, [pc, #228]	; (800e40c <xPortStartScheduler+0x12c>)
 800e328:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e32a:	697b      	ldr	r3, [r7, #20]
 800e32c:	781b      	ldrb	r3, [r3, #0]
 800e32e:	b2db      	uxtb	r3, r3
 800e330:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e332:	697b      	ldr	r3, [r7, #20]
 800e334:	22ff      	movs	r2, #255	; 0xff
 800e336:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e338:	697b      	ldr	r3, [r7, #20]
 800e33a:	781b      	ldrb	r3, [r3, #0]
 800e33c:	b2db      	uxtb	r3, r3
 800e33e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e340:	78fb      	ldrb	r3, [r7, #3]
 800e342:	b2db      	uxtb	r3, r3
 800e344:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e348:	b2da      	uxtb	r2, r3
 800e34a:	4b31      	ldr	r3, [pc, #196]	; (800e410 <xPortStartScheduler+0x130>)
 800e34c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e34e:	4b31      	ldr	r3, [pc, #196]	; (800e414 <xPortStartScheduler+0x134>)
 800e350:	2207      	movs	r2, #7
 800e352:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e354:	e009      	b.n	800e36a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e356:	4b2f      	ldr	r3, [pc, #188]	; (800e414 <xPortStartScheduler+0x134>)
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	3b01      	subs	r3, #1
 800e35c:	4a2d      	ldr	r2, [pc, #180]	; (800e414 <xPortStartScheduler+0x134>)
 800e35e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e360:	78fb      	ldrb	r3, [r7, #3]
 800e362:	b2db      	uxtb	r3, r3
 800e364:	005b      	lsls	r3, r3, #1
 800e366:	b2db      	uxtb	r3, r3
 800e368:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e36a:	78fb      	ldrb	r3, [r7, #3]
 800e36c:	b2db      	uxtb	r3, r3
 800e36e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e372:	2b80      	cmp	r3, #128	; 0x80
 800e374:	d0ef      	beq.n	800e356 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e376:	4b27      	ldr	r3, [pc, #156]	; (800e414 <xPortStartScheduler+0x134>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	f1c3 0307 	rsb	r3, r3, #7
 800e37e:	2b04      	cmp	r3, #4
 800e380:	d00a      	beq.n	800e398 <xPortStartScheduler+0xb8>
	__asm volatile
 800e382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e386:	f383 8811 	msr	BASEPRI, r3
 800e38a:	f3bf 8f6f 	isb	sy
 800e38e:	f3bf 8f4f 	dsb	sy
 800e392:	60bb      	str	r3, [r7, #8]
}
 800e394:	bf00      	nop
 800e396:	e7fe      	b.n	800e396 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e398:	4b1e      	ldr	r3, [pc, #120]	; (800e414 <xPortStartScheduler+0x134>)
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	021b      	lsls	r3, r3, #8
 800e39e:	4a1d      	ldr	r2, [pc, #116]	; (800e414 <xPortStartScheduler+0x134>)
 800e3a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e3a2:	4b1c      	ldr	r3, [pc, #112]	; (800e414 <xPortStartScheduler+0x134>)
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e3aa:	4a1a      	ldr	r2, [pc, #104]	; (800e414 <xPortStartScheduler+0x134>)
 800e3ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	b2da      	uxtb	r2, r3
 800e3b2:	697b      	ldr	r3, [r7, #20]
 800e3b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e3b6:	4b18      	ldr	r3, [pc, #96]	; (800e418 <xPortStartScheduler+0x138>)
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	4a17      	ldr	r2, [pc, #92]	; (800e418 <xPortStartScheduler+0x138>)
 800e3bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e3c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e3c2:	4b15      	ldr	r3, [pc, #84]	; (800e418 <xPortStartScheduler+0x138>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	4a14      	ldr	r2, [pc, #80]	; (800e418 <xPortStartScheduler+0x138>)
 800e3c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e3cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e3ce:	f000 f8dd 	bl	800e58c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e3d2:	4b12      	ldr	r3, [pc, #72]	; (800e41c <xPortStartScheduler+0x13c>)
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e3d8:	f000 f8fc 	bl	800e5d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e3dc:	4b10      	ldr	r3, [pc, #64]	; (800e420 <xPortStartScheduler+0x140>)
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	4a0f      	ldr	r2, [pc, #60]	; (800e420 <xPortStartScheduler+0x140>)
 800e3e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e3e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e3e8:	f7ff ff66 	bl	800e2b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e3ec:	f7ff f850 	bl	800d490 <vTaskSwitchContext>
	prvTaskExitError();
 800e3f0:	f7ff ff20 	bl	800e234 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e3f4:	2300      	movs	r3, #0
}
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	3718      	adds	r7, #24
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	bd80      	pop	{r7, pc}
 800e3fe:	bf00      	nop
 800e400:	e000ed00 	.word	0xe000ed00
 800e404:	410fc271 	.word	0x410fc271
 800e408:	410fc270 	.word	0x410fc270
 800e40c:	e000e400 	.word	0xe000e400
 800e410:	20002080 	.word	0x20002080
 800e414:	20002084 	.word	0x20002084
 800e418:	e000ed20 	.word	0xe000ed20
 800e41c:	20000068 	.word	0x20000068
 800e420:	e000ef34 	.word	0xe000ef34

0800e424 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e424:	b480      	push	{r7}
 800e426:	b083      	sub	sp, #12
 800e428:	af00      	add	r7, sp, #0
	__asm volatile
 800e42a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e42e:	f383 8811 	msr	BASEPRI, r3
 800e432:	f3bf 8f6f 	isb	sy
 800e436:	f3bf 8f4f 	dsb	sy
 800e43a:	607b      	str	r3, [r7, #4]
}
 800e43c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e43e:	4b0f      	ldr	r3, [pc, #60]	; (800e47c <vPortEnterCritical+0x58>)
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	3301      	adds	r3, #1
 800e444:	4a0d      	ldr	r2, [pc, #52]	; (800e47c <vPortEnterCritical+0x58>)
 800e446:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e448:	4b0c      	ldr	r3, [pc, #48]	; (800e47c <vPortEnterCritical+0x58>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	2b01      	cmp	r3, #1
 800e44e:	d10f      	bne.n	800e470 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e450:	4b0b      	ldr	r3, [pc, #44]	; (800e480 <vPortEnterCritical+0x5c>)
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	b2db      	uxtb	r3, r3
 800e456:	2b00      	cmp	r3, #0
 800e458:	d00a      	beq.n	800e470 <vPortEnterCritical+0x4c>
	__asm volatile
 800e45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e45e:	f383 8811 	msr	BASEPRI, r3
 800e462:	f3bf 8f6f 	isb	sy
 800e466:	f3bf 8f4f 	dsb	sy
 800e46a:	603b      	str	r3, [r7, #0]
}
 800e46c:	bf00      	nop
 800e46e:	e7fe      	b.n	800e46e <vPortEnterCritical+0x4a>
	}
}
 800e470:	bf00      	nop
 800e472:	370c      	adds	r7, #12
 800e474:	46bd      	mov	sp, r7
 800e476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47a:	4770      	bx	lr
 800e47c:	20000068 	.word	0x20000068
 800e480:	e000ed04 	.word	0xe000ed04

0800e484 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e484:	b480      	push	{r7}
 800e486:	b083      	sub	sp, #12
 800e488:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e48a:	4b12      	ldr	r3, [pc, #72]	; (800e4d4 <vPortExitCritical+0x50>)
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d10a      	bne.n	800e4a8 <vPortExitCritical+0x24>
	__asm volatile
 800e492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e496:	f383 8811 	msr	BASEPRI, r3
 800e49a:	f3bf 8f6f 	isb	sy
 800e49e:	f3bf 8f4f 	dsb	sy
 800e4a2:	607b      	str	r3, [r7, #4]
}
 800e4a4:	bf00      	nop
 800e4a6:	e7fe      	b.n	800e4a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e4a8:	4b0a      	ldr	r3, [pc, #40]	; (800e4d4 <vPortExitCritical+0x50>)
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	3b01      	subs	r3, #1
 800e4ae:	4a09      	ldr	r2, [pc, #36]	; (800e4d4 <vPortExitCritical+0x50>)
 800e4b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e4b2:	4b08      	ldr	r3, [pc, #32]	; (800e4d4 <vPortExitCritical+0x50>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d105      	bne.n	800e4c6 <vPortExitCritical+0x42>
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e4be:	683b      	ldr	r3, [r7, #0]
 800e4c0:	f383 8811 	msr	BASEPRI, r3
}
 800e4c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e4c6:	bf00      	nop
 800e4c8:	370c      	adds	r7, #12
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d0:	4770      	bx	lr
 800e4d2:	bf00      	nop
 800e4d4:	20000068 	.word	0x20000068
	...

0800e4e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e4e0:	f3ef 8009 	mrs	r0, PSP
 800e4e4:	f3bf 8f6f 	isb	sy
 800e4e8:	4b15      	ldr	r3, [pc, #84]	; (800e540 <pxCurrentTCBConst>)
 800e4ea:	681a      	ldr	r2, [r3, #0]
 800e4ec:	f01e 0f10 	tst.w	lr, #16
 800e4f0:	bf08      	it	eq
 800e4f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e4f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4fa:	6010      	str	r0, [r2, #0]
 800e4fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e500:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e504:	f380 8811 	msr	BASEPRI, r0
 800e508:	f3bf 8f4f 	dsb	sy
 800e50c:	f3bf 8f6f 	isb	sy
 800e510:	f7fe ffbe 	bl	800d490 <vTaskSwitchContext>
 800e514:	f04f 0000 	mov.w	r0, #0
 800e518:	f380 8811 	msr	BASEPRI, r0
 800e51c:	bc09      	pop	{r0, r3}
 800e51e:	6819      	ldr	r1, [r3, #0]
 800e520:	6808      	ldr	r0, [r1, #0]
 800e522:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e526:	f01e 0f10 	tst.w	lr, #16
 800e52a:	bf08      	it	eq
 800e52c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e530:	f380 8809 	msr	PSP, r0
 800e534:	f3bf 8f6f 	isb	sy
 800e538:	4770      	bx	lr
 800e53a:	bf00      	nop
 800e53c:	f3af 8000 	nop.w

0800e540 <pxCurrentTCBConst>:
 800e540:	20001a54 	.word	0x20001a54
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e544:	bf00      	nop
 800e546:	bf00      	nop

0800e548 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b082      	sub	sp, #8
 800e54c:	af00      	add	r7, sp, #0
	__asm volatile
 800e54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e552:	f383 8811 	msr	BASEPRI, r3
 800e556:	f3bf 8f6f 	isb	sy
 800e55a:	f3bf 8f4f 	dsb	sy
 800e55e:	607b      	str	r3, [r7, #4]
}
 800e560:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e562:	f7fe feff 	bl	800d364 <xTaskIncrementTick>
 800e566:	4603      	mov	r3, r0
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d003      	beq.n	800e574 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e56c:	4b06      	ldr	r3, [pc, #24]	; (800e588 <xPortSysTickHandler+0x40>)
 800e56e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e572:	601a      	str	r2, [r3, #0]
 800e574:	2300      	movs	r3, #0
 800e576:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e578:	683b      	ldr	r3, [r7, #0]
 800e57a:	f383 8811 	msr	BASEPRI, r3
}
 800e57e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e580:	bf00      	nop
 800e582:	3708      	adds	r7, #8
 800e584:	46bd      	mov	sp, r7
 800e586:	bd80      	pop	{r7, pc}
 800e588:	e000ed04 	.word	0xe000ed04

0800e58c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e58c:	b480      	push	{r7}
 800e58e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e590:	4b0b      	ldr	r3, [pc, #44]	; (800e5c0 <vPortSetupTimerInterrupt+0x34>)
 800e592:	2200      	movs	r2, #0
 800e594:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e596:	4b0b      	ldr	r3, [pc, #44]	; (800e5c4 <vPortSetupTimerInterrupt+0x38>)
 800e598:	2200      	movs	r2, #0
 800e59a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e59c:	4b0a      	ldr	r3, [pc, #40]	; (800e5c8 <vPortSetupTimerInterrupt+0x3c>)
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	4a0a      	ldr	r2, [pc, #40]	; (800e5cc <vPortSetupTimerInterrupt+0x40>)
 800e5a2:	fba2 2303 	umull	r2, r3, r2, r3
 800e5a6:	099b      	lsrs	r3, r3, #6
 800e5a8:	4a09      	ldr	r2, [pc, #36]	; (800e5d0 <vPortSetupTimerInterrupt+0x44>)
 800e5aa:	3b01      	subs	r3, #1
 800e5ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e5ae:	4b04      	ldr	r3, [pc, #16]	; (800e5c0 <vPortSetupTimerInterrupt+0x34>)
 800e5b0:	2207      	movs	r2, #7
 800e5b2:	601a      	str	r2, [r3, #0]
}
 800e5b4:	bf00      	nop
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5bc:	4770      	bx	lr
 800e5be:	bf00      	nop
 800e5c0:	e000e010 	.word	0xe000e010
 800e5c4:	e000e018 	.word	0xe000e018
 800e5c8:	2000005c 	.word	0x2000005c
 800e5cc:	10624dd3 	.word	0x10624dd3
 800e5d0:	e000e014 	.word	0xe000e014

0800e5d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e5d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e5e4 <vPortEnableVFP+0x10>
 800e5d8:	6801      	ldr	r1, [r0, #0]
 800e5da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e5de:	6001      	str	r1, [r0, #0]
 800e5e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e5e2:	bf00      	nop
 800e5e4:	e000ed88 	.word	0xe000ed88

0800e5e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e5e8:	b480      	push	{r7}
 800e5ea:	b085      	sub	sp, #20
 800e5ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e5ee:	f3ef 8305 	mrs	r3, IPSR
 800e5f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	2b0f      	cmp	r3, #15
 800e5f8:	d914      	bls.n	800e624 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e5fa:	4a17      	ldr	r2, [pc, #92]	; (800e658 <vPortValidateInterruptPriority+0x70>)
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	4413      	add	r3, r2
 800e600:	781b      	ldrb	r3, [r3, #0]
 800e602:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e604:	4b15      	ldr	r3, [pc, #84]	; (800e65c <vPortValidateInterruptPriority+0x74>)
 800e606:	781b      	ldrb	r3, [r3, #0]
 800e608:	7afa      	ldrb	r2, [r7, #11]
 800e60a:	429a      	cmp	r2, r3
 800e60c:	d20a      	bcs.n	800e624 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e612:	f383 8811 	msr	BASEPRI, r3
 800e616:	f3bf 8f6f 	isb	sy
 800e61a:	f3bf 8f4f 	dsb	sy
 800e61e:	607b      	str	r3, [r7, #4]
}
 800e620:	bf00      	nop
 800e622:	e7fe      	b.n	800e622 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e624:	4b0e      	ldr	r3, [pc, #56]	; (800e660 <vPortValidateInterruptPriority+0x78>)
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e62c:	4b0d      	ldr	r3, [pc, #52]	; (800e664 <vPortValidateInterruptPriority+0x7c>)
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	429a      	cmp	r2, r3
 800e632:	d90a      	bls.n	800e64a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e638:	f383 8811 	msr	BASEPRI, r3
 800e63c:	f3bf 8f6f 	isb	sy
 800e640:	f3bf 8f4f 	dsb	sy
 800e644:	603b      	str	r3, [r7, #0]
}
 800e646:	bf00      	nop
 800e648:	e7fe      	b.n	800e648 <vPortValidateInterruptPriority+0x60>
	}
 800e64a:	bf00      	nop
 800e64c:	3714      	adds	r7, #20
 800e64e:	46bd      	mov	sp, r7
 800e650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e654:	4770      	bx	lr
 800e656:	bf00      	nop
 800e658:	e000e3f0 	.word	0xe000e3f0
 800e65c:	20002080 	.word	0x20002080
 800e660:	e000ed0c 	.word	0xe000ed0c
 800e664:	20002084 	.word	0x20002084

0800e668 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b08a      	sub	sp, #40	; 0x28
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e670:	2300      	movs	r3, #0
 800e672:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e674:	f7fe fdc8 	bl	800d208 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e678:	4b5b      	ldr	r3, [pc, #364]	; (800e7e8 <pvPortMalloc+0x180>)
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d101      	bne.n	800e684 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e680:	f000 f920 	bl	800e8c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e684:	4b59      	ldr	r3, [pc, #356]	; (800e7ec <pvPortMalloc+0x184>)
 800e686:	681a      	ldr	r2, [r3, #0]
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	4013      	ands	r3, r2
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	f040 8093 	bne.w	800e7b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d01d      	beq.n	800e6d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e698:	2208      	movs	r2, #8
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	4413      	add	r3, r2
 800e69e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	f003 0307 	and.w	r3, r3, #7
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d014      	beq.n	800e6d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	f023 0307 	bic.w	r3, r3, #7
 800e6b0:	3308      	adds	r3, #8
 800e6b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	f003 0307 	and.w	r3, r3, #7
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d00a      	beq.n	800e6d4 <pvPortMalloc+0x6c>
	__asm volatile
 800e6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6c2:	f383 8811 	msr	BASEPRI, r3
 800e6c6:	f3bf 8f6f 	isb	sy
 800e6ca:	f3bf 8f4f 	dsb	sy
 800e6ce:	617b      	str	r3, [r7, #20]
}
 800e6d0:	bf00      	nop
 800e6d2:	e7fe      	b.n	800e6d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d06e      	beq.n	800e7b8 <pvPortMalloc+0x150>
 800e6da:	4b45      	ldr	r3, [pc, #276]	; (800e7f0 <pvPortMalloc+0x188>)
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	687a      	ldr	r2, [r7, #4]
 800e6e0:	429a      	cmp	r2, r3
 800e6e2:	d869      	bhi.n	800e7b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e6e4:	4b43      	ldr	r3, [pc, #268]	; (800e7f4 <pvPortMalloc+0x18c>)
 800e6e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e6e8:	4b42      	ldr	r3, [pc, #264]	; (800e7f4 <pvPortMalloc+0x18c>)
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e6ee:	e004      	b.n	800e6fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6fc:	685b      	ldr	r3, [r3, #4]
 800e6fe:	687a      	ldr	r2, [r7, #4]
 800e700:	429a      	cmp	r2, r3
 800e702:	d903      	bls.n	800e70c <pvPortMalloc+0xa4>
 800e704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d1f1      	bne.n	800e6f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e70c:	4b36      	ldr	r3, [pc, #216]	; (800e7e8 <pvPortMalloc+0x180>)
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e712:	429a      	cmp	r2, r3
 800e714:	d050      	beq.n	800e7b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e716:	6a3b      	ldr	r3, [r7, #32]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	2208      	movs	r2, #8
 800e71c:	4413      	add	r3, r2
 800e71e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e722:	681a      	ldr	r2, [r3, #0]
 800e724:	6a3b      	ldr	r3, [r7, #32]
 800e726:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e72a:	685a      	ldr	r2, [r3, #4]
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	1ad2      	subs	r2, r2, r3
 800e730:	2308      	movs	r3, #8
 800e732:	005b      	lsls	r3, r3, #1
 800e734:	429a      	cmp	r2, r3
 800e736:	d91f      	bls.n	800e778 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	4413      	add	r3, r2
 800e73e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e740:	69bb      	ldr	r3, [r7, #24]
 800e742:	f003 0307 	and.w	r3, r3, #7
 800e746:	2b00      	cmp	r3, #0
 800e748:	d00a      	beq.n	800e760 <pvPortMalloc+0xf8>
	__asm volatile
 800e74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e74e:	f383 8811 	msr	BASEPRI, r3
 800e752:	f3bf 8f6f 	isb	sy
 800e756:	f3bf 8f4f 	dsb	sy
 800e75a:	613b      	str	r3, [r7, #16]
}
 800e75c:	bf00      	nop
 800e75e:	e7fe      	b.n	800e75e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e762:	685a      	ldr	r2, [r3, #4]
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	1ad2      	subs	r2, r2, r3
 800e768:	69bb      	ldr	r3, [r7, #24]
 800e76a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e76e:	687a      	ldr	r2, [r7, #4]
 800e770:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e772:	69b8      	ldr	r0, [r7, #24]
 800e774:	f000 f908 	bl	800e988 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e778:	4b1d      	ldr	r3, [pc, #116]	; (800e7f0 <pvPortMalloc+0x188>)
 800e77a:	681a      	ldr	r2, [r3, #0]
 800e77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e77e:	685b      	ldr	r3, [r3, #4]
 800e780:	1ad3      	subs	r3, r2, r3
 800e782:	4a1b      	ldr	r2, [pc, #108]	; (800e7f0 <pvPortMalloc+0x188>)
 800e784:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e786:	4b1a      	ldr	r3, [pc, #104]	; (800e7f0 <pvPortMalloc+0x188>)
 800e788:	681a      	ldr	r2, [r3, #0]
 800e78a:	4b1b      	ldr	r3, [pc, #108]	; (800e7f8 <pvPortMalloc+0x190>)
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	429a      	cmp	r2, r3
 800e790:	d203      	bcs.n	800e79a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e792:	4b17      	ldr	r3, [pc, #92]	; (800e7f0 <pvPortMalloc+0x188>)
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	4a18      	ldr	r2, [pc, #96]	; (800e7f8 <pvPortMalloc+0x190>)
 800e798:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e79c:	685a      	ldr	r2, [r3, #4]
 800e79e:	4b13      	ldr	r3, [pc, #76]	; (800e7ec <pvPortMalloc+0x184>)
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	431a      	orrs	r2, r3
 800e7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e7ae:	4b13      	ldr	r3, [pc, #76]	; (800e7fc <pvPortMalloc+0x194>)
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	3301      	adds	r3, #1
 800e7b4:	4a11      	ldr	r2, [pc, #68]	; (800e7fc <pvPortMalloc+0x194>)
 800e7b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e7b8:	f7fe fd34 	bl	800d224 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e7bc:	69fb      	ldr	r3, [r7, #28]
 800e7be:	f003 0307 	and.w	r3, r3, #7
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d00a      	beq.n	800e7dc <pvPortMalloc+0x174>
	__asm volatile
 800e7c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7ca:	f383 8811 	msr	BASEPRI, r3
 800e7ce:	f3bf 8f6f 	isb	sy
 800e7d2:	f3bf 8f4f 	dsb	sy
 800e7d6:	60fb      	str	r3, [r7, #12]
}
 800e7d8:	bf00      	nop
 800e7da:	e7fe      	b.n	800e7da <pvPortMalloc+0x172>
	return pvReturn;
 800e7dc:	69fb      	ldr	r3, [r7, #28]
}
 800e7de:	4618      	mov	r0, r3
 800e7e0:	3728      	adds	r7, #40	; 0x28
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}
 800e7e6:	bf00      	nop
 800e7e8:	20005c90 	.word	0x20005c90
 800e7ec:	20005ca4 	.word	0x20005ca4
 800e7f0:	20005c94 	.word	0x20005c94
 800e7f4:	20005c88 	.word	0x20005c88
 800e7f8:	20005c98 	.word	0x20005c98
 800e7fc:	20005c9c 	.word	0x20005c9c

0800e800 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b086      	sub	sp, #24
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d04d      	beq.n	800e8ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e812:	2308      	movs	r3, #8
 800e814:	425b      	negs	r3, r3
 800e816:	697a      	ldr	r2, [r7, #20]
 800e818:	4413      	add	r3, r2
 800e81a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e81c:	697b      	ldr	r3, [r7, #20]
 800e81e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e820:	693b      	ldr	r3, [r7, #16]
 800e822:	685a      	ldr	r2, [r3, #4]
 800e824:	4b24      	ldr	r3, [pc, #144]	; (800e8b8 <vPortFree+0xb8>)
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	4013      	ands	r3, r2
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d10a      	bne.n	800e844 <vPortFree+0x44>
	__asm volatile
 800e82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e832:	f383 8811 	msr	BASEPRI, r3
 800e836:	f3bf 8f6f 	isb	sy
 800e83a:	f3bf 8f4f 	dsb	sy
 800e83e:	60fb      	str	r3, [r7, #12]
}
 800e840:	bf00      	nop
 800e842:	e7fe      	b.n	800e842 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e844:	693b      	ldr	r3, [r7, #16]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d00a      	beq.n	800e862 <vPortFree+0x62>
	__asm volatile
 800e84c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e850:	f383 8811 	msr	BASEPRI, r3
 800e854:	f3bf 8f6f 	isb	sy
 800e858:	f3bf 8f4f 	dsb	sy
 800e85c:	60bb      	str	r3, [r7, #8]
}
 800e85e:	bf00      	nop
 800e860:	e7fe      	b.n	800e860 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e862:	693b      	ldr	r3, [r7, #16]
 800e864:	685a      	ldr	r2, [r3, #4]
 800e866:	4b14      	ldr	r3, [pc, #80]	; (800e8b8 <vPortFree+0xb8>)
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	4013      	ands	r3, r2
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d01e      	beq.n	800e8ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e870:	693b      	ldr	r3, [r7, #16]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d11a      	bne.n	800e8ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e878:	693b      	ldr	r3, [r7, #16]
 800e87a:	685a      	ldr	r2, [r3, #4]
 800e87c:	4b0e      	ldr	r3, [pc, #56]	; (800e8b8 <vPortFree+0xb8>)
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	43db      	mvns	r3, r3
 800e882:	401a      	ands	r2, r3
 800e884:	693b      	ldr	r3, [r7, #16]
 800e886:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e888:	f7fe fcbe 	bl	800d208 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e88c:	693b      	ldr	r3, [r7, #16]
 800e88e:	685a      	ldr	r2, [r3, #4]
 800e890:	4b0a      	ldr	r3, [pc, #40]	; (800e8bc <vPortFree+0xbc>)
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	4413      	add	r3, r2
 800e896:	4a09      	ldr	r2, [pc, #36]	; (800e8bc <vPortFree+0xbc>)
 800e898:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e89a:	6938      	ldr	r0, [r7, #16]
 800e89c:	f000 f874 	bl	800e988 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e8a0:	4b07      	ldr	r3, [pc, #28]	; (800e8c0 <vPortFree+0xc0>)
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	3301      	adds	r3, #1
 800e8a6:	4a06      	ldr	r2, [pc, #24]	; (800e8c0 <vPortFree+0xc0>)
 800e8a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e8aa:	f7fe fcbb 	bl	800d224 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e8ae:	bf00      	nop
 800e8b0:	3718      	adds	r7, #24
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bd80      	pop	{r7, pc}
 800e8b6:	bf00      	nop
 800e8b8:	20005ca4 	.word	0x20005ca4
 800e8bc:	20005c94 	.word	0x20005c94
 800e8c0:	20005ca0 	.word	0x20005ca0

0800e8c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e8c4:	b480      	push	{r7}
 800e8c6:	b085      	sub	sp, #20
 800e8c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e8ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e8ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e8d0:	4b27      	ldr	r3, [pc, #156]	; (800e970 <prvHeapInit+0xac>)
 800e8d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	f003 0307 	and.w	r3, r3, #7
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d00c      	beq.n	800e8f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	3307      	adds	r3, #7
 800e8e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	f023 0307 	bic.w	r3, r3, #7
 800e8ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e8ec:	68ba      	ldr	r2, [r7, #8]
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	1ad3      	subs	r3, r2, r3
 800e8f2:	4a1f      	ldr	r2, [pc, #124]	; (800e970 <prvHeapInit+0xac>)
 800e8f4:	4413      	add	r3, r2
 800e8f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e8fc:	4a1d      	ldr	r2, [pc, #116]	; (800e974 <prvHeapInit+0xb0>)
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e902:	4b1c      	ldr	r3, [pc, #112]	; (800e974 <prvHeapInit+0xb0>)
 800e904:	2200      	movs	r2, #0
 800e906:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	68ba      	ldr	r2, [r7, #8]
 800e90c:	4413      	add	r3, r2
 800e90e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e910:	2208      	movs	r2, #8
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	1a9b      	subs	r3, r3, r2
 800e916:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	f023 0307 	bic.w	r3, r3, #7
 800e91e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	4a15      	ldr	r2, [pc, #84]	; (800e978 <prvHeapInit+0xb4>)
 800e924:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e926:	4b14      	ldr	r3, [pc, #80]	; (800e978 <prvHeapInit+0xb4>)
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	2200      	movs	r2, #0
 800e92c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e92e:	4b12      	ldr	r3, [pc, #72]	; (800e978 <prvHeapInit+0xb4>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	2200      	movs	r2, #0
 800e934:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	68fa      	ldr	r2, [r7, #12]
 800e93e:	1ad2      	subs	r2, r2, r3
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e944:	4b0c      	ldr	r3, [pc, #48]	; (800e978 <prvHeapInit+0xb4>)
 800e946:	681a      	ldr	r2, [r3, #0]
 800e948:	683b      	ldr	r3, [r7, #0]
 800e94a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e94c:	683b      	ldr	r3, [r7, #0]
 800e94e:	685b      	ldr	r3, [r3, #4]
 800e950:	4a0a      	ldr	r2, [pc, #40]	; (800e97c <prvHeapInit+0xb8>)
 800e952:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	685b      	ldr	r3, [r3, #4]
 800e958:	4a09      	ldr	r2, [pc, #36]	; (800e980 <prvHeapInit+0xbc>)
 800e95a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e95c:	4b09      	ldr	r3, [pc, #36]	; (800e984 <prvHeapInit+0xc0>)
 800e95e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e962:	601a      	str	r2, [r3, #0]
}
 800e964:	bf00      	nop
 800e966:	3714      	adds	r7, #20
 800e968:	46bd      	mov	sp, r7
 800e96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96e:	4770      	bx	lr
 800e970:	20002088 	.word	0x20002088
 800e974:	20005c88 	.word	0x20005c88
 800e978:	20005c90 	.word	0x20005c90
 800e97c:	20005c98 	.word	0x20005c98
 800e980:	20005c94 	.word	0x20005c94
 800e984:	20005ca4 	.word	0x20005ca4

0800e988 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e988:	b480      	push	{r7}
 800e98a:	b085      	sub	sp, #20
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e990:	4b28      	ldr	r3, [pc, #160]	; (800ea34 <prvInsertBlockIntoFreeList+0xac>)
 800e992:	60fb      	str	r3, [r7, #12]
 800e994:	e002      	b.n	800e99c <prvInsertBlockIntoFreeList+0x14>
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	60fb      	str	r3, [r7, #12]
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	687a      	ldr	r2, [r7, #4]
 800e9a2:	429a      	cmp	r2, r3
 800e9a4:	d8f7      	bhi.n	800e996 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	685b      	ldr	r3, [r3, #4]
 800e9ae:	68ba      	ldr	r2, [r7, #8]
 800e9b0:	4413      	add	r3, r2
 800e9b2:	687a      	ldr	r2, [r7, #4]
 800e9b4:	429a      	cmp	r2, r3
 800e9b6:	d108      	bne.n	800e9ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	685a      	ldr	r2, [r3, #4]
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	685b      	ldr	r3, [r3, #4]
 800e9c0:	441a      	add	r2, r3
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	685b      	ldr	r3, [r3, #4]
 800e9d2:	68ba      	ldr	r2, [r7, #8]
 800e9d4:	441a      	add	r2, r3
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	429a      	cmp	r2, r3
 800e9dc:	d118      	bne.n	800ea10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	681a      	ldr	r2, [r3, #0]
 800e9e2:	4b15      	ldr	r3, [pc, #84]	; (800ea38 <prvInsertBlockIntoFreeList+0xb0>)
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	429a      	cmp	r2, r3
 800e9e8:	d00d      	beq.n	800ea06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	685a      	ldr	r2, [r3, #4]
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	685b      	ldr	r3, [r3, #4]
 800e9f4:	441a      	add	r2, r3
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	681a      	ldr	r2, [r3, #0]
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	601a      	str	r2, [r3, #0]
 800ea04:	e008      	b.n	800ea18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ea06:	4b0c      	ldr	r3, [pc, #48]	; (800ea38 <prvInsertBlockIntoFreeList+0xb0>)
 800ea08:	681a      	ldr	r2, [r3, #0]
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	601a      	str	r2, [r3, #0]
 800ea0e:	e003      	b.n	800ea18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	681a      	ldr	r2, [r3, #0]
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ea18:	68fa      	ldr	r2, [r7, #12]
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	429a      	cmp	r2, r3
 800ea1e:	d002      	beq.n	800ea26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	687a      	ldr	r2, [r7, #4]
 800ea24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ea26:	bf00      	nop
 800ea28:	3714      	adds	r7, #20
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea30:	4770      	bx	lr
 800ea32:	bf00      	nop
 800ea34:	20005c88 	.word	0x20005c88
 800ea38:	20005c90 	.word	0x20005c90

0800ea3c <_Znwj>:
 800ea3c:	2801      	cmp	r0, #1
 800ea3e:	bf38      	it	cc
 800ea40:	2001      	movcc	r0, #1
 800ea42:	b510      	push	{r4, lr}
 800ea44:	4604      	mov	r4, r0
 800ea46:	4620      	mov	r0, r4
 800ea48:	f001 fc50 	bl	80102ec <malloc>
 800ea4c:	b930      	cbnz	r0, 800ea5c <_Znwj+0x20>
 800ea4e:	f000 f807 	bl	800ea60 <_ZSt15get_new_handlerv>
 800ea52:	b908      	cbnz	r0, 800ea58 <_Znwj+0x1c>
 800ea54:	f001 fb22 	bl	801009c <abort>
 800ea58:	4780      	blx	r0
 800ea5a:	e7f4      	b.n	800ea46 <_Znwj+0xa>
 800ea5c:	bd10      	pop	{r4, pc}
	...

0800ea60 <_ZSt15get_new_handlerv>:
 800ea60:	4b02      	ldr	r3, [pc, #8]	; (800ea6c <_ZSt15get_new_handlerv+0xc>)
 800ea62:	6818      	ldr	r0, [r3, #0]
 800ea64:	f3bf 8f5b 	dmb	ish
 800ea68:	4770      	bx	lr
 800ea6a:	bf00      	nop
 800ea6c:	20005ca8 	.word	0x20005ca8

0800ea70 <roundf>:
 800ea70:	ee10 0a10 	vmov	r0, s0
 800ea74:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800ea78:	3a7f      	subs	r2, #127	; 0x7f
 800ea7a:	2a16      	cmp	r2, #22
 800ea7c:	dc15      	bgt.n	800eaaa <roundf+0x3a>
 800ea7e:	2a00      	cmp	r2, #0
 800ea80:	da08      	bge.n	800ea94 <roundf+0x24>
 800ea82:	3201      	adds	r2, #1
 800ea84:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800ea88:	d101      	bne.n	800ea8e <roundf+0x1e>
 800ea8a:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800ea8e:	ee00 3a10 	vmov	s0, r3
 800ea92:	4770      	bx	lr
 800ea94:	4907      	ldr	r1, [pc, #28]	; (800eab4 <roundf+0x44>)
 800ea96:	4111      	asrs	r1, r2
 800ea98:	4208      	tst	r0, r1
 800ea9a:	d0fa      	beq.n	800ea92 <roundf+0x22>
 800ea9c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800eaa0:	4113      	asrs	r3, r2
 800eaa2:	4403      	add	r3, r0
 800eaa4:	ea23 0301 	bic.w	r3, r3, r1
 800eaa8:	e7f1      	b.n	800ea8e <roundf+0x1e>
 800eaaa:	2a80      	cmp	r2, #128	; 0x80
 800eaac:	d1f1      	bne.n	800ea92 <roundf+0x22>
 800eaae:	ee30 0a00 	vadd.f32	s0, s0, s0
 800eab2:	4770      	bx	lr
 800eab4:	007fffff 	.word	0x007fffff

0800eab8 <atan2>:
 800eab8:	f000 b8ca 	b.w	800ec50 <__ieee754_atan2>

0800eabc <fmod>:
 800eabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eabe:	ed2d 8b02 	vpush	{d8}
 800eac2:	ec57 6b10 	vmov	r6, r7, d0
 800eac6:	ec55 4b11 	vmov	r4, r5, d1
 800eaca:	f000 f98b 	bl	800ede4 <__ieee754_fmod>
 800eace:	4622      	mov	r2, r4
 800ead0:	462b      	mov	r3, r5
 800ead2:	4630      	mov	r0, r6
 800ead4:	4639      	mov	r1, r7
 800ead6:	eeb0 8a40 	vmov.f32	s16, s0
 800eada:	eef0 8a60 	vmov.f32	s17, s1
 800eade:	f7f2 f825 	bl	8000b2c <__aeabi_dcmpun>
 800eae2:	b990      	cbnz	r0, 800eb0a <fmod+0x4e>
 800eae4:	2200      	movs	r2, #0
 800eae6:	2300      	movs	r3, #0
 800eae8:	4620      	mov	r0, r4
 800eaea:	4629      	mov	r1, r5
 800eaec:	f7f1 ffec 	bl	8000ac8 <__aeabi_dcmpeq>
 800eaf0:	b158      	cbz	r0, 800eb0a <fmod+0x4e>
 800eaf2:	f001 fadb 	bl	80100ac <__errno>
 800eaf6:	2321      	movs	r3, #33	; 0x21
 800eaf8:	6003      	str	r3, [r0, #0]
 800eafa:	2200      	movs	r2, #0
 800eafc:	2300      	movs	r3, #0
 800eafe:	4610      	mov	r0, r2
 800eb00:	4619      	mov	r1, r3
 800eb02:	f7f1 fea3 	bl	800084c <__aeabi_ddiv>
 800eb06:	ec41 0b18 	vmov	d8, r0, r1
 800eb0a:	eeb0 0a48 	vmov.f32	s0, s16
 800eb0e:	eef0 0a68 	vmov.f32	s1, s17
 800eb12:	ecbd 8b02 	vpop	{d8}
 800eb16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800eb18 <pow>:
 800eb18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb1a:	ed2d 8b02 	vpush	{d8}
 800eb1e:	eeb0 8a40 	vmov.f32	s16, s0
 800eb22:	eef0 8a60 	vmov.f32	s17, s1
 800eb26:	ec55 4b11 	vmov	r4, r5, d1
 800eb2a:	f000 fa6d 	bl	800f008 <__ieee754_pow>
 800eb2e:	4622      	mov	r2, r4
 800eb30:	462b      	mov	r3, r5
 800eb32:	4620      	mov	r0, r4
 800eb34:	4629      	mov	r1, r5
 800eb36:	ec57 6b10 	vmov	r6, r7, d0
 800eb3a:	f7f1 fff7 	bl	8000b2c <__aeabi_dcmpun>
 800eb3e:	2800      	cmp	r0, #0
 800eb40:	d13b      	bne.n	800ebba <pow+0xa2>
 800eb42:	ec51 0b18 	vmov	r0, r1, d8
 800eb46:	2200      	movs	r2, #0
 800eb48:	2300      	movs	r3, #0
 800eb4a:	f7f1 ffbd 	bl	8000ac8 <__aeabi_dcmpeq>
 800eb4e:	b1b8      	cbz	r0, 800eb80 <pow+0x68>
 800eb50:	2200      	movs	r2, #0
 800eb52:	2300      	movs	r3, #0
 800eb54:	4620      	mov	r0, r4
 800eb56:	4629      	mov	r1, r5
 800eb58:	f7f1 ffb6 	bl	8000ac8 <__aeabi_dcmpeq>
 800eb5c:	2800      	cmp	r0, #0
 800eb5e:	d146      	bne.n	800ebee <pow+0xd6>
 800eb60:	ec45 4b10 	vmov	d0, r4, r5
 800eb64:	f001 fa09 	bl	800ff7a <finite>
 800eb68:	b338      	cbz	r0, 800ebba <pow+0xa2>
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	4620      	mov	r0, r4
 800eb70:	4629      	mov	r1, r5
 800eb72:	f7f1 ffb3 	bl	8000adc <__aeabi_dcmplt>
 800eb76:	b300      	cbz	r0, 800ebba <pow+0xa2>
 800eb78:	f001 fa98 	bl	80100ac <__errno>
 800eb7c:	2322      	movs	r3, #34	; 0x22
 800eb7e:	e01b      	b.n	800ebb8 <pow+0xa0>
 800eb80:	ec47 6b10 	vmov	d0, r6, r7
 800eb84:	f001 f9f9 	bl	800ff7a <finite>
 800eb88:	b9e0      	cbnz	r0, 800ebc4 <pow+0xac>
 800eb8a:	eeb0 0a48 	vmov.f32	s0, s16
 800eb8e:	eef0 0a68 	vmov.f32	s1, s17
 800eb92:	f001 f9f2 	bl	800ff7a <finite>
 800eb96:	b1a8      	cbz	r0, 800ebc4 <pow+0xac>
 800eb98:	ec45 4b10 	vmov	d0, r4, r5
 800eb9c:	f001 f9ed 	bl	800ff7a <finite>
 800eba0:	b180      	cbz	r0, 800ebc4 <pow+0xac>
 800eba2:	4632      	mov	r2, r6
 800eba4:	463b      	mov	r3, r7
 800eba6:	4630      	mov	r0, r6
 800eba8:	4639      	mov	r1, r7
 800ebaa:	f7f1 ffbf 	bl	8000b2c <__aeabi_dcmpun>
 800ebae:	2800      	cmp	r0, #0
 800ebb0:	d0e2      	beq.n	800eb78 <pow+0x60>
 800ebb2:	f001 fa7b 	bl	80100ac <__errno>
 800ebb6:	2321      	movs	r3, #33	; 0x21
 800ebb8:	6003      	str	r3, [r0, #0]
 800ebba:	ecbd 8b02 	vpop	{d8}
 800ebbe:	ec47 6b10 	vmov	d0, r6, r7
 800ebc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	4630      	mov	r0, r6
 800ebca:	4639      	mov	r1, r7
 800ebcc:	f7f1 ff7c 	bl	8000ac8 <__aeabi_dcmpeq>
 800ebd0:	2800      	cmp	r0, #0
 800ebd2:	d0f2      	beq.n	800ebba <pow+0xa2>
 800ebd4:	eeb0 0a48 	vmov.f32	s0, s16
 800ebd8:	eef0 0a68 	vmov.f32	s1, s17
 800ebdc:	f001 f9cd 	bl	800ff7a <finite>
 800ebe0:	2800      	cmp	r0, #0
 800ebe2:	d0ea      	beq.n	800ebba <pow+0xa2>
 800ebe4:	ec45 4b10 	vmov	d0, r4, r5
 800ebe8:	f001 f9c7 	bl	800ff7a <finite>
 800ebec:	e7c3      	b.n	800eb76 <pow+0x5e>
 800ebee:	4f01      	ldr	r7, [pc, #4]	; (800ebf4 <pow+0xdc>)
 800ebf0:	2600      	movs	r6, #0
 800ebf2:	e7e2      	b.n	800ebba <pow+0xa2>
 800ebf4:	3ff00000 	.word	0x3ff00000

0800ebf8 <sqrt>:
 800ebf8:	b538      	push	{r3, r4, r5, lr}
 800ebfa:	ed2d 8b02 	vpush	{d8}
 800ebfe:	ec55 4b10 	vmov	r4, r5, d0
 800ec02:	f000 ff2f 	bl	800fa64 <__ieee754_sqrt>
 800ec06:	4622      	mov	r2, r4
 800ec08:	462b      	mov	r3, r5
 800ec0a:	4620      	mov	r0, r4
 800ec0c:	4629      	mov	r1, r5
 800ec0e:	eeb0 8a40 	vmov.f32	s16, s0
 800ec12:	eef0 8a60 	vmov.f32	s17, s1
 800ec16:	f7f1 ff89 	bl	8000b2c <__aeabi_dcmpun>
 800ec1a:	b990      	cbnz	r0, 800ec42 <sqrt+0x4a>
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	2300      	movs	r3, #0
 800ec20:	4620      	mov	r0, r4
 800ec22:	4629      	mov	r1, r5
 800ec24:	f7f1 ff5a 	bl	8000adc <__aeabi_dcmplt>
 800ec28:	b158      	cbz	r0, 800ec42 <sqrt+0x4a>
 800ec2a:	f001 fa3f 	bl	80100ac <__errno>
 800ec2e:	2321      	movs	r3, #33	; 0x21
 800ec30:	6003      	str	r3, [r0, #0]
 800ec32:	2200      	movs	r2, #0
 800ec34:	2300      	movs	r3, #0
 800ec36:	4610      	mov	r0, r2
 800ec38:	4619      	mov	r1, r3
 800ec3a:	f7f1 fe07 	bl	800084c <__aeabi_ddiv>
 800ec3e:	ec41 0b18 	vmov	d8, r0, r1
 800ec42:	eeb0 0a48 	vmov.f32	s0, s16
 800ec46:	eef0 0a68 	vmov.f32	s1, s17
 800ec4a:	ecbd 8b02 	vpop	{d8}
 800ec4e:	bd38      	pop	{r3, r4, r5, pc}

0800ec50 <__ieee754_atan2>:
 800ec50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec54:	ec57 6b11 	vmov	r6, r7, d1
 800ec58:	4273      	negs	r3, r6
 800ec5a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800ede0 <__ieee754_atan2+0x190>
 800ec5e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800ec62:	4333      	orrs	r3, r6
 800ec64:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ec68:	4573      	cmp	r3, lr
 800ec6a:	ec51 0b10 	vmov	r0, r1, d0
 800ec6e:	ee11 8a10 	vmov	r8, s2
 800ec72:	d80a      	bhi.n	800ec8a <__ieee754_atan2+0x3a>
 800ec74:	4244      	negs	r4, r0
 800ec76:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ec7a:	4304      	orrs	r4, r0
 800ec7c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800ec80:	4574      	cmp	r4, lr
 800ec82:	ee10 9a10 	vmov	r9, s0
 800ec86:	468c      	mov	ip, r1
 800ec88:	d907      	bls.n	800ec9a <__ieee754_atan2+0x4a>
 800ec8a:	4632      	mov	r2, r6
 800ec8c:	463b      	mov	r3, r7
 800ec8e:	f7f1 fafd 	bl	800028c <__adddf3>
 800ec92:	ec41 0b10 	vmov	d0, r0, r1
 800ec96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec9a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800ec9e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800eca2:	4334      	orrs	r4, r6
 800eca4:	d103      	bne.n	800ecae <__ieee754_atan2+0x5e>
 800eca6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecaa:	f000 bfbd 	b.w	800fc28 <atan>
 800ecae:	17bc      	asrs	r4, r7, #30
 800ecb0:	f004 0402 	and.w	r4, r4, #2
 800ecb4:	ea53 0909 	orrs.w	r9, r3, r9
 800ecb8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800ecbc:	d107      	bne.n	800ecce <__ieee754_atan2+0x7e>
 800ecbe:	2c02      	cmp	r4, #2
 800ecc0:	d060      	beq.n	800ed84 <__ieee754_atan2+0x134>
 800ecc2:	2c03      	cmp	r4, #3
 800ecc4:	d1e5      	bne.n	800ec92 <__ieee754_atan2+0x42>
 800ecc6:	a142      	add	r1, pc, #264	; (adr r1, 800edd0 <__ieee754_atan2+0x180>)
 800ecc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eccc:	e7e1      	b.n	800ec92 <__ieee754_atan2+0x42>
 800ecce:	ea52 0808 	orrs.w	r8, r2, r8
 800ecd2:	d106      	bne.n	800ece2 <__ieee754_atan2+0x92>
 800ecd4:	f1bc 0f00 	cmp.w	ip, #0
 800ecd8:	da5f      	bge.n	800ed9a <__ieee754_atan2+0x14a>
 800ecda:	a13f      	add	r1, pc, #252	; (adr r1, 800edd8 <__ieee754_atan2+0x188>)
 800ecdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ece0:	e7d7      	b.n	800ec92 <__ieee754_atan2+0x42>
 800ece2:	4572      	cmp	r2, lr
 800ece4:	d10f      	bne.n	800ed06 <__ieee754_atan2+0xb6>
 800ece6:	4293      	cmp	r3, r2
 800ece8:	f104 34ff 	add.w	r4, r4, #4294967295
 800ecec:	d107      	bne.n	800ecfe <__ieee754_atan2+0xae>
 800ecee:	2c02      	cmp	r4, #2
 800ecf0:	d84c      	bhi.n	800ed8c <__ieee754_atan2+0x13c>
 800ecf2:	4b35      	ldr	r3, [pc, #212]	; (800edc8 <__ieee754_atan2+0x178>)
 800ecf4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800ecf8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ecfc:	e7c9      	b.n	800ec92 <__ieee754_atan2+0x42>
 800ecfe:	2c02      	cmp	r4, #2
 800ed00:	d848      	bhi.n	800ed94 <__ieee754_atan2+0x144>
 800ed02:	4b32      	ldr	r3, [pc, #200]	; (800edcc <__ieee754_atan2+0x17c>)
 800ed04:	e7f6      	b.n	800ecf4 <__ieee754_atan2+0xa4>
 800ed06:	4573      	cmp	r3, lr
 800ed08:	d0e4      	beq.n	800ecd4 <__ieee754_atan2+0x84>
 800ed0a:	1a9b      	subs	r3, r3, r2
 800ed0c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800ed10:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ed14:	da1e      	bge.n	800ed54 <__ieee754_atan2+0x104>
 800ed16:	2f00      	cmp	r7, #0
 800ed18:	da01      	bge.n	800ed1e <__ieee754_atan2+0xce>
 800ed1a:	323c      	adds	r2, #60	; 0x3c
 800ed1c:	db1e      	blt.n	800ed5c <__ieee754_atan2+0x10c>
 800ed1e:	4632      	mov	r2, r6
 800ed20:	463b      	mov	r3, r7
 800ed22:	f7f1 fd93 	bl	800084c <__aeabi_ddiv>
 800ed26:	ec41 0b10 	vmov	d0, r0, r1
 800ed2a:	f001 f91d 	bl	800ff68 <fabs>
 800ed2e:	f000 ff7b 	bl	800fc28 <atan>
 800ed32:	ec51 0b10 	vmov	r0, r1, d0
 800ed36:	2c01      	cmp	r4, #1
 800ed38:	d013      	beq.n	800ed62 <__ieee754_atan2+0x112>
 800ed3a:	2c02      	cmp	r4, #2
 800ed3c:	d015      	beq.n	800ed6a <__ieee754_atan2+0x11a>
 800ed3e:	2c00      	cmp	r4, #0
 800ed40:	d0a7      	beq.n	800ec92 <__ieee754_atan2+0x42>
 800ed42:	a319      	add	r3, pc, #100	; (adr r3, 800eda8 <__ieee754_atan2+0x158>)
 800ed44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed48:	f7f1 fa9e 	bl	8000288 <__aeabi_dsub>
 800ed4c:	a318      	add	r3, pc, #96	; (adr r3, 800edb0 <__ieee754_atan2+0x160>)
 800ed4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed52:	e014      	b.n	800ed7e <__ieee754_atan2+0x12e>
 800ed54:	a118      	add	r1, pc, #96	; (adr r1, 800edb8 <__ieee754_atan2+0x168>)
 800ed56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed5a:	e7ec      	b.n	800ed36 <__ieee754_atan2+0xe6>
 800ed5c:	2000      	movs	r0, #0
 800ed5e:	2100      	movs	r1, #0
 800ed60:	e7e9      	b.n	800ed36 <__ieee754_atan2+0xe6>
 800ed62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ed66:	4619      	mov	r1, r3
 800ed68:	e793      	b.n	800ec92 <__ieee754_atan2+0x42>
 800ed6a:	a30f      	add	r3, pc, #60	; (adr r3, 800eda8 <__ieee754_atan2+0x158>)
 800ed6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed70:	f7f1 fa8a 	bl	8000288 <__aeabi_dsub>
 800ed74:	4602      	mov	r2, r0
 800ed76:	460b      	mov	r3, r1
 800ed78:	a10d      	add	r1, pc, #52	; (adr r1, 800edb0 <__ieee754_atan2+0x160>)
 800ed7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed7e:	f7f1 fa83 	bl	8000288 <__aeabi_dsub>
 800ed82:	e786      	b.n	800ec92 <__ieee754_atan2+0x42>
 800ed84:	a10a      	add	r1, pc, #40	; (adr r1, 800edb0 <__ieee754_atan2+0x160>)
 800ed86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed8a:	e782      	b.n	800ec92 <__ieee754_atan2+0x42>
 800ed8c:	a10c      	add	r1, pc, #48	; (adr r1, 800edc0 <__ieee754_atan2+0x170>)
 800ed8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed92:	e77e      	b.n	800ec92 <__ieee754_atan2+0x42>
 800ed94:	2000      	movs	r0, #0
 800ed96:	2100      	movs	r1, #0
 800ed98:	e77b      	b.n	800ec92 <__ieee754_atan2+0x42>
 800ed9a:	a107      	add	r1, pc, #28	; (adr r1, 800edb8 <__ieee754_atan2+0x168>)
 800ed9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eda0:	e777      	b.n	800ec92 <__ieee754_atan2+0x42>
 800eda2:	bf00      	nop
 800eda4:	f3af 8000 	nop.w
 800eda8:	33145c07 	.word	0x33145c07
 800edac:	3ca1a626 	.word	0x3ca1a626
 800edb0:	54442d18 	.word	0x54442d18
 800edb4:	400921fb 	.word	0x400921fb
 800edb8:	54442d18 	.word	0x54442d18
 800edbc:	3ff921fb 	.word	0x3ff921fb
 800edc0:	54442d18 	.word	0x54442d18
 800edc4:	3fe921fb 	.word	0x3fe921fb
 800edc8:	08013fa0 	.word	0x08013fa0
 800edcc:	08013fb8 	.word	0x08013fb8
 800edd0:	54442d18 	.word	0x54442d18
 800edd4:	c00921fb 	.word	0xc00921fb
 800edd8:	54442d18 	.word	0x54442d18
 800eddc:	bff921fb 	.word	0xbff921fb
 800ede0:	7ff00000 	.word	0x7ff00000

0800ede4 <__ieee754_fmod>:
 800ede4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ede8:	ec53 2b11 	vmov	r2, r3, d1
 800edec:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800edf0:	ea5e 0402 	orrs.w	r4, lr, r2
 800edf4:	ec51 0b10 	vmov	r0, r1, d0
 800edf8:	ee11 7a10 	vmov	r7, s2
 800edfc:	ee11 ca10 	vmov	ip, s2
 800ee00:	461e      	mov	r6, r3
 800ee02:	d00d      	beq.n	800ee20 <__ieee754_fmod+0x3c>
 800ee04:	4c7a      	ldr	r4, [pc, #488]	; (800eff0 <__ieee754_fmod+0x20c>)
 800ee06:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800ee0a:	45a0      	cmp	r8, r4
 800ee0c:	4689      	mov	r9, r1
 800ee0e:	dc07      	bgt.n	800ee20 <__ieee754_fmod+0x3c>
 800ee10:	4254      	negs	r4, r2
 800ee12:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 800effc <__ieee754_fmod+0x218>
 800ee16:	4314      	orrs	r4, r2
 800ee18:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 800ee1c:	455c      	cmp	r4, fp
 800ee1e:	d909      	bls.n	800ee34 <__ieee754_fmod+0x50>
 800ee20:	f7f1 fbea 	bl	80005f8 <__aeabi_dmul>
 800ee24:	4602      	mov	r2, r0
 800ee26:	460b      	mov	r3, r1
 800ee28:	f7f1 fd10 	bl	800084c <__aeabi_ddiv>
 800ee2c:	ec41 0b10 	vmov	d0, r0, r1
 800ee30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee34:	45f0      	cmp	r8, lr
 800ee36:	ee10 aa10 	vmov	sl, s0
 800ee3a:	ee10 4a10 	vmov	r4, s0
 800ee3e:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800ee42:	dc09      	bgt.n	800ee58 <__ieee754_fmod+0x74>
 800ee44:	dbf2      	blt.n	800ee2c <__ieee754_fmod+0x48>
 800ee46:	4290      	cmp	r0, r2
 800ee48:	d3f0      	bcc.n	800ee2c <__ieee754_fmod+0x48>
 800ee4a:	d105      	bne.n	800ee58 <__ieee754_fmod+0x74>
 800ee4c:	4b69      	ldr	r3, [pc, #420]	; (800eff4 <__ieee754_fmod+0x210>)
 800ee4e:	eb03 7515 	add.w	r5, r3, r5, lsr #28
 800ee52:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ee56:	e7e9      	b.n	800ee2c <__ieee754_fmod+0x48>
 800ee58:	ea19 0f0b 	tst.w	r9, fp
 800ee5c:	d14a      	bne.n	800eef4 <__ieee754_fmod+0x110>
 800ee5e:	f1b8 0f00 	cmp.w	r8, #0
 800ee62:	d13f      	bne.n	800eee4 <__ieee754_fmod+0x100>
 800ee64:	4964      	ldr	r1, [pc, #400]	; (800eff8 <__ieee754_fmod+0x214>)
 800ee66:	4653      	mov	r3, sl
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	dc38      	bgt.n	800eede <__ieee754_fmod+0xfa>
 800ee6c:	4b63      	ldr	r3, [pc, #396]	; (800effc <__ieee754_fmod+0x218>)
 800ee6e:	4033      	ands	r3, r6
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d14f      	bne.n	800ef14 <__ieee754_fmod+0x130>
 800ee74:	f1be 0f00 	cmp.w	lr, #0
 800ee78:	d144      	bne.n	800ef04 <__ieee754_fmod+0x120>
 800ee7a:	4a5f      	ldr	r2, [pc, #380]	; (800eff8 <__ieee754_fmod+0x214>)
 800ee7c:	463b      	mov	r3, r7
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	dc3d      	bgt.n	800eefe <__ieee754_fmod+0x11a>
 800ee82:	4b5f      	ldr	r3, [pc, #380]	; (800f000 <__ieee754_fmod+0x21c>)
 800ee84:	4299      	cmp	r1, r3
 800ee86:	db4a      	blt.n	800ef1e <__ieee754_fmod+0x13a>
 800ee88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ee8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ee90:	485b      	ldr	r0, [pc, #364]	; (800f000 <__ieee754_fmod+0x21c>)
 800ee92:	4282      	cmp	r2, r0
 800ee94:	db57      	blt.n	800ef46 <__ieee754_fmod+0x162>
 800ee96:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800ee9a:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800ee9e:	1a89      	subs	r1, r1, r2
 800eea0:	1b98      	subs	r0, r3, r6
 800eea2:	eba4 070c 	sub.w	r7, r4, ip
 800eea6:	2900      	cmp	r1, #0
 800eea8:	d164      	bne.n	800ef74 <__ieee754_fmod+0x190>
 800eeaa:	4564      	cmp	r4, ip
 800eeac:	bf38      	it	cc
 800eeae:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800eeb2:	2800      	cmp	r0, #0
 800eeb4:	bfa4      	itt	ge
 800eeb6:	463c      	movge	r4, r7
 800eeb8:	4603      	movge	r3, r0
 800eeba:	ea53 0104 	orrs.w	r1, r3, r4
 800eebe:	d0c5      	beq.n	800ee4c <__ieee754_fmod+0x68>
 800eec0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eec4:	db6b      	blt.n	800ef9e <__ieee754_fmod+0x1ba>
 800eec6:	494e      	ldr	r1, [pc, #312]	; (800f000 <__ieee754_fmod+0x21c>)
 800eec8:	428a      	cmp	r2, r1
 800eeca:	db6e      	blt.n	800efaa <__ieee754_fmod+0x1c6>
 800eecc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800eed0:	431d      	orrs	r5, r3
 800eed2:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800eed6:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 800eeda:	4620      	mov	r0, r4
 800eedc:	e7a6      	b.n	800ee2c <__ieee754_fmod+0x48>
 800eede:	3901      	subs	r1, #1
 800eee0:	005b      	lsls	r3, r3, #1
 800eee2:	e7c1      	b.n	800ee68 <__ieee754_fmod+0x84>
 800eee4:	4946      	ldr	r1, [pc, #280]	; (800f000 <__ieee754_fmod+0x21c>)
 800eee6:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	ddbe      	ble.n	800ee6c <__ieee754_fmod+0x88>
 800eeee:	3901      	subs	r1, #1
 800eef0:	005b      	lsls	r3, r3, #1
 800eef2:	e7fa      	b.n	800eeea <__ieee754_fmod+0x106>
 800eef4:	ea4f 5128 	mov.w	r1, r8, asr #20
 800eef8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800eefc:	e7b6      	b.n	800ee6c <__ieee754_fmod+0x88>
 800eefe:	3a01      	subs	r2, #1
 800ef00:	005b      	lsls	r3, r3, #1
 800ef02:	e7bc      	b.n	800ee7e <__ieee754_fmod+0x9a>
 800ef04:	4a3e      	ldr	r2, [pc, #248]	; (800f000 <__ieee754_fmod+0x21c>)
 800ef06:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	ddb9      	ble.n	800ee82 <__ieee754_fmod+0x9e>
 800ef0e:	3a01      	subs	r2, #1
 800ef10:	005b      	lsls	r3, r3, #1
 800ef12:	e7fa      	b.n	800ef0a <__ieee754_fmod+0x126>
 800ef14:	ea4f 522e 	mov.w	r2, lr, asr #20
 800ef18:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ef1c:	e7b1      	b.n	800ee82 <__ieee754_fmod+0x9e>
 800ef1e:	1a5c      	subs	r4, r3, r1
 800ef20:	2c1f      	cmp	r4, #31
 800ef22:	dc0a      	bgt.n	800ef3a <__ieee754_fmod+0x156>
 800ef24:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800ef28:	fa08 f804 	lsl.w	r8, r8, r4
 800ef2c:	fa2a f303 	lsr.w	r3, sl, r3
 800ef30:	ea43 0308 	orr.w	r3, r3, r8
 800ef34:	fa0a f404 	lsl.w	r4, sl, r4
 800ef38:	e7aa      	b.n	800ee90 <__ieee754_fmod+0xac>
 800ef3a:	4b32      	ldr	r3, [pc, #200]	; (800f004 <__ieee754_fmod+0x220>)
 800ef3c:	1a5b      	subs	r3, r3, r1
 800ef3e:	fa0a f303 	lsl.w	r3, sl, r3
 800ef42:	2400      	movs	r4, #0
 800ef44:	e7a4      	b.n	800ee90 <__ieee754_fmod+0xac>
 800ef46:	eba0 0c02 	sub.w	ip, r0, r2
 800ef4a:	f1bc 0f1f 	cmp.w	ip, #31
 800ef4e:	dc0a      	bgt.n	800ef66 <__ieee754_fmod+0x182>
 800ef50:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800ef54:	fa0e fe0c 	lsl.w	lr, lr, ip
 800ef58:	fa27 f606 	lsr.w	r6, r7, r6
 800ef5c:	ea46 060e 	orr.w	r6, r6, lr
 800ef60:	fa07 fc0c 	lsl.w	ip, r7, ip
 800ef64:	e79b      	b.n	800ee9e <__ieee754_fmod+0xba>
 800ef66:	4e27      	ldr	r6, [pc, #156]	; (800f004 <__ieee754_fmod+0x220>)
 800ef68:	1ab6      	subs	r6, r6, r2
 800ef6a:	fa07 f606 	lsl.w	r6, r7, r6
 800ef6e:	f04f 0c00 	mov.w	ip, #0
 800ef72:	e794      	b.n	800ee9e <__ieee754_fmod+0xba>
 800ef74:	4564      	cmp	r4, ip
 800ef76:	bf38      	it	cc
 800ef78:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800ef7c:	2800      	cmp	r0, #0
 800ef7e:	da05      	bge.n	800ef8c <__ieee754_fmod+0x1a8>
 800ef80:	0fe0      	lsrs	r0, r4, #31
 800ef82:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800ef86:	0064      	lsls	r4, r4, #1
 800ef88:	3901      	subs	r1, #1
 800ef8a:	e789      	b.n	800eea0 <__ieee754_fmod+0xbc>
 800ef8c:	ea50 0307 	orrs.w	r3, r0, r7
 800ef90:	f43f af5c 	beq.w	800ee4c <__ieee754_fmod+0x68>
 800ef94:	0ffb      	lsrs	r3, r7, #31
 800ef96:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800ef9a:	007c      	lsls	r4, r7, #1
 800ef9c:	e7f4      	b.n	800ef88 <__ieee754_fmod+0x1a4>
 800ef9e:	0fe1      	lsrs	r1, r4, #31
 800efa0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800efa4:	0064      	lsls	r4, r4, #1
 800efa6:	3a01      	subs	r2, #1
 800efa8:	e78a      	b.n	800eec0 <__ieee754_fmod+0xdc>
 800efaa:	1a89      	subs	r1, r1, r2
 800efac:	2914      	cmp	r1, #20
 800efae:	dc0a      	bgt.n	800efc6 <__ieee754_fmod+0x1e2>
 800efb0:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800efb4:	fa03 f202 	lsl.w	r2, r3, r2
 800efb8:	40cc      	lsrs	r4, r1
 800efba:	4322      	orrs	r2, r4
 800efbc:	410b      	asrs	r3, r1
 800efbe:	ea43 0105 	orr.w	r1, r3, r5
 800efc2:	4610      	mov	r0, r2
 800efc4:	e732      	b.n	800ee2c <__ieee754_fmod+0x48>
 800efc6:	291f      	cmp	r1, #31
 800efc8:	dc07      	bgt.n	800efda <__ieee754_fmod+0x1f6>
 800efca:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800efce:	40cc      	lsrs	r4, r1
 800efd0:	fa03 f202 	lsl.w	r2, r3, r2
 800efd4:	4322      	orrs	r2, r4
 800efd6:	462b      	mov	r3, r5
 800efd8:	e7f1      	b.n	800efbe <__ieee754_fmod+0x1da>
 800efda:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800efde:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800efe2:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800efe6:	32e2      	adds	r2, #226	; 0xe2
 800efe8:	fa43 f202 	asr.w	r2, r3, r2
 800efec:	e7f3      	b.n	800efd6 <__ieee754_fmod+0x1f2>
 800efee:	bf00      	nop
 800eff0:	7fefffff 	.word	0x7fefffff
 800eff4:	08013fd0 	.word	0x08013fd0
 800eff8:	fffffbed 	.word	0xfffffbed
 800effc:	7ff00000 	.word	0x7ff00000
 800f000:	fffffc02 	.word	0xfffffc02
 800f004:	fffffbe2 	.word	0xfffffbe2

0800f008 <__ieee754_pow>:
 800f008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f00c:	ed2d 8b06 	vpush	{d8-d10}
 800f010:	b089      	sub	sp, #36	; 0x24
 800f012:	ed8d 1b00 	vstr	d1, [sp]
 800f016:	e9dd 2900 	ldrd	r2, r9, [sp]
 800f01a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800f01e:	ea58 0102 	orrs.w	r1, r8, r2
 800f022:	ec57 6b10 	vmov	r6, r7, d0
 800f026:	d115      	bne.n	800f054 <__ieee754_pow+0x4c>
 800f028:	19b3      	adds	r3, r6, r6
 800f02a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800f02e:	4152      	adcs	r2, r2
 800f030:	4299      	cmp	r1, r3
 800f032:	4b89      	ldr	r3, [pc, #548]	; (800f258 <__ieee754_pow+0x250>)
 800f034:	4193      	sbcs	r3, r2
 800f036:	f080 84d2 	bcs.w	800f9de <__ieee754_pow+0x9d6>
 800f03a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f03e:	4630      	mov	r0, r6
 800f040:	4639      	mov	r1, r7
 800f042:	f7f1 f923 	bl	800028c <__adddf3>
 800f046:	ec41 0b10 	vmov	d0, r0, r1
 800f04a:	b009      	add	sp, #36	; 0x24
 800f04c:	ecbd 8b06 	vpop	{d8-d10}
 800f050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f054:	4b81      	ldr	r3, [pc, #516]	; (800f25c <__ieee754_pow+0x254>)
 800f056:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800f05a:	429c      	cmp	r4, r3
 800f05c:	ee10 aa10 	vmov	sl, s0
 800f060:	463d      	mov	r5, r7
 800f062:	dc06      	bgt.n	800f072 <__ieee754_pow+0x6a>
 800f064:	d101      	bne.n	800f06a <__ieee754_pow+0x62>
 800f066:	2e00      	cmp	r6, #0
 800f068:	d1e7      	bne.n	800f03a <__ieee754_pow+0x32>
 800f06a:	4598      	cmp	r8, r3
 800f06c:	dc01      	bgt.n	800f072 <__ieee754_pow+0x6a>
 800f06e:	d10f      	bne.n	800f090 <__ieee754_pow+0x88>
 800f070:	b172      	cbz	r2, 800f090 <__ieee754_pow+0x88>
 800f072:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800f076:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800f07a:	ea55 050a 	orrs.w	r5, r5, sl
 800f07e:	d1dc      	bne.n	800f03a <__ieee754_pow+0x32>
 800f080:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f084:	18db      	adds	r3, r3, r3
 800f086:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800f08a:	4152      	adcs	r2, r2
 800f08c:	429d      	cmp	r5, r3
 800f08e:	e7d0      	b.n	800f032 <__ieee754_pow+0x2a>
 800f090:	2d00      	cmp	r5, #0
 800f092:	da3b      	bge.n	800f10c <__ieee754_pow+0x104>
 800f094:	4b72      	ldr	r3, [pc, #456]	; (800f260 <__ieee754_pow+0x258>)
 800f096:	4598      	cmp	r8, r3
 800f098:	dc51      	bgt.n	800f13e <__ieee754_pow+0x136>
 800f09a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800f09e:	4598      	cmp	r8, r3
 800f0a0:	f340 84ac 	ble.w	800f9fc <__ieee754_pow+0x9f4>
 800f0a4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f0a8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f0ac:	2b14      	cmp	r3, #20
 800f0ae:	dd0f      	ble.n	800f0d0 <__ieee754_pow+0xc8>
 800f0b0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f0b4:	fa22 f103 	lsr.w	r1, r2, r3
 800f0b8:	fa01 f303 	lsl.w	r3, r1, r3
 800f0bc:	4293      	cmp	r3, r2
 800f0be:	f040 849d 	bne.w	800f9fc <__ieee754_pow+0x9f4>
 800f0c2:	f001 0101 	and.w	r1, r1, #1
 800f0c6:	f1c1 0302 	rsb	r3, r1, #2
 800f0ca:	9304      	str	r3, [sp, #16]
 800f0cc:	b182      	cbz	r2, 800f0f0 <__ieee754_pow+0xe8>
 800f0ce:	e05f      	b.n	800f190 <__ieee754_pow+0x188>
 800f0d0:	2a00      	cmp	r2, #0
 800f0d2:	d15b      	bne.n	800f18c <__ieee754_pow+0x184>
 800f0d4:	f1c3 0314 	rsb	r3, r3, #20
 800f0d8:	fa48 f103 	asr.w	r1, r8, r3
 800f0dc:	fa01 f303 	lsl.w	r3, r1, r3
 800f0e0:	4543      	cmp	r3, r8
 800f0e2:	f040 8488 	bne.w	800f9f6 <__ieee754_pow+0x9ee>
 800f0e6:	f001 0101 	and.w	r1, r1, #1
 800f0ea:	f1c1 0302 	rsb	r3, r1, #2
 800f0ee:	9304      	str	r3, [sp, #16]
 800f0f0:	4b5c      	ldr	r3, [pc, #368]	; (800f264 <__ieee754_pow+0x25c>)
 800f0f2:	4598      	cmp	r8, r3
 800f0f4:	d132      	bne.n	800f15c <__ieee754_pow+0x154>
 800f0f6:	f1b9 0f00 	cmp.w	r9, #0
 800f0fa:	f280 8478 	bge.w	800f9ee <__ieee754_pow+0x9e6>
 800f0fe:	4959      	ldr	r1, [pc, #356]	; (800f264 <__ieee754_pow+0x25c>)
 800f100:	4632      	mov	r2, r6
 800f102:	463b      	mov	r3, r7
 800f104:	2000      	movs	r0, #0
 800f106:	f7f1 fba1 	bl	800084c <__aeabi_ddiv>
 800f10a:	e79c      	b.n	800f046 <__ieee754_pow+0x3e>
 800f10c:	2300      	movs	r3, #0
 800f10e:	9304      	str	r3, [sp, #16]
 800f110:	2a00      	cmp	r2, #0
 800f112:	d13d      	bne.n	800f190 <__ieee754_pow+0x188>
 800f114:	4b51      	ldr	r3, [pc, #324]	; (800f25c <__ieee754_pow+0x254>)
 800f116:	4598      	cmp	r8, r3
 800f118:	d1ea      	bne.n	800f0f0 <__ieee754_pow+0xe8>
 800f11a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800f11e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800f122:	ea53 030a 	orrs.w	r3, r3, sl
 800f126:	f000 845a 	beq.w	800f9de <__ieee754_pow+0x9d6>
 800f12a:	4b4f      	ldr	r3, [pc, #316]	; (800f268 <__ieee754_pow+0x260>)
 800f12c:	429c      	cmp	r4, r3
 800f12e:	dd08      	ble.n	800f142 <__ieee754_pow+0x13a>
 800f130:	f1b9 0f00 	cmp.w	r9, #0
 800f134:	f2c0 8457 	blt.w	800f9e6 <__ieee754_pow+0x9de>
 800f138:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f13c:	e783      	b.n	800f046 <__ieee754_pow+0x3e>
 800f13e:	2302      	movs	r3, #2
 800f140:	e7e5      	b.n	800f10e <__ieee754_pow+0x106>
 800f142:	f1b9 0f00 	cmp.w	r9, #0
 800f146:	f04f 0000 	mov.w	r0, #0
 800f14a:	f04f 0100 	mov.w	r1, #0
 800f14e:	f6bf af7a 	bge.w	800f046 <__ieee754_pow+0x3e>
 800f152:	e9dd 0300 	ldrd	r0, r3, [sp]
 800f156:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f15a:	e774      	b.n	800f046 <__ieee754_pow+0x3e>
 800f15c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800f160:	d106      	bne.n	800f170 <__ieee754_pow+0x168>
 800f162:	4632      	mov	r2, r6
 800f164:	463b      	mov	r3, r7
 800f166:	4630      	mov	r0, r6
 800f168:	4639      	mov	r1, r7
 800f16a:	f7f1 fa45 	bl	80005f8 <__aeabi_dmul>
 800f16e:	e76a      	b.n	800f046 <__ieee754_pow+0x3e>
 800f170:	4b3e      	ldr	r3, [pc, #248]	; (800f26c <__ieee754_pow+0x264>)
 800f172:	4599      	cmp	r9, r3
 800f174:	d10c      	bne.n	800f190 <__ieee754_pow+0x188>
 800f176:	2d00      	cmp	r5, #0
 800f178:	db0a      	blt.n	800f190 <__ieee754_pow+0x188>
 800f17a:	ec47 6b10 	vmov	d0, r6, r7
 800f17e:	b009      	add	sp, #36	; 0x24
 800f180:	ecbd 8b06 	vpop	{d8-d10}
 800f184:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f188:	f000 bc6c 	b.w	800fa64 <__ieee754_sqrt>
 800f18c:	2300      	movs	r3, #0
 800f18e:	9304      	str	r3, [sp, #16]
 800f190:	ec47 6b10 	vmov	d0, r6, r7
 800f194:	f000 fee8 	bl	800ff68 <fabs>
 800f198:	ec51 0b10 	vmov	r0, r1, d0
 800f19c:	f1ba 0f00 	cmp.w	sl, #0
 800f1a0:	d129      	bne.n	800f1f6 <__ieee754_pow+0x1ee>
 800f1a2:	b124      	cbz	r4, 800f1ae <__ieee754_pow+0x1a6>
 800f1a4:	4b2f      	ldr	r3, [pc, #188]	; (800f264 <__ieee754_pow+0x25c>)
 800f1a6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800f1aa:	429a      	cmp	r2, r3
 800f1ac:	d123      	bne.n	800f1f6 <__ieee754_pow+0x1ee>
 800f1ae:	f1b9 0f00 	cmp.w	r9, #0
 800f1b2:	da05      	bge.n	800f1c0 <__ieee754_pow+0x1b8>
 800f1b4:	4602      	mov	r2, r0
 800f1b6:	460b      	mov	r3, r1
 800f1b8:	2000      	movs	r0, #0
 800f1ba:	492a      	ldr	r1, [pc, #168]	; (800f264 <__ieee754_pow+0x25c>)
 800f1bc:	f7f1 fb46 	bl	800084c <__aeabi_ddiv>
 800f1c0:	2d00      	cmp	r5, #0
 800f1c2:	f6bf af40 	bge.w	800f046 <__ieee754_pow+0x3e>
 800f1c6:	9b04      	ldr	r3, [sp, #16]
 800f1c8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800f1cc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f1d0:	4323      	orrs	r3, r4
 800f1d2:	d108      	bne.n	800f1e6 <__ieee754_pow+0x1de>
 800f1d4:	4602      	mov	r2, r0
 800f1d6:	460b      	mov	r3, r1
 800f1d8:	4610      	mov	r0, r2
 800f1da:	4619      	mov	r1, r3
 800f1dc:	f7f1 f854 	bl	8000288 <__aeabi_dsub>
 800f1e0:	4602      	mov	r2, r0
 800f1e2:	460b      	mov	r3, r1
 800f1e4:	e78f      	b.n	800f106 <__ieee754_pow+0xfe>
 800f1e6:	9b04      	ldr	r3, [sp, #16]
 800f1e8:	2b01      	cmp	r3, #1
 800f1ea:	f47f af2c 	bne.w	800f046 <__ieee754_pow+0x3e>
 800f1ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f1f2:	4619      	mov	r1, r3
 800f1f4:	e727      	b.n	800f046 <__ieee754_pow+0x3e>
 800f1f6:	0feb      	lsrs	r3, r5, #31
 800f1f8:	3b01      	subs	r3, #1
 800f1fa:	9306      	str	r3, [sp, #24]
 800f1fc:	9a06      	ldr	r2, [sp, #24]
 800f1fe:	9b04      	ldr	r3, [sp, #16]
 800f200:	4313      	orrs	r3, r2
 800f202:	d102      	bne.n	800f20a <__ieee754_pow+0x202>
 800f204:	4632      	mov	r2, r6
 800f206:	463b      	mov	r3, r7
 800f208:	e7e6      	b.n	800f1d8 <__ieee754_pow+0x1d0>
 800f20a:	4b19      	ldr	r3, [pc, #100]	; (800f270 <__ieee754_pow+0x268>)
 800f20c:	4598      	cmp	r8, r3
 800f20e:	f340 80fb 	ble.w	800f408 <__ieee754_pow+0x400>
 800f212:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800f216:	4598      	cmp	r8, r3
 800f218:	4b13      	ldr	r3, [pc, #76]	; (800f268 <__ieee754_pow+0x260>)
 800f21a:	dd0c      	ble.n	800f236 <__ieee754_pow+0x22e>
 800f21c:	429c      	cmp	r4, r3
 800f21e:	dc0f      	bgt.n	800f240 <__ieee754_pow+0x238>
 800f220:	f1b9 0f00 	cmp.w	r9, #0
 800f224:	da0f      	bge.n	800f246 <__ieee754_pow+0x23e>
 800f226:	2000      	movs	r0, #0
 800f228:	b009      	add	sp, #36	; 0x24
 800f22a:	ecbd 8b06 	vpop	{d8-d10}
 800f22e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f232:	f000 bcf0 	b.w	800fc16 <__math_oflow>
 800f236:	429c      	cmp	r4, r3
 800f238:	dbf2      	blt.n	800f220 <__ieee754_pow+0x218>
 800f23a:	4b0a      	ldr	r3, [pc, #40]	; (800f264 <__ieee754_pow+0x25c>)
 800f23c:	429c      	cmp	r4, r3
 800f23e:	dd19      	ble.n	800f274 <__ieee754_pow+0x26c>
 800f240:	f1b9 0f00 	cmp.w	r9, #0
 800f244:	dcef      	bgt.n	800f226 <__ieee754_pow+0x21e>
 800f246:	2000      	movs	r0, #0
 800f248:	b009      	add	sp, #36	; 0x24
 800f24a:	ecbd 8b06 	vpop	{d8-d10}
 800f24e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f252:	f000 bcd7 	b.w	800fc04 <__math_uflow>
 800f256:	bf00      	nop
 800f258:	fff00000 	.word	0xfff00000
 800f25c:	7ff00000 	.word	0x7ff00000
 800f260:	433fffff 	.word	0x433fffff
 800f264:	3ff00000 	.word	0x3ff00000
 800f268:	3fefffff 	.word	0x3fefffff
 800f26c:	3fe00000 	.word	0x3fe00000
 800f270:	41e00000 	.word	0x41e00000
 800f274:	4b60      	ldr	r3, [pc, #384]	; (800f3f8 <__ieee754_pow+0x3f0>)
 800f276:	2200      	movs	r2, #0
 800f278:	f7f1 f806 	bl	8000288 <__aeabi_dsub>
 800f27c:	a354      	add	r3, pc, #336	; (adr r3, 800f3d0 <__ieee754_pow+0x3c8>)
 800f27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f282:	4604      	mov	r4, r0
 800f284:	460d      	mov	r5, r1
 800f286:	f7f1 f9b7 	bl	80005f8 <__aeabi_dmul>
 800f28a:	a353      	add	r3, pc, #332	; (adr r3, 800f3d8 <__ieee754_pow+0x3d0>)
 800f28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f290:	4606      	mov	r6, r0
 800f292:	460f      	mov	r7, r1
 800f294:	4620      	mov	r0, r4
 800f296:	4629      	mov	r1, r5
 800f298:	f7f1 f9ae 	bl	80005f8 <__aeabi_dmul>
 800f29c:	4b57      	ldr	r3, [pc, #348]	; (800f3fc <__ieee754_pow+0x3f4>)
 800f29e:	4682      	mov	sl, r0
 800f2a0:	468b      	mov	fp, r1
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	4620      	mov	r0, r4
 800f2a6:	4629      	mov	r1, r5
 800f2a8:	f7f1 f9a6 	bl	80005f8 <__aeabi_dmul>
 800f2ac:	4602      	mov	r2, r0
 800f2ae:	460b      	mov	r3, r1
 800f2b0:	a14b      	add	r1, pc, #300	; (adr r1, 800f3e0 <__ieee754_pow+0x3d8>)
 800f2b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2b6:	f7f0 ffe7 	bl	8000288 <__aeabi_dsub>
 800f2ba:	4622      	mov	r2, r4
 800f2bc:	462b      	mov	r3, r5
 800f2be:	f7f1 f99b 	bl	80005f8 <__aeabi_dmul>
 800f2c2:	4602      	mov	r2, r0
 800f2c4:	460b      	mov	r3, r1
 800f2c6:	2000      	movs	r0, #0
 800f2c8:	494d      	ldr	r1, [pc, #308]	; (800f400 <__ieee754_pow+0x3f8>)
 800f2ca:	f7f0 ffdd 	bl	8000288 <__aeabi_dsub>
 800f2ce:	4622      	mov	r2, r4
 800f2d0:	4680      	mov	r8, r0
 800f2d2:	4689      	mov	r9, r1
 800f2d4:	462b      	mov	r3, r5
 800f2d6:	4620      	mov	r0, r4
 800f2d8:	4629      	mov	r1, r5
 800f2da:	f7f1 f98d 	bl	80005f8 <__aeabi_dmul>
 800f2de:	4602      	mov	r2, r0
 800f2e0:	460b      	mov	r3, r1
 800f2e2:	4640      	mov	r0, r8
 800f2e4:	4649      	mov	r1, r9
 800f2e6:	f7f1 f987 	bl	80005f8 <__aeabi_dmul>
 800f2ea:	a33f      	add	r3, pc, #252	; (adr r3, 800f3e8 <__ieee754_pow+0x3e0>)
 800f2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2f0:	f7f1 f982 	bl	80005f8 <__aeabi_dmul>
 800f2f4:	4602      	mov	r2, r0
 800f2f6:	460b      	mov	r3, r1
 800f2f8:	4650      	mov	r0, sl
 800f2fa:	4659      	mov	r1, fp
 800f2fc:	f7f0 ffc4 	bl	8000288 <__aeabi_dsub>
 800f300:	4602      	mov	r2, r0
 800f302:	460b      	mov	r3, r1
 800f304:	4680      	mov	r8, r0
 800f306:	4689      	mov	r9, r1
 800f308:	4630      	mov	r0, r6
 800f30a:	4639      	mov	r1, r7
 800f30c:	f7f0 ffbe 	bl	800028c <__adddf3>
 800f310:	2000      	movs	r0, #0
 800f312:	4632      	mov	r2, r6
 800f314:	463b      	mov	r3, r7
 800f316:	4604      	mov	r4, r0
 800f318:	460d      	mov	r5, r1
 800f31a:	f7f0 ffb5 	bl	8000288 <__aeabi_dsub>
 800f31e:	4602      	mov	r2, r0
 800f320:	460b      	mov	r3, r1
 800f322:	4640      	mov	r0, r8
 800f324:	4649      	mov	r1, r9
 800f326:	f7f0 ffaf 	bl	8000288 <__aeabi_dsub>
 800f32a:	9b04      	ldr	r3, [sp, #16]
 800f32c:	9a06      	ldr	r2, [sp, #24]
 800f32e:	3b01      	subs	r3, #1
 800f330:	4313      	orrs	r3, r2
 800f332:	4682      	mov	sl, r0
 800f334:	468b      	mov	fp, r1
 800f336:	f040 81e7 	bne.w	800f708 <__ieee754_pow+0x700>
 800f33a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800f3f0 <__ieee754_pow+0x3e8>
 800f33e:	eeb0 8a47 	vmov.f32	s16, s14
 800f342:	eef0 8a67 	vmov.f32	s17, s15
 800f346:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f34a:	2600      	movs	r6, #0
 800f34c:	4632      	mov	r2, r6
 800f34e:	463b      	mov	r3, r7
 800f350:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f354:	f7f0 ff98 	bl	8000288 <__aeabi_dsub>
 800f358:	4622      	mov	r2, r4
 800f35a:	462b      	mov	r3, r5
 800f35c:	f7f1 f94c 	bl	80005f8 <__aeabi_dmul>
 800f360:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f364:	4680      	mov	r8, r0
 800f366:	4689      	mov	r9, r1
 800f368:	4650      	mov	r0, sl
 800f36a:	4659      	mov	r1, fp
 800f36c:	f7f1 f944 	bl	80005f8 <__aeabi_dmul>
 800f370:	4602      	mov	r2, r0
 800f372:	460b      	mov	r3, r1
 800f374:	4640      	mov	r0, r8
 800f376:	4649      	mov	r1, r9
 800f378:	f7f0 ff88 	bl	800028c <__adddf3>
 800f37c:	4632      	mov	r2, r6
 800f37e:	463b      	mov	r3, r7
 800f380:	4680      	mov	r8, r0
 800f382:	4689      	mov	r9, r1
 800f384:	4620      	mov	r0, r4
 800f386:	4629      	mov	r1, r5
 800f388:	f7f1 f936 	bl	80005f8 <__aeabi_dmul>
 800f38c:	460b      	mov	r3, r1
 800f38e:	4604      	mov	r4, r0
 800f390:	460d      	mov	r5, r1
 800f392:	4602      	mov	r2, r0
 800f394:	4649      	mov	r1, r9
 800f396:	4640      	mov	r0, r8
 800f398:	f7f0 ff78 	bl	800028c <__adddf3>
 800f39c:	4b19      	ldr	r3, [pc, #100]	; (800f404 <__ieee754_pow+0x3fc>)
 800f39e:	4299      	cmp	r1, r3
 800f3a0:	ec45 4b19 	vmov	d9, r4, r5
 800f3a4:	4606      	mov	r6, r0
 800f3a6:	460f      	mov	r7, r1
 800f3a8:	468b      	mov	fp, r1
 800f3aa:	f340 82f1 	ble.w	800f990 <__ieee754_pow+0x988>
 800f3ae:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800f3b2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800f3b6:	4303      	orrs	r3, r0
 800f3b8:	f000 81e4 	beq.w	800f784 <__ieee754_pow+0x77c>
 800f3bc:	ec51 0b18 	vmov	r0, r1, d8
 800f3c0:	2200      	movs	r2, #0
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	f7f1 fb8a 	bl	8000adc <__aeabi_dcmplt>
 800f3c8:	3800      	subs	r0, #0
 800f3ca:	bf18      	it	ne
 800f3cc:	2001      	movne	r0, #1
 800f3ce:	e72b      	b.n	800f228 <__ieee754_pow+0x220>
 800f3d0:	60000000 	.word	0x60000000
 800f3d4:	3ff71547 	.word	0x3ff71547
 800f3d8:	f85ddf44 	.word	0xf85ddf44
 800f3dc:	3e54ae0b 	.word	0x3e54ae0b
 800f3e0:	55555555 	.word	0x55555555
 800f3e4:	3fd55555 	.word	0x3fd55555
 800f3e8:	652b82fe 	.word	0x652b82fe
 800f3ec:	3ff71547 	.word	0x3ff71547
 800f3f0:	00000000 	.word	0x00000000
 800f3f4:	bff00000 	.word	0xbff00000
 800f3f8:	3ff00000 	.word	0x3ff00000
 800f3fc:	3fd00000 	.word	0x3fd00000
 800f400:	3fe00000 	.word	0x3fe00000
 800f404:	408fffff 	.word	0x408fffff
 800f408:	4bd5      	ldr	r3, [pc, #852]	; (800f760 <__ieee754_pow+0x758>)
 800f40a:	402b      	ands	r3, r5
 800f40c:	2200      	movs	r2, #0
 800f40e:	b92b      	cbnz	r3, 800f41c <__ieee754_pow+0x414>
 800f410:	4bd4      	ldr	r3, [pc, #848]	; (800f764 <__ieee754_pow+0x75c>)
 800f412:	f7f1 f8f1 	bl	80005f8 <__aeabi_dmul>
 800f416:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800f41a:	460c      	mov	r4, r1
 800f41c:	1523      	asrs	r3, r4, #20
 800f41e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f422:	4413      	add	r3, r2
 800f424:	9305      	str	r3, [sp, #20]
 800f426:	4bd0      	ldr	r3, [pc, #832]	; (800f768 <__ieee754_pow+0x760>)
 800f428:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f42c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800f430:	429c      	cmp	r4, r3
 800f432:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f436:	dd08      	ble.n	800f44a <__ieee754_pow+0x442>
 800f438:	4bcc      	ldr	r3, [pc, #816]	; (800f76c <__ieee754_pow+0x764>)
 800f43a:	429c      	cmp	r4, r3
 800f43c:	f340 8162 	ble.w	800f704 <__ieee754_pow+0x6fc>
 800f440:	9b05      	ldr	r3, [sp, #20]
 800f442:	3301      	adds	r3, #1
 800f444:	9305      	str	r3, [sp, #20]
 800f446:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800f44a:	2400      	movs	r4, #0
 800f44c:	00e3      	lsls	r3, r4, #3
 800f44e:	9307      	str	r3, [sp, #28]
 800f450:	4bc7      	ldr	r3, [pc, #796]	; (800f770 <__ieee754_pow+0x768>)
 800f452:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f456:	ed93 7b00 	vldr	d7, [r3]
 800f45a:	4629      	mov	r1, r5
 800f45c:	ec53 2b17 	vmov	r2, r3, d7
 800f460:	eeb0 9a47 	vmov.f32	s18, s14
 800f464:	eef0 9a67 	vmov.f32	s19, s15
 800f468:	4682      	mov	sl, r0
 800f46a:	f7f0 ff0d 	bl	8000288 <__aeabi_dsub>
 800f46e:	4652      	mov	r2, sl
 800f470:	4606      	mov	r6, r0
 800f472:	460f      	mov	r7, r1
 800f474:	462b      	mov	r3, r5
 800f476:	ec51 0b19 	vmov	r0, r1, d9
 800f47a:	f7f0 ff07 	bl	800028c <__adddf3>
 800f47e:	4602      	mov	r2, r0
 800f480:	460b      	mov	r3, r1
 800f482:	2000      	movs	r0, #0
 800f484:	49bb      	ldr	r1, [pc, #748]	; (800f774 <__ieee754_pow+0x76c>)
 800f486:	f7f1 f9e1 	bl	800084c <__aeabi_ddiv>
 800f48a:	ec41 0b1a 	vmov	d10, r0, r1
 800f48e:	4602      	mov	r2, r0
 800f490:	460b      	mov	r3, r1
 800f492:	4630      	mov	r0, r6
 800f494:	4639      	mov	r1, r7
 800f496:	f7f1 f8af 	bl	80005f8 <__aeabi_dmul>
 800f49a:	2300      	movs	r3, #0
 800f49c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f4a0:	9302      	str	r3, [sp, #8]
 800f4a2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f4a6:	46ab      	mov	fp, r5
 800f4a8:	106d      	asrs	r5, r5, #1
 800f4aa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800f4ae:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800f4b2:	ec41 0b18 	vmov	d8, r0, r1
 800f4b6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	4640      	mov	r0, r8
 800f4be:	4649      	mov	r1, r9
 800f4c0:	4614      	mov	r4, r2
 800f4c2:	461d      	mov	r5, r3
 800f4c4:	f7f1 f898 	bl	80005f8 <__aeabi_dmul>
 800f4c8:	4602      	mov	r2, r0
 800f4ca:	460b      	mov	r3, r1
 800f4cc:	4630      	mov	r0, r6
 800f4ce:	4639      	mov	r1, r7
 800f4d0:	f7f0 feda 	bl	8000288 <__aeabi_dsub>
 800f4d4:	ec53 2b19 	vmov	r2, r3, d9
 800f4d8:	4606      	mov	r6, r0
 800f4da:	460f      	mov	r7, r1
 800f4dc:	4620      	mov	r0, r4
 800f4de:	4629      	mov	r1, r5
 800f4e0:	f7f0 fed2 	bl	8000288 <__aeabi_dsub>
 800f4e4:	4602      	mov	r2, r0
 800f4e6:	460b      	mov	r3, r1
 800f4e8:	4650      	mov	r0, sl
 800f4ea:	4659      	mov	r1, fp
 800f4ec:	f7f0 fecc 	bl	8000288 <__aeabi_dsub>
 800f4f0:	4642      	mov	r2, r8
 800f4f2:	464b      	mov	r3, r9
 800f4f4:	f7f1 f880 	bl	80005f8 <__aeabi_dmul>
 800f4f8:	4602      	mov	r2, r0
 800f4fa:	460b      	mov	r3, r1
 800f4fc:	4630      	mov	r0, r6
 800f4fe:	4639      	mov	r1, r7
 800f500:	f7f0 fec2 	bl	8000288 <__aeabi_dsub>
 800f504:	ec53 2b1a 	vmov	r2, r3, d10
 800f508:	f7f1 f876 	bl	80005f8 <__aeabi_dmul>
 800f50c:	ec53 2b18 	vmov	r2, r3, d8
 800f510:	ec41 0b19 	vmov	d9, r0, r1
 800f514:	ec51 0b18 	vmov	r0, r1, d8
 800f518:	f7f1 f86e 	bl	80005f8 <__aeabi_dmul>
 800f51c:	a37c      	add	r3, pc, #496	; (adr r3, 800f710 <__ieee754_pow+0x708>)
 800f51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f522:	4604      	mov	r4, r0
 800f524:	460d      	mov	r5, r1
 800f526:	f7f1 f867 	bl	80005f8 <__aeabi_dmul>
 800f52a:	a37b      	add	r3, pc, #492	; (adr r3, 800f718 <__ieee754_pow+0x710>)
 800f52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f530:	f7f0 feac 	bl	800028c <__adddf3>
 800f534:	4622      	mov	r2, r4
 800f536:	462b      	mov	r3, r5
 800f538:	f7f1 f85e 	bl	80005f8 <__aeabi_dmul>
 800f53c:	a378      	add	r3, pc, #480	; (adr r3, 800f720 <__ieee754_pow+0x718>)
 800f53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f542:	f7f0 fea3 	bl	800028c <__adddf3>
 800f546:	4622      	mov	r2, r4
 800f548:	462b      	mov	r3, r5
 800f54a:	f7f1 f855 	bl	80005f8 <__aeabi_dmul>
 800f54e:	a376      	add	r3, pc, #472	; (adr r3, 800f728 <__ieee754_pow+0x720>)
 800f550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f554:	f7f0 fe9a 	bl	800028c <__adddf3>
 800f558:	4622      	mov	r2, r4
 800f55a:	462b      	mov	r3, r5
 800f55c:	f7f1 f84c 	bl	80005f8 <__aeabi_dmul>
 800f560:	a373      	add	r3, pc, #460	; (adr r3, 800f730 <__ieee754_pow+0x728>)
 800f562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f566:	f7f0 fe91 	bl	800028c <__adddf3>
 800f56a:	4622      	mov	r2, r4
 800f56c:	462b      	mov	r3, r5
 800f56e:	f7f1 f843 	bl	80005f8 <__aeabi_dmul>
 800f572:	a371      	add	r3, pc, #452	; (adr r3, 800f738 <__ieee754_pow+0x730>)
 800f574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f578:	f7f0 fe88 	bl	800028c <__adddf3>
 800f57c:	4622      	mov	r2, r4
 800f57e:	4606      	mov	r6, r0
 800f580:	460f      	mov	r7, r1
 800f582:	462b      	mov	r3, r5
 800f584:	4620      	mov	r0, r4
 800f586:	4629      	mov	r1, r5
 800f588:	f7f1 f836 	bl	80005f8 <__aeabi_dmul>
 800f58c:	4602      	mov	r2, r0
 800f58e:	460b      	mov	r3, r1
 800f590:	4630      	mov	r0, r6
 800f592:	4639      	mov	r1, r7
 800f594:	f7f1 f830 	bl	80005f8 <__aeabi_dmul>
 800f598:	4642      	mov	r2, r8
 800f59a:	4604      	mov	r4, r0
 800f59c:	460d      	mov	r5, r1
 800f59e:	464b      	mov	r3, r9
 800f5a0:	ec51 0b18 	vmov	r0, r1, d8
 800f5a4:	f7f0 fe72 	bl	800028c <__adddf3>
 800f5a8:	ec53 2b19 	vmov	r2, r3, d9
 800f5ac:	f7f1 f824 	bl	80005f8 <__aeabi_dmul>
 800f5b0:	4622      	mov	r2, r4
 800f5b2:	462b      	mov	r3, r5
 800f5b4:	f7f0 fe6a 	bl	800028c <__adddf3>
 800f5b8:	4642      	mov	r2, r8
 800f5ba:	4682      	mov	sl, r0
 800f5bc:	468b      	mov	fp, r1
 800f5be:	464b      	mov	r3, r9
 800f5c0:	4640      	mov	r0, r8
 800f5c2:	4649      	mov	r1, r9
 800f5c4:	f7f1 f818 	bl	80005f8 <__aeabi_dmul>
 800f5c8:	4b6b      	ldr	r3, [pc, #428]	; (800f778 <__ieee754_pow+0x770>)
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	4606      	mov	r6, r0
 800f5ce:	460f      	mov	r7, r1
 800f5d0:	f7f0 fe5c 	bl	800028c <__adddf3>
 800f5d4:	4652      	mov	r2, sl
 800f5d6:	465b      	mov	r3, fp
 800f5d8:	f7f0 fe58 	bl	800028c <__adddf3>
 800f5dc:	2000      	movs	r0, #0
 800f5de:	4604      	mov	r4, r0
 800f5e0:	460d      	mov	r5, r1
 800f5e2:	4602      	mov	r2, r0
 800f5e4:	460b      	mov	r3, r1
 800f5e6:	4640      	mov	r0, r8
 800f5e8:	4649      	mov	r1, r9
 800f5ea:	f7f1 f805 	bl	80005f8 <__aeabi_dmul>
 800f5ee:	4b62      	ldr	r3, [pc, #392]	; (800f778 <__ieee754_pow+0x770>)
 800f5f0:	4680      	mov	r8, r0
 800f5f2:	4689      	mov	r9, r1
 800f5f4:	2200      	movs	r2, #0
 800f5f6:	4620      	mov	r0, r4
 800f5f8:	4629      	mov	r1, r5
 800f5fa:	f7f0 fe45 	bl	8000288 <__aeabi_dsub>
 800f5fe:	4632      	mov	r2, r6
 800f600:	463b      	mov	r3, r7
 800f602:	f7f0 fe41 	bl	8000288 <__aeabi_dsub>
 800f606:	4602      	mov	r2, r0
 800f608:	460b      	mov	r3, r1
 800f60a:	4650      	mov	r0, sl
 800f60c:	4659      	mov	r1, fp
 800f60e:	f7f0 fe3b 	bl	8000288 <__aeabi_dsub>
 800f612:	ec53 2b18 	vmov	r2, r3, d8
 800f616:	f7f0 ffef 	bl	80005f8 <__aeabi_dmul>
 800f61a:	4622      	mov	r2, r4
 800f61c:	4606      	mov	r6, r0
 800f61e:	460f      	mov	r7, r1
 800f620:	462b      	mov	r3, r5
 800f622:	ec51 0b19 	vmov	r0, r1, d9
 800f626:	f7f0 ffe7 	bl	80005f8 <__aeabi_dmul>
 800f62a:	4602      	mov	r2, r0
 800f62c:	460b      	mov	r3, r1
 800f62e:	4630      	mov	r0, r6
 800f630:	4639      	mov	r1, r7
 800f632:	f7f0 fe2b 	bl	800028c <__adddf3>
 800f636:	4606      	mov	r6, r0
 800f638:	460f      	mov	r7, r1
 800f63a:	4602      	mov	r2, r0
 800f63c:	460b      	mov	r3, r1
 800f63e:	4640      	mov	r0, r8
 800f640:	4649      	mov	r1, r9
 800f642:	f7f0 fe23 	bl	800028c <__adddf3>
 800f646:	a33e      	add	r3, pc, #248	; (adr r3, 800f740 <__ieee754_pow+0x738>)
 800f648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f64c:	2000      	movs	r0, #0
 800f64e:	4604      	mov	r4, r0
 800f650:	460d      	mov	r5, r1
 800f652:	f7f0 ffd1 	bl	80005f8 <__aeabi_dmul>
 800f656:	4642      	mov	r2, r8
 800f658:	ec41 0b18 	vmov	d8, r0, r1
 800f65c:	464b      	mov	r3, r9
 800f65e:	4620      	mov	r0, r4
 800f660:	4629      	mov	r1, r5
 800f662:	f7f0 fe11 	bl	8000288 <__aeabi_dsub>
 800f666:	4602      	mov	r2, r0
 800f668:	460b      	mov	r3, r1
 800f66a:	4630      	mov	r0, r6
 800f66c:	4639      	mov	r1, r7
 800f66e:	f7f0 fe0b 	bl	8000288 <__aeabi_dsub>
 800f672:	a335      	add	r3, pc, #212	; (adr r3, 800f748 <__ieee754_pow+0x740>)
 800f674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f678:	f7f0 ffbe 	bl	80005f8 <__aeabi_dmul>
 800f67c:	a334      	add	r3, pc, #208	; (adr r3, 800f750 <__ieee754_pow+0x748>)
 800f67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f682:	4606      	mov	r6, r0
 800f684:	460f      	mov	r7, r1
 800f686:	4620      	mov	r0, r4
 800f688:	4629      	mov	r1, r5
 800f68a:	f7f0 ffb5 	bl	80005f8 <__aeabi_dmul>
 800f68e:	4602      	mov	r2, r0
 800f690:	460b      	mov	r3, r1
 800f692:	4630      	mov	r0, r6
 800f694:	4639      	mov	r1, r7
 800f696:	f7f0 fdf9 	bl	800028c <__adddf3>
 800f69a:	9a07      	ldr	r2, [sp, #28]
 800f69c:	4b37      	ldr	r3, [pc, #220]	; (800f77c <__ieee754_pow+0x774>)
 800f69e:	4413      	add	r3, r2
 800f6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6a4:	f7f0 fdf2 	bl	800028c <__adddf3>
 800f6a8:	4682      	mov	sl, r0
 800f6aa:	9805      	ldr	r0, [sp, #20]
 800f6ac:	468b      	mov	fp, r1
 800f6ae:	f7f0 ff39 	bl	8000524 <__aeabi_i2d>
 800f6b2:	9a07      	ldr	r2, [sp, #28]
 800f6b4:	4b32      	ldr	r3, [pc, #200]	; (800f780 <__ieee754_pow+0x778>)
 800f6b6:	4413      	add	r3, r2
 800f6b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f6bc:	4606      	mov	r6, r0
 800f6be:	460f      	mov	r7, r1
 800f6c0:	4652      	mov	r2, sl
 800f6c2:	465b      	mov	r3, fp
 800f6c4:	ec51 0b18 	vmov	r0, r1, d8
 800f6c8:	f7f0 fde0 	bl	800028c <__adddf3>
 800f6cc:	4642      	mov	r2, r8
 800f6ce:	464b      	mov	r3, r9
 800f6d0:	f7f0 fddc 	bl	800028c <__adddf3>
 800f6d4:	4632      	mov	r2, r6
 800f6d6:	463b      	mov	r3, r7
 800f6d8:	f7f0 fdd8 	bl	800028c <__adddf3>
 800f6dc:	2000      	movs	r0, #0
 800f6de:	4632      	mov	r2, r6
 800f6e0:	463b      	mov	r3, r7
 800f6e2:	4604      	mov	r4, r0
 800f6e4:	460d      	mov	r5, r1
 800f6e6:	f7f0 fdcf 	bl	8000288 <__aeabi_dsub>
 800f6ea:	4642      	mov	r2, r8
 800f6ec:	464b      	mov	r3, r9
 800f6ee:	f7f0 fdcb 	bl	8000288 <__aeabi_dsub>
 800f6f2:	ec53 2b18 	vmov	r2, r3, d8
 800f6f6:	f7f0 fdc7 	bl	8000288 <__aeabi_dsub>
 800f6fa:	4602      	mov	r2, r0
 800f6fc:	460b      	mov	r3, r1
 800f6fe:	4650      	mov	r0, sl
 800f700:	4659      	mov	r1, fp
 800f702:	e610      	b.n	800f326 <__ieee754_pow+0x31e>
 800f704:	2401      	movs	r4, #1
 800f706:	e6a1      	b.n	800f44c <__ieee754_pow+0x444>
 800f708:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800f758 <__ieee754_pow+0x750>
 800f70c:	e617      	b.n	800f33e <__ieee754_pow+0x336>
 800f70e:	bf00      	nop
 800f710:	4a454eef 	.word	0x4a454eef
 800f714:	3fca7e28 	.word	0x3fca7e28
 800f718:	93c9db65 	.word	0x93c9db65
 800f71c:	3fcd864a 	.word	0x3fcd864a
 800f720:	a91d4101 	.word	0xa91d4101
 800f724:	3fd17460 	.word	0x3fd17460
 800f728:	518f264d 	.word	0x518f264d
 800f72c:	3fd55555 	.word	0x3fd55555
 800f730:	db6fabff 	.word	0xdb6fabff
 800f734:	3fdb6db6 	.word	0x3fdb6db6
 800f738:	33333303 	.word	0x33333303
 800f73c:	3fe33333 	.word	0x3fe33333
 800f740:	e0000000 	.word	0xe0000000
 800f744:	3feec709 	.word	0x3feec709
 800f748:	dc3a03fd 	.word	0xdc3a03fd
 800f74c:	3feec709 	.word	0x3feec709
 800f750:	145b01f5 	.word	0x145b01f5
 800f754:	be3e2fe0 	.word	0xbe3e2fe0
 800f758:	00000000 	.word	0x00000000
 800f75c:	3ff00000 	.word	0x3ff00000
 800f760:	7ff00000 	.word	0x7ff00000
 800f764:	43400000 	.word	0x43400000
 800f768:	0003988e 	.word	0x0003988e
 800f76c:	000bb679 	.word	0x000bb679
 800f770:	08013fe0 	.word	0x08013fe0
 800f774:	3ff00000 	.word	0x3ff00000
 800f778:	40080000 	.word	0x40080000
 800f77c:	08014000 	.word	0x08014000
 800f780:	08013ff0 	.word	0x08013ff0
 800f784:	a3b5      	add	r3, pc, #724	; (adr r3, 800fa5c <__ieee754_pow+0xa54>)
 800f786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f78a:	4640      	mov	r0, r8
 800f78c:	4649      	mov	r1, r9
 800f78e:	f7f0 fd7d 	bl	800028c <__adddf3>
 800f792:	4622      	mov	r2, r4
 800f794:	ec41 0b1a 	vmov	d10, r0, r1
 800f798:	462b      	mov	r3, r5
 800f79a:	4630      	mov	r0, r6
 800f79c:	4639      	mov	r1, r7
 800f79e:	f7f0 fd73 	bl	8000288 <__aeabi_dsub>
 800f7a2:	4602      	mov	r2, r0
 800f7a4:	460b      	mov	r3, r1
 800f7a6:	ec51 0b1a 	vmov	r0, r1, d10
 800f7aa:	f7f1 f9b5 	bl	8000b18 <__aeabi_dcmpgt>
 800f7ae:	2800      	cmp	r0, #0
 800f7b0:	f47f ae04 	bne.w	800f3bc <__ieee754_pow+0x3b4>
 800f7b4:	4aa4      	ldr	r2, [pc, #656]	; (800fa48 <__ieee754_pow+0xa40>)
 800f7b6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f7ba:	4293      	cmp	r3, r2
 800f7bc:	f340 8108 	ble.w	800f9d0 <__ieee754_pow+0x9c8>
 800f7c0:	151b      	asrs	r3, r3, #20
 800f7c2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800f7c6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800f7ca:	fa4a f303 	asr.w	r3, sl, r3
 800f7ce:	445b      	add	r3, fp
 800f7d0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f7d4:	4e9d      	ldr	r6, [pc, #628]	; (800fa4c <__ieee754_pow+0xa44>)
 800f7d6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800f7da:	4116      	asrs	r6, r2
 800f7dc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800f7e0:	2000      	movs	r0, #0
 800f7e2:	ea23 0106 	bic.w	r1, r3, r6
 800f7e6:	f1c2 0214 	rsb	r2, r2, #20
 800f7ea:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800f7ee:	fa4a fa02 	asr.w	sl, sl, r2
 800f7f2:	f1bb 0f00 	cmp.w	fp, #0
 800f7f6:	4602      	mov	r2, r0
 800f7f8:	460b      	mov	r3, r1
 800f7fa:	4620      	mov	r0, r4
 800f7fc:	4629      	mov	r1, r5
 800f7fe:	bfb8      	it	lt
 800f800:	f1ca 0a00 	rsblt	sl, sl, #0
 800f804:	f7f0 fd40 	bl	8000288 <__aeabi_dsub>
 800f808:	ec41 0b19 	vmov	d9, r0, r1
 800f80c:	4642      	mov	r2, r8
 800f80e:	464b      	mov	r3, r9
 800f810:	ec51 0b19 	vmov	r0, r1, d9
 800f814:	f7f0 fd3a 	bl	800028c <__adddf3>
 800f818:	a37b      	add	r3, pc, #492	; (adr r3, 800fa08 <__ieee754_pow+0xa00>)
 800f81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f81e:	2000      	movs	r0, #0
 800f820:	4604      	mov	r4, r0
 800f822:	460d      	mov	r5, r1
 800f824:	f7f0 fee8 	bl	80005f8 <__aeabi_dmul>
 800f828:	ec53 2b19 	vmov	r2, r3, d9
 800f82c:	4606      	mov	r6, r0
 800f82e:	460f      	mov	r7, r1
 800f830:	4620      	mov	r0, r4
 800f832:	4629      	mov	r1, r5
 800f834:	f7f0 fd28 	bl	8000288 <__aeabi_dsub>
 800f838:	4602      	mov	r2, r0
 800f83a:	460b      	mov	r3, r1
 800f83c:	4640      	mov	r0, r8
 800f83e:	4649      	mov	r1, r9
 800f840:	f7f0 fd22 	bl	8000288 <__aeabi_dsub>
 800f844:	a372      	add	r3, pc, #456	; (adr r3, 800fa10 <__ieee754_pow+0xa08>)
 800f846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f84a:	f7f0 fed5 	bl	80005f8 <__aeabi_dmul>
 800f84e:	a372      	add	r3, pc, #456	; (adr r3, 800fa18 <__ieee754_pow+0xa10>)
 800f850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f854:	4680      	mov	r8, r0
 800f856:	4689      	mov	r9, r1
 800f858:	4620      	mov	r0, r4
 800f85a:	4629      	mov	r1, r5
 800f85c:	f7f0 fecc 	bl	80005f8 <__aeabi_dmul>
 800f860:	4602      	mov	r2, r0
 800f862:	460b      	mov	r3, r1
 800f864:	4640      	mov	r0, r8
 800f866:	4649      	mov	r1, r9
 800f868:	f7f0 fd10 	bl	800028c <__adddf3>
 800f86c:	4604      	mov	r4, r0
 800f86e:	460d      	mov	r5, r1
 800f870:	4602      	mov	r2, r0
 800f872:	460b      	mov	r3, r1
 800f874:	4630      	mov	r0, r6
 800f876:	4639      	mov	r1, r7
 800f878:	f7f0 fd08 	bl	800028c <__adddf3>
 800f87c:	4632      	mov	r2, r6
 800f87e:	463b      	mov	r3, r7
 800f880:	4680      	mov	r8, r0
 800f882:	4689      	mov	r9, r1
 800f884:	f7f0 fd00 	bl	8000288 <__aeabi_dsub>
 800f888:	4602      	mov	r2, r0
 800f88a:	460b      	mov	r3, r1
 800f88c:	4620      	mov	r0, r4
 800f88e:	4629      	mov	r1, r5
 800f890:	f7f0 fcfa 	bl	8000288 <__aeabi_dsub>
 800f894:	4642      	mov	r2, r8
 800f896:	4606      	mov	r6, r0
 800f898:	460f      	mov	r7, r1
 800f89a:	464b      	mov	r3, r9
 800f89c:	4640      	mov	r0, r8
 800f89e:	4649      	mov	r1, r9
 800f8a0:	f7f0 feaa 	bl	80005f8 <__aeabi_dmul>
 800f8a4:	a35e      	add	r3, pc, #376	; (adr r3, 800fa20 <__ieee754_pow+0xa18>)
 800f8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8aa:	4604      	mov	r4, r0
 800f8ac:	460d      	mov	r5, r1
 800f8ae:	f7f0 fea3 	bl	80005f8 <__aeabi_dmul>
 800f8b2:	a35d      	add	r3, pc, #372	; (adr r3, 800fa28 <__ieee754_pow+0xa20>)
 800f8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8b8:	f7f0 fce6 	bl	8000288 <__aeabi_dsub>
 800f8bc:	4622      	mov	r2, r4
 800f8be:	462b      	mov	r3, r5
 800f8c0:	f7f0 fe9a 	bl	80005f8 <__aeabi_dmul>
 800f8c4:	a35a      	add	r3, pc, #360	; (adr r3, 800fa30 <__ieee754_pow+0xa28>)
 800f8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8ca:	f7f0 fcdf 	bl	800028c <__adddf3>
 800f8ce:	4622      	mov	r2, r4
 800f8d0:	462b      	mov	r3, r5
 800f8d2:	f7f0 fe91 	bl	80005f8 <__aeabi_dmul>
 800f8d6:	a358      	add	r3, pc, #352	; (adr r3, 800fa38 <__ieee754_pow+0xa30>)
 800f8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8dc:	f7f0 fcd4 	bl	8000288 <__aeabi_dsub>
 800f8e0:	4622      	mov	r2, r4
 800f8e2:	462b      	mov	r3, r5
 800f8e4:	f7f0 fe88 	bl	80005f8 <__aeabi_dmul>
 800f8e8:	a355      	add	r3, pc, #340	; (adr r3, 800fa40 <__ieee754_pow+0xa38>)
 800f8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8ee:	f7f0 fccd 	bl	800028c <__adddf3>
 800f8f2:	4622      	mov	r2, r4
 800f8f4:	462b      	mov	r3, r5
 800f8f6:	f7f0 fe7f 	bl	80005f8 <__aeabi_dmul>
 800f8fa:	4602      	mov	r2, r0
 800f8fc:	460b      	mov	r3, r1
 800f8fe:	4640      	mov	r0, r8
 800f900:	4649      	mov	r1, r9
 800f902:	f7f0 fcc1 	bl	8000288 <__aeabi_dsub>
 800f906:	4604      	mov	r4, r0
 800f908:	460d      	mov	r5, r1
 800f90a:	4602      	mov	r2, r0
 800f90c:	460b      	mov	r3, r1
 800f90e:	4640      	mov	r0, r8
 800f910:	4649      	mov	r1, r9
 800f912:	f7f0 fe71 	bl	80005f8 <__aeabi_dmul>
 800f916:	2200      	movs	r2, #0
 800f918:	ec41 0b19 	vmov	d9, r0, r1
 800f91c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f920:	4620      	mov	r0, r4
 800f922:	4629      	mov	r1, r5
 800f924:	f7f0 fcb0 	bl	8000288 <__aeabi_dsub>
 800f928:	4602      	mov	r2, r0
 800f92a:	460b      	mov	r3, r1
 800f92c:	ec51 0b19 	vmov	r0, r1, d9
 800f930:	f7f0 ff8c 	bl	800084c <__aeabi_ddiv>
 800f934:	4632      	mov	r2, r6
 800f936:	4604      	mov	r4, r0
 800f938:	460d      	mov	r5, r1
 800f93a:	463b      	mov	r3, r7
 800f93c:	4640      	mov	r0, r8
 800f93e:	4649      	mov	r1, r9
 800f940:	f7f0 fe5a 	bl	80005f8 <__aeabi_dmul>
 800f944:	4632      	mov	r2, r6
 800f946:	463b      	mov	r3, r7
 800f948:	f7f0 fca0 	bl	800028c <__adddf3>
 800f94c:	4602      	mov	r2, r0
 800f94e:	460b      	mov	r3, r1
 800f950:	4620      	mov	r0, r4
 800f952:	4629      	mov	r1, r5
 800f954:	f7f0 fc98 	bl	8000288 <__aeabi_dsub>
 800f958:	4642      	mov	r2, r8
 800f95a:	464b      	mov	r3, r9
 800f95c:	f7f0 fc94 	bl	8000288 <__aeabi_dsub>
 800f960:	460b      	mov	r3, r1
 800f962:	4602      	mov	r2, r0
 800f964:	493a      	ldr	r1, [pc, #232]	; (800fa50 <__ieee754_pow+0xa48>)
 800f966:	2000      	movs	r0, #0
 800f968:	f7f0 fc8e 	bl	8000288 <__aeabi_dsub>
 800f96c:	ec41 0b10 	vmov	d0, r0, r1
 800f970:	ee10 3a90 	vmov	r3, s1
 800f974:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800f978:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f97c:	da2b      	bge.n	800f9d6 <__ieee754_pow+0x9ce>
 800f97e:	4650      	mov	r0, sl
 800f980:	f000 fb06 	bl	800ff90 <scalbn>
 800f984:	ec51 0b10 	vmov	r0, r1, d0
 800f988:	ec53 2b18 	vmov	r2, r3, d8
 800f98c:	f7ff bbed 	b.w	800f16a <__ieee754_pow+0x162>
 800f990:	4b30      	ldr	r3, [pc, #192]	; (800fa54 <__ieee754_pow+0xa4c>)
 800f992:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800f996:	429e      	cmp	r6, r3
 800f998:	f77f af0c 	ble.w	800f7b4 <__ieee754_pow+0x7ac>
 800f99c:	4b2e      	ldr	r3, [pc, #184]	; (800fa58 <__ieee754_pow+0xa50>)
 800f99e:	440b      	add	r3, r1
 800f9a0:	4303      	orrs	r3, r0
 800f9a2:	d009      	beq.n	800f9b8 <__ieee754_pow+0x9b0>
 800f9a4:	ec51 0b18 	vmov	r0, r1, d8
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	f7f1 f896 	bl	8000adc <__aeabi_dcmplt>
 800f9b0:	3800      	subs	r0, #0
 800f9b2:	bf18      	it	ne
 800f9b4:	2001      	movne	r0, #1
 800f9b6:	e447      	b.n	800f248 <__ieee754_pow+0x240>
 800f9b8:	4622      	mov	r2, r4
 800f9ba:	462b      	mov	r3, r5
 800f9bc:	f7f0 fc64 	bl	8000288 <__aeabi_dsub>
 800f9c0:	4642      	mov	r2, r8
 800f9c2:	464b      	mov	r3, r9
 800f9c4:	f7f1 f89e 	bl	8000b04 <__aeabi_dcmpge>
 800f9c8:	2800      	cmp	r0, #0
 800f9ca:	f43f aef3 	beq.w	800f7b4 <__ieee754_pow+0x7ac>
 800f9ce:	e7e9      	b.n	800f9a4 <__ieee754_pow+0x99c>
 800f9d0:	f04f 0a00 	mov.w	sl, #0
 800f9d4:	e71a      	b.n	800f80c <__ieee754_pow+0x804>
 800f9d6:	ec51 0b10 	vmov	r0, r1, d0
 800f9da:	4619      	mov	r1, r3
 800f9dc:	e7d4      	b.n	800f988 <__ieee754_pow+0x980>
 800f9de:	491c      	ldr	r1, [pc, #112]	; (800fa50 <__ieee754_pow+0xa48>)
 800f9e0:	2000      	movs	r0, #0
 800f9e2:	f7ff bb30 	b.w	800f046 <__ieee754_pow+0x3e>
 800f9e6:	2000      	movs	r0, #0
 800f9e8:	2100      	movs	r1, #0
 800f9ea:	f7ff bb2c 	b.w	800f046 <__ieee754_pow+0x3e>
 800f9ee:	4630      	mov	r0, r6
 800f9f0:	4639      	mov	r1, r7
 800f9f2:	f7ff bb28 	b.w	800f046 <__ieee754_pow+0x3e>
 800f9f6:	9204      	str	r2, [sp, #16]
 800f9f8:	f7ff bb7a 	b.w	800f0f0 <__ieee754_pow+0xe8>
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	f7ff bb64 	b.w	800f0ca <__ieee754_pow+0xc2>
 800fa02:	bf00      	nop
 800fa04:	f3af 8000 	nop.w
 800fa08:	00000000 	.word	0x00000000
 800fa0c:	3fe62e43 	.word	0x3fe62e43
 800fa10:	fefa39ef 	.word	0xfefa39ef
 800fa14:	3fe62e42 	.word	0x3fe62e42
 800fa18:	0ca86c39 	.word	0x0ca86c39
 800fa1c:	be205c61 	.word	0xbe205c61
 800fa20:	72bea4d0 	.word	0x72bea4d0
 800fa24:	3e663769 	.word	0x3e663769
 800fa28:	c5d26bf1 	.word	0xc5d26bf1
 800fa2c:	3ebbbd41 	.word	0x3ebbbd41
 800fa30:	af25de2c 	.word	0xaf25de2c
 800fa34:	3f11566a 	.word	0x3f11566a
 800fa38:	16bebd93 	.word	0x16bebd93
 800fa3c:	3f66c16c 	.word	0x3f66c16c
 800fa40:	5555553e 	.word	0x5555553e
 800fa44:	3fc55555 	.word	0x3fc55555
 800fa48:	3fe00000 	.word	0x3fe00000
 800fa4c:	000fffff 	.word	0x000fffff
 800fa50:	3ff00000 	.word	0x3ff00000
 800fa54:	4090cbff 	.word	0x4090cbff
 800fa58:	3f6f3400 	.word	0x3f6f3400
 800fa5c:	652b82fe 	.word	0x652b82fe
 800fa60:	3c971547 	.word	0x3c971547

0800fa64 <__ieee754_sqrt>:
 800fa64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa68:	ec55 4b10 	vmov	r4, r5, d0
 800fa6c:	4e55      	ldr	r6, [pc, #340]	; (800fbc4 <__ieee754_sqrt+0x160>)
 800fa6e:	43ae      	bics	r6, r5
 800fa70:	ee10 0a10 	vmov	r0, s0
 800fa74:	ee10 3a10 	vmov	r3, s0
 800fa78:	462a      	mov	r2, r5
 800fa7a:	4629      	mov	r1, r5
 800fa7c:	d110      	bne.n	800faa0 <__ieee754_sqrt+0x3c>
 800fa7e:	ee10 2a10 	vmov	r2, s0
 800fa82:	462b      	mov	r3, r5
 800fa84:	f7f0 fdb8 	bl	80005f8 <__aeabi_dmul>
 800fa88:	4602      	mov	r2, r0
 800fa8a:	460b      	mov	r3, r1
 800fa8c:	4620      	mov	r0, r4
 800fa8e:	4629      	mov	r1, r5
 800fa90:	f7f0 fbfc 	bl	800028c <__adddf3>
 800fa94:	4604      	mov	r4, r0
 800fa96:	460d      	mov	r5, r1
 800fa98:	ec45 4b10 	vmov	d0, r4, r5
 800fa9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800faa0:	2d00      	cmp	r5, #0
 800faa2:	dc10      	bgt.n	800fac6 <__ieee754_sqrt+0x62>
 800faa4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800faa8:	4330      	orrs	r0, r6
 800faaa:	d0f5      	beq.n	800fa98 <__ieee754_sqrt+0x34>
 800faac:	b15d      	cbz	r5, 800fac6 <__ieee754_sqrt+0x62>
 800faae:	ee10 2a10 	vmov	r2, s0
 800fab2:	462b      	mov	r3, r5
 800fab4:	ee10 0a10 	vmov	r0, s0
 800fab8:	f7f0 fbe6 	bl	8000288 <__aeabi_dsub>
 800fabc:	4602      	mov	r2, r0
 800fabe:	460b      	mov	r3, r1
 800fac0:	f7f0 fec4 	bl	800084c <__aeabi_ddiv>
 800fac4:	e7e6      	b.n	800fa94 <__ieee754_sqrt+0x30>
 800fac6:	1512      	asrs	r2, r2, #20
 800fac8:	d074      	beq.n	800fbb4 <__ieee754_sqrt+0x150>
 800faca:	07d4      	lsls	r4, r2, #31
 800facc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800fad0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800fad4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800fad8:	bf5e      	ittt	pl
 800fada:	0fda      	lsrpl	r2, r3, #31
 800fadc:	005b      	lslpl	r3, r3, #1
 800fade:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800fae2:	2400      	movs	r4, #0
 800fae4:	0fda      	lsrs	r2, r3, #31
 800fae6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800faea:	107f      	asrs	r7, r7, #1
 800faec:	005b      	lsls	r3, r3, #1
 800faee:	2516      	movs	r5, #22
 800faf0:	4620      	mov	r0, r4
 800faf2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800faf6:	1886      	adds	r6, r0, r2
 800faf8:	428e      	cmp	r6, r1
 800fafa:	bfde      	ittt	le
 800fafc:	1b89      	suble	r1, r1, r6
 800fafe:	18b0      	addle	r0, r6, r2
 800fb00:	18a4      	addle	r4, r4, r2
 800fb02:	0049      	lsls	r1, r1, #1
 800fb04:	3d01      	subs	r5, #1
 800fb06:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800fb0a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800fb0e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fb12:	d1f0      	bne.n	800faf6 <__ieee754_sqrt+0x92>
 800fb14:	462a      	mov	r2, r5
 800fb16:	f04f 0e20 	mov.w	lr, #32
 800fb1a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800fb1e:	4281      	cmp	r1, r0
 800fb20:	eb06 0c05 	add.w	ip, r6, r5
 800fb24:	dc02      	bgt.n	800fb2c <__ieee754_sqrt+0xc8>
 800fb26:	d113      	bne.n	800fb50 <__ieee754_sqrt+0xec>
 800fb28:	459c      	cmp	ip, r3
 800fb2a:	d811      	bhi.n	800fb50 <__ieee754_sqrt+0xec>
 800fb2c:	f1bc 0f00 	cmp.w	ip, #0
 800fb30:	eb0c 0506 	add.w	r5, ip, r6
 800fb34:	da43      	bge.n	800fbbe <__ieee754_sqrt+0x15a>
 800fb36:	2d00      	cmp	r5, #0
 800fb38:	db41      	blt.n	800fbbe <__ieee754_sqrt+0x15a>
 800fb3a:	f100 0801 	add.w	r8, r0, #1
 800fb3e:	1a09      	subs	r1, r1, r0
 800fb40:	459c      	cmp	ip, r3
 800fb42:	bf88      	it	hi
 800fb44:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800fb48:	eba3 030c 	sub.w	r3, r3, ip
 800fb4c:	4432      	add	r2, r6
 800fb4e:	4640      	mov	r0, r8
 800fb50:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800fb54:	f1be 0e01 	subs.w	lr, lr, #1
 800fb58:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800fb5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fb60:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800fb64:	d1db      	bne.n	800fb1e <__ieee754_sqrt+0xba>
 800fb66:	430b      	orrs	r3, r1
 800fb68:	d006      	beq.n	800fb78 <__ieee754_sqrt+0x114>
 800fb6a:	1c50      	adds	r0, r2, #1
 800fb6c:	bf13      	iteet	ne
 800fb6e:	3201      	addne	r2, #1
 800fb70:	3401      	addeq	r4, #1
 800fb72:	4672      	moveq	r2, lr
 800fb74:	f022 0201 	bicne.w	r2, r2, #1
 800fb78:	1063      	asrs	r3, r4, #1
 800fb7a:	0852      	lsrs	r2, r2, #1
 800fb7c:	07e1      	lsls	r1, r4, #31
 800fb7e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800fb82:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800fb86:	bf48      	it	mi
 800fb88:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800fb8c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800fb90:	4614      	mov	r4, r2
 800fb92:	e781      	b.n	800fa98 <__ieee754_sqrt+0x34>
 800fb94:	0ad9      	lsrs	r1, r3, #11
 800fb96:	3815      	subs	r0, #21
 800fb98:	055b      	lsls	r3, r3, #21
 800fb9a:	2900      	cmp	r1, #0
 800fb9c:	d0fa      	beq.n	800fb94 <__ieee754_sqrt+0x130>
 800fb9e:	02cd      	lsls	r5, r1, #11
 800fba0:	d50a      	bpl.n	800fbb8 <__ieee754_sqrt+0x154>
 800fba2:	f1c2 0420 	rsb	r4, r2, #32
 800fba6:	fa23 f404 	lsr.w	r4, r3, r4
 800fbaa:	1e55      	subs	r5, r2, #1
 800fbac:	4093      	lsls	r3, r2
 800fbae:	4321      	orrs	r1, r4
 800fbb0:	1b42      	subs	r2, r0, r5
 800fbb2:	e78a      	b.n	800faca <__ieee754_sqrt+0x66>
 800fbb4:	4610      	mov	r0, r2
 800fbb6:	e7f0      	b.n	800fb9a <__ieee754_sqrt+0x136>
 800fbb8:	0049      	lsls	r1, r1, #1
 800fbba:	3201      	adds	r2, #1
 800fbbc:	e7ef      	b.n	800fb9e <__ieee754_sqrt+0x13a>
 800fbbe:	4680      	mov	r8, r0
 800fbc0:	e7bd      	b.n	800fb3e <__ieee754_sqrt+0xda>
 800fbc2:	bf00      	nop
 800fbc4:	7ff00000 	.word	0x7ff00000

0800fbc8 <with_errno>:
 800fbc8:	b570      	push	{r4, r5, r6, lr}
 800fbca:	4604      	mov	r4, r0
 800fbcc:	460d      	mov	r5, r1
 800fbce:	4616      	mov	r6, r2
 800fbd0:	f000 fa6c 	bl	80100ac <__errno>
 800fbd4:	4629      	mov	r1, r5
 800fbd6:	6006      	str	r6, [r0, #0]
 800fbd8:	4620      	mov	r0, r4
 800fbda:	bd70      	pop	{r4, r5, r6, pc}

0800fbdc <xflow>:
 800fbdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fbde:	4614      	mov	r4, r2
 800fbe0:	461d      	mov	r5, r3
 800fbe2:	b108      	cbz	r0, 800fbe8 <xflow+0xc>
 800fbe4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fbe8:	e9cd 2300 	strd	r2, r3, [sp]
 800fbec:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fbf0:	4620      	mov	r0, r4
 800fbf2:	4629      	mov	r1, r5
 800fbf4:	f7f0 fd00 	bl	80005f8 <__aeabi_dmul>
 800fbf8:	2222      	movs	r2, #34	; 0x22
 800fbfa:	b003      	add	sp, #12
 800fbfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fc00:	f7ff bfe2 	b.w	800fbc8 <with_errno>

0800fc04 <__math_uflow>:
 800fc04:	b508      	push	{r3, lr}
 800fc06:	2200      	movs	r2, #0
 800fc08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800fc0c:	f7ff ffe6 	bl	800fbdc <xflow>
 800fc10:	ec41 0b10 	vmov	d0, r0, r1
 800fc14:	bd08      	pop	{r3, pc}

0800fc16 <__math_oflow>:
 800fc16:	b508      	push	{r3, lr}
 800fc18:	2200      	movs	r2, #0
 800fc1a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800fc1e:	f7ff ffdd 	bl	800fbdc <xflow>
 800fc22:	ec41 0b10 	vmov	d0, r0, r1
 800fc26:	bd08      	pop	{r3, pc}

0800fc28 <atan>:
 800fc28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc2c:	ec55 4b10 	vmov	r4, r5, d0
 800fc30:	4bc3      	ldr	r3, [pc, #780]	; (800ff40 <atan+0x318>)
 800fc32:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fc36:	429e      	cmp	r6, r3
 800fc38:	46ab      	mov	fp, r5
 800fc3a:	dd18      	ble.n	800fc6e <atan+0x46>
 800fc3c:	4bc1      	ldr	r3, [pc, #772]	; (800ff44 <atan+0x31c>)
 800fc3e:	429e      	cmp	r6, r3
 800fc40:	dc01      	bgt.n	800fc46 <atan+0x1e>
 800fc42:	d109      	bne.n	800fc58 <atan+0x30>
 800fc44:	b144      	cbz	r4, 800fc58 <atan+0x30>
 800fc46:	4622      	mov	r2, r4
 800fc48:	462b      	mov	r3, r5
 800fc4a:	4620      	mov	r0, r4
 800fc4c:	4629      	mov	r1, r5
 800fc4e:	f7f0 fb1d 	bl	800028c <__adddf3>
 800fc52:	4604      	mov	r4, r0
 800fc54:	460d      	mov	r5, r1
 800fc56:	e006      	b.n	800fc66 <atan+0x3e>
 800fc58:	f1bb 0f00 	cmp.w	fp, #0
 800fc5c:	f300 8131 	bgt.w	800fec2 <atan+0x29a>
 800fc60:	a59b      	add	r5, pc, #620	; (adr r5, 800fed0 <atan+0x2a8>)
 800fc62:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fc66:	ec45 4b10 	vmov	d0, r4, r5
 800fc6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc6e:	4bb6      	ldr	r3, [pc, #728]	; (800ff48 <atan+0x320>)
 800fc70:	429e      	cmp	r6, r3
 800fc72:	dc14      	bgt.n	800fc9e <atan+0x76>
 800fc74:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800fc78:	429e      	cmp	r6, r3
 800fc7a:	dc0d      	bgt.n	800fc98 <atan+0x70>
 800fc7c:	a396      	add	r3, pc, #600	; (adr r3, 800fed8 <atan+0x2b0>)
 800fc7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc82:	ee10 0a10 	vmov	r0, s0
 800fc86:	4629      	mov	r1, r5
 800fc88:	f7f0 fb00 	bl	800028c <__adddf3>
 800fc8c:	4baf      	ldr	r3, [pc, #700]	; (800ff4c <atan+0x324>)
 800fc8e:	2200      	movs	r2, #0
 800fc90:	f7f0 ff42 	bl	8000b18 <__aeabi_dcmpgt>
 800fc94:	2800      	cmp	r0, #0
 800fc96:	d1e6      	bne.n	800fc66 <atan+0x3e>
 800fc98:	f04f 3aff 	mov.w	sl, #4294967295
 800fc9c:	e02b      	b.n	800fcf6 <atan+0xce>
 800fc9e:	f000 f963 	bl	800ff68 <fabs>
 800fca2:	4bab      	ldr	r3, [pc, #684]	; (800ff50 <atan+0x328>)
 800fca4:	429e      	cmp	r6, r3
 800fca6:	ec55 4b10 	vmov	r4, r5, d0
 800fcaa:	f300 80bf 	bgt.w	800fe2c <atan+0x204>
 800fcae:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800fcb2:	429e      	cmp	r6, r3
 800fcb4:	f300 80a0 	bgt.w	800fdf8 <atan+0x1d0>
 800fcb8:	ee10 2a10 	vmov	r2, s0
 800fcbc:	ee10 0a10 	vmov	r0, s0
 800fcc0:	462b      	mov	r3, r5
 800fcc2:	4629      	mov	r1, r5
 800fcc4:	f7f0 fae2 	bl	800028c <__adddf3>
 800fcc8:	4ba0      	ldr	r3, [pc, #640]	; (800ff4c <atan+0x324>)
 800fcca:	2200      	movs	r2, #0
 800fccc:	f7f0 fadc 	bl	8000288 <__aeabi_dsub>
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	4606      	mov	r6, r0
 800fcd4:	460f      	mov	r7, r1
 800fcd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fcda:	4620      	mov	r0, r4
 800fcdc:	4629      	mov	r1, r5
 800fcde:	f7f0 fad5 	bl	800028c <__adddf3>
 800fce2:	4602      	mov	r2, r0
 800fce4:	460b      	mov	r3, r1
 800fce6:	4630      	mov	r0, r6
 800fce8:	4639      	mov	r1, r7
 800fcea:	f7f0 fdaf 	bl	800084c <__aeabi_ddiv>
 800fcee:	f04f 0a00 	mov.w	sl, #0
 800fcf2:	4604      	mov	r4, r0
 800fcf4:	460d      	mov	r5, r1
 800fcf6:	4622      	mov	r2, r4
 800fcf8:	462b      	mov	r3, r5
 800fcfa:	4620      	mov	r0, r4
 800fcfc:	4629      	mov	r1, r5
 800fcfe:	f7f0 fc7b 	bl	80005f8 <__aeabi_dmul>
 800fd02:	4602      	mov	r2, r0
 800fd04:	460b      	mov	r3, r1
 800fd06:	4680      	mov	r8, r0
 800fd08:	4689      	mov	r9, r1
 800fd0a:	f7f0 fc75 	bl	80005f8 <__aeabi_dmul>
 800fd0e:	a374      	add	r3, pc, #464	; (adr r3, 800fee0 <atan+0x2b8>)
 800fd10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd14:	4606      	mov	r6, r0
 800fd16:	460f      	mov	r7, r1
 800fd18:	f7f0 fc6e 	bl	80005f8 <__aeabi_dmul>
 800fd1c:	a372      	add	r3, pc, #456	; (adr r3, 800fee8 <atan+0x2c0>)
 800fd1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd22:	f7f0 fab3 	bl	800028c <__adddf3>
 800fd26:	4632      	mov	r2, r6
 800fd28:	463b      	mov	r3, r7
 800fd2a:	f7f0 fc65 	bl	80005f8 <__aeabi_dmul>
 800fd2e:	a370      	add	r3, pc, #448	; (adr r3, 800fef0 <atan+0x2c8>)
 800fd30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd34:	f7f0 faaa 	bl	800028c <__adddf3>
 800fd38:	4632      	mov	r2, r6
 800fd3a:	463b      	mov	r3, r7
 800fd3c:	f7f0 fc5c 	bl	80005f8 <__aeabi_dmul>
 800fd40:	a36d      	add	r3, pc, #436	; (adr r3, 800fef8 <atan+0x2d0>)
 800fd42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd46:	f7f0 faa1 	bl	800028c <__adddf3>
 800fd4a:	4632      	mov	r2, r6
 800fd4c:	463b      	mov	r3, r7
 800fd4e:	f7f0 fc53 	bl	80005f8 <__aeabi_dmul>
 800fd52:	a36b      	add	r3, pc, #428	; (adr r3, 800ff00 <atan+0x2d8>)
 800fd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd58:	f7f0 fa98 	bl	800028c <__adddf3>
 800fd5c:	4632      	mov	r2, r6
 800fd5e:	463b      	mov	r3, r7
 800fd60:	f7f0 fc4a 	bl	80005f8 <__aeabi_dmul>
 800fd64:	a368      	add	r3, pc, #416	; (adr r3, 800ff08 <atan+0x2e0>)
 800fd66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd6a:	f7f0 fa8f 	bl	800028c <__adddf3>
 800fd6e:	4642      	mov	r2, r8
 800fd70:	464b      	mov	r3, r9
 800fd72:	f7f0 fc41 	bl	80005f8 <__aeabi_dmul>
 800fd76:	a366      	add	r3, pc, #408	; (adr r3, 800ff10 <atan+0x2e8>)
 800fd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd7c:	4680      	mov	r8, r0
 800fd7e:	4689      	mov	r9, r1
 800fd80:	4630      	mov	r0, r6
 800fd82:	4639      	mov	r1, r7
 800fd84:	f7f0 fc38 	bl	80005f8 <__aeabi_dmul>
 800fd88:	a363      	add	r3, pc, #396	; (adr r3, 800ff18 <atan+0x2f0>)
 800fd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd8e:	f7f0 fa7b 	bl	8000288 <__aeabi_dsub>
 800fd92:	4632      	mov	r2, r6
 800fd94:	463b      	mov	r3, r7
 800fd96:	f7f0 fc2f 	bl	80005f8 <__aeabi_dmul>
 800fd9a:	a361      	add	r3, pc, #388	; (adr r3, 800ff20 <atan+0x2f8>)
 800fd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fda0:	f7f0 fa72 	bl	8000288 <__aeabi_dsub>
 800fda4:	4632      	mov	r2, r6
 800fda6:	463b      	mov	r3, r7
 800fda8:	f7f0 fc26 	bl	80005f8 <__aeabi_dmul>
 800fdac:	a35e      	add	r3, pc, #376	; (adr r3, 800ff28 <atan+0x300>)
 800fdae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdb2:	f7f0 fa69 	bl	8000288 <__aeabi_dsub>
 800fdb6:	4632      	mov	r2, r6
 800fdb8:	463b      	mov	r3, r7
 800fdba:	f7f0 fc1d 	bl	80005f8 <__aeabi_dmul>
 800fdbe:	a35c      	add	r3, pc, #368	; (adr r3, 800ff30 <atan+0x308>)
 800fdc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdc4:	f7f0 fa60 	bl	8000288 <__aeabi_dsub>
 800fdc8:	4632      	mov	r2, r6
 800fdca:	463b      	mov	r3, r7
 800fdcc:	f7f0 fc14 	bl	80005f8 <__aeabi_dmul>
 800fdd0:	4602      	mov	r2, r0
 800fdd2:	460b      	mov	r3, r1
 800fdd4:	4640      	mov	r0, r8
 800fdd6:	4649      	mov	r1, r9
 800fdd8:	f7f0 fa58 	bl	800028c <__adddf3>
 800fddc:	4622      	mov	r2, r4
 800fdde:	462b      	mov	r3, r5
 800fde0:	f7f0 fc0a 	bl	80005f8 <__aeabi_dmul>
 800fde4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800fde8:	4602      	mov	r2, r0
 800fdea:	460b      	mov	r3, r1
 800fdec:	d14b      	bne.n	800fe86 <atan+0x25e>
 800fdee:	4620      	mov	r0, r4
 800fdf0:	4629      	mov	r1, r5
 800fdf2:	f7f0 fa49 	bl	8000288 <__aeabi_dsub>
 800fdf6:	e72c      	b.n	800fc52 <atan+0x2a>
 800fdf8:	ee10 0a10 	vmov	r0, s0
 800fdfc:	4b53      	ldr	r3, [pc, #332]	; (800ff4c <atan+0x324>)
 800fdfe:	2200      	movs	r2, #0
 800fe00:	4629      	mov	r1, r5
 800fe02:	f7f0 fa41 	bl	8000288 <__aeabi_dsub>
 800fe06:	4b51      	ldr	r3, [pc, #324]	; (800ff4c <atan+0x324>)
 800fe08:	4606      	mov	r6, r0
 800fe0a:	460f      	mov	r7, r1
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	4620      	mov	r0, r4
 800fe10:	4629      	mov	r1, r5
 800fe12:	f7f0 fa3b 	bl	800028c <__adddf3>
 800fe16:	4602      	mov	r2, r0
 800fe18:	460b      	mov	r3, r1
 800fe1a:	4630      	mov	r0, r6
 800fe1c:	4639      	mov	r1, r7
 800fe1e:	f7f0 fd15 	bl	800084c <__aeabi_ddiv>
 800fe22:	f04f 0a01 	mov.w	sl, #1
 800fe26:	4604      	mov	r4, r0
 800fe28:	460d      	mov	r5, r1
 800fe2a:	e764      	b.n	800fcf6 <atan+0xce>
 800fe2c:	4b49      	ldr	r3, [pc, #292]	; (800ff54 <atan+0x32c>)
 800fe2e:	429e      	cmp	r6, r3
 800fe30:	da1d      	bge.n	800fe6e <atan+0x246>
 800fe32:	ee10 0a10 	vmov	r0, s0
 800fe36:	4b48      	ldr	r3, [pc, #288]	; (800ff58 <atan+0x330>)
 800fe38:	2200      	movs	r2, #0
 800fe3a:	4629      	mov	r1, r5
 800fe3c:	f7f0 fa24 	bl	8000288 <__aeabi_dsub>
 800fe40:	4b45      	ldr	r3, [pc, #276]	; (800ff58 <atan+0x330>)
 800fe42:	4606      	mov	r6, r0
 800fe44:	460f      	mov	r7, r1
 800fe46:	2200      	movs	r2, #0
 800fe48:	4620      	mov	r0, r4
 800fe4a:	4629      	mov	r1, r5
 800fe4c:	f7f0 fbd4 	bl	80005f8 <__aeabi_dmul>
 800fe50:	4b3e      	ldr	r3, [pc, #248]	; (800ff4c <atan+0x324>)
 800fe52:	2200      	movs	r2, #0
 800fe54:	f7f0 fa1a 	bl	800028c <__adddf3>
 800fe58:	4602      	mov	r2, r0
 800fe5a:	460b      	mov	r3, r1
 800fe5c:	4630      	mov	r0, r6
 800fe5e:	4639      	mov	r1, r7
 800fe60:	f7f0 fcf4 	bl	800084c <__aeabi_ddiv>
 800fe64:	f04f 0a02 	mov.w	sl, #2
 800fe68:	4604      	mov	r4, r0
 800fe6a:	460d      	mov	r5, r1
 800fe6c:	e743      	b.n	800fcf6 <atan+0xce>
 800fe6e:	462b      	mov	r3, r5
 800fe70:	ee10 2a10 	vmov	r2, s0
 800fe74:	4939      	ldr	r1, [pc, #228]	; (800ff5c <atan+0x334>)
 800fe76:	2000      	movs	r0, #0
 800fe78:	f7f0 fce8 	bl	800084c <__aeabi_ddiv>
 800fe7c:	f04f 0a03 	mov.w	sl, #3
 800fe80:	4604      	mov	r4, r0
 800fe82:	460d      	mov	r5, r1
 800fe84:	e737      	b.n	800fcf6 <atan+0xce>
 800fe86:	4b36      	ldr	r3, [pc, #216]	; (800ff60 <atan+0x338>)
 800fe88:	4e36      	ldr	r6, [pc, #216]	; (800ff64 <atan+0x33c>)
 800fe8a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800fe8e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800fe92:	e9da 2300 	ldrd	r2, r3, [sl]
 800fe96:	f7f0 f9f7 	bl	8000288 <__aeabi_dsub>
 800fe9a:	4622      	mov	r2, r4
 800fe9c:	462b      	mov	r3, r5
 800fe9e:	f7f0 f9f3 	bl	8000288 <__aeabi_dsub>
 800fea2:	4602      	mov	r2, r0
 800fea4:	460b      	mov	r3, r1
 800fea6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800feaa:	f7f0 f9ed 	bl	8000288 <__aeabi_dsub>
 800feae:	f1bb 0f00 	cmp.w	fp, #0
 800feb2:	4604      	mov	r4, r0
 800feb4:	460d      	mov	r5, r1
 800feb6:	f6bf aed6 	bge.w	800fc66 <atan+0x3e>
 800feba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800febe:	461d      	mov	r5, r3
 800fec0:	e6d1      	b.n	800fc66 <atan+0x3e>
 800fec2:	a51d      	add	r5, pc, #116	; (adr r5, 800ff38 <atan+0x310>)
 800fec4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fec8:	e6cd      	b.n	800fc66 <atan+0x3e>
 800feca:	bf00      	nop
 800fecc:	f3af 8000 	nop.w
 800fed0:	54442d18 	.word	0x54442d18
 800fed4:	bff921fb 	.word	0xbff921fb
 800fed8:	8800759c 	.word	0x8800759c
 800fedc:	7e37e43c 	.word	0x7e37e43c
 800fee0:	e322da11 	.word	0xe322da11
 800fee4:	3f90ad3a 	.word	0x3f90ad3a
 800fee8:	24760deb 	.word	0x24760deb
 800feec:	3fa97b4b 	.word	0x3fa97b4b
 800fef0:	a0d03d51 	.word	0xa0d03d51
 800fef4:	3fb10d66 	.word	0x3fb10d66
 800fef8:	c54c206e 	.word	0xc54c206e
 800fefc:	3fb745cd 	.word	0x3fb745cd
 800ff00:	920083ff 	.word	0x920083ff
 800ff04:	3fc24924 	.word	0x3fc24924
 800ff08:	5555550d 	.word	0x5555550d
 800ff0c:	3fd55555 	.word	0x3fd55555
 800ff10:	2c6a6c2f 	.word	0x2c6a6c2f
 800ff14:	bfa2b444 	.word	0xbfa2b444
 800ff18:	52defd9a 	.word	0x52defd9a
 800ff1c:	3fadde2d 	.word	0x3fadde2d
 800ff20:	af749a6d 	.word	0xaf749a6d
 800ff24:	3fb3b0f2 	.word	0x3fb3b0f2
 800ff28:	fe231671 	.word	0xfe231671
 800ff2c:	3fbc71c6 	.word	0x3fbc71c6
 800ff30:	9998ebc4 	.word	0x9998ebc4
 800ff34:	3fc99999 	.word	0x3fc99999
 800ff38:	54442d18 	.word	0x54442d18
 800ff3c:	3ff921fb 	.word	0x3ff921fb
 800ff40:	440fffff 	.word	0x440fffff
 800ff44:	7ff00000 	.word	0x7ff00000
 800ff48:	3fdbffff 	.word	0x3fdbffff
 800ff4c:	3ff00000 	.word	0x3ff00000
 800ff50:	3ff2ffff 	.word	0x3ff2ffff
 800ff54:	40038000 	.word	0x40038000
 800ff58:	3ff80000 	.word	0x3ff80000
 800ff5c:	bff00000 	.word	0xbff00000
 800ff60:	08014030 	.word	0x08014030
 800ff64:	08014010 	.word	0x08014010

0800ff68 <fabs>:
 800ff68:	ec51 0b10 	vmov	r0, r1, d0
 800ff6c:	ee10 2a10 	vmov	r2, s0
 800ff70:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ff74:	ec43 2b10 	vmov	d0, r2, r3
 800ff78:	4770      	bx	lr

0800ff7a <finite>:
 800ff7a:	b082      	sub	sp, #8
 800ff7c:	ed8d 0b00 	vstr	d0, [sp]
 800ff80:	9801      	ldr	r0, [sp, #4]
 800ff82:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ff86:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ff8a:	0fc0      	lsrs	r0, r0, #31
 800ff8c:	b002      	add	sp, #8
 800ff8e:	4770      	bx	lr

0800ff90 <scalbn>:
 800ff90:	b570      	push	{r4, r5, r6, lr}
 800ff92:	ec55 4b10 	vmov	r4, r5, d0
 800ff96:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ff9a:	4606      	mov	r6, r0
 800ff9c:	462b      	mov	r3, r5
 800ff9e:	b99a      	cbnz	r2, 800ffc8 <scalbn+0x38>
 800ffa0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ffa4:	4323      	orrs	r3, r4
 800ffa6:	d036      	beq.n	8010016 <scalbn+0x86>
 800ffa8:	4b39      	ldr	r3, [pc, #228]	; (8010090 <scalbn+0x100>)
 800ffaa:	4629      	mov	r1, r5
 800ffac:	ee10 0a10 	vmov	r0, s0
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	f7f0 fb21 	bl	80005f8 <__aeabi_dmul>
 800ffb6:	4b37      	ldr	r3, [pc, #220]	; (8010094 <scalbn+0x104>)
 800ffb8:	429e      	cmp	r6, r3
 800ffba:	4604      	mov	r4, r0
 800ffbc:	460d      	mov	r5, r1
 800ffbe:	da10      	bge.n	800ffe2 <scalbn+0x52>
 800ffc0:	a32b      	add	r3, pc, #172	; (adr r3, 8010070 <scalbn+0xe0>)
 800ffc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffc6:	e03a      	b.n	801003e <scalbn+0xae>
 800ffc8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ffcc:	428a      	cmp	r2, r1
 800ffce:	d10c      	bne.n	800ffea <scalbn+0x5a>
 800ffd0:	ee10 2a10 	vmov	r2, s0
 800ffd4:	4620      	mov	r0, r4
 800ffd6:	4629      	mov	r1, r5
 800ffd8:	f7f0 f958 	bl	800028c <__adddf3>
 800ffdc:	4604      	mov	r4, r0
 800ffde:	460d      	mov	r5, r1
 800ffe0:	e019      	b.n	8010016 <scalbn+0x86>
 800ffe2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ffe6:	460b      	mov	r3, r1
 800ffe8:	3a36      	subs	r2, #54	; 0x36
 800ffea:	4432      	add	r2, r6
 800ffec:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800fff0:	428a      	cmp	r2, r1
 800fff2:	dd08      	ble.n	8010006 <scalbn+0x76>
 800fff4:	2d00      	cmp	r5, #0
 800fff6:	a120      	add	r1, pc, #128	; (adr r1, 8010078 <scalbn+0xe8>)
 800fff8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fffc:	da1c      	bge.n	8010038 <scalbn+0xa8>
 800fffe:	a120      	add	r1, pc, #128	; (adr r1, 8010080 <scalbn+0xf0>)
 8010000:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010004:	e018      	b.n	8010038 <scalbn+0xa8>
 8010006:	2a00      	cmp	r2, #0
 8010008:	dd08      	ble.n	801001c <scalbn+0x8c>
 801000a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801000e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010012:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010016:	ec45 4b10 	vmov	d0, r4, r5
 801001a:	bd70      	pop	{r4, r5, r6, pc}
 801001c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010020:	da19      	bge.n	8010056 <scalbn+0xc6>
 8010022:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010026:	429e      	cmp	r6, r3
 8010028:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801002c:	dd0a      	ble.n	8010044 <scalbn+0xb4>
 801002e:	a112      	add	r1, pc, #72	; (adr r1, 8010078 <scalbn+0xe8>)
 8010030:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d1e2      	bne.n	800fffe <scalbn+0x6e>
 8010038:	a30f      	add	r3, pc, #60	; (adr r3, 8010078 <scalbn+0xe8>)
 801003a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801003e:	f7f0 fadb 	bl	80005f8 <__aeabi_dmul>
 8010042:	e7cb      	b.n	800ffdc <scalbn+0x4c>
 8010044:	a10a      	add	r1, pc, #40	; (adr r1, 8010070 <scalbn+0xe0>)
 8010046:	e9d1 0100 	ldrd	r0, r1, [r1]
 801004a:	2b00      	cmp	r3, #0
 801004c:	d0b8      	beq.n	800ffc0 <scalbn+0x30>
 801004e:	a10e      	add	r1, pc, #56	; (adr r1, 8010088 <scalbn+0xf8>)
 8010050:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010054:	e7b4      	b.n	800ffc0 <scalbn+0x30>
 8010056:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801005a:	3236      	adds	r2, #54	; 0x36
 801005c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010060:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010064:	4620      	mov	r0, r4
 8010066:	4b0c      	ldr	r3, [pc, #48]	; (8010098 <scalbn+0x108>)
 8010068:	2200      	movs	r2, #0
 801006a:	e7e8      	b.n	801003e <scalbn+0xae>
 801006c:	f3af 8000 	nop.w
 8010070:	c2f8f359 	.word	0xc2f8f359
 8010074:	01a56e1f 	.word	0x01a56e1f
 8010078:	8800759c 	.word	0x8800759c
 801007c:	7e37e43c 	.word	0x7e37e43c
 8010080:	8800759c 	.word	0x8800759c
 8010084:	fe37e43c 	.word	0xfe37e43c
 8010088:	c2f8f359 	.word	0xc2f8f359
 801008c:	81a56e1f 	.word	0x81a56e1f
 8010090:	43500000 	.word	0x43500000
 8010094:	ffff3cb0 	.word	0xffff3cb0
 8010098:	3c900000 	.word	0x3c900000

0801009c <abort>:
 801009c:	b508      	push	{r3, lr}
 801009e:	2006      	movs	r0, #6
 80100a0:	f000 ffd2 	bl	8011048 <raise>
 80100a4:	2001      	movs	r0, #1
 80100a6:	f7f5 fd79 	bl	8005b9c <_exit>
	...

080100ac <__errno>:
 80100ac:	4b01      	ldr	r3, [pc, #4]	; (80100b4 <__errno+0x8>)
 80100ae:	6818      	ldr	r0, [r3, #0]
 80100b0:	4770      	bx	lr
 80100b2:	bf00      	nop
 80100b4:	2000006c 	.word	0x2000006c

080100b8 <std>:
 80100b8:	2300      	movs	r3, #0
 80100ba:	b510      	push	{r4, lr}
 80100bc:	4604      	mov	r4, r0
 80100be:	e9c0 3300 	strd	r3, r3, [r0]
 80100c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80100c6:	6083      	str	r3, [r0, #8]
 80100c8:	8181      	strh	r1, [r0, #12]
 80100ca:	6643      	str	r3, [r0, #100]	; 0x64
 80100cc:	81c2      	strh	r2, [r0, #14]
 80100ce:	6183      	str	r3, [r0, #24]
 80100d0:	4619      	mov	r1, r3
 80100d2:	2208      	movs	r2, #8
 80100d4:	305c      	adds	r0, #92	; 0x5c
 80100d6:	f000 f91f 	bl	8010318 <memset>
 80100da:	4b05      	ldr	r3, [pc, #20]	; (80100f0 <std+0x38>)
 80100dc:	6263      	str	r3, [r4, #36]	; 0x24
 80100de:	4b05      	ldr	r3, [pc, #20]	; (80100f4 <std+0x3c>)
 80100e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80100e2:	4b05      	ldr	r3, [pc, #20]	; (80100f8 <std+0x40>)
 80100e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80100e6:	4b05      	ldr	r3, [pc, #20]	; (80100fc <std+0x44>)
 80100e8:	6224      	str	r4, [r4, #32]
 80100ea:	6323      	str	r3, [r4, #48]	; 0x30
 80100ec:	bd10      	pop	{r4, pc}
 80100ee:	bf00      	nop
 80100f0:	08011129 	.word	0x08011129
 80100f4:	0801114b 	.word	0x0801114b
 80100f8:	08011183 	.word	0x08011183
 80100fc:	080111a7 	.word	0x080111a7

08010100 <_cleanup_r>:
 8010100:	4901      	ldr	r1, [pc, #4]	; (8010108 <_cleanup_r+0x8>)
 8010102:	f000 b8af 	b.w	8010264 <_fwalk_reent>
 8010106:	bf00      	nop
 8010108:	08012291 	.word	0x08012291

0801010c <__sfmoreglue>:
 801010c:	b570      	push	{r4, r5, r6, lr}
 801010e:	2268      	movs	r2, #104	; 0x68
 8010110:	1e4d      	subs	r5, r1, #1
 8010112:	4355      	muls	r5, r2
 8010114:	460e      	mov	r6, r1
 8010116:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801011a:	f000 f971 	bl	8010400 <_malloc_r>
 801011e:	4604      	mov	r4, r0
 8010120:	b140      	cbz	r0, 8010134 <__sfmoreglue+0x28>
 8010122:	2100      	movs	r1, #0
 8010124:	e9c0 1600 	strd	r1, r6, [r0]
 8010128:	300c      	adds	r0, #12
 801012a:	60a0      	str	r0, [r4, #8]
 801012c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010130:	f000 f8f2 	bl	8010318 <memset>
 8010134:	4620      	mov	r0, r4
 8010136:	bd70      	pop	{r4, r5, r6, pc}

08010138 <__sfp_lock_acquire>:
 8010138:	4801      	ldr	r0, [pc, #4]	; (8010140 <__sfp_lock_acquire+0x8>)
 801013a:	f7f5 beb9 	b.w	8005eb0 <__retarget_lock_acquire_recursive>
 801013e:	bf00      	nop
 8010140:	20000c7c 	.word	0x20000c7c

08010144 <__sfp_lock_release>:
 8010144:	4801      	ldr	r0, [pc, #4]	; (801014c <__sfp_lock_release+0x8>)
 8010146:	f7f5 bec7 	b.w	8005ed8 <__retarget_lock_release_recursive>
 801014a:	bf00      	nop
 801014c:	20000c7c 	.word	0x20000c7c

08010150 <__sinit_lock_acquire>:
 8010150:	4801      	ldr	r0, [pc, #4]	; (8010158 <__sinit_lock_acquire+0x8>)
 8010152:	f7f5 bead 	b.w	8005eb0 <__retarget_lock_acquire_recursive>
 8010156:	bf00      	nop
 8010158:	20000c70 	.word	0x20000c70

0801015c <__sinit_lock_release>:
 801015c:	4801      	ldr	r0, [pc, #4]	; (8010164 <__sinit_lock_release+0x8>)
 801015e:	f7f5 bebb 	b.w	8005ed8 <__retarget_lock_release_recursive>
 8010162:	bf00      	nop
 8010164:	20000c70 	.word	0x20000c70

08010168 <__sinit>:
 8010168:	b510      	push	{r4, lr}
 801016a:	4604      	mov	r4, r0
 801016c:	f7ff fff0 	bl	8010150 <__sinit_lock_acquire>
 8010170:	69a3      	ldr	r3, [r4, #24]
 8010172:	b11b      	cbz	r3, 801017c <__sinit+0x14>
 8010174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010178:	f7ff bff0 	b.w	801015c <__sinit_lock_release>
 801017c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010180:	6523      	str	r3, [r4, #80]	; 0x50
 8010182:	4b13      	ldr	r3, [pc, #76]	; (80101d0 <__sinit+0x68>)
 8010184:	4a13      	ldr	r2, [pc, #76]	; (80101d4 <__sinit+0x6c>)
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	62a2      	str	r2, [r4, #40]	; 0x28
 801018a:	42a3      	cmp	r3, r4
 801018c:	bf04      	itt	eq
 801018e:	2301      	moveq	r3, #1
 8010190:	61a3      	streq	r3, [r4, #24]
 8010192:	4620      	mov	r0, r4
 8010194:	f000 f820 	bl	80101d8 <__sfp>
 8010198:	6060      	str	r0, [r4, #4]
 801019a:	4620      	mov	r0, r4
 801019c:	f000 f81c 	bl	80101d8 <__sfp>
 80101a0:	60a0      	str	r0, [r4, #8]
 80101a2:	4620      	mov	r0, r4
 80101a4:	f000 f818 	bl	80101d8 <__sfp>
 80101a8:	2200      	movs	r2, #0
 80101aa:	60e0      	str	r0, [r4, #12]
 80101ac:	2104      	movs	r1, #4
 80101ae:	6860      	ldr	r0, [r4, #4]
 80101b0:	f7ff ff82 	bl	80100b8 <std>
 80101b4:	68a0      	ldr	r0, [r4, #8]
 80101b6:	2201      	movs	r2, #1
 80101b8:	2109      	movs	r1, #9
 80101ba:	f7ff ff7d 	bl	80100b8 <std>
 80101be:	68e0      	ldr	r0, [r4, #12]
 80101c0:	2202      	movs	r2, #2
 80101c2:	2112      	movs	r1, #18
 80101c4:	f7ff ff78 	bl	80100b8 <std>
 80101c8:	2301      	movs	r3, #1
 80101ca:	61a3      	str	r3, [r4, #24]
 80101cc:	e7d2      	b.n	8010174 <__sinit+0xc>
 80101ce:	bf00      	nop
 80101d0:	080140b0 	.word	0x080140b0
 80101d4:	08010101 	.word	0x08010101

080101d8 <__sfp>:
 80101d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101da:	4607      	mov	r7, r0
 80101dc:	f7ff ffac 	bl	8010138 <__sfp_lock_acquire>
 80101e0:	4b1e      	ldr	r3, [pc, #120]	; (801025c <__sfp+0x84>)
 80101e2:	681e      	ldr	r6, [r3, #0]
 80101e4:	69b3      	ldr	r3, [r6, #24]
 80101e6:	b913      	cbnz	r3, 80101ee <__sfp+0x16>
 80101e8:	4630      	mov	r0, r6
 80101ea:	f7ff ffbd 	bl	8010168 <__sinit>
 80101ee:	3648      	adds	r6, #72	; 0x48
 80101f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80101f4:	3b01      	subs	r3, #1
 80101f6:	d503      	bpl.n	8010200 <__sfp+0x28>
 80101f8:	6833      	ldr	r3, [r6, #0]
 80101fa:	b30b      	cbz	r3, 8010240 <__sfp+0x68>
 80101fc:	6836      	ldr	r6, [r6, #0]
 80101fe:	e7f7      	b.n	80101f0 <__sfp+0x18>
 8010200:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010204:	b9d5      	cbnz	r5, 801023c <__sfp+0x64>
 8010206:	4b16      	ldr	r3, [pc, #88]	; (8010260 <__sfp+0x88>)
 8010208:	60e3      	str	r3, [r4, #12]
 801020a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801020e:	6665      	str	r5, [r4, #100]	; 0x64
 8010210:	f7f5 fe28 	bl	8005e64 <__retarget_lock_init_recursive>
 8010214:	f7ff ff96 	bl	8010144 <__sfp_lock_release>
 8010218:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801021c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010220:	6025      	str	r5, [r4, #0]
 8010222:	61a5      	str	r5, [r4, #24]
 8010224:	2208      	movs	r2, #8
 8010226:	4629      	mov	r1, r5
 8010228:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801022c:	f000 f874 	bl	8010318 <memset>
 8010230:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010234:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010238:	4620      	mov	r0, r4
 801023a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801023c:	3468      	adds	r4, #104	; 0x68
 801023e:	e7d9      	b.n	80101f4 <__sfp+0x1c>
 8010240:	2104      	movs	r1, #4
 8010242:	4638      	mov	r0, r7
 8010244:	f7ff ff62 	bl	801010c <__sfmoreglue>
 8010248:	4604      	mov	r4, r0
 801024a:	6030      	str	r0, [r6, #0]
 801024c:	2800      	cmp	r0, #0
 801024e:	d1d5      	bne.n	80101fc <__sfp+0x24>
 8010250:	f7ff ff78 	bl	8010144 <__sfp_lock_release>
 8010254:	230c      	movs	r3, #12
 8010256:	603b      	str	r3, [r7, #0]
 8010258:	e7ee      	b.n	8010238 <__sfp+0x60>
 801025a:	bf00      	nop
 801025c:	080140b0 	.word	0x080140b0
 8010260:	ffff0001 	.word	0xffff0001

08010264 <_fwalk_reent>:
 8010264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010268:	4606      	mov	r6, r0
 801026a:	4688      	mov	r8, r1
 801026c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010270:	2700      	movs	r7, #0
 8010272:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010276:	f1b9 0901 	subs.w	r9, r9, #1
 801027a:	d505      	bpl.n	8010288 <_fwalk_reent+0x24>
 801027c:	6824      	ldr	r4, [r4, #0]
 801027e:	2c00      	cmp	r4, #0
 8010280:	d1f7      	bne.n	8010272 <_fwalk_reent+0xe>
 8010282:	4638      	mov	r0, r7
 8010284:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010288:	89ab      	ldrh	r3, [r5, #12]
 801028a:	2b01      	cmp	r3, #1
 801028c:	d907      	bls.n	801029e <_fwalk_reent+0x3a>
 801028e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010292:	3301      	adds	r3, #1
 8010294:	d003      	beq.n	801029e <_fwalk_reent+0x3a>
 8010296:	4629      	mov	r1, r5
 8010298:	4630      	mov	r0, r6
 801029a:	47c0      	blx	r8
 801029c:	4307      	orrs	r7, r0
 801029e:	3568      	adds	r5, #104	; 0x68
 80102a0:	e7e9      	b.n	8010276 <_fwalk_reent+0x12>
	...

080102a4 <__libc_init_array>:
 80102a4:	b570      	push	{r4, r5, r6, lr}
 80102a6:	4d0d      	ldr	r5, [pc, #52]	; (80102dc <__libc_init_array+0x38>)
 80102a8:	4c0d      	ldr	r4, [pc, #52]	; (80102e0 <__libc_init_array+0x3c>)
 80102aa:	1b64      	subs	r4, r4, r5
 80102ac:	10a4      	asrs	r4, r4, #2
 80102ae:	2600      	movs	r6, #0
 80102b0:	42a6      	cmp	r6, r4
 80102b2:	d109      	bne.n	80102c8 <__libc_init_array+0x24>
 80102b4:	4d0b      	ldr	r5, [pc, #44]	; (80102e4 <__libc_init_array+0x40>)
 80102b6:	4c0c      	ldr	r4, [pc, #48]	; (80102e8 <__libc_init_array+0x44>)
 80102b8:	f003 f81a 	bl	80132f0 <_init>
 80102bc:	1b64      	subs	r4, r4, r5
 80102be:	10a4      	asrs	r4, r4, #2
 80102c0:	2600      	movs	r6, #0
 80102c2:	42a6      	cmp	r6, r4
 80102c4:	d105      	bne.n	80102d2 <__libc_init_array+0x2e>
 80102c6:	bd70      	pop	{r4, r5, r6, pc}
 80102c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80102cc:	4798      	blx	r3
 80102ce:	3601      	adds	r6, #1
 80102d0:	e7ee      	b.n	80102b0 <__libc_init_array+0xc>
 80102d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80102d6:	4798      	blx	r3
 80102d8:	3601      	adds	r6, #1
 80102da:	e7f2      	b.n	80102c2 <__libc_init_array+0x1e>
 80102dc:	08014434 	.word	0x08014434
 80102e0:	08014434 	.word	0x08014434
 80102e4:	08014434 	.word	0x08014434
 80102e8:	0801443c 	.word	0x0801443c

080102ec <malloc>:
 80102ec:	4b02      	ldr	r3, [pc, #8]	; (80102f8 <malloc+0xc>)
 80102ee:	4601      	mov	r1, r0
 80102f0:	6818      	ldr	r0, [r3, #0]
 80102f2:	f000 b885 	b.w	8010400 <_malloc_r>
 80102f6:	bf00      	nop
 80102f8:	2000006c 	.word	0x2000006c

080102fc <memcpy>:
 80102fc:	440a      	add	r2, r1
 80102fe:	4291      	cmp	r1, r2
 8010300:	f100 33ff 	add.w	r3, r0, #4294967295
 8010304:	d100      	bne.n	8010308 <memcpy+0xc>
 8010306:	4770      	bx	lr
 8010308:	b510      	push	{r4, lr}
 801030a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801030e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010312:	4291      	cmp	r1, r2
 8010314:	d1f9      	bne.n	801030a <memcpy+0xe>
 8010316:	bd10      	pop	{r4, pc}

08010318 <memset>:
 8010318:	4402      	add	r2, r0
 801031a:	4603      	mov	r3, r0
 801031c:	4293      	cmp	r3, r2
 801031e:	d100      	bne.n	8010322 <memset+0xa>
 8010320:	4770      	bx	lr
 8010322:	f803 1b01 	strb.w	r1, [r3], #1
 8010326:	e7f9      	b.n	801031c <memset+0x4>

08010328 <_free_r>:
 8010328:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801032a:	2900      	cmp	r1, #0
 801032c:	d044      	beq.n	80103b8 <_free_r+0x90>
 801032e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010332:	9001      	str	r0, [sp, #4]
 8010334:	2b00      	cmp	r3, #0
 8010336:	f1a1 0404 	sub.w	r4, r1, #4
 801033a:	bfb8      	it	lt
 801033c:	18e4      	addlt	r4, r4, r3
 801033e:	f002 f85f 	bl	8012400 <__malloc_lock>
 8010342:	4a1e      	ldr	r2, [pc, #120]	; (80103bc <_free_r+0x94>)
 8010344:	9801      	ldr	r0, [sp, #4]
 8010346:	6813      	ldr	r3, [r2, #0]
 8010348:	b933      	cbnz	r3, 8010358 <_free_r+0x30>
 801034a:	6063      	str	r3, [r4, #4]
 801034c:	6014      	str	r4, [r2, #0]
 801034e:	b003      	add	sp, #12
 8010350:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010354:	f002 b85a 	b.w	801240c <__malloc_unlock>
 8010358:	42a3      	cmp	r3, r4
 801035a:	d908      	bls.n	801036e <_free_r+0x46>
 801035c:	6825      	ldr	r5, [r4, #0]
 801035e:	1961      	adds	r1, r4, r5
 8010360:	428b      	cmp	r3, r1
 8010362:	bf01      	itttt	eq
 8010364:	6819      	ldreq	r1, [r3, #0]
 8010366:	685b      	ldreq	r3, [r3, #4]
 8010368:	1949      	addeq	r1, r1, r5
 801036a:	6021      	streq	r1, [r4, #0]
 801036c:	e7ed      	b.n	801034a <_free_r+0x22>
 801036e:	461a      	mov	r2, r3
 8010370:	685b      	ldr	r3, [r3, #4]
 8010372:	b10b      	cbz	r3, 8010378 <_free_r+0x50>
 8010374:	42a3      	cmp	r3, r4
 8010376:	d9fa      	bls.n	801036e <_free_r+0x46>
 8010378:	6811      	ldr	r1, [r2, #0]
 801037a:	1855      	adds	r5, r2, r1
 801037c:	42a5      	cmp	r5, r4
 801037e:	d10b      	bne.n	8010398 <_free_r+0x70>
 8010380:	6824      	ldr	r4, [r4, #0]
 8010382:	4421      	add	r1, r4
 8010384:	1854      	adds	r4, r2, r1
 8010386:	42a3      	cmp	r3, r4
 8010388:	6011      	str	r1, [r2, #0]
 801038a:	d1e0      	bne.n	801034e <_free_r+0x26>
 801038c:	681c      	ldr	r4, [r3, #0]
 801038e:	685b      	ldr	r3, [r3, #4]
 8010390:	6053      	str	r3, [r2, #4]
 8010392:	4421      	add	r1, r4
 8010394:	6011      	str	r1, [r2, #0]
 8010396:	e7da      	b.n	801034e <_free_r+0x26>
 8010398:	d902      	bls.n	80103a0 <_free_r+0x78>
 801039a:	230c      	movs	r3, #12
 801039c:	6003      	str	r3, [r0, #0]
 801039e:	e7d6      	b.n	801034e <_free_r+0x26>
 80103a0:	6825      	ldr	r5, [r4, #0]
 80103a2:	1961      	adds	r1, r4, r5
 80103a4:	428b      	cmp	r3, r1
 80103a6:	bf04      	itt	eq
 80103a8:	6819      	ldreq	r1, [r3, #0]
 80103aa:	685b      	ldreq	r3, [r3, #4]
 80103ac:	6063      	str	r3, [r4, #4]
 80103ae:	bf04      	itt	eq
 80103b0:	1949      	addeq	r1, r1, r5
 80103b2:	6021      	streq	r1, [r4, #0]
 80103b4:	6054      	str	r4, [r2, #4]
 80103b6:	e7ca      	b.n	801034e <_free_r+0x26>
 80103b8:	b003      	add	sp, #12
 80103ba:	bd30      	pop	{r4, r5, pc}
 80103bc:	20005cac 	.word	0x20005cac

080103c0 <sbrk_aligned>:
 80103c0:	b570      	push	{r4, r5, r6, lr}
 80103c2:	4e0e      	ldr	r6, [pc, #56]	; (80103fc <sbrk_aligned+0x3c>)
 80103c4:	460c      	mov	r4, r1
 80103c6:	6831      	ldr	r1, [r6, #0]
 80103c8:	4605      	mov	r5, r0
 80103ca:	b911      	cbnz	r1, 80103d2 <sbrk_aligned+0x12>
 80103cc:	f000 fe04 	bl	8010fd8 <_sbrk_r>
 80103d0:	6030      	str	r0, [r6, #0]
 80103d2:	4621      	mov	r1, r4
 80103d4:	4628      	mov	r0, r5
 80103d6:	f000 fdff 	bl	8010fd8 <_sbrk_r>
 80103da:	1c43      	adds	r3, r0, #1
 80103dc:	d00a      	beq.n	80103f4 <sbrk_aligned+0x34>
 80103de:	1cc4      	adds	r4, r0, #3
 80103e0:	f024 0403 	bic.w	r4, r4, #3
 80103e4:	42a0      	cmp	r0, r4
 80103e6:	d007      	beq.n	80103f8 <sbrk_aligned+0x38>
 80103e8:	1a21      	subs	r1, r4, r0
 80103ea:	4628      	mov	r0, r5
 80103ec:	f000 fdf4 	bl	8010fd8 <_sbrk_r>
 80103f0:	3001      	adds	r0, #1
 80103f2:	d101      	bne.n	80103f8 <sbrk_aligned+0x38>
 80103f4:	f04f 34ff 	mov.w	r4, #4294967295
 80103f8:	4620      	mov	r0, r4
 80103fa:	bd70      	pop	{r4, r5, r6, pc}
 80103fc:	20005cb0 	.word	0x20005cb0

08010400 <_malloc_r>:
 8010400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010404:	1ccd      	adds	r5, r1, #3
 8010406:	f025 0503 	bic.w	r5, r5, #3
 801040a:	3508      	adds	r5, #8
 801040c:	2d0c      	cmp	r5, #12
 801040e:	bf38      	it	cc
 8010410:	250c      	movcc	r5, #12
 8010412:	2d00      	cmp	r5, #0
 8010414:	4607      	mov	r7, r0
 8010416:	db01      	blt.n	801041c <_malloc_r+0x1c>
 8010418:	42a9      	cmp	r1, r5
 801041a:	d905      	bls.n	8010428 <_malloc_r+0x28>
 801041c:	230c      	movs	r3, #12
 801041e:	603b      	str	r3, [r7, #0]
 8010420:	2600      	movs	r6, #0
 8010422:	4630      	mov	r0, r6
 8010424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010428:	4e2e      	ldr	r6, [pc, #184]	; (80104e4 <_malloc_r+0xe4>)
 801042a:	f001 ffe9 	bl	8012400 <__malloc_lock>
 801042e:	6833      	ldr	r3, [r6, #0]
 8010430:	461c      	mov	r4, r3
 8010432:	bb34      	cbnz	r4, 8010482 <_malloc_r+0x82>
 8010434:	4629      	mov	r1, r5
 8010436:	4638      	mov	r0, r7
 8010438:	f7ff ffc2 	bl	80103c0 <sbrk_aligned>
 801043c:	1c43      	adds	r3, r0, #1
 801043e:	4604      	mov	r4, r0
 8010440:	d14d      	bne.n	80104de <_malloc_r+0xde>
 8010442:	6834      	ldr	r4, [r6, #0]
 8010444:	4626      	mov	r6, r4
 8010446:	2e00      	cmp	r6, #0
 8010448:	d140      	bne.n	80104cc <_malloc_r+0xcc>
 801044a:	6823      	ldr	r3, [r4, #0]
 801044c:	4631      	mov	r1, r6
 801044e:	4638      	mov	r0, r7
 8010450:	eb04 0803 	add.w	r8, r4, r3
 8010454:	f000 fdc0 	bl	8010fd8 <_sbrk_r>
 8010458:	4580      	cmp	r8, r0
 801045a:	d13a      	bne.n	80104d2 <_malloc_r+0xd2>
 801045c:	6821      	ldr	r1, [r4, #0]
 801045e:	3503      	adds	r5, #3
 8010460:	1a6d      	subs	r5, r5, r1
 8010462:	f025 0503 	bic.w	r5, r5, #3
 8010466:	3508      	adds	r5, #8
 8010468:	2d0c      	cmp	r5, #12
 801046a:	bf38      	it	cc
 801046c:	250c      	movcc	r5, #12
 801046e:	4629      	mov	r1, r5
 8010470:	4638      	mov	r0, r7
 8010472:	f7ff ffa5 	bl	80103c0 <sbrk_aligned>
 8010476:	3001      	adds	r0, #1
 8010478:	d02b      	beq.n	80104d2 <_malloc_r+0xd2>
 801047a:	6823      	ldr	r3, [r4, #0]
 801047c:	442b      	add	r3, r5
 801047e:	6023      	str	r3, [r4, #0]
 8010480:	e00e      	b.n	80104a0 <_malloc_r+0xa0>
 8010482:	6822      	ldr	r2, [r4, #0]
 8010484:	1b52      	subs	r2, r2, r5
 8010486:	d41e      	bmi.n	80104c6 <_malloc_r+0xc6>
 8010488:	2a0b      	cmp	r2, #11
 801048a:	d916      	bls.n	80104ba <_malloc_r+0xba>
 801048c:	1961      	adds	r1, r4, r5
 801048e:	42a3      	cmp	r3, r4
 8010490:	6025      	str	r5, [r4, #0]
 8010492:	bf18      	it	ne
 8010494:	6059      	strne	r1, [r3, #4]
 8010496:	6863      	ldr	r3, [r4, #4]
 8010498:	bf08      	it	eq
 801049a:	6031      	streq	r1, [r6, #0]
 801049c:	5162      	str	r2, [r4, r5]
 801049e:	604b      	str	r3, [r1, #4]
 80104a0:	4638      	mov	r0, r7
 80104a2:	f104 060b 	add.w	r6, r4, #11
 80104a6:	f001 ffb1 	bl	801240c <__malloc_unlock>
 80104aa:	f026 0607 	bic.w	r6, r6, #7
 80104ae:	1d23      	adds	r3, r4, #4
 80104b0:	1af2      	subs	r2, r6, r3
 80104b2:	d0b6      	beq.n	8010422 <_malloc_r+0x22>
 80104b4:	1b9b      	subs	r3, r3, r6
 80104b6:	50a3      	str	r3, [r4, r2]
 80104b8:	e7b3      	b.n	8010422 <_malloc_r+0x22>
 80104ba:	6862      	ldr	r2, [r4, #4]
 80104bc:	42a3      	cmp	r3, r4
 80104be:	bf0c      	ite	eq
 80104c0:	6032      	streq	r2, [r6, #0]
 80104c2:	605a      	strne	r2, [r3, #4]
 80104c4:	e7ec      	b.n	80104a0 <_malloc_r+0xa0>
 80104c6:	4623      	mov	r3, r4
 80104c8:	6864      	ldr	r4, [r4, #4]
 80104ca:	e7b2      	b.n	8010432 <_malloc_r+0x32>
 80104cc:	4634      	mov	r4, r6
 80104ce:	6876      	ldr	r6, [r6, #4]
 80104d0:	e7b9      	b.n	8010446 <_malloc_r+0x46>
 80104d2:	230c      	movs	r3, #12
 80104d4:	603b      	str	r3, [r7, #0]
 80104d6:	4638      	mov	r0, r7
 80104d8:	f001 ff98 	bl	801240c <__malloc_unlock>
 80104dc:	e7a1      	b.n	8010422 <_malloc_r+0x22>
 80104de:	6025      	str	r5, [r4, #0]
 80104e0:	e7de      	b.n	80104a0 <_malloc_r+0xa0>
 80104e2:	bf00      	nop
 80104e4:	20005cac 	.word	0x20005cac

080104e8 <__cvt>:
 80104e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80104ec:	ec55 4b10 	vmov	r4, r5, d0
 80104f0:	2d00      	cmp	r5, #0
 80104f2:	460e      	mov	r6, r1
 80104f4:	4619      	mov	r1, r3
 80104f6:	462b      	mov	r3, r5
 80104f8:	bfbb      	ittet	lt
 80104fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80104fe:	461d      	movlt	r5, r3
 8010500:	2300      	movge	r3, #0
 8010502:	232d      	movlt	r3, #45	; 0x2d
 8010504:	700b      	strb	r3, [r1, #0]
 8010506:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010508:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801050c:	4691      	mov	r9, r2
 801050e:	f023 0820 	bic.w	r8, r3, #32
 8010512:	bfbc      	itt	lt
 8010514:	4622      	movlt	r2, r4
 8010516:	4614      	movlt	r4, r2
 8010518:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801051c:	d005      	beq.n	801052a <__cvt+0x42>
 801051e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010522:	d100      	bne.n	8010526 <__cvt+0x3e>
 8010524:	3601      	adds	r6, #1
 8010526:	2102      	movs	r1, #2
 8010528:	e000      	b.n	801052c <__cvt+0x44>
 801052a:	2103      	movs	r1, #3
 801052c:	ab03      	add	r3, sp, #12
 801052e:	9301      	str	r3, [sp, #4]
 8010530:	ab02      	add	r3, sp, #8
 8010532:	9300      	str	r3, [sp, #0]
 8010534:	ec45 4b10 	vmov	d0, r4, r5
 8010538:	4653      	mov	r3, sl
 801053a:	4632      	mov	r2, r6
 801053c:	f001 f834 	bl	80115a8 <_dtoa_r>
 8010540:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010544:	4607      	mov	r7, r0
 8010546:	d102      	bne.n	801054e <__cvt+0x66>
 8010548:	f019 0f01 	tst.w	r9, #1
 801054c:	d022      	beq.n	8010594 <__cvt+0xac>
 801054e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010552:	eb07 0906 	add.w	r9, r7, r6
 8010556:	d110      	bne.n	801057a <__cvt+0x92>
 8010558:	783b      	ldrb	r3, [r7, #0]
 801055a:	2b30      	cmp	r3, #48	; 0x30
 801055c:	d10a      	bne.n	8010574 <__cvt+0x8c>
 801055e:	2200      	movs	r2, #0
 8010560:	2300      	movs	r3, #0
 8010562:	4620      	mov	r0, r4
 8010564:	4629      	mov	r1, r5
 8010566:	f7f0 faaf 	bl	8000ac8 <__aeabi_dcmpeq>
 801056a:	b918      	cbnz	r0, 8010574 <__cvt+0x8c>
 801056c:	f1c6 0601 	rsb	r6, r6, #1
 8010570:	f8ca 6000 	str.w	r6, [sl]
 8010574:	f8da 3000 	ldr.w	r3, [sl]
 8010578:	4499      	add	r9, r3
 801057a:	2200      	movs	r2, #0
 801057c:	2300      	movs	r3, #0
 801057e:	4620      	mov	r0, r4
 8010580:	4629      	mov	r1, r5
 8010582:	f7f0 faa1 	bl	8000ac8 <__aeabi_dcmpeq>
 8010586:	b108      	cbz	r0, 801058c <__cvt+0xa4>
 8010588:	f8cd 900c 	str.w	r9, [sp, #12]
 801058c:	2230      	movs	r2, #48	; 0x30
 801058e:	9b03      	ldr	r3, [sp, #12]
 8010590:	454b      	cmp	r3, r9
 8010592:	d307      	bcc.n	80105a4 <__cvt+0xbc>
 8010594:	9b03      	ldr	r3, [sp, #12]
 8010596:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010598:	1bdb      	subs	r3, r3, r7
 801059a:	4638      	mov	r0, r7
 801059c:	6013      	str	r3, [r2, #0]
 801059e:	b004      	add	sp, #16
 80105a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105a4:	1c59      	adds	r1, r3, #1
 80105a6:	9103      	str	r1, [sp, #12]
 80105a8:	701a      	strb	r2, [r3, #0]
 80105aa:	e7f0      	b.n	801058e <__cvt+0xa6>

080105ac <__exponent>:
 80105ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80105ae:	4603      	mov	r3, r0
 80105b0:	2900      	cmp	r1, #0
 80105b2:	bfb8      	it	lt
 80105b4:	4249      	neglt	r1, r1
 80105b6:	f803 2b02 	strb.w	r2, [r3], #2
 80105ba:	bfb4      	ite	lt
 80105bc:	222d      	movlt	r2, #45	; 0x2d
 80105be:	222b      	movge	r2, #43	; 0x2b
 80105c0:	2909      	cmp	r1, #9
 80105c2:	7042      	strb	r2, [r0, #1]
 80105c4:	dd2a      	ble.n	801061c <__exponent+0x70>
 80105c6:	f10d 0407 	add.w	r4, sp, #7
 80105ca:	46a4      	mov	ip, r4
 80105cc:	270a      	movs	r7, #10
 80105ce:	46a6      	mov	lr, r4
 80105d0:	460a      	mov	r2, r1
 80105d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80105d6:	fb07 1516 	mls	r5, r7, r6, r1
 80105da:	3530      	adds	r5, #48	; 0x30
 80105dc:	2a63      	cmp	r2, #99	; 0x63
 80105de:	f104 34ff 	add.w	r4, r4, #4294967295
 80105e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80105e6:	4631      	mov	r1, r6
 80105e8:	dcf1      	bgt.n	80105ce <__exponent+0x22>
 80105ea:	3130      	adds	r1, #48	; 0x30
 80105ec:	f1ae 0502 	sub.w	r5, lr, #2
 80105f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80105f4:	1c44      	adds	r4, r0, #1
 80105f6:	4629      	mov	r1, r5
 80105f8:	4561      	cmp	r1, ip
 80105fa:	d30a      	bcc.n	8010612 <__exponent+0x66>
 80105fc:	f10d 0209 	add.w	r2, sp, #9
 8010600:	eba2 020e 	sub.w	r2, r2, lr
 8010604:	4565      	cmp	r5, ip
 8010606:	bf88      	it	hi
 8010608:	2200      	movhi	r2, #0
 801060a:	4413      	add	r3, r2
 801060c:	1a18      	subs	r0, r3, r0
 801060e:	b003      	add	sp, #12
 8010610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010612:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010616:	f804 2f01 	strb.w	r2, [r4, #1]!
 801061a:	e7ed      	b.n	80105f8 <__exponent+0x4c>
 801061c:	2330      	movs	r3, #48	; 0x30
 801061e:	3130      	adds	r1, #48	; 0x30
 8010620:	7083      	strb	r3, [r0, #2]
 8010622:	70c1      	strb	r1, [r0, #3]
 8010624:	1d03      	adds	r3, r0, #4
 8010626:	e7f1      	b.n	801060c <__exponent+0x60>

08010628 <_printf_float>:
 8010628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801062c:	ed2d 8b02 	vpush	{d8}
 8010630:	b08d      	sub	sp, #52	; 0x34
 8010632:	460c      	mov	r4, r1
 8010634:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010638:	4616      	mov	r6, r2
 801063a:	461f      	mov	r7, r3
 801063c:	4605      	mov	r5, r0
 801063e:	f001 fe63 	bl	8012308 <_localeconv_r>
 8010642:	f8d0 a000 	ldr.w	sl, [r0]
 8010646:	4650      	mov	r0, sl
 8010648:	f7ef fdc2 	bl	80001d0 <strlen>
 801064c:	2300      	movs	r3, #0
 801064e:	930a      	str	r3, [sp, #40]	; 0x28
 8010650:	6823      	ldr	r3, [r4, #0]
 8010652:	9305      	str	r3, [sp, #20]
 8010654:	f8d8 3000 	ldr.w	r3, [r8]
 8010658:	f894 b018 	ldrb.w	fp, [r4, #24]
 801065c:	3307      	adds	r3, #7
 801065e:	f023 0307 	bic.w	r3, r3, #7
 8010662:	f103 0208 	add.w	r2, r3, #8
 8010666:	f8c8 2000 	str.w	r2, [r8]
 801066a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801066e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010672:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010676:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801067a:	9307      	str	r3, [sp, #28]
 801067c:	f8cd 8018 	str.w	r8, [sp, #24]
 8010680:	ee08 0a10 	vmov	s16, r0
 8010684:	4b9f      	ldr	r3, [pc, #636]	; (8010904 <_printf_float+0x2dc>)
 8010686:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801068a:	f04f 32ff 	mov.w	r2, #4294967295
 801068e:	f7f0 fa4d 	bl	8000b2c <__aeabi_dcmpun>
 8010692:	bb88      	cbnz	r0, 80106f8 <_printf_float+0xd0>
 8010694:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010698:	4b9a      	ldr	r3, [pc, #616]	; (8010904 <_printf_float+0x2dc>)
 801069a:	f04f 32ff 	mov.w	r2, #4294967295
 801069e:	f7f0 fa27 	bl	8000af0 <__aeabi_dcmple>
 80106a2:	bb48      	cbnz	r0, 80106f8 <_printf_float+0xd0>
 80106a4:	2200      	movs	r2, #0
 80106a6:	2300      	movs	r3, #0
 80106a8:	4640      	mov	r0, r8
 80106aa:	4649      	mov	r1, r9
 80106ac:	f7f0 fa16 	bl	8000adc <__aeabi_dcmplt>
 80106b0:	b110      	cbz	r0, 80106b8 <_printf_float+0x90>
 80106b2:	232d      	movs	r3, #45	; 0x2d
 80106b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80106b8:	4b93      	ldr	r3, [pc, #588]	; (8010908 <_printf_float+0x2e0>)
 80106ba:	4894      	ldr	r0, [pc, #592]	; (801090c <_printf_float+0x2e4>)
 80106bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80106c0:	bf94      	ite	ls
 80106c2:	4698      	movls	r8, r3
 80106c4:	4680      	movhi	r8, r0
 80106c6:	2303      	movs	r3, #3
 80106c8:	6123      	str	r3, [r4, #16]
 80106ca:	9b05      	ldr	r3, [sp, #20]
 80106cc:	f023 0204 	bic.w	r2, r3, #4
 80106d0:	6022      	str	r2, [r4, #0]
 80106d2:	f04f 0900 	mov.w	r9, #0
 80106d6:	9700      	str	r7, [sp, #0]
 80106d8:	4633      	mov	r3, r6
 80106da:	aa0b      	add	r2, sp, #44	; 0x2c
 80106dc:	4621      	mov	r1, r4
 80106de:	4628      	mov	r0, r5
 80106e0:	f000 f9d8 	bl	8010a94 <_printf_common>
 80106e4:	3001      	adds	r0, #1
 80106e6:	f040 8090 	bne.w	801080a <_printf_float+0x1e2>
 80106ea:	f04f 30ff 	mov.w	r0, #4294967295
 80106ee:	b00d      	add	sp, #52	; 0x34
 80106f0:	ecbd 8b02 	vpop	{d8}
 80106f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106f8:	4642      	mov	r2, r8
 80106fa:	464b      	mov	r3, r9
 80106fc:	4640      	mov	r0, r8
 80106fe:	4649      	mov	r1, r9
 8010700:	f7f0 fa14 	bl	8000b2c <__aeabi_dcmpun>
 8010704:	b140      	cbz	r0, 8010718 <_printf_float+0xf0>
 8010706:	464b      	mov	r3, r9
 8010708:	2b00      	cmp	r3, #0
 801070a:	bfbc      	itt	lt
 801070c:	232d      	movlt	r3, #45	; 0x2d
 801070e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010712:	487f      	ldr	r0, [pc, #508]	; (8010910 <_printf_float+0x2e8>)
 8010714:	4b7f      	ldr	r3, [pc, #508]	; (8010914 <_printf_float+0x2ec>)
 8010716:	e7d1      	b.n	80106bc <_printf_float+0x94>
 8010718:	6863      	ldr	r3, [r4, #4]
 801071a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801071e:	9206      	str	r2, [sp, #24]
 8010720:	1c5a      	adds	r2, r3, #1
 8010722:	d13f      	bne.n	80107a4 <_printf_float+0x17c>
 8010724:	2306      	movs	r3, #6
 8010726:	6063      	str	r3, [r4, #4]
 8010728:	9b05      	ldr	r3, [sp, #20]
 801072a:	6861      	ldr	r1, [r4, #4]
 801072c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010730:	2300      	movs	r3, #0
 8010732:	9303      	str	r3, [sp, #12]
 8010734:	ab0a      	add	r3, sp, #40	; 0x28
 8010736:	e9cd b301 	strd	fp, r3, [sp, #4]
 801073a:	ab09      	add	r3, sp, #36	; 0x24
 801073c:	ec49 8b10 	vmov	d0, r8, r9
 8010740:	9300      	str	r3, [sp, #0]
 8010742:	6022      	str	r2, [r4, #0]
 8010744:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010748:	4628      	mov	r0, r5
 801074a:	f7ff fecd 	bl	80104e8 <__cvt>
 801074e:	9b06      	ldr	r3, [sp, #24]
 8010750:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010752:	2b47      	cmp	r3, #71	; 0x47
 8010754:	4680      	mov	r8, r0
 8010756:	d108      	bne.n	801076a <_printf_float+0x142>
 8010758:	1cc8      	adds	r0, r1, #3
 801075a:	db02      	blt.n	8010762 <_printf_float+0x13a>
 801075c:	6863      	ldr	r3, [r4, #4]
 801075e:	4299      	cmp	r1, r3
 8010760:	dd41      	ble.n	80107e6 <_printf_float+0x1be>
 8010762:	f1ab 0b02 	sub.w	fp, fp, #2
 8010766:	fa5f fb8b 	uxtb.w	fp, fp
 801076a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801076e:	d820      	bhi.n	80107b2 <_printf_float+0x18a>
 8010770:	3901      	subs	r1, #1
 8010772:	465a      	mov	r2, fp
 8010774:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010778:	9109      	str	r1, [sp, #36]	; 0x24
 801077a:	f7ff ff17 	bl	80105ac <__exponent>
 801077e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010780:	1813      	adds	r3, r2, r0
 8010782:	2a01      	cmp	r2, #1
 8010784:	4681      	mov	r9, r0
 8010786:	6123      	str	r3, [r4, #16]
 8010788:	dc02      	bgt.n	8010790 <_printf_float+0x168>
 801078a:	6822      	ldr	r2, [r4, #0]
 801078c:	07d2      	lsls	r2, r2, #31
 801078e:	d501      	bpl.n	8010794 <_printf_float+0x16c>
 8010790:	3301      	adds	r3, #1
 8010792:	6123      	str	r3, [r4, #16]
 8010794:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010798:	2b00      	cmp	r3, #0
 801079a:	d09c      	beq.n	80106d6 <_printf_float+0xae>
 801079c:	232d      	movs	r3, #45	; 0x2d
 801079e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80107a2:	e798      	b.n	80106d6 <_printf_float+0xae>
 80107a4:	9a06      	ldr	r2, [sp, #24]
 80107a6:	2a47      	cmp	r2, #71	; 0x47
 80107a8:	d1be      	bne.n	8010728 <_printf_float+0x100>
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d1bc      	bne.n	8010728 <_printf_float+0x100>
 80107ae:	2301      	movs	r3, #1
 80107b0:	e7b9      	b.n	8010726 <_printf_float+0xfe>
 80107b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80107b6:	d118      	bne.n	80107ea <_printf_float+0x1c2>
 80107b8:	2900      	cmp	r1, #0
 80107ba:	6863      	ldr	r3, [r4, #4]
 80107bc:	dd0b      	ble.n	80107d6 <_printf_float+0x1ae>
 80107be:	6121      	str	r1, [r4, #16]
 80107c0:	b913      	cbnz	r3, 80107c8 <_printf_float+0x1a0>
 80107c2:	6822      	ldr	r2, [r4, #0]
 80107c4:	07d0      	lsls	r0, r2, #31
 80107c6:	d502      	bpl.n	80107ce <_printf_float+0x1a6>
 80107c8:	3301      	adds	r3, #1
 80107ca:	440b      	add	r3, r1
 80107cc:	6123      	str	r3, [r4, #16]
 80107ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80107d0:	f04f 0900 	mov.w	r9, #0
 80107d4:	e7de      	b.n	8010794 <_printf_float+0x16c>
 80107d6:	b913      	cbnz	r3, 80107de <_printf_float+0x1b6>
 80107d8:	6822      	ldr	r2, [r4, #0]
 80107da:	07d2      	lsls	r2, r2, #31
 80107dc:	d501      	bpl.n	80107e2 <_printf_float+0x1ba>
 80107de:	3302      	adds	r3, #2
 80107e0:	e7f4      	b.n	80107cc <_printf_float+0x1a4>
 80107e2:	2301      	movs	r3, #1
 80107e4:	e7f2      	b.n	80107cc <_printf_float+0x1a4>
 80107e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80107ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107ec:	4299      	cmp	r1, r3
 80107ee:	db05      	blt.n	80107fc <_printf_float+0x1d4>
 80107f0:	6823      	ldr	r3, [r4, #0]
 80107f2:	6121      	str	r1, [r4, #16]
 80107f4:	07d8      	lsls	r0, r3, #31
 80107f6:	d5ea      	bpl.n	80107ce <_printf_float+0x1a6>
 80107f8:	1c4b      	adds	r3, r1, #1
 80107fa:	e7e7      	b.n	80107cc <_printf_float+0x1a4>
 80107fc:	2900      	cmp	r1, #0
 80107fe:	bfd4      	ite	le
 8010800:	f1c1 0202 	rsble	r2, r1, #2
 8010804:	2201      	movgt	r2, #1
 8010806:	4413      	add	r3, r2
 8010808:	e7e0      	b.n	80107cc <_printf_float+0x1a4>
 801080a:	6823      	ldr	r3, [r4, #0]
 801080c:	055a      	lsls	r2, r3, #21
 801080e:	d407      	bmi.n	8010820 <_printf_float+0x1f8>
 8010810:	6923      	ldr	r3, [r4, #16]
 8010812:	4642      	mov	r2, r8
 8010814:	4631      	mov	r1, r6
 8010816:	4628      	mov	r0, r5
 8010818:	47b8      	blx	r7
 801081a:	3001      	adds	r0, #1
 801081c:	d12c      	bne.n	8010878 <_printf_float+0x250>
 801081e:	e764      	b.n	80106ea <_printf_float+0xc2>
 8010820:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010824:	f240 80e0 	bls.w	80109e8 <_printf_float+0x3c0>
 8010828:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801082c:	2200      	movs	r2, #0
 801082e:	2300      	movs	r3, #0
 8010830:	f7f0 f94a 	bl	8000ac8 <__aeabi_dcmpeq>
 8010834:	2800      	cmp	r0, #0
 8010836:	d034      	beq.n	80108a2 <_printf_float+0x27a>
 8010838:	4a37      	ldr	r2, [pc, #220]	; (8010918 <_printf_float+0x2f0>)
 801083a:	2301      	movs	r3, #1
 801083c:	4631      	mov	r1, r6
 801083e:	4628      	mov	r0, r5
 8010840:	47b8      	blx	r7
 8010842:	3001      	adds	r0, #1
 8010844:	f43f af51 	beq.w	80106ea <_printf_float+0xc2>
 8010848:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801084c:	429a      	cmp	r2, r3
 801084e:	db02      	blt.n	8010856 <_printf_float+0x22e>
 8010850:	6823      	ldr	r3, [r4, #0]
 8010852:	07d8      	lsls	r0, r3, #31
 8010854:	d510      	bpl.n	8010878 <_printf_float+0x250>
 8010856:	ee18 3a10 	vmov	r3, s16
 801085a:	4652      	mov	r2, sl
 801085c:	4631      	mov	r1, r6
 801085e:	4628      	mov	r0, r5
 8010860:	47b8      	blx	r7
 8010862:	3001      	adds	r0, #1
 8010864:	f43f af41 	beq.w	80106ea <_printf_float+0xc2>
 8010868:	f04f 0800 	mov.w	r8, #0
 801086c:	f104 091a 	add.w	r9, r4, #26
 8010870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010872:	3b01      	subs	r3, #1
 8010874:	4543      	cmp	r3, r8
 8010876:	dc09      	bgt.n	801088c <_printf_float+0x264>
 8010878:	6823      	ldr	r3, [r4, #0]
 801087a:	079b      	lsls	r3, r3, #30
 801087c:	f100 8105 	bmi.w	8010a8a <_printf_float+0x462>
 8010880:	68e0      	ldr	r0, [r4, #12]
 8010882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010884:	4298      	cmp	r0, r3
 8010886:	bfb8      	it	lt
 8010888:	4618      	movlt	r0, r3
 801088a:	e730      	b.n	80106ee <_printf_float+0xc6>
 801088c:	2301      	movs	r3, #1
 801088e:	464a      	mov	r2, r9
 8010890:	4631      	mov	r1, r6
 8010892:	4628      	mov	r0, r5
 8010894:	47b8      	blx	r7
 8010896:	3001      	adds	r0, #1
 8010898:	f43f af27 	beq.w	80106ea <_printf_float+0xc2>
 801089c:	f108 0801 	add.w	r8, r8, #1
 80108a0:	e7e6      	b.n	8010870 <_printf_float+0x248>
 80108a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	dc39      	bgt.n	801091c <_printf_float+0x2f4>
 80108a8:	4a1b      	ldr	r2, [pc, #108]	; (8010918 <_printf_float+0x2f0>)
 80108aa:	2301      	movs	r3, #1
 80108ac:	4631      	mov	r1, r6
 80108ae:	4628      	mov	r0, r5
 80108b0:	47b8      	blx	r7
 80108b2:	3001      	adds	r0, #1
 80108b4:	f43f af19 	beq.w	80106ea <_printf_float+0xc2>
 80108b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80108bc:	4313      	orrs	r3, r2
 80108be:	d102      	bne.n	80108c6 <_printf_float+0x29e>
 80108c0:	6823      	ldr	r3, [r4, #0]
 80108c2:	07d9      	lsls	r1, r3, #31
 80108c4:	d5d8      	bpl.n	8010878 <_printf_float+0x250>
 80108c6:	ee18 3a10 	vmov	r3, s16
 80108ca:	4652      	mov	r2, sl
 80108cc:	4631      	mov	r1, r6
 80108ce:	4628      	mov	r0, r5
 80108d0:	47b8      	blx	r7
 80108d2:	3001      	adds	r0, #1
 80108d4:	f43f af09 	beq.w	80106ea <_printf_float+0xc2>
 80108d8:	f04f 0900 	mov.w	r9, #0
 80108dc:	f104 0a1a 	add.w	sl, r4, #26
 80108e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108e2:	425b      	negs	r3, r3
 80108e4:	454b      	cmp	r3, r9
 80108e6:	dc01      	bgt.n	80108ec <_printf_float+0x2c4>
 80108e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80108ea:	e792      	b.n	8010812 <_printf_float+0x1ea>
 80108ec:	2301      	movs	r3, #1
 80108ee:	4652      	mov	r2, sl
 80108f0:	4631      	mov	r1, r6
 80108f2:	4628      	mov	r0, r5
 80108f4:	47b8      	blx	r7
 80108f6:	3001      	adds	r0, #1
 80108f8:	f43f aef7 	beq.w	80106ea <_printf_float+0xc2>
 80108fc:	f109 0901 	add.w	r9, r9, #1
 8010900:	e7ee      	b.n	80108e0 <_printf_float+0x2b8>
 8010902:	bf00      	nop
 8010904:	7fefffff 	.word	0x7fefffff
 8010908:	080140b4 	.word	0x080140b4
 801090c:	080140b8 	.word	0x080140b8
 8010910:	080140c0 	.word	0x080140c0
 8010914:	080140bc 	.word	0x080140bc
 8010918:	080140c4 	.word	0x080140c4
 801091c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801091e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010920:	429a      	cmp	r2, r3
 8010922:	bfa8      	it	ge
 8010924:	461a      	movge	r2, r3
 8010926:	2a00      	cmp	r2, #0
 8010928:	4691      	mov	r9, r2
 801092a:	dc37      	bgt.n	801099c <_printf_float+0x374>
 801092c:	f04f 0b00 	mov.w	fp, #0
 8010930:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010934:	f104 021a 	add.w	r2, r4, #26
 8010938:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801093a:	9305      	str	r3, [sp, #20]
 801093c:	eba3 0309 	sub.w	r3, r3, r9
 8010940:	455b      	cmp	r3, fp
 8010942:	dc33      	bgt.n	80109ac <_printf_float+0x384>
 8010944:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010948:	429a      	cmp	r2, r3
 801094a:	db3b      	blt.n	80109c4 <_printf_float+0x39c>
 801094c:	6823      	ldr	r3, [r4, #0]
 801094e:	07da      	lsls	r2, r3, #31
 8010950:	d438      	bmi.n	80109c4 <_printf_float+0x39c>
 8010952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010954:	9a05      	ldr	r2, [sp, #20]
 8010956:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010958:	1a9a      	subs	r2, r3, r2
 801095a:	eba3 0901 	sub.w	r9, r3, r1
 801095e:	4591      	cmp	r9, r2
 8010960:	bfa8      	it	ge
 8010962:	4691      	movge	r9, r2
 8010964:	f1b9 0f00 	cmp.w	r9, #0
 8010968:	dc35      	bgt.n	80109d6 <_printf_float+0x3ae>
 801096a:	f04f 0800 	mov.w	r8, #0
 801096e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010972:	f104 0a1a 	add.w	sl, r4, #26
 8010976:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801097a:	1a9b      	subs	r3, r3, r2
 801097c:	eba3 0309 	sub.w	r3, r3, r9
 8010980:	4543      	cmp	r3, r8
 8010982:	f77f af79 	ble.w	8010878 <_printf_float+0x250>
 8010986:	2301      	movs	r3, #1
 8010988:	4652      	mov	r2, sl
 801098a:	4631      	mov	r1, r6
 801098c:	4628      	mov	r0, r5
 801098e:	47b8      	blx	r7
 8010990:	3001      	adds	r0, #1
 8010992:	f43f aeaa 	beq.w	80106ea <_printf_float+0xc2>
 8010996:	f108 0801 	add.w	r8, r8, #1
 801099a:	e7ec      	b.n	8010976 <_printf_float+0x34e>
 801099c:	4613      	mov	r3, r2
 801099e:	4631      	mov	r1, r6
 80109a0:	4642      	mov	r2, r8
 80109a2:	4628      	mov	r0, r5
 80109a4:	47b8      	blx	r7
 80109a6:	3001      	adds	r0, #1
 80109a8:	d1c0      	bne.n	801092c <_printf_float+0x304>
 80109aa:	e69e      	b.n	80106ea <_printf_float+0xc2>
 80109ac:	2301      	movs	r3, #1
 80109ae:	4631      	mov	r1, r6
 80109b0:	4628      	mov	r0, r5
 80109b2:	9205      	str	r2, [sp, #20]
 80109b4:	47b8      	blx	r7
 80109b6:	3001      	adds	r0, #1
 80109b8:	f43f ae97 	beq.w	80106ea <_printf_float+0xc2>
 80109bc:	9a05      	ldr	r2, [sp, #20]
 80109be:	f10b 0b01 	add.w	fp, fp, #1
 80109c2:	e7b9      	b.n	8010938 <_printf_float+0x310>
 80109c4:	ee18 3a10 	vmov	r3, s16
 80109c8:	4652      	mov	r2, sl
 80109ca:	4631      	mov	r1, r6
 80109cc:	4628      	mov	r0, r5
 80109ce:	47b8      	blx	r7
 80109d0:	3001      	adds	r0, #1
 80109d2:	d1be      	bne.n	8010952 <_printf_float+0x32a>
 80109d4:	e689      	b.n	80106ea <_printf_float+0xc2>
 80109d6:	9a05      	ldr	r2, [sp, #20]
 80109d8:	464b      	mov	r3, r9
 80109da:	4442      	add	r2, r8
 80109dc:	4631      	mov	r1, r6
 80109de:	4628      	mov	r0, r5
 80109e0:	47b8      	blx	r7
 80109e2:	3001      	adds	r0, #1
 80109e4:	d1c1      	bne.n	801096a <_printf_float+0x342>
 80109e6:	e680      	b.n	80106ea <_printf_float+0xc2>
 80109e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80109ea:	2a01      	cmp	r2, #1
 80109ec:	dc01      	bgt.n	80109f2 <_printf_float+0x3ca>
 80109ee:	07db      	lsls	r3, r3, #31
 80109f0:	d538      	bpl.n	8010a64 <_printf_float+0x43c>
 80109f2:	2301      	movs	r3, #1
 80109f4:	4642      	mov	r2, r8
 80109f6:	4631      	mov	r1, r6
 80109f8:	4628      	mov	r0, r5
 80109fa:	47b8      	blx	r7
 80109fc:	3001      	adds	r0, #1
 80109fe:	f43f ae74 	beq.w	80106ea <_printf_float+0xc2>
 8010a02:	ee18 3a10 	vmov	r3, s16
 8010a06:	4652      	mov	r2, sl
 8010a08:	4631      	mov	r1, r6
 8010a0a:	4628      	mov	r0, r5
 8010a0c:	47b8      	blx	r7
 8010a0e:	3001      	adds	r0, #1
 8010a10:	f43f ae6b 	beq.w	80106ea <_printf_float+0xc2>
 8010a14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010a18:	2200      	movs	r2, #0
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	f7f0 f854 	bl	8000ac8 <__aeabi_dcmpeq>
 8010a20:	b9d8      	cbnz	r0, 8010a5a <_printf_float+0x432>
 8010a22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a24:	f108 0201 	add.w	r2, r8, #1
 8010a28:	3b01      	subs	r3, #1
 8010a2a:	4631      	mov	r1, r6
 8010a2c:	4628      	mov	r0, r5
 8010a2e:	47b8      	blx	r7
 8010a30:	3001      	adds	r0, #1
 8010a32:	d10e      	bne.n	8010a52 <_printf_float+0x42a>
 8010a34:	e659      	b.n	80106ea <_printf_float+0xc2>
 8010a36:	2301      	movs	r3, #1
 8010a38:	4652      	mov	r2, sl
 8010a3a:	4631      	mov	r1, r6
 8010a3c:	4628      	mov	r0, r5
 8010a3e:	47b8      	blx	r7
 8010a40:	3001      	adds	r0, #1
 8010a42:	f43f ae52 	beq.w	80106ea <_printf_float+0xc2>
 8010a46:	f108 0801 	add.w	r8, r8, #1
 8010a4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a4c:	3b01      	subs	r3, #1
 8010a4e:	4543      	cmp	r3, r8
 8010a50:	dcf1      	bgt.n	8010a36 <_printf_float+0x40e>
 8010a52:	464b      	mov	r3, r9
 8010a54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010a58:	e6dc      	b.n	8010814 <_printf_float+0x1ec>
 8010a5a:	f04f 0800 	mov.w	r8, #0
 8010a5e:	f104 0a1a 	add.w	sl, r4, #26
 8010a62:	e7f2      	b.n	8010a4a <_printf_float+0x422>
 8010a64:	2301      	movs	r3, #1
 8010a66:	4642      	mov	r2, r8
 8010a68:	e7df      	b.n	8010a2a <_printf_float+0x402>
 8010a6a:	2301      	movs	r3, #1
 8010a6c:	464a      	mov	r2, r9
 8010a6e:	4631      	mov	r1, r6
 8010a70:	4628      	mov	r0, r5
 8010a72:	47b8      	blx	r7
 8010a74:	3001      	adds	r0, #1
 8010a76:	f43f ae38 	beq.w	80106ea <_printf_float+0xc2>
 8010a7a:	f108 0801 	add.w	r8, r8, #1
 8010a7e:	68e3      	ldr	r3, [r4, #12]
 8010a80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010a82:	1a5b      	subs	r3, r3, r1
 8010a84:	4543      	cmp	r3, r8
 8010a86:	dcf0      	bgt.n	8010a6a <_printf_float+0x442>
 8010a88:	e6fa      	b.n	8010880 <_printf_float+0x258>
 8010a8a:	f04f 0800 	mov.w	r8, #0
 8010a8e:	f104 0919 	add.w	r9, r4, #25
 8010a92:	e7f4      	b.n	8010a7e <_printf_float+0x456>

08010a94 <_printf_common>:
 8010a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a98:	4616      	mov	r6, r2
 8010a9a:	4699      	mov	r9, r3
 8010a9c:	688a      	ldr	r2, [r1, #8]
 8010a9e:	690b      	ldr	r3, [r1, #16]
 8010aa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010aa4:	4293      	cmp	r3, r2
 8010aa6:	bfb8      	it	lt
 8010aa8:	4613      	movlt	r3, r2
 8010aaa:	6033      	str	r3, [r6, #0]
 8010aac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010ab0:	4607      	mov	r7, r0
 8010ab2:	460c      	mov	r4, r1
 8010ab4:	b10a      	cbz	r2, 8010aba <_printf_common+0x26>
 8010ab6:	3301      	adds	r3, #1
 8010ab8:	6033      	str	r3, [r6, #0]
 8010aba:	6823      	ldr	r3, [r4, #0]
 8010abc:	0699      	lsls	r1, r3, #26
 8010abe:	bf42      	ittt	mi
 8010ac0:	6833      	ldrmi	r3, [r6, #0]
 8010ac2:	3302      	addmi	r3, #2
 8010ac4:	6033      	strmi	r3, [r6, #0]
 8010ac6:	6825      	ldr	r5, [r4, #0]
 8010ac8:	f015 0506 	ands.w	r5, r5, #6
 8010acc:	d106      	bne.n	8010adc <_printf_common+0x48>
 8010ace:	f104 0a19 	add.w	sl, r4, #25
 8010ad2:	68e3      	ldr	r3, [r4, #12]
 8010ad4:	6832      	ldr	r2, [r6, #0]
 8010ad6:	1a9b      	subs	r3, r3, r2
 8010ad8:	42ab      	cmp	r3, r5
 8010ada:	dc26      	bgt.n	8010b2a <_printf_common+0x96>
 8010adc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010ae0:	1e13      	subs	r3, r2, #0
 8010ae2:	6822      	ldr	r2, [r4, #0]
 8010ae4:	bf18      	it	ne
 8010ae6:	2301      	movne	r3, #1
 8010ae8:	0692      	lsls	r2, r2, #26
 8010aea:	d42b      	bmi.n	8010b44 <_printf_common+0xb0>
 8010aec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010af0:	4649      	mov	r1, r9
 8010af2:	4638      	mov	r0, r7
 8010af4:	47c0      	blx	r8
 8010af6:	3001      	adds	r0, #1
 8010af8:	d01e      	beq.n	8010b38 <_printf_common+0xa4>
 8010afa:	6823      	ldr	r3, [r4, #0]
 8010afc:	68e5      	ldr	r5, [r4, #12]
 8010afe:	6832      	ldr	r2, [r6, #0]
 8010b00:	f003 0306 	and.w	r3, r3, #6
 8010b04:	2b04      	cmp	r3, #4
 8010b06:	bf08      	it	eq
 8010b08:	1aad      	subeq	r5, r5, r2
 8010b0a:	68a3      	ldr	r3, [r4, #8]
 8010b0c:	6922      	ldr	r2, [r4, #16]
 8010b0e:	bf0c      	ite	eq
 8010b10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010b14:	2500      	movne	r5, #0
 8010b16:	4293      	cmp	r3, r2
 8010b18:	bfc4      	itt	gt
 8010b1a:	1a9b      	subgt	r3, r3, r2
 8010b1c:	18ed      	addgt	r5, r5, r3
 8010b1e:	2600      	movs	r6, #0
 8010b20:	341a      	adds	r4, #26
 8010b22:	42b5      	cmp	r5, r6
 8010b24:	d11a      	bne.n	8010b5c <_printf_common+0xc8>
 8010b26:	2000      	movs	r0, #0
 8010b28:	e008      	b.n	8010b3c <_printf_common+0xa8>
 8010b2a:	2301      	movs	r3, #1
 8010b2c:	4652      	mov	r2, sl
 8010b2e:	4649      	mov	r1, r9
 8010b30:	4638      	mov	r0, r7
 8010b32:	47c0      	blx	r8
 8010b34:	3001      	adds	r0, #1
 8010b36:	d103      	bne.n	8010b40 <_printf_common+0xac>
 8010b38:	f04f 30ff 	mov.w	r0, #4294967295
 8010b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b40:	3501      	adds	r5, #1
 8010b42:	e7c6      	b.n	8010ad2 <_printf_common+0x3e>
 8010b44:	18e1      	adds	r1, r4, r3
 8010b46:	1c5a      	adds	r2, r3, #1
 8010b48:	2030      	movs	r0, #48	; 0x30
 8010b4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010b4e:	4422      	add	r2, r4
 8010b50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010b54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010b58:	3302      	adds	r3, #2
 8010b5a:	e7c7      	b.n	8010aec <_printf_common+0x58>
 8010b5c:	2301      	movs	r3, #1
 8010b5e:	4622      	mov	r2, r4
 8010b60:	4649      	mov	r1, r9
 8010b62:	4638      	mov	r0, r7
 8010b64:	47c0      	blx	r8
 8010b66:	3001      	adds	r0, #1
 8010b68:	d0e6      	beq.n	8010b38 <_printf_common+0xa4>
 8010b6a:	3601      	adds	r6, #1
 8010b6c:	e7d9      	b.n	8010b22 <_printf_common+0x8e>
	...

08010b70 <_printf_i>:
 8010b70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010b74:	7e0f      	ldrb	r7, [r1, #24]
 8010b76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010b78:	2f78      	cmp	r7, #120	; 0x78
 8010b7a:	4691      	mov	r9, r2
 8010b7c:	4680      	mov	r8, r0
 8010b7e:	460c      	mov	r4, r1
 8010b80:	469a      	mov	sl, r3
 8010b82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010b86:	d807      	bhi.n	8010b98 <_printf_i+0x28>
 8010b88:	2f62      	cmp	r7, #98	; 0x62
 8010b8a:	d80a      	bhi.n	8010ba2 <_printf_i+0x32>
 8010b8c:	2f00      	cmp	r7, #0
 8010b8e:	f000 80d8 	beq.w	8010d42 <_printf_i+0x1d2>
 8010b92:	2f58      	cmp	r7, #88	; 0x58
 8010b94:	f000 80a3 	beq.w	8010cde <_printf_i+0x16e>
 8010b98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010b9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010ba0:	e03a      	b.n	8010c18 <_printf_i+0xa8>
 8010ba2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010ba6:	2b15      	cmp	r3, #21
 8010ba8:	d8f6      	bhi.n	8010b98 <_printf_i+0x28>
 8010baa:	a101      	add	r1, pc, #4	; (adr r1, 8010bb0 <_printf_i+0x40>)
 8010bac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010bb0:	08010c09 	.word	0x08010c09
 8010bb4:	08010c1d 	.word	0x08010c1d
 8010bb8:	08010b99 	.word	0x08010b99
 8010bbc:	08010b99 	.word	0x08010b99
 8010bc0:	08010b99 	.word	0x08010b99
 8010bc4:	08010b99 	.word	0x08010b99
 8010bc8:	08010c1d 	.word	0x08010c1d
 8010bcc:	08010b99 	.word	0x08010b99
 8010bd0:	08010b99 	.word	0x08010b99
 8010bd4:	08010b99 	.word	0x08010b99
 8010bd8:	08010b99 	.word	0x08010b99
 8010bdc:	08010d29 	.word	0x08010d29
 8010be0:	08010c4d 	.word	0x08010c4d
 8010be4:	08010d0b 	.word	0x08010d0b
 8010be8:	08010b99 	.word	0x08010b99
 8010bec:	08010b99 	.word	0x08010b99
 8010bf0:	08010d4b 	.word	0x08010d4b
 8010bf4:	08010b99 	.word	0x08010b99
 8010bf8:	08010c4d 	.word	0x08010c4d
 8010bfc:	08010b99 	.word	0x08010b99
 8010c00:	08010b99 	.word	0x08010b99
 8010c04:	08010d13 	.word	0x08010d13
 8010c08:	682b      	ldr	r3, [r5, #0]
 8010c0a:	1d1a      	adds	r2, r3, #4
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	602a      	str	r2, [r5, #0]
 8010c10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010c14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010c18:	2301      	movs	r3, #1
 8010c1a:	e0a3      	b.n	8010d64 <_printf_i+0x1f4>
 8010c1c:	6820      	ldr	r0, [r4, #0]
 8010c1e:	6829      	ldr	r1, [r5, #0]
 8010c20:	0606      	lsls	r6, r0, #24
 8010c22:	f101 0304 	add.w	r3, r1, #4
 8010c26:	d50a      	bpl.n	8010c3e <_printf_i+0xce>
 8010c28:	680e      	ldr	r6, [r1, #0]
 8010c2a:	602b      	str	r3, [r5, #0]
 8010c2c:	2e00      	cmp	r6, #0
 8010c2e:	da03      	bge.n	8010c38 <_printf_i+0xc8>
 8010c30:	232d      	movs	r3, #45	; 0x2d
 8010c32:	4276      	negs	r6, r6
 8010c34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010c38:	485e      	ldr	r0, [pc, #376]	; (8010db4 <_printf_i+0x244>)
 8010c3a:	230a      	movs	r3, #10
 8010c3c:	e019      	b.n	8010c72 <_printf_i+0x102>
 8010c3e:	680e      	ldr	r6, [r1, #0]
 8010c40:	602b      	str	r3, [r5, #0]
 8010c42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010c46:	bf18      	it	ne
 8010c48:	b236      	sxthne	r6, r6
 8010c4a:	e7ef      	b.n	8010c2c <_printf_i+0xbc>
 8010c4c:	682b      	ldr	r3, [r5, #0]
 8010c4e:	6820      	ldr	r0, [r4, #0]
 8010c50:	1d19      	adds	r1, r3, #4
 8010c52:	6029      	str	r1, [r5, #0]
 8010c54:	0601      	lsls	r1, r0, #24
 8010c56:	d501      	bpl.n	8010c5c <_printf_i+0xec>
 8010c58:	681e      	ldr	r6, [r3, #0]
 8010c5a:	e002      	b.n	8010c62 <_printf_i+0xf2>
 8010c5c:	0646      	lsls	r6, r0, #25
 8010c5e:	d5fb      	bpl.n	8010c58 <_printf_i+0xe8>
 8010c60:	881e      	ldrh	r6, [r3, #0]
 8010c62:	4854      	ldr	r0, [pc, #336]	; (8010db4 <_printf_i+0x244>)
 8010c64:	2f6f      	cmp	r7, #111	; 0x6f
 8010c66:	bf0c      	ite	eq
 8010c68:	2308      	moveq	r3, #8
 8010c6a:	230a      	movne	r3, #10
 8010c6c:	2100      	movs	r1, #0
 8010c6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010c72:	6865      	ldr	r5, [r4, #4]
 8010c74:	60a5      	str	r5, [r4, #8]
 8010c76:	2d00      	cmp	r5, #0
 8010c78:	bfa2      	ittt	ge
 8010c7a:	6821      	ldrge	r1, [r4, #0]
 8010c7c:	f021 0104 	bicge.w	r1, r1, #4
 8010c80:	6021      	strge	r1, [r4, #0]
 8010c82:	b90e      	cbnz	r6, 8010c88 <_printf_i+0x118>
 8010c84:	2d00      	cmp	r5, #0
 8010c86:	d04d      	beq.n	8010d24 <_printf_i+0x1b4>
 8010c88:	4615      	mov	r5, r2
 8010c8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8010c8e:	fb03 6711 	mls	r7, r3, r1, r6
 8010c92:	5dc7      	ldrb	r7, [r0, r7]
 8010c94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010c98:	4637      	mov	r7, r6
 8010c9a:	42bb      	cmp	r3, r7
 8010c9c:	460e      	mov	r6, r1
 8010c9e:	d9f4      	bls.n	8010c8a <_printf_i+0x11a>
 8010ca0:	2b08      	cmp	r3, #8
 8010ca2:	d10b      	bne.n	8010cbc <_printf_i+0x14c>
 8010ca4:	6823      	ldr	r3, [r4, #0]
 8010ca6:	07de      	lsls	r6, r3, #31
 8010ca8:	d508      	bpl.n	8010cbc <_printf_i+0x14c>
 8010caa:	6923      	ldr	r3, [r4, #16]
 8010cac:	6861      	ldr	r1, [r4, #4]
 8010cae:	4299      	cmp	r1, r3
 8010cb0:	bfde      	ittt	le
 8010cb2:	2330      	movle	r3, #48	; 0x30
 8010cb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010cb8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010cbc:	1b52      	subs	r2, r2, r5
 8010cbe:	6122      	str	r2, [r4, #16]
 8010cc0:	f8cd a000 	str.w	sl, [sp]
 8010cc4:	464b      	mov	r3, r9
 8010cc6:	aa03      	add	r2, sp, #12
 8010cc8:	4621      	mov	r1, r4
 8010cca:	4640      	mov	r0, r8
 8010ccc:	f7ff fee2 	bl	8010a94 <_printf_common>
 8010cd0:	3001      	adds	r0, #1
 8010cd2:	d14c      	bne.n	8010d6e <_printf_i+0x1fe>
 8010cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8010cd8:	b004      	add	sp, #16
 8010cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cde:	4835      	ldr	r0, [pc, #212]	; (8010db4 <_printf_i+0x244>)
 8010ce0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010ce4:	6829      	ldr	r1, [r5, #0]
 8010ce6:	6823      	ldr	r3, [r4, #0]
 8010ce8:	f851 6b04 	ldr.w	r6, [r1], #4
 8010cec:	6029      	str	r1, [r5, #0]
 8010cee:	061d      	lsls	r5, r3, #24
 8010cf0:	d514      	bpl.n	8010d1c <_printf_i+0x1ac>
 8010cf2:	07df      	lsls	r7, r3, #31
 8010cf4:	bf44      	itt	mi
 8010cf6:	f043 0320 	orrmi.w	r3, r3, #32
 8010cfa:	6023      	strmi	r3, [r4, #0]
 8010cfc:	b91e      	cbnz	r6, 8010d06 <_printf_i+0x196>
 8010cfe:	6823      	ldr	r3, [r4, #0]
 8010d00:	f023 0320 	bic.w	r3, r3, #32
 8010d04:	6023      	str	r3, [r4, #0]
 8010d06:	2310      	movs	r3, #16
 8010d08:	e7b0      	b.n	8010c6c <_printf_i+0xfc>
 8010d0a:	6823      	ldr	r3, [r4, #0]
 8010d0c:	f043 0320 	orr.w	r3, r3, #32
 8010d10:	6023      	str	r3, [r4, #0]
 8010d12:	2378      	movs	r3, #120	; 0x78
 8010d14:	4828      	ldr	r0, [pc, #160]	; (8010db8 <_printf_i+0x248>)
 8010d16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010d1a:	e7e3      	b.n	8010ce4 <_printf_i+0x174>
 8010d1c:	0659      	lsls	r1, r3, #25
 8010d1e:	bf48      	it	mi
 8010d20:	b2b6      	uxthmi	r6, r6
 8010d22:	e7e6      	b.n	8010cf2 <_printf_i+0x182>
 8010d24:	4615      	mov	r5, r2
 8010d26:	e7bb      	b.n	8010ca0 <_printf_i+0x130>
 8010d28:	682b      	ldr	r3, [r5, #0]
 8010d2a:	6826      	ldr	r6, [r4, #0]
 8010d2c:	6961      	ldr	r1, [r4, #20]
 8010d2e:	1d18      	adds	r0, r3, #4
 8010d30:	6028      	str	r0, [r5, #0]
 8010d32:	0635      	lsls	r5, r6, #24
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	d501      	bpl.n	8010d3c <_printf_i+0x1cc>
 8010d38:	6019      	str	r1, [r3, #0]
 8010d3a:	e002      	b.n	8010d42 <_printf_i+0x1d2>
 8010d3c:	0670      	lsls	r0, r6, #25
 8010d3e:	d5fb      	bpl.n	8010d38 <_printf_i+0x1c8>
 8010d40:	8019      	strh	r1, [r3, #0]
 8010d42:	2300      	movs	r3, #0
 8010d44:	6123      	str	r3, [r4, #16]
 8010d46:	4615      	mov	r5, r2
 8010d48:	e7ba      	b.n	8010cc0 <_printf_i+0x150>
 8010d4a:	682b      	ldr	r3, [r5, #0]
 8010d4c:	1d1a      	adds	r2, r3, #4
 8010d4e:	602a      	str	r2, [r5, #0]
 8010d50:	681d      	ldr	r5, [r3, #0]
 8010d52:	6862      	ldr	r2, [r4, #4]
 8010d54:	2100      	movs	r1, #0
 8010d56:	4628      	mov	r0, r5
 8010d58:	f7ef fa42 	bl	80001e0 <memchr>
 8010d5c:	b108      	cbz	r0, 8010d62 <_printf_i+0x1f2>
 8010d5e:	1b40      	subs	r0, r0, r5
 8010d60:	6060      	str	r0, [r4, #4]
 8010d62:	6863      	ldr	r3, [r4, #4]
 8010d64:	6123      	str	r3, [r4, #16]
 8010d66:	2300      	movs	r3, #0
 8010d68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010d6c:	e7a8      	b.n	8010cc0 <_printf_i+0x150>
 8010d6e:	6923      	ldr	r3, [r4, #16]
 8010d70:	462a      	mov	r2, r5
 8010d72:	4649      	mov	r1, r9
 8010d74:	4640      	mov	r0, r8
 8010d76:	47d0      	blx	sl
 8010d78:	3001      	adds	r0, #1
 8010d7a:	d0ab      	beq.n	8010cd4 <_printf_i+0x164>
 8010d7c:	6823      	ldr	r3, [r4, #0]
 8010d7e:	079b      	lsls	r3, r3, #30
 8010d80:	d413      	bmi.n	8010daa <_printf_i+0x23a>
 8010d82:	68e0      	ldr	r0, [r4, #12]
 8010d84:	9b03      	ldr	r3, [sp, #12]
 8010d86:	4298      	cmp	r0, r3
 8010d88:	bfb8      	it	lt
 8010d8a:	4618      	movlt	r0, r3
 8010d8c:	e7a4      	b.n	8010cd8 <_printf_i+0x168>
 8010d8e:	2301      	movs	r3, #1
 8010d90:	4632      	mov	r2, r6
 8010d92:	4649      	mov	r1, r9
 8010d94:	4640      	mov	r0, r8
 8010d96:	47d0      	blx	sl
 8010d98:	3001      	adds	r0, #1
 8010d9a:	d09b      	beq.n	8010cd4 <_printf_i+0x164>
 8010d9c:	3501      	adds	r5, #1
 8010d9e:	68e3      	ldr	r3, [r4, #12]
 8010da0:	9903      	ldr	r1, [sp, #12]
 8010da2:	1a5b      	subs	r3, r3, r1
 8010da4:	42ab      	cmp	r3, r5
 8010da6:	dcf2      	bgt.n	8010d8e <_printf_i+0x21e>
 8010da8:	e7eb      	b.n	8010d82 <_printf_i+0x212>
 8010daa:	2500      	movs	r5, #0
 8010dac:	f104 0619 	add.w	r6, r4, #25
 8010db0:	e7f5      	b.n	8010d9e <_printf_i+0x22e>
 8010db2:	bf00      	nop
 8010db4:	080140c6 	.word	0x080140c6
 8010db8:	080140d7 	.word	0x080140d7

08010dbc <iprintf>:
 8010dbc:	b40f      	push	{r0, r1, r2, r3}
 8010dbe:	4b0a      	ldr	r3, [pc, #40]	; (8010de8 <iprintf+0x2c>)
 8010dc0:	b513      	push	{r0, r1, r4, lr}
 8010dc2:	681c      	ldr	r4, [r3, #0]
 8010dc4:	b124      	cbz	r4, 8010dd0 <iprintf+0x14>
 8010dc6:	69a3      	ldr	r3, [r4, #24]
 8010dc8:	b913      	cbnz	r3, 8010dd0 <iprintf+0x14>
 8010dca:	4620      	mov	r0, r4
 8010dcc:	f7ff f9cc 	bl	8010168 <__sinit>
 8010dd0:	ab05      	add	r3, sp, #20
 8010dd2:	9a04      	ldr	r2, [sp, #16]
 8010dd4:	68a1      	ldr	r1, [r4, #8]
 8010dd6:	9301      	str	r3, [sp, #4]
 8010dd8:	4620      	mov	r0, r4
 8010dda:	f002 f83d 	bl	8012e58 <_vfiprintf_r>
 8010dde:	b002      	add	sp, #8
 8010de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010de4:	b004      	add	sp, #16
 8010de6:	4770      	bx	lr
 8010de8:	2000006c 	.word	0x2000006c

08010dec <putchar>:
 8010dec:	4b09      	ldr	r3, [pc, #36]	; (8010e14 <putchar+0x28>)
 8010dee:	b513      	push	{r0, r1, r4, lr}
 8010df0:	681c      	ldr	r4, [r3, #0]
 8010df2:	4601      	mov	r1, r0
 8010df4:	b134      	cbz	r4, 8010e04 <putchar+0x18>
 8010df6:	69a3      	ldr	r3, [r4, #24]
 8010df8:	b923      	cbnz	r3, 8010e04 <putchar+0x18>
 8010dfa:	9001      	str	r0, [sp, #4]
 8010dfc:	4620      	mov	r0, r4
 8010dfe:	f7ff f9b3 	bl	8010168 <__sinit>
 8010e02:	9901      	ldr	r1, [sp, #4]
 8010e04:	68a2      	ldr	r2, [r4, #8]
 8010e06:	4620      	mov	r0, r4
 8010e08:	b002      	add	sp, #8
 8010e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e0e:	f002 b953 	b.w	80130b8 <_putc_r>
 8010e12:	bf00      	nop
 8010e14:	2000006c 	.word	0x2000006c

08010e18 <_puts_r>:
 8010e18:	b570      	push	{r4, r5, r6, lr}
 8010e1a:	460e      	mov	r6, r1
 8010e1c:	4605      	mov	r5, r0
 8010e1e:	b118      	cbz	r0, 8010e28 <_puts_r+0x10>
 8010e20:	6983      	ldr	r3, [r0, #24]
 8010e22:	b90b      	cbnz	r3, 8010e28 <_puts_r+0x10>
 8010e24:	f7ff f9a0 	bl	8010168 <__sinit>
 8010e28:	69ab      	ldr	r3, [r5, #24]
 8010e2a:	68ac      	ldr	r4, [r5, #8]
 8010e2c:	b913      	cbnz	r3, 8010e34 <_puts_r+0x1c>
 8010e2e:	4628      	mov	r0, r5
 8010e30:	f7ff f99a 	bl	8010168 <__sinit>
 8010e34:	4b2c      	ldr	r3, [pc, #176]	; (8010ee8 <_puts_r+0xd0>)
 8010e36:	429c      	cmp	r4, r3
 8010e38:	d120      	bne.n	8010e7c <_puts_r+0x64>
 8010e3a:	686c      	ldr	r4, [r5, #4]
 8010e3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010e3e:	07db      	lsls	r3, r3, #31
 8010e40:	d405      	bmi.n	8010e4e <_puts_r+0x36>
 8010e42:	89a3      	ldrh	r3, [r4, #12]
 8010e44:	0598      	lsls	r0, r3, #22
 8010e46:	d402      	bmi.n	8010e4e <_puts_r+0x36>
 8010e48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010e4a:	f7f5 f831 	bl	8005eb0 <__retarget_lock_acquire_recursive>
 8010e4e:	89a3      	ldrh	r3, [r4, #12]
 8010e50:	0719      	lsls	r1, r3, #28
 8010e52:	d51d      	bpl.n	8010e90 <_puts_r+0x78>
 8010e54:	6923      	ldr	r3, [r4, #16]
 8010e56:	b1db      	cbz	r3, 8010e90 <_puts_r+0x78>
 8010e58:	3e01      	subs	r6, #1
 8010e5a:	68a3      	ldr	r3, [r4, #8]
 8010e5c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010e60:	3b01      	subs	r3, #1
 8010e62:	60a3      	str	r3, [r4, #8]
 8010e64:	bb39      	cbnz	r1, 8010eb6 <_puts_r+0x9e>
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	da38      	bge.n	8010edc <_puts_r+0xc4>
 8010e6a:	4622      	mov	r2, r4
 8010e6c:	210a      	movs	r1, #10
 8010e6e:	4628      	mov	r0, r5
 8010e70:	f000 fa2a 	bl	80112c8 <__swbuf_r>
 8010e74:	3001      	adds	r0, #1
 8010e76:	d011      	beq.n	8010e9c <_puts_r+0x84>
 8010e78:	250a      	movs	r5, #10
 8010e7a:	e011      	b.n	8010ea0 <_puts_r+0x88>
 8010e7c:	4b1b      	ldr	r3, [pc, #108]	; (8010eec <_puts_r+0xd4>)
 8010e7e:	429c      	cmp	r4, r3
 8010e80:	d101      	bne.n	8010e86 <_puts_r+0x6e>
 8010e82:	68ac      	ldr	r4, [r5, #8]
 8010e84:	e7da      	b.n	8010e3c <_puts_r+0x24>
 8010e86:	4b1a      	ldr	r3, [pc, #104]	; (8010ef0 <_puts_r+0xd8>)
 8010e88:	429c      	cmp	r4, r3
 8010e8a:	bf08      	it	eq
 8010e8c:	68ec      	ldreq	r4, [r5, #12]
 8010e8e:	e7d5      	b.n	8010e3c <_puts_r+0x24>
 8010e90:	4621      	mov	r1, r4
 8010e92:	4628      	mov	r0, r5
 8010e94:	f000 fa7c 	bl	8011390 <__swsetup_r>
 8010e98:	2800      	cmp	r0, #0
 8010e9a:	d0dd      	beq.n	8010e58 <_puts_r+0x40>
 8010e9c:	f04f 35ff 	mov.w	r5, #4294967295
 8010ea0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010ea2:	07da      	lsls	r2, r3, #31
 8010ea4:	d405      	bmi.n	8010eb2 <_puts_r+0x9a>
 8010ea6:	89a3      	ldrh	r3, [r4, #12]
 8010ea8:	059b      	lsls	r3, r3, #22
 8010eaa:	d402      	bmi.n	8010eb2 <_puts_r+0x9a>
 8010eac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010eae:	f7f5 f813 	bl	8005ed8 <__retarget_lock_release_recursive>
 8010eb2:	4628      	mov	r0, r5
 8010eb4:	bd70      	pop	{r4, r5, r6, pc}
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	da04      	bge.n	8010ec4 <_puts_r+0xac>
 8010eba:	69a2      	ldr	r2, [r4, #24]
 8010ebc:	429a      	cmp	r2, r3
 8010ebe:	dc06      	bgt.n	8010ece <_puts_r+0xb6>
 8010ec0:	290a      	cmp	r1, #10
 8010ec2:	d004      	beq.n	8010ece <_puts_r+0xb6>
 8010ec4:	6823      	ldr	r3, [r4, #0]
 8010ec6:	1c5a      	adds	r2, r3, #1
 8010ec8:	6022      	str	r2, [r4, #0]
 8010eca:	7019      	strb	r1, [r3, #0]
 8010ecc:	e7c5      	b.n	8010e5a <_puts_r+0x42>
 8010ece:	4622      	mov	r2, r4
 8010ed0:	4628      	mov	r0, r5
 8010ed2:	f000 f9f9 	bl	80112c8 <__swbuf_r>
 8010ed6:	3001      	adds	r0, #1
 8010ed8:	d1bf      	bne.n	8010e5a <_puts_r+0x42>
 8010eda:	e7df      	b.n	8010e9c <_puts_r+0x84>
 8010edc:	6823      	ldr	r3, [r4, #0]
 8010ede:	250a      	movs	r5, #10
 8010ee0:	1c5a      	adds	r2, r3, #1
 8010ee2:	6022      	str	r2, [r4, #0]
 8010ee4:	701d      	strb	r5, [r3, #0]
 8010ee6:	e7db      	b.n	8010ea0 <_puts_r+0x88>
 8010ee8:	08014070 	.word	0x08014070
 8010eec:	08014090 	.word	0x08014090
 8010ef0:	08014050 	.word	0x08014050

08010ef4 <puts>:
 8010ef4:	4b02      	ldr	r3, [pc, #8]	; (8010f00 <puts+0xc>)
 8010ef6:	4601      	mov	r1, r0
 8010ef8:	6818      	ldr	r0, [r3, #0]
 8010efa:	f7ff bf8d 	b.w	8010e18 <_puts_r>
 8010efe:	bf00      	nop
 8010f00:	2000006c 	.word	0x2000006c

08010f04 <cleanup_glue>:
 8010f04:	b538      	push	{r3, r4, r5, lr}
 8010f06:	460c      	mov	r4, r1
 8010f08:	6809      	ldr	r1, [r1, #0]
 8010f0a:	4605      	mov	r5, r0
 8010f0c:	b109      	cbz	r1, 8010f12 <cleanup_glue+0xe>
 8010f0e:	f7ff fff9 	bl	8010f04 <cleanup_glue>
 8010f12:	4621      	mov	r1, r4
 8010f14:	4628      	mov	r0, r5
 8010f16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f1a:	f7ff ba05 	b.w	8010328 <_free_r>
	...

08010f20 <_reclaim_reent>:
 8010f20:	4b2c      	ldr	r3, [pc, #176]	; (8010fd4 <_reclaim_reent+0xb4>)
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	4283      	cmp	r3, r0
 8010f26:	b570      	push	{r4, r5, r6, lr}
 8010f28:	4604      	mov	r4, r0
 8010f2a:	d051      	beq.n	8010fd0 <_reclaim_reent+0xb0>
 8010f2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010f2e:	b143      	cbz	r3, 8010f42 <_reclaim_reent+0x22>
 8010f30:	68db      	ldr	r3, [r3, #12]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d14a      	bne.n	8010fcc <_reclaim_reent+0xac>
 8010f36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010f38:	6819      	ldr	r1, [r3, #0]
 8010f3a:	b111      	cbz	r1, 8010f42 <_reclaim_reent+0x22>
 8010f3c:	4620      	mov	r0, r4
 8010f3e:	f7ff f9f3 	bl	8010328 <_free_r>
 8010f42:	6961      	ldr	r1, [r4, #20]
 8010f44:	b111      	cbz	r1, 8010f4c <_reclaim_reent+0x2c>
 8010f46:	4620      	mov	r0, r4
 8010f48:	f7ff f9ee 	bl	8010328 <_free_r>
 8010f4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010f4e:	b111      	cbz	r1, 8010f56 <_reclaim_reent+0x36>
 8010f50:	4620      	mov	r0, r4
 8010f52:	f7ff f9e9 	bl	8010328 <_free_r>
 8010f56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010f58:	b111      	cbz	r1, 8010f60 <_reclaim_reent+0x40>
 8010f5a:	4620      	mov	r0, r4
 8010f5c:	f7ff f9e4 	bl	8010328 <_free_r>
 8010f60:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8010f62:	b111      	cbz	r1, 8010f6a <_reclaim_reent+0x4a>
 8010f64:	4620      	mov	r0, r4
 8010f66:	f7ff f9df 	bl	8010328 <_free_r>
 8010f6a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8010f6c:	b111      	cbz	r1, 8010f74 <_reclaim_reent+0x54>
 8010f6e:	4620      	mov	r0, r4
 8010f70:	f7ff f9da 	bl	8010328 <_free_r>
 8010f74:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8010f76:	b111      	cbz	r1, 8010f7e <_reclaim_reent+0x5e>
 8010f78:	4620      	mov	r0, r4
 8010f7a:	f7ff f9d5 	bl	8010328 <_free_r>
 8010f7e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8010f80:	b111      	cbz	r1, 8010f88 <_reclaim_reent+0x68>
 8010f82:	4620      	mov	r0, r4
 8010f84:	f7ff f9d0 	bl	8010328 <_free_r>
 8010f88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f8a:	b111      	cbz	r1, 8010f92 <_reclaim_reent+0x72>
 8010f8c:	4620      	mov	r0, r4
 8010f8e:	f7ff f9cb 	bl	8010328 <_free_r>
 8010f92:	69a3      	ldr	r3, [r4, #24]
 8010f94:	b1e3      	cbz	r3, 8010fd0 <_reclaim_reent+0xb0>
 8010f96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010f98:	4620      	mov	r0, r4
 8010f9a:	4798      	blx	r3
 8010f9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8010f9e:	b1b9      	cbz	r1, 8010fd0 <_reclaim_reent+0xb0>
 8010fa0:	4620      	mov	r0, r4
 8010fa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010fa6:	f7ff bfad 	b.w	8010f04 <cleanup_glue>
 8010faa:	5949      	ldr	r1, [r1, r5]
 8010fac:	b941      	cbnz	r1, 8010fc0 <_reclaim_reent+0xa0>
 8010fae:	3504      	adds	r5, #4
 8010fb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010fb2:	2d80      	cmp	r5, #128	; 0x80
 8010fb4:	68d9      	ldr	r1, [r3, #12]
 8010fb6:	d1f8      	bne.n	8010faa <_reclaim_reent+0x8a>
 8010fb8:	4620      	mov	r0, r4
 8010fba:	f7ff f9b5 	bl	8010328 <_free_r>
 8010fbe:	e7ba      	b.n	8010f36 <_reclaim_reent+0x16>
 8010fc0:	680e      	ldr	r6, [r1, #0]
 8010fc2:	4620      	mov	r0, r4
 8010fc4:	f7ff f9b0 	bl	8010328 <_free_r>
 8010fc8:	4631      	mov	r1, r6
 8010fca:	e7ef      	b.n	8010fac <_reclaim_reent+0x8c>
 8010fcc:	2500      	movs	r5, #0
 8010fce:	e7ef      	b.n	8010fb0 <_reclaim_reent+0x90>
 8010fd0:	bd70      	pop	{r4, r5, r6, pc}
 8010fd2:	bf00      	nop
 8010fd4:	2000006c 	.word	0x2000006c

08010fd8 <_sbrk_r>:
 8010fd8:	b538      	push	{r3, r4, r5, lr}
 8010fda:	4d06      	ldr	r5, [pc, #24]	; (8010ff4 <_sbrk_r+0x1c>)
 8010fdc:	2300      	movs	r3, #0
 8010fde:	4604      	mov	r4, r0
 8010fe0:	4608      	mov	r0, r1
 8010fe2:	602b      	str	r3, [r5, #0]
 8010fe4:	f7f4 fe52 	bl	8005c8c <_sbrk>
 8010fe8:	1c43      	adds	r3, r0, #1
 8010fea:	d102      	bne.n	8010ff2 <_sbrk_r+0x1a>
 8010fec:	682b      	ldr	r3, [r5, #0]
 8010fee:	b103      	cbz	r3, 8010ff2 <_sbrk_r+0x1a>
 8010ff0:	6023      	str	r3, [r4, #0]
 8010ff2:	bd38      	pop	{r3, r4, r5, pc}
 8010ff4:	20005cb4 	.word	0x20005cb4

08010ff8 <_raise_r>:
 8010ff8:	291f      	cmp	r1, #31
 8010ffa:	b538      	push	{r3, r4, r5, lr}
 8010ffc:	4604      	mov	r4, r0
 8010ffe:	460d      	mov	r5, r1
 8011000:	d904      	bls.n	801100c <_raise_r+0x14>
 8011002:	2316      	movs	r3, #22
 8011004:	6003      	str	r3, [r0, #0]
 8011006:	f04f 30ff 	mov.w	r0, #4294967295
 801100a:	bd38      	pop	{r3, r4, r5, pc}
 801100c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801100e:	b112      	cbz	r2, 8011016 <_raise_r+0x1e>
 8011010:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011014:	b94b      	cbnz	r3, 801102a <_raise_r+0x32>
 8011016:	4620      	mov	r0, r4
 8011018:	f000 f830 	bl	801107c <_getpid_r>
 801101c:	462a      	mov	r2, r5
 801101e:	4601      	mov	r1, r0
 8011020:	4620      	mov	r0, r4
 8011022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011026:	f000 b817 	b.w	8011058 <_kill_r>
 801102a:	2b01      	cmp	r3, #1
 801102c:	d00a      	beq.n	8011044 <_raise_r+0x4c>
 801102e:	1c59      	adds	r1, r3, #1
 8011030:	d103      	bne.n	801103a <_raise_r+0x42>
 8011032:	2316      	movs	r3, #22
 8011034:	6003      	str	r3, [r0, #0]
 8011036:	2001      	movs	r0, #1
 8011038:	e7e7      	b.n	801100a <_raise_r+0x12>
 801103a:	2400      	movs	r4, #0
 801103c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011040:	4628      	mov	r0, r5
 8011042:	4798      	blx	r3
 8011044:	2000      	movs	r0, #0
 8011046:	e7e0      	b.n	801100a <_raise_r+0x12>

08011048 <raise>:
 8011048:	4b02      	ldr	r3, [pc, #8]	; (8011054 <raise+0xc>)
 801104a:	4601      	mov	r1, r0
 801104c:	6818      	ldr	r0, [r3, #0]
 801104e:	f7ff bfd3 	b.w	8010ff8 <_raise_r>
 8011052:	bf00      	nop
 8011054:	2000006c 	.word	0x2000006c

08011058 <_kill_r>:
 8011058:	b538      	push	{r3, r4, r5, lr}
 801105a:	4d07      	ldr	r5, [pc, #28]	; (8011078 <_kill_r+0x20>)
 801105c:	2300      	movs	r3, #0
 801105e:	4604      	mov	r4, r0
 8011060:	4608      	mov	r0, r1
 8011062:	4611      	mov	r1, r2
 8011064:	602b      	str	r3, [r5, #0]
 8011066:	f7f4 fd89 	bl	8005b7c <_kill>
 801106a:	1c43      	adds	r3, r0, #1
 801106c:	d102      	bne.n	8011074 <_kill_r+0x1c>
 801106e:	682b      	ldr	r3, [r5, #0]
 8011070:	b103      	cbz	r3, 8011074 <_kill_r+0x1c>
 8011072:	6023      	str	r3, [r4, #0]
 8011074:	bd38      	pop	{r3, r4, r5, pc}
 8011076:	bf00      	nop
 8011078:	20005cb4 	.word	0x20005cb4

0801107c <_getpid_r>:
 801107c:	f7f4 bd76 	b.w	8005b6c <_getpid>

08011080 <sniprintf>:
 8011080:	b40c      	push	{r2, r3}
 8011082:	b530      	push	{r4, r5, lr}
 8011084:	4b17      	ldr	r3, [pc, #92]	; (80110e4 <sniprintf+0x64>)
 8011086:	1e0c      	subs	r4, r1, #0
 8011088:	681d      	ldr	r5, [r3, #0]
 801108a:	b09d      	sub	sp, #116	; 0x74
 801108c:	da08      	bge.n	80110a0 <sniprintf+0x20>
 801108e:	238b      	movs	r3, #139	; 0x8b
 8011090:	602b      	str	r3, [r5, #0]
 8011092:	f04f 30ff 	mov.w	r0, #4294967295
 8011096:	b01d      	add	sp, #116	; 0x74
 8011098:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801109c:	b002      	add	sp, #8
 801109e:	4770      	bx	lr
 80110a0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80110a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80110a8:	bf14      	ite	ne
 80110aa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80110ae:	4623      	moveq	r3, r4
 80110b0:	9304      	str	r3, [sp, #16]
 80110b2:	9307      	str	r3, [sp, #28]
 80110b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80110b8:	9002      	str	r0, [sp, #8]
 80110ba:	9006      	str	r0, [sp, #24]
 80110bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80110c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80110c2:	ab21      	add	r3, sp, #132	; 0x84
 80110c4:	a902      	add	r1, sp, #8
 80110c6:	4628      	mov	r0, r5
 80110c8:	9301      	str	r3, [sp, #4]
 80110ca:	f001 fd9b 	bl	8012c04 <_svfiprintf_r>
 80110ce:	1c43      	adds	r3, r0, #1
 80110d0:	bfbc      	itt	lt
 80110d2:	238b      	movlt	r3, #139	; 0x8b
 80110d4:	602b      	strlt	r3, [r5, #0]
 80110d6:	2c00      	cmp	r4, #0
 80110d8:	d0dd      	beq.n	8011096 <sniprintf+0x16>
 80110da:	9b02      	ldr	r3, [sp, #8]
 80110dc:	2200      	movs	r2, #0
 80110de:	701a      	strb	r2, [r3, #0]
 80110e0:	e7d9      	b.n	8011096 <sniprintf+0x16>
 80110e2:	bf00      	nop
 80110e4:	2000006c 	.word	0x2000006c

080110e8 <siprintf>:
 80110e8:	b40e      	push	{r1, r2, r3}
 80110ea:	b500      	push	{lr}
 80110ec:	b09c      	sub	sp, #112	; 0x70
 80110ee:	ab1d      	add	r3, sp, #116	; 0x74
 80110f0:	9002      	str	r0, [sp, #8]
 80110f2:	9006      	str	r0, [sp, #24]
 80110f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80110f8:	4809      	ldr	r0, [pc, #36]	; (8011120 <siprintf+0x38>)
 80110fa:	9107      	str	r1, [sp, #28]
 80110fc:	9104      	str	r1, [sp, #16]
 80110fe:	4909      	ldr	r1, [pc, #36]	; (8011124 <siprintf+0x3c>)
 8011100:	f853 2b04 	ldr.w	r2, [r3], #4
 8011104:	9105      	str	r1, [sp, #20]
 8011106:	6800      	ldr	r0, [r0, #0]
 8011108:	9301      	str	r3, [sp, #4]
 801110a:	a902      	add	r1, sp, #8
 801110c:	f001 fd7a 	bl	8012c04 <_svfiprintf_r>
 8011110:	9b02      	ldr	r3, [sp, #8]
 8011112:	2200      	movs	r2, #0
 8011114:	701a      	strb	r2, [r3, #0]
 8011116:	b01c      	add	sp, #112	; 0x70
 8011118:	f85d eb04 	ldr.w	lr, [sp], #4
 801111c:	b003      	add	sp, #12
 801111e:	4770      	bx	lr
 8011120:	2000006c 	.word	0x2000006c
 8011124:	ffff0208 	.word	0xffff0208

08011128 <__sread>:
 8011128:	b510      	push	{r4, lr}
 801112a:	460c      	mov	r4, r1
 801112c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011130:	f002 f80a 	bl	8013148 <_read_r>
 8011134:	2800      	cmp	r0, #0
 8011136:	bfab      	itete	ge
 8011138:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801113a:	89a3      	ldrhlt	r3, [r4, #12]
 801113c:	181b      	addge	r3, r3, r0
 801113e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011142:	bfac      	ite	ge
 8011144:	6563      	strge	r3, [r4, #84]	; 0x54
 8011146:	81a3      	strhlt	r3, [r4, #12]
 8011148:	bd10      	pop	{r4, pc}

0801114a <__swrite>:
 801114a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801114e:	461f      	mov	r7, r3
 8011150:	898b      	ldrh	r3, [r1, #12]
 8011152:	05db      	lsls	r3, r3, #23
 8011154:	4605      	mov	r5, r0
 8011156:	460c      	mov	r4, r1
 8011158:	4616      	mov	r6, r2
 801115a:	d505      	bpl.n	8011168 <__swrite+0x1e>
 801115c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011160:	2302      	movs	r3, #2
 8011162:	2200      	movs	r2, #0
 8011164:	f001 f8d4 	bl	8012310 <_lseek_r>
 8011168:	89a3      	ldrh	r3, [r4, #12]
 801116a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801116e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011172:	81a3      	strh	r3, [r4, #12]
 8011174:	4632      	mov	r2, r6
 8011176:	463b      	mov	r3, r7
 8011178:	4628      	mov	r0, r5
 801117a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801117e:	f000 b8f5 	b.w	801136c <_write_r>

08011182 <__sseek>:
 8011182:	b510      	push	{r4, lr}
 8011184:	460c      	mov	r4, r1
 8011186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801118a:	f001 f8c1 	bl	8012310 <_lseek_r>
 801118e:	1c43      	adds	r3, r0, #1
 8011190:	89a3      	ldrh	r3, [r4, #12]
 8011192:	bf15      	itete	ne
 8011194:	6560      	strne	r0, [r4, #84]	; 0x54
 8011196:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801119a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801119e:	81a3      	strheq	r3, [r4, #12]
 80111a0:	bf18      	it	ne
 80111a2:	81a3      	strhne	r3, [r4, #12]
 80111a4:	bd10      	pop	{r4, pc}

080111a6 <__sclose>:
 80111a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111aa:	f000 b95f 	b.w	801146c <_close_r>
	...

080111b0 <_strtol_l.constprop.0>:
 80111b0:	2b01      	cmp	r3, #1
 80111b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111b6:	d001      	beq.n	80111bc <_strtol_l.constprop.0+0xc>
 80111b8:	2b24      	cmp	r3, #36	; 0x24
 80111ba:	d906      	bls.n	80111ca <_strtol_l.constprop.0+0x1a>
 80111bc:	f7fe ff76 	bl	80100ac <__errno>
 80111c0:	2316      	movs	r3, #22
 80111c2:	6003      	str	r3, [r0, #0]
 80111c4:	2000      	movs	r0, #0
 80111c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111ca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80112b0 <_strtol_l.constprop.0+0x100>
 80111ce:	460d      	mov	r5, r1
 80111d0:	462e      	mov	r6, r5
 80111d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80111d6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80111da:	f017 0708 	ands.w	r7, r7, #8
 80111de:	d1f7      	bne.n	80111d0 <_strtol_l.constprop.0+0x20>
 80111e0:	2c2d      	cmp	r4, #45	; 0x2d
 80111e2:	d132      	bne.n	801124a <_strtol_l.constprop.0+0x9a>
 80111e4:	782c      	ldrb	r4, [r5, #0]
 80111e6:	2701      	movs	r7, #1
 80111e8:	1cb5      	adds	r5, r6, #2
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d05b      	beq.n	80112a6 <_strtol_l.constprop.0+0xf6>
 80111ee:	2b10      	cmp	r3, #16
 80111f0:	d109      	bne.n	8011206 <_strtol_l.constprop.0+0x56>
 80111f2:	2c30      	cmp	r4, #48	; 0x30
 80111f4:	d107      	bne.n	8011206 <_strtol_l.constprop.0+0x56>
 80111f6:	782c      	ldrb	r4, [r5, #0]
 80111f8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80111fc:	2c58      	cmp	r4, #88	; 0x58
 80111fe:	d14d      	bne.n	801129c <_strtol_l.constprop.0+0xec>
 8011200:	786c      	ldrb	r4, [r5, #1]
 8011202:	2310      	movs	r3, #16
 8011204:	3502      	adds	r5, #2
 8011206:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801120a:	f108 38ff 	add.w	r8, r8, #4294967295
 801120e:	f04f 0c00 	mov.w	ip, #0
 8011212:	fbb8 f9f3 	udiv	r9, r8, r3
 8011216:	4666      	mov	r6, ip
 8011218:	fb03 8a19 	mls	sl, r3, r9, r8
 801121c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8011220:	f1be 0f09 	cmp.w	lr, #9
 8011224:	d816      	bhi.n	8011254 <_strtol_l.constprop.0+0xa4>
 8011226:	4674      	mov	r4, lr
 8011228:	42a3      	cmp	r3, r4
 801122a:	dd24      	ble.n	8011276 <_strtol_l.constprop.0+0xc6>
 801122c:	f1bc 0f00 	cmp.w	ip, #0
 8011230:	db1e      	blt.n	8011270 <_strtol_l.constprop.0+0xc0>
 8011232:	45b1      	cmp	r9, r6
 8011234:	d31c      	bcc.n	8011270 <_strtol_l.constprop.0+0xc0>
 8011236:	d101      	bne.n	801123c <_strtol_l.constprop.0+0x8c>
 8011238:	45a2      	cmp	sl, r4
 801123a:	db19      	blt.n	8011270 <_strtol_l.constprop.0+0xc0>
 801123c:	fb06 4603 	mla	r6, r6, r3, r4
 8011240:	f04f 0c01 	mov.w	ip, #1
 8011244:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011248:	e7e8      	b.n	801121c <_strtol_l.constprop.0+0x6c>
 801124a:	2c2b      	cmp	r4, #43	; 0x2b
 801124c:	bf04      	itt	eq
 801124e:	782c      	ldrbeq	r4, [r5, #0]
 8011250:	1cb5      	addeq	r5, r6, #2
 8011252:	e7ca      	b.n	80111ea <_strtol_l.constprop.0+0x3a>
 8011254:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8011258:	f1be 0f19 	cmp.w	lr, #25
 801125c:	d801      	bhi.n	8011262 <_strtol_l.constprop.0+0xb2>
 801125e:	3c37      	subs	r4, #55	; 0x37
 8011260:	e7e2      	b.n	8011228 <_strtol_l.constprop.0+0x78>
 8011262:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8011266:	f1be 0f19 	cmp.w	lr, #25
 801126a:	d804      	bhi.n	8011276 <_strtol_l.constprop.0+0xc6>
 801126c:	3c57      	subs	r4, #87	; 0x57
 801126e:	e7db      	b.n	8011228 <_strtol_l.constprop.0+0x78>
 8011270:	f04f 3cff 	mov.w	ip, #4294967295
 8011274:	e7e6      	b.n	8011244 <_strtol_l.constprop.0+0x94>
 8011276:	f1bc 0f00 	cmp.w	ip, #0
 801127a:	da05      	bge.n	8011288 <_strtol_l.constprop.0+0xd8>
 801127c:	2322      	movs	r3, #34	; 0x22
 801127e:	6003      	str	r3, [r0, #0]
 8011280:	4646      	mov	r6, r8
 8011282:	b942      	cbnz	r2, 8011296 <_strtol_l.constprop.0+0xe6>
 8011284:	4630      	mov	r0, r6
 8011286:	e79e      	b.n	80111c6 <_strtol_l.constprop.0+0x16>
 8011288:	b107      	cbz	r7, 801128c <_strtol_l.constprop.0+0xdc>
 801128a:	4276      	negs	r6, r6
 801128c:	2a00      	cmp	r2, #0
 801128e:	d0f9      	beq.n	8011284 <_strtol_l.constprop.0+0xd4>
 8011290:	f1bc 0f00 	cmp.w	ip, #0
 8011294:	d000      	beq.n	8011298 <_strtol_l.constprop.0+0xe8>
 8011296:	1e69      	subs	r1, r5, #1
 8011298:	6011      	str	r1, [r2, #0]
 801129a:	e7f3      	b.n	8011284 <_strtol_l.constprop.0+0xd4>
 801129c:	2430      	movs	r4, #48	; 0x30
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d1b1      	bne.n	8011206 <_strtol_l.constprop.0+0x56>
 80112a2:	2308      	movs	r3, #8
 80112a4:	e7af      	b.n	8011206 <_strtol_l.constprop.0+0x56>
 80112a6:	2c30      	cmp	r4, #48	; 0x30
 80112a8:	d0a5      	beq.n	80111f6 <_strtol_l.constprop.0+0x46>
 80112aa:	230a      	movs	r3, #10
 80112ac:	e7ab      	b.n	8011206 <_strtol_l.constprop.0+0x56>
 80112ae:	bf00      	nop
 80112b0:	080140e9 	.word	0x080140e9

080112b4 <strtol>:
 80112b4:	4613      	mov	r3, r2
 80112b6:	460a      	mov	r2, r1
 80112b8:	4601      	mov	r1, r0
 80112ba:	4802      	ldr	r0, [pc, #8]	; (80112c4 <strtol+0x10>)
 80112bc:	6800      	ldr	r0, [r0, #0]
 80112be:	f7ff bf77 	b.w	80111b0 <_strtol_l.constprop.0>
 80112c2:	bf00      	nop
 80112c4:	2000006c 	.word	0x2000006c

080112c8 <__swbuf_r>:
 80112c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112ca:	460e      	mov	r6, r1
 80112cc:	4614      	mov	r4, r2
 80112ce:	4605      	mov	r5, r0
 80112d0:	b118      	cbz	r0, 80112da <__swbuf_r+0x12>
 80112d2:	6983      	ldr	r3, [r0, #24]
 80112d4:	b90b      	cbnz	r3, 80112da <__swbuf_r+0x12>
 80112d6:	f7fe ff47 	bl	8010168 <__sinit>
 80112da:	4b21      	ldr	r3, [pc, #132]	; (8011360 <__swbuf_r+0x98>)
 80112dc:	429c      	cmp	r4, r3
 80112de:	d12b      	bne.n	8011338 <__swbuf_r+0x70>
 80112e0:	686c      	ldr	r4, [r5, #4]
 80112e2:	69a3      	ldr	r3, [r4, #24]
 80112e4:	60a3      	str	r3, [r4, #8]
 80112e6:	89a3      	ldrh	r3, [r4, #12]
 80112e8:	071a      	lsls	r2, r3, #28
 80112ea:	d52f      	bpl.n	801134c <__swbuf_r+0x84>
 80112ec:	6923      	ldr	r3, [r4, #16]
 80112ee:	b36b      	cbz	r3, 801134c <__swbuf_r+0x84>
 80112f0:	6923      	ldr	r3, [r4, #16]
 80112f2:	6820      	ldr	r0, [r4, #0]
 80112f4:	1ac0      	subs	r0, r0, r3
 80112f6:	6963      	ldr	r3, [r4, #20]
 80112f8:	b2f6      	uxtb	r6, r6
 80112fa:	4283      	cmp	r3, r0
 80112fc:	4637      	mov	r7, r6
 80112fe:	dc04      	bgt.n	801130a <__swbuf_r+0x42>
 8011300:	4621      	mov	r1, r4
 8011302:	4628      	mov	r0, r5
 8011304:	f000 ffc4 	bl	8012290 <_fflush_r>
 8011308:	bb30      	cbnz	r0, 8011358 <__swbuf_r+0x90>
 801130a:	68a3      	ldr	r3, [r4, #8]
 801130c:	3b01      	subs	r3, #1
 801130e:	60a3      	str	r3, [r4, #8]
 8011310:	6823      	ldr	r3, [r4, #0]
 8011312:	1c5a      	adds	r2, r3, #1
 8011314:	6022      	str	r2, [r4, #0]
 8011316:	701e      	strb	r6, [r3, #0]
 8011318:	6963      	ldr	r3, [r4, #20]
 801131a:	3001      	adds	r0, #1
 801131c:	4283      	cmp	r3, r0
 801131e:	d004      	beq.n	801132a <__swbuf_r+0x62>
 8011320:	89a3      	ldrh	r3, [r4, #12]
 8011322:	07db      	lsls	r3, r3, #31
 8011324:	d506      	bpl.n	8011334 <__swbuf_r+0x6c>
 8011326:	2e0a      	cmp	r6, #10
 8011328:	d104      	bne.n	8011334 <__swbuf_r+0x6c>
 801132a:	4621      	mov	r1, r4
 801132c:	4628      	mov	r0, r5
 801132e:	f000 ffaf 	bl	8012290 <_fflush_r>
 8011332:	b988      	cbnz	r0, 8011358 <__swbuf_r+0x90>
 8011334:	4638      	mov	r0, r7
 8011336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011338:	4b0a      	ldr	r3, [pc, #40]	; (8011364 <__swbuf_r+0x9c>)
 801133a:	429c      	cmp	r4, r3
 801133c:	d101      	bne.n	8011342 <__swbuf_r+0x7a>
 801133e:	68ac      	ldr	r4, [r5, #8]
 8011340:	e7cf      	b.n	80112e2 <__swbuf_r+0x1a>
 8011342:	4b09      	ldr	r3, [pc, #36]	; (8011368 <__swbuf_r+0xa0>)
 8011344:	429c      	cmp	r4, r3
 8011346:	bf08      	it	eq
 8011348:	68ec      	ldreq	r4, [r5, #12]
 801134a:	e7ca      	b.n	80112e2 <__swbuf_r+0x1a>
 801134c:	4621      	mov	r1, r4
 801134e:	4628      	mov	r0, r5
 8011350:	f000 f81e 	bl	8011390 <__swsetup_r>
 8011354:	2800      	cmp	r0, #0
 8011356:	d0cb      	beq.n	80112f0 <__swbuf_r+0x28>
 8011358:	f04f 37ff 	mov.w	r7, #4294967295
 801135c:	e7ea      	b.n	8011334 <__swbuf_r+0x6c>
 801135e:	bf00      	nop
 8011360:	08014070 	.word	0x08014070
 8011364:	08014090 	.word	0x08014090
 8011368:	08014050 	.word	0x08014050

0801136c <_write_r>:
 801136c:	b538      	push	{r3, r4, r5, lr}
 801136e:	4d07      	ldr	r5, [pc, #28]	; (801138c <_write_r+0x20>)
 8011370:	4604      	mov	r4, r0
 8011372:	4608      	mov	r0, r1
 8011374:	4611      	mov	r1, r2
 8011376:	2200      	movs	r2, #0
 8011378:	602a      	str	r2, [r5, #0]
 801137a:	461a      	mov	r2, r3
 801137c:	f7f4 fc35 	bl	8005bea <_write>
 8011380:	1c43      	adds	r3, r0, #1
 8011382:	d102      	bne.n	801138a <_write_r+0x1e>
 8011384:	682b      	ldr	r3, [r5, #0]
 8011386:	b103      	cbz	r3, 801138a <_write_r+0x1e>
 8011388:	6023      	str	r3, [r4, #0]
 801138a:	bd38      	pop	{r3, r4, r5, pc}
 801138c:	20005cb4 	.word	0x20005cb4

08011390 <__swsetup_r>:
 8011390:	4b32      	ldr	r3, [pc, #200]	; (801145c <__swsetup_r+0xcc>)
 8011392:	b570      	push	{r4, r5, r6, lr}
 8011394:	681d      	ldr	r5, [r3, #0]
 8011396:	4606      	mov	r6, r0
 8011398:	460c      	mov	r4, r1
 801139a:	b125      	cbz	r5, 80113a6 <__swsetup_r+0x16>
 801139c:	69ab      	ldr	r3, [r5, #24]
 801139e:	b913      	cbnz	r3, 80113a6 <__swsetup_r+0x16>
 80113a0:	4628      	mov	r0, r5
 80113a2:	f7fe fee1 	bl	8010168 <__sinit>
 80113a6:	4b2e      	ldr	r3, [pc, #184]	; (8011460 <__swsetup_r+0xd0>)
 80113a8:	429c      	cmp	r4, r3
 80113aa:	d10f      	bne.n	80113cc <__swsetup_r+0x3c>
 80113ac:	686c      	ldr	r4, [r5, #4]
 80113ae:	89a3      	ldrh	r3, [r4, #12]
 80113b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80113b4:	0719      	lsls	r1, r3, #28
 80113b6:	d42c      	bmi.n	8011412 <__swsetup_r+0x82>
 80113b8:	06dd      	lsls	r5, r3, #27
 80113ba:	d411      	bmi.n	80113e0 <__swsetup_r+0x50>
 80113bc:	2309      	movs	r3, #9
 80113be:	6033      	str	r3, [r6, #0]
 80113c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80113c4:	81a3      	strh	r3, [r4, #12]
 80113c6:	f04f 30ff 	mov.w	r0, #4294967295
 80113ca:	e03e      	b.n	801144a <__swsetup_r+0xba>
 80113cc:	4b25      	ldr	r3, [pc, #148]	; (8011464 <__swsetup_r+0xd4>)
 80113ce:	429c      	cmp	r4, r3
 80113d0:	d101      	bne.n	80113d6 <__swsetup_r+0x46>
 80113d2:	68ac      	ldr	r4, [r5, #8]
 80113d4:	e7eb      	b.n	80113ae <__swsetup_r+0x1e>
 80113d6:	4b24      	ldr	r3, [pc, #144]	; (8011468 <__swsetup_r+0xd8>)
 80113d8:	429c      	cmp	r4, r3
 80113da:	bf08      	it	eq
 80113dc:	68ec      	ldreq	r4, [r5, #12]
 80113de:	e7e6      	b.n	80113ae <__swsetup_r+0x1e>
 80113e0:	0758      	lsls	r0, r3, #29
 80113e2:	d512      	bpl.n	801140a <__swsetup_r+0x7a>
 80113e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80113e6:	b141      	cbz	r1, 80113fa <__swsetup_r+0x6a>
 80113e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80113ec:	4299      	cmp	r1, r3
 80113ee:	d002      	beq.n	80113f6 <__swsetup_r+0x66>
 80113f0:	4630      	mov	r0, r6
 80113f2:	f7fe ff99 	bl	8010328 <_free_r>
 80113f6:	2300      	movs	r3, #0
 80113f8:	6363      	str	r3, [r4, #52]	; 0x34
 80113fa:	89a3      	ldrh	r3, [r4, #12]
 80113fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011400:	81a3      	strh	r3, [r4, #12]
 8011402:	2300      	movs	r3, #0
 8011404:	6063      	str	r3, [r4, #4]
 8011406:	6923      	ldr	r3, [r4, #16]
 8011408:	6023      	str	r3, [r4, #0]
 801140a:	89a3      	ldrh	r3, [r4, #12]
 801140c:	f043 0308 	orr.w	r3, r3, #8
 8011410:	81a3      	strh	r3, [r4, #12]
 8011412:	6923      	ldr	r3, [r4, #16]
 8011414:	b94b      	cbnz	r3, 801142a <__swsetup_r+0x9a>
 8011416:	89a3      	ldrh	r3, [r4, #12]
 8011418:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801141c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011420:	d003      	beq.n	801142a <__swsetup_r+0x9a>
 8011422:	4621      	mov	r1, r4
 8011424:	4630      	mov	r0, r6
 8011426:	f000 ffab 	bl	8012380 <__smakebuf_r>
 801142a:	89a0      	ldrh	r0, [r4, #12]
 801142c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011430:	f010 0301 	ands.w	r3, r0, #1
 8011434:	d00a      	beq.n	801144c <__swsetup_r+0xbc>
 8011436:	2300      	movs	r3, #0
 8011438:	60a3      	str	r3, [r4, #8]
 801143a:	6963      	ldr	r3, [r4, #20]
 801143c:	425b      	negs	r3, r3
 801143e:	61a3      	str	r3, [r4, #24]
 8011440:	6923      	ldr	r3, [r4, #16]
 8011442:	b943      	cbnz	r3, 8011456 <__swsetup_r+0xc6>
 8011444:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011448:	d1ba      	bne.n	80113c0 <__swsetup_r+0x30>
 801144a:	bd70      	pop	{r4, r5, r6, pc}
 801144c:	0781      	lsls	r1, r0, #30
 801144e:	bf58      	it	pl
 8011450:	6963      	ldrpl	r3, [r4, #20]
 8011452:	60a3      	str	r3, [r4, #8]
 8011454:	e7f4      	b.n	8011440 <__swsetup_r+0xb0>
 8011456:	2000      	movs	r0, #0
 8011458:	e7f7      	b.n	801144a <__swsetup_r+0xba>
 801145a:	bf00      	nop
 801145c:	2000006c 	.word	0x2000006c
 8011460:	08014070 	.word	0x08014070
 8011464:	08014090 	.word	0x08014090
 8011468:	08014050 	.word	0x08014050

0801146c <_close_r>:
 801146c:	b538      	push	{r3, r4, r5, lr}
 801146e:	4d06      	ldr	r5, [pc, #24]	; (8011488 <_close_r+0x1c>)
 8011470:	2300      	movs	r3, #0
 8011472:	4604      	mov	r4, r0
 8011474:	4608      	mov	r0, r1
 8011476:	602b      	str	r3, [r5, #0]
 8011478:	f7f4 fbd3 	bl	8005c22 <_close>
 801147c:	1c43      	adds	r3, r0, #1
 801147e:	d102      	bne.n	8011486 <_close_r+0x1a>
 8011480:	682b      	ldr	r3, [r5, #0]
 8011482:	b103      	cbz	r3, 8011486 <_close_r+0x1a>
 8011484:	6023      	str	r3, [r4, #0]
 8011486:	bd38      	pop	{r3, r4, r5, pc}
 8011488:	20005cb4 	.word	0x20005cb4

0801148c <quorem>:
 801148c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011490:	6903      	ldr	r3, [r0, #16]
 8011492:	690c      	ldr	r4, [r1, #16]
 8011494:	42a3      	cmp	r3, r4
 8011496:	4607      	mov	r7, r0
 8011498:	f2c0 8081 	blt.w	801159e <quorem+0x112>
 801149c:	3c01      	subs	r4, #1
 801149e:	f101 0814 	add.w	r8, r1, #20
 80114a2:	f100 0514 	add.w	r5, r0, #20
 80114a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80114aa:	9301      	str	r3, [sp, #4]
 80114ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80114b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80114b4:	3301      	adds	r3, #1
 80114b6:	429a      	cmp	r2, r3
 80114b8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80114bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80114c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80114c4:	d331      	bcc.n	801152a <quorem+0x9e>
 80114c6:	f04f 0e00 	mov.w	lr, #0
 80114ca:	4640      	mov	r0, r8
 80114cc:	46ac      	mov	ip, r5
 80114ce:	46f2      	mov	sl, lr
 80114d0:	f850 2b04 	ldr.w	r2, [r0], #4
 80114d4:	b293      	uxth	r3, r2
 80114d6:	fb06 e303 	mla	r3, r6, r3, lr
 80114da:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80114de:	b29b      	uxth	r3, r3
 80114e0:	ebaa 0303 	sub.w	r3, sl, r3
 80114e4:	f8dc a000 	ldr.w	sl, [ip]
 80114e8:	0c12      	lsrs	r2, r2, #16
 80114ea:	fa13 f38a 	uxtah	r3, r3, sl
 80114ee:	fb06 e202 	mla	r2, r6, r2, lr
 80114f2:	9300      	str	r3, [sp, #0]
 80114f4:	9b00      	ldr	r3, [sp, #0]
 80114f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80114fa:	b292      	uxth	r2, r2
 80114fc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011500:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011504:	f8bd 3000 	ldrh.w	r3, [sp]
 8011508:	4581      	cmp	r9, r0
 801150a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801150e:	f84c 3b04 	str.w	r3, [ip], #4
 8011512:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011516:	d2db      	bcs.n	80114d0 <quorem+0x44>
 8011518:	f855 300b 	ldr.w	r3, [r5, fp]
 801151c:	b92b      	cbnz	r3, 801152a <quorem+0x9e>
 801151e:	9b01      	ldr	r3, [sp, #4]
 8011520:	3b04      	subs	r3, #4
 8011522:	429d      	cmp	r5, r3
 8011524:	461a      	mov	r2, r3
 8011526:	d32e      	bcc.n	8011586 <quorem+0xfa>
 8011528:	613c      	str	r4, [r7, #16]
 801152a:	4638      	mov	r0, r7
 801152c:	f001 f9f6 	bl	801291c <__mcmp>
 8011530:	2800      	cmp	r0, #0
 8011532:	db24      	blt.n	801157e <quorem+0xf2>
 8011534:	3601      	adds	r6, #1
 8011536:	4628      	mov	r0, r5
 8011538:	f04f 0c00 	mov.w	ip, #0
 801153c:	f858 2b04 	ldr.w	r2, [r8], #4
 8011540:	f8d0 e000 	ldr.w	lr, [r0]
 8011544:	b293      	uxth	r3, r2
 8011546:	ebac 0303 	sub.w	r3, ip, r3
 801154a:	0c12      	lsrs	r2, r2, #16
 801154c:	fa13 f38e 	uxtah	r3, r3, lr
 8011550:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011554:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011558:	b29b      	uxth	r3, r3
 801155a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801155e:	45c1      	cmp	r9, r8
 8011560:	f840 3b04 	str.w	r3, [r0], #4
 8011564:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011568:	d2e8      	bcs.n	801153c <quorem+0xb0>
 801156a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801156e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011572:	b922      	cbnz	r2, 801157e <quorem+0xf2>
 8011574:	3b04      	subs	r3, #4
 8011576:	429d      	cmp	r5, r3
 8011578:	461a      	mov	r2, r3
 801157a:	d30a      	bcc.n	8011592 <quorem+0x106>
 801157c:	613c      	str	r4, [r7, #16]
 801157e:	4630      	mov	r0, r6
 8011580:	b003      	add	sp, #12
 8011582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011586:	6812      	ldr	r2, [r2, #0]
 8011588:	3b04      	subs	r3, #4
 801158a:	2a00      	cmp	r2, #0
 801158c:	d1cc      	bne.n	8011528 <quorem+0x9c>
 801158e:	3c01      	subs	r4, #1
 8011590:	e7c7      	b.n	8011522 <quorem+0x96>
 8011592:	6812      	ldr	r2, [r2, #0]
 8011594:	3b04      	subs	r3, #4
 8011596:	2a00      	cmp	r2, #0
 8011598:	d1f0      	bne.n	801157c <quorem+0xf0>
 801159a:	3c01      	subs	r4, #1
 801159c:	e7eb      	b.n	8011576 <quorem+0xea>
 801159e:	2000      	movs	r0, #0
 80115a0:	e7ee      	b.n	8011580 <quorem+0xf4>
 80115a2:	0000      	movs	r0, r0
 80115a4:	0000      	movs	r0, r0
	...

080115a8 <_dtoa_r>:
 80115a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115ac:	ed2d 8b04 	vpush	{d8-d9}
 80115b0:	ec57 6b10 	vmov	r6, r7, d0
 80115b4:	b093      	sub	sp, #76	; 0x4c
 80115b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80115b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80115bc:	9106      	str	r1, [sp, #24]
 80115be:	ee10 aa10 	vmov	sl, s0
 80115c2:	4604      	mov	r4, r0
 80115c4:	9209      	str	r2, [sp, #36]	; 0x24
 80115c6:	930c      	str	r3, [sp, #48]	; 0x30
 80115c8:	46bb      	mov	fp, r7
 80115ca:	b975      	cbnz	r5, 80115ea <_dtoa_r+0x42>
 80115cc:	2010      	movs	r0, #16
 80115ce:	f7fe fe8d 	bl	80102ec <malloc>
 80115d2:	4602      	mov	r2, r0
 80115d4:	6260      	str	r0, [r4, #36]	; 0x24
 80115d6:	b920      	cbnz	r0, 80115e2 <_dtoa_r+0x3a>
 80115d8:	4ba7      	ldr	r3, [pc, #668]	; (8011878 <_dtoa_r+0x2d0>)
 80115da:	21ea      	movs	r1, #234	; 0xea
 80115dc:	48a7      	ldr	r0, [pc, #668]	; (801187c <_dtoa_r+0x2d4>)
 80115de:	f001 fdc5 	bl	801316c <__assert_func>
 80115e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80115e6:	6005      	str	r5, [r0, #0]
 80115e8:	60c5      	str	r5, [r0, #12]
 80115ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80115ec:	6819      	ldr	r1, [r3, #0]
 80115ee:	b151      	cbz	r1, 8011606 <_dtoa_r+0x5e>
 80115f0:	685a      	ldr	r2, [r3, #4]
 80115f2:	604a      	str	r2, [r1, #4]
 80115f4:	2301      	movs	r3, #1
 80115f6:	4093      	lsls	r3, r2
 80115f8:	608b      	str	r3, [r1, #8]
 80115fa:	4620      	mov	r0, r4
 80115fc:	f000 ff4c 	bl	8012498 <_Bfree>
 8011600:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011602:	2200      	movs	r2, #0
 8011604:	601a      	str	r2, [r3, #0]
 8011606:	1e3b      	subs	r3, r7, #0
 8011608:	bfaa      	itet	ge
 801160a:	2300      	movge	r3, #0
 801160c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8011610:	f8c8 3000 	strge.w	r3, [r8]
 8011614:	4b9a      	ldr	r3, [pc, #616]	; (8011880 <_dtoa_r+0x2d8>)
 8011616:	bfbc      	itt	lt
 8011618:	2201      	movlt	r2, #1
 801161a:	f8c8 2000 	strlt.w	r2, [r8]
 801161e:	ea33 030b 	bics.w	r3, r3, fp
 8011622:	d11b      	bne.n	801165c <_dtoa_r+0xb4>
 8011624:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011626:	f242 730f 	movw	r3, #9999	; 0x270f
 801162a:	6013      	str	r3, [r2, #0]
 801162c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011630:	4333      	orrs	r3, r6
 8011632:	f000 8592 	beq.w	801215a <_dtoa_r+0xbb2>
 8011636:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011638:	b963      	cbnz	r3, 8011654 <_dtoa_r+0xac>
 801163a:	4b92      	ldr	r3, [pc, #584]	; (8011884 <_dtoa_r+0x2dc>)
 801163c:	e022      	b.n	8011684 <_dtoa_r+0xdc>
 801163e:	4b92      	ldr	r3, [pc, #584]	; (8011888 <_dtoa_r+0x2e0>)
 8011640:	9301      	str	r3, [sp, #4]
 8011642:	3308      	adds	r3, #8
 8011644:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011646:	6013      	str	r3, [r2, #0]
 8011648:	9801      	ldr	r0, [sp, #4]
 801164a:	b013      	add	sp, #76	; 0x4c
 801164c:	ecbd 8b04 	vpop	{d8-d9}
 8011650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011654:	4b8b      	ldr	r3, [pc, #556]	; (8011884 <_dtoa_r+0x2dc>)
 8011656:	9301      	str	r3, [sp, #4]
 8011658:	3303      	adds	r3, #3
 801165a:	e7f3      	b.n	8011644 <_dtoa_r+0x9c>
 801165c:	2200      	movs	r2, #0
 801165e:	2300      	movs	r3, #0
 8011660:	4650      	mov	r0, sl
 8011662:	4659      	mov	r1, fp
 8011664:	f7ef fa30 	bl	8000ac8 <__aeabi_dcmpeq>
 8011668:	ec4b ab19 	vmov	d9, sl, fp
 801166c:	4680      	mov	r8, r0
 801166e:	b158      	cbz	r0, 8011688 <_dtoa_r+0xe0>
 8011670:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011672:	2301      	movs	r3, #1
 8011674:	6013      	str	r3, [r2, #0]
 8011676:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011678:	2b00      	cmp	r3, #0
 801167a:	f000 856b 	beq.w	8012154 <_dtoa_r+0xbac>
 801167e:	4883      	ldr	r0, [pc, #524]	; (801188c <_dtoa_r+0x2e4>)
 8011680:	6018      	str	r0, [r3, #0]
 8011682:	1e43      	subs	r3, r0, #1
 8011684:	9301      	str	r3, [sp, #4]
 8011686:	e7df      	b.n	8011648 <_dtoa_r+0xa0>
 8011688:	ec4b ab10 	vmov	d0, sl, fp
 801168c:	aa10      	add	r2, sp, #64	; 0x40
 801168e:	a911      	add	r1, sp, #68	; 0x44
 8011690:	4620      	mov	r0, r4
 8011692:	f001 f9e9 	bl	8012a68 <__d2b>
 8011696:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801169a:	ee08 0a10 	vmov	s16, r0
 801169e:	2d00      	cmp	r5, #0
 80116a0:	f000 8084 	beq.w	80117ac <_dtoa_r+0x204>
 80116a4:	ee19 3a90 	vmov	r3, s19
 80116a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80116ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80116b0:	4656      	mov	r6, sl
 80116b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80116b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80116ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80116be:	4b74      	ldr	r3, [pc, #464]	; (8011890 <_dtoa_r+0x2e8>)
 80116c0:	2200      	movs	r2, #0
 80116c2:	4630      	mov	r0, r6
 80116c4:	4639      	mov	r1, r7
 80116c6:	f7ee fddf 	bl	8000288 <__aeabi_dsub>
 80116ca:	a365      	add	r3, pc, #404	; (adr r3, 8011860 <_dtoa_r+0x2b8>)
 80116cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116d0:	f7ee ff92 	bl	80005f8 <__aeabi_dmul>
 80116d4:	a364      	add	r3, pc, #400	; (adr r3, 8011868 <_dtoa_r+0x2c0>)
 80116d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116da:	f7ee fdd7 	bl	800028c <__adddf3>
 80116de:	4606      	mov	r6, r0
 80116e0:	4628      	mov	r0, r5
 80116e2:	460f      	mov	r7, r1
 80116e4:	f7ee ff1e 	bl	8000524 <__aeabi_i2d>
 80116e8:	a361      	add	r3, pc, #388	; (adr r3, 8011870 <_dtoa_r+0x2c8>)
 80116ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116ee:	f7ee ff83 	bl	80005f8 <__aeabi_dmul>
 80116f2:	4602      	mov	r2, r0
 80116f4:	460b      	mov	r3, r1
 80116f6:	4630      	mov	r0, r6
 80116f8:	4639      	mov	r1, r7
 80116fa:	f7ee fdc7 	bl	800028c <__adddf3>
 80116fe:	4606      	mov	r6, r0
 8011700:	460f      	mov	r7, r1
 8011702:	f7ef fa29 	bl	8000b58 <__aeabi_d2iz>
 8011706:	2200      	movs	r2, #0
 8011708:	9000      	str	r0, [sp, #0]
 801170a:	2300      	movs	r3, #0
 801170c:	4630      	mov	r0, r6
 801170e:	4639      	mov	r1, r7
 8011710:	f7ef f9e4 	bl	8000adc <__aeabi_dcmplt>
 8011714:	b150      	cbz	r0, 801172c <_dtoa_r+0x184>
 8011716:	9800      	ldr	r0, [sp, #0]
 8011718:	f7ee ff04 	bl	8000524 <__aeabi_i2d>
 801171c:	4632      	mov	r2, r6
 801171e:	463b      	mov	r3, r7
 8011720:	f7ef f9d2 	bl	8000ac8 <__aeabi_dcmpeq>
 8011724:	b910      	cbnz	r0, 801172c <_dtoa_r+0x184>
 8011726:	9b00      	ldr	r3, [sp, #0]
 8011728:	3b01      	subs	r3, #1
 801172a:	9300      	str	r3, [sp, #0]
 801172c:	9b00      	ldr	r3, [sp, #0]
 801172e:	2b16      	cmp	r3, #22
 8011730:	d85a      	bhi.n	80117e8 <_dtoa_r+0x240>
 8011732:	9a00      	ldr	r2, [sp, #0]
 8011734:	4b57      	ldr	r3, [pc, #348]	; (8011894 <_dtoa_r+0x2ec>)
 8011736:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801173a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801173e:	ec51 0b19 	vmov	r0, r1, d9
 8011742:	f7ef f9cb 	bl	8000adc <__aeabi_dcmplt>
 8011746:	2800      	cmp	r0, #0
 8011748:	d050      	beq.n	80117ec <_dtoa_r+0x244>
 801174a:	9b00      	ldr	r3, [sp, #0]
 801174c:	3b01      	subs	r3, #1
 801174e:	9300      	str	r3, [sp, #0]
 8011750:	2300      	movs	r3, #0
 8011752:	930b      	str	r3, [sp, #44]	; 0x2c
 8011754:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011756:	1b5d      	subs	r5, r3, r5
 8011758:	1e6b      	subs	r3, r5, #1
 801175a:	9305      	str	r3, [sp, #20]
 801175c:	bf45      	ittet	mi
 801175e:	f1c5 0301 	rsbmi	r3, r5, #1
 8011762:	9304      	strmi	r3, [sp, #16]
 8011764:	2300      	movpl	r3, #0
 8011766:	2300      	movmi	r3, #0
 8011768:	bf4c      	ite	mi
 801176a:	9305      	strmi	r3, [sp, #20]
 801176c:	9304      	strpl	r3, [sp, #16]
 801176e:	9b00      	ldr	r3, [sp, #0]
 8011770:	2b00      	cmp	r3, #0
 8011772:	db3d      	blt.n	80117f0 <_dtoa_r+0x248>
 8011774:	9b05      	ldr	r3, [sp, #20]
 8011776:	9a00      	ldr	r2, [sp, #0]
 8011778:	920a      	str	r2, [sp, #40]	; 0x28
 801177a:	4413      	add	r3, r2
 801177c:	9305      	str	r3, [sp, #20]
 801177e:	2300      	movs	r3, #0
 8011780:	9307      	str	r3, [sp, #28]
 8011782:	9b06      	ldr	r3, [sp, #24]
 8011784:	2b09      	cmp	r3, #9
 8011786:	f200 8089 	bhi.w	801189c <_dtoa_r+0x2f4>
 801178a:	2b05      	cmp	r3, #5
 801178c:	bfc4      	itt	gt
 801178e:	3b04      	subgt	r3, #4
 8011790:	9306      	strgt	r3, [sp, #24]
 8011792:	9b06      	ldr	r3, [sp, #24]
 8011794:	f1a3 0302 	sub.w	r3, r3, #2
 8011798:	bfcc      	ite	gt
 801179a:	2500      	movgt	r5, #0
 801179c:	2501      	movle	r5, #1
 801179e:	2b03      	cmp	r3, #3
 80117a0:	f200 8087 	bhi.w	80118b2 <_dtoa_r+0x30a>
 80117a4:	e8df f003 	tbb	[pc, r3]
 80117a8:	59383a2d 	.word	0x59383a2d
 80117ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80117b0:	441d      	add	r5, r3
 80117b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80117b6:	2b20      	cmp	r3, #32
 80117b8:	bfc1      	itttt	gt
 80117ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80117be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80117c2:	fa0b f303 	lslgt.w	r3, fp, r3
 80117c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80117ca:	bfda      	itte	le
 80117cc:	f1c3 0320 	rsble	r3, r3, #32
 80117d0:	fa06 f003 	lslle.w	r0, r6, r3
 80117d4:	4318      	orrgt	r0, r3
 80117d6:	f7ee fe95 	bl	8000504 <__aeabi_ui2d>
 80117da:	2301      	movs	r3, #1
 80117dc:	4606      	mov	r6, r0
 80117de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80117e2:	3d01      	subs	r5, #1
 80117e4:	930e      	str	r3, [sp, #56]	; 0x38
 80117e6:	e76a      	b.n	80116be <_dtoa_r+0x116>
 80117e8:	2301      	movs	r3, #1
 80117ea:	e7b2      	b.n	8011752 <_dtoa_r+0x1aa>
 80117ec:	900b      	str	r0, [sp, #44]	; 0x2c
 80117ee:	e7b1      	b.n	8011754 <_dtoa_r+0x1ac>
 80117f0:	9b04      	ldr	r3, [sp, #16]
 80117f2:	9a00      	ldr	r2, [sp, #0]
 80117f4:	1a9b      	subs	r3, r3, r2
 80117f6:	9304      	str	r3, [sp, #16]
 80117f8:	4253      	negs	r3, r2
 80117fa:	9307      	str	r3, [sp, #28]
 80117fc:	2300      	movs	r3, #0
 80117fe:	930a      	str	r3, [sp, #40]	; 0x28
 8011800:	e7bf      	b.n	8011782 <_dtoa_r+0x1da>
 8011802:	2300      	movs	r3, #0
 8011804:	9308      	str	r3, [sp, #32]
 8011806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011808:	2b00      	cmp	r3, #0
 801180a:	dc55      	bgt.n	80118b8 <_dtoa_r+0x310>
 801180c:	2301      	movs	r3, #1
 801180e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011812:	461a      	mov	r2, r3
 8011814:	9209      	str	r2, [sp, #36]	; 0x24
 8011816:	e00c      	b.n	8011832 <_dtoa_r+0x28a>
 8011818:	2301      	movs	r3, #1
 801181a:	e7f3      	b.n	8011804 <_dtoa_r+0x25c>
 801181c:	2300      	movs	r3, #0
 801181e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011820:	9308      	str	r3, [sp, #32]
 8011822:	9b00      	ldr	r3, [sp, #0]
 8011824:	4413      	add	r3, r2
 8011826:	9302      	str	r3, [sp, #8]
 8011828:	3301      	adds	r3, #1
 801182a:	2b01      	cmp	r3, #1
 801182c:	9303      	str	r3, [sp, #12]
 801182e:	bfb8      	it	lt
 8011830:	2301      	movlt	r3, #1
 8011832:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011834:	2200      	movs	r2, #0
 8011836:	6042      	str	r2, [r0, #4]
 8011838:	2204      	movs	r2, #4
 801183a:	f102 0614 	add.w	r6, r2, #20
 801183e:	429e      	cmp	r6, r3
 8011840:	6841      	ldr	r1, [r0, #4]
 8011842:	d93d      	bls.n	80118c0 <_dtoa_r+0x318>
 8011844:	4620      	mov	r0, r4
 8011846:	f000 fde7 	bl	8012418 <_Balloc>
 801184a:	9001      	str	r0, [sp, #4]
 801184c:	2800      	cmp	r0, #0
 801184e:	d13b      	bne.n	80118c8 <_dtoa_r+0x320>
 8011850:	4b11      	ldr	r3, [pc, #68]	; (8011898 <_dtoa_r+0x2f0>)
 8011852:	4602      	mov	r2, r0
 8011854:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011858:	e6c0      	b.n	80115dc <_dtoa_r+0x34>
 801185a:	2301      	movs	r3, #1
 801185c:	e7df      	b.n	801181e <_dtoa_r+0x276>
 801185e:	bf00      	nop
 8011860:	636f4361 	.word	0x636f4361
 8011864:	3fd287a7 	.word	0x3fd287a7
 8011868:	8b60c8b3 	.word	0x8b60c8b3
 801186c:	3fc68a28 	.word	0x3fc68a28
 8011870:	509f79fb 	.word	0x509f79fb
 8011874:	3fd34413 	.word	0x3fd34413
 8011878:	080141f6 	.word	0x080141f6
 801187c:	0801420d 	.word	0x0801420d
 8011880:	7ff00000 	.word	0x7ff00000
 8011884:	080141f2 	.word	0x080141f2
 8011888:	080141e9 	.word	0x080141e9
 801188c:	080140c5 	.word	0x080140c5
 8011890:	3ff80000 	.word	0x3ff80000
 8011894:	08014300 	.word	0x08014300
 8011898:	08014268 	.word	0x08014268
 801189c:	2501      	movs	r5, #1
 801189e:	2300      	movs	r3, #0
 80118a0:	9306      	str	r3, [sp, #24]
 80118a2:	9508      	str	r5, [sp, #32]
 80118a4:	f04f 33ff 	mov.w	r3, #4294967295
 80118a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80118ac:	2200      	movs	r2, #0
 80118ae:	2312      	movs	r3, #18
 80118b0:	e7b0      	b.n	8011814 <_dtoa_r+0x26c>
 80118b2:	2301      	movs	r3, #1
 80118b4:	9308      	str	r3, [sp, #32]
 80118b6:	e7f5      	b.n	80118a4 <_dtoa_r+0x2fc>
 80118b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80118be:	e7b8      	b.n	8011832 <_dtoa_r+0x28a>
 80118c0:	3101      	adds	r1, #1
 80118c2:	6041      	str	r1, [r0, #4]
 80118c4:	0052      	lsls	r2, r2, #1
 80118c6:	e7b8      	b.n	801183a <_dtoa_r+0x292>
 80118c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80118ca:	9a01      	ldr	r2, [sp, #4]
 80118cc:	601a      	str	r2, [r3, #0]
 80118ce:	9b03      	ldr	r3, [sp, #12]
 80118d0:	2b0e      	cmp	r3, #14
 80118d2:	f200 809d 	bhi.w	8011a10 <_dtoa_r+0x468>
 80118d6:	2d00      	cmp	r5, #0
 80118d8:	f000 809a 	beq.w	8011a10 <_dtoa_r+0x468>
 80118dc:	9b00      	ldr	r3, [sp, #0]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	dd32      	ble.n	8011948 <_dtoa_r+0x3a0>
 80118e2:	4ab7      	ldr	r2, [pc, #732]	; (8011bc0 <_dtoa_r+0x618>)
 80118e4:	f003 030f 	and.w	r3, r3, #15
 80118e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80118ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80118f0:	9b00      	ldr	r3, [sp, #0]
 80118f2:	05d8      	lsls	r0, r3, #23
 80118f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80118f8:	d516      	bpl.n	8011928 <_dtoa_r+0x380>
 80118fa:	4bb2      	ldr	r3, [pc, #712]	; (8011bc4 <_dtoa_r+0x61c>)
 80118fc:	ec51 0b19 	vmov	r0, r1, d9
 8011900:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011904:	f7ee ffa2 	bl	800084c <__aeabi_ddiv>
 8011908:	f007 070f 	and.w	r7, r7, #15
 801190c:	4682      	mov	sl, r0
 801190e:	468b      	mov	fp, r1
 8011910:	2503      	movs	r5, #3
 8011912:	4eac      	ldr	r6, [pc, #688]	; (8011bc4 <_dtoa_r+0x61c>)
 8011914:	b957      	cbnz	r7, 801192c <_dtoa_r+0x384>
 8011916:	4642      	mov	r2, r8
 8011918:	464b      	mov	r3, r9
 801191a:	4650      	mov	r0, sl
 801191c:	4659      	mov	r1, fp
 801191e:	f7ee ff95 	bl	800084c <__aeabi_ddiv>
 8011922:	4682      	mov	sl, r0
 8011924:	468b      	mov	fp, r1
 8011926:	e028      	b.n	801197a <_dtoa_r+0x3d2>
 8011928:	2502      	movs	r5, #2
 801192a:	e7f2      	b.n	8011912 <_dtoa_r+0x36a>
 801192c:	07f9      	lsls	r1, r7, #31
 801192e:	d508      	bpl.n	8011942 <_dtoa_r+0x39a>
 8011930:	4640      	mov	r0, r8
 8011932:	4649      	mov	r1, r9
 8011934:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011938:	f7ee fe5e 	bl	80005f8 <__aeabi_dmul>
 801193c:	3501      	adds	r5, #1
 801193e:	4680      	mov	r8, r0
 8011940:	4689      	mov	r9, r1
 8011942:	107f      	asrs	r7, r7, #1
 8011944:	3608      	adds	r6, #8
 8011946:	e7e5      	b.n	8011914 <_dtoa_r+0x36c>
 8011948:	f000 809b 	beq.w	8011a82 <_dtoa_r+0x4da>
 801194c:	9b00      	ldr	r3, [sp, #0]
 801194e:	4f9d      	ldr	r7, [pc, #628]	; (8011bc4 <_dtoa_r+0x61c>)
 8011950:	425e      	negs	r6, r3
 8011952:	4b9b      	ldr	r3, [pc, #620]	; (8011bc0 <_dtoa_r+0x618>)
 8011954:	f006 020f 	and.w	r2, r6, #15
 8011958:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801195c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011960:	ec51 0b19 	vmov	r0, r1, d9
 8011964:	f7ee fe48 	bl	80005f8 <__aeabi_dmul>
 8011968:	1136      	asrs	r6, r6, #4
 801196a:	4682      	mov	sl, r0
 801196c:	468b      	mov	fp, r1
 801196e:	2300      	movs	r3, #0
 8011970:	2502      	movs	r5, #2
 8011972:	2e00      	cmp	r6, #0
 8011974:	d17a      	bne.n	8011a6c <_dtoa_r+0x4c4>
 8011976:	2b00      	cmp	r3, #0
 8011978:	d1d3      	bne.n	8011922 <_dtoa_r+0x37a>
 801197a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801197c:	2b00      	cmp	r3, #0
 801197e:	f000 8082 	beq.w	8011a86 <_dtoa_r+0x4de>
 8011982:	4b91      	ldr	r3, [pc, #580]	; (8011bc8 <_dtoa_r+0x620>)
 8011984:	2200      	movs	r2, #0
 8011986:	4650      	mov	r0, sl
 8011988:	4659      	mov	r1, fp
 801198a:	f7ef f8a7 	bl	8000adc <__aeabi_dcmplt>
 801198e:	2800      	cmp	r0, #0
 8011990:	d079      	beq.n	8011a86 <_dtoa_r+0x4de>
 8011992:	9b03      	ldr	r3, [sp, #12]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d076      	beq.n	8011a86 <_dtoa_r+0x4de>
 8011998:	9b02      	ldr	r3, [sp, #8]
 801199a:	2b00      	cmp	r3, #0
 801199c:	dd36      	ble.n	8011a0c <_dtoa_r+0x464>
 801199e:	9b00      	ldr	r3, [sp, #0]
 80119a0:	4650      	mov	r0, sl
 80119a2:	4659      	mov	r1, fp
 80119a4:	1e5f      	subs	r7, r3, #1
 80119a6:	2200      	movs	r2, #0
 80119a8:	4b88      	ldr	r3, [pc, #544]	; (8011bcc <_dtoa_r+0x624>)
 80119aa:	f7ee fe25 	bl	80005f8 <__aeabi_dmul>
 80119ae:	9e02      	ldr	r6, [sp, #8]
 80119b0:	4682      	mov	sl, r0
 80119b2:	468b      	mov	fp, r1
 80119b4:	3501      	adds	r5, #1
 80119b6:	4628      	mov	r0, r5
 80119b8:	f7ee fdb4 	bl	8000524 <__aeabi_i2d>
 80119bc:	4652      	mov	r2, sl
 80119be:	465b      	mov	r3, fp
 80119c0:	f7ee fe1a 	bl	80005f8 <__aeabi_dmul>
 80119c4:	4b82      	ldr	r3, [pc, #520]	; (8011bd0 <_dtoa_r+0x628>)
 80119c6:	2200      	movs	r2, #0
 80119c8:	f7ee fc60 	bl	800028c <__adddf3>
 80119cc:	46d0      	mov	r8, sl
 80119ce:	46d9      	mov	r9, fp
 80119d0:	4682      	mov	sl, r0
 80119d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80119d6:	2e00      	cmp	r6, #0
 80119d8:	d158      	bne.n	8011a8c <_dtoa_r+0x4e4>
 80119da:	4b7e      	ldr	r3, [pc, #504]	; (8011bd4 <_dtoa_r+0x62c>)
 80119dc:	2200      	movs	r2, #0
 80119de:	4640      	mov	r0, r8
 80119e0:	4649      	mov	r1, r9
 80119e2:	f7ee fc51 	bl	8000288 <__aeabi_dsub>
 80119e6:	4652      	mov	r2, sl
 80119e8:	465b      	mov	r3, fp
 80119ea:	4680      	mov	r8, r0
 80119ec:	4689      	mov	r9, r1
 80119ee:	f7ef f893 	bl	8000b18 <__aeabi_dcmpgt>
 80119f2:	2800      	cmp	r0, #0
 80119f4:	f040 8295 	bne.w	8011f22 <_dtoa_r+0x97a>
 80119f8:	4652      	mov	r2, sl
 80119fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80119fe:	4640      	mov	r0, r8
 8011a00:	4649      	mov	r1, r9
 8011a02:	f7ef f86b 	bl	8000adc <__aeabi_dcmplt>
 8011a06:	2800      	cmp	r0, #0
 8011a08:	f040 8289 	bne.w	8011f1e <_dtoa_r+0x976>
 8011a0c:	ec5b ab19 	vmov	sl, fp, d9
 8011a10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	f2c0 8148 	blt.w	8011ca8 <_dtoa_r+0x700>
 8011a18:	9a00      	ldr	r2, [sp, #0]
 8011a1a:	2a0e      	cmp	r2, #14
 8011a1c:	f300 8144 	bgt.w	8011ca8 <_dtoa_r+0x700>
 8011a20:	4b67      	ldr	r3, [pc, #412]	; (8011bc0 <_dtoa_r+0x618>)
 8011a22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011a26:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	f280 80d5 	bge.w	8011bdc <_dtoa_r+0x634>
 8011a32:	9b03      	ldr	r3, [sp, #12]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	f300 80d1 	bgt.w	8011bdc <_dtoa_r+0x634>
 8011a3a:	f040 826f 	bne.w	8011f1c <_dtoa_r+0x974>
 8011a3e:	4b65      	ldr	r3, [pc, #404]	; (8011bd4 <_dtoa_r+0x62c>)
 8011a40:	2200      	movs	r2, #0
 8011a42:	4640      	mov	r0, r8
 8011a44:	4649      	mov	r1, r9
 8011a46:	f7ee fdd7 	bl	80005f8 <__aeabi_dmul>
 8011a4a:	4652      	mov	r2, sl
 8011a4c:	465b      	mov	r3, fp
 8011a4e:	f7ef f859 	bl	8000b04 <__aeabi_dcmpge>
 8011a52:	9e03      	ldr	r6, [sp, #12]
 8011a54:	4637      	mov	r7, r6
 8011a56:	2800      	cmp	r0, #0
 8011a58:	f040 8245 	bne.w	8011ee6 <_dtoa_r+0x93e>
 8011a5c:	9d01      	ldr	r5, [sp, #4]
 8011a5e:	2331      	movs	r3, #49	; 0x31
 8011a60:	f805 3b01 	strb.w	r3, [r5], #1
 8011a64:	9b00      	ldr	r3, [sp, #0]
 8011a66:	3301      	adds	r3, #1
 8011a68:	9300      	str	r3, [sp, #0]
 8011a6a:	e240      	b.n	8011eee <_dtoa_r+0x946>
 8011a6c:	07f2      	lsls	r2, r6, #31
 8011a6e:	d505      	bpl.n	8011a7c <_dtoa_r+0x4d4>
 8011a70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011a74:	f7ee fdc0 	bl	80005f8 <__aeabi_dmul>
 8011a78:	3501      	adds	r5, #1
 8011a7a:	2301      	movs	r3, #1
 8011a7c:	1076      	asrs	r6, r6, #1
 8011a7e:	3708      	adds	r7, #8
 8011a80:	e777      	b.n	8011972 <_dtoa_r+0x3ca>
 8011a82:	2502      	movs	r5, #2
 8011a84:	e779      	b.n	801197a <_dtoa_r+0x3d2>
 8011a86:	9f00      	ldr	r7, [sp, #0]
 8011a88:	9e03      	ldr	r6, [sp, #12]
 8011a8a:	e794      	b.n	80119b6 <_dtoa_r+0x40e>
 8011a8c:	9901      	ldr	r1, [sp, #4]
 8011a8e:	4b4c      	ldr	r3, [pc, #304]	; (8011bc0 <_dtoa_r+0x618>)
 8011a90:	4431      	add	r1, r6
 8011a92:	910d      	str	r1, [sp, #52]	; 0x34
 8011a94:	9908      	ldr	r1, [sp, #32]
 8011a96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011a9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011a9e:	2900      	cmp	r1, #0
 8011aa0:	d043      	beq.n	8011b2a <_dtoa_r+0x582>
 8011aa2:	494d      	ldr	r1, [pc, #308]	; (8011bd8 <_dtoa_r+0x630>)
 8011aa4:	2000      	movs	r0, #0
 8011aa6:	f7ee fed1 	bl	800084c <__aeabi_ddiv>
 8011aaa:	4652      	mov	r2, sl
 8011aac:	465b      	mov	r3, fp
 8011aae:	f7ee fbeb 	bl	8000288 <__aeabi_dsub>
 8011ab2:	9d01      	ldr	r5, [sp, #4]
 8011ab4:	4682      	mov	sl, r0
 8011ab6:	468b      	mov	fp, r1
 8011ab8:	4649      	mov	r1, r9
 8011aba:	4640      	mov	r0, r8
 8011abc:	f7ef f84c 	bl	8000b58 <__aeabi_d2iz>
 8011ac0:	4606      	mov	r6, r0
 8011ac2:	f7ee fd2f 	bl	8000524 <__aeabi_i2d>
 8011ac6:	4602      	mov	r2, r0
 8011ac8:	460b      	mov	r3, r1
 8011aca:	4640      	mov	r0, r8
 8011acc:	4649      	mov	r1, r9
 8011ace:	f7ee fbdb 	bl	8000288 <__aeabi_dsub>
 8011ad2:	3630      	adds	r6, #48	; 0x30
 8011ad4:	f805 6b01 	strb.w	r6, [r5], #1
 8011ad8:	4652      	mov	r2, sl
 8011ada:	465b      	mov	r3, fp
 8011adc:	4680      	mov	r8, r0
 8011ade:	4689      	mov	r9, r1
 8011ae0:	f7ee fffc 	bl	8000adc <__aeabi_dcmplt>
 8011ae4:	2800      	cmp	r0, #0
 8011ae6:	d163      	bne.n	8011bb0 <_dtoa_r+0x608>
 8011ae8:	4642      	mov	r2, r8
 8011aea:	464b      	mov	r3, r9
 8011aec:	4936      	ldr	r1, [pc, #216]	; (8011bc8 <_dtoa_r+0x620>)
 8011aee:	2000      	movs	r0, #0
 8011af0:	f7ee fbca 	bl	8000288 <__aeabi_dsub>
 8011af4:	4652      	mov	r2, sl
 8011af6:	465b      	mov	r3, fp
 8011af8:	f7ee fff0 	bl	8000adc <__aeabi_dcmplt>
 8011afc:	2800      	cmp	r0, #0
 8011afe:	f040 80b5 	bne.w	8011c6c <_dtoa_r+0x6c4>
 8011b02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011b04:	429d      	cmp	r5, r3
 8011b06:	d081      	beq.n	8011a0c <_dtoa_r+0x464>
 8011b08:	4b30      	ldr	r3, [pc, #192]	; (8011bcc <_dtoa_r+0x624>)
 8011b0a:	2200      	movs	r2, #0
 8011b0c:	4650      	mov	r0, sl
 8011b0e:	4659      	mov	r1, fp
 8011b10:	f7ee fd72 	bl	80005f8 <__aeabi_dmul>
 8011b14:	4b2d      	ldr	r3, [pc, #180]	; (8011bcc <_dtoa_r+0x624>)
 8011b16:	4682      	mov	sl, r0
 8011b18:	468b      	mov	fp, r1
 8011b1a:	4640      	mov	r0, r8
 8011b1c:	4649      	mov	r1, r9
 8011b1e:	2200      	movs	r2, #0
 8011b20:	f7ee fd6a 	bl	80005f8 <__aeabi_dmul>
 8011b24:	4680      	mov	r8, r0
 8011b26:	4689      	mov	r9, r1
 8011b28:	e7c6      	b.n	8011ab8 <_dtoa_r+0x510>
 8011b2a:	4650      	mov	r0, sl
 8011b2c:	4659      	mov	r1, fp
 8011b2e:	f7ee fd63 	bl	80005f8 <__aeabi_dmul>
 8011b32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011b34:	9d01      	ldr	r5, [sp, #4]
 8011b36:	930f      	str	r3, [sp, #60]	; 0x3c
 8011b38:	4682      	mov	sl, r0
 8011b3a:	468b      	mov	fp, r1
 8011b3c:	4649      	mov	r1, r9
 8011b3e:	4640      	mov	r0, r8
 8011b40:	f7ef f80a 	bl	8000b58 <__aeabi_d2iz>
 8011b44:	4606      	mov	r6, r0
 8011b46:	f7ee fced 	bl	8000524 <__aeabi_i2d>
 8011b4a:	3630      	adds	r6, #48	; 0x30
 8011b4c:	4602      	mov	r2, r0
 8011b4e:	460b      	mov	r3, r1
 8011b50:	4640      	mov	r0, r8
 8011b52:	4649      	mov	r1, r9
 8011b54:	f7ee fb98 	bl	8000288 <__aeabi_dsub>
 8011b58:	f805 6b01 	strb.w	r6, [r5], #1
 8011b5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011b5e:	429d      	cmp	r5, r3
 8011b60:	4680      	mov	r8, r0
 8011b62:	4689      	mov	r9, r1
 8011b64:	f04f 0200 	mov.w	r2, #0
 8011b68:	d124      	bne.n	8011bb4 <_dtoa_r+0x60c>
 8011b6a:	4b1b      	ldr	r3, [pc, #108]	; (8011bd8 <_dtoa_r+0x630>)
 8011b6c:	4650      	mov	r0, sl
 8011b6e:	4659      	mov	r1, fp
 8011b70:	f7ee fb8c 	bl	800028c <__adddf3>
 8011b74:	4602      	mov	r2, r0
 8011b76:	460b      	mov	r3, r1
 8011b78:	4640      	mov	r0, r8
 8011b7a:	4649      	mov	r1, r9
 8011b7c:	f7ee ffcc 	bl	8000b18 <__aeabi_dcmpgt>
 8011b80:	2800      	cmp	r0, #0
 8011b82:	d173      	bne.n	8011c6c <_dtoa_r+0x6c4>
 8011b84:	4652      	mov	r2, sl
 8011b86:	465b      	mov	r3, fp
 8011b88:	4913      	ldr	r1, [pc, #76]	; (8011bd8 <_dtoa_r+0x630>)
 8011b8a:	2000      	movs	r0, #0
 8011b8c:	f7ee fb7c 	bl	8000288 <__aeabi_dsub>
 8011b90:	4602      	mov	r2, r0
 8011b92:	460b      	mov	r3, r1
 8011b94:	4640      	mov	r0, r8
 8011b96:	4649      	mov	r1, r9
 8011b98:	f7ee ffa0 	bl	8000adc <__aeabi_dcmplt>
 8011b9c:	2800      	cmp	r0, #0
 8011b9e:	f43f af35 	beq.w	8011a0c <_dtoa_r+0x464>
 8011ba2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011ba4:	1e6b      	subs	r3, r5, #1
 8011ba6:	930f      	str	r3, [sp, #60]	; 0x3c
 8011ba8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011bac:	2b30      	cmp	r3, #48	; 0x30
 8011bae:	d0f8      	beq.n	8011ba2 <_dtoa_r+0x5fa>
 8011bb0:	9700      	str	r7, [sp, #0]
 8011bb2:	e049      	b.n	8011c48 <_dtoa_r+0x6a0>
 8011bb4:	4b05      	ldr	r3, [pc, #20]	; (8011bcc <_dtoa_r+0x624>)
 8011bb6:	f7ee fd1f 	bl	80005f8 <__aeabi_dmul>
 8011bba:	4680      	mov	r8, r0
 8011bbc:	4689      	mov	r9, r1
 8011bbe:	e7bd      	b.n	8011b3c <_dtoa_r+0x594>
 8011bc0:	08014300 	.word	0x08014300
 8011bc4:	080142d8 	.word	0x080142d8
 8011bc8:	3ff00000 	.word	0x3ff00000
 8011bcc:	40240000 	.word	0x40240000
 8011bd0:	401c0000 	.word	0x401c0000
 8011bd4:	40140000 	.word	0x40140000
 8011bd8:	3fe00000 	.word	0x3fe00000
 8011bdc:	9d01      	ldr	r5, [sp, #4]
 8011bde:	4656      	mov	r6, sl
 8011be0:	465f      	mov	r7, fp
 8011be2:	4642      	mov	r2, r8
 8011be4:	464b      	mov	r3, r9
 8011be6:	4630      	mov	r0, r6
 8011be8:	4639      	mov	r1, r7
 8011bea:	f7ee fe2f 	bl	800084c <__aeabi_ddiv>
 8011bee:	f7ee ffb3 	bl	8000b58 <__aeabi_d2iz>
 8011bf2:	4682      	mov	sl, r0
 8011bf4:	f7ee fc96 	bl	8000524 <__aeabi_i2d>
 8011bf8:	4642      	mov	r2, r8
 8011bfa:	464b      	mov	r3, r9
 8011bfc:	f7ee fcfc 	bl	80005f8 <__aeabi_dmul>
 8011c00:	4602      	mov	r2, r0
 8011c02:	460b      	mov	r3, r1
 8011c04:	4630      	mov	r0, r6
 8011c06:	4639      	mov	r1, r7
 8011c08:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8011c0c:	f7ee fb3c 	bl	8000288 <__aeabi_dsub>
 8011c10:	f805 6b01 	strb.w	r6, [r5], #1
 8011c14:	9e01      	ldr	r6, [sp, #4]
 8011c16:	9f03      	ldr	r7, [sp, #12]
 8011c18:	1bae      	subs	r6, r5, r6
 8011c1a:	42b7      	cmp	r7, r6
 8011c1c:	4602      	mov	r2, r0
 8011c1e:	460b      	mov	r3, r1
 8011c20:	d135      	bne.n	8011c8e <_dtoa_r+0x6e6>
 8011c22:	f7ee fb33 	bl	800028c <__adddf3>
 8011c26:	4642      	mov	r2, r8
 8011c28:	464b      	mov	r3, r9
 8011c2a:	4606      	mov	r6, r0
 8011c2c:	460f      	mov	r7, r1
 8011c2e:	f7ee ff73 	bl	8000b18 <__aeabi_dcmpgt>
 8011c32:	b9d0      	cbnz	r0, 8011c6a <_dtoa_r+0x6c2>
 8011c34:	4642      	mov	r2, r8
 8011c36:	464b      	mov	r3, r9
 8011c38:	4630      	mov	r0, r6
 8011c3a:	4639      	mov	r1, r7
 8011c3c:	f7ee ff44 	bl	8000ac8 <__aeabi_dcmpeq>
 8011c40:	b110      	cbz	r0, 8011c48 <_dtoa_r+0x6a0>
 8011c42:	f01a 0f01 	tst.w	sl, #1
 8011c46:	d110      	bne.n	8011c6a <_dtoa_r+0x6c2>
 8011c48:	4620      	mov	r0, r4
 8011c4a:	ee18 1a10 	vmov	r1, s16
 8011c4e:	f000 fc23 	bl	8012498 <_Bfree>
 8011c52:	2300      	movs	r3, #0
 8011c54:	9800      	ldr	r0, [sp, #0]
 8011c56:	702b      	strb	r3, [r5, #0]
 8011c58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011c5a:	3001      	adds	r0, #1
 8011c5c:	6018      	str	r0, [r3, #0]
 8011c5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	f43f acf1 	beq.w	8011648 <_dtoa_r+0xa0>
 8011c66:	601d      	str	r5, [r3, #0]
 8011c68:	e4ee      	b.n	8011648 <_dtoa_r+0xa0>
 8011c6a:	9f00      	ldr	r7, [sp, #0]
 8011c6c:	462b      	mov	r3, r5
 8011c6e:	461d      	mov	r5, r3
 8011c70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011c74:	2a39      	cmp	r2, #57	; 0x39
 8011c76:	d106      	bne.n	8011c86 <_dtoa_r+0x6de>
 8011c78:	9a01      	ldr	r2, [sp, #4]
 8011c7a:	429a      	cmp	r2, r3
 8011c7c:	d1f7      	bne.n	8011c6e <_dtoa_r+0x6c6>
 8011c7e:	9901      	ldr	r1, [sp, #4]
 8011c80:	2230      	movs	r2, #48	; 0x30
 8011c82:	3701      	adds	r7, #1
 8011c84:	700a      	strb	r2, [r1, #0]
 8011c86:	781a      	ldrb	r2, [r3, #0]
 8011c88:	3201      	adds	r2, #1
 8011c8a:	701a      	strb	r2, [r3, #0]
 8011c8c:	e790      	b.n	8011bb0 <_dtoa_r+0x608>
 8011c8e:	4ba6      	ldr	r3, [pc, #664]	; (8011f28 <_dtoa_r+0x980>)
 8011c90:	2200      	movs	r2, #0
 8011c92:	f7ee fcb1 	bl	80005f8 <__aeabi_dmul>
 8011c96:	2200      	movs	r2, #0
 8011c98:	2300      	movs	r3, #0
 8011c9a:	4606      	mov	r6, r0
 8011c9c:	460f      	mov	r7, r1
 8011c9e:	f7ee ff13 	bl	8000ac8 <__aeabi_dcmpeq>
 8011ca2:	2800      	cmp	r0, #0
 8011ca4:	d09d      	beq.n	8011be2 <_dtoa_r+0x63a>
 8011ca6:	e7cf      	b.n	8011c48 <_dtoa_r+0x6a0>
 8011ca8:	9a08      	ldr	r2, [sp, #32]
 8011caa:	2a00      	cmp	r2, #0
 8011cac:	f000 80d7 	beq.w	8011e5e <_dtoa_r+0x8b6>
 8011cb0:	9a06      	ldr	r2, [sp, #24]
 8011cb2:	2a01      	cmp	r2, #1
 8011cb4:	f300 80ba 	bgt.w	8011e2c <_dtoa_r+0x884>
 8011cb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011cba:	2a00      	cmp	r2, #0
 8011cbc:	f000 80b2 	beq.w	8011e24 <_dtoa_r+0x87c>
 8011cc0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011cc4:	9e07      	ldr	r6, [sp, #28]
 8011cc6:	9d04      	ldr	r5, [sp, #16]
 8011cc8:	9a04      	ldr	r2, [sp, #16]
 8011cca:	441a      	add	r2, r3
 8011ccc:	9204      	str	r2, [sp, #16]
 8011cce:	9a05      	ldr	r2, [sp, #20]
 8011cd0:	2101      	movs	r1, #1
 8011cd2:	441a      	add	r2, r3
 8011cd4:	4620      	mov	r0, r4
 8011cd6:	9205      	str	r2, [sp, #20]
 8011cd8:	f000 fc96 	bl	8012608 <__i2b>
 8011cdc:	4607      	mov	r7, r0
 8011cde:	2d00      	cmp	r5, #0
 8011ce0:	dd0c      	ble.n	8011cfc <_dtoa_r+0x754>
 8011ce2:	9b05      	ldr	r3, [sp, #20]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	dd09      	ble.n	8011cfc <_dtoa_r+0x754>
 8011ce8:	42ab      	cmp	r3, r5
 8011cea:	9a04      	ldr	r2, [sp, #16]
 8011cec:	bfa8      	it	ge
 8011cee:	462b      	movge	r3, r5
 8011cf0:	1ad2      	subs	r2, r2, r3
 8011cf2:	9204      	str	r2, [sp, #16]
 8011cf4:	9a05      	ldr	r2, [sp, #20]
 8011cf6:	1aed      	subs	r5, r5, r3
 8011cf8:	1ad3      	subs	r3, r2, r3
 8011cfa:	9305      	str	r3, [sp, #20]
 8011cfc:	9b07      	ldr	r3, [sp, #28]
 8011cfe:	b31b      	cbz	r3, 8011d48 <_dtoa_r+0x7a0>
 8011d00:	9b08      	ldr	r3, [sp, #32]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	f000 80af 	beq.w	8011e66 <_dtoa_r+0x8be>
 8011d08:	2e00      	cmp	r6, #0
 8011d0a:	dd13      	ble.n	8011d34 <_dtoa_r+0x78c>
 8011d0c:	4639      	mov	r1, r7
 8011d0e:	4632      	mov	r2, r6
 8011d10:	4620      	mov	r0, r4
 8011d12:	f000 fd39 	bl	8012788 <__pow5mult>
 8011d16:	ee18 2a10 	vmov	r2, s16
 8011d1a:	4601      	mov	r1, r0
 8011d1c:	4607      	mov	r7, r0
 8011d1e:	4620      	mov	r0, r4
 8011d20:	f000 fc88 	bl	8012634 <__multiply>
 8011d24:	ee18 1a10 	vmov	r1, s16
 8011d28:	4680      	mov	r8, r0
 8011d2a:	4620      	mov	r0, r4
 8011d2c:	f000 fbb4 	bl	8012498 <_Bfree>
 8011d30:	ee08 8a10 	vmov	s16, r8
 8011d34:	9b07      	ldr	r3, [sp, #28]
 8011d36:	1b9a      	subs	r2, r3, r6
 8011d38:	d006      	beq.n	8011d48 <_dtoa_r+0x7a0>
 8011d3a:	ee18 1a10 	vmov	r1, s16
 8011d3e:	4620      	mov	r0, r4
 8011d40:	f000 fd22 	bl	8012788 <__pow5mult>
 8011d44:	ee08 0a10 	vmov	s16, r0
 8011d48:	2101      	movs	r1, #1
 8011d4a:	4620      	mov	r0, r4
 8011d4c:	f000 fc5c 	bl	8012608 <__i2b>
 8011d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	4606      	mov	r6, r0
 8011d56:	f340 8088 	ble.w	8011e6a <_dtoa_r+0x8c2>
 8011d5a:	461a      	mov	r2, r3
 8011d5c:	4601      	mov	r1, r0
 8011d5e:	4620      	mov	r0, r4
 8011d60:	f000 fd12 	bl	8012788 <__pow5mult>
 8011d64:	9b06      	ldr	r3, [sp, #24]
 8011d66:	2b01      	cmp	r3, #1
 8011d68:	4606      	mov	r6, r0
 8011d6a:	f340 8081 	ble.w	8011e70 <_dtoa_r+0x8c8>
 8011d6e:	f04f 0800 	mov.w	r8, #0
 8011d72:	6933      	ldr	r3, [r6, #16]
 8011d74:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011d78:	6918      	ldr	r0, [r3, #16]
 8011d7a:	f000 fbf5 	bl	8012568 <__hi0bits>
 8011d7e:	f1c0 0020 	rsb	r0, r0, #32
 8011d82:	9b05      	ldr	r3, [sp, #20]
 8011d84:	4418      	add	r0, r3
 8011d86:	f010 001f 	ands.w	r0, r0, #31
 8011d8a:	f000 8092 	beq.w	8011eb2 <_dtoa_r+0x90a>
 8011d8e:	f1c0 0320 	rsb	r3, r0, #32
 8011d92:	2b04      	cmp	r3, #4
 8011d94:	f340 808a 	ble.w	8011eac <_dtoa_r+0x904>
 8011d98:	f1c0 001c 	rsb	r0, r0, #28
 8011d9c:	9b04      	ldr	r3, [sp, #16]
 8011d9e:	4403      	add	r3, r0
 8011da0:	9304      	str	r3, [sp, #16]
 8011da2:	9b05      	ldr	r3, [sp, #20]
 8011da4:	4403      	add	r3, r0
 8011da6:	4405      	add	r5, r0
 8011da8:	9305      	str	r3, [sp, #20]
 8011daa:	9b04      	ldr	r3, [sp, #16]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	dd07      	ble.n	8011dc0 <_dtoa_r+0x818>
 8011db0:	ee18 1a10 	vmov	r1, s16
 8011db4:	461a      	mov	r2, r3
 8011db6:	4620      	mov	r0, r4
 8011db8:	f000 fd40 	bl	801283c <__lshift>
 8011dbc:	ee08 0a10 	vmov	s16, r0
 8011dc0:	9b05      	ldr	r3, [sp, #20]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	dd05      	ble.n	8011dd2 <_dtoa_r+0x82a>
 8011dc6:	4631      	mov	r1, r6
 8011dc8:	461a      	mov	r2, r3
 8011dca:	4620      	mov	r0, r4
 8011dcc:	f000 fd36 	bl	801283c <__lshift>
 8011dd0:	4606      	mov	r6, r0
 8011dd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d06e      	beq.n	8011eb6 <_dtoa_r+0x90e>
 8011dd8:	ee18 0a10 	vmov	r0, s16
 8011ddc:	4631      	mov	r1, r6
 8011dde:	f000 fd9d 	bl	801291c <__mcmp>
 8011de2:	2800      	cmp	r0, #0
 8011de4:	da67      	bge.n	8011eb6 <_dtoa_r+0x90e>
 8011de6:	9b00      	ldr	r3, [sp, #0]
 8011de8:	3b01      	subs	r3, #1
 8011dea:	ee18 1a10 	vmov	r1, s16
 8011dee:	9300      	str	r3, [sp, #0]
 8011df0:	220a      	movs	r2, #10
 8011df2:	2300      	movs	r3, #0
 8011df4:	4620      	mov	r0, r4
 8011df6:	f000 fb71 	bl	80124dc <__multadd>
 8011dfa:	9b08      	ldr	r3, [sp, #32]
 8011dfc:	ee08 0a10 	vmov	s16, r0
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	f000 81b1 	beq.w	8012168 <_dtoa_r+0xbc0>
 8011e06:	2300      	movs	r3, #0
 8011e08:	4639      	mov	r1, r7
 8011e0a:	220a      	movs	r2, #10
 8011e0c:	4620      	mov	r0, r4
 8011e0e:	f000 fb65 	bl	80124dc <__multadd>
 8011e12:	9b02      	ldr	r3, [sp, #8]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	4607      	mov	r7, r0
 8011e18:	f300 808e 	bgt.w	8011f38 <_dtoa_r+0x990>
 8011e1c:	9b06      	ldr	r3, [sp, #24]
 8011e1e:	2b02      	cmp	r3, #2
 8011e20:	dc51      	bgt.n	8011ec6 <_dtoa_r+0x91e>
 8011e22:	e089      	b.n	8011f38 <_dtoa_r+0x990>
 8011e24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011e26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011e2a:	e74b      	b.n	8011cc4 <_dtoa_r+0x71c>
 8011e2c:	9b03      	ldr	r3, [sp, #12]
 8011e2e:	1e5e      	subs	r6, r3, #1
 8011e30:	9b07      	ldr	r3, [sp, #28]
 8011e32:	42b3      	cmp	r3, r6
 8011e34:	bfbf      	itttt	lt
 8011e36:	9b07      	ldrlt	r3, [sp, #28]
 8011e38:	9607      	strlt	r6, [sp, #28]
 8011e3a:	1af2      	sublt	r2, r6, r3
 8011e3c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8011e3e:	bfb6      	itet	lt
 8011e40:	189b      	addlt	r3, r3, r2
 8011e42:	1b9e      	subge	r6, r3, r6
 8011e44:	930a      	strlt	r3, [sp, #40]	; 0x28
 8011e46:	9b03      	ldr	r3, [sp, #12]
 8011e48:	bfb8      	it	lt
 8011e4a:	2600      	movlt	r6, #0
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	bfb7      	itett	lt
 8011e50:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8011e54:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011e58:	1a9d      	sublt	r5, r3, r2
 8011e5a:	2300      	movlt	r3, #0
 8011e5c:	e734      	b.n	8011cc8 <_dtoa_r+0x720>
 8011e5e:	9e07      	ldr	r6, [sp, #28]
 8011e60:	9d04      	ldr	r5, [sp, #16]
 8011e62:	9f08      	ldr	r7, [sp, #32]
 8011e64:	e73b      	b.n	8011cde <_dtoa_r+0x736>
 8011e66:	9a07      	ldr	r2, [sp, #28]
 8011e68:	e767      	b.n	8011d3a <_dtoa_r+0x792>
 8011e6a:	9b06      	ldr	r3, [sp, #24]
 8011e6c:	2b01      	cmp	r3, #1
 8011e6e:	dc18      	bgt.n	8011ea2 <_dtoa_r+0x8fa>
 8011e70:	f1ba 0f00 	cmp.w	sl, #0
 8011e74:	d115      	bne.n	8011ea2 <_dtoa_r+0x8fa>
 8011e76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011e7a:	b993      	cbnz	r3, 8011ea2 <_dtoa_r+0x8fa>
 8011e7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011e80:	0d1b      	lsrs	r3, r3, #20
 8011e82:	051b      	lsls	r3, r3, #20
 8011e84:	b183      	cbz	r3, 8011ea8 <_dtoa_r+0x900>
 8011e86:	9b04      	ldr	r3, [sp, #16]
 8011e88:	3301      	adds	r3, #1
 8011e8a:	9304      	str	r3, [sp, #16]
 8011e8c:	9b05      	ldr	r3, [sp, #20]
 8011e8e:	3301      	adds	r3, #1
 8011e90:	9305      	str	r3, [sp, #20]
 8011e92:	f04f 0801 	mov.w	r8, #1
 8011e96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	f47f af6a 	bne.w	8011d72 <_dtoa_r+0x7ca>
 8011e9e:	2001      	movs	r0, #1
 8011ea0:	e76f      	b.n	8011d82 <_dtoa_r+0x7da>
 8011ea2:	f04f 0800 	mov.w	r8, #0
 8011ea6:	e7f6      	b.n	8011e96 <_dtoa_r+0x8ee>
 8011ea8:	4698      	mov	r8, r3
 8011eaa:	e7f4      	b.n	8011e96 <_dtoa_r+0x8ee>
 8011eac:	f43f af7d 	beq.w	8011daa <_dtoa_r+0x802>
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	301c      	adds	r0, #28
 8011eb4:	e772      	b.n	8011d9c <_dtoa_r+0x7f4>
 8011eb6:	9b03      	ldr	r3, [sp, #12]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	dc37      	bgt.n	8011f2c <_dtoa_r+0x984>
 8011ebc:	9b06      	ldr	r3, [sp, #24]
 8011ebe:	2b02      	cmp	r3, #2
 8011ec0:	dd34      	ble.n	8011f2c <_dtoa_r+0x984>
 8011ec2:	9b03      	ldr	r3, [sp, #12]
 8011ec4:	9302      	str	r3, [sp, #8]
 8011ec6:	9b02      	ldr	r3, [sp, #8]
 8011ec8:	b96b      	cbnz	r3, 8011ee6 <_dtoa_r+0x93e>
 8011eca:	4631      	mov	r1, r6
 8011ecc:	2205      	movs	r2, #5
 8011ece:	4620      	mov	r0, r4
 8011ed0:	f000 fb04 	bl	80124dc <__multadd>
 8011ed4:	4601      	mov	r1, r0
 8011ed6:	4606      	mov	r6, r0
 8011ed8:	ee18 0a10 	vmov	r0, s16
 8011edc:	f000 fd1e 	bl	801291c <__mcmp>
 8011ee0:	2800      	cmp	r0, #0
 8011ee2:	f73f adbb 	bgt.w	8011a5c <_dtoa_r+0x4b4>
 8011ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ee8:	9d01      	ldr	r5, [sp, #4]
 8011eea:	43db      	mvns	r3, r3
 8011eec:	9300      	str	r3, [sp, #0]
 8011eee:	f04f 0800 	mov.w	r8, #0
 8011ef2:	4631      	mov	r1, r6
 8011ef4:	4620      	mov	r0, r4
 8011ef6:	f000 facf 	bl	8012498 <_Bfree>
 8011efa:	2f00      	cmp	r7, #0
 8011efc:	f43f aea4 	beq.w	8011c48 <_dtoa_r+0x6a0>
 8011f00:	f1b8 0f00 	cmp.w	r8, #0
 8011f04:	d005      	beq.n	8011f12 <_dtoa_r+0x96a>
 8011f06:	45b8      	cmp	r8, r7
 8011f08:	d003      	beq.n	8011f12 <_dtoa_r+0x96a>
 8011f0a:	4641      	mov	r1, r8
 8011f0c:	4620      	mov	r0, r4
 8011f0e:	f000 fac3 	bl	8012498 <_Bfree>
 8011f12:	4639      	mov	r1, r7
 8011f14:	4620      	mov	r0, r4
 8011f16:	f000 fabf 	bl	8012498 <_Bfree>
 8011f1a:	e695      	b.n	8011c48 <_dtoa_r+0x6a0>
 8011f1c:	2600      	movs	r6, #0
 8011f1e:	4637      	mov	r7, r6
 8011f20:	e7e1      	b.n	8011ee6 <_dtoa_r+0x93e>
 8011f22:	9700      	str	r7, [sp, #0]
 8011f24:	4637      	mov	r7, r6
 8011f26:	e599      	b.n	8011a5c <_dtoa_r+0x4b4>
 8011f28:	40240000 	.word	0x40240000
 8011f2c:	9b08      	ldr	r3, [sp, #32]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	f000 80ca 	beq.w	80120c8 <_dtoa_r+0xb20>
 8011f34:	9b03      	ldr	r3, [sp, #12]
 8011f36:	9302      	str	r3, [sp, #8]
 8011f38:	2d00      	cmp	r5, #0
 8011f3a:	dd05      	ble.n	8011f48 <_dtoa_r+0x9a0>
 8011f3c:	4639      	mov	r1, r7
 8011f3e:	462a      	mov	r2, r5
 8011f40:	4620      	mov	r0, r4
 8011f42:	f000 fc7b 	bl	801283c <__lshift>
 8011f46:	4607      	mov	r7, r0
 8011f48:	f1b8 0f00 	cmp.w	r8, #0
 8011f4c:	d05b      	beq.n	8012006 <_dtoa_r+0xa5e>
 8011f4e:	6879      	ldr	r1, [r7, #4]
 8011f50:	4620      	mov	r0, r4
 8011f52:	f000 fa61 	bl	8012418 <_Balloc>
 8011f56:	4605      	mov	r5, r0
 8011f58:	b928      	cbnz	r0, 8011f66 <_dtoa_r+0x9be>
 8011f5a:	4b87      	ldr	r3, [pc, #540]	; (8012178 <_dtoa_r+0xbd0>)
 8011f5c:	4602      	mov	r2, r0
 8011f5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011f62:	f7ff bb3b 	b.w	80115dc <_dtoa_r+0x34>
 8011f66:	693a      	ldr	r2, [r7, #16]
 8011f68:	3202      	adds	r2, #2
 8011f6a:	0092      	lsls	r2, r2, #2
 8011f6c:	f107 010c 	add.w	r1, r7, #12
 8011f70:	300c      	adds	r0, #12
 8011f72:	f7fe f9c3 	bl	80102fc <memcpy>
 8011f76:	2201      	movs	r2, #1
 8011f78:	4629      	mov	r1, r5
 8011f7a:	4620      	mov	r0, r4
 8011f7c:	f000 fc5e 	bl	801283c <__lshift>
 8011f80:	9b01      	ldr	r3, [sp, #4]
 8011f82:	f103 0901 	add.w	r9, r3, #1
 8011f86:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011f8a:	4413      	add	r3, r2
 8011f8c:	9305      	str	r3, [sp, #20]
 8011f8e:	f00a 0301 	and.w	r3, sl, #1
 8011f92:	46b8      	mov	r8, r7
 8011f94:	9304      	str	r3, [sp, #16]
 8011f96:	4607      	mov	r7, r0
 8011f98:	4631      	mov	r1, r6
 8011f9a:	ee18 0a10 	vmov	r0, s16
 8011f9e:	f7ff fa75 	bl	801148c <quorem>
 8011fa2:	4641      	mov	r1, r8
 8011fa4:	9002      	str	r0, [sp, #8]
 8011fa6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011faa:	ee18 0a10 	vmov	r0, s16
 8011fae:	f000 fcb5 	bl	801291c <__mcmp>
 8011fb2:	463a      	mov	r2, r7
 8011fb4:	9003      	str	r0, [sp, #12]
 8011fb6:	4631      	mov	r1, r6
 8011fb8:	4620      	mov	r0, r4
 8011fba:	f000 fccb 	bl	8012954 <__mdiff>
 8011fbe:	68c2      	ldr	r2, [r0, #12]
 8011fc0:	f109 3bff 	add.w	fp, r9, #4294967295
 8011fc4:	4605      	mov	r5, r0
 8011fc6:	bb02      	cbnz	r2, 801200a <_dtoa_r+0xa62>
 8011fc8:	4601      	mov	r1, r0
 8011fca:	ee18 0a10 	vmov	r0, s16
 8011fce:	f000 fca5 	bl	801291c <__mcmp>
 8011fd2:	4602      	mov	r2, r0
 8011fd4:	4629      	mov	r1, r5
 8011fd6:	4620      	mov	r0, r4
 8011fd8:	9207      	str	r2, [sp, #28]
 8011fda:	f000 fa5d 	bl	8012498 <_Bfree>
 8011fde:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8011fe2:	ea43 0102 	orr.w	r1, r3, r2
 8011fe6:	9b04      	ldr	r3, [sp, #16]
 8011fe8:	430b      	orrs	r3, r1
 8011fea:	464d      	mov	r5, r9
 8011fec:	d10f      	bne.n	801200e <_dtoa_r+0xa66>
 8011fee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011ff2:	d02a      	beq.n	801204a <_dtoa_r+0xaa2>
 8011ff4:	9b03      	ldr	r3, [sp, #12]
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	dd02      	ble.n	8012000 <_dtoa_r+0xa58>
 8011ffa:	9b02      	ldr	r3, [sp, #8]
 8011ffc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8012000:	f88b a000 	strb.w	sl, [fp]
 8012004:	e775      	b.n	8011ef2 <_dtoa_r+0x94a>
 8012006:	4638      	mov	r0, r7
 8012008:	e7ba      	b.n	8011f80 <_dtoa_r+0x9d8>
 801200a:	2201      	movs	r2, #1
 801200c:	e7e2      	b.n	8011fd4 <_dtoa_r+0xa2c>
 801200e:	9b03      	ldr	r3, [sp, #12]
 8012010:	2b00      	cmp	r3, #0
 8012012:	db04      	blt.n	801201e <_dtoa_r+0xa76>
 8012014:	9906      	ldr	r1, [sp, #24]
 8012016:	430b      	orrs	r3, r1
 8012018:	9904      	ldr	r1, [sp, #16]
 801201a:	430b      	orrs	r3, r1
 801201c:	d122      	bne.n	8012064 <_dtoa_r+0xabc>
 801201e:	2a00      	cmp	r2, #0
 8012020:	ddee      	ble.n	8012000 <_dtoa_r+0xa58>
 8012022:	ee18 1a10 	vmov	r1, s16
 8012026:	2201      	movs	r2, #1
 8012028:	4620      	mov	r0, r4
 801202a:	f000 fc07 	bl	801283c <__lshift>
 801202e:	4631      	mov	r1, r6
 8012030:	ee08 0a10 	vmov	s16, r0
 8012034:	f000 fc72 	bl	801291c <__mcmp>
 8012038:	2800      	cmp	r0, #0
 801203a:	dc03      	bgt.n	8012044 <_dtoa_r+0xa9c>
 801203c:	d1e0      	bne.n	8012000 <_dtoa_r+0xa58>
 801203e:	f01a 0f01 	tst.w	sl, #1
 8012042:	d0dd      	beq.n	8012000 <_dtoa_r+0xa58>
 8012044:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012048:	d1d7      	bne.n	8011ffa <_dtoa_r+0xa52>
 801204a:	2339      	movs	r3, #57	; 0x39
 801204c:	f88b 3000 	strb.w	r3, [fp]
 8012050:	462b      	mov	r3, r5
 8012052:	461d      	mov	r5, r3
 8012054:	3b01      	subs	r3, #1
 8012056:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801205a:	2a39      	cmp	r2, #57	; 0x39
 801205c:	d071      	beq.n	8012142 <_dtoa_r+0xb9a>
 801205e:	3201      	adds	r2, #1
 8012060:	701a      	strb	r2, [r3, #0]
 8012062:	e746      	b.n	8011ef2 <_dtoa_r+0x94a>
 8012064:	2a00      	cmp	r2, #0
 8012066:	dd07      	ble.n	8012078 <_dtoa_r+0xad0>
 8012068:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801206c:	d0ed      	beq.n	801204a <_dtoa_r+0xaa2>
 801206e:	f10a 0301 	add.w	r3, sl, #1
 8012072:	f88b 3000 	strb.w	r3, [fp]
 8012076:	e73c      	b.n	8011ef2 <_dtoa_r+0x94a>
 8012078:	9b05      	ldr	r3, [sp, #20]
 801207a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801207e:	4599      	cmp	r9, r3
 8012080:	d047      	beq.n	8012112 <_dtoa_r+0xb6a>
 8012082:	ee18 1a10 	vmov	r1, s16
 8012086:	2300      	movs	r3, #0
 8012088:	220a      	movs	r2, #10
 801208a:	4620      	mov	r0, r4
 801208c:	f000 fa26 	bl	80124dc <__multadd>
 8012090:	45b8      	cmp	r8, r7
 8012092:	ee08 0a10 	vmov	s16, r0
 8012096:	f04f 0300 	mov.w	r3, #0
 801209a:	f04f 020a 	mov.w	r2, #10
 801209e:	4641      	mov	r1, r8
 80120a0:	4620      	mov	r0, r4
 80120a2:	d106      	bne.n	80120b2 <_dtoa_r+0xb0a>
 80120a4:	f000 fa1a 	bl	80124dc <__multadd>
 80120a8:	4680      	mov	r8, r0
 80120aa:	4607      	mov	r7, r0
 80120ac:	f109 0901 	add.w	r9, r9, #1
 80120b0:	e772      	b.n	8011f98 <_dtoa_r+0x9f0>
 80120b2:	f000 fa13 	bl	80124dc <__multadd>
 80120b6:	4639      	mov	r1, r7
 80120b8:	4680      	mov	r8, r0
 80120ba:	2300      	movs	r3, #0
 80120bc:	220a      	movs	r2, #10
 80120be:	4620      	mov	r0, r4
 80120c0:	f000 fa0c 	bl	80124dc <__multadd>
 80120c4:	4607      	mov	r7, r0
 80120c6:	e7f1      	b.n	80120ac <_dtoa_r+0xb04>
 80120c8:	9b03      	ldr	r3, [sp, #12]
 80120ca:	9302      	str	r3, [sp, #8]
 80120cc:	9d01      	ldr	r5, [sp, #4]
 80120ce:	ee18 0a10 	vmov	r0, s16
 80120d2:	4631      	mov	r1, r6
 80120d4:	f7ff f9da 	bl	801148c <quorem>
 80120d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80120dc:	9b01      	ldr	r3, [sp, #4]
 80120de:	f805 ab01 	strb.w	sl, [r5], #1
 80120e2:	1aea      	subs	r2, r5, r3
 80120e4:	9b02      	ldr	r3, [sp, #8]
 80120e6:	4293      	cmp	r3, r2
 80120e8:	dd09      	ble.n	80120fe <_dtoa_r+0xb56>
 80120ea:	ee18 1a10 	vmov	r1, s16
 80120ee:	2300      	movs	r3, #0
 80120f0:	220a      	movs	r2, #10
 80120f2:	4620      	mov	r0, r4
 80120f4:	f000 f9f2 	bl	80124dc <__multadd>
 80120f8:	ee08 0a10 	vmov	s16, r0
 80120fc:	e7e7      	b.n	80120ce <_dtoa_r+0xb26>
 80120fe:	9b02      	ldr	r3, [sp, #8]
 8012100:	2b00      	cmp	r3, #0
 8012102:	bfc8      	it	gt
 8012104:	461d      	movgt	r5, r3
 8012106:	9b01      	ldr	r3, [sp, #4]
 8012108:	bfd8      	it	le
 801210a:	2501      	movle	r5, #1
 801210c:	441d      	add	r5, r3
 801210e:	f04f 0800 	mov.w	r8, #0
 8012112:	ee18 1a10 	vmov	r1, s16
 8012116:	2201      	movs	r2, #1
 8012118:	4620      	mov	r0, r4
 801211a:	f000 fb8f 	bl	801283c <__lshift>
 801211e:	4631      	mov	r1, r6
 8012120:	ee08 0a10 	vmov	s16, r0
 8012124:	f000 fbfa 	bl	801291c <__mcmp>
 8012128:	2800      	cmp	r0, #0
 801212a:	dc91      	bgt.n	8012050 <_dtoa_r+0xaa8>
 801212c:	d102      	bne.n	8012134 <_dtoa_r+0xb8c>
 801212e:	f01a 0f01 	tst.w	sl, #1
 8012132:	d18d      	bne.n	8012050 <_dtoa_r+0xaa8>
 8012134:	462b      	mov	r3, r5
 8012136:	461d      	mov	r5, r3
 8012138:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801213c:	2a30      	cmp	r2, #48	; 0x30
 801213e:	d0fa      	beq.n	8012136 <_dtoa_r+0xb8e>
 8012140:	e6d7      	b.n	8011ef2 <_dtoa_r+0x94a>
 8012142:	9a01      	ldr	r2, [sp, #4]
 8012144:	429a      	cmp	r2, r3
 8012146:	d184      	bne.n	8012052 <_dtoa_r+0xaaa>
 8012148:	9b00      	ldr	r3, [sp, #0]
 801214a:	3301      	adds	r3, #1
 801214c:	9300      	str	r3, [sp, #0]
 801214e:	2331      	movs	r3, #49	; 0x31
 8012150:	7013      	strb	r3, [r2, #0]
 8012152:	e6ce      	b.n	8011ef2 <_dtoa_r+0x94a>
 8012154:	4b09      	ldr	r3, [pc, #36]	; (801217c <_dtoa_r+0xbd4>)
 8012156:	f7ff ba95 	b.w	8011684 <_dtoa_r+0xdc>
 801215a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801215c:	2b00      	cmp	r3, #0
 801215e:	f47f aa6e 	bne.w	801163e <_dtoa_r+0x96>
 8012162:	4b07      	ldr	r3, [pc, #28]	; (8012180 <_dtoa_r+0xbd8>)
 8012164:	f7ff ba8e 	b.w	8011684 <_dtoa_r+0xdc>
 8012168:	9b02      	ldr	r3, [sp, #8]
 801216a:	2b00      	cmp	r3, #0
 801216c:	dcae      	bgt.n	80120cc <_dtoa_r+0xb24>
 801216e:	9b06      	ldr	r3, [sp, #24]
 8012170:	2b02      	cmp	r3, #2
 8012172:	f73f aea8 	bgt.w	8011ec6 <_dtoa_r+0x91e>
 8012176:	e7a9      	b.n	80120cc <_dtoa_r+0xb24>
 8012178:	08014268 	.word	0x08014268
 801217c:	080140c4 	.word	0x080140c4
 8012180:	080141e9 	.word	0x080141e9

08012184 <__sflush_r>:
 8012184:	898a      	ldrh	r2, [r1, #12]
 8012186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801218a:	4605      	mov	r5, r0
 801218c:	0710      	lsls	r0, r2, #28
 801218e:	460c      	mov	r4, r1
 8012190:	d458      	bmi.n	8012244 <__sflush_r+0xc0>
 8012192:	684b      	ldr	r3, [r1, #4]
 8012194:	2b00      	cmp	r3, #0
 8012196:	dc05      	bgt.n	80121a4 <__sflush_r+0x20>
 8012198:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801219a:	2b00      	cmp	r3, #0
 801219c:	dc02      	bgt.n	80121a4 <__sflush_r+0x20>
 801219e:	2000      	movs	r0, #0
 80121a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80121a6:	2e00      	cmp	r6, #0
 80121a8:	d0f9      	beq.n	801219e <__sflush_r+0x1a>
 80121aa:	2300      	movs	r3, #0
 80121ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80121b0:	682f      	ldr	r7, [r5, #0]
 80121b2:	602b      	str	r3, [r5, #0]
 80121b4:	d032      	beq.n	801221c <__sflush_r+0x98>
 80121b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80121b8:	89a3      	ldrh	r3, [r4, #12]
 80121ba:	075a      	lsls	r2, r3, #29
 80121bc:	d505      	bpl.n	80121ca <__sflush_r+0x46>
 80121be:	6863      	ldr	r3, [r4, #4]
 80121c0:	1ac0      	subs	r0, r0, r3
 80121c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80121c4:	b10b      	cbz	r3, 80121ca <__sflush_r+0x46>
 80121c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80121c8:	1ac0      	subs	r0, r0, r3
 80121ca:	2300      	movs	r3, #0
 80121cc:	4602      	mov	r2, r0
 80121ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80121d0:	6a21      	ldr	r1, [r4, #32]
 80121d2:	4628      	mov	r0, r5
 80121d4:	47b0      	blx	r6
 80121d6:	1c43      	adds	r3, r0, #1
 80121d8:	89a3      	ldrh	r3, [r4, #12]
 80121da:	d106      	bne.n	80121ea <__sflush_r+0x66>
 80121dc:	6829      	ldr	r1, [r5, #0]
 80121de:	291d      	cmp	r1, #29
 80121e0:	d82c      	bhi.n	801223c <__sflush_r+0xb8>
 80121e2:	4a2a      	ldr	r2, [pc, #168]	; (801228c <__sflush_r+0x108>)
 80121e4:	40ca      	lsrs	r2, r1
 80121e6:	07d6      	lsls	r6, r2, #31
 80121e8:	d528      	bpl.n	801223c <__sflush_r+0xb8>
 80121ea:	2200      	movs	r2, #0
 80121ec:	6062      	str	r2, [r4, #4]
 80121ee:	04d9      	lsls	r1, r3, #19
 80121f0:	6922      	ldr	r2, [r4, #16]
 80121f2:	6022      	str	r2, [r4, #0]
 80121f4:	d504      	bpl.n	8012200 <__sflush_r+0x7c>
 80121f6:	1c42      	adds	r2, r0, #1
 80121f8:	d101      	bne.n	80121fe <__sflush_r+0x7a>
 80121fa:	682b      	ldr	r3, [r5, #0]
 80121fc:	b903      	cbnz	r3, 8012200 <__sflush_r+0x7c>
 80121fe:	6560      	str	r0, [r4, #84]	; 0x54
 8012200:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012202:	602f      	str	r7, [r5, #0]
 8012204:	2900      	cmp	r1, #0
 8012206:	d0ca      	beq.n	801219e <__sflush_r+0x1a>
 8012208:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801220c:	4299      	cmp	r1, r3
 801220e:	d002      	beq.n	8012216 <__sflush_r+0x92>
 8012210:	4628      	mov	r0, r5
 8012212:	f7fe f889 	bl	8010328 <_free_r>
 8012216:	2000      	movs	r0, #0
 8012218:	6360      	str	r0, [r4, #52]	; 0x34
 801221a:	e7c1      	b.n	80121a0 <__sflush_r+0x1c>
 801221c:	6a21      	ldr	r1, [r4, #32]
 801221e:	2301      	movs	r3, #1
 8012220:	4628      	mov	r0, r5
 8012222:	47b0      	blx	r6
 8012224:	1c41      	adds	r1, r0, #1
 8012226:	d1c7      	bne.n	80121b8 <__sflush_r+0x34>
 8012228:	682b      	ldr	r3, [r5, #0]
 801222a:	2b00      	cmp	r3, #0
 801222c:	d0c4      	beq.n	80121b8 <__sflush_r+0x34>
 801222e:	2b1d      	cmp	r3, #29
 8012230:	d001      	beq.n	8012236 <__sflush_r+0xb2>
 8012232:	2b16      	cmp	r3, #22
 8012234:	d101      	bne.n	801223a <__sflush_r+0xb6>
 8012236:	602f      	str	r7, [r5, #0]
 8012238:	e7b1      	b.n	801219e <__sflush_r+0x1a>
 801223a:	89a3      	ldrh	r3, [r4, #12]
 801223c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012240:	81a3      	strh	r3, [r4, #12]
 8012242:	e7ad      	b.n	80121a0 <__sflush_r+0x1c>
 8012244:	690f      	ldr	r7, [r1, #16]
 8012246:	2f00      	cmp	r7, #0
 8012248:	d0a9      	beq.n	801219e <__sflush_r+0x1a>
 801224a:	0793      	lsls	r3, r2, #30
 801224c:	680e      	ldr	r6, [r1, #0]
 801224e:	bf08      	it	eq
 8012250:	694b      	ldreq	r3, [r1, #20]
 8012252:	600f      	str	r7, [r1, #0]
 8012254:	bf18      	it	ne
 8012256:	2300      	movne	r3, #0
 8012258:	eba6 0807 	sub.w	r8, r6, r7
 801225c:	608b      	str	r3, [r1, #8]
 801225e:	f1b8 0f00 	cmp.w	r8, #0
 8012262:	dd9c      	ble.n	801219e <__sflush_r+0x1a>
 8012264:	6a21      	ldr	r1, [r4, #32]
 8012266:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012268:	4643      	mov	r3, r8
 801226a:	463a      	mov	r2, r7
 801226c:	4628      	mov	r0, r5
 801226e:	47b0      	blx	r6
 8012270:	2800      	cmp	r0, #0
 8012272:	dc06      	bgt.n	8012282 <__sflush_r+0xfe>
 8012274:	89a3      	ldrh	r3, [r4, #12]
 8012276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801227a:	81a3      	strh	r3, [r4, #12]
 801227c:	f04f 30ff 	mov.w	r0, #4294967295
 8012280:	e78e      	b.n	80121a0 <__sflush_r+0x1c>
 8012282:	4407      	add	r7, r0
 8012284:	eba8 0800 	sub.w	r8, r8, r0
 8012288:	e7e9      	b.n	801225e <__sflush_r+0xda>
 801228a:	bf00      	nop
 801228c:	20400001 	.word	0x20400001

08012290 <_fflush_r>:
 8012290:	b538      	push	{r3, r4, r5, lr}
 8012292:	690b      	ldr	r3, [r1, #16]
 8012294:	4605      	mov	r5, r0
 8012296:	460c      	mov	r4, r1
 8012298:	b913      	cbnz	r3, 80122a0 <_fflush_r+0x10>
 801229a:	2500      	movs	r5, #0
 801229c:	4628      	mov	r0, r5
 801229e:	bd38      	pop	{r3, r4, r5, pc}
 80122a0:	b118      	cbz	r0, 80122aa <_fflush_r+0x1a>
 80122a2:	6983      	ldr	r3, [r0, #24]
 80122a4:	b90b      	cbnz	r3, 80122aa <_fflush_r+0x1a>
 80122a6:	f7fd ff5f 	bl	8010168 <__sinit>
 80122aa:	4b14      	ldr	r3, [pc, #80]	; (80122fc <_fflush_r+0x6c>)
 80122ac:	429c      	cmp	r4, r3
 80122ae:	d11b      	bne.n	80122e8 <_fflush_r+0x58>
 80122b0:	686c      	ldr	r4, [r5, #4]
 80122b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d0ef      	beq.n	801229a <_fflush_r+0xa>
 80122ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80122bc:	07d0      	lsls	r0, r2, #31
 80122be:	d404      	bmi.n	80122ca <_fflush_r+0x3a>
 80122c0:	0599      	lsls	r1, r3, #22
 80122c2:	d402      	bmi.n	80122ca <_fflush_r+0x3a>
 80122c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80122c6:	f7f3 fdf3 	bl	8005eb0 <__retarget_lock_acquire_recursive>
 80122ca:	4628      	mov	r0, r5
 80122cc:	4621      	mov	r1, r4
 80122ce:	f7ff ff59 	bl	8012184 <__sflush_r>
 80122d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80122d4:	07da      	lsls	r2, r3, #31
 80122d6:	4605      	mov	r5, r0
 80122d8:	d4e0      	bmi.n	801229c <_fflush_r+0xc>
 80122da:	89a3      	ldrh	r3, [r4, #12]
 80122dc:	059b      	lsls	r3, r3, #22
 80122de:	d4dd      	bmi.n	801229c <_fflush_r+0xc>
 80122e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80122e2:	f7f3 fdf9 	bl	8005ed8 <__retarget_lock_release_recursive>
 80122e6:	e7d9      	b.n	801229c <_fflush_r+0xc>
 80122e8:	4b05      	ldr	r3, [pc, #20]	; (8012300 <_fflush_r+0x70>)
 80122ea:	429c      	cmp	r4, r3
 80122ec:	d101      	bne.n	80122f2 <_fflush_r+0x62>
 80122ee:	68ac      	ldr	r4, [r5, #8]
 80122f0:	e7df      	b.n	80122b2 <_fflush_r+0x22>
 80122f2:	4b04      	ldr	r3, [pc, #16]	; (8012304 <_fflush_r+0x74>)
 80122f4:	429c      	cmp	r4, r3
 80122f6:	bf08      	it	eq
 80122f8:	68ec      	ldreq	r4, [r5, #12]
 80122fa:	e7da      	b.n	80122b2 <_fflush_r+0x22>
 80122fc:	08014070 	.word	0x08014070
 8012300:	08014090 	.word	0x08014090
 8012304:	08014050 	.word	0x08014050

08012308 <_localeconv_r>:
 8012308:	4800      	ldr	r0, [pc, #0]	; (801230c <_localeconv_r+0x4>)
 801230a:	4770      	bx	lr
 801230c:	200001c0 	.word	0x200001c0

08012310 <_lseek_r>:
 8012310:	b538      	push	{r3, r4, r5, lr}
 8012312:	4d07      	ldr	r5, [pc, #28]	; (8012330 <_lseek_r+0x20>)
 8012314:	4604      	mov	r4, r0
 8012316:	4608      	mov	r0, r1
 8012318:	4611      	mov	r1, r2
 801231a:	2200      	movs	r2, #0
 801231c:	602a      	str	r2, [r5, #0]
 801231e:	461a      	mov	r2, r3
 8012320:	f7f3 fca6 	bl	8005c70 <_lseek>
 8012324:	1c43      	adds	r3, r0, #1
 8012326:	d102      	bne.n	801232e <_lseek_r+0x1e>
 8012328:	682b      	ldr	r3, [r5, #0]
 801232a:	b103      	cbz	r3, 801232e <_lseek_r+0x1e>
 801232c:	6023      	str	r3, [r4, #0]
 801232e:	bd38      	pop	{r3, r4, r5, pc}
 8012330:	20005cb4 	.word	0x20005cb4

08012334 <__swhatbuf_r>:
 8012334:	b570      	push	{r4, r5, r6, lr}
 8012336:	460e      	mov	r6, r1
 8012338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801233c:	2900      	cmp	r1, #0
 801233e:	b096      	sub	sp, #88	; 0x58
 8012340:	4614      	mov	r4, r2
 8012342:	461d      	mov	r5, r3
 8012344:	da08      	bge.n	8012358 <__swhatbuf_r+0x24>
 8012346:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801234a:	2200      	movs	r2, #0
 801234c:	602a      	str	r2, [r5, #0]
 801234e:	061a      	lsls	r2, r3, #24
 8012350:	d410      	bmi.n	8012374 <__swhatbuf_r+0x40>
 8012352:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012356:	e00e      	b.n	8012376 <__swhatbuf_r+0x42>
 8012358:	466a      	mov	r2, sp
 801235a:	f000 ff37 	bl	80131cc <_fstat_r>
 801235e:	2800      	cmp	r0, #0
 8012360:	dbf1      	blt.n	8012346 <__swhatbuf_r+0x12>
 8012362:	9a01      	ldr	r2, [sp, #4]
 8012364:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012368:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801236c:	425a      	negs	r2, r3
 801236e:	415a      	adcs	r2, r3
 8012370:	602a      	str	r2, [r5, #0]
 8012372:	e7ee      	b.n	8012352 <__swhatbuf_r+0x1e>
 8012374:	2340      	movs	r3, #64	; 0x40
 8012376:	2000      	movs	r0, #0
 8012378:	6023      	str	r3, [r4, #0]
 801237a:	b016      	add	sp, #88	; 0x58
 801237c:	bd70      	pop	{r4, r5, r6, pc}
	...

08012380 <__smakebuf_r>:
 8012380:	898b      	ldrh	r3, [r1, #12]
 8012382:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012384:	079d      	lsls	r5, r3, #30
 8012386:	4606      	mov	r6, r0
 8012388:	460c      	mov	r4, r1
 801238a:	d507      	bpl.n	801239c <__smakebuf_r+0x1c>
 801238c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012390:	6023      	str	r3, [r4, #0]
 8012392:	6123      	str	r3, [r4, #16]
 8012394:	2301      	movs	r3, #1
 8012396:	6163      	str	r3, [r4, #20]
 8012398:	b002      	add	sp, #8
 801239a:	bd70      	pop	{r4, r5, r6, pc}
 801239c:	ab01      	add	r3, sp, #4
 801239e:	466a      	mov	r2, sp
 80123a0:	f7ff ffc8 	bl	8012334 <__swhatbuf_r>
 80123a4:	9900      	ldr	r1, [sp, #0]
 80123a6:	4605      	mov	r5, r0
 80123a8:	4630      	mov	r0, r6
 80123aa:	f7fe f829 	bl	8010400 <_malloc_r>
 80123ae:	b948      	cbnz	r0, 80123c4 <__smakebuf_r+0x44>
 80123b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80123b4:	059a      	lsls	r2, r3, #22
 80123b6:	d4ef      	bmi.n	8012398 <__smakebuf_r+0x18>
 80123b8:	f023 0303 	bic.w	r3, r3, #3
 80123bc:	f043 0302 	orr.w	r3, r3, #2
 80123c0:	81a3      	strh	r3, [r4, #12]
 80123c2:	e7e3      	b.n	801238c <__smakebuf_r+0xc>
 80123c4:	4b0d      	ldr	r3, [pc, #52]	; (80123fc <__smakebuf_r+0x7c>)
 80123c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80123c8:	89a3      	ldrh	r3, [r4, #12]
 80123ca:	6020      	str	r0, [r4, #0]
 80123cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80123d0:	81a3      	strh	r3, [r4, #12]
 80123d2:	9b00      	ldr	r3, [sp, #0]
 80123d4:	6163      	str	r3, [r4, #20]
 80123d6:	9b01      	ldr	r3, [sp, #4]
 80123d8:	6120      	str	r0, [r4, #16]
 80123da:	b15b      	cbz	r3, 80123f4 <__smakebuf_r+0x74>
 80123dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80123e0:	4630      	mov	r0, r6
 80123e2:	f000 ff05 	bl	80131f0 <_isatty_r>
 80123e6:	b128      	cbz	r0, 80123f4 <__smakebuf_r+0x74>
 80123e8:	89a3      	ldrh	r3, [r4, #12]
 80123ea:	f023 0303 	bic.w	r3, r3, #3
 80123ee:	f043 0301 	orr.w	r3, r3, #1
 80123f2:	81a3      	strh	r3, [r4, #12]
 80123f4:	89a0      	ldrh	r0, [r4, #12]
 80123f6:	4305      	orrs	r5, r0
 80123f8:	81a5      	strh	r5, [r4, #12]
 80123fa:	e7cd      	b.n	8012398 <__smakebuf_r+0x18>
 80123fc:	08010101 	.word	0x08010101

08012400 <__malloc_lock>:
 8012400:	4801      	ldr	r0, [pc, #4]	; (8012408 <__malloc_lock+0x8>)
 8012402:	f7f3 bd55 	b.w	8005eb0 <__retarget_lock_acquire_recursive>
 8012406:	bf00      	nop
 8012408:	20000c88 	.word	0x20000c88

0801240c <__malloc_unlock>:
 801240c:	4801      	ldr	r0, [pc, #4]	; (8012414 <__malloc_unlock+0x8>)
 801240e:	f7f3 bd63 	b.w	8005ed8 <__retarget_lock_release_recursive>
 8012412:	bf00      	nop
 8012414:	20000c88 	.word	0x20000c88

08012418 <_Balloc>:
 8012418:	b570      	push	{r4, r5, r6, lr}
 801241a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801241c:	4604      	mov	r4, r0
 801241e:	460d      	mov	r5, r1
 8012420:	b976      	cbnz	r6, 8012440 <_Balloc+0x28>
 8012422:	2010      	movs	r0, #16
 8012424:	f7fd ff62 	bl	80102ec <malloc>
 8012428:	4602      	mov	r2, r0
 801242a:	6260      	str	r0, [r4, #36]	; 0x24
 801242c:	b920      	cbnz	r0, 8012438 <_Balloc+0x20>
 801242e:	4b18      	ldr	r3, [pc, #96]	; (8012490 <_Balloc+0x78>)
 8012430:	4818      	ldr	r0, [pc, #96]	; (8012494 <_Balloc+0x7c>)
 8012432:	2166      	movs	r1, #102	; 0x66
 8012434:	f000 fe9a 	bl	801316c <__assert_func>
 8012438:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801243c:	6006      	str	r6, [r0, #0]
 801243e:	60c6      	str	r6, [r0, #12]
 8012440:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012442:	68f3      	ldr	r3, [r6, #12]
 8012444:	b183      	cbz	r3, 8012468 <_Balloc+0x50>
 8012446:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012448:	68db      	ldr	r3, [r3, #12]
 801244a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801244e:	b9b8      	cbnz	r0, 8012480 <_Balloc+0x68>
 8012450:	2101      	movs	r1, #1
 8012452:	fa01 f605 	lsl.w	r6, r1, r5
 8012456:	1d72      	adds	r2, r6, #5
 8012458:	0092      	lsls	r2, r2, #2
 801245a:	4620      	mov	r0, r4
 801245c:	f000 fb60 	bl	8012b20 <_calloc_r>
 8012460:	b160      	cbz	r0, 801247c <_Balloc+0x64>
 8012462:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012466:	e00e      	b.n	8012486 <_Balloc+0x6e>
 8012468:	2221      	movs	r2, #33	; 0x21
 801246a:	2104      	movs	r1, #4
 801246c:	4620      	mov	r0, r4
 801246e:	f000 fb57 	bl	8012b20 <_calloc_r>
 8012472:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012474:	60f0      	str	r0, [r6, #12]
 8012476:	68db      	ldr	r3, [r3, #12]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d1e4      	bne.n	8012446 <_Balloc+0x2e>
 801247c:	2000      	movs	r0, #0
 801247e:	bd70      	pop	{r4, r5, r6, pc}
 8012480:	6802      	ldr	r2, [r0, #0]
 8012482:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012486:	2300      	movs	r3, #0
 8012488:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801248c:	e7f7      	b.n	801247e <_Balloc+0x66>
 801248e:	bf00      	nop
 8012490:	080141f6 	.word	0x080141f6
 8012494:	08014279 	.word	0x08014279

08012498 <_Bfree>:
 8012498:	b570      	push	{r4, r5, r6, lr}
 801249a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801249c:	4605      	mov	r5, r0
 801249e:	460c      	mov	r4, r1
 80124a0:	b976      	cbnz	r6, 80124c0 <_Bfree+0x28>
 80124a2:	2010      	movs	r0, #16
 80124a4:	f7fd ff22 	bl	80102ec <malloc>
 80124a8:	4602      	mov	r2, r0
 80124aa:	6268      	str	r0, [r5, #36]	; 0x24
 80124ac:	b920      	cbnz	r0, 80124b8 <_Bfree+0x20>
 80124ae:	4b09      	ldr	r3, [pc, #36]	; (80124d4 <_Bfree+0x3c>)
 80124b0:	4809      	ldr	r0, [pc, #36]	; (80124d8 <_Bfree+0x40>)
 80124b2:	218a      	movs	r1, #138	; 0x8a
 80124b4:	f000 fe5a 	bl	801316c <__assert_func>
 80124b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80124bc:	6006      	str	r6, [r0, #0]
 80124be:	60c6      	str	r6, [r0, #12]
 80124c0:	b13c      	cbz	r4, 80124d2 <_Bfree+0x3a>
 80124c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80124c4:	6862      	ldr	r2, [r4, #4]
 80124c6:	68db      	ldr	r3, [r3, #12]
 80124c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80124cc:	6021      	str	r1, [r4, #0]
 80124ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80124d2:	bd70      	pop	{r4, r5, r6, pc}
 80124d4:	080141f6 	.word	0x080141f6
 80124d8:	08014279 	.word	0x08014279

080124dc <__multadd>:
 80124dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124e0:	690d      	ldr	r5, [r1, #16]
 80124e2:	4607      	mov	r7, r0
 80124e4:	460c      	mov	r4, r1
 80124e6:	461e      	mov	r6, r3
 80124e8:	f101 0c14 	add.w	ip, r1, #20
 80124ec:	2000      	movs	r0, #0
 80124ee:	f8dc 3000 	ldr.w	r3, [ip]
 80124f2:	b299      	uxth	r1, r3
 80124f4:	fb02 6101 	mla	r1, r2, r1, r6
 80124f8:	0c1e      	lsrs	r6, r3, #16
 80124fa:	0c0b      	lsrs	r3, r1, #16
 80124fc:	fb02 3306 	mla	r3, r2, r6, r3
 8012500:	b289      	uxth	r1, r1
 8012502:	3001      	adds	r0, #1
 8012504:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012508:	4285      	cmp	r5, r0
 801250a:	f84c 1b04 	str.w	r1, [ip], #4
 801250e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012512:	dcec      	bgt.n	80124ee <__multadd+0x12>
 8012514:	b30e      	cbz	r6, 801255a <__multadd+0x7e>
 8012516:	68a3      	ldr	r3, [r4, #8]
 8012518:	42ab      	cmp	r3, r5
 801251a:	dc19      	bgt.n	8012550 <__multadd+0x74>
 801251c:	6861      	ldr	r1, [r4, #4]
 801251e:	4638      	mov	r0, r7
 8012520:	3101      	adds	r1, #1
 8012522:	f7ff ff79 	bl	8012418 <_Balloc>
 8012526:	4680      	mov	r8, r0
 8012528:	b928      	cbnz	r0, 8012536 <__multadd+0x5a>
 801252a:	4602      	mov	r2, r0
 801252c:	4b0c      	ldr	r3, [pc, #48]	; (8012560 <__multadd+0x84>)
 801252e:	480d      	ldr	r0, [pc, #52]	; (8012564 <__multadd+0x88>)
 8012530:	21b5      	movs	r1, #181	; 0xb5
 8012532:	f000 fe1b 	bl	801316c <__assert_func>
 8012536:	6922      	ldr	r2, [r4, #16]
 8012538:	3202      	adds	r2, #2
 801253a:	f104 010c 	add.w	r1, r4, #12
 801253e:	0092      	lsls	r2, r2, #2
 8012540:	300c      	adds	r0, #12
 8012542:	f7fd fedb 	bl	80102fc <memcpy>
 8012546:	4621      	mov	r1, r4
 8012548:	4638      	mov	r0, r7
 801254a:	f7ff ffa5 	bl	8012498 <_Bfree>
 801254e:	4644      	mov	r4, r8
 8012550:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012554:	3501      	adds	r5, #1
 8012556:	615e      	str	r6, [r3, #20]
 8012558:	6125      	str	r5, [r4, #16]
 801255a:	4620      	mov	r0, r4
 801255c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012560:	08014268 	.word	0x08014268
 8012564:	08014279 	.word	0x08014279

08012568 <__hi0bits>:
 8012568:	0c03      	lsrs	r3, r0, #16
 801256a:	041b      	lsls	r3, r3, #16
 801256c:	b9d3      	cbnz	r3, 80125a4 <__hi0bits+0x3c>
 801256e:	0400      	lsls	r0, r0, #16
 8012570:	2310      	movs	r3, #16
 8012572:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012576:	bf04      	itt	eq
 8012578:	0200      	lsleq	r0, r0, #8
 801257a:	3308      	addeq	r3, #8
 801257c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012580:	bf04      	itt	eq
 8012582:	0100      	lsleq	r0, r0, #4
 8012584:	3304      	addeq	r3, #4
 8012586:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801258a:	bf04      	itt	eq
 801258c:	0080      	lsleq	r0, r0, #2
 801258e:	3302      	addeq	r3, #2
 8012590:	2800      	cmp	r0, #0
 8012592:	db05      	blt.n	80125a0 <__hi0bits+0x38>
 8012594:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012598:	f103 0301 	add.w	r3, r3, #1
 801259c:	bf08      	it	eq
 801259e:	2320      	moveq	r3, #32
 80125a0:	4618      	mov	r0, r3
 80125a2:	4770      	bx	lr
 80125a4:	2300      	movs	r3, #0
 80125a6:	e7e4      	b.n	8012572 <__hi0bits+0xa>

080125a8 <__lo0bits>:
 80125a8:	6803      	ldr	r3, [r0, #0]
 80125aa:	f013 0207 	ands.w	r2, r3, #7
 80125ae:	4601      	mov	r1, r0
 80125b0:	d00b      	beq.n	80125ca <__lo0bits+0x22>
 80125b2:	07da      	lsls	r2, r3, #31
 80125b4:	d423      	bmi.n	80125fe <__lo0bits+0x56>
 80125b6:	0798      	lsls	r0, r3, #30
 80125b8:	bf49      	itett	mi
 80125ba:	085b      	lsrmi	r3, r3, #1
 80125bc:	089b      	lsrpl	r3, r3, #2
 80125be:	2001      	movmi	r0, #1
 80125c0:	600b      	strmi	r3, [r1, #0]
 80125c2:	bf5c      	itt	pl
 80125c4:	600b      	strpl	r3, [r1, #0]
 80125c6:	2002      	movpl	r0, #2
 80125c8:	4770      	bx	lr
 80125ca:	b298      	uxth	r0, r3
 80125cc:	b9a8      	cbnz	r0, 80125fa <__lo0bits+0x52>
 80125ce:	0c1b      	lsrs	r3, r3, #16
 80125d0:	2010      	movs	r0, #16
 80125d2:	b2da      	uxtb	r2, r3
 80125d4:	b90a      	cbnz	r2, 80125da <__lo0bits+0x32>
 80125d6:	3008      	adds	r0, #8
 80125d8:	0a1b      	lsrs	r3, r3, #8
 80125da:	071a      	lsls	r2, r3, #28
 80125dc:	bf04      	itt	eq
 80125de:	091b      	lsreq	r3, r3, #4
 80125e0:	3004      	addeq	r0, #4
 80125e2:	079a      	lsls	r2, r3, #30
 80125e4:	bf04      	itt	eq
 80125e6:	089b      	lsreq	r3, r3, #2
 80125e8:	3002      	addeq	r0, #2
 80125ea:	07da      	lsls	r2, r3, #31
 80125ec:	d403      	bmi.n	80125f6 <__lo0bits+0x4e>
 80125ee:	085b      	lsrs	r3, r3, #1
 80125f0:	f100 0001 	add.w	r0, r0, #1
 80125f4:	d005      	beq.n	8012602 <__lo0bits+0x5a>
 80125f6:	600b      	str	r3, [r1, #0]
 80125f8:	4770      	bx	lr
 80125fa:	4610      	mov	r0, r2
 80125fc:	e7e9      	b.n	80125d2 <__lo0bits+0x2a>
 80125fe:	2000      	movs	r0, #0
 8012600:	4770      	bx	lr
 8012602:	2020      	movs	r0, #32
 8012604:	4770      	bx	lr
	...

08012608 <__i2b>:
 8012608:	b510      	push	{r4, lr}
 801260a:	460c      	mov	r4, r1
 801260c:	2101      	movs	r1, #1
 801260e:	f7ff ff03 	bl	8012418 <_Balloc>
 8012612:	4602      	mov	r2, r0
 8012614:	b928      	cbnz	r0, 8012622 <__i2b+0x1a>
 8012616:	4b05      	ldr	r3, [pc, #20]	; (801262c <__i2b+0x24>)
 8012618:	4805      	ldr	r0, [pc, #20]	; (8012630 <__i2b+0x28>)
 801261a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801261e:	f000 fda5 	bl	801316c <__assert_func>
 8012622:	2301      	movs	r3, #1
 8012624:	6144      	str	r4, [r0, #20]
 8012626:	6103      	str	r3, [r0, #16]
 8012628:	bd10      	pop	{r4, pc}
 801262a:	bf00      	nop
 801262c:	08014268 	.word	0x08014268
 8012630:	08014279 	.word	0x08014279

08012634 <__multiply>:
 8012634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012638:	4691      	mov	r9, r2
 801263a:	690a      	ldr	r2, [r1, #16]
 801263c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012640:	429a      	cmp	r2, r3
 8012642:	bfb8      	it	lt
 8012644:	460b      	movlt	r3, r1
 8012646:	460c      	mov	r4, r1
 8012648:	bfbc      	itt	lt
 801264a:	464c      	movlt	r4, r9
 801264c:	4699      	movlt	r9, r3
 801264e:	6927      	ldr	r7, [r4, #16]
 8012650:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012654:	68a3      	ldr	r3, [r4, #8]
 8012656:	6861      	ldr	r1, [r4, #4]
 8012658:	eb07 060a 	add.w	r6, r7, sl
 801265c:	42b3      	cmp	r3, r6
 801265e:	b085      	sub	sp, #20
 8012660:	bfb8      	it	lt
 8012662:	3101      	addlt	r1, #1
 8012664:	f7ff fed8 	bl	8012418 <_Balloc>
 8012668:	b930      	cbnz	r0, 8012678 <__multiply+0x44>
 801266a:	4602      	mov	r2, r0
 801266c:	4b44      	ldr	r3, [pc, #272]	; (8012780 <__multiply+0x14c>)
 801266e:	4845      	ldr	r0, [pc, #276]	; (8012784 <__multiply+0x150>)
 8012670:	f240 115d 	movw	r1, #349	; 0x15d
 8012674:	f000 fd7a 	bl	801316c <__assert_func>
 8012678:	f100 0514 	add.w	r5, r0, #20
 801267c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012680:	462b      	mov	r3, r5
 8012682:	2200      	movs	r2, #0
 8012684:	4543      	cmp	r3, r8
 8012686:	d321      	bcc.n	80126cc <__multiply+0x98>
 8012688:	f104 0314 	add.w	r3, r4, #20
 801268c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012690:	f109 0314 	add.w	r3, r9, #20
 8012694:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012698:	9202      	str	r2, [sp, #8]
 801269a:	1b3a      	subs	r2, r7, r4
 801269c:	3a15      	subs	r2, #21
 801269e:	f022 0203 	bic.w	r2, r2, #3
 80126a2:	3204      	adds	r2, #4
 80126a4:	f104 0115 	add.w	r1, r4, #21
 80126a8:	428f      	cmp	r7, r1
 80126aa:	bf38      	it	cc
 80126ac:	2204      	movcc	r2, #4
 80126ae:	9201      	str	r2, [sp, #4]
 80126b0:	9a02      	ldr	r2, [sp, #8]
 80126b2:	9303      	str	r3, [sp, #12]
 80126b4:	429a      	cmp	r2, r3
 80126b6:	d80c      	bhi.n	80126d2 <__multiply+0x9e>
 80126b8:	2e00      	cmp	r6, #0
 80126ba:	dd03      	ble.n	80126c4 <__multiply+0x90>
 80126bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d05a      	beq.n	801277a <__multiply+0x146>
 80126c4:	6106      	str	r6, [r0, #16]
 80126c6:	b005      	add	sp, #20
 80126c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126cc:	f843 2b04 	str.w	r2, [r3], #4
 80126d0:	e7d8      	b.n	8012684 <__multiply+0x50>
 80126d2:	f8b3 a000 	ldrh.w	sl, [r3]
 80126d6:	f1ba 0f00 	cmp.w	sl, #0
 80126da:	d024      	beq.n	8012726 <__multiply+0xf2>
 80126dc:	f104 0e14 	add.w	lr, r4, #20
 80126e0:	46a9      	mov	r9, r5
 80126e2:	f04f 0c00 	mov.w	ip, #0
 80126e6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80126ea:	f8d9 1000 	ldr.w	r1, [r9]
 80126ee:	fa1f fb82 	uxth.w	fp, r2
 80126f2:	b289      	uxth	r1, r1
 80126f4:	fb0a 110b 	mla	r1, sl, fp, r1
 80126f8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80126fc:	f8d9 2000 	ldr.w	r2, [r9]
 8012700:	4461      	add	r1, ip
 8012702:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012706:	fb0a c20b 	mla	r2, sl, fp, ip
 801270a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801270e:	b289      	uxth	r1, r1
 8012710:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012714:	4577      	cmp	r7, lr
 8012716:	f849 1b04 	str.w	r1, [r9], #4
 801271a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801271e:	d8e2      	bhi.n	80126e6 <__multiply+0xb2>
 8012720:	9a01      	ldr	r2, [sp, #4]
 8012722:	f845 c002 	str.w	ip, [r5, r2]
 8012726:	9a03      	ldr	r2, [sp, #12]
 8012728:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801272c:	3304      	adds	r3, #4
 801272e:	f1b9 0f00 	cmp.w	r9, #0
 8012732:	d020      	beq.n	8012776 <__multiply+0x142>
 8012734:	6829      	ldr	r1, [r5, #0]
 8012736:	f104 0c14 	add.w	ip, r4, #20
 801273a:	46ae      	mov	lr, r5
 801273c:	f04f 0a00 	mov.w	sl, #0
 8012740:	f8bc b000 	ldrh.w	fp, [ip]
 8012744:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012748:	fb09 220b 	mla	r2, r9, fp, r2
 801274c:	4492      	add	sl, r2
 801274e:	b289      	uxth	r1, r1
 8012750:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012754:	f84e 1b04 	str.w	r1, [lr], #4
 8012758:	f85c 2b04 	ldr.w	r2, [ip], #4
 801275c:	f8be 1000 	ldrh.w	r1, [lr]
 8012760:	0c12      	lsrs	r2, r2, #16
 8012762:	fb09 1102 	mla	r1, r9, r2, r1
 8012766:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801276a:	4567      	cmp	r7, ip
 801276c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012770:	d8e6      	bhi.n	8012740 <__multiply+0x10c>
 8012772:	9a01      	ldr	r2, [sp, #4]
 8012774:	50a9      	str	r1, [r5, r2]
 8012776:	3504      	adds	r5, #4
 8012778:	e79a      	b.n	80126b0 <__multiply+0x7c>
 801277a:	3e01      	subs	r6, #1
 801277c:	e79c      	b.n	80126b8 <__multiply+0x84>
 801277e:	bf00      	nop
 8012780:	08014268 	.word	0x08014268
 8012784:	08014279 	.word	0x08014279

08012788 <__pow5mult>:
 8012788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801278c:	4615      	mov	r5, r2
 801278e:	f012 0203 	ands.w	r2, r2, #3
 8012792:	4606      	mov	r6, r0
 8012794:	460f      	mov	r7, r1
 8012796:	d007      	beq.n	80127a8 <__pow5mult+0x20>
 8012798:	4c25      	ldr	r4, [pc, #148]	; (8012830 <__pow5mult+0xa8>)
 801279a:	3a01      	subs	r2, #1
 801279c:	2300      	movs	r3, #0
 801279e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80127a2:	f7ff fe9b 	bl	80124dc <__multadd>
 80127a6:	4607      	mov	r7, r0
 80127a8:	10ad      	asrs	r5, r5, #2
 80127aa:	d03d      	beq.n	8012828 <__pow5mult+0xa0>
 80127ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80127ae:	b97c      	cbnz	r4, 80127d0 <__pow5mult+0x48>
 80127b0:	2010      	movs	r0, #16
 80127b2:	f7fd fd9b 	bl	80102ec <malloc>
 80127b6:	4602      	mov	r2, r0
 80127b8:	6270      	str	r0, [r6, #36]	; 0x24
 80127ba:	b928      	cbnz	r0, 80127c8 <__pow5mult+0x40>
 80127bc:	4b1d      	ldr	r3, [pc, #116]	; (8012834 <__pow5mult+0xac>)
 80127be:	481e      	ldr	r0, [pc, #120]	; (8012838 <__pow5mult+0xb0>)
 80127c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80127c4:	f000 fcd2 	bl	801316c <__assert_func>
 80127c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80127cc:	6004      	str	r4, [r0, #0]
 80127ce:	60c4      	str	r4, [r0, #12]
 80127d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80127d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80127d8:	b94c      	cbnz	r4, 80127ee <__pow5mult+0x66>
 80127da:	f240 2171 	movw	r1, #625	; 0x271
 80127de:	4630      	mov	r0, r6
 80127e0:	f7ff ff12 	bl	8012608 <__i2b>
 80127e4:	2300      	movs	r3, #0
 80127e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80127ea:	4604      	mov	r4, r0
 80127ec:	6003      	str	r3, [r0, #0]
 80127ee:	f04f 0900 	mov.w	r9, #0
 80127f2:	07eb      	lsls	r3, r5, #31
 80127f4:	d50a      	bpl.n	801280c <__pow5mult+0x84>
 80127f6:	4639      	mov	r1, r7
 80127f8:	4622      	mov	r2, r4
 80127fa:	4630      	mov	r0, r6
 80127fc:	f7ff ff1a 	bl	8012634 <__multiply>
 8012800:	4639      	mov	r1, r7
 8012802:	4680      	mov	r8, r0
 8012804:	4630      	mov	r0, r6
 8012806:	f7ff fe47 	bl	8012498 <_Bfree>
 801280a:	4647      	mov	r7, r8
 801280c:	106d      	asrs	r5, r5, #1
 801280e:	d00b      	beq.n	8012828 <__pow5mult+0xa0>
 8012810:	6820      	ldr	r0, [r4, #0]
 8012812:	b938      	cbnz	r0, 8012824 <__pow5mult+0x9c>
 8012814:	4622      	mov	r2, r4
 8012816:	4621      	mov	r1, r4
 8012818:	4630      	mov	r0, r6
 801281a:	f7ff ff0b 	bl	8012634 <__multiply>
 801281e:	6020      	str	r0, [r4, #0]
 8012820:	f8c0 9000 	str.w	r9, [r0]
 8012824:	4604      	mov	r4, r0
 8012826:	e7e4      	b.n	80127f2 <__pow5mult+0x6a>
 8012828:	4638      	mov	r0, r7
 801282a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801282e:	bf00      	nop
 8012830:	080143c8 	.word	0x080143c8
 8012834:	080141f6 	.word	0x080141f6
 8012838:	08014279 	.word	0x08014279

0801283c <__lshift>:
 801283c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012840:	460c      	mov	r4, r1
 8012842:	6849      	ldr	r1, [r1, #4]
 8012844:	6923      	ldr	r3, [r4, #16]
 8012846:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801284a:	68a3      	ldr	r3, [r4, #8]
 801284c:	4607      	mov	r7, r0
 801284e:	4691      	mov	r9, r2
 8012850:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012854:	f108 0601 	add.w	r6, r8, #1
 8012858:	42b3      	cmp	r3, r6
 801285a:	db0b      	blt.n	8012874 <__lshift+0x38>
 801285c:	4638      	mov	r0, r7
 801285e:	f7ff fddb 	bl	8012418 <_Balloc>
 8012862:	4605      	mov	r5, r0
 8012864:	b948      	cbnz	r0, 801287a <__lshift+0x3e>
 8012866:	4602      	mov	r2, r0
 8012868:	4b2a      	ldr	r3, [pc, #168]	; (8012914 <__lshift+0xd8>)
 801286a:	482b      	ldr	r0, [pc, #172]	; (8012918 <__lshift+0xdc>)
 801286c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012870:	f000 fc7c 	bl	801316c <__assert_func>
 8012874:	3101      	adds	r1, #1
 8012876:	005b      	lsls	r3, r3, #1
 8012878:	e7ee      	b.n	8012858 <__lshift+0x1c>
 801287a:	2300      	movs	r3, #0
 801287c:	f100 0114 	add.w	r1, r0, #20
 8012880:	f100 0210 	add.w	r2, r0, #16
 8012884:	4618      	mov	r0, r3
 8012886:	4553      	cmp	r3, sl
 8012888:	db37      	blt.n	80128fa <__lshift+0xbe>
 801288a:	6920      	ldr	r0, [r4, #16]
 801288c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012890:	f104 0314 	add.w	r3, r4, #20
 8012894:	f019 091f 	ands.w	r9, r9, #31
 8012898:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801289c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80128a0:	d02f      	beq.n	8012902 <__lshift+0xc6>
 80128a2:	f1c9 0e20 	rsb	lr, r9, #32
 80128a6:	468a      	mov	sl, r1
 80128a8:	f04f 0c00 	mov.w	ip, #0
 80128ac:	681a      	ldr	r2, [r3, #0]
 80128ae:	fa02 f209 	lsl.w	r2, r2, r9
 80128b2:	ea42 020c 	orr.w	r2, r2, ip
 80128b6:	f84a 2b04 	str.w	r2, [sl], #4
 80128ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80128be:	4298      	cmp	r0, r3
 80128c0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80128c4:	d8f2      	bhi.n	80128ac <__lshift+0x70>
 80128c6:	1b03      	subs	r3, r0, r4
 80128c8:	3b15      	subs	r3, #21
 80128ca:	f023 0303 	bic.w	r3, r3, #3
 80128ce:	3304      	adds	r3, #4
 80128d0:	f104 0215 	add.w	r2, r4, #21
 80128d4:	4290      	cmp	r0, r2
 80128d6:	bf38      	it	cc
 80128d8:	2304      	movcc	r3, #4
 80128da:	f841 c003 	str.w	ip, [r1, r3]
 80128de:	f1bc 0f00 	cmp.w	ip, #0
 80128e2:	d001      	beq.n	80128e8 <__lshift+0xac>
 80128e4:	f108 0602 	add.w	r6, r8, #2
 80128e8:	3e01      	subs	r6, #1
 80128ea:	4638      	mov	r0, r7
 80128ec:	612e      	str	r6, [r5, #16]
 80128ee:	4621      	mov	r1, r4
 80128f0:	f7ff fdd2 	bl	8012498 <_Bfree>
 80128f4:	4628      	mov	r0, r5
 80128f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80128fe:	3301      	adds	r3, #1
 8012900:	e7c1      	b.n	8012886 <__lshift+0x4a>
 8012902:	3904      	subs	r1, #4
 8012904:	f853 2b04 	ldr.w	r2, [r3], #4
 8012908:	f841 2f04 	str.w	r2, [r1, #4]!
 801290c:	4298      	cmp	r0, r3
 801290e:	d8f9      	bhi.n	8012904 <__lshift+0xc8>
 8012910:	e7ea      	b.n	80128e8 <__lshift+0xac>
 8012912:	bf00      	nop
 8012914:	08014268 	.word	0x08014268
 8012918:	08014279 	.word	0x08014279

0801291c <__mcmp>:
 801291c:	b530      	push	{r4, r5, lr}
 801291e:	6902      	ldr	r2, [r0, #16]
 8012920:	690c      	ldr	r4, [r1, #16]
 8012922:	1b12      	subs	r2, r2, r4
 8012924:	d10e      	bne.n	8012944 <__mcmp+0x28>
 8012926:	f100 0314 	add.w	r3, r0, #20
 801292a:	3114      	adds	r1, #20
 801292c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012930:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012934:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012938:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801293c:	42a5      	cmp	r5, r4
 801293e:	d003      	beq.n	8012948 <__mcmp+0x2c>
 8012940:	d305      	bcc.n	801294e <__mcmp+0x32>
 8012942:	2201      	movs	r2, #1
 8012944:	4610      	mov	r0, r2
 8012946:	bd30      	pop	{r4, r5, pc}
 8012948:	4283      	cmp	r3, r0
 801294a:	d3f3      	bcc.n	8012934 <__mcmp+0x18>
 801294c:	e7fa      	b.n	8012944 <__mcmp+0x28>
 801294e:	f04f 32ff 	mov.w	r2, #4294967295
 8012952:	e7f7      	b.n	8012944 <__mcmp+0x28>

08012954 <__mdiff>:
 8012954:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012958:	460c      	mov	r4, r1
 801295a:	4606      	mov	r6, r0
 801295c:	4611      	mov	r1, r2
 801295e:	4620      	mov	r0, r4
 8012960:	4690      	mov	r8, r2
 8012962:	f7ff ffdb 	bl	801291c <__mcmp>
 8012966:	1e05      	subs	r5, r0, #0
 8012968:	d110      	bne.n	801298c <__mdiff+0x38>
 801296a:	4629      	mov	r1, r5
 801296c:	4630      	mov	r0, r6
 801296e:	f7ff fd53 	bl	8012418 <_Balloc>
 8012972:	b930      	cbnz	r0, 8012982 <__mdiff+0x2e>
 8012974:	4b3a      	ldr	r3, [pc, #232]	; (8012a60 <__mdiff+0x10c>)
 8012976:	4602      	mov	r2, r0
 8012978:	f240 2132 	movw	r1, #562	; 0x232
 801297c:	4839      	ldr	r0, [pc, #228]	; (8012a64 <__mdiff+0x110>)
 801297e:	f000 fbf5 	bl	801316c <__assert_func>
 8012982:	2301      	movs	r3, #1
 8012984:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012988:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801298c:	bfa4      	itt	ge
 801298e:	4643      	movge	r3, r8
 8012990:	46a0      	movge	r8, r4
 8012992:	4630      	mov	r0, r6
 8012994:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012998:	bfa6      	itte	ge
 801299a:	461c      	movge	r4, r3
 801299c:	2500      	movge	r5, #0
 801299e:	2501      	movlt	r5, #1
 80129a0:	f7ff fd3a 	bl	8012418 <_Balloc>
 80129a4:	b920      	cbnz	r0, 80129b0 <__mdiff+0x5c>
 80129a6:	4b2e      	ldr	r3, [pc, #184]	; (8012a60 <__mdiff+0x10c>)
 80129a8:	4602      	mov	r2, r0
 80129aa:	f44f 7110 	mov.w	r1, #576	; 0x240
 80129ae:	e7e5      	b.n	801297c <__mdiff+0x28>
 80129b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80129b4:	6926      	ldr	r6, [r4, #16]
 80129b6:	60c5      	str	r5, [r0, #12]
 80129b8:	f104 0914 	add.w	r9, r4, #20
 80129bc:	f108 0514 	add.w	r5, r8, #20
 80129c0:	f100 0e14 	add.w	lr, r0, #20
 80129c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80129c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80129cc:	f108 0210 	add.w	r2, r8, #16
 80129d0:	46f2      	mov	sl, lr
 80129d2:	2100      	movs	r1, #0
 80129d4:	f859 3b04 	ldr.w	r3, [r9], #4
 80129d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80129dc:	fa1f f883 	uxth.w	r8, r3
 80129e0:	fa11 f18b 	uxtah	r1, r1, fp
 80129e4:	0c1b      	lsrs	r3, r3, #16
 80129e6:	eba1 0808 	sub.w	r8, r1, r8
 80129ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80129ee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80129f2:	fa1f f888 	uxth.w	r8, r8
 80129f6:	1419      	asrs	r1, r3, #16
 80129f8:	454e      	cmp	r6, r9
 80129fa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80129fe:	f84a 3b04 	str.w	r3, [sl], #4
 8012a02:	d8e7      	bhi.n	80129d4 <__mdiff+0x80>
 8012a04:	1b33      	subs	r3, r6, r4
 8012a06:	3b15      	subs	r3, #21
 8012a08:	f023 0303 	bic.w	r3, r3, #3
 8012a0c:	3304      	adds	r3, #4
 8012a0e:	3415      	adds	r4, #21
 8012a10:	42a6      	cmp	r6, r4
 8012a12:	bf38      	it	cc
 8012a14:	2304      	movcc	r3, #4
 8012a16:	441d      	add	r5, r3
 8012a18:	4473      	add	r3, lr
 8012a1a:	469e      	mov	lr, r3
 8012a1c:	462e      	mov	r6, r5
 8012a1e:	4566      	cmp	r6, ip
 8012a20:	d30e      	bcc.n	8012a40 <__mdiff+0xec>
 8012a22:	f10c 0203 	add.w	r2, ip, #3
 8012a26:	1b52      	subs	r2, r2, r5
 8012a28:	f022 0203 	bic.w	r2, r2, #3
 8012a2c:	3d03      	subs	r5, #3
 8012a2e:	45ac      	cmp	ip, r5
 8012a30:	bf38      	it	cc
 8012a32:	2200      	movcc	r2, #0
 8012a34:	441a      	add	r2, r3
 8012a36:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012a3a:	b17b      	cbz	r3, 8012a5c <__mdiff+0x108>
 8012a3c:	6107      	str	r7, [r0, #16]
 8012a3e:	e7a3      	b.n	8012988 <__mdiff+0x34>
 8012a40:	f856 8b04 	ldr.w	r8, [r6], #4
 8012a44:	fa11 f288 	uxtah	r2, r1, r8
 8012a48:	1414      	asrs	r4, r2, #16
 8012a4a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012a4e:	b292      	uxth	r2, r2
 8012a50:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012a54:	f84e 2b04 	str.w	r2, [lr], #4
 8012a58:	1421      	asrs	r1, r4, #16
 8012a5a:	e7e0      	b.n	8012a1e <__mdiff+0xca>
 8012a5c:	3f01      	subs	r7, #1
 8012a5e:	e7ea      	b.n	8012a36 <__mdiff+0xe2>
 8012a60:	08014268 	.word	0x08014268
 8012a64:	08014279 	.word	0x08014279

08012a68 <__d2b>:
 8012a68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012a6c:	4689      	mov	r9, r1
 8012a6e:	2101      	movs	r1, #1
 8012a70:	ec57 6b10 	vmov	r6, r7, d0
 8012a74:	4690      	mov	r8, r2
 8012a76:	f7ff fccf 	bl	8012418 <_Balloc>
 8012a7a:	4604      	mov	r4, r0
 8012a7c:	b930      	cbnz	r0, 8012a8c <__d2b+0x24>
 8012a7e:	4602      	mov	r2, r0
 8012a80:	4b25      	ldr	r3, [pc, #148]	; (8012b18 <__d2b+0xb0>)
 8012a82:	4826      	ldr	r0, [pc, #152]	; (8012b1c <__d2b+0xb4>)
 8012a84:	f240 310a 	movw	r1, #778	; 0x30a
 8012a88:	f000 fb70 	bl	801316c <__assert_func>
 8012a8c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012a90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012a94:	bb35      	cbnz	r5, 8012ae4 <__d2b+0x7c>
 8012a96:	2e00      	cmp	r6, #0
 8012a98:	9301      	str	r3, [sp, #4]
 8012a9a:	d028      	beq.n	8012aee <__d2b+0x86>
 8012a9c:	4668      	mov	r0, sp
 8012a9e:	9600      	str	r6, [sp, #0]
 8012aa0:	f7ff fd82 	bl	80125a8 <__lo0bits>
 8012aa4:	9900      	ldr	r1, [sp, #0]
 8012aa6:	b300      	cbz	r0, 8012aea <__d2b+0x82>
 8012aa8:	9a01      	ldr	r2, [sp, #4]
 8012aaa:	f1c0 0320 	rsb	r3, r0, #32
 8012aae:	fa02 f303 	lsl.w	r3, r2, r3
 8012ab2:	430b      	orrs	r3, r1
 8012ab4:	40c2      	lsrs	r2, r0
 8012ab6:	6163      	str	r3, [r4, #20]
 8012ab8:	9201      	str	r2, [sp, #4]
 8012aba:	9b01      	ldr	r3, [sp, #4]
 8012abc:	61a3      	str	r3, [r4, #24]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	bf14      	ite	ne
 8012ac2:	2202      	movne	r2, #2
 8012ac4:	2201      	moveq	r2, #1
 8012ac6:	6122      	str	r2, [r4, #16]
 8012ac8:	b1d5      	cbz	r5, 8012b00 <__d2b+0x98>
 8012aca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012ace:	4405      	add	r5, r0
 8012ad0:	f8c9 5000 	str.w	r5, [r9]
 8012ad4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012ad8:	f8c8 0000 	str.w	r0, [r8]
 8012adc:	4620      	mov	r0, r4
 8012ade:	b003      	add	sp, #12
 8012ae0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ae4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012ae8:	e7d5      	b.n	8012a96 <__d2b+0x2e>
 8012aea:	6161      	str	r1, [r4, #20]
 8012aec:	e7e5      	b.n	8012aba <__d2b+0x52>
 8012aee:	a801      	add	r0, sp, #4
 8012af0:	f7ff fd5a 	bl	80125a8 <__lo0bits>
 8012af4:	9b01      	ldr	r3, [sp, #4]
 8012af6:	6163      	str	r3, [r4, #20]
 8012af8:	2201      	movs	r2, #1
 8012afa:	6122      	str	r2, [r4, #16]
 8012afc:	3020      	adds	r0, #32
 8012afe:	e7e3      	b.n	8012ac8 <__d2b+0x60>
 8012b00:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012b04:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012b08:	f8c9 0000 	str.w	r0, [r9]
 8012b0c:	6918      	ldr	r0, [r3, #16]
 8012b0e:	f7ff fd2b 	bl	8012568 <__hi0bits>
 8012b12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012b16:	e7df      	b.n	8012ad8 <__d2b+0x70>
 8012b18:	08014268 	.word	0x08014268
 8012b1c:	08014279 	.word	0x08014279

08012b20 <_calloc_r>:
 8012b20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012b22:	fba1 2402 	umull	r2, r4, r1, r2
 8012b26:	b94c      	cbnz	r4, 8012b3c <_calloc_r+0x1c>
 8012b28:	4611      	mov	r1, r2
 8012b2a:	9201      	str	r2, [sp, #4]
 8012b2c:	f7fd fc68 	bl	8010400 <_malloc_r>
 8012b30:	9a01      	ldr	r2, [sp, #4]
 8012b32:	4605      	mov	r5, r0
 8012b34:	b930      	cbnz	r0, 8012b44 <_calloc_r+0x24>
 8012b36:	4628      	mov	r0, r5
 8012b38:	b003      	add	sp, #12
 8012b3a:	bd30      	pop	{r4, r5, pc}
 8012b3c:	220c      	movs	r2, #12
 8012b3e:	6002      	str	r2, [r0, #0]
 8012b40:	2500      	movs	r5, #0
 8012b42:	e7f8      	b.n	8012b36 <_calloc_r+0x16>
 8012b44:	4621      	mov	r1, r4
 8012b46:	f7fd fbe7 	bl	8010318 <memset>
 8012b4a:	e7f4      	b.n	8012b36 <_calloc_r+0x16>

08012b4c <__ssputs_r>:
 8012b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b50:	688e      	ldr	r6, [r1, #8]
 8012b52:	429e      	cmp	r6, r3
 8012b54:	4682      	mov	sl, r0
 8012b56:	460c      	mov	r4, r1
 8012b58:	4690      	mov	r8, r2
 8012b5a:	461f      	mov	r7, r3
 8012b5c:	d838      	bhi.n	8012bd0 <__ssputs_r+0x84>
 8012b5e:	898a      	ldrh	r2, [r1, #12]
 8012b60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012b64:	d032      	beq.n	8012bcc <__ssputs_r+0x80>
 8012b66:	6825      	ldr	r5, [r4, #0]
 8012b68:	6909      	ldr	r1, [r1, #16]
 8012b6a:	eba5 0901 	sub.w	r9, r5, r1
 8012b6e:	6965      	ldr	r5, [r4, #20]
 8012b70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012b74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012b78:	3301      	adds	r3, #1
 8012b7a:	444b      	add	r3, r9
 8012b7c:	106d      	asrs	r5, r5, #1
 8012b7e:	429d      	cmp	r5, r3
 8012b80:	bf38      	it	cc
 8012b82:	461d      	movcc	r5, r3
 8012b84:	0553      	lsls	r3, r2, #21
 8012b86:	d531      	bpl.n	8012bec <__ssputs_r+0xa0>
 8012b88:	4629      	mov	r1, r5
 8012b8a:	f7fd fc39 	bl	8010400 <_malloc_r>
 8012b8e:	4606      	mov	r6, r0
 8012b90:	b950      	cbnz	r0, 8012ba8 <__ssputs_r+0x5c>
 8012b92:	230c      	movs	r3, #12
 8012b94:	f8ca 3000 	str.w	r3, [sl]
 8012b98:	89a3      	ldrh	r3, [r4, #12]
 8012b9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b9e:	81a3      	strh	r3, [r4, #12]
 8012ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8012ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ba8:	6921      	ldr	r1, [r4, #16]
 8012baa:	464a      	mov	r2, r9
 8012bac:	f7fd fba6 	bl	80102fc <memcpy>
 8012bb0:	89a3      	ldrh	r3, [r4, #12]
 8012bb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012bb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012bba:	81a3      	strh	r3, [r4, #12]
 8012bbc:	6126      	str	r6, [r4, #16]
 8012bbe:	6165      	str	r5, [r4, #20]
 8012bc0:	444e      	add	r6, r9
 8012bc2:	eba5 0509 	sub.w	r5, r5, r9
 8012bc6:	6026      	str	r6, [r4, #0]
 8012bc8:	60a5      	str	r5, [r4, #8]
 8012bca:	463e      	mov	r6, r7
 8012bcc:	42be      	cmp	r6, r7
 8012bce:	d900      	bls.n	8012bd2 <__ssputs_r+0x86>
 8012bd0:	463e      	mov	r6, r7
 8012bd2:	6820      	ldr	r0, [r4, #0]
 8012bd4:	4632      	mov	r2, r6
 8012bd6:	4641      	mov	r1, r8
 8012bd8:	f000 fb2c 	bl	8013234 <memmove>
 8012bdc:	68a3      	ldr	r3, [r4, #8]
 8012bde:	1b9b      	subs	r3, r3, r6
 8012be0:	60a3      	str	r3, [r4, #8]
 8012be2:	6823      	ldr	r3, [r4, #0]
 8012be4:	4433      	add	r3, r6
 8012be6:	6023      	str	r3, [r4, #0]
 8012be8:	2000      	movs	r0, #0
 8012bea:	e7db      	b.n	8012ba4 <__ssputs_r+0x58>
 8012bec:	462a      	mov	r2, r5
 8012bee:	f000 fb3b 	bl	8013268 <_realloc_r>
 8012bf2:	4606      	mov	r6, r0
 8012bf4:	2800      	cmp	r0, #0
 8012bf6:	d1e1      	bne.n	8012bbc <__ssputs_r+0x70>
 8012bf8:	6921      	ldr	r1, [r4, #16]
 8012bfa:	4650      	mov	r0, sl
 8012bfc:	f7fd fb94 	bl	8010328 <_free_r>
 8012c00:	e7c7      	b.n	8012b92 <__ssputs_r+0x46>
	...

08012c04 <_svfiprintf_r>:
 8012c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c08:	4698      	mov	r8, r3
 8012c0a:	898b      	ldrh	r3, [r1, #12]
 8012c0c:	061b      	lsls	r3, r3, #24
 8012c0e:	b09d      	sub	sp, #116	; 0x74
 8012c10:	4607      	mov	r7, r0
 8012c12:	460d      	mov	r5, r1
 8012c14:	4614      	mov	r4, r2
 8012c16:	d50e      	bpl.n	8012c36 <_svfiprintf_r+0x32>
 8012c18:	690b      	ldr	r3, [r1, #16]
 8012c1a:	b963      	cbnz	r3, 8012c36 <_svfiprintf_r+0x32>
 8012c1c:	2140      	movs	r1, #64	; 0x40
 8012c1e:	f7fd fbef 	bl	8010400 <_malloc_r>
 8012c22:	6028      	str	r0, [r5, #0]
 8012c24:	6128      	str	r0, [r5, #16]
 8012c26:	b920      	cbnz	r0, 8012c32 <_svfiprintf_r+0x2e>
 8012c28:	230c      	movs	r3, #12
 8012c2a:	603b      	str	r3, [r7, #0]
 8012c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8012c30:	e0d1      	b.n	8012dd6 <_svfiprintf_r+0x1d2>
 8012c32:	2340      	movs	r3, #64	; 0x40
 8012c34:	616b      	str	r3, [r5, #20]
 8012c36:	2300      	movs	r3, #0
 8012c38:	9309      	str	r3, [sp, #36]	; 0x24
 8012c3a:	2320      	movs	r3, #32
 8012c3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012c40:	f8cd 800c 	str.w	r8, [sp, #12]
 8012c44:	2330      	movs	r3, #48	; 0x30
 8012c46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012df0 <_svfiprintf_r+0x1ec>
 8012c4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012c4e:	f04f 0901 	mov.w	r9, #1
 8012c52:	4623      	mov	r3, r4
 8012c54:	469a      	mov	sl, r3
 8012c56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012c5a:	b10a      	cbz	r2, 8012c60 <_svfiprintf_r+0x5c>
 8012c5c:	2a25      	cmp	r2, #37	; 0x25
 8012c5e:	d1f9      	bne.n	8012c54 <_svfiprintf_r+0x50>
 8012c60:	ebba 0b04 	subs.w	fp, sl, r4
 8012c64:	d00b      	beq.n	8012c7e <_svfiprintf_r+0x7a>
 8012c66:	465b      	mov	r3, fp
 8012c68:	4622      	mov	r2, r4
 8012c6a:	4629      	mov	r1, r5
 8012c6c:	4638      	mov	r0, r7
 8012c6e:	f7ff ff6d 	bl	8012b4c <__ssputs_r>
 8012c72:	3001      	adds	r0, #1
 8012c74:	f000 80aa 	beq.w	8012dcc <_svfiprintf_r+0x1c8>
 8012c78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012c7a:	445a      	add	r2, fp
 8012c7c:	9209      	str	r2, [sp, #36]	; 0x24
 8012c7e:	f89a 3000 	ldrb.w	r3, [sl]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	f000 80a2 	beq.w	8012dcc <_svfiprintf_r+0x1c8>
 8012c88:	2300      	movs	r3, #0
 8012c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8012c8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012c92:	f10a 0a01 	add.w	sl, sl, #1
 8012c96:	9304      	str	r3, [sp, #16]
 8012c98:	9307      	str	r3, [sp, #28]
 8012c9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012c9e:	931a      	str	r3, [sp, #104]	; 0x68
 8012ca0:	4654      	mov	r4, sl
 8012ca2:	2205      	movs	r2, #5
 8012ca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ca8:	4851      	ldr	r0, [pc, #324]	; (8012df0 <_svfiprintf_r+0x1ec>)
 8012caa:	f7ed fa99 	bl	80001e0 <memchr>
 8012cae:	9a04      	ldr	r2, [sp, #16]
 8012cb0:	b9d8      	cbnz	r0, 8012cea <_svfiprintf_r+0xe6>
 8012cb2:	06d0      	lsls	r0, r2, #27
 8012cb4:	bf44      	itt	mi
 8012cb6:	2320      	movmi	r3, #32
 8012cb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012cbc:	0711      	lsls	r1, r2, #28
 8012cbe:	bf44      	itt	mi
 8012cc0:	232b      	movmi	r3, #43	; 0x2b
 8012cc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012cc6:	f89a 3000 	ldrb.w	r3, [sl]
 8012cca:	2b2a      	cmp	r3, #42	; 0x2a
 8012ccc:	d015      	beq.n	8012cfa <_svfiprintf_r+0xf6>
 8012cce:	9a07      	ldr	r2, [sp, #28]
 8012cd0:	4654      	mov	r4, sl
 8012cd2:	2000      	movs	r0, #0
 8012cd4:	f04f 0c0a 	mov.w	ip, #10
 8012cd8:	4621      	mov	r1, r4
 8012cda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012cde:	3b30      	subs	r3, #48	; 0x30
 8012ce0:	2b09      	cmp	r3, #9
 8012ce2:	d94e      	bls.n	8012d82 <_svfiprintf_r+0x17e>
 8012ce4:	b1b0      	cbz	r0, 8012d14 <_svfiprintf_r+0x110>
 8012ce6:	9207      	str	r2, [sp, #28]
 8012ce8:	e014      	b.n	8012d14 <_svfiprintf_r+0x110>
 8012cea:	eba0 0308 	sub.w	r3, r0, r8
 8012cee:	fa09 f303 	lsl.w	r3, r9, r3
 8012cf2:	4313      	orrs	r3, r2
 8012cf4:	9304      	str	r3, [sp, #16]
 8012cf6:	46a2      	mov	sl, r4
 8012cf8:	e7d2      	b.n	8012ca0 <_svfiprintf_r+0x9c>
 8012cfa:	9b03      	ldr	r3, [sp, #12]
 8012cfc:	1d19      	adds	r1, r3, #4
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	9103      	str	r1, [sp, #12]
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	bfbb      	ittet	lt
 8012d06:	425b      	neglt	r3, r3
 8012d08:	f042 0202 	orrlt.w	r2, r2, #2
 8012d0c:	9307      	strge	r3, [sp, #28]
 8012d0e:	9307      	strlt	r3, [sp, #28]
 8012d10:	bfb8      	it	lt
 8012d12:	9204      	strlt	r2, [sp, #16]
 8012d14:	7823      	ldrb	r3, [r4, #0]
 8012d16:	2b2e      	cmp	r3, #46	; 0x2e
 8012d18:	d10c      	bne.n	8012d34 <_svfiprintf_r+0x130>
 8012d1a:	7863      	ldrb	r3, [r4, #1]
 8012d1c:	2b2a      	cmp	r3, #42	; 0x2a
 8012d1e:	d135      	bne.n	8012d8c <_svfiprintf_r+0x188>
 8012d20:	9b03      	ldr	r3, [sp, #12]
 8012d22:	1d1a      	adds	r2, r3, #4
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	9203      	str	r2, [sp, #12]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	bfb8      	it	lt
 8012d2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8012d30:	3402      	adds	r4, #2
 8012d32:	9305      	str	r3, [sp, #20]
 8012d34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012e00 <_svfiprintf_r+0x1fc>
 8012d38:	7821      	ldrb	r1, [r4, #0]
 8012d3a:	2203      	movs	r2, #3
 8012d3c:	4650      	mov	r0, sl
 8012d3e:	f7ed fa4f 	bl	80001e0 <memchr>
 8012d42:	b140      	cbz	r0, 8012d56 <_svfiprintf_r+0x152>
 8012d44:	2340      	movs	r3, #64	; 0x40
 8012d46:	eba0 000a 	sub.w	r0, r0, sl
 8012d4a:	fa03 f000 	lsl.w	r0, r3, r0
 8012d4e:	9b04      	ldr	r3, [sp, #16]
 8012d50:	4303      	orrs	r3, r0
 8012d52:	3401      	adds	r4, #1
 8012d54:	9304      	str	r3, [sp, #16]
 8012d56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d5a:	4826      	ldr	r0, [pc, #152]	; (8012df4 <_svfiprintf_r+0x1f0>)
 8012d5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012d60:	2206      	movs	r2, #6
 8012d62:	f7ed fa3d 	bl	80001e0 <memchr>
 8012d66:	2800      	cmp	r0, #0
 8012d68:	d038      	beq.n	8012ddc <_svfiprintf_r+0x1d8>
 8012d6a:	4b23      	ldr	r3, [pc, #140]	; (8012df8 <_svfiprintf_r+0x1f4>)
 8012d6c:	bb1b      	cbnz	r3, 8012db6 <_svfiprintf_r+0x1b2>
 8012d6e:	9b03      	ldr	r3, [sp, #12]
 8012d70:	3307      	adds	r3, #7
 8012d72:	f023 0307 	bic.w	r3, r3, #7
 8012d76:	3308      	adds	r3, #8
 8012d78:	9303      	str	r3, [sp, #12]
 8012d7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d7c:	4433      	add	r3, r6
 8012d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8012d80:	e767      	b.n	8012c52 <_svfiprintf_r+0x4e>
 8012d82:	fb0c 3202 	mla	r2, ip, r2, r3
 8012d86:	460c      	mov	r4, r1
 8012d88:	2001      	movs	r0, #1
 8012d8a:	e7a5      	b.n	8012cd8 <_svfiprintf_r+0xd4>
 8012d8c:	2300      	movs	r3, #0
 8012d8e:	3401      	adds	r4, #1
 8012d90:	9305      	str	r3, [sp, #20]
 8012d92:	4619      	mov	r1, r3
 8012d94:	f04f 0c0a 	mov.w	ip, #10
 8012d98:	4620      	mov	r0, r4
 8012d9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012d9e:	3a30      	subs	r2, #48	; 0x30
 8012da0:	2a09      	cmp	r2, #9
 8012da2:	d903      	bls.n	8012dac <_svfiprintf_r+0x1a8>
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d0c5      	beq.n	8012d34 <_svfiprintf_r+0x130>
 8012da8:	9105      	str	r1, [sp, #20]
 8012daa:	e7c3      	b.n	8012d34 <_svfiprintf_r+0x130>
 8012dac:	fb0c 2101 	mla	r1, ip, r1, r2
 8012db0:	4604      	mov	r4, r0
 8012db2:	2301      	movs	r3, #1
 8012db4:	e7f0      	b.n	8012d98 <_svfiprintf_r+0x194>
 8012db6:	ab03      	add	r3, sp, #12
 8012db8:	9300      	str	r3, [sp, #0]
 8012dba:	462a      	mov	r2, r5
 8012dbc:	4b0f      	ldr	r3, [pc, #60]	; (8012dfc <_svfiprintf_r+0x1f8>)
 8012dbe:	a904      	add	r1, sp, #16
 8012dc0:	4638      	mov	r0, r7
 8012dc2:	f7fd fc31 	bl	8010628 <_printf_float>
 8012dc6:	1c42      	adds	r2, r0, #1
 8012dc8:	4606      	mov	r6, r0
 8012dca:	d1d6      	bne.n	8012d7a <_svfiprintf_r+0x176>
 8012dcc:	89ab      	ldrh	r3, [r5, #12]
 8012dce:	065b      	lsls	r3, r3, #25
 8012dd0:	f53f af2c 	bmi.w	8012c2c <_svfiprintf_r+0x28>
 8012dd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012dd6:	b01d      	add	sp, #116	; 0x74
 8012dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ddc:	ab03      	add	r3, sp, #12
 8012dde:	9300      	str	r3, [sp, #0]
 8012de0:	462a      	mov	r2, r5
 8012de2:	4b06      	ldr	r3, [pc, #24]	; (8012dfc <_svfiprintf_r+0x1f8>)
 8012de4:	a904      	add	r1, sp, #16
 8012de6:	4638      	mov	r0, r7
 8012de8:	f7fd fec2 	bl	8010b70 <_printf_i>
 8012dec:	e7eb      	b.n	8012dc6 <_svfiprintf_r+0x1c2>
 8012dee:	bf00      	nop
 8012df0:	080143d4 	.word	0x080143d4
 8012df4:	080143de 	.word	0x080143de
 8012df8:	08010629 	.word	0x08010629
 8012dfc:	08012b4d 	.word	0x08012b4d
 8012e00:	080143da 	.word	0x080143da

08012e04 <__sfputc_r>:
 8012e04:	6893      	ldr	r3, [r2, #8]
 8012e06:	3b01      	subs	r3, #1
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	b410      	push	{r4}
 8012e0c:	6093      	str	r3, [r2, #8]
 8012e0e:	da08      	bge.n	8012e22 <__sfputc_r+0x1e>
 8012e10:	6994      	ldr	r4, [r2, #24]
 8012e12:	42a3      	cmp	r3, r4
 8012e14:	db01      	blt.n	8012e1a <__sfputc_r+0x16>
 8012e16:	290a      	cmp	r1, #10
 8012e18:	d103      	bne.n	8012e22 <__sfputc_r+0x1e>
 8012e1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e1e:	f7fe ba53 	b.w	80112c8 <__swbuf_r>
 8012e22:	6813      	ldr	r3, [r2, #0]
 8012e24:	1c58      	adds	r0, r3, #1
 8012e26:	6010      	str	r0, [r2, #0]
 8012e28:	7019      	strb	r1, [r3, #0]
 8012e2a:	4608      	mov	r0, r1
 8012e2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e30:	4770      	bx	lr

08012e32 <__sfputs_r>:
 8012e32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e34:	4606      	mov	r6, r0
 8012e36:	460f      	mov	r7, r1
 8012e38:	4614      	mov	r4, r2
 8012e3a:	18d5      	adds	r5, r2, r3
 8012e3c:	42ac      	cmp	r4, r5
 8012e3e:	d101      	bne.n	8012e44 <__sfputs_r+0x12>
 8012e40:	2000      	movs	r0, #0
 8012e42:	e007      	b.n	8012e54 <__sfputs_r+0x22>
 8012e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e48:	463a      	mov	r2, r7
 8012e4a:	4630      	mov	r0, r6
 8012e4c:	f7ff ffda 	bl	8012e04 <__sfputc_r>
 8012e50:	1c43      	adds	r3, r0, #1
 8012e52:	d1f3      	bne.n	8012e3c <__sfputs_r+0xa>
 8012e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012e58 <_vfiprintf_r>:
 8012e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e5c:	460d      	mov	r5, r1
 8012e5e:	b09d      	sub	sp, #116	; 0x74
 8012e60:	4614      	mov	r4, r2
 8012e62:	4698      	mov	r8, r3
 8012e64:	4606      	mov	r6, r0
 8012e66:	b118      	cbz	r0, 8012e70 <_vfiprintf_r+0x18>
 8012e68:	6983      	ldr	r3, [r0, #24]
 8012e6a:	b90b      	cbnz	r3, 8012e70 <_vfiprintf_r+0x18>
 8012e6c:	f7fd f97c 	bl	8010168 <__sinit>
 8012e70:	4b89      	ldr	r3, [pc, #548]	; (8013098 <_vfiprintf_r+0x240>)
 8012e72:	429d      	cmp	r5, r3
 8012e74:	d11b      	bne.n	8012eae <_vfiprintf_r+0x56>
 8012e76:	6875      	ldr	r5, [r6, #4]
 8012e78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012e7a:	07d9      	lsls	r1, r3, #31
 8012e7c:	d405      	bmi.n	8012e8a <_vfiprintf_r+0x32>
 8012e7e:	89ab      	ldrh	r3, [r5, #12]
 8012e80:	059a      	lsls	r2, r3, #22
 8012e82:	d402      	bmi.n	8012e8a <_vfiprintf_r+0x32>
 8012e84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012e86:	f7f3 f813 	bl	8005eb0 <__retarget_lock_acquire_recursive>
 8012e8a:	89ab      	ldrh	r3, [r5, #12]
 8012e8c:	071b      	lsls	r3, r3, #28
 8012e8e:	d501      	bpl.n	8012e94 <_vfiprintf_r+0x3c>
 8012e90:	692b      	ldr	r3, [r5, #16]
 8012e92:	b9eb      	cbnz	r3, 8012ed0 <_vfiprintf_r+0x78>
 8012e94:	4629      	mov	r1, r5
 8012e96:	4630      	mov	r0, r6
 8012e98:	f7fe fa7a 	bl	8011390 <__swsetup_r>
 8012e9c:	b1c0      	cbz	r0, 8012ed0 <_vfiprintf_r+0x78>
 8012e9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012ea0:	07dc      	lsls	r4, r3, #31
 8012ea2:	d50e      	bpl.n	8012ec2 <_vfiprintf_r+0x6a>
 8012ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8012ea8:	b01d      	add	sp, #116	; 0x74
 8012eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012eae:	4b7b      	ldr	r3, [pc, #492]	; (801309c <_vfiprintf_r+0x244>)
 8012eb0:	429d      	cmp	r5, r3
 8012eb2:	d101      	bne.n	8012eb8 <_vfiprintf_r+0x60>
 8012eb4:	68b5      	ldr	r5, [r6, #8]
 8012eb6:	e7df      	b.n	8012e78 <_vfiprintf_r+0x20>
 8012eb8:	4b79      	ldr	r3, [pc, #484]	; (80130a0 <_vfiprintf_r+0x248>)
 8012eba:	429d      	cmp	r5, r3
 8012ebc:	bf08      	it	eq
 8012ebe:	68f5      	ldreq	r5, [r6, #12]
 8012ec0:	e7da      	b.n	8012e78 <_vfiprintf_r+0x20>
 8012ec2:	89ab      	ldrh	r3, [r5, #12]
 8012ec4:	0598      	lsls	r0, r3, #22
 8012ec6:	d4ed      	bmi.n	8012ea4 <_vfiprintf_r+0x4c>
 8012ec8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012eca:	f7f3 f805 	bl	8005ed8 <__retarget_lock_release_recursive>
 8012ece:	e7e9      	b.n	8012ea4 <_vfiprintf_r+0x4c>
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	9309      	str	r3, [sp, #36]	; 0x24
 8012ed4:	2320      	movs	r3, #32
 8012ed6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012eda:	f8cd 800c 	str.w	r8, [sp, #12]
 8012ede:	2330      	movs	r3, #48	; 0x30
 8012ee0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80130a4 <_vfiprintf_r+0x24c>
 8012ee4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012ee8:	f04f 0901 	mov.w	r9, #1
 8012eec:	4623      	mov	r3, r4
 8012eee:	469a      	mov	sl, r3
 8012ef0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012ef4:	b10a      	cbz	r2, 8012efa <_vfiprintf_r+0xa2>
 8012ef6:	2a25      	cmp	r2, #37	; 0x25
 8012ef8:	d1f9      	bne.n	8012eee <_vfiprintf_r+0x96>
 8012efa:	ebba 0b04 	subs.w	fp, sl, r4
 8012efe:	d00b      	beq.n	8012f18 <_vfiprintf_r+0xc0>
 8012f00:	465b      	mov	r3, fp
 8012f02:	4622      	mov	r2, r4
 8012f04:	4629      	mov	r1, r5
 8012f06:	4630      	mov	r0, r6
 8012f08:	f7ff ff93 	bl	8012e32 <__sfputs_r>
 8012f0c:	3001      	adds	r0, #1
 8012f0e:	f000 80aa 	beq.w	8013066 <_vfiprintf_r+0x20e>
 8012f12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012f14:	445a      	add	r2, fp
 8012f16:	9209      	str	r2, [sp, #36]	; 0x24
 8012f18:	f89a 3000 	ldrb.w	r3, [sl]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	f000 80a2 	beq.w	8013066 <_vfiprintf_r+0x20e>
 8012f22:	2300      	movs	r3, #0
 8012f24:	f04f 32ff 	mov.w	r2, #4294967295
 8012f28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012f2c:	f10a 0a01 	add.w	sl, sl, #1
 8012f30:	9304      	str	r3, [sp, #16]
 8012f32:	9307      	str	r3, [sp, #28]
 8012f34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012f38:	931a      	str	r3, [sp, #104]	; 0x68
 8012f3a:	4654      	mov	r4, sl
 8012f3c:	2205      	movs	r2, #5
 8012f3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f42:	4858      	ldr	r0, [pc, #352]	; (80130a4 <_vfiprintf_r+0x24c>)
 8012f44:	f7ed f94c 	bl	80001e0 <memchr>
 8012f48:	9a04      	ldr	r2, [sp, #16]
 8012f4a:	b9d8      	cbnz	r0, 8012f84 <_vfiprintf_r+0x12c>
 8012f4c:	06d1      	lsls	r1, r2, #27
 8012f4e:	bf44      	itt	mi
 8012f50:	2320      	movmi	r3, #32
 8012f52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012f56:	0713      	lsls	r3, r2, #28
 8012f58:	bf44      	itt	mi
 8012f5a:	232b      	movmi	r3, #43	; 0x2b
 8012f5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012f60:	f89a 3000 	ldrb.w	r3, [sl]
 8012f64:	2b2a      	cmp	r3, #42	; 0x2a
 8012f66:	d015      	beq.n	8012f94 <_vfiprintf_r+0x13c>
 8012f68:	9a07      	ldr	r2, [sp, #28]
 8012f6a:	4654      	mov	r4, sl
 8012f6c:	2000      	movs	r0, #0
 8012f6e:	f04f 0c0a 	mov.w	ip, #10
 8012f72:	4621      	mov	r1, r4
 8012f74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012f78:	3b30      	subs	r3, #48	; 0x30
 8012f7a:	2b09      	cmp	r3, #9
 8012f7c:	d94e      	bls.n	801301c <_vfiprintf_r+0x1c4>
 8012f7e:	b1b0      	cbz	r0, 8012fae <_vfiprintf_r+0x156>
 8012f80:	9207      	str	r2, [sp, #28]
 8012f82:	e014      	b.n	8012fae <_vfiprintf_r+0x156>
 8012f84:	eba0 0308 	sub.w	r3, r0, r8
 8012f88:	fa09 f303 	lsl.w	r3, r9, r3
 8012f8c:	4313      	orrs	r3, r2
 8012f8e:	9304      	str	r3, [sp, #16]
 8012f90:	46a2      	mov	sl, r4
 8012f92:	e7d2      	b.n	8012f3a <_vfiprintf_r+0xe2>
 8012f94:	9b03      	ldr	r3, [sp, #12]
 8012f96:	1d19      	adds	r1, r3, #4
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	9103      	str	r1, [sp, #12]
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	bfbb      	ittet	lt
 8012fa0:	425b      	neglt	r3, r3
 8012fa2:	f042 0202 	orrlt.w	r2, r2, #2
 8012fa6:	9307      	strge	r3, [sp, #28]
 8012fa8:	9307      	strlt	r3, [sp, #28]
 8012faa:	bfb8      	it	lt
 8012fac:	9204      	strlt	r2, [sp, #16]
 8012fae:	7823      	ldrb	r3, [r4, #0]
 8012fb0:	2b2e      	cmp	r3, #46	; 0x2e
 8012fb2:	d10c      	bne.n	8012fce <_vfiprintf_r+0x176>
 8012fb4:	7863      	ldrb	r3, [r4, #1]
 8012fb6:	2b2a      	cmp	r3, #42	; 0x2a
 8012fb8:	d135      	bne.n	8013026 <_vfiprintf_r+0x1ce>
 8012fba:	9b03      	ldr	r3, [sp, #12]
 8012fbc:	1d1a      	adds	r2, r3, #4
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	9203      	str	r2, [sp, #12]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	bfb8      	it	lt
 8012fc6:	f04f 33ff 	movlt.w	r3, #4294967295
 8012fca:	3402      	adds	r4, #2
 8012fcc:	9305      	str	r3, [sp, #20]
 8012fce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80130b4 <_vfiprintf_r+0x25c>
 8012fd2:	7821      	ldrb	r1, [r4, #0]
 8012fd4:	2203      	movs	r2, #3
 8012fd6:	4650      	mov	r0, sl
 8012fd8:	f7ed f902 	bl	80001e0 <memchr>
 8012fdc:	b140      	cbz	r0, 8012ff0 <_vfiprintf_r+0x198>
 8012fde:	2340      	movs	r3, #64	; 0x40
 8012fe0:	eba0 000a 	sub.w	r0, r0, sl
 8012fe4:	fa03 f000 	lsl.w	r0, r3, r0
 8012fe8:	9b04      	ldr	r3, [sp, #16]
 8012fea:	4303      	orrs	r3, r0
 8012fec:	3401      	adds	r4, #1
 8012fee:	9304      	str	r3, [sp, #16]
 8012ff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ff4:	482c      	ldr	r0, [pc, #176]	; (80130a8 <_vfiprintf_r+0x250>)
 8012ff6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012ffa:	2206      	movs	r2, #6
 8012ffc:	f7ed f8f0 	bl	80001e0 <memchr>
 8013000:	2800      	cmp	r0, #0
 8013002:	d03f      	beq.n	8013084 <_vfiprintf_r+0x22c>
 8013004:	4b29      	ldr	r3, [pc, #164]	; (80130ac <_vfiprintf_r+0x254>)
 8013006:	bb1b      	cbnz	r3, 8013050 <_vfiprintf_r+0x1f8>
 8013008:	9b03      	ldr	r3, [sp, #12]
 801300a:	3307      	adds	r3, #7
 801300c:	f023 0307 	bic.w	r3, r3, #7
 8013010:	3308      	adds	r3, #8
 8013012:	9303      	str	r3, [sp, #12]
 8013014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013016:	443b      	add	r3, r7
 8013018:	9309      	str	r3, [sp, #36]	; 0x24
 801301a:	e767      	b.n	8012eec <_vfiprintf_r+0x94>
 801301c:	fb0c 3202 	mla	r2, ip, r2, r3
 8013020:	460c      	mov	r4, r1
 8013022:	2001      	movs	r0, #1
 8013024:	e7a5      	b.n	8012f72 <_vfiprintf_r+0x11a>
 8013026:	2300      	movs	r3, #0
 8013028:	3401      	adds	r4, #1
 801302a:	9305      	str	r3, [sp, #20]
 801302c:	4619      	mov	r1, r3
 801302e:	f04f 0c0a 	mov.w	ip, #10
 8013032:	4620      	mov	r0, r4
 8013034:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013038:	3a30      	subs	r2, #48	; 0x30
 801303a:	2a09      	cmp	r2, #9
 801303c:	d903      	bls.n	8013046 <_vfiprintf_r+0x1ee>
 801303e:	2b00      	cmp	r3, #0
 8013040:	d0c5      	beq.n	8012fce <_vfiprintf_r+0x176>
 8013042:	9105      	str	r1, [sp, #20]
 8013044:	e7c3      	b.n	8012fce <_vfiprintf_r+0x176>
 8013046:	fb0c 2101 	mla	r1, ip, r1, r2
 801304a:	4604      	mov	r4, r0
 801304c:	2301      	movs	r3, #1
 801304e:	e7f0      	b.n	8013032 <_vfiprintf_r+0x1da>
 8013050:	ab03      	add	r3, sp, #12
 8013052:	9300      	str	r3, [sp, #0]
 8013054:	462a      	mov	r2, r5
 8013056:	4b16      	ldr	r3, [pc, #88]	; (80130b0 <_vfiprintf_r+0x258>)
 8013058:	a904      	add	r1, sp, #16
 801305a:	4630      	mov	r0, r6
 801305c:	f7fd fae4 	bl	8010628 <_printf_float>
 8013060:	4607      	mov	r7, r0
 8013062:	1c78      	adds	r0, r7, #1
 8013064:	d1d6      	bne.n	8013014 <_vfiprintf_r+0x1bc>
 8013066:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013068:	07d9      	lsls	r1, r3, #31
 801306a:	d405      	bmi.n	8013078 <_vfiprintf_r+0x220>
 801306c:	89ab      	ldrh	r3, [r5, #12]
 801306e:	059a      	lsls	r2, r3, #22
 8013070:	d402      	bmi.n	8013078 <_vfiprintf_r+0x220>
 8013072:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013074:	f7f2 ff30 	bl	8005ed8 <__retarget_lock_release_recursive>
 8013078:	89ab      	ldrh	r3, [r5, #12]
 801307a:	065b      	lsls	r3, r3, #25
 801307c:	f53f af12 	bmi.w	8012ea4 <_vfiprintf_r+0x4c>
 8013080:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013082:	e711      	b.n	8012ea8 <_vfiprintf_r+0x50>
 8013084:	ab03      	add	r3, sp, #12
 8013086:	9300      	str	r3, [sp, #0]
 8013088:	462a      	mov	r2, r5
 801308a:	4b09      	ldr	r3, [pc, #36]	; (80130b0 <_vfiprintf_r+0x258>)
 801308c:	a904      	add	r1, sp, #16
 801308e:	4630      	mov	r0, r6
 8013090:	f7fd fd6e 	bl	8010b70 <_printf_i>
 8013094:	e7e4      	b.n	8013060 <_vfiprintf_r+0x208>
 8013096:	bf00      	nop
 8013098:	08014070 	.word	0x08014070
 801309c:	08014090 	.word	0x08014090
 80130a0:	08014050 	.word	0x08014050
 80130a4:	080143d4 	.word	0x080143d4
 80130a8:	080143de 	.word	0x080143de
 80130ac:	08010629 	.word	0x08010629
 80130b0:	08012e33 	.word	0x08012e33
 80130b4:	080143da 	.word	0x080143da

080130b8 <_putc_r>:
 80130b8:	b570      	push	{r4, r5, r6, lr}
 80130ba:	460d      	mov	r5, r1
 80130bc:	4614      	mov	r4, r2
 80130be:	4606      	mov	r6, r0
 80130c0:	b118      	cbz	r0, 80130ca <_putc_r+0x12>
 80130c2:	6983      	ldr	r3, [r0, #24]
 80130c4:	b90b      	cbnz	r3, 80130ca <_putc_r+0x12>
 80130c6:	f7fd f84f 	bl	8010168 <__sinit>
 80130ca:	4b1c      	ldr	r3, [pc, #112]	; (801313c <_putc_r+0x84>)
 80130cc:	429c      	cmp	r4, r3
 80130ce:	d124      	bne.n	801311a <_putc_r+0x62>
 80130d0:	6874      	ldr	r4, [r6, #4]
 80130d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80130d4:	07d8      	lsls	r0, r3, #31
 80130d6:	d405      	bmi.n	80130e4 <_putc_r+0x2c>
 80130d8:	89a3      	ldrh	r3, [r4, #12]
 80130da:	0599      	lsls	r1, r3, #22
 80130dc:	d402      	bmi.n	80130e4 <_putc_r+0x2c>
 80130de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80130e0:	f7f2 fee6 	bl	8005eb0 <__retarget_lock_acquire_recursive>
 80130e4:	68a3      	ldr	r3, [r4, #8]
 80130e6:	3b01      	subs	r3, #1
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	60a3      	str	r3, [r4, #8]
 80130ec:	da05      	bge.n	80130fa <_putc_r+0x42>
 80130ee:	69a2      	ldr	r2, [r4, #24]
 80130f0:	4293      	cmp	r3, r2
 80130f2:	db1c      	blt.n	801312e <_putc_r+0x76>
 80130f4:	b2eb      	uxtb	r3, r5
 80130f6:	2b0a      	cmp	r3, #10
 80130f8:	d019      	beq.n	801312e <_putc_r+0x76>
 80130fa:	6823      	ldr	r3, [r4, #0]
 80130fc:	1c5a      	adds	r2, r3, #1
 80130fe:	6022      	str	r2, [r4, #0]
 8013100:	701d      	strb	r5, [r3, #0]
 8013102:	b2ed      	uxtb	r5, r5
 8013104:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013106:	07da      	lsls	r2, r3, #31
 8013108:	d405      	bmi.n	8013116 <_putc_r+0x5e>
 801310a:	89a3      	ldrh	r3, [r4, #12]
 801310c:	059b      	lsls	r3, r3, #22
 801310e:	d402      	bmi.n	8013116 <_putc_r+0x5e>
 8013110:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013112:	f7f2 fee1 	bl	8005ed8 <__retarget_lock_release_recursive>
 8013116:	4628      	mov	r0, r5
 8013118:	bd70      	pop	{r4, r5, r6, pc}
 801311a:	4b09      	ldr	r3, [pc, #36]	; (8013140 <_putc_r+0x88>)
 801311c:	429c      	cmp	r4, r3
 801311e:	d101      	bne.n	8013124 <_putc_r+0x6c>
 8013120:	68b4      	ldr	r4, [r6, #8]
 8013122:	e7d6      	b.n	80130d2 <_putc_r+0x1a>
 8013124:	4b07      	ldr	r3, [pc, #28]	; (8013144 <_putc_r+0x8c>)
 8013126:	429c      	cmp	r4, r3
 8013128:	bf08      	it	eq
 801312a:	68f4      	ldreq	r4, [r6, #12]
 801312c:	e7d1      	b.n	80130d2 <_putc_r+0x1a>
 801312e:	4629      	mov	r1, r5
 8013130:	4622      	mov	r2, r4
 8013132:	4630      	mov	r0, r6
 8013134:	f7fe f8c8 	bl	80112c8 <__swbuf_r>
 8013138:	4605      	mov	r5, r0
 801313a:	e7e3      	b.n	8013104 <_putc_r+0x4c>
 801313c:	08014070 	.word	0x08014070
 8013140:	08014090 	.word	0x08014090
 8013144:	08014050 	.word	0x08014050

08013148 <_read_r>:
 8013148:	b538      	push	{r3, r4, r5, lr}
 801314a:	4d07      	ldr	r5, [pc, #28]	; (8013168 <_read_r+0x20>)
 801314c:	4604      	mov	r4, r0
 801314e:	4608      	mov	r0, r1
 8013150:	4611      	mov	r1, r2
 8013152:	2200      	movs	r2, #0
 8013154:	602a      	str	r2, [r5, #0]
 8013156:	461a      	mov	r2, r3
 8013158:	f7f2 fd2a 	bl	8005bb0 <_read>
 801315c:	1c43      	adds	r3, r0, #1
 801315e:	d102      	bne.n	8013166 <_read_r+0x1e>
 8013160:	682b      	ldr	r3, [r5, #0]
 8013162:	b103      	cbz	r3, 8013166 <_read_r+0x1e>
 8013164:	6023      	str	r3, [r4, #0]
 8013166:	bd38      	pop	{r3, r4, r5, pc}
 8013168:	20005cb4 	.word	0x20005cb4

0801316c <__assert_func>:
 801316c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801316e:	4614      	mov	r4, r2
 8013170:	461a      	mov	r2, r3
 8013172:	4b09      	ldr	r3, [pc, #36]	; (8013198 <__assert_func+0x2c>)
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	4605      	mov	r5, r0
 8013178:	68d8      	ldr	r0, [r3, #12]
 801317a:	b14c      	cbz	r4, 8013190 <__assert_func+0x24>
 801317c:	4b07      	ldr	r3, [pc, #28]	; (801319c <__assert_func+0x30>)
 801317e:	9100      	str	r1, [sp, #0]
 8013180:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013184:	4906      	ldr	r1, [pc, #24]	; (80131a0 <__assert_func+0x34>)
 8013186:	462b      	mov	r3, r5
 8013188:	f000 f80e 	bl	80131a8 <fiprintf>
 801318c:	f7fc ff86 	bl	801009c <abort>
 8013190:	4b04      	ldr	r3, [pc, #16]	; (80131a4 <__assert_func+0x38>)
 8013192:	461c      	mov	r4, r3
 8013194:	e7f3      	b.n	801317e <__assert_func+0x12>
 8013196:	bf00      	nop
 8013198:	2000006c 	.word	0x2000006c
 801319c:	080143e5 	.word	0x080143e5
 80131a0:	080143f2 	.word	0x080143f2
 80131a4:	08014420 	.word	0x08014420

080131a8 <fiprintf>:
 80131a8:	b40e      	push	{r1, r2, r3}
 80131aa:	b503      	push	{r0, r1, lr}
 80131ac:	4601      	mov	r1, r0
 80131ae:	ab03      	add	r3, sp, #12
 80131b0:	4805      	ldr	r0, [pc, #20]	; (80131c8 <fiprintf+0x20>)
 80131b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80131b6:	6800      	ldr	r0, [r0, #0]
 80131b8:	9301      	str	r3, [sp, #4]
 80131ba:	f7ff fe4d 	bl	8012e58 <_vfiprintf_r>
 80131be:	b002      	add	sp, #8
 80131c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80131c4:	b003      	add	sp, #12
 80131c6:	4770      	bx	lr
 80131c8:	2000006c 	.word	0x2000006c

080131cc <_fstat_r>:
 80131cc:	b538      	push	{r3, r4, r5, lr}
 80131ce:	4d07      	ldr	r5, [pc, #28]	; (80131ec <_fstat_r+0x20>)
 80131d0:	2300      	movs	r3, #0
 80131d2:	4604      	mov	r4, r0
 80131d4:	4608      	mov	r0, r1
 80131d6:	4611      	mov	r1, r2
 80131d8:	602b      	str	r3, [r5, #0]
 80131da:	f7f2 fd2e 	bl	8005c3a <_fstat>
 80131de:	1c43      	adds	r3, r0, #1
 80131e0:	d102      	bne.n	80131e8 <_fstat_r+0x1c>
 80131e2:	682b      	ldr	r3, [r5, #0]
 80131e4:	b103      	cbz	r3, 80131e8 <_fstat_r+0x1c>
 80131e6:	6023      	str	r3, [r4, #0]
 80131e8:	bd38      	pop	{r3, r4, r5, pc}
 80131ea:	bf00      	nop
 80131ec:	20005cb4 	.word	0x20005cb4

080131f0 <_isatty_r>:
 80131f0:	b538      	push	{r3, r4, r5, lr}
 80131f2:	4d06      	ldr	r5, [pc, #24]	; (801320c <_isatty_r+0x1c>)
 80131f4:	2300      	movs	r3, #0
 80131f6:	4604      	mov	r4, r0
 80131f8:	4608      	mov	r0, r1
 80131fa:	602b      	str	r3, [r5, #0]
 80131fc:	f7f2 fd2d 	bl	8005c5a <_isatty>
 8013200:	1c43      	adds	r3, r0, #1
 8013202:	d102      	bne.n	801320a <_isatty_r+0x1a>
 8013204:	682b      	ldr	r3, [r5, #0]
 8013206:	b103      	cbz	r3, 801320a <_isatty_r+0x1a>
 8013208:	6023      	str	r3, [r4, #0]
 801320a:	bd38      	pop	{r3, r4, r5, pc}
 801320c:	20005cb4 	.word	0x20005cb4

08013210 <__ascii_mbtowc>:
 8013210:	b082      	sub	sp, #8
 8013212:	b901      	cbnz	r1, 8013216 <__ascii_mbtowc+0x6>
 8013214:	a901      	add	r1, sp, #4
 8013216:	b142      	cbz	r2, 801322a <__ascii_mbtowc+0x1a>
 8013218:	b14b      	cbz	r3, 801322e <__ascii_mbtowc+0x1e>
 801321a:	7813      	ldrb	r3, [r2, #0]
 801321c:	600b      	str	r3, [r1, #0]
 801321e:	7812      	ldrb	r2, [r2, #0]
 8013220:	1e10      	subs	r0, r2, #0
 8013222:	bf18      	it	ne
 8013224:	2001      	movne	r0, #1
 8013226:	b002      	add	sp, #8
 8013228:	4770      	bx	lr
 801322a:	4610      	mov	r0, r2
 801322c:	e7fb      	b.n	8013226 <__ascii_mbtowc+0x16>
 801322e:	f06f 0001 	mvn.w	r0, #1
 8013232:	e7f8      	b.n	8013226 <__ascii_mbtowc+0x16>

08013234 <memmove>:
 8013234:	4288      	cmp	r0, r1
 8013236:	b510      	push	{r4, lr}
 8013238:	eb01 0402 	add.w	r4, r1, r2
 801323c:	d902      	bls.n	8013244 <memmove+0x10>
 801323e:	4284      	cmp	r4, r0
 8013240:	4623      	mov	r3, r4
 8013242:	d807      	bhi.n	8013254 <memmove+0x20>
 8013244:	1e43      	subs	r3, r0, #1
 8013246:	42a1      	cmp	r1, r4
 8013248:	d008      	beq.n	801325c <memmove+0x28>
 801324a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801324e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013252:	e7f8      	b.n	8013246 <memmove+0x12>
 8013254:	4402      	add	r2, r0
 8013256:	4601      	mov	r1, r0
 8013258:	428a      	cmp	r2, r1
 801325a:	d100      	bne.n	801325e <memmove+0x2a>
 801325c:	bd10      	pop	{r4, pc}
 801325e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013262:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013266:	e7f7      	b.n	8013258 <memmove+0x24>

08013268 <_realloc_r>:
 8013268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801326c:	4680      	mov	r8, r0
 801326e:	4614      	mov	r4, r2
 8013270:	460e      	mov	r6, r1
 8013272:	b921      	cbnz	r1, 801327e <_realloc_r+0x16>
 8013274:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013278:	4611      	mov	r1, r2
 801327a:	f7fd b8c1 	b.w	8010400 <_malloc_r>
 801327e:	b92a      	cbnz	r2, 801328c <_realloc_r+0x24>
 8013280:	f7fd f852 	bl	8010328 <_free_r>
 8013284:	4625      	mov	r5, r4
 8013286:	4628      	mov	r0, r5
 8013288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801328c:	f000 f828 	bl	80132e0 <_malloc_usable_size_r>
 8013290:	4284      	cmp	r4, r0
 8013292:	4607      	mov	r7, r0
 8013294:	d802      	bhi.n	801329c <_realloc_r+0x34>
 8013296:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801329a:	d812      	bhi.n	80132c2 <_realloc_r+0x5a>
 801329c:	4621      	mov	r1, r4
 801329e:	4640      	mov	r0, r8
 80132a0:	f7fd f8ae 	bl	8010400 <_malloc_r>
 80132a4:	4605      	mov	r5, r0
 80132a6:	2800      	cmp	r0, #0
 80132a8:	d0ed      	beq.n	8013286 <_realloc_r+0x1e>
 80132aa:	42bc      	cmp	r4, r7
 80132ac:	4622      	mov	r2, r4
 80132ae:	4631      	mov	r1, r6
 80132b0:	bf28      	it	cs
 80132b2:	463a      	movcs	r2, r7
 80132b4:	f7fd f822 	bl	80102fc <memcpy>
 80132b8:	4631      	mov	r1, r6
 80132ba:	4640      	mov	r0, r8
 80132bc:	f7fd f834 	bl	8010328 <_free_r>
 80132c0:	e7e1      	b.n	8013286 <_realloc_r+0x1e>
 80132c2:	4635      	mov	r5, r6
 80132c4:	e7df      	b.n	8013286 <_realloc_r+0x1e>

080132c6 <__ascii_wctomb>:
 80132c6:	b149      	cbz	r1, 80132dc <__ascii_wctomb+0x16>
 80132c8:	2aff      	cmp	r2, #255	; 0xff
 80132ca:	bf85      	ittet	hi
 80132cc:	238a      	movhi	r3, #138	; 0x8a
 80132ce:	6003      	strhi	r3, [r0, #0]
 80132d0:	700a      	strbls	r2, [r1, #0]
 80132d2:	f04f 30ff 	movhi.w	r0, #4294967295
 80132d6:	bf98      	it	ls
 80132d8:	2001      	movls	r0, #1
 80132da:	4770      	bx	lr
 80132dc:	4608      	mov	r0, r1
 80132de:	4770      	bx	lr

080132e0 <_malloc_usable_size_r>:
 80132e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80132e4:	1f18      	subs	r0, r3, #4
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	bfbc      	itt	lt
 80132ea:	580b      	ldrlt	r3, [r1, r0]
 80132ec:	18c0      	addlt	r0, r0, r3
 80132ee:	4770      	bx	lr

080132f0 <_init>:
 80132f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132f2:	bf00      	nop
 80132f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80132f6:	bc08      	pop	{r3}
 80132f8:	469e      	mov	lr, r3
 80132fa:	4770      	bx	lr

080132fc <_fini>:
 80132fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132fe:	bf00      	nop
 8013300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013302:	bc08      	pop	{r3}
 8013304:	469e      	mov	lr, r3
 8013306:	4770      	bx	lr
